This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where line numbers have been added.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/app/globals.css, src/components/ui/**/*.tsx, src/components/ui/**/*.ts, src/components/features-section.tsx, src/components/hero-section-v2.tsx, src/components/stats-section.tsx, *.md
- Files matching these patterns are excluded: node_modules/**, .next/**, dist/**, build/**
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
DEPLOYMENT_GUIDE.md
src/app/globals.css
src/components/features-section.tsx
src/components/hero-section-v2.tsx
src/components/stats-section.tsx
src/components/ui/alert.tsx
src/components/ui/avatar.tsx
src/components/ui/badge.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/checkbox.tsx
src/components/ui/company-research-card.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/empty-state.tsx
src/components/ui/form-feedback.tsx
src/components/ui/icon-system.tsx
src/components/ui/index.ts
src/components/ui/input.tsx
src/components/ui/job-match-explanation.tsx
src/components/ui/label.tsx
src/components/ui/mobile-menu.tsx
src/components/ui/preview-empty.tsx
src/components/ui/progress.tsx
src/components/ui/select.tsx
src/components/ui/separator.tsx
src/components/ui/skeleton.tsx
src/components/ui/spinner.tsx
src/components/ui/tabs.tsx
src/components/ui/textarea.tsx
src/components/ui/toast-system.tsx
src/components/ui/toast.tsx
src/components/ui/use-toast.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/components/hero-section-v2.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { signIn } from 'next-auth/react'
  5: import { ArrowRight } from 'lucide-react'
  6: 
  7: // Company logos data for floating pills - MORE RECOGNIZABLE COMPANIES
  8: const COMPANY_PILLS = [
  9:   { name: 'Netflix', logo: '📺', color: '#E50914', delay: 0 },
 10:   { name: 'Amazon', logo: '📦', color: '#FF9900', delay: 0.5 },
 11:   { name: 'Spotify', logo: '🎵', color: '#1DB954', delay: 1 },
 12:   { name: 'LinkedIn', logo: '💼', color: '#0077B5', delay: 1.5 },
 13:   { name: 'Uber', logo: '🚗', color: '#000000', delay: 2 },
 14:   { name: 'Airbnb', logo: '🏠', color: '#FF5A5F', delay: 2.5 },
 15:   { name: 'Meta', logo: '📘', color: '#0075FF', delay: 3 },
 16:   { name: 'Google', logo: '🔍', color: '#FFFFFF', delay: 3.5, textColor: '#000000' },
 17:   { name: 'Apple', logo: '🍎', color: '#FFFFFF', delay: 4, textColor: '#000000' },
 18:   { name: 'Tesla', logo: '⚡', color: '#E82127', delay: 4.5 },
 19:   { name: 'Goldman', logo: '💰', color: '#1F1F1F', delay: 5, textColor: '#FFFFFF' },
 20:   { name: 'PepsiCo', logo: '🥤', color: 'linear-gradient(135deg, #004B93 0%, #E32934 100%)', delay: 5.5 },
 21: ]
 22: 
 23: // Pill positions (scattered layout) - MORE POSITIONS FOR MORE COMPANIES
 24: const PILL_POSITIONS = [
 25:   { top: '20%', left: '5%', rotation: -8 },
 26:   { top: '25%', right: '10%', rotation: 5 },
 27:   { top: '40%', left: '12%', rotation: -3 },
 28:   { bottom: '40%', left: '3%', rotation: 7 },
 29:   { top: '50%', right: '6%', rotation: -5 },
 30:   { bottom: '30%', left: '15%', rotation: 4 },
 31:   { bottom: '35%', right: '12%', rotation: -6 },
 32:   { top: '60%', left: '20%', rotation: 3 },
 33:   { bottom: '50%', right: '3%', rotation: -4 },
 34:   { top: '70%', right: '18%', rotation: 6 },
 35:   { bottom: '20%', left: '25%', rotation: -7 },
 36:   { top: '35%', right: '25%', rotation: 8 },
 37: ]
 38: 
 39: export function HeroSectionV2() {
 40:   const [mounted, setMounted] = useState(false)
 41: 
 42:   useEffect(() => {
 43:     setMounted(true)
 44:   }, [])
 45: 
 46:   const handleGetStarted = async () => {
 47:     const base = typeof window !== 'undefined' ? window.location.origin : ''
 48:     const target = `${base}/auth/signin?callbackUrl=${encodeURIComponent(`${base}/dashboard`)}`
 49:     window.location.href = target
 50:   }
 51: 
 52:   const handleGoogle = async () => {
 53:     try {
 54:       await signIn('google', { callbackUrl: '/dashboard' })
 55:     } catch {}
 56:   }
 57: 
 58:   return (
 59:     <section className="landing-page relative min-h-screen overflow-hidden flex flex-col items-center justify-center px-6 py-12">
 60:       {/* Background with theme-aware gradients */}
 61:       <div 
 62:         className="absolute inset-0 -z-10 bg-background"
 63:         style={{
 64:           background: `
 65:             radial-gradient(circle at 20% 30%, hsl(var(--primary) / 0.08) 0%, transparent 50%),
 66:             radial-gradient(circle at 80% 70%, hsl(var(--secondary) / 0.08) 0%, transparent 50%),
 67:             hsl(var(--background))
 68:           `
 69:         }}
 70:       />
 71: 
 72:       {/* Scattered Company Pills */}
 73:       {mounted && (
 74:         <div className="company-pills absolute inset-0 pointer-events-none">
 75:           {COMPANY_PILLS.map((pill, index) => {
 76:             const position = PILL_POSITIONS[index]
 77:             return (
 78:               <div
 79:                 key={pill.name}
 80:                 className="company-pill absolute flex items-center gap-2 px-5 py-3 rounded-full shadow-lg pointer-events-auto cursor-pointer transition-all duration-300 hover:scale-110 hover:shadow-xl"
 81:                 style={{
 82:                   ...position,
 83:                   background: pill.color,
 84:                   color: pill.textColor || '#FFFFFF',
 85:                   transform: `rotate(${position.rotation}deg)`,
 86:                   animation: `float 6s ease-in-out infinite`,
 87:                   animationDelay: `${pill.delay}s`,
 88:                 } as React.CSSProperties}
 89:               >
 90:                 <span className="text-xl">{pill.logo}</span>
 91:                 <span className="text-sm font-medium">{pill.name}</span>
 92:               </div>
 93:             )
 94:           })}
 95:         </div>
 96:       )}
 97: 
 98:       {/* Hero Content */}
 99:       <div className="landing-hero relative z-10 text-center max-w-2xl mx-auto">
100:         <h1 className="text-5xl md:text-6xl font-bold text-white leading-tight mb-6">
101:           Find Your Dream Job{' '}
102:           <span className="inline-block animate-bounce-slow">🚀</span>
103:         </h1>
104:         <p className="text-xl font-bold text-white mb-8 leading-relaxed">
105:           AI-powered resume optimization, company research, and application tracking—all in one platform designed for modern job seekers.
106:         </p>
107: 
108:         {/* CTA Button */}
109:         <button
110:           onClick={handleGetStarted}
111:           className="landing-cta group inline-flex items-center gap-3 px-12 py-4 bg-gradient-to-r from-[#5424FD] to-[#4318E8] text-white font-bold text-lg rounded-full shadow-lg hover:shadow-2xl transition-all duration-300 hover:scale-105 active:scale-95 relative overflow-hidden"
112:         >
113:           <span className="relative z-10">Find Your Dream Job</span>
114:           <ArrowRight className="w-5 h-5 relative z-10 group-hover:translate-x-1 transition-transform" />
115:           
116:           {/* Shine effect */}
117:           <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
118:         </button>
119: 
120:         <p className="mt-6 text-sm font-semibold text-white/70">
121:           Join 10,000+ job seekers who landed their dream roles
122:         </p>
123:       </div>
124: 
125:       {/* SSO Options */}
126:       <div className="relative z-10 mt-12 max-w-md w-full">
127:         <div className="text-center mb-4">
128:           <p className="text-xs font-semibold text-white/60 uppercase tracking-wider">Or continue with</p>
129:         </div>
130:         <div className="flex items-center justify-center gap-4">
131:           <button
132:             onClick={handleGoogle}
133:             className="glass-card px-6 py-3 rounded-xl hover:scale-105 transition-all duration-300 flex items-center gap-2"
134:           >
135:             <svg className="w-5 h-5" viewBox="0 0 24 24">
136:               <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
137:               <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
138:               <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
139:               <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
140:             </svg>
141:             <span className="text-sm font-medium text-white">Google</span>
142:           </button>
143:           <button
144:             onClick={() => signIn('apple', { callbackUrl: '/dashboard' })}
145:             className="glass-card px-6 py-3 rounded-xl hover:scale-105 transition-all duration-300 flex items-center gap-2"
146:           >
147:             <svg className="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor">
148:               <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
149:             </svg>
150:             <span className="text-sm font-medium text-white">Apple</span>
151:           </button>
152:           <button
153:             onClick={() => signIn('azure-ad', { callbackUrl: '/dashboard' })}
154:             className="glass-card px-6 py-3 rounded-xl hover:scale-105 transition-all duration-300 flex items-center gap-2"
155:           >
156:             <svg className="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor">
157:               <path d="M11.5,3L2,5.5V11H11.5V3M22,3L12.5,5.5V11H22V3M11.5,13H2V18.5L11.5,21V13M12.5,13V21L22,18.5V13H12.5Z"/>
158:             </svg>
159:             <span className="text-sm font-medium text-white">Microsoft</span>
160:           </button>
161:         </div>
162:       </div>
163: 
164:       <style jsx>{`
165:         @keyframes float {
166:           0%, 100% { 
167:             transform: translateY(0); 
168:           }
169:           50% { 
170:             transform: translateY(-20px); 
171:           }
172:         }
173: 
174:         @keyframes bounce-slow {
175:           0%, 100% { transform: translateY(0); }
176:           50% { transform: translateY(-10px); }
177:         }
178: 
179:         .animate-bounce-slow {
180:           animation: bounce-slow 2s ease-in-out infinite;
181:         }
182: 
183:         .glass-card {
184:           background: rgba(255, 255, 255, 0.1);
185:           backdrop-filter: blur(10px);
186:           border: 1px solid rgba(255, 255, 255, 0.2);
187:         }
188: 
189:         .glass-card:hover {
190:           background: rgba(255, 255, 255, 0.15);
191:           border-color: rgba(255, 255, 255, 0.3);
192:         }
193: 
194:         @media (max-width: 768px) {
195:           .company-pill {
196:             display: none;
197:           }
198:         }
199:       `}</style>
200:     </section>
201:   )
202: }
</file>

<file path="src/components/stats-section.tsx">
 1: 'use client'
 2: 
 3: import { Card, CardContent } from '@/components/ui/card'
 4: 
 5: const stats = [
 6:   {
 7:     number: '10,000+',
 8:     label: 'Job Seekers',
 9:     description: 'Active users landing jobs',
10:   },
11:   {
12:     number: '85%',
13:     label: 'Success Rate',
14:     description: 'Users get interviews within 30 days',
15:   },
16:   {
17:     number: '50+',
18:     label: 'Hours Saved',
19:     description: 'Per job application on average',
20:   },
21:   {
22:     number: '500+',
23:     label: 'Companies',
24:     description: 'In our research database',
25:   },
26: ]
27: 
28: export function StatsSection() {
29:   return (
30:     <section className="py-24 bg-gray-50">
31:       <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
32:         <div className="mx-auto max-w-3xl text-center">
33:           <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl">
34:             Trusted by job seekers worldwide
35:           </h2>
36:           <p className="mt-4 text-lg text-gray-600">
37:             Join thousands of professionals who've transformed their job search with Career Lever AI.
38:           </p>
39:         </div>
40: 
41:         <div className="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-8 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-4">
42:           {stats.map((stat, index) => (
43:             <Card key={index} className="text-center border-0 shadow-lg">
44:               <CardContent className="pt-8 pb-8">
45:                 <div className="text-4xl font-bold text-blue-600 sm:text-5xl">
46:                   {stat.number}
47:                 </div>
48:                 <div className="mt-4 text-lg font-semibold text-foreground">
49:                   {stat.label}
50:                 </div>
51:                 <div className="mt-2 text-sm text-gray-600">
52:                   {stat.description}
53:                 </div>
54:               </CardContent>
55:             </Card>
56:           ))}
57:         </div>
58: 
59:         {/* Testimonial */}
60:         <div className="mx-auto mt-16 max-w-3xl text-center">
61:           <blockquote className="text-lg font-medium text-foreground">
62:             "Career Lever AI completely transformed my job search. I went from getting no responses to having multiple interviews within two weeks. The AI resume customization is incredible!"
63:           </blockquote>
64:           <div className="mt-6">
65:             <div className="font-semibold text-foreground">Sarah Johnson</div>
66:             <div className="text-sm text-gray-600">Software Engineer at Google</div>
67:           </div>
68:         </div>
69:       </div>
70:     </section>
71:   )
72: }
</file>

<file path="src/components/ui/alert.tsx">
 1: import * as React from "react"
 2: import { cva, type VariantProps } from "class-variance-authority"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const alertVariants = cva(
 7:   "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
 8:   {
 9:     variants: {
10:       variant: {
11:         default: "bg-background text-foreground",
12:         destructive:
13:           "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
14:       },
15:     },
16:     defaultVariants: {
17:       variant: "default",
18:     },
19:   }
20: )
21: 
22: const Alert = React.forwardRef<
23:   HTMLDivElement,
24:   React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
25: >(({ className, variant, ...props }, ref) => (
26:   <div
27:     ref={ref}
28:     role="alert"
29:     className={cn(alertVariants({ variant }), className)}
30:     {...props}
31:   />
32: ))
33: Alert.displayName = "Alert"
34: 
35: const AlertTitle = React.forwardRef<
36:   HTMLParagraphElement,
37:   React.HTMLAttributes<HTMLHeadingElement>
38: >(({ className, ...props }, ref) => (
39:   <h5
40:     ref={ref}
41:     className={cn("mb-1 font-medium leading-none tracking-tight", className)}
42:     {...props}
43:   />
44: ))
45: AlertTitle.displayName = "AlertTitle"
46: 
47: const AlertDescription = React.forwardRef<
48:   HTMLParagraphElement,
49:   React.HTMLAttributes<HTMLParagraphElement>
50: >(({ className, ...props }, ref) => (
51:   <div
52:     ref={ref}
53:     className={cn("text-sm [&_p]:leading-relaxed", className)}
54:     {...props}
55:   />
56: ))
57: AlertDescription.displayName = "AlertDescription"
58: 
59: export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/avatar.tsx">
 1: import * as React from "react"
 2: import * as AvatarPrimitive from "@radix-ui/react-avatar"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const Avatar = React.forwardRef<
 7:   React.ElementRef<typeof AvatarPrimitive.Root>,
 8:   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
 9: >(({ className, ...props }, ref) => (
10:   <AvatarPrimitive.Root
11:     ref={ref}
12:     className={cn(
13:       "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
14:       className
15:     )}
16:     {...props}
17:   />
18: ))
19: Avatar.displayName = AvatarPrimitive.Root.displayName
20: 
21: const AvatarImage = React.forwardRef<
22:   React.ElementRef<typeof AvatarPrimitive.Image>,
23:   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
24: >(({ className, ...props }, ref) => (
25:   <AvatarPrimitive.Image
26:     ref={ref}
27:     className={cn("aspect-square h-full w-full", className)}
28:     {...props}
29:   />
30: ))
31: AvatarImage.displayName = AvatarPrimitive.Image.displayName
32: 
33: const AvatarFallback = React.forwardRef<
34:   React.ElementRef<typeof AvatarPrimitive.Fallback>,
35:   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
36: >(({ className, ...props }, ref) => (
37:   <AvatarPrimitive.Fallback
38:     ref={ref}
39:     className={cn(
40:       "flex h-full w-full items-center justify-center rounded-full bg-muted",
41:       className
42:     )}
43:     {...props}
44:   />
45: ))
46: AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName
47: 
48: export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
 1: import * as React from "react"
 2: import { cva, type VariantProps } from "class-variance-authority"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const badgeVariants = cva(
 7:   "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
 8:   {
 9:     variants: {
10:       variant: {
11:         default:
12:           "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
13:         secondary:
14:           "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
15:         destructive:
16:           "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
17:         outline: "text-foreground",
18:       },
19:     },
20:     defaultVariants: {
21:       variant: "default",
22:     },
23:   }
24: )
25: 
26: export interface BadgeProps
27:   extends React.HTMLAttributes<HTMLDivElement>,
28:     VariantProps<typeof badgeVariants> {}
29: 
30: function Badge({ className, variant, ...props }: BadgeProps) {
31:   return (
32:     <div className={cn(badgeVariants({ variant }), className)} {...props} />
33:   )
34: }
35: 
36: export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
 1: import * as React from "react"
 2: import { Slot } from "@radix-ui/react-slot"
 3: import { cva, type VariantProps } from "class-variance-authority"
 4: 
 5: import { cn } from "@/lib/utils"
 6: 
 7: const buttonVariants = cva(
 8:   "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:focus-ring focus-visible:border-ring disabled:pointer-events-none disabled:opacity-50",
 9:   {
10:     variants: {
11:       variant: {
12:         default: "bg-primary text-primary-foreground hover:bg-primary/90",
13:         destructive:
14:           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
15:         outline:
16:           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
17:         secondary:
18:           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
19:         ghost: "hover:bg-accent hover:text-accent-foreground",
20:         link: "text-primary underline-offset-4 hover:underline",
21:       },
22:       size: {
23:         default: "h-10 px-4 py-2",
24:         sm: "h-9 rounded-md px-3",
25:         lg: "h-11 rounded-md px-8",
26:         icon: "h-10 w-10",
27:       },
28:     },
29:     defaultVariants: {
30:       variant: "default",
31:       size: "default",
32:     },
33:   }
34: )
35: 
36: export interface ButtonProps
37:   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
38:     VariantProps<typeof buttonVariants> {
39:   asChild?: boolean
40: }
41: 
42: const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
43:   ({ className, variant, size, asChild = false, ...props }, ref) => {
44:     const Comp = asChild ? Slot : "button"
45:     return (
46:       <Comp
47:         className={cn(buttonVariants({ variant, size, className }))}
48:         ref={ref}
49:         {...props}
50:       />
51:     )
52:   }
53: )
54: Button.displayName = "Button"
55: 
56: export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
 1: import * as React from "react"
 2: 
 3: import { cn } from "@/lib/utils"
 4: 
 5: const Card = React.forwardRef<
 6:   HTMLDivElement,
 7:   React.HTMLAttributes<HTMLDivElement>
 8: >(({ className, ...props }, ref) => (
 9:   <div
10:     ref={ref}
11:     className={cn(
12:       "rounded-lg border bg-card text-card-foreground shadow-sm",
13:       className
14:     )}
15:     {...props}
16:   />
17: ))
18: Card.displayName = "Card"
19: 
20: const CardHeader = React.forwardRef<
21:   HTMLDivElement,
22:   React.HTMLAttributes<HTMLDivElement>
23: >(({ className, ...props }, ref) => (
24:   <div
25:     ref={ref}
26:     className={cn("flex flex-col space-y-1.5 p-6", className)}
27:     {...props}
28:   />
29: ))
30: CardHeader.displayName = "CardHeader"
31: 
32: const CardTitle = React.forwardRef<
33:   HTMLParagraphElement,
34:   React.HTMLAttributes<HTMLHeadingElement>
35: >(({ className, ...props }, ref) => (
36:   <h3
37:     ref={ref}
38:     className={cn(
39:       "text-2xl font-semibold leading-none tracking-tight",
40:       className
41:     )}
42:     {...props}
43:   />
44: ))
45: CardTitle.displayName = "CardTitle"
46: 
47: const CardDescription = React.forwardRef<
48:   HTMLParagraphElement,
49:   React.HTMLAttributes<HTMLParagraphElement>
50: >(({ className, ...props }, ref) => (
51:   <p
52:     ref={ref}
53:     className={cn("text-sm text-muted-foreground", className)}
54:     {...props}
55:   />
56: ))
57: CardDescription.displayName = "CardDescription"
58: 
59: const CardContent = React.forwardRef<
60:   HTMLDivElement,
61:   React.HTMLAttributes<HTMLDivElement>
62: >(({ className, ...props }, ref) => (
63:   <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
64: ))
65: CardContent.displayName = "CardContent"
66: 
67: const CardFooter = React.forwardRef<
68:   HTMLDivElement,
69:   React.HTMLAttributes<HTMLDivElement>
70: >(({ className, ...props }, ref) => (
71:   <div
72:     ref={ref}
73:     className={cn("flex items-center p-6 pt-0", className)}
74:     {...props}
75:   />
76: ))
77: CardFooter.displayName = "CardFooter"
78: 
79: export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/checkbox.tsx">
 1: import * as React from "react"
 2: import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
 3: import { Check } from "lucide-react"
 4: 
 5: import { cn } from "@/lib/utils"
 6: 
 7: const Checkbox = React.forwardRef<
 8:   React.ElementRef<typeof CheckboxPrimitive.Root>,
 9:   React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
10: >(({ className, ...props }, ref) => (
11:   <CheckboxPrimitive.Root
12:     ref={ref}
13:     className={cn(
14:       "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
15:       className
16:     )}
17:     {...props}
18:   >
19:     <CheckboxPrimitive.Indicator
20:       className={cn("flex items-center justify-center text-current")}
21:     >
22:       <Check className="h-4 w-4" />
23:     </CheckboxPrimitive.Indicator>
24:   </CheckboxPrimitive.Root>
25: ))
26: Checkbox.displayName = CheckboxPrimitive.Root.displayName
27: 
28: export { Checkbox }
</file>

<file path="src/components/ui/dialog.tsx">
  1: "use client"
  2: 
  3: import * as React from "react"
  4: import * as DialogPrimitive from "@radix-ui/react-dialog"
  5: import { X } from "lucide-react"
  6: 
  7: import { cn } from "@/lib/utils"
  8: 
  9: const Dialog = DialogPrimitive.Root
 10: 
 11: const DialogTrigger = DialogPrimitive.Trigger
 12: 
 13: const DialogPortal = DialogPrimitive.Portal
 14: 
 15: const DialogOverlay = React.forwardRef<
 16:   React.ElementRef<typeof DialogPrimitive.Overlay>,
 17:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
 18: >(({ className, ...props }, ref) => (
 19:   <DialogPrimitive.Overlay
 20:     ref={ref}
 21:     className={cn(
 22:       "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
 23:       className
 24:     )}
 25:     {...props}
 26:   />
 27: ))
 28: DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
 29: 
 30: interface DialogContentProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> {
 31:   stayOpen?: boolean;
 32:   closeOnInteractOutside?:boolean;
 33: }
 34: 
 35: const DialogContent = React.forwardRef<
 36:   React.ElementRef<typeof DialogPrimitive.Content>,
 37:   DialogContentProps
 38: >(({ className, children, stayOpen = false, closeOnInteractOutside = true, ...props }, ref) => (
 39:   <DialogPortal>
 40:     <DialogOverlay />
 41:     <DialogPrimitive.Content
 42:       ref={ref}
 43:       className={cn(
 44:         "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
 45:         !stayOpen && "data-[state=closed]:slide-out-to-top-[48%]",
 46:         className
 47:       )}
 48:       {...props}
 49:     >
 50:       <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
 51:         <X className="h-4 w-4" />
 52:         <span className="sr-only">Close</span>
 53:       </DialogPrimitive.Close>
 54:       <div className="space-y-4">
 55:         {children}
 56:       </div>
 57:     </DialogPrimitive.Content>
 58:   </DialogPortal>
 59: ))
 60: DialogContent.displayName = DialogPrimitive.Content.displayName
 61: 
 62: const DialogHeader = ({
 63:   className,
 64:   ...props
 65: }: React.HTMLAttributes<HTMLDivElement>) => (
 66:   <div
 67:     className={cn(
 68:       "flex flex-col space-y-1.5 text-center sm:text-left",
 69:       className
 70:     )}
 71:     {...props}
 72:   />
 73: )
 74: DialogHeader.displayName = "DialogHeader"
 75: 
 76: const DialogFooter = ({
 77:   className,
 78:   ...props
 79: }: React.HTMLAttributes<HTMLDivElement>) => (
 80:   <div
 81:     className={cn(
 82:       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
 83:       className
 84:     )}
 85:     {...props}
 86:   />
 87: )
 88: DialogFooter.displayName = "DialogFooter"
 89: 
 90: const DialogTitle = React.forwardRef<
 91:   React.ElementRef<typeof DialogPrimitive.Title>,
 92:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
 93: >(({ className, ...props }, ref) => (
 94:   <DialogPrimitive.Title
 95:     ref={ref}
 96:     className={cn(
 97:       "text-lg font-semibold leading-none tracking-tight",
 98:       className
 99:     )}
100:     {...props}
101:   />
102: ))
103: DialogTitle.displayName = DialogPrimitive.Title.displayName
104: 
105: const DialogDescription = React.forwardRef<
106:   React.ElementRef<typeof DialogPrimitive.Description>,
107:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
108: >(({ className, ...props }, ref) => (
109:   <DialogPrimitive.Description
110:     ref={ref}
111:     className={cn("text-sm text-muted-foreground", className)}
112:     {...props}
113:   />
114: ))
115: DialogDescription.displayName = DialogPrimitive.Description.displayName
116: 
117: export {
118:   Dialog,
119:   DialogPortal,
120:   DialogOverlay,
121:   DialogTrigger,
122:   DialogContent,
123:   DialogHeader,
124:   DialogFooter,
125:   DialogTitle,
126:   DialogDescription,
127: }
</file>

<file path="src/components/ui/dropdown-menu.tsx">
  1: import * as React from "react"
  2: import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
  3: import { Check, ChevronRight, Circle } from "lucide-react"
  4: 
  5: import { cn } from "@/lib/utils"
  6: 
  7: const DropdownMenu = DropdownMenuPrimitive.Root
  8: 
  9: const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
 10: 
 11: const DropdownMenuGroup = DropdownMenuPrimitive.Group
 12: 
 13: const DropdownMenuPortal = DropdownMenuPrimitive.Portal
 14: 
 15: const DropdownMenuSub = DropdownMenuPrimitive.Sub
 16: 
 17: const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup
 18: 
 19: const DropdownMenuSubTrigger = React.forwardRef<
 20:   React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
 21:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
 22:     inset?: boolean
 23:   }
 24: >(({ className, inset, children, ...props }, ref) => (
 25:   <DropdownMenuPrimitive.SubTrigger
 26:     ref={ref}
 27:     className={cn(
 28:       "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
 29:       inset && "pl-8",
 30:       className
 31:     )}
 32:     {...props}
 33:   >
 34:     {children}
 35:     <ChevronRight className="ml-auto h-4 w-4" />
 36:   </DropdownMenuPrimitive.SubTrigger>
 37: ))
 38: DropdownMenuSubTrigger.displayName =
 39:   DropdownMenuPrimitive.SubTrigger.displayName
 40: 
 41: const DropdownMenuSubContent = React.forwardRef<
 42:   React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
 43:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
 44: >(({ className, ...props }, ref) => (
 45:   <DropdownMenuPrimitive.SubContent
 46:     ref={ref}
 47:     className={cn(
 48:       "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 49:       className
 50:     )}
 51:     {...props}
 52:   />
 53: ))
 54: DropdownMenuSubContent.displayName =
 55:   DropdownMenuPrimitive.SubContent.displayName
 56: 
 57: const DropdownMenuContent = React.forwardRef<
 58:   React.ElementRef<typeof DropdownMenuPrimitive.Content>,
 59:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
 60: >(({ className, sideOffset = 4, ...props }, ref) => (
 61:   <DropdownMenuPrimitive.Portal>
 62:     <DropdownMenuPrimitive.Content
 63:       ref={ref}
 64:       sideOffset={sideOffset}
 65:       className={cn(
 66:         "z-50 min-w-[8rem] max-w-[calc(100vw-2rem)] max-h-[calc(100vh-4rem)] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=bottom]:slide-in-from-top-2 data-[state=left]:slide-in-from-right-2 data-[state=right]:slide-in-from-left-2 data-[state=top]:slide-in-from-bottom-2",
 67:         className
 68:       )}
 69:       {...props}
 70:     />
 71:   </DropdownMenuPrimitive.Portal>
 72: ))
 73: DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName
 74: 
 75: const DropdownMenuItem = React.forwardRef<
 76:   React.ElementRef<typeof DropdownMenuPrimitive.Item>,
 77:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
 78:     inset?: boolean
 79:   }
 80: >(({ className, inset, ...props }, ref) => (
 81:   <DropdownMenuPrimitive.Item
 82:     ref={ref}
 83:     className={cn(
 84:       "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
 85:       inset && "pl-8",
 86:       className
 87:     )}
 88:     {...props}
 89:   />
 90: ))
 91: DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName
 92: 
 93: const DropdownMenuCheckboxItem = React.forwardRef<
 94:   React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
 95:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
 96: >(({ className, children, checked, ...props }, ref) => (
 97:   <DropdownMenuPrimitive.CheckboxItem
 98:     ref={ref}
 99:     className={cn(
100:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
101:       className
102:     )}
103:     checked={checked}
104:     {...props}
105:   >
106:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
107:       <DropdownMenuPrimitive.ItemIndicator>
108:         <Check className="h-4 w-4" />
109:       </DropdownMenuPrimitive.ItemIndicator>
110:     </span>
111:     {children}
112:   </DropdownMenuPrimitive.CheckboxItem>
113: ))
114: DropdownMenuCheckboxItem.displayName =
115:   DropdownMenuPrimitive.CheckboxItem.displayName
116: 
117: const DropdownMenuRadioItem = React.forwardRef<
118:   React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
119:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
120: >(({ className, children, ...props }, ref) => (
121:   <DropdownMenuPrimitive.RadioItem
122:     ref={ref}
123:     className={cn(
124:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
125:       className
126:     )}
127:     {...props}
128:   >
129:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
130:       <DropdownMenuPrimitive.ItemIndicator>
131:         <Circle className="h-2 w-2 fill-current" />
132:       </DropdownMenuPrimitive.ItemIndicator>
133:     </span>
134:     {children}
135:   </DropdownMenuPrimitive.RadioItem>
136: ))
137: DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName
138: 
139: const DropdownMenuLabel = React.forwardRef<
140:   React.ElementRef<typeof DropdownMenuPrimitive.Label>,
141:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
142:     inset?: boolean
143:   }
144: >(({ className, inset, ...props }, ref) => (
145:   <DropdownMenuPrimitive.Label
146:     ref={ref}
147:     className={cn(
148:       "px-2 py-1.5 text-sm font-semibold",
149:       inset && "pl-8",
150:       className
151:     )}
152:     {...props}
153:   />
154: ))
155: DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName
156: 
157: const DropdownMenuSeparator = React.forwardRef<
158:   React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
159:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
160: >(({ className, ...props }, ref) => (
161:   <DropdownMenuPrimitive.Separator
162:     ref={ref}
163:     className={cn("-mx-1 my-1 h-px bg-muted", className)}
164:     {...props}
165:   />
166: ))
167: DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName
168: 
169: const DropdownMenuShortcut = ({
170:   className,
171:   ...props
172: }: React.HTMLAttributes<HTMLSpanElement>) => {
173:   return (
174:     <span
175:       className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
176:       {...props}
177:     />
178:   )
179: }
180: DropdownMenuShortcut.displayName = "DropdownMenuShortcut"
181: 
182: export {
183:   DropdownMenu,
184:   DropdownMenuTrigger,
185:   DropdownMenuContent,
186:   DropdownMenuItem,
187:   DropdownMenuCheckboxItem,
188:   DropdownMenuRadioItem,
189:   DropdownMenuLabel,
190:   DropdownMenuSeparator,
191:   DropdownMenuShortcut,
192:   DropdownMenuGroup,
193:   DropdownMenuPortal,
194:   DropdownMenuSub,
195:   DropdownMenuSubContent,
196:   DropdownMenuSubTrigger,
197:   DropdownMenuRadioGroup,
198: }
</file>

<file path="src/components/ui/input.tsx">
 1: import * as React from "react"
 2: 
 3: import { cn } from "@/lib/utils"
 4: 
 5: export interface InputProps
 6:   extends React.InputHTMLAttributes<HTMLInputElement> {}
 7: 
 8: const Input = React.forwardRef<HTMLInputElement, InputProps>(
 9:   ({ className, type, ...props }, ref) => {
10:     return (
11:       <input
12:         type={type}
13:         className={cn(
14:           "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
15:           className
16:         )}
17:         ref={ref}
18:         {...props}
19:       />
20:     )
21:   }
22: )
23: Input.displayName = "Input"
24: 
25: export { Input }
</file>

<file path="src/components/ui/label.tsx">
 1: import * as React from "react"
 2: import * as LabelPrimitive from "@radix-ui/react-label"
 3: import { cva, type VariantProps } from "class-variance-authority"
 4: 
 5: import { cn } from "@/lib/utils"
 6: 
 7: const labelVariants = cva(
 8:   "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
 9: )
10: 
11: const Label = React.forwardRef<
12:   React.ElementRef<typeof LabelPrimitive.Root>,
13:   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
14:     VariantProps<typeof labelVariants>
15: >(({ className, ...props }, ref) => (
16:   <LabelPrimitive.Root
17:     ref={ref}
18:     className={cn(labelVariants(), className)}
19:     {...props}
20:   />
21: ))
22: Label.displayName = LabelPrimitive.Root.displayName
23: 
24: export { Label }
</file>

<file path="src/components/ui/progress.tsx">
 1: import * as React from "react"
 2: import * as ProgressPrimitive from "@radix-ui/react-progress"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const Progress = React.forwardRef<
 7:   React.ElementRef<typeof ProgressPrimitive.Root>,
 8:   React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
 9: >(({ className, value, ...props }, ref) => (
10:   <ProgressPrimitive.Root
11:     ref={ref}
12:     className={cn(
13:       "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
14:       className
15:     )}
16:     {...props}
17:   >
18:     <ProgressPrimitive.Indicator
19:       className="h-full w-full flex-1 bg-primary transition-all"
20:       style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
21:     />
22:   </ProgressPrimitive.Root>
23: ))
24: Progress.displayName = ProgressPrimitive.Root.displayName
25: 
26: export { Progress }
</file>

<file path="src/components/ui/select.tsx">
  1: import * as React from "react"
  2: import * as SelectPrimitive from "@radix-ui/react-select"
  3: import { Check, ChevronDown, ChevronUp } from "lucide-react"
  4: 
  5: import { cn } from "@/lib/utils"
  6: 
  7: const Select = SelectPrimitive.Root
  8: 
  9: const SelectGroup = SelectPrimitive.Group
 10: 
 11: const SelectValue = SelectPrimitive.Value
 12: 
 13: const SelectTrigger = React.forwardRef<
 14:   React.ElementRef<typeof SelectPrimitive.Trigger>,
 15:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
 16: >(({ className, children, ...props }, ref) => (
 17:   <SelectPrimitive.Trigger
 18:     ref={ref}
 19:     className={cn(
 20:       "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
 21:       className
 22:     )}
 23:     {...props}
 24:   >
 25:     {children}
 26:     <SelectPrimitive.Icon asChild>
 27:       <ChevronDown className="h-4 w-4 opacity-50" />
 28:     </SelectPrimitive.Icon>
 29:   </SelectPrimitive.Trigger>
 30: ))
 31: SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
 32: 
 33: const SelectScrollUpButton = React.forwardRef<
 34:   React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
 35:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
 36: >(({ className, ...props }, ref) => (
 37:   <SelectPrimitive.ScrollUpButton
 38:     ref={ref}
 39:     className={cn(
 40:       "flex cursor-default items-center justify-center py-1",
 41:       className
 42:     )}
 43:     {...props}
 44:   >
 45:     <ChevronUp className="h-4 w-4" />
 46:   </SelectPrimitive.ScrollUpButton>
 47: ))
 48: SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
 49: 
 50: const SelectScrollDownButton = React.forwardRef<
 51:   React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
 52:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
 53: >(({ className, ...props }, ref) => (
 54:   <SelectPrimitive.ScrollDownButton
 55:     ref={ref}
 56:     className={cn(
 57:       "flex cursor-default items-center justify-center py-1",
 58:       className
 59:     )}
 60:     {...props}
 61:   >
 62:     <ChevronDown className="h-4 w-4" />
 63:   </SelectPrimitive.ScrollDownButton>
 64: ))
 65: SelectScrollDownButton.displayName =
 66:   SelectPrimitive.ScrollDownButton.displayName
 67: 
 68: const SelectContent = React.forwardRef<
 69:   React.ElementRef<typeof SelectPrimitive.Content>,
 70:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
 71: >(({ className, children, position = "popper", ...props }, ref) => (
 72:   <SelectPrimitive.Portal>
 73:     <SelectPrimitive.Content
 74:       ref={ref}
 75:       className={cn(
 76:         "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 77:         position === "popper" &&
 78:           "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
 79:         className
 80:       )}
 81:       position={position}
 82:       {...props}
 83:     >
 84:       <SelectScrollUpButton />
 85:       <SelectPrimitive.Viewport
 86:         className={cn(
 87:           "p-1",
 88:           position === "popper" &&
 89:             "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
 90:         )}
 91:       >
 92:         {children}
 93:       </SelectPrimitive.Viewport>
 94:       <SelectScrollDownButton />
 95:     </SelectPrimitive.Content>
 96:   </SelectPrimitive.Portal>
 97: ))
 98: SelectContent.displayName = SelectPrimitive.Content.displayName
 99: 
100: const SelectLabel = React.forwardRef<
101:   React.ElementRef<typeof SelectPrimitive.Label>,
102:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
103: >(({ className, ...props }, ref) => (
104:   <SelectPrimitive.Label
105:     ref={ref}
106:     className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
107:     {...props}
108:   />
109: ))
110: SelectLabel.displayName = SelectPrimitive.Label.displayName
111: 
112: const SelectItem = React.forwardRef<
113:   React.ElementRef<typeof SelectPrimitive.Item>,
114:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
115: >(({ className, children, ...props }, ref) => (
116:   <SelectPrimitive.Item
117:     ref={ref}
118:     className={cn(
119:       "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
120:       className
121:     )}
122:     {...props}
123:   >
124:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
125:       <SelectPrimitive.ItemIndicator>
126:         <Check className="h-4 w-4" />
127:       </SelectPrimitive.ItemIndicator>
128:     </span>
129: 
130:     <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
131:   </SelectPrimitive.Item>
132: ))
133: SelectItem.displayName = SelectPrimitive.Item.displayName
134: 
135: const SelectSeparator = React.forwardRef<
136:   React.ElementRef<typeof SelectPrimitive.Separator>,
137:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
138: >(({ className, ...props }, ref) => (
139:   <SelectPrimitive.Separator
140:     ref={ref}
141:     className={cn("-mx-1 my-1 h-px bg-muted", className)}
142:     {...props}
143:   />
144: ))
145: SelectSeparator.displayName = SelectPrimitive.Separator.displayName
146: 
147: export {
148:   Select,
149:   SelectGroup,
150:   SelectValue,
151:   SelectTrigger,
152:   SelectContent,
153:   SelectLabel,
154:   SelectItem,
155:   SelectSeparator,
156:   SelectScrollUpButton,
157:   SelectScrollDownButton,
158: }
</file>

<file path="src/components/ui/separator.tsx">
 1: import * as React from "react"
 2: import * as SeparatorPrimitive from "@radix-ui/react-separator"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const Separator = React.forwardRef<
 7:   React.ElementRef<typeof SeparatorPrimitive.Root>,
 8:   React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
 9: >(
10:   (
11:     { className, orientation = "horizontal", decorative = true, ...props },
12:     ref
13:   ) => (
14:     <SeparatorPrimitive.Root
15:       ref={ref}
16:       decorative={decorative}
17:       orientation={orientation}
18:       className={cn(
19:         "shrink-0 bg-border",
20:         orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
21:         className
22:       )}
23:       {...props}
24:     />
25:   )
26: )
27: Separator.displayName = SeparatorPrimitive.Root.displayName
28: 
29: export { Separator }
</file>

<file path="src/components/ui/skeleton.tsx">
1: 'use client'
2: 
3: import * as React from 'react'
4: 
5: export function Skeleton({ className = '' }: { className?: string }) {
6:   return (
7:     <div className={`animate-pulse rounded-md bg-gray-200/70 dark:bg-zinc-800/60 ${className}`} />
8:   )
9: }
</file>

<file path="src/components/ui/tabs.tsx">
 1: import * as React from "react"
 2: import * as TabsPrimitive from "@radix-ui/react-tabs"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const Tabs = TabsPrimitive.Root
 7: 
 8: const TabsList = React.forwardRef<
 9:   React.ElementRef<typeof TabsPrimitive.List>,
10:   React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
11: >(({ className, ...props }, ref) => (
12:   <TabsPrimitive.List
13:     ref={ref}
14:     className={cn(
15:       "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
16:       className
17:     )}
18:     {...props}
19:   />
20: ))
21: TabsList.displayName = TabsPrimitive.List.displayName
22: 
23: const TabsTrigger = React.forwardRef<
24:   React.ElementRef<typeof TabsPrimitive.Trigger>,
25:   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
26: >(({ className, ...props }, ref) => (
27:   <TabsPrimitive.Trigger
28:     ref={ref}
29:     className={cn(
30:       "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
31:       className
32:     )}
33:     {...props}
34:   />
35: ))
36: TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
37: 
38: const TabsContent = React.forwardRef<
39:   React.ElementRef<typeof TabsPrimitive.Content>,
40:   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
41: >(({ className, ...props }, ref) => (
42:   <TabsPrimitive.Content
43:     ref={ref}
44:     className={cn(
45:       "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
46:       className
47:     )}
48:     {...props}
49:   />
50: ))
51: TabsContent.displayName = TabsPrimitive.Content.displayName
52: 
53: export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
 1: import * as React from "react"
 2: 
 3: import { cn } from "@/lib/utils"
 4: 
 5: export interface TextareaProps
 6:   extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}
 7: 
 8: const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
 9:   ({ className, ...props }, ref) => {
10:     return (
11:       <textarea
12:         className={cn(
13:           "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
14:           className
15:         )}
16:         ref={ref}
17:         {...props}
18:       />
19:     )
20:   }
21: )
22: Textarea.displayName = "Textarea"
23: 
24: export { Textarea }
</file>

<file path="src/components/ui/use-toast.ts">
 1: import * as React from "react"
 2: 
 3: export interface Toast {
 4:   id: string
 5:   title?: string
 6:   description?: string
 7:   variant?: 'default' | 'destructive'
 8: }
 9: 
10: export function useToast() {
11:   const [toasts, setToasts] = React.useState<Toast[]>([])
12: 
13:   const toast = React.useCallback(({ title, description, variant = 'default' }: Omit<Toast, 'id'>) => {
14:     const id = Math.random().toString(36).substring(2, 9)
15:     const newToast: Toast = { id, title, description, variant }
16:     
17:     setToasts(prev => [...prev, newToast])
18:     
19:     // Auto remove after 5 seconds
20:     setTimeout(() => {
21:       setToasts(prev => prev.filter(t => t.id !== id))
22:     }, 5000)
23:   }, [])
24: 
25:   const dismiss = React.useCallback((id: string) => {
26:     setToasts(prev => prev.filter(t => t.id !== id))
27:   }, [])
28: 
29:   return { toast, toasts, dismiss }
30: }
</file>

<file path="DEPLOYMENT_GUIDE.md">
  1: # 🚀 DEPLOYMENT GUIDE - CAREER LEVER AI JOB SCRAPER
  2: 
  3: ## ✅ SYSTEM READY FOR DEPLOYMENT!
  4: 
  5: Your job scraper is now production-ready with:
  6: - ✅ 3 working sources (ATS + LinkedIn + Adzuna)
  7: - ✅ Circuit breaker error handling
  8: - ✅ Vercel-compatible Puppeteer
  9: - ✅ TypeScript type safety
 10: - ✅ Supabase integration
 11: - ✅ Automated cron job
 12: 
 13: **Expected: 10,778+ jobs per run for $0/month**
 14: 
 15: ---
 16: 
 17: ## 📋 PRE-DEPLOYMENT CHECKLIST:
 18: 
 19: ### **1. Environment Variables**
 20: Make sure `.env.local` has:
 21: ```bash
 22: # Supabase
 23: NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
 24: SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
 25: 
 26: # Adzuna
 27: ADZUNA_APP_ID=your_adzuna_app_id
 28: ADZUNA_API_KEY=your_adzuna_api_key
 29: 
 30: # Cron Security
 31: CRON_SECRET=your_random_secret_string
 32: ```
 33: 
 34: ### **2. Test Locally**
 35: ```bash
 36: # Test scraping only
 37: npx tsx test-master-orchestrator.ts
 38: 
 39: # Test complete system (scraping + Supabase)
 40: npx tsx test-complete-system.ts
 41: ```
 42: 
 43: **Expected Results:**
 44: - ATS Direct: 2,778 jobs ✅
 45: - LinkedIn: 2,000+ jobs ✅
 46: - Adzuna: 6,000+ jobs ✅
 47: - Total: 10,778+ jobs ✅
 48: - Inserted to Supabase: 10,000+ jobs ✅
 49: 
 50: ---
 51: 
 52: ## 🚀 DEPLOYMENT STEPS:
 53: 
 54: ### **Step 1: Add Environment Variables to Vercel**
 55: 
 56: 1. Go to your Vercel project dashboard
 57: 2. Settings → Environment Variables
 58: 3. Add each variable:
 59: 
 60: ```
 61: NEXT_PUBLIC_SUPABASE_URL = your_supabase_url
 62: SUPABASE_SERVICE_ROLE_KEY = your_service_role_key
 63: ADZUNA_APP_ID = your_adzuna_app_id
 64: ADZUNA_API_KEY = your_adzuna_api_key
 65: CRON_SECRET = your_random_secret_string
 66: ```
 67: 
 68: **Important:** Apply to Production, Preview, and Development
 69: 
 70: ---
 71: 
 72: ### **Step 2: Deploy to Vercel**
 73: 
 74: ```bash
 75: # Install Vercel CLI (if not installed)
 76: npm i -g vercel
 77: 
 78: # Deploy
 79: vercel --prod
 80: ```
 81: 
 82: Or push to GitHub and let Vercel auto-deploy.
 83: 
 84: ---
 85: 
 86: ### **Step 3: Verify Cron Job**
 87: 
 88: After deployment, check:
 89: 
 90: 1. **Vercel Dashboard → Cron Jobs**
 91:    - Should see: `/api/cron/scrape-jobs`
 92:    - Schedule: `0 9 * * 1-5` (Mon-Fri 9 AM UTC = 3 AM Central)
 93: 
 94: 2. **Test Cron Manually:**
 95:    ```bash
 96:    curl -X GET https://your-app.vercel.app/api/cron/scrape-jobs \
 97:      -H "Authorization: Bearer YOUR_CRON_SECRET"
 98:    ```
 99: 
100: 3. **Check Response:**
101:    ```json
102:    {
103:      "success": true,
104:      "scraping": {
105:        "unique": 10778
106:      },
107:      "insertion": {
108:        "inserted": 10778,
109:        "errors": 0
110:      }
111:    }
112:    ```
113: 
114: ---
115: 
116: ### **Step 4: Monitor First Run**
117: 
118: **Next scheduled run:** Monday at 3 AM Central
119: 
120: **Check:**
121: 1. Vercel Dashboard → Functions → Logs
122: 2. Supabase Dashboard → Table Editor → jobs table
123: 3. Should see 10,000+ new jobs
124: 
125: ---
126: 
127: ## 📊 CRON SCHEDULE:
128: 
129: ```
130: Schedule: 0 9 * * 1-5
131: Translation: Every weekday at 9 AM UTC (3 AM Central)
132: 
133: Monday:    3 AM Central → Scrape 10,778+ jobs
134: Tuesday:   3 AM Central → Scrape 10,778+ jobs
135: Wednesday: 3 AM Central → Scrape 10,778+ jobs
136: Thursday:  3 AM Central → Scrape 10,778+ jobs
137: Friday:    3 AM Central → Scrape 10,778+ jobs
138: 
139: Weekend:   No scraping (database maintenance)
140: ```
141: 
142: ---
143: 
144: ## 🔧 TROUBLESHOOTING:
145: 
146: ### **Issue: Cron job fails with 401 Unauthorized**
147: **Fix:** Check CRON_SECRET matches in Vercel env vars
148: 
149: ### **Issue: No jobs scraped**
150: **Fix:** Check Adzuna API keys are correct
151: 
152: ### **Issue: Supabase insertion fails**
153: **Fix:** Check SUPABASE_SERVICE_ROLE_KEY (not anon key!)
154: 
155: ### **Issue: Function timeout**
156: **Fix:** Already set to 300s max (5 minutes) - should be enough
157: 
158: ### **Issue: Memory limit exceeded**
159: **Fix:** Circuit breaker should prevent this, but check logs
160: 
161: ---
162: 
163: ## 📈 MONITORING:
164: 
165: ### **Daily Checks:**
166: 1. Vercel Dashboard → Functions → Logs
167: 2. Check for errors
168: 3. Verify job counts
169: 
170: ### **Weekly Checks:**
171: 1. Supabase → jobs table → Count rows
172: 2. Should grow by ~50,000 jobs/week
173: 3. Check for duplicates
174: 
175: ### **Monthly Checks:**
176: 1. Review error rates
177: 2. Check source performance
178: 3. Optimize if needed
179: 
180: ---
181: 
182: ## 🎯 SUCCESS METRICS:
183: 
184: ### **Per Run:**
185: - ✅ 10,000+ unique jobs scraped
186: - ✅ 95%+ insertion success rate
187: - ✅ < 5 minutes total duration
188: - ✅ 0 critical errors
189: 
190: ### **Per Week:**
191: - ✅ 50,000+ jobs scraped (5 runs × 10,000)
192: - ✅ ~40,000 unique after deduplication
193: - ✅ 95%+ uptime
194: 
195: ### **Per Month:**
196: - ✅ 200,000+ jobs scraped
197: - ✅ ~150,000 unique jobs
198: - ✅ $0 cost
199: 
200: ---
201: 
202: ## 🔄 MAINTENANCE:
203: 
204: ### **Weekly:**
205: - Review logs for errors
206: - Check job quality
207: - Monitor API rate limits
208: 
209: ### **Monthly:**
210: - Update ATS company list
211: - Add new job sources
212: - Optimize keywords
213: 
214: ### **Quarterly:**
215: - Review and remove old jobs (90+ days)
216: - Analyze job trends
217: - Scale if needed
218: 
219: ---
220: 
221: ## 🚨 EMERGENCY PROCEDURES:
222: 
223: ### **If Cron Job Fails:**
224: 1. Check Vercel logs
225: 2. Run test locally: `npx tsx test-complete-system.ts`
226: 3. Fix errors
227: 4. Redeploy
228: 
229: ### **If Source Fails:**
230: - Circuit breaker will isolate the failure
231: - Other sources continue working
232: - Fix and redeploy when ready
233: 
234: ### **If Database Full:**
235: - Supabase free tier: 500 MB
236: - ~100,000 jobs = ~50 MB
237: - Should last 6+ months
238: - Upgrade to Pro if needed ($25/month)
239: 
240: ---
241: 
242: ## 📞 SUPPORT:
243: 
244: ### **Vercel Issues:**
245: - Dashboard: https://vercel.com/dashboard
246: - Docs: https://vercel.com/docs/cron-jobs
247: 
248: ### **Supabase Issues:**
249: - Dashboard: https://supabase.com/dashboard
250: - Docs: https://supabase.com/docs
251: 
252: ### **Adzuna Issues:**
253: - Dashboard: https://developer.adzuna.com/
254: - Support: support@adzuna.com
255: 
256: ---
257: 
258: ## ✅ DEPLOYMENT COMPLETE!
259: 
260: Once deployed, your system will:
261: - ✅ Run automatically Mon-Fri at 3 AM Central
262: - ✅ Scrape 10,778+ jobs per run
263: - ✅ Insert to Supabase automatically
264: - ✅ Handle errors gracefully
265: - ✅ Cost $0/month
266: 
267: **You're done! Let it run and monitor the results.** 🎉
268: 
269: ---
270: 
271: ## 🎯 NEXT LEVEL (Optional):
272: 
273: ### **Scale to 25,000+ jobs:**
274: 1. Add more keywords to Adzuna searches
275: 2. Add more ATS companies
276: 3. Add Job Bank Canada API
277: 4. Add RapidAPI JSearch
278: 
279: ### **Improve Quality:**
280: 1. Add job validation rules
281: 2. Filter out spam/scam jobs
282: 3. Enhance deduplication
283: 4. Add salary parsing
284: 
285: ### **Add Features:**
286: 1. Email alerts for new jobs
287: 2. Job recommendations
288: 3. Application tracking
289: 4. Analytics dashboard
290: 
291: ---
292: 
293: **Your job scraper is production-ready! Deploy and enjoy 10,000+ jobs for free!** 🚀
</file>

<file path="src/components/features-section.tsx">
  1: 'use client'
  2: 
  3: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  4: import { Badge } from '@/components/ui/badge'
  5: import {
  6:   FileText,
  7:   Search,
  8:   Zap,
  9:   Users,
 10:   BarChart3,
 11:   Mail,
 12:   Shield,
 13:   Clock
 14: } from 'lucide-react'
 15: 
 16: const features = [
 17:   {
 18:     icon: FileText,
 19:     title: 'AI Resume Customization',
 20:     description: 'Upload your resume and let AI tailor it to specific job descriptions. Our system analyzes keywords, optimizes for ATS, and highlights relevant experience.',
 21:     badge: 'Most Popular',
 22:     color: 'text-blue-600',
 23:   },
 24:   {
 25:     icon: Search,
 26:     title: 'Intelligent Job Analysis',
 27:     description: 'Paste any job description and get instant analysis of key requirements, preferred skills, and company culture indicators.',
 28:     badge: null,
 29:     color: 'text-green-600',
 30:   },
 31:   {
 32:     icon: Users,
 33:     title: 'Company Research Hub',
 34:     description: 'Get comprehensive company insights from LinkedIn, Glassdoor, and social media. Understand culture, benefits, and recent developments.',
 35:     badge: 'New',
 36:     color: 'text-purple-600',
 37:   },
 38:   {
 39:     icon: Mail,
 40:     title: 'Cover Letter Generation',
 41:     description: 'AI-crafted cover letters that incorporate company research and demonstrate genuine interest in the role and organization.',
 42:     badge: null,
 43:     color: 'text-orange-600',
 44:   },
 45:   {
 46:     icon: BarChart3,
 47:     title: 'Application Tracking',
 48:     description: 'Track all your job applications in one place. Monitor status, set follow-up reminders, and analyze your job search progress.',
 49:     badge: null,
 50:     color: 'text-red-600',
 51:   },
 52:   {
 53:     icon: Zap,
 54:     title: 'Follow-up Automation',
 55:     description: 'Generate personalized follow-up emails and LinkedIn messages. Never miss an opportunity to stay top-of-mind with employers.',
 56:     badge: 'Pro',
 57:     color: 'text-yellow-600',
 58:   },
 59:   {
 60:     icon: Shield,
 61:     title: 'Privacy & Security',
 62:     description: 'Your data is encrypted and secure. We never share your information with employers or third parties.',
 63:     badge: null,
 64:     color: 'text-indigo-600',
 65:   },
 66:   {
 67:     icon: Clock,
 68:     title: 'Time-Saving Workflow',
 69:     description: 'Streamlined process from resume upload to application submission. Spend less time on applications, more time on interviews.',
 70:     badge: null,
 71:     color: 'text-teal-600',
 72:   },
 73: ]
 74: 
 75: export function FeaturesSection() {
 76:   return (
 77:     <section className="py-24 relative overflow-hidden" style={{ background: 'var(--color-background)' }}>
 78:       {/* Animated gradient background */}
 79:       <div className="absolute inset-0 opacity-30">
 80:         <div className="absolute top-0 left-0 w-96 h-96 rounded-full blur-3xl" style={{ background: 'var(--color-bg-1)' }} />
 81:         <div className="absolute bottom-0 right-0 w-96 h-96 rounded-full blur-3xl" style={{ background: 'var(--color-bg-3)' }} />
 82:       </div>
 83:       
 84:       <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 relative z-10">
 85:         {/* BEFORE/AFTER METRICS - REDESIGNED! */}
 86:         <div className="mx-auto max-w-4xl mb-20">
 87:           <div className="text-center mb-10">
 88:             <h2 className="text-3xl font-bold tracking-tight sm:text-4xl mb-2" style={{ color: 'var(--color-text)' }}>
 89:               Real Results from Real Job Seekers
 90:             </h2>
 91:             <p className="text-lg" style={{ color: 'var(--color-text-secondary)' }}>
 92:               See the dramatic difference Career Lever AI makes
 93:             </p>
 94:           </div>
 95:           
 96:           <div className="grid md:grid-cols-2 gap-8">
 97:             {/* WITHOUT Career Lever AI */}
 98:             <div className="bg-red-50 border-2 border-red-200 rounded-2xl p-8">
 99:               <div className="text-center mb-6">
100:                 <div className="inline-flex items-center justify-center w-16 h-16 bg-red-100 rounded-full mb-4">
101:                   <span className="text-3xl">😓</span>
102:                 </div>
103:                 <h3 className="text-xl font-bold text-red-900 mb-2">Without Career Lever AI</h3>
104:               </div>
105:               <ul className="space-y-4">
106:                 <li className="flex items-start">
107:                   <span className="text-red-500 font-bold mr-3">❌</span>
108:                   <div>
109:                     <div className="font-semibold text-foreground">50+ applications = 2 interviews</div>
110:                     <div className="text-sm text-gray-600">4% response rate</div>
111:                   </div>
112:                 </li>
113:                 <li className="flex items-start">
114:                   <span className="text-red-500 font-bold mr-3">❌</span>
115:                   <div>
116:                     <div className="font-semibold text-foreground">4 hours per application</div>
117:                     <div className="text-sm text-gray-600">200+ hours wasted</div>
118:                   </div>
119:                 </li>
120:                 <li className="flex items-start">
121:                   <span className="text-red-500 font-bold mr-3">❌</span>
122:                   <div>
123:                     <div className="font-semibold text-foreground">Generic resumes ignored</div>
124:                     <div className="text-sm text-gray-600">15% ATS pass rate</div>
125:                   </div>
126:                 </li>
127:                 <li className="flex items-start">
128:                   <span className="text-red-500 font-bold mr-3">❌</span>
129:                   <div>
130:                     <div className="font-semibold text-foreground">Missed follow-ups</div>
131:                     <div className="text-sm text-gray-600">Lost opportunities</div>
132:                   </div>
133:                 </li>
134:               </ul>
135:             </div>
136: 
137:             {/* WITH Career Lever AI */}
138:             <div className="bg-green-50 border-2 border-green-400 rounded-2xl p-8 relative">
139:               <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
140:                 <Badge className="bg-green-600 text-white px-4 py-1 text-sm font-bold">
141:                   85% SUCCESS RATE
142:                 </Badge>
143:               </div>
144:               <div className="text-center mb-6 mt-2">
145:                 <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
146:                   <span className="text-3xl">🎯</span>
147:                 </div>
148:                 <h3 className="text-xl font-bold text-green-900 mb-2">With Career Lever AI</h3>
149:               </div>
150:               <ul className="space-y-4">
151:                 <li className="flex items-start">
152:                   <span className="text-green-600 font-bold mr-3">✅</span>
153:                   <div>
154:                     <div className="font-semibold text-foreground">15 applications = 8 interviews</div>
155:                     <div className="text-sm text-gray-600">53% response rate (13x better!)</div>
156:                   </div>
157:                 </li>
158:                 <li className="flex items-start">
159:                   <span className="text-green-600 font-bold mr-3">✅</span>
160:                   <div>
161:                     <div className="font-semibold text-foreground">20 minutes per application</div>
162:                     <div className="text-sm text-gray-600">5 hours total (12x faster!)</div>
163:                   </div>
164:                 </li>
165:                 <li className="flex items-start">
166:                   <span className="text-green-600 font-bold mr-3">✅</span>
167:                   <div>
168:                     <div className="font-semibold text-foreground">ATS-optimized resumes</div>
169:                     <div className="text-sm text-gray-600">85% ATS pass rate (5.6x better!)</div>
170:                   </div>
171:                 </li>
172:                 <li className="flex items-start">
173:                   <span className="text-green-600 font-bold mr-3">✅</span>
174:                   <div>
175:                     <div className="font-semibold text-foreground">Automated follow-ups</div>
176:                     <div className="text-sm text-gray-600">Never miss opportunities</div>
177:                   </div>
178:                 </li>
179:               </ul>
180:             </div>
181:           </div>
182:         </div>
183: 
184:         <div className="mx-auto max-w-3xl text-center mb-16">
185:           <h2 className="text-3xl font-bold tracking-tight sm:text-4xl" style={{ color: 'var(--color-text)' }}>
186:             Everything you need to land your dream job
187:           </h2>
188:           <p className="mt-4 text-lg" style={{ color: 'var(--color-text-secondary)' }}>
189:             Our AI-powered platform provides comprehensive tools to optimize every aspect of your job search.
190:           </p>
191:         </div>
192: 
193:         <div className="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-8 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-2 xl:grid-cols-4">
194:           {features.map((feature, index) => (
195:             <Card 
196:               key={index} 
197:               className="relative overflow-hidden border-0 transition-all duration-300 hover:-translate-y-2 group"
198:               style={{ 
199:                 background: 'var(--color-surface)',
200:                 borderRadius: 'var(--radius-lg)',
201:                 boxShadow: 'var(--shadow-lg)'
202:               }}
203:             >
204:               {/* Gradient overlay on hover */}
205:               <div className="absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity duration-300" style={{ background: 'var(--color-primary)' }} />
206:               
207:               <CardHeader className="pb-4 relative z-10">
208:                 <div className="flex items-center justify-between">
209:                   <div 
210:                     className="rounded-lg p-3 transition-transform duration-300 group-hover:scale-110" 
211:                     style={{ background: `rgba(var(--color-teal-500-rgb), 0.1)` }}
212:                   >
213:                     <feature.icon className="h-6 w-6" style={{ color: 'var(--color-primary)' }} />
214:                   </div>
215:                   {feature.badge && (
216:                     <Badge 
217:                       className="text-xs font-semibold px-3 py-1"
218:                       style={{ 
219:                         background: 'var(--color-primary)',
220:                         color: 'var(--color-btn-primary-text)'
221:                       }}
222:                     >
223:                       {feature.badge}
224:                     </Badge>
225:                   )}
226:                 </div>
227:                 <CardTitle className="text-xl mt-4" style={{ color: 'var(--color-text)' }}>
228:                   {feature.title}
229:                 </CardTitle>
230:               </CardHeader>
231:               <CardContent className="relative z-10">
232:                 <CardDescription className="text-base leading-relaxed" style={{ color: 'var(--color-text-secondary)' }}>
233:                   {feature.description}
234:                 </CardDescription>
235:               </CardContent>
236:             </Card>
237:           ))}
238:         </div>
239: 
240:         {/* MOBILE APP FEATURES - REDESIGNED! */}
241:         <div className="mx-auto max-w-4xl mt-32">
242:           <div className="text-center mb-12">
243:             <Badge 
244:               className="px-4 py-1 mb-4 text-sm font-semibold"
245:               style={{ 
246:                 background: 'linear-gradient(135deg, var(--color-primary), var(--color-teal-400))',
247:                 color: 'var(--color-btn-primary-text)'
248:               }}
249:             >
250:               📱 Mobile Apps
251:             </Badge>
252:             <h2 className="text-3xl font-bold tracking-tight sm:text-4xl mb-4" style={{ color: 'var(--color-text)' }}>
253:               Job Search on the Go
254:             </h2>
255:             <p className="text-lg" style={{ color: 'var(--color-text-secondary)' }}>
256:               Apply to jobs from anywhere with our powerful mobile apps
257:             </p>
258:           </div>
259:           
260:           <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
261:             {[
262:               { emoji: '📸', title: 'Scan Job Postings', desc: 'Take a photo of any job posting and instantly apply with AI-optimized resume', bg: 'var(--color-bg-1)' },
263:               { emoji: '🔔', title: 'Push Notifications', desc: 'Get instant alerts for interview prep, follow-ups, and application updates', bg: 'var(--color-bg-5)' },
264:               { emoji: '📍', title: 'Location-Based Jobs', desc: 'Find and apply to local opportunities while commuting or traveling', bg: 'var(--color-bg-3)' },
265:               { emoji: '💾', title: 'Offline Mode', desc: 'Edit resumes and prepare applications even without internet connection', bg: 'var(--color-bg-6)' }
266:             ].map((item, i) => (
267:               <Card 
268:                 key={i}
269:                 className="border-0 hover:-translate-y-1 transition-all duration-300 group"
270:                 style={{ 
271:                   background: 'var(--color-surface)',
272:                   borderRadius: 'var(--radius-lg)',
273:                   boxShadow: 'var(--shadow-md)'
274:                 }}
275:               >
276:                 <CardContent className="p-6 text-center">
277:                   <div 
278:                     className="text-4xl mb-4 inline-block p-4 rounded-full transition-transform duration-300 group-hover:scale-110"
279:                     style={{ background: item.bg }}
280:                   >
281:                     {item.emoji}
282:                   </div>
283:                   <h3 className="font-bold mb-2" style={{ color: 'var(--color-text)' }}>{item.title}</h3>
284:                   <p className="text-sm" style={{ color: 'var(--color-text-secondary)' }}>{item.desc}</p>
285:                 </CardContent>
286:               </Card>
287:             ))}
288:           </div>
289:         </div>
290: 
291:         {/* PRICING PREVIEW - REDESIGNED! */}
292:         <div className="mx-auto max-w-5xl mt-32 mb-16">
293:           <div className="text-center mb-12">
294:             <h2 className="text-3xl font-bold tracking-tight sm:text-4xl mb-4" style={{ color: 'var(--color-text)' }}>
295:               Simple, Transparent Pricing
296:             </h2>
297:             <p className="text-lg" style={{ color: 'var(--color-text-secondary)' }}>
298:               Start free, upgrade when you&apos;re ready
299:             </p>
300:           </div>
301:           
302:           <div className="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
303:             {/* FREE TIER */}
304:             <Card 
305:               className="border-0 hover:shadow-2xl transition-all duration-300 hover:-translate-y-1"
306:               style={{ 
307:                 background: 'var(--color-surface)',
308:                 borderRadius: 'var(--radius-lg)',
309:                 boxShadow: 'var(--shadow-lg)',
310:                 border: '2px solid var(--color-border)'
311:               }}
312:             >
313:               <CardHeader className="pb-4" style={{ background: 'rgba(var(--color-teal-500-rgb), 0.05)' }}>
314:                 <div className="text-center">
315:                   <CardTitle className="text-2xl mb-2" style={{ color: 'var(--color-text)' }}>Free Forever</CardTitle>
316:                   <div className="text-4xl font-bold mb-2" style={{ color: 'var(--color-text)' }}>$0</div>
317:                   <p className="text-sm" style={{ color: 'var(--color-text-secondary)' }}>Perfect for getting started</p>
318:                 </div>
319:               </CardHeader>
320:               <CardContent className="p-6">
321:                 <ul className="space-y-3">
322:                   {['3 AI resume customizations per month', '10 company research reports', 'Basic application tracking', 'ATS optimization', 'Job search tools'].map((item, i) => (
323:                     <li key={i} className="flex items-start">
324:                       <span className="mr-2" style={{ color: 'var(--color-success)' }}>✅</span>
325:                       <span style={{ color: 'var(--color-text)' }}><strong>{item}</strong></span>
326:                     </li>
327:                   ))}
328:                 </ul>
329:               </CardContent>
330:             </Card>
331: 
332:             {/* PRO TIER */}
333:             <Card 
334:               className="border-0 hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 relative"
335:               style={{ 
336:                 background: 'var(--color-surface)',
337:                 borderRadius: 'var(--radius-lg)',
338:                 boxShadow: '0 0 40px rgba(var(--color-teal-500-rgb), 0.3)',
339:                 border: '2px solid var(--color-primary)'
340:               }}
341:             >
342:               <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
343:                 <Badge 
344:                   className="px-6 py-2 text-sm font-bold"
345:                   style={{ 
346:                     background: 'linear-gradient(135deg, var(--color-primary), var(--color-teal-400))',
347:                     color: 'var(--color-btn-primary-text)'
348:                   }}
349:                 >
350:                   🔥 MOST POPULAR
351:                 </Badge>
352:               </div>
353:               <CardHeader 
354:                 className="pb-4 pt-8"
355:                 style={{ 
356:                   background: 'linear-gradient(135deg, rgba(var(--color-teal-500-rgb), 0.1), rgba(var(--color-teal-300-rgb), 0.05))'
357:                 }}
358:               >
359:                 <div className="text-center">
360:                   <CardTitle className="text-2xl mb-2" style={{ color: 'var(--color-text)' }}>Pro</CardTitle>
361:                   <div className="text-4xl font-bold mb-2" style={{ color: 'var(--color-primary)' }}>
362:                     $9.99<span className="text-lg" style={{ color: 'var(--color-text-secondary)' }}>/mo</span>
363:                   </div>
364:                   <p className="text-sm" style={{ color: 'var(--color-text-secondary)' }}>Land your dream job faster</p>
365:                 </div>
366:               </CardHeader>
367:               <CardContent className="p-6">
368:                 <ul className="space-y-3">
369:                   {['Unlimited AI customizations', 'Unlimited company research', 'Priority ATS optimization', 'LinkedIn integration', 'Advanced analytics', 'Interview prep AI', 'Priority support'].map((item, i) => (
370:                     <li key={i} className="flex items-start">
371:                       <span className="mr-2" style={{ color: 'var(--color-primary)' }}>⚡</span>
372:                       <span style={{ color: 'var(--color-text)' }}><strong>{item}</strong></span>
373:                     </li>
374:                   ))}
375:                 </ul>
376:               </CardContent>
377:             </Card>
378:           </div>
379:         </div>
380:       </div>
381:     </section>
382:   )
383: }
</file>

<file path="src/components/ui/company-research-card.tsx">
 1: 'use client'
 2: 
 3: import { ThumbsUp, ThumbsDown, CheckCircle, AlertCircle } from 'lucide-react'
 4: 
 5: export interface CompanyResearchData {
 6:   pros?: string[]
 7:   cons?: string[]
 8: }
 9: 
10: export interface CompanyResearchCardProps {
11:   data: CompanyResearchData
12:   className?: string
13: }
14: 
15: export function CompanyResearchCard({ data, className = '' }: CompanyResearchCardProps) {
16:   const { pros = [], cons = [] } = data
17: 
18:   return (
19:     <div className={`company-research ${className}`}>
20:       {/* Pros Card */}
21:       {pros.length > 0 && (
22:         <div className="company-card company-card--pros">
23:           <h4>
24:             <ThumbsUp className="w-6 h-6" style={{ color: 'var(--color-success)' }} />
25:             <span>Pros</span>
26:           </h4>
27:           <ul>
28:             {pros.map((pro, index) => (
29:               <li key={index}>
30:                 <CheckCircle className="w-4 h-4 flex-shrink-0" style={{ color: 'var(--color-success)' }} />
31:                 <span>{pro}</span>
32:               </li>
33:             ))}
34:           </ul>
35:         </div>
36:       )}
37: 
38:       {/* Cons Card */}
39:       {cons.length > 0 && (
40:         <div className="company-card company-card--cons">
41:           <h4>
42:             <ThumbsDown className="w-6 h-6" style={{ color: 'var(--color-warning)' }} />
43:             <span>Cons</span>
44:           </h4>
45:           <ul>
46:             {cons.map((con, index) => (
47:               <li key={index}>
48:                 <AlertCircle className="w-4 h-4 flex-shrink-0" style={{ color: 'var(--color-warning)' }} />
49:                 <span>{con}</span>
50:               </li>
51:             ))}
52:           </ul>
53:         </div>
54:       )}
55:     </div>
56:   )
57: }
58: 
59: // Single card variant for more flexibility
60: export function CompanyCard({ 
61:   type, 
62:   title, 
63:   items 
64: }: { 
65:   type: 'pros' | 'cons'
66:   title: string
67:   items: string[]
68: }) {
69:   const Icon = type === 'pros' ? ThumbsUp : ThumbsDown
70:   const ItemIcon = type === 'pros' ? CheckCircle : AlertCircle
71:   const colorVar = type === 'pros' ? 'var(--color-success)' : 'var(--color-warning)'
72: 
73:   return (
74:     <div className={`company-card company-card--${type}`}>
75:       <h4>
76:         <Icon className="w-6 h-6" style={{ color: colorVar }} />
77:         <span>{title}</span>
78:       </h4>
79:       <ul>
80:         {items.map((item, index) => (
81:           <li key={index}>
82:             <ItemIcon className="w-4 h-4 flex-shrink-0" style={{ color: colorVar }} />
83:             <span>{item}</span>
84:           </li>
85:         ))}
86:       </ul>
87:     </div>
88:   )
89: }
</file>

<file path="src/components/ui/empty-state.tsx">
 1: /**
 2:  * EMPTY STATE COMPONENT
 3:  * Beautiful empty states for lists and sections
 4:  */
 5: 
 6: import { LucideIcon } from 'lucide-react'
 7: import { ReactNode } from 'react'
 8: 
 9: interface EmptyStateProps {
10:   icon?: LucideIcon
11:   title: string
12:   description?: string
13:   action?: ReactNode
14:   className?: string
15: }
16: 
17: export function EmptyState({
18:   icon: Icon,
19:   title,
20:   description,
21:   action,
22:   className = ''
23: }: EmptyStateProps) {
24:   return (
25:     <div className={`empty-state ${className}`}>
26:       {Icon && (
27:         <div className="empty-state__icon">
28:           <Icon className="w-16 h-16" />
29:         </div>
30:       )}
31:       <h3 className="empty-state__title">{title}</h3>
32:       {description && (
33:         <p className="empty-state__description">{description}</p>
34:       )}
35:       {action && <div className="mt-4">{action}</div>}
36:     </div>
37:   )
38: }
</file>

<file path="src/components/ui/form-feedback.tsx">
 1: 'use client'
 2: 
 3: import { AlertCircle, CheckCircle, Info } from 'lucide-react'
 4: 
 5: export interface FormFeedbackProps {
 6:   type: 'error' | 'success' | 'info'
 7:   message: string
 8:   className?: string
 9: }
10: 
11: export function FormFeedback({ type, message, className = '' }: FormFeedbackProps) {
12:   const icons = {
13:     error: AlertCircle,
14:     success: CheckCircle,
15:     info: Info,
16:   }
17: 
18:   const Icon = icons[type]
19: 
20:   return (
21:     <div 
22:       className={`form-${type} ${className}`}
23:       role={type === 'error' ? 'alert' : 'status'}
24:       aria-live="polite"
25:     >
26:       <Icon className="w-4 h-4" />
27:       <span>{message}</span>
28:     </div>
29:   )
30: }
31: 
32: // Form group wrapper with validation
33: export function FormGroup({
34:   label,
35:   error,
36:   success,
37:   required = false,
38:   children,
39:   className = '',
40: }: {
41:   label: string
42:   error?: string
43:   success?: string
44:   required?: boolean
45:   children: React.ReactNode
46:   className?: string
47: }) {
48:   return (
49:     <div className={`form-group ${className}`}>
50:       <label 
51:         className="block text-sm font-medium mb-2"
52:         style={{ color: 'var(--color-text)' }}
53:       >
54:         {label}
55:         {required && (
56:           <span 
57:             className="ml-1"
58:             style={{ color: 'var(--color-error)' }}
59:             aria-label="required"
60:           >
61:             *
62:           </span>
63:         )}
64:       </label>
65:       {children}
66:       {error && <FormFeedback type="error" message={error} />}
67:       {success && <FormFeedback type="success" message={success} />}
68:     </div>
69:   )
70: }
</file>

<file path="src/components/ui/icon-system.tsx">
  1: /**
  2:  * ICON SYSTEM
  3:  * Unified icon system to replace emoji logos
  4:  */
  5: 
  6: import {
  7:   Building2,
  8:   Package,
  9:   Search,
 10:   ShoppingCart,
 11:   Briefcase,
 12:   Code,
 13:   Cpu,
 14:   Heart,
 15:   DollarSign,
 16:   Users,
 17:   Zap,
 18:   Globe,
 19:   Mail,
 20:   Phone,
 21:   MapPin,
 22:   Calendar,
 23:   Clock,
 24:   Star,
 25:   TrendingUp,
 26:   Award,
 27:   Target,
 28:   CheckCircle,
 29:   AlertCircle,
 30:   Info,
 31:   XCircle,
 32:   LucideIcon
 33: } from 'lucide-react'
 34: import { cn } from '@/lib/utils'
 35: 
 36: // Company icon mapping
 37: const companyIcons: Record<string, LucideIcon> = {
 38:   netflix: Building2,
 39:   amazon: Package,
 40:   google: Search,
 41:   microsoft: Building2,
 42:   apple: Building2,
 43:   meta: Users,
 44:   facebook: Users,
 45:   tesla: Zap,
 46:   shopify: ShoppingCart,
 47:   walmart: ShoppingCart,
 48:   target: Target,
 49:   bestbuy: Building2,
 50:   default: Building2
 51: }
 52: 
 53: // Category icon mapping
 54: const categoryIcons: Record<string, LucideIcon> = {
 55:   technology: Cpu,
 56:   software: Code,
 57:   healthcare: Heart,
 58:   finance: DollarSign,
 59:   retail: ShoppingCart,
 60:   marketing: TrendingUp,
 61:   sales: DollarSign,
 62:   engineering: Code,
 63:   design: Award,
 64:   default: Briefcase
 65: }
 66: 
 67: // Status icon mapping
 68: const statusIcons: Record<string, LucideIcon> = {
 69:   success: CheckCircle,
 70:   error: XCircle,
 71:   warning: AlertCircle,
 72:   info: Info,
 73:   pending: Clock,
 74:   completed: CheckCircle,
 75:   default: Info
 76: }
 77: 
 78: interface IconProps {
 79:   name: string
 80:   type?: 'company' | 'category' | 'status' | 'general'
 81:   size?: 'sm' | 'md' | 'lg' | 'xl'
 82:   className?: string
 83: }
 84: 
 85: export function Icon({ name, type = 'general', size = 'md', className }: IconProps) {
 86:   const sizes = {
 87:     sm: 'w-4 h-4',
 88:     md: 'w-6 h-6',
 89:     lg: 'w-8 h-8',
 90:     xl: 'w-12 h-12'
 91:   }
 92: 
 93:   let IconComponent: LucideIcon
 94: 
 95:   switch (type) {
 96:     case 'company':
 97:       IconComponent = companyIcons[name.toLowerCase()] || companyIcons.default
 98:       break
 99:     case 'category':
100:       IconComponent = categoryIcons[name.toLowerCase()] || categoryIcons.default
101:       break
102:     case 'status':
103:       IconComponent = statusIcons[name.toLowerCase()] || statusIcons.default
104:       break
105:     default:
106:       IconComponent = Building2
107:   }
108: 
109:   return (
110:     <IconComponent
111:       className={cn('icon', sizes[size], className)}
112:       aria-hidden="true"
113:     />
114:   )
115: }
116: 
117: // Specific icon components for common use cases
118: export function CompanyIcon({ name, size = 'md', className }: Omit<IconProps, 'type'>) {
119:   return <Icon name={name} type="company" size={size} className={className} />
120: }
121: 
122: export function CategoryIcon({ name, size = 'md', className }: Omit<IconProps, 'type'>) {
123:   return <Icon name={name} type="category" size={size} className={className} />
124: }
125: 
126: export function StatusIcon({ name, size = 'md', className }: Omit<IconProps, 'type'>) {
127:   return <Icon name={name} type="status" size={size} className={className} />
128: }
129: 
130: // Export all icons for direct use
131: export {
132:   Building2,
133:   Package,
134:   Search,
135:   ShoppingCart,
136:   Briefcase,
137:   Code,
138:   Cpu,
139:   Heart,
140:   DollarSign,
141:   Users,
142:   Zap,
143:   Globe,
144:   Mail,
145:   Phone,
146:   MapPin,
147:   Calendar,
148:   Clock,
149:   Star,
150:   TrendingUp,
151:   Award,
152:   Target,
153:   CheckCircle,
154:   AlertCircle,
155:   Info,
156:   XCircle
157: }
</file>

<file path="src/components/ui/index.ts">
 1: /**
 2:  * UI COMPONENTS INDEX
 3:  * Central export for all reusable UI components
 4:  */
 5: 
 6: // Layout & Structure
 7: export * from './card'
 8: export * from './badge'
 9: export * from './button'
10: 
11: // Loading States
12: export * from './spinner'
13: export { Spinner, LoadingButton, LoadingOverlay, LoadingState } from './spinner'
14: 
15: // Notifications & Feedback
16: export * from './toast'
17: export { Toast, ToastContainer, useToast } from './toast'
18: export * from './form-feedback'
19: export { FormFeedback, FormGroup } from './form-feedback'
20: 
21: // Job & Company Components
22: export * from './job-match-explanation'
23: export { JobMatchExplanation } from './job-match-explanation'
24: export * from './company-research-card'
25: export { CompanyResearchCard, CompanyCard } from './company-research-card'
26: 
27: // Preview & Empty States
28: export * from './preview-empty'
29: export { PreviewEmpty, PreviewContainer } from './preview-empty'
</file>

<file path="src/components/ui/job-match-explanation.tsx">
  1: 'use client'
  2: 
  3: import { CheckCircle } from 'lucide-react'
  4: 
  5: export interface JobMatchData {
  6:   matchScore: number
  7:   skillsMatch: number
  8:   experienceMatch: boolean
  9:   matchedSkills: string[]
 10:   reasons?: string[]
 11: }
 12: 
 13: export interface JobMatchExplanationProps {
 14:   data: JobMatchData
 15:   className?: string
 16: }
 17: 
 18: export function JobMatchExplanation({ data, className = '' }: JobMatchExplanationProps) {
 19:   const { matchScore, skillsMatch, experienceMatch, matchedSkills, reasons } = data
 20: 
 21:   return (
 22:     <div className={`job-match-explanation ${className}`}>
 23:       <h4>Why we matched you:</h4>
 24:       <ul>
 25:         {reasons ? (
 26:           reasons.map((reason, index) => (
 27:             <li key={index}>
 28:               <CheckCircle className="w-4 h-4" style={{ color: 'var(--color-success)' }} />
 29:               <span>{reason}</span>
 30:             </li>
 31:           ))
 32:         ) : (
 33:           <>
 34:             <li>
 35:               <CheckCircle className="w-4 h-4" style={{ color: 'var(--color-success)' }} />
 36:               <span>{skillsMatch}% of your top skills match</span>
 37:             </li>
 38:             {experienceMatch && (
 39:               <li>
 40:                 <CheckCircle className="w-4 h-4" style={{ color: 'var(--color-success)' }} />
 41:                 <span>Your experience level aligns perfectly</span>
 42:               </li>
 43:             )}
 44:             <li>
 45:               <CheckCircle className="w-4 h-4" style={{ color: 'var(--color-success)' }} />
 46:               <span>You have {matchedSkills.length} required skills</span>
 47:             </li>
 48:           </>
 49:         )}
 50:       </ul>
 51:       
 52:       {/* Progress bar */}
 53:       <div className="mt-4">
 54:         <div className="flex items-center justify-between mb-2">
 55:           <span className="text-sm" style={{ color: 'var(--color-text-secondary)' }}>
 56:             Overall Match
 57:           </span>
 58:           <span className="match-score">{matchScore}% Match</span>
 59:         </div>
 60:         <div 
 61:           className="w-full h-2 rounded-full overflow-hidden"
 62:           style={{ background: 'var(--color-secondary)' }}
 63:         >
 64:           <div
 65:             className="h-full transition-all duration-500"
 66:             style={{
 67:               width: `${matchScore}%`,
 68:               background: matchScore >= 80 
 69:                 ? 'var(--color-success)' 
 70:                 : matchScore >= 60 
 71:                 ? 'var(--color-warning)' 
 72:                 : 'var(--color-error)'
 73:             }}
 74:           />
 75:         </div>
 76:       </div>
 77: 
 78:       {/* Matched skills tags */}
 79:       {matchedSkills.length > 0 && (
 80:         <div className="mt-4">
 81:           <p className="text-sm mb-2" style={{ color: 'var(--color-text-secondary)' }}>
 82:             Matched Skills:
 83:           </p>
 84:           <div className="flex flex-wrap gap-2">
 85:             {matchedSkills.slice(0, 5).map((skill, index) => (
 86:               <span
 87:                 key={index}
 88:                 className="px-3 py-1 text-xs font-medium rounded-full"
 89:                 style={{
 90:                   background: 'rgba(var(--color-success-rgb), 0.1)',
 91:                   color: 'var(--color-success)'
 92:                 }}
 93:               >
 94:                 {skill}
 95:               </span>
 96:             ))}
 97:             {matchedSkills.length > 5 && (
 98:               <span
 99:                 className="px-3 py-1 text-xs font-medium rounded-full"
100:                 style={{
101:                   background: 'var(--color-secondary)',
102:                   color: 'var(--color-text-secondary)'
103:                 }}
104:               >
105:                 +{matchedSkills.length - 5} more
106:               </span>
107:             )}
108:           </div>
109:         </div>
110:       )}
111:     </div>
112:   )
113: }
</file>

<file path="src/components/ui/mobile-menu.tsx">
 1: /**
 2:  * MOBILE MENU COMPONENT
 3:  * Responsive hamburger menu for mobile devices
 4:  */
 5: 
 6: 'use client'
 7: 
 8: import { useState, useEffect } from 'react'
 9: import { Menu, X } from 'lucide-react'
10: import { cn } from '@/lib/utils'
11: 
12: interface MobileMenuProps {
13:   children: React.ReactNode
14:   className?: string
15: }
16: 
17: export function MobileMenu({ children, className }: MobileMenuProps) {
18:   const [isOpen, setIsOpen] = useState(false)
19: 
20:   // Close menu on escape key
21:   useEffect(() => {
22:     const handleEscape = (e: KeyboardEvent) => {
23:       if (e.key === 'Escape') setIsOpen(false)
24:     }
25:     
26:     if (isOpen) {
27:       document.addEventListener('keydown', handleEscape)
28:       document.body.style.overflow = 'hidden'
29:     }
30:     
31:     return () => {
32:       document.removeEventListener('keydown', handleEscape)
33:       document.body.style.overflow = 'unset'
34:     }
35:   }, [isOpen])
36: 
37:   return (
38:     <>
39:       {/* Hamburger Button */}
40:       <button
41:         onClick={() => setIsOpen(!isOpen)}
42:         className="lg:hidden fixed top-4 right-4 z-[60] p-2 rounded-lg bg-card border border-border shadow-lg hover:bg-muted transition-colors"
43:         aria-label={isOpen ? 'Close menu' : 'Open menu'}
44:         aria-expanded={isOpen}
45:       >
46:         {isOpen ? (
47:           <X className="w-6 h-6" />
48:         ) : (
49:           <Menu className="w-6 h-6" />
50:         )}
51:       </button>
52: 
53:       {/* Overlay */}
54:       {isOpen && (
55:         <div
56:           className="fixed inset-0 bg-background/80 backdrop-blur-sm z-[50] lg:hidden"
57:           onClick={() => setIsOpen(false)}
58:           aria-hidden="true"
59:         />
60:       )}
61: 
62:       {/* Menu Content */}
63:       <nav
64:         className={cn(
65:           'fixed top-0 right-0 h-full w-[280px] bg-card border-l border-border shadow-2xl z-[55] lg:relative lg:w-auto lg:h-auto lg:border-0 lg:shadow-none lg:bg-transparent',
66:           'transform transition-transform duration-300 ease-in-out',
67:           isOpen ? 'translate-x-0' : 'translate-x-full lg:translate-x-0',
68:           className
69:         )}
70:       >
71:         <div className="p-6 pt-20 lg:p-0 h-full overflow-y-auto">
72:           {children}
73:         </div>
74:       </nav>
75:     </>
76:   )
77: }
78: 
79: export function MobileMenuTrigger({ onClick }: { onClick: () => void }) {
80:   return (
81:     <button
82:       onClick={onClick}
83:       className="lg:hidden p-2 rounded-lg hover:bg-muted transition-colors"
84:       aria-label="Toggle menu"
85:     >
86:       <Menu className="w-6 h-6" />
87:     </button>
88:   )
89: }
</file>

<file path="src/components/ui/preview-empty.tsx">
 1: 'use client'
 2: 
 3: import { FileText, Mail, Briefcase, Search } from 'lucide-react'
 4: 
 5: export interface PreviewEmptyProps {
 6:   icon?: 'document' | 'email' | 'job' | 'search' | React.ReactNode
 7:   title?: string
 8:   description?: string
 9:   action?: React.ReactNode
10:   className?: string
11: }
12: 
13: const icons = {
14:   document: FileText,
15:   email: Mail,
16:   job: Briefcase,
17:   search: Search,
18: }
19: 
20: export function PreviewEmpty({ 
21:   icon = 'document',
22:   title = 'No preview available',
23:   description = 'Complete the form to see a preview',
24:   action,
25:   className = ''
26: }: PreviewEmptyProps) {
27:   const IconComponent = typeof icon === 'string' ? icons[icon] : null
28: 
29:   return (
30:     <div className={`preview-empty ${className}`}>
31:       <div className="preview-empty__icon">
32:         {IconComponent ? (
33:           <IconComponent className="w-16 h-16" style={{ color: 'var(--color-text-secondary)' }} />
34:         ) : (
35:           icon
36:         )}
37:       </div>
38:       <h3 
39:         className="text-xl font-semibold mb-2"
40:         style={{ color: 'var(--color-text)' }}
41:       >
42:         {title}
43:       </h3>
44:       <p 
45:         className="text-sm mb-6"
46:         style={{ color: 'var(--color-text-secondary)' }}
47:       >
48:         {description}
49:       </p>
50:       {action && (
51:         <div className="mt-4">
52:           {action}
53:         </div>
54:       )}
55:     </div>
56:   )
57: }
58: 
59: // Wrapper for preview containers
60: export function PreviewContainer({ 
61:   children, 
62:   isEmpty = false,
63:   emptyState,
64:   className = ''
65: }: {
66:   children: React.ReactNode
67:   isEmpty?: boolean
68:   emptyState?: PreviewEmptyProps
69:   className?: string
70: }) {
71:   return (
72:     <div className={`preview-container ${className}`}>
73:       {isEmpty && emptyState ? (
74:         <PreviewEmpty {...emptyState} />
75:       ) : (
76:         children
77:       )}
78:     </div>
79:   )
80: }
</file>

<file path="src/components/ui/toast-system.tsx">
  1: /**
  2:  * TOAST NOTIFICATION SYSTEM
  3:  * Modern toast notifications with animations
  4:  */
  5: 
  6: 'use client'
  7: 
  8: import { createContext, useContext, useState, useCallback, ReactNode } from 'react'
  9: import { X, CheckCircle, AlertCircle, Info, AlertTriangle } from 'lucide-react'
 10: import { cn } from '@/lib/utils'
 11: 
 12: type ToastType = 'success' | 'error' | 'warning' | 'info'
 13: 
 14: interface Toast {
 15:   id: string
 16:   message: string
 17:   type: ToastType
 18:   duration?: number
 19: }
 20: 
 21: interface ToastContextType {
 22:   showToast: (message: string, type: ToastType, duration?: number) => void
 23:   success: (message: string, duration?: number) => void
 24:   error: (message: string, duration?: number) => void
 25:   warning: (message: string, duration?: number) => void
 26:   info: (message: string, duration?: number) => void
 27: }
 28: 
 29: const ToastContext = createContext<ToastContextType | undefined>(undefined)
 30: 
 31: export function useToast() {
 32:   const context = useContext(ToastContext)
 33:   if (!context) {
 34:     throw new Error('useToast must be used within ToastProvider')
 35:   }
 36:   return context
 37: }
 38: 
 39: export function ToastProvider({ children }: { children: ReactNode }) {
 40:   const [toasts, setToasts] = useState<Toast[]>([])
 41: 
 42:   const showToast = useCallback((message: string, type: ToastType, duration = 4000) => {
 43:     const id = Math.random().toString(36).substr(2, 9)
 44:     const toast: Toast = { id, message, type, duration }
 45:     
 46:     setToasts(prev => [...prev, toast])
 47: 
 48:     if (duration > 0) {
 49:       setTimeout(() => {
 50:         setToasts(prev => prev.filter(t => t.id !== id))
 51:       }, duration)
 52:     }
 53:   }, [])
 54: 
 55:   const success = useCallback((message: string, duration?: number) => {
 56:     showToast(message, 'success', duration)
 57:   }, [showToast])
 58: 
 59:   const error = useCallback((message: string, duration?: number) => {
 60:     showToast(message, 'error', duration)
 61:   }, [showToast])
 62: 
 63:   const warning = useCallback((message: string, duration?: number) => {
 64:     showToast(message, 'warning', duration)
 65:   }, [showToast])
 66: 
 67:   const info = useCallback((message: string, duration?: number) => {
 68:     showToast(message, 'info', duration)
 69:   }, [showToast])
 70: 
 71:   const removeToast = (id: string) => {
 72:     setToasts(prev => prev.filter(t => t.id !== id))
 73:   }
 74: 
 75:   return (
 76:     <ToastContext.Provider value={{ showToast, success, error, warning, info }}>
 77:       {children}
 78:       <div className="toast-container">
 79:         {toasts.map(toast => (
 80:           <ToastItem key={toast.id} toast={toast} onClose={() => removeToast(toast.id)} />
 81:         ))}
 82:       </div>
 83:     </ToastContext.Provider>
 84:   )
 85: }
 86: 
 87: function ToastItem({ toast, onClose }: { toast: Toast; onClose: () => void }) {
 88:   const icons = {
 89:     success: CheckCircle,
 90:     error: AlertCircle,
 91:     warning: AlertTriangle,
 92:     info: Info
 93:   }
 94: 
 95:   const Icon = icons[toast.type]
 96: 
 97:   return (
 98:     <div className={cn('toast', `toast--${toast.type}`)}>
 99:       <Icon className="w-5 h-5 flex-shrink-0" />
100:       <p className="flex-1">{toast.message}</p>
101:       <button
102:         onClick={onClose}
103:         className="flex-shrink-0 hover:opacity-70 transition-opacity"
104:         aria-label="Close notification"
105:       >
106:         <X className="w-4 h-4" />
107:       </button>
108:     </div>
109:   )
110: }
</file>

<file path="src/components/ui/toast.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { CheckCircle, XCircle, AlertCircle, Info, X } from 'lucide-react'
  5: 
  6: export type ToastType = 'success' | 'error' | 'warning' | 'info'
  7: 
  8: export interface ToastProps {
  9:   type?: ToastType
 10:   message: string
 11:   icon?: React.ReactNode
 12:   autoDismiss?: number
 13:   onClose?: () => void
 14: }
 15: 
 16: const toastIcons = {
 17:   success: CheckCircle,
 18:   error: XCircle,
 19:   warning: AlertCircle,
 20:   info: Info,
 21: }
 22: 
 23: export function Toast({ 
 24:   type = 'info', 
 25:   message, 
 26:   icon, 
 27:   autoDismiss = 3000,
 28:   onClose 
 29: }: ToastProps) {
 30:   const [isVisible, setIsVisible] = useState(true)
 31:   const Icon = icon || toastIcons[type]
 32: 
 33:   useEffect(() => {
 34:     if (autoDismiss > 0) {
 35:       const timer = setTimeout(() => {
 36:         setIsVisible(false)
 37:         onClose?.()
 38:       }, autoDismiss)
 39:       return () => clearTimeout(timer)
 40:     }
 41:   }, [autoDismiss, onClose])
 42: 
 43:   if (!isVisible) return null
 44: 
 45:   return (
 46:     <div 
 47:       className={`toast toast--${type}`}
 48:       role="alert"
 49:       aria-live="polite"
 50:     >
 51:       {typeof Icon === 'function' ? (
 52:         <Icon className="w-5 h-5 flex-shrink-0" />
 53:       ) : (
 54:         Icon
 55:       )}
 56:       <span className="flex-1">{message}</span>
 57:       <button
 58:         onClick={() => {
 59:           setIsVisible(false)
 60:           onClose?.()
 61:         }}
 62:         className="ml-2 hover:opacity-70 transition-opacity"
 63:         aria-label="Close notification"
 64:       >
 65:         <X className="w-4 h-4" />
 66:       </button>
 67:     </div>
 68:   )
 69: }
 70: 
 71: // Toast Container for managing multiple toasts
 72: export function ToastContainer({ 
 73:   toasts 
 74: }: { 
 75:   toasts: Array<ToastProps & { id: string }> 
 76: }) {
 77:   return (
 78:     <div 
 79:       className="fixed bottom-5 right-5 z-50 flex flex-col gap-3"
 80:       aria-label="Notifications"
 81:     >
 82:       {toasts.map((toast) => (
 83:         <Toast key={toast.id} {...toast} />
 84:       ))}
 85:     </div>
 86:   )
 87: }
 88: 
 89: // Hook for managing toasts
 90: export function useToast() {
 91:   const [toasts, setToasts] = useState<Array<ToastProps & { id: string }>>([])
 92: 
 93:   const showToast = (props: ToastProps) => {
 94:     const id = Math.random().toString(36).substring(7)
 95:     setToasts((prev) => [...prev, { ...props, id }])
 96:   }
 97: 
 98:   const removeToast = (id: string) => {
 99:     setToasts((prev) => prev.filter((toast) => toast.id !== id))
100:   }
101: 
102:   return {
103:     toasts,
104:     showToast,
105:     removeToast,
106:     success: (message: string) => showToast({ type: 'success', message }),
107:     error: (message: string) => showToast({ type: 'error', message }),
108:     warning: (message: string) => showToast({ type: 'warning', message }),
109:     info: (message: string) => showToast({ type: 'info', message }),
110:   }
111: }
</file>

<file path="src/components/ui/spinner.tsx">
  1: /**
  2:  * LOADING SPINNER COMPONENT
  3:  * Reusable spinner for loading states
  4:  */
  5: 
  6: import { cn } from '@/lib/utils'
  7: 
  8: interface SpinnerProps {
  9:   size?: 'sm' | 'md' | 'lg'
 10:   className?: string
 11: }
 12: 
 13: export function Spinner({ size = 'md', className }: SpinnerProps) {
 14:   const sizes = {
 15:     sm: 'w-4 h-4 border-2',
 16:     md: 'w-6 h-6 border-2',
 17:     lg: 'w-8 h-8 border-3'
 18:   }
 19: 
 20:   return (
 21:     <div
 22:       className={cn(
 23:         'loading-spinner animate-spin rounded-full border-current border-r-transparent',
 24:         sizes[size],
 25:         className
 26:       )}
 27:       role="status"
 28:       aria-label="Loading"
 29:     >
 30:       <span className="sr-only">Loading...</span>
 31:     </div>
 32:   )
 33: }
 34: 
 35: export function LoadingButton({
 36:   children,
 37:   isLoading,
 38:   loadingText = 'Loading...',
 39:   className,
 40:   ...props
 41: }: React.ButtonHTMLAttributes<HTMLButtonElement> & { 
 42:   isLoading?: boolean
 43:   loadingText?: string
 44: }) {
 45:   return (
 46:     <button 
 47:       {...props} 
 48:       disabled={isLoading || props.disabled}
 49:       className={cn(
 50:         isLoading && 'btn-loading',
 51:         className
 52:       )}
 53:       aria-busy={isLoading}
 54:     >
 55:       {isLoading ? (
 56:         <>
 57:           <Spinner size="sm" className="mr-2" />
 58:           {loadingText}
 59:         </>
 60:       ) : (
 61:         children
 62:       )}
 63:     </button>
 64:   )
 65: }
 66: 
 67: // Full page loading overlay
 68: export function LoadingOverlay({ message = 'Loading...' }: { message?: string }) {
 69:   return (
 70:     <div 
 71:       className="fixed inset-0 z-50 flex items-center justify-center"
 72:       style={{ 
 73:         background: 'rgba(var(--color-charcoal-900-rgb), 0.8)',
 74:         backdropFilter: 'blur(4px)'
 75:       }}
 76:       role="alert"
 77:       aria-busy="true"
 78:       aria-label={message}
 79:     >
 80:       <div 
 81:         className="flex flex-col items-center gap-4 p-8 rounded-lg"
 82:         style={{ background: 'var(--color-surface)' }}
 83:       >
 84:         <Spinner size="lg" />
 85:         <p style={{ color: 'var(--color-text)' }} className="font-medium">
 86:           {message}
 87:         </p>
 88:       </div>
 89:     </div>
 90:   )
 91: }
 92: 
 93: // Inline loading state for content areas
 94: export function LoadingState({ 
 95:   message = 'Loading...', 
 96:   className = '' 
 97: }: { 
 98:   message?: string
 99:   className?: string 
100: }) {
101:   return (
102:     <div 
103:       className={cn('flex flex-col items-center justify-center py-12', className)}
104:       role="status"
105:       aria-label={message}
106:     >
107:       <Spinner size="lg" />
108:       <p 
109:         className="mt-4 text-sm"
110:         style={{ color: 'var(--color-text-secondary)' }}
111:       >
112:         {message}
113:       </p>
114:     </div>
115:   )
116: }
</file>

<file path="src/app/globals.css">
   1: @tailwind base;
   2: @tailwind components;
   3: @tailwind utilities;
   4: 
   5: :root {
   6:   /* Primitive Color Tokens */
   7:   --color-white: rgba(255, 255, 255, 1);
   8:   --color-black: rgba(0, 0, 0, 1);
   9:   --color-cream-50: rgba(252, 252, 249, 1);
  10:   --color-cream-100: rgba(255, 255, 253, 1);
  11:   --color-gray-200: rgba(245, 245, 245, 1);
  12:   --color-gray-300: rgba(167, 169, 169, 1);
  13:   --color-gray-400: rgba(119, 124, 124, 1);
  14:   --color-slate-500: rgba(98, 108, 113, 1);
  15:   --color-brown-600: rgba(94, 82, 64, 1);
  16:   --color-charcoal-700: rgba(31, 33, 33, 1);
  17:   --color-charcoal-800: rgba(38, 40, 40, 1);
  18:   --color-slate-900: rgba(19, 52, 59, 1);
  19:   --color-teal-300: rgba(50, 184, 198, 1);
  20:   --color-teal-400: rgba(45, 166, 178, 1);
  21:   --color-teal-500: rgba(33, 128, 141, 1);
  22:   --color-teal-600: rgba(29, 116, 128, 1);
  23:   --color-teal-700: rgba(26, 104, 115, 1);
  24:   --color-teal-800: rgba(41, 150, 161, 1);
  25:   --color-red-400: rgba(255, 84, 89, 1);
  26:   --color-red-500: rgba(192, 21, 47, 1);
  27:   --color-orange-400: rgba(230, 129, 97, 1);
  28:   --color-orange-500: rgba(168, 75, 47, 1);
  29: 
  30:   /* RGB versions for opacity control */
  31:   --color-brown-600-rgb: 94, 82, 64;
  32:   --color-teal-500-rgb: 33, 128, 141;
  33:   --color-slate-900-rgb: 19, 52, 59;
  34:   --color-slate-500-rgb: 98, 108, 113;
  35:   --color-red-500-rgb: 192, 21, 47;
  36:   --color-red-400-rgb: 255, 84, 89;
  37:   --color-orange-500-rgb: 168, 75, 47;
  38:   --color-orange-400-rgb: 230, 129, 97;
  39: 
  40:   /* Background color tokens (Light Mode) */
  41:   --color-bg-1: rgba(59, 130, 246, 0.08); /* Light blue */
  42:   --color-bg-2: rgba(245, 158, 11, 0.08); /* Light yellow */
  43:   --color-bg-3: rgba(34, 197, 94, 0.08); /* Light green */
  44:   --color-bg-4: rgba(239, 68, 68, 0.08); /* Light red */
  45:   --color-bg-5: rgba(147, 51, 234, 0.08); /* Light purple */
  46:   --color-bg-6: rgba(249, 115, 22, 0.08); /* Light orange */
  47:   --color-bg-7: rgba(236, 72, 153, 0.08); /* Light pink */
  48:   --color-bg-8: rgba(6, 182, 212, 0.08); /* Light cyan */
  49: 
  50:   /* Semantic Color Tokens (Light Mode) */
  51:   --color-background: var(--color-cream-50);
  52:   --color-surface: var(--color-cream-100);
  53:   --color-text: var(--color-slate-900);
  54:   --color-text-secondary: var(--color-slate-500);
  55:   --color-primary: var(--color-teal-500);
  56:   --color-primary-hover: var(--color-teal-600);
  57:   --color-primary-active: var(--color-teal-700);
  58:   --color-secondary: rgba(var(--color-brown-600-rgb), 0.12);
  59:   --color-secondary-hover: rgba(var(--color-brown-600-rgb), 0.2);
  60:   --color-secondary-active: rgba(var(--color-brown-600-rgb), 0.25);
  61:   --color-border: rgba(var(--color-brown-600-rgb), 0.2);
  62:   --color-btn-primary-text: var(--color-cream-50);
  63:   --color-card-border: rgba(var(--color-brown-600-rgb), 0.12);
  64:   --color-card-border-inner: rgba(var(--color-brown-600-rgb), 0.12);
  65:   --color-error: var(--color-red-500);
  66:   --color-success: var(--color-teal-500);
  67:   --color-warning: var(--color-orange-500);
  68:   --color-info: var(--color-slate-500);
  69:   --color-focus-ring: rgba(var(--color-teal-500-rgb), 0.4);
  70:   --color-select-caret: rgba(var(--color-slate-900-rgb), 0.8);
  71: 
  72:   /* Common style patterns */
  73:   --focus-ring: 0 0 0 3px var(--color-focus-ring);
  74:   --focus-outline: 2px solid var(--color-primary);
  75:   --status-bg-opacity: 0.15;
  76:   --status-border-opacity: 0.25;
  77:   --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  78:   --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  79: 
  80:   /* RGB versions for opacity control */
  81:   --color-success-rgb: 33, 128, 141;
  82:   --color-error-rgb: 192, 21, 47;
  83:   --color-warning-rgb: 168, 75, 47;
  84:   --color-info-rgb: 98, 108, 113;
  85: 
  86:   /* Typography */
  87:   --font-family-base: "FKGroteskNeue", "Geist", "Inter", -apple-system,
  88:     BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  89:   --font-family-mono: "Berkeley Mono", ui-monospace, SFMono-Regular, Menlo,
  90:     Monaco, Consolas, monospace;
  91:   --font-size-xs: 11px;
  92:   --font-size-sm: 12px;
  93:   --font-size-base: 14px;
  94:   --font-size-md: 14px;
  95:   --font-size-lg: 16px;
  96:   --font-size-xl: 18px;
  97:   --font-size-2xl: 20px;
  98:   --font-size-3xl: 24px;
  99:   --font-size-4xl: 30px;
 100:   --font-weight-normal: 400;
 101:   --font-weight-medium: 500;
 102:   --font-weight-semibold: 550;
 103:   --font-weight-bold: 600;
 104:   --line-height-tight: 1.2;
 105:   --line-height-normal: 1.5;
 106:   --letter-spacing-tight: -0.01em;
 107: 
 108:   /* Spacing */
 109:   --space-0: 0;
 110:   --space-1: 1px;
 111:   --space-2: 2px;
 112:   --space-4: 4px;
 113:   --space-6: 6px;
 114:   --space-8: 8px;
 115:   --space-10: 10px;
 116:   --space-12: 12px;
 117:   --space-16: 16px;
 118:   --space-20: 20px;
 119:   --space-24: 24px;
 120:   --space-32: 32px;
 121: 
 122:   /* Border Radius */
 123:   --radius-sm: 6px;
 124:   --radius-base: 8px;
 125:   --radius-md: 10px;
 126:   --radius-lg: 12px;
 127:   --radius-full: 9999px;
 128: 
 129:   /* Shadows */
 130:   --shadow-xs: 0 1px 2px rgba(0, 0, 0, 0.02);
 131:   --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.04), 0 1px 2px rgba(0, 0, 0, 0.02);
 132:   --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.04),
 133:     0 2px 4px -1px rgba(0, 0, 0, 0.02);
 134:   --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.04),
 135:     0 4px 6px -2px rgba(0, 0, 0, 0.02);
 136:   --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.15),
 137:     inset 0 -1px 0 rgba(0, 0, 0, 0.03);
 138: 
 139:   /* Animation */
 140:   --duration-fast: 150ms;
 141:   --duration-normal: 250ms;
 142:   --ease-standard: cubic-bezier(0.16, 1, 0.3, 1);
 143: 
 144:   /* Layout */
 145:   --container-sm: 640px;
 146:   --container-md: 768px;
 147:   --container-lg: 1024px;
 148:   --container-xl: 1280px;
 149: }
 150: 
 151: /* Dark mode colors */
 152: @media (prefers-color-scheme: dark) {
 153:   :root {
 154:     /* RGB versions for opacity control (Dark Mode) */
 155:     --color-gray-400-rgb: 119, 124, 124;
 156:     --color-teal-300-rgb: 50, 184, 198;
 157:     --color-gray-300-rgb: 167, 169, 169;
 158:     --color-gray-200-rgb: 245, 245, 245;
 159: 
 160:     /* Background color tokens (Dark Mode) */
 161:     --color-bg-1: rgba(29, 78, 216, 0.15); /* Dark blue */
 162:     --color-bg-2: rgba(180, 83, 9, 0.15); /* Dark yellow */
 163:     --color-bg-3: rgba(21, 128, 61, 0.15); /* Dark green */
 164:     --color-bg-4: rgba(185, 28, 28, 0.15); /* Dark red */
 165:     --color-bg-5: rgba(107, 33, 168, 0.15); /* Dark purple */
 166:     --color-bg-6: rgba(194, 65, 12, 0.15); /* Dark orange */
 167:     --color-bg-7: rgba(190, 24, 93, 0.15); /* Dark pink */
 168:     --color-bg-8: rgba(8, 145, 178, 0.15); /* Dark cyan */
 169: 
 170:     /* Semantic Color Tokens (Dark Mode) */
 171:     --color-background: var(--color-charcoal-700);
 172:     --color-surface: var(--color-charcoal-800);
 173:     --color-text: var(--color-gray-200);
 174:     --color-text-secondary: rgba(var(--color-gray-300-rgb), 0.7);
 175:     --color-primary: var(--color-teal-300);
 176:     --color-primary-hover: var(--color-teal-400);
 177:     --color-primary-active: var(--color-teal-800);
 178:     --color-secondary: rgba(var(--color-gray-400-rgb), 0.15);
 179:     --color-secondary-hover: rgba(var(--color-gray-400-rgb), 0.25);
 180:     --color-secondary-active: rgba(var(--color-gray-400-rgb), 0.3);
 181:     --color-border: rgba(var(--color-gray-400-rgb), 0.3);
 182:     --color-error: var(--color-red-400);
 183:     --color-success: var(--color-teal-300);
 184:     --color-warning: var(--color-orange-400);
 185:     --color-info: var(--color-gray-300);
 186:     --color-focus-ring: rgba(var(--color-teal-300-rgb), 0.4);
 187:     --color-btn-primary-text: var(--color-slate-900);
 188:     --color-card-border: rgba(var(--color-gray-400-rgb), 0.2);
 189:     --color-card-border-inner: rgba(var(--color-gray-400-rgb), 0.15);
 190:     --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.1),
 191:       inset 0 -1px 0 rgba(0, 0, 0, 0.15);
 192:     --button-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
 193:     --color-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
 194:     --color-select-caret: rgba(var(--color-gray-200-rgb), 0.8);
 195: 
 196:     /* Common style patterns - updated for dark mode */
 197:     --focus-ring: 0 0 0 3px var(--color-focus-ring);
 198:     --focus-outline: 2px solid var(--color-primary);
 199:     --status-bg-opacity: 0.15;
 200:     --status-border-opacity: 0.25;
 201:     --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
 202:     --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
 203: 
 204:     /* RGB versions for dark mode */
 205:     --color-success-rgb: var(--color-teal-300-rgb);
 206:     --color-error-rgb: var(--color-red-400-rgb);
 207:     --color-warning-rgb: var(--color-orange-400-rgb);
 208:     --color-info-rgb: var(--color-gray-300-rgb);
 209:   }
 210: }
 211: 
 212: /* Data attribute for manual theme switching */
 213: [data-color-scheme="dark"] {
 214:   /* RGB versions for opacity control (dark mode) */
 215:   --color-gray-400-rgb: 119, 124, 124;
 216:   --color-teal-300-rgb: 50, 184, 198;
 217:   --color-gray-300-rgb: 167, 169, 169;
 218:   --color-gray-200-rgb: 245, 245, 245;
 219: 
 220:   /* Colorful background palette - Dark Mode */
 221:   --color-bg-1: rgba(29, 78, 216, 0.15); /* Dark blue */
 222:   --color-bg-2: rgba(180, 83, 9, 0.15); /* Dark yellow */
 223:   --color-bg-3: rgba(21, 128, 61, 0.15); /* Dark green */
 224:   --color-bg-4: rgba(185, 28, 28, 0.15); /* Dark red */
 225:   --color-bg-5: rgba(107, 33, 168, 0.15); /* Dark purple */
 226:   --color-bg-6: rgba(194, 65, 12, 0.15); /* Dark orange */
 227:   --color-bg-7: rgba(190, 24, 93, 0.15); /* Dark pink */
 228:   --color-bg-8: rgba(8, 145, 178, 0.15); /* Dark cyan */
 229: 
 230:   /* Semantic Color Tokens (Dark Mode) */
 231:   --color-background: var(--color-charcoal-700);
 232:   --color-surface: var(--color-charcoal-800);
 233:   --color-text: var(--color-gray-200);
 234:   --color-text-secondary: rgba(var(--color-gray-300-rgb), 0.7);
 235:   --color-primary: var(--color-teal-300);
 236:   --color-primary-hover: var(--color-teal-400);
 237:   --color-primary-active: var(--color-teal-800);
 238:   --color-secondary: rgba(var(--color-gray-400-rgb), 0.15);
 239:   --color-secondary-hover: rgba(var(--color-gray-400-rgb), 0.25);
 240:   --color-secondary-active: rgba(var(--color-gray-400-rgb), 0.3);
 241:   --color-border: rgba(var(--color-gray-400-rgb), 0.3);
 242:   --color-error: var(--color-red-400);
 243:   --color-success: var(--color-teal-300);
 244:   --color-warning: var(--color-orange-400);
 245:   --color-info: var(--color-gray-300);
 246:   --color-focus-ring: rgba(var(--color-teal-300-rgb), 0.4);
 247:   --color-btn-primary-text: var(--color-slate-900);
 248:   --color-card-border: rgba(var(--color-gray-400-rgb), 0.15);
 249:   --color-card-border-inner: rgba(var(--color-gray-400-rgb), 0.15);
 250:   --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.1),
 251:     inset 0 -1px 0 rgba(0, 0, 0, 0.15);
 252:   --color-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
 253:   --color-select-caret: rgba(var(--color-gray-200-rgb), 0.8);
 254: 
 255:   /* Common style patterns - updated for dark mode */
 256:   --focus-ring: 0 0 0 3px var(--color-focus-ring);
 257:   --focus-outline: 2px solid var(--color-primary);
 258:   --status-bg-opacity: 0.15;
 259:   --status-border-opacity: 0.25;
 260:   --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
 261:   --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
 262: 
 263:   /* RGB versions for dark mode */
 264:   --color-success-rgb: var(--color-teal-300-rgb);
 265:   --color-error-rgb: var(--color-red-400-rgb);
 266:   --color-warning-rgb: var(--color-orange-400-rgb);
 267:   --color-info-rgb: var(--color-gray-300-rgb);
 268: }
 269: 
 270: [data-color-scheme="light"] {
 271:   /* RGB versions for opacity control (light mode) */
 272:   --color-brown-600-rgb: 94, 82, 64;
 273:   --color-teal-500-rgb: 33, 128, 141;
 274:   --color-slate-900-rgb: 19, 52, 59;
 275: 
 276:   /* Semantic Color Tokens (Light Mode) */
 277:   --color-background: var(--color-cream-50);
 278:   --color-surface: var(--color-cream-100);
 279:   --color-text: var(--color-slate-900);
 280:   --color-text-secondary: var(--color-slate-500);
 281:   --color-primary: var(--color-teal-500);
 282:   --color-primary-hover: var(--color-teal-600);
 283:   --color-primary-active: var(--color-teal-700);
 284:   --color-secondary: rgba(var(--color-brown-600-rgb), 0.12);
 285:   --color-secondary-hover: rgba(var(--color-brown-600-rgb), 0.2);
 286:   --color-secondary-active: rgba(var(--color-brown-600-rgb), 0.25);
 287:   --color-border: rgba(var(--color-brown-600-rgb), 0.2);
 288:   --color-btn-primary-text: var(--color-cream-50);
 289:   --color-card-border: rgba(var(--color-brown-600-rgb), 0.12);
 290:   --color-card-border-inner: rgba(var(--color-brown-600-rgb), 0.12);
 291:   --color-error: var(--color-red-500);
 292:   --color-success: var(--color-teal-500);
 293:   --color-warning: var(--color-orange-500);
 294:   --color-info: var(--color-slate-500);
 295:   --color-focus-ring: rgba(var(--color-teal-500-rgb), 0.4);
 296: 
 297:   /* RGB versions for light mode */
 298:   --color-success-rgb: var(--color-teal-500-rgb);
 299:   --color-error-rgb: var(--color-red-500-rgb);
 300:   --color-warning-rgb: var(--color-orange-500-rgb);
 301:   --color-info-rgb: var(--color-slate-500-rgb);
 302: }
 303: 
 304: /* Base styles */
 305: html {
 306:   font-size: var(--font-size-base);
 307:   font-family: var(--font-family-base);
 308:   line-height: var(--line-height-normal);
 309:   color: var(--color-text);
 310:   background-color: var(--color-background);
 311:   -webkit-font-smoothing: antialiased;
 312:   box-sizing: border-box;
 313: }
 314: 
 315: body {
 316:   margin: 0;
 317:   padding: 0;
 318: }
 319: 
 320: *,
 321: *::before,
 322: *::after {
 323:   box-sizing: inherit;
 324: }
 325: 
 326: /* Typography */
 327: h1,
 328: h2,
 329: h3,
 330: h4,
 331: h5,
 332: h6 {
 333:   margin: 0;
 334:   font-weight: var(--font-weight-semibold);
 335:   line-height: var(--line-height-tight);
 336:   color: var(--color-text);
 337:   letter-spacing: var(--letter-spacing-tight);
 338: }
 339: 
 340: h1 {
 341:   font-size: var(--font-size-4xl);
 342: }
 343: h2 {
 344:   font-size: var(--font-size-3xl);
 345: }
 346: h3 {
 347:   font-size: var(--font-size-2xl);
 348: }
 349: h4 {
 350:   font-size: var(--font-size-xl);
 351: }
 352: h5 {
 353:   font-size: var(--font-size-lg);
 354: }
 355: h6 {
 356:   font-size: var(--font-size-md);
 357: }
 358: 
 359: p {
 360:   margin: 0 0 var(--space-16) 0;
 361: }
 362: 
 363: a {
 364:   color: var(--color-primary);
 365:   text-decoration: none;
 366:   transition: color var(--duration-fast) var(--ease-standard);
 367: }
 368: 
 369: a:hover {
 370:   color: var(--color-primary-hover);
 371: }
 372: 
 373: code,
 374: pre {
 375:   font-family: var(--font-family-mono);
 376:   font-size: calc(var(--font-size-base) * 0.95);
 377:   background-color: var(--color-secondary);
 378:   border-radius: var(--radius-sm);
 379: }
 380: 
 381: code {
 382:   padding: var(--space-1) var(--space-4);
 383: }
 384: 
 385: pre {
 386:   padding: var(--space-16);
 387:   margin: var(--space-16) 0;
 388:   overflow: auto;
 389:   border: 1px solid var(--color-border);
 390: }
 391: 
 392: pre code {
 393:   background: none;
 394:   padding: 0;
 395: }
 396: 
 397: /* Buttons */
 398: .btn {
 399:   display: inline-flex;
 400:   align-items: center;
 401:   justify-content: center;
 402:   padding: var(--space-8) var(--space-16);
 403:   border-radius: var(--radius-base);
 404:   font-size: var(--font-size-base);
 405:   font-weight: 500;
 406:   line-height: 1.5;
 407:   cursor: pointer;
 408:   transition: all var(--duration-normal) var(--ease-standard);
 409:   border: none;
 410:   text-decoration: none;
 411:   position: relative;
 412: }
 413: 
 414: .btn:focus-visible {
 415:   outline: none;
 416:   box-shadow: var(--focus-ring);
 417: }
 418: 
 419: .btn--primary {
 420:   background: var(--color-primary);
 421:   color: var(--color-btn-primary-text);
 422: }
 423: 
 424: .btn--primary:hover {
 425:   background: var(--color-primary-hover);
 426: }
 427: 
 428: .btn--primary:active {
 429:   background: var(--color-primary-active);
 430: }
 431: 
 432: .btn--secondary {
 433:   background: var(--color-secondary);
 434:   color: var(--color-text);
 435: }
 436: 
 437: .btn--secondary:hover {
 438:   background: var(--color-secondary-hover);
 439: }
 440: 
 441: .btn--secondary:active {
 442:   background: var(--color-secondary-active);
 443: }
 444: 
 445: .btn--outline {
 446:   background: transparent;
 447:   border: 1px solid var(--color-border);
 448:   color: var(--color-text);
 449: }
 450: 
 451: .btn--outline:hover {
 452:   background: var(--color-secondary);
 453: }
 454: 
 455: .btn--sm {
 456:   padding: var(--space-4) var(--space-12);
 457:   font-size: var(--font-size-sm);
 458:   border-radius: var(--radius-sm);
 459: }
 460: 
 461: .btn--lg {
 462:   padding: var(--space-10) var(--space-20);
 463:   font-size: var(--font-size-lg);
 464:   border-radius: var(--radius-md);
 465: }
 466: 
 467: .btn--full-width {
 468:   width: 100%;
 469: }
 470: 
 471: .btn:disabled {
 472:   opacity: 0.5;
 473:   cursor: not-allowed;
 474: }
 475: 
 476: /* Form elements */
 477: .form-control {
 478:   display: block;
 479:   width: 100%;
 480:   padding: var(--space-8) var(--space-12);
 481:   font-size: var(--font-size-md);
 482:   line-height: 1.5;
 483:   color: var(--color-text);
 484:   background-color: var(--color-surface);
 485:   border: 1px solid var(--color-border);
 486:   border-radius: var(--radius-base);
 487:   transition: border-color var(--duration-fast) var(--ease-standard),
 488:     box-shadow var(--duration-fast) var(--ease-standard);
 489: }
 490: 
 491: textarea.form-control {
 492:   font-family: var(--font-family-base);
 493:   font-size: var(--font-size-base);
 494: }
 495: 
 496: select.form-control {
 497:   padding: var(--space-8) var(--space-12);
 498:   -webkit-appearance: none;
 499:   -moz-appearance: none;
 500:   appearance: none;
 501:   background-image: var(--select-caret-light);
 502:   background-repeat: no-repeat;
 503:   background-position: right var(--space-12) center;
 504:   background-size: 16px;
 505:   padding-right: var(--space-32);
 506: }
 507: 
 508: /* Add a dark mode specific caret */
 509: @media (prefers-color-scheme: dark) {
 510:   select.form-control {
 511:     background-image: var(--select-caret-dark);
 512:   }
 513: }
 514: 
 515: /* Also handle data-color-scheme */
 516: [data-color-scheme="dark"] select.form-control {
 517:   background-image: var(--select-caret-dark);
 518: }
 519: 
 520: [data-color-scheme="light"] select.form-control {
 521:   background-image: var(--select-caret-light);
 522: }
 523: 
 524: .form-control:focus {
 525:   border-color: var(--color-primary);
 526:   outline: var(--focus-outline);
 527: }
 528: 
 529: .form-label {
 530:   display: block;
 531:   margin-bottom: var(--space-8);
 532:   font-weight: var(--font-weight-medium);
 533:   font-size: var(--font-size-sm);
 534: }
 535: 
 536: .form-group {
 537:   margin-bottom: var(--space-16);
 538: }
 539: 
 540: /* Card component */
 541: .card {
 542:   background-color: var(--color-surface);
 543:   border-radius: var(--radius-lg);
 544:   border: 1px solid var(--color-card-border);
 545:   box-shadow: var(--shadow-sm);
 546:   overflow: hidden;
 547:   transition: box-shadow var(--duration-normal) var(--ease-standard);
 548: }
 549: 
 550: .card:hover {
 551:   box-shadow: var(--shadow-md);
 552: }
 553: 
 554: .card__body {
 555:   padding: var(--space-16);
 556: }
 557: 
 558: .card__header,
 559: .card__footer {
 560:   padding: var(--space-16);
 561:   border-bottom: 1px solid var(--color-card-border-inner);
 562: }
 563: 
 564: /* Status indicators - simplified with CSS variables */
 565: .status {
 566:   display: inline-flex;
 567:   align-items: center;
 568:   padding: var(--space-6) var(--space-12);
 569:   border-radius: var(--radius-full);
 570:   font-weight: var(--font-weight-medium);
 571:   font-size: var(--font-size-sm);
 572: }
 573: 
 574: .status--success {
 575:   background-color: rgba(
 576:     var(--color-success-rgb, 33, 128, 141),
 577:     var(--status-bg-opacity)
 578:   );
 579:   color: var(--color-success);
 580:   border: 1px solid
 581:     rgba(var(--color-success-rgb, 33, 128, 141), var(--status-border-opacity));
 582: }
 583: 
 584: .status--error {
 585:   background-color: rgba(
 586:     var(--color-error-rgb, 192, 21, 47),
 587:     var(--status-bg-opacity)
 588:   );
 589:   color: var(--color-error);
 590:   border: 1px solid
 591:     rgba(var(--color-error-rgb, 192, 21, 47), var(--status-border-opacity));
 592: }
 593: 
 594: .status--warning {
 595:   background-color: rgba(
 596:     var(--color-warning-rgb, 168, 75, 47),
 597:     var(--status-bg-opacity)
 598:   );
 599:   color: var(--color-warning);
 600:   border: 1px solid
 601:     rgba(var(--color-warning-rgb, 168, 75, 47), var(--status-border-opacity));
 602: }
 603: 
 604: .status--info {
 605:   background-color: rgba(
 606:     var(--color-info-rgb, 98, 108, 113),
 607:     var(--status-bg-opacity)
 608:   );
 609:   color: var(--color-info);
 610:   border: 1px solid
 611:     rgba(var(--color-info-rgb, 98, 108, 113), var(--status-border-opacity));
 612: }
 613: 
 614: /* Container layout */
 615: .container {
 616:   width: 100%;
 617:   margin-right: auto;
 618:   margin-left: auto;
 619:   padding-right: var(--space-16);
 620:   padding-left: var(--space-16);
 621: }
 622: 
 623: @media (min-width: 640px) {
 624:   .container {
 625:     max-width: var(--container-sm);
 626:   }
 627: }
 628: @media (min-width: 768px) {
 629:   .container {
 630:     max-width: var(--container-md);
 631:   }
 632: }
 633: @media (min-width: 1024px) {
 634:   .container {
 635:     max-width: var(--container-lg);
 636:   }
 637: }
 638: @media (min-width: 1280px) {
 639:   .container {
 640:     max-width: var(--container-xl);
 641:   }
 642: }
 643: 
 644: /* Utility classes */
 645: .flex {
 646:   display: flex;
 647: }
 648: .flex-col {
 649:   flex-direction: column;
 650: }
 651: .items-center {
 652:   align-items: center;
 653: }
 654: .justify-center {
 655:   justify-content: center;
 656: }
 657: .justify-between {
 658:   justify-content: space-between;
 659: }
 660: .gap-4 {
 661:   gap: var(--space-4);
 662: }
 663: .gap-8 {
 664:   gap: var(--space-8);
 665: }
 666: .gap-16 {
 667:   gap: var(--space-16);
 668: }
 669: 
 670: .m-0 {
 671:   margin: 0;
 672: }
 673: .mt-8 {
 674:   margin-top: var(--space-8);
 675: }
 676: .mb-8 {
 677:   margin-bottom: var(--space-8);
 678: }
 679: .mx-8 {
 680:   margin-left: var(--space-8);
 681:   margin-right: var(--space-8);
 682: }
 683: .my-8 {
 684:   margin-top: var(--space-8);
 685:   margin-bottom: var(--space-8);
 686: }
 687: 
 688: .p-0 {
 689:   padding: 0;
 690: }
 691: .py-8 {
 692:   padding-top: var(--space-8);
 693:   padding-bottom: var(--space-8);
 694: }
 695: .px-8 {
 696:   padding-left: var(--space-8);
 697:   padding-right: var(--space-8);
 698: }
 699: .py-16 {
 700:   padding-top: var(--space-16);
 701:   padding-bottom: var(--space-16);
 702: }
 703: .px-16 {
 704:   padding-left: var(--space-16);
 705:   padding-right: var(--space-16);
 706: }
 707: 
 708: .block {
 709:   display: block;
 710: }
 711: .hidden {
 712:   display: none;
 713: }
 714: 
 715: /* Accessibility */
 716: .sr-only {
 717:   position: absolute;
 718:   width: 1px;
 719:   height: 1px;
 720:   padding: 0;
 721:   margin: -1px;
 722:   overflow: hidden;
 723:   clip: rect(0, 0, 0, 0);
 724:   white-space: nowrap;
 725:   border-width: 0;
 726: }
 727: 
 728: :focus-visible {
 729:   outline: var(--focus-outline);
 730:   outline-offset: 2px;
 731: }
 732: 
 733: /* Dark mode specifics */
 734: [data-color-scheme="dark"] .btn--outline {
 735:   border: 1px solid var(--color-border-secondary);
 736: }
 737: 
 738: @font-face {
 739:   font-family: 'FKGroteskNeue';
 740:   src: url('https://r2cdn.perplexity.ai/fonts/FKGroteskNeue.woff2')
 741:     format('woff2');
 742: }
 743: 
 744: /* END PERPLEXITY DESIGN SYSTEM */
 745: 
 746: /* ===================================================================
 747:    CSS VARIABLES - SINGLE SOURCE OF TRUTH
 748:    =================================================================== */
 749: 
 750: @layer base {
 751:   :root {
 752:     /* Core Theme Colors - HSL Format for Tailwind */
 753:     --background: 198 33% 12%;
 754:     --foreground: 198 8% 96%;
 755:     
 756:     --card: 198 33% 15%;
 757:     --card-foreground: 198 8% 96%;
 758:     
 759:     --popover: 198 33% 17%;
 760:     --popover-foreground: 198 40% 98%;
 761:     
 762:     --primary: 180 65% 34%;
 763:     --primary-foreground: 198 33% 12%;
 764:     
 765:     --secondary: 180 65% 34%;
 766:     --secondary-foreground: 198 33% 12%;
 767:     
 768:     --accent: 180 65% 34%;
 769:     --accent-foreground: 198 33% 12%;
 770:     
 771:     --muted: 198 25% 20%;
 772:     --muted-foreground: 198 15% 65%;
 773:     
 774:     --destructive: 348 83% 47%;
 775:     --destructive-foreground: 198 40% 98%;
 776:     
 777:     --success: 180 65% 34%;
 778:     --success-foreground: 198 33% 12%;
 779:     
 780:     --warning: 26 60% 42%;
 781:     --warning-foreground: 198 33% 12%;
 782:     
 783:     --border: 198 25% 20%;
 784:     --input: 198 33% 15%;
 785:     --ring: 180 65% 34%;
 786:     
 787:     /* Border Radius */
 788:     --radius: var(--radius-base);
 789:     --radius-sm: var(--radius-sm);
 790:     --radius-md: var(--radius-md);
 791:     --radius-lg: var(--radius-lg);
 792:     --radius-xl: var(--radius-lg);
 793:     --radius-2xl: var(--radius-lg);
 794:     --radius-full: var(--radius-full);
 795:     
 796:     /* Spacing Scale */
 797:     --spacing-xs: var(--space-4);
 798:     --spacing-sm: var(--space-8);
 799:     --spacing-md: var(--space-16);
 800:     --spacing-lg: var(--space-24);
 801:     --spacing-xl: var(--space-32);
 802:     --spacing-2xl: calc(var(--space-32) * 1.5);
 803:     --spacing-3xl: calc(var(--space-32) * 2);
 804:     
 805:     /* Shadows */
 806:     --shadow-xs: var(--shadow-xs);
 807:     --shadow-sm: var(--shadow-sm);
 808:     --shadow-md: var(--shadow-md);
 809:     --shadow-lg: var(--shadow-lg);
 810:     --shadow-xl: var(--shadow-lg);
 811:     --shadow-2xl: var(--shadow-lg);
 812:     
 813:     /* Transitions */
 814:     --transition-fast: var(--duration-fast) var(--ease-standard);
 815:     --transition-base: var(--duration-normal) var(--ease-standard);
 816:     --transition-slow: var(--duration-normal) var(--ease-standard);
 817:     
 818:     /* Z-Index Scale */
 819:     --z-base: 0;
 820:     --z-dropdown: 100;
 821:     --z-sticky: 200;
 822:     --z-fixed: 300;
 823:     --z-modal-backdrop: 400;
 824:     --z-modal: 500;
 825:     --z-popover: 600;
 826:     --z-tooltip: 700;
 827:     --z-toast: 800;
 828:   }
 829:   
 830:   /* Light Theme */
 831:   [data-theme="light"] {
 832:     --background: 198 33% 98%;
 833:     --foreground: 198 75% 12%;
 834:     --card: 198 33% 100%;
 835:     --card-foreground: 198 75% 12%;
 836:     --popover: 198 33% 100%;
 837:     --popover-foreground: 198 75% 12%;
 838:     --muted: 198 40% 96%;
 839:     --muted-foreground: 198 16% 47%;
 840:     --border: 198 32% 91%;
 841:     --input: 198 32% 91%;
 842:   }
 843: }
 844: 
 845: /* ===================================================================
 846:    BASE STYLES
 847:    =================================================================== */
 848: 
 849: @layer base {
 850:   * {
 851:     @apply border-border;
 852:   }
 853:   
 854:   body {
 855:     background-color: var(--color-background);
 856:     color: var(--color-text);
 857:     font-family: var(--font-family-base);
 858:     font-feature-settings: "rlig" 1, "calt" 1;
 859:     min-height: 100vh;
 860:     -webkit-font-smoothing: antialiased;
 861:     -moz-osx-font-smoothing: grayscale;
 862:     margin: 0;
 863:     padding: 0;
 864:   }
 865:   
 866:   html {
 867:     scroll-behavior: smooth;
 868:     font-size: var(--font-size-base);
 869:     line-height: var(--line-height-normal);
 870:   }
 871:   
 872:   h1, h2, h3, h4, h5, h6 {
 873:     font-family: var(--font-family-base);
 874:     font-weight: var(--font-weight-semibold);
 875:     line-height: var(--line-height-tight);
 876:     color: var(--color-text);
 877:     letter-spacing: var(--letter-spacing-tight);
 878:     margin: 0;
 879:   }
 880: 
 881:   h1 { font-size: var(--font-size-4xl); }
 882:   h2 { font-size: var(--font-size-3xl); }
 883:   h3 { font-size: var(--font-size-2xl); }
 884:   h4 { font-size: var(--font-size-xl); }
 885:   h5 { font-size: var(--font-size-lg); }
 886:   h6 { font-size: var(--font-size-md); }
 887: }
 888: 
 889: /* ===================================================================
 890:    COMPONENT STYLES
 891:    =================================================================== */
 892: 
 893: @layer components {
 894:   /* ============================================
 895:      BUTTONS
 896:      ============================================ */
 897:   
 898:   .btn {
 899:     display: inline-flex;
 900:     align-items: center;
 901:     justify-content: center;
 902:     gap: var(--space-8);
 903:     padding: var(--space-12) var(--space-24);
 904:     border-radius: var(--radius-lg);
 905:     font-weight: var(--font-weight-semibold);
 906:     font-size: var(--font-size-base);
 907:     transition: all var(--duration-normal) var(--ease-standard);
 908:     border: none;
 909:     outline: none;
 910:     cursor: pointer;
 911:     min-height: 44px;
 912:   }
 913: 
 914:   .btn:disabled {
 915:     opacity: 0.5;
 916:     cursor: not-allowed;
 917:   }
 918: 
 919:   .btn:focus-visible {
 920:     outline: none;
 921:     box-shadow: var(--focus-ring);
 922:   }
 923:   
 924:   .btn-primary {
 925:     background: var(--color-primary);
 926:     color: var(--color-btn-primary-text);
 927:     box-shadow: var(--shadow-sm);
 928:   }
 929:   
 930:   .btn-primary:hover:not(:disabled) {
 931:     background: var(--color-primary-hover);
 932:     box-shadow: 0 0 30px rgba(var(--color-teal-500-rgb), 0.5);
 933:     transform: translateY(-1px);
 934:   }
 935:   
 936:   .btn-primary:active:not(:disabled) {
 937:     background: var(--color-primary-active);
 938:     transform: translateY(0);
 939:   }
 940:   
 941:   .btn-secondary {
 942:     background: var(--color-surface);
 943:     color: var(--color-text);
 944:     border: 2px solid var(--color-border);
 945:   }
 946:   
 947:   .btn-secondary:hover:not(:disabled) {
 948:     border-color: var(--color-primary);
 949:     background: var(--color-secondary);
 950:     transform: translateY(-1px);
 951:   }
 952:   
 953:   .btn-ghost {
 954:     background: transparent;
 955:     color: var(--color-primary);
 956:   }
 957:   
 958:   .btn-ghost:hover:not(:disabled) {
 959:     background: rgba(var(--color-teal-500-rgb), 0.1);
 960:   }
 961:   
 962:   .btn-danger {
 963:     background: var(--color-error);
 964:     color: var(--color-surface);
 965:   }
 966:   
 967:   .btn-danger:hover:not(:disabled) {
 968:     background: rgba(var(--color-error-rgb), 0.9);
 969:     transform: translateY(-1px);
 970:     box-shadow: 0 0 20px rgba(var(--color-error-rgb), 0.3);
 971:   }
 972:   
 973:   /* ============================================
 974:      CARDS
 975:      ============================================ */
 976:   
 977:   .card {
 978:     background: var(--color-surface);
 979:     color: var(--color-text);
 980:     border-radius: var(--radius-lg);
 981:     border: 1px solid var(--color-card-border);
 982:     box-shadow: var(--shadow-lg);
 983:     transition: all var(--duration-normal) var(--ease-standard);
 984:     padding: var(--space-24);
 985:   }
 986:   
 987:   .card:hover {
 988:     border-color: rgba(var(--color-primary-rgb), 0.3);
 989:     box-shadow: var(--shadow-lg);
 990:     transform: translateY(-2px);
 991:   }
 992:   
 993:   .modern-card {
 994:     background: var(--color-surface);
 995:     color: var(--color-text);
 996:     border-radius: var(--radius-lg);
 997:     border: 1px solid var(--color-card-border);
 998:     box-shadow: var(--shadow-lg);
 999:     transition: all var(--duration-normal) var(--ease-standard);
1000:     padding: var(--space-24);
1001:   }
1002:   
1003:   .glass-card {
1004:     background: rgba(var(--color-surface-rgb), 0.8);
1005:     backdrop-filter: blur(16px);
1006:     border-radius: var(--radius-lg);
1007:     border: 1px solid rgba(var(--color-card-border-rgb), 0.5);
1008:     padding: var(--space-24);
1009:     box-shadow: var(--shadow-lg);
1010:     transition: all var(--duration-normal) var(--ease-standard);
1011:   }
1012:   
1013:   .glass-card:hover {
1014:     border-color: rgba(var(--color-primary-rgb), 0.3);
1015:     box-shadow: var(--shadow-lg);
1016:     transform: translateY(-1px);
1017:   }
1018:   
1019:   .job-card {
1020:     background: var(--color-surface);
1021:     color: var(--color-text);
1022:     border-radius: var(--radius-lg);
1023:     border: 1px solid var(--color-card-border);
1024:     box-shadow: var(--shadow-lg);
1025:     transition: all var(--duration-normal) var(--ease-standard);
1026:     padding: var(--space-24);
1027:     cursor: pointer;
1028:   }
1029:   
1030:   .job-card:hover {
1031:     border-color: rgba(var(--color-teal-500-rgb), 0.5);
1032:     box-shadow: var(--shadow-lg);
1033:     transform: translateY(-2px);
1034:   }
1035:   
1036:   .job-card.researching {
1037:     animation: pulse-border 1.5s ease-in-out infinite;
1038:     pointer-events: none;
1039:   }
1040:   
1041:   /* ============================================
1042:      INPUTS & FORMS
1043:      ============================================ */
1044:   
1045:   .modern-input {
1046:     width: 100%;
1047:     padding: var(--space-12) var(--space-16);
1048:     background: rgba(var(--color-secondary-rgb), 0.5);
1049:     border: 2px solid var(--color-border);
1050:     border-radius: var(--radius-lg);
1051:     color: var(--color-text);
1052:     font-size: var(--font-size-base);
1053:     line-height: var(--line-height-normal);
1054:     transition: all var(--duration-fast) var(--ease-standard);
1055:     min-height: 44px;
1056:   }
1057: 
1058:   .modern-input::placeholder {
1059:     color: var(--color-text-secondary);
1060:   }
1061: 
1062:   .modern-input:focus {
1063:     outline: none;
1064:     border-color: var(--color-primary);
1065:     box-shadow: var(--focus-ring);
1066:   }
1067:   
1068:   .modern-input:disabled {
1069:     background: var(--color-secondary);
1070:     cursor: not-allowed;
1071:     opacity: 0.6;
1072:   }
1073:   
1074:   /* Form Validation */
1075:   input:invalid:not(:placeholder-shown),
1076:   textarea:invalid:not(:placeholder-shown),
1077:   select:invalid:not(:placeholder-shown) {
1078:     border-color: var(--color-error);
1079:     background-color: rgba(var(--color-error-rgb), 0.05);
1080:   }
1081:   
1082:   input:valid:not(:placeholder-shown),
1083:   textarea:valid:not(:placeholder-shown),
1084:   select:valid:not(:placeholder-shown) {
1085:     border-color: var(--color-success);
1086:     background-color: rgba(var(--color-success-rgb), 0.05);
1087:   }
1088:   
1089:   .form-error {
1090:     color: var(--color-error);
1091:     font-size: var(--font-size-sm);
1092:     margin-top: var(--space-4);
1093:     display: flex;
1094:     align-items: center;
1095:     gap: var(--space-4);
1096:   }
1097:   
1098:   .form-success {
1099:     color: var(--color-success);
1100:     font-size: var(--font-size-sm);
1101:     margin-top: var(--space-4);
1102:   }
1103:   
1104:   /* ============================================
1105:      BADGES
1106:      ============================================ */
1107:   
1108:   .badge {
1109:     display: inline-flex;
1110:     align-items: center;
1111:     padding: var(--space-4) var(--space-12);
1112:     border-radius: var(--radius-full);
1113:     font-size: var(--font-size-xs);
1114:     font-weight: var(--font-weight-bold);
1115:     line-height: 1;
1116:   }
1117:   
1118:   .badge-primary {
1119:     background: rgba(var(--color-teal-500-rgb), 0.1);
1120:     color: var(--color-primary);
1121:     border: 1px solid rgba(var(--color-teal-500-rgb), 0.2);
1122:   }
1123:   
1124:   .badge-secondary {
1125:     background: rgba(var(--color-teal-500-rgb), 0.1);
1126:     color: var(--color-primary);
1127:     border: 1px solid rgba(var(--color-teal-500-rgb), 0.2);
1128:   }
1129:   
1130:   .badge-success {
1131:     background: rgba(var(--color-success-rgb), 0.1);
1132:     color: var(--color-success);
1133:     border: 1px solid rgba(var(--color-success-rgb), 0.2);
1134:   }
1135:   
1136:   .badge-warning {
1137:     background: rgba(var(--color-warning-rgb), 0.1);
1138:     color: var(--color-warning);
1139:     border: 1px solid rgba(var(--color-warning-rgb), 0.2);
1140:   }
1141:   
1142:   .badge-error {
1143:     background: rgba(var(--color-error-rgb), 0.1);
1144:     color: var(--color-error);
1145:     border: 1px solid rgba(var(--color-error-rgb), 0.2);
1146:   }
1147:   
1148:   /* ============================================
1149:      GRADIENTS
1150:      ============================================ */
1151:   
1152:   .gradient-primary {
1153:     background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-teal-300) 100%);
1154:   }
1155:   
1156:   .gradient-secondary {
1157:     background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-teal-600) 100%);
1158:   }
1159:   
1160:   .gradient-hero {
1161:     background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-teal-400) 50%, var(--color-teal-300) 100%);
1162:   }
1163:   
1164:   .gradient-text {
1165:     background: linear-gradient(135deg, var(--color-primary), var(--color-teal-300));
1166:     -webkit-background-clip: text;
1167:     -webkit-text-fill-color: transparent;
1168:     background-clip: text;
1169:   }
1170:   
1171:   /* ============================================
1172:      CONTAINERS
1173:      ============================================ */
1174:   
1175:   .dashboard-container {
1176:     max-width: var(--container-xl);
1177:     margin: 0 auto;
1178:     padding: var(--space-24) var(--space-24);
1179:   }
1180:   
1181:   .nav-container {
1182:     position: sticky;
1183:     top: 0;
1184:     z-index: var(--z-sticky);
1185:     background: rgba(var(--color-background-rgb), 0.8);
1186:     backdrop-filter: blur(16px);
1187:     border-bottom: 1px solid rgba(var(--color-border-rgb), 0.5);
1188:   }
1189:   
1190:   /* ============================================
1191:      PREVIEW BOX
1192:      ============================================ */
1193:   
1194:   .preview-container {
1195:     background-color: var(--color-surface);
1196:     border: 2px solid var(--color-primary);
1197:     border-radius: var(--radius-lg);
1198:     padding: var(--space-32);
1199:     box-shadow: var(--shadow-lg);
1200:     margin-top: var(--space-32);
1201:   }
1202:   
1203:   .preview-empty {
1204:     display: flex;
1205:     flex-direction: column;
1206:     align-items: center;
1207:     justify-content: center;
1208:     text-align: center;
1209:     min-height: 300px;
1210:     color: var(--color-text-secondary);
1211:   }
1212:   
1213:   .preview-empty__icon {
1214:     font-size: var(--font-size-4xl);
1215:     margin-bottom: var(--space-24);
1216:     opacity: 0.5;
1217:   }
1218:   
1219:   /* ============================================
1220:      JOB MATCH EXPLANATION
1221:      ============================================ */
1222:   
1223:   .job-match-explanation {
1224:     background-color: var(--color-surface);
1225:     border-left: 4px solid var(--color-success);
1226:     border-radius: var(--radius-lg);
1227:     padding: var(--space-24);
1228:     margin-top: var(--space-16);
1229:   }
1230:   
1231:   .job-match-explanation h4 {
1232:     margin-bottom: var(--space-16);
1233:   }
1234:   
1235:   .job-match-explanation ul {
1236:     list-style: none;
1237:     padding: 0;
1238:     margin-bottom: var(--space-16);
1239:   }
1240:   
1241:   .job-match-explanation li {
1242:     padding: var(--space-8) 0;
1243:     display: flex;
1244:     align-items: center;
1245:     gap: var(--space-8);
1246:   }
1247:   
1248:   .match-score {
1249:     display: inline-block;
1250:     font-size: var(--font-size-2xl);
1251:     font-weight: var(--font-weight-bold);
1252:     color: var(--color-success);
1253:     margin-top: var(--space-8);
1254:   }
1255:   
1256:   /* ============================================
1257:      COMPANY RESEARCH CARDS
1258:      ============================================ */
1259:   
1260:   .company-research {
1261:     display: grid;
1262:     gap: var(--space-24);
1263:     grid-template-columns: 1fr;
1264:   }
1265:   
1266:   @media (min-width: 768px) {
1267:     .company-research {
1268:       grid-template-columns: 1fr 1fr;
1269:     }
1270:   }
1271:   
1272:   .company-card {
1273:     background-color: var(--color-surface);
1274:     border-radius: var(--radius-lg);
1275:     padding: var(--space-24);
1276:     border-left: 4px solid;
1277:   }
1278:   
1279:   .company-card--pros {
1280:     border-left-color: var(--color-success);
1281:   }
1282:   
1283:   .company-card--cons {
1284:     border-left-color: var(--color-warning);
1285:   }
1286:   
1287:   .company-card h4 {
1288:     margin: var(--space-16) 0;
1289:   }
1290:   
1291:   .company-card ul {
1292:     list-style: none;
1293:     padding: 0;
1294:   }
1295:   
1296:   .company-card li {
1297:     padding: var(--space-8) 0;
1298:     display: flex;
1299:     align-items: flex-start;
1300:     gap: var(--space-8);
1301:   }
1302:   
1303:   /* ============================================
1304:      LOADING STATES
1305:      ============================================ */
1306:   
1307:   @keyframes spin {
1308:     to { transform: rotate(360deg); }
1309:   }
1310:   
1311:   @keyframes pulse-border {
1312:     0%, 100% {
1313:       border-color: var(--color-primary);
1314:       box-shadow: 0 0 0 0 rgba(var(--color-teal-500-rgb), 0.7);
1315:     }
1316:     50% {
1317:       border-color: var(--color-teal-300);
1318:       box-shadow: 0 0 0 10px rgba(var(--color-teal-500-rgb), 0);
1319:     }
1320:   }
1321:   
1322:   @keyframes shimmer {
1323:     0% { transform: translateX(-100%); }
1324:     100% { transform: translateX(100%); }
1325:   }
1326:   
1327:   .loading-overlay {
1328:     position: absolute;
1329:     inset: 0;
1330:     background: rgba(var(--color-background-rgb), 0.95);
1331:     backdrop-filter: blur(8px);
1332:     display: flex;
1333:     flex-direction: column;
1334:     align-items: center;
1335:     justify-content: center;
1336:     border-radius: inherit;
1337:     z-index: var(--z-fixed);
1338:   }
1339: }
1340: 
1341: /* ===================================================================
1342:    UTILITY CLASSES
1343:    =================================================================== */
1344: 
1345: @layer utilities {
1346:   /* Z-Index Utilities */
1347:   .z-dropdown { z-index: var(--z-dropdown); }
1348:   .z-sticky { z-index: var(--z-sticky); }
1349:   .z-fixed { z-index: var(--z-fixed); }
1350:   .z-modal-backdrop { z-index: var(--z-modal-backdrop); }
1351:   .z-modal { z-index: var(--z-modal); }
1352:   .z-popover { z-index: var(--z-popover); }
1353:   .z-tooltip { z-index: var(--z-tooltip); }
1354:   .z-toast { z-index: var(--z-toast); }
1355:   
1356:   /* Glassmorphism */
1357:   .glass {
1358:     background: rgba(var(--color-surface-rgb), 0.8);
1359:     backdrop-filter: blur(16px);
1360:     border: 1px solid rgba(var(--color-card-border-rgb), 0.5);
1361:   }
1362:   
1363:   /* Animations */
1364:   .fade-in {
1365:     animation: fadeIn 0.5s ease-in;
1366:   }
1367:   
1368:   @keyframes fadeIn {
1369:     from { opacity: 0; transform: translateY(10px); }
1370:     to { opacity: 1; transform: translateY(0); }
1371:   }
1372:   
1373:   /* Hide Scrollbar */
1374:   .hide-scrollbar::-webkit-scrollbar {
1375:     display: none;
1376:   }
1377:   
1378:   .hide-scrollbar {
1379:     -ms-overflow-style: none;
1380:     scrollbar-width: none;
1381:   }
1382: }
1383: 
1384: /* ===================================================================
1385:    ACCESSIBILITY
1386:    =================================================================== */
1387: 
1388: :focus-visible {
1389:   outline: var(--focus-outline);
1390:   outline-offset: 2px;
1391: }
1392: 
1393: button:focus-visible,
1394: a:focus-visible,
1395: input:focus-visible,
1396: textarea:focus-visible,
1397: select:focus-visible {
1398:   outline: none;
1399:   box-shadow: var(--focus-ring);
1400: }
1401: 
1402: .sr-only {
1403:   position: absolute;
1404:   width: 1px;
1405:   height: 1px;
1406:   padding: 0;
1407:   margin: -1px;
1408:   overflow: hidden;
1409:   clip: rect(0, 0, 0, 0);
1410:   white-space: nowrap;
1411:   border-width: 0;
1412: }
1413: 
1414: @media (prefers-reduced-motion: reduce) {
1415:   *,
1416:   *::before,
1417:   *::after {
1418:     animation-duration: 0.01ms !important;
1419:     animation-iteration-count: 1 !important;
1420:     transition-duration: 0.01ms !important;
1421:   }
1422: }
1423: 
1424: /* ===================================================================
1425:    MOBILE RESPONSIVE
1426:    =================================================================== */
1427: 
1428: @media (max-width: 768px) {
1429:   /* Touch targets */
1430:   .btn,
1431:   input,
1432:   button,
1433:   select,
1434:   textarea {
1435:     min-height: 48px;
1436:     min-width: 48px;
1437:   }
1438:   
1439:   /* Full-width buttons */
1440:   .btn-primary,
1441:   .btn-secondary {
1442:     width: 100%;
1443:     justify-content: center;
1444:   }
1445:   
1446:   /* Card padding */
1447:   .card,
1448:   .modern-card,
1449:   .glass-card {
1450:     padding: var(--space-16);
1451:   }
1452:   
1453:   /* Prevent iOS zoom */
1454:   input,
1455:   textarea,
1456:   select {
1457:     font-size: 16px;
1458:   }
1459:   
1460:   /* Typography */
1461:   h1 { font-size: var(--font-size-3xl); }
1462:   h2 { font-size: var(--font-size-2xl); }
1463:   h3 { font-size: var(--font-size-xl); }
1464:   
1465:   /* Container padding */
1466:   .dashboard-container {
1467:     padding: var(--space-16);
1468:   }
1469: }
1470: 
1471: @media (max-width: 480px) {
1472:   h1 { font-size: var(--font-size-2xl); }
1473:   h2 { font-size: var(--font-size-xl); }
1474:   h3 { font-size: var(--font-size-lg); }
1475:   
1476:   .btn {
1477:     padding: var(--space-16) var(--space-24);
1478:     font-size: var(--font-size-sm);
1479:   }
1480: 
1481:   .card,
1482:   .modern-card,
1483:   .glass-card,
1484:   .job-card,
1485:   .company-card,
1486:   .preview-container,
1487:   .job-match-explanation {
1488:     padding: var(--space-12);
1489:   }
1490: 
1491:   .dashboard-container {
1492:     padding: var(--space-12);
1493:   }
1494: 
1495:   .modern-input {
1496:     padding: var(--space-10) var(--space-12);
1497:     font-size: var(--font-size-sm);
1498:   }
1499: 
1500:   .company-research {
1501:     grid-template-columns: 1fr;
1502:     gap: var(--space-16);
1503:   }
1504: }
1505: 
1506: /* ===================================================================
1507:    PRINT STYLES
1508:    =================================================================== */
1509: 
1510: @media print {
1511:   /* Only target resume/email containers */
1512:   .email-preview,
1513:   .resume-preview,
1514:   .resume-container,
1515:   .pdf-preview {
1516:     background: var(--color-white) !important;
1517:     color: var(--color-black) !important;
1518:     box-shadow: none !important;
1519:     border: none !important;
1520:   }
1521:   
1522:   .email-preview *,
1523:   .resume-preview *,
1524:   .resume-container *,
1525:   .pdf-preview * {
1526:     color: var(--color-black) !important;
1527:   }
1528:   
1529:   .email-preview a,
1530:   .resume-preview a {
1531:     color: var(--color-teal-600) !important;
1532:     text-decoration: underline;
1533:   }
1534:   
1535:   /* Hide UI elements */
1536:   nav,
1537:   .nav-container,
1538:   .sidebar,
1539:   .btn,
1540:   button,
1541:   .no-print {
1542:     display: none !important;
1543:   }
1544:   
1545:   /* Page breaks */
1546:   h1, h2, h3 {
1547:     page-break-after: avoid;
1548:   }
1549:   
1550:   p, li {
1551:     orphans: 3;
1552:     widows: 3;
1553:   }
1554: }
1555: 
1556: /* ===================================================================
1557:    DARK MODE EMAIL/RESUME FIX
1558:    =================================================================== */
1559: 
1560: .email-preview,
1561: .resume-preview,
1562: .pdf-preview,
1563: .resume-container {
1564:   background: var(--color-white) !important;
1565:   color: var(--color-black) !important;
1566: }
1567: 
1568: .email-preview *,
1569: .resume-preview *,
1570: .pdf-preview *,
1571: .resume-container * {
1572:   color: var(--color-black) !important;
1573: }
1574: 
1575: .email-preview a,
1576: .resume-preview a {
1577:   color: var(--color-teal-600) !important;
1578:   text-decoration: underline;
1579: }
1580: 
1581: /* ===================================================================
1582:    UI REDESIGN IMPROVEMENTS - CRITICAL FIXES
1583:    Based on UI_REDESIGN_PLAN.md
1584:    =================================================================== */
1585: 
1586: /* Form Validation Visual Feedback */
1587: input:invalid:not(:placeholder-shown),
1588: textarea:invalid:not(:placeholder-shown),
1589: select:invalid:not(:placeholder-shown) {
1590:   border-color: var(--color-error);
1591:   background-color: rgba(var(--color-error-rgb), 0.05);
1592: }
1593: 
1594: input:valid:not(:placeholder-shown),
1595: textarea:valid:not(:placeholder-shown),
1596: select:valid:not(:placeholder-shown) {
1597:   border-color: var(--color-success);
1598:   background-color: rgba(var(--color-success-rgb), 0.05);
1599: }
1600: 
1601: .form-error {
1602:   color: var(--color-error);
1603:   font-size: var(--font-size-sm);
1604:   margin-top: var(--space-4);
1605:   display: flex;
1606:   align-items: center;
1607:   gap: var(--space-4);
1608: }
1609: 
1610: .form-success {
1611:   color: var(--color-success);
1612:   font-size: var(--font-size-sm);
1613:   margin-top: var(--space-4);
1614: }
1615: 
1616: /* Resume Textarea Readability */
1617: textarea[name="resume"],
1618: textarea[name="resumeText"],
1619: .resume-textarea {
1620:   padding: var(--space-24);
1621:   line-height: 1.8;
1622:   word-spacing: 0.1em;
1623:   letter-spacing: 0.3px;
1624:   white-space: pre-wrap;
1625:   font-family: var(--font-family-base);
1626:   font-size: var(--font-size-base);
1627: }
1628: 
1629: /* Preview Box Separation */
1630: .preview-container {
1631:   background-color: var(--color-surface);
1632:   border: 2px solid var(--color-primary);
1633:   border-radius: var(--radius-lg);
1634:   padding: var(--space-32);
1635:   box-shadow: var(--shadow-lg);
1636:   margin-top: var(--space-32);
1637: }
1638: 
1639: .preview-empty {
1640:   display: flex;
1641:   flex-direction: column;
1642:   align-items: center;
1643:   justify-content: center;
1644:   min-height: 300px;
1645:   color: var(--color-text-secondary);
1646:   text-align: center;
1647: }
1648: 
1649: .preview-empty__icon {
1650:   font-size: 3rem;
1651:   margin-bottom: var(--space-24);
1652:   opacity: 0.5;
1653: }
1654: 
1655: /* Keyboard Navigation Focus States */
1656: *:focus-visible {
1657:   outline: 2px solid var(--color-primary);
1658:   outline-offset: 2px;
1659: }
1660: 
1661: button:focus-visible,
1662: a:focus-visible,
1663: input:focus-visible,
1664: textarea:focus-visible,
1665: select:focus-visible {
1666:   outline: 3px solid var(--color-primary);
1667:   outline-offset: 2px;
1668:   box-shadow: var(--focus-ring);
1669: }
1670: 
1671: @media (prefers-reduced-motion: reduce) {
1672:   *:focus-visible {
1673:     outline-width: 3px;
1674:   }
1675: }
1676: 
1677: /* Button Contrast Improvements */
1678: .btn-primary,
1679: .btn--primary,
1680: button[type="submit"] {
1681:   background: linear-gradient(135deg, var(--color-primary), var(--color-primary-hover));
1682:   box-shadow: 0 4px 12px rgba(var(--color-teal-500-rgb), 0.3);
1683:   font-weight: var(--font-weight-bold);
1684:   letter-spacing: 0.5px;
1685:   transition: all var(--duration-normal) var(--ease-standard);
1686: }
1687: 
1688: .btn-primary:hover,
1689: .btn--primary:hover,
1690: button[type="submit"]:hover {
1691:   transform: translateY(-3px);
1692:   box-shadow: 0 8px 20px rgba(var(--color-teal-500-rgb), 0.4);
1693: }
1694: 
1695: .btn-primary:active,
1696: .btn--primary:active,
1697: button[type="submit"]:active {
1698:   transform: translateY(-1px);
1699: }
1700: 
1701: /* Job Match Explanation */
1702: .job-match-explanation {
1703:   background: linear-gradient(135deg, rgba(var(--color-success-rgb), 0.1), rgba(var(--color-primary-rgb), 0.05));
1704:   border-radius: var(--radius-lg);
1705:   padding: var(--space-20);
1706:   margin-top: var(--space-16);
1707:   border-left: 4px solid var(--color-success);
1708: }
1709: 
1710: .job-match-explanation h4 {
1711:   color: var(--color-text);
1712:   margin-bottom: var(--space-12);
1713:   font-size: var(--font-size-lg);
1714: }
1715: 
1716: .job-match-explanation ul {
1717:   list-style: none;
1718:   padding: 0;
1719:   margin: 0 0 var(--space-16) 0;
1720: }
1721: 
1722: .job-match-explanation li {
1723:   display: flex;
1724:   align-items: center;
1725:   gap: var(--space-8);
1726:   padding: var(--space-6) 0;
1727:   color: var(--color-text-secondary);
1728: }
1729: 
1730: .match-score {
1731:   display: inline-block;
1732:   background: var(--color-success);
1733:   color: var(--color-surface);
1734:   padding: var(--space-4) var(--space-12);
1735:   border-radius: var(--radius-full);
1736:   font-weight: var(--font-weight-bold);
1737:   font-size: var(--font-size-sm);
1738: }
1739: 
1740: /* Company Research Cards */
1741: .company-research {
1742:   display: grid;
1743:   grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
1744:   gap: var(--space-24);
1745:   margin-top: var(--space-24);
1746: }
1747: 
1748: .company-card {
1749:   background: linear-gradient(135deg, var(--color-surface), rgba(var(--color-teal-500-rgb), 0.05));
1750:   border-radius: var(--radius-lg);
1751:   padding: var(--space-24);
1752:   border-left: 4px solid;
1753:   box-shadow: var(--shadow-md);
1754:   transition: all var(--duration-normal) var(--ease-standard);
1755: }
1756: 
1757: .company-card:hover {
1758:   transform: translateY(-2px);
1759:   box-shadow: var(--shadow-lg);
1760: }
1761: 
1762: .company-card--pros {
1763:   border-left-color: var(--color-success);
1764: }
1765: 
1766: .company-card--cons {
1767:   border-left-color: var(--color-warning);
1768: }
1769: 
1770: .company-card h4 {
1771:   display: flex;
1772:   align-items: center;
1773:   gap: var(--space-12);
1774:   color: var(--color-text);
1775:   margin-bottom: var(--space-16);
1776: }
1777: 
1778: .company-card ul {
1779:   list-style: none;
1780:   padding: 0;
1781:   margin: 0;
1782: }
1783: 
1784: .company-card li {
1785:   display: flex;
1786:   align-items: flex-start;
1787:   gap: var(--space-8);
1788:   padding: var(--space-8) 0;
1789:   color: var(--color-text-secondary);
1790:   line-height: 1.6;
1791: }
1792: 
1793: /* Loading States */
1794: .loading-spinner {
1795:   display: inline-block;
1796:   width: 20px;
1797:   height: 20px;
1798:   border: 2px solid rgba(var(--color-primary-rgb), 0.3);
1799:   border-top-color: var(--color-primary);
1800:   border-radius: 50%;
1801:   animation: spin 0.8s linear infinite;
1802: }
1803: 
1804: @keyframes spin {
1805:   to { transform: rotate(360deg); }
1806: }
1807: 
1808: .btn-loading {
1809:   position: relative;
1810:   pointer-events: none;
1811:   opacity: 0.7;
1812: }
1813: 
1814: .btn-loading::after {
1815:   content: '';
1816:   position: absolute;
1817:   width: 16px;
1818:   height: 16px;
1819:   top: 50%;
1820:   left: 50%;
1821:   margin-left: -8px;
1822:   margin-top: -8px;
1823:   border: 2px solid rgba(255, 255, 255, 0.3);
1824:   border-top-color: white;
1825:   border-radius: 50%;
1826:   animation: spin 0.8s linear infinite;
1827: }
1828: 
1829: /* Toast Notifications */
1830: .toast {
1831:   position: fixed;
1832:   bottom: 20px;
1833:   right: 20px;
1834:   background: var(--color-success);
1835:   color: var(--color-surface);
1836:   padding: var(--space-16) var(--space-24);
1837:   border-radius: var(--radius-lg);
1838:   box-shadow: var(--shadow-lg);
1839:   z-index: var(--z-toast);
1840:   animation: slide-in-up var(--duration-normal) var(--ease-standard);
1841:   display: flex;
1842:   align-items: center;
1843:   gap: var(--space-12);
1844:   min-width: 300px;
1845: }
1846: 
1847: @keyframes slide-in-up {
1848:   from {
1849:     opacity: 0;
1850:     transform: translateY(20px);
1851:   }
1852:   to {
1853:     opacity: 1;
1854:     transform: translateY(0);
1855:   }
1856: }
1857: 
1858: .toast--error {
1859:   background: var(--color-error);
1860: }
1861: 
1862: .toast--warning {
1863:   background: var(--color-warning);
1864: }
1865: 
1866: .toast--info {
1867:   background: var(--color-info);
1868: }
1869: 
1870: @media (max-width: 768px) {
1871:   .toast {
1872:     bottom: 80px;
1873:     left: 20px;
1874:     right: 20px;
1875:     min-width: auto;
1876:   }
1877: }
1878: 
1879: /* Resume Editor Container */
1880: .resume-editor-container {
1881:   display: grid;
1882:   grid-template-columns: 1fr 1fr;
1883:   gap: var(--space-32);
1884: }
1885: 
1886: @media (max-width: 1024px) {
1887:   .resume-editor-container {
1888:     grid-template-columns: 1fr;
1889:   }
1890: 
1891:   .preview {
1892:     position: sticky;
1893:     top: 60px;
1894:   }
1895: }
1896: 
1897: /* Responsive Typography Scaling */
1898: @media (max-width: 1024px) {
1899:   h1 { font-size: var(--font-size-3xl); }
1900:   h2 { font-size: var(--font-size-2xl); }
1901:   h3 { font-size: var(--font-size-xl); }
1902: }
1903: 
1904: @media (max-width: 768px) {
1905:   h1 { font-size: var(--font-size-2xl); }
1906:   h2 { font-size: var(--font-size-xl); }
1907:   h3 { font-size: var(--font-size-lg); }
1908:   body { font-size: 0.95rem; }
1909: }
1910: 
1911: @media (max-width: 480px) {
1912:   h1 { font-size: var(--font-size-xl); }
1913:   h2 { font-size: var(--font-size-lg); }
1914:   h3 { font-size: var(--font-size-md); }
1915:   body { font-size: 0.9rem; }
1916: }
</file>

</files>

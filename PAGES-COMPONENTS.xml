This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/app/**/*.tsx, src/components/**/*.tsx, src/lib/resume-templates-v2.ts
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/app/analytics/components/analytics-dashboard.tsx
src/app/analytics/page.tsx
src/app/applications/[id]/page.tsx
src/app/auth/forgot-password/page.tsx
src/app/auth/signin/page.tsx
src/app/auth/signup/page.tsx
src/app/career-finder/applications/page.tsx
src/app/career-finder/company/page.tsx
src/app/career-finder/cover-letter/page.tsx
src/app/career-finder/interview-prep/page.tsx
src/app/career-finder/job-analysis/page.tsx
src/app/career-finder/job/page.tsx
src/app/career-finder/layout.tsx
src/app/career-finder/optimizer/page.tsx
src/app/career-finder/outreach/page.tsx
src/app/career-finder/resume/page.tsx
src/app/career-finder/salary-negotiation/page.tsx
src/app/career-finder/search/page.tsx
src/app/cover-letter/page.tsx
src/app/dashboard/components/action-center.tsx
src/app/dashboard/components/ai-insights.tsx
src/app/dashboard/components/application-pipeline.tsx
src/app/dashboard/components/dashboard-header.tsx
src/app/dashboard/components/enterprise-sidebar.tsx
src/app/dashboard/components/follow-up-reminders.tsx
src/app/dashboard/components/metrics-hero.tsx
src/app/dashboard/components/quick-actions.tsx
src/app/dashboard/components/recent-applications.tsx
src/app/dashboard/components/recent-cover-letters.tsx
src/app/dashboard/components/response-time-tracker.tsx
src/app/dashboard/components/stats-overview.tsx
src/app/dashboard/components/trends-chart.tsx
src/app/dashboard/page.tsx
src/app/interview-prep/components/interview-preparation.tsx
src/app/interview-prep/page.tsx
src/app/job-boards/components/job-boards-dashboard.tsx
src/app/job-boards/page.tsx
src/app/jobs/[id]/page.tsx
src/app/jobs/components/jobs-actions.tsx
src/app/jobs/components/local-discover.tsx
src/app/jobs/page.tsx
src/app/layout.tsx
src/app/network/components/network-dashboard.tsx
src/app/network/page.tsx
src/app/notifications/components/notifications-page.tsx
src/app/notifications/page.tsx
src/app/onboarding/page.tsx
src/app/onboarding/quiz/page.tsx
src/app/page.tsx
src/app/payment/page.tsx
src/app/privacy-policy/page.tsx
src/app/privacy/page.tsx
src/app/profile/page.tsx
src/app/resume-ab-testing/page.tsx
src/app/resume-builder-v2/page.tsx
src/app/resume-builder/components/resume-builder.tsx
src/app/resume-builder/page.tsx
src/app/resumes/page.tsx
src/app/reverse-market/page.tsx
src/app/reverse-market/reverse-market-client.tsx
src/app/salary-negotiation/components/salary-negotiation.tsx
src/app/salary-negotiation/page.tsx
src/app/settings/alerts/page.tsx
src/app/settings/integrations/page.tsx
src/app/settings/job-boards/page.tsx
src/app/settings/layout.tsx
src/app/settings/page.tsx
src/app/settings/preferences/page.tsx
src/app/settings/privacy/page.tsx
src/app/settings/profile/page.tsx
src/app/skill-analysis/components/skill-analysis.tsx
src/app/skill-analysis/page.tsx
src/app/terms/page.tsx
src/components/analytics-tracker.tsx
src/components/app-shell.tsx
src/components/autopilot-progress-tracker.tsx
src/components/breadcrumbs.tsx
src/components/career-finder-back-button.tsx
src/components/career-finder/job-card-skeleton.tsx
src/components/career-finder/progress.tsx
src/components/client-init.tsx
src/components/command-palette.tsx
src/components/company-research/index.tsx
src/components/debug-panel.tsx
src/components/error-boundaries/dashboard-error-boundary.tsx
src/components/error-boundaries/job-search-error-boundary.tsx
src/components/error-boundaries/resume-error-boundary.tsx
src/components/error-boundary.tsx
src/components/features-section.tsx
src/components/global-loading-overlay.tsx
src/components/hero-section-v2.tsx
src/components/hero-section.tsx
src/components/job-analysis/index.tsx
src/components/job-card.tsx
src/components/job-status-bar.tsx
src/components/lazy-components.tsx
src/components/linkedin-import.tsx
src/components/mobile/JobCard.tsx
src/components/mobile/PullToRefresh.tsx
src/components/mobile/SuccessAnimation.tsx
src/components/modern-job-card.tsx
src/components/modern/DribbblePageLayout.tsx
src/components/modern/MobileNavigation.tsx
src/components/modern/ModernJobCard.tsx
src/components/modern/ModernResumeUpload.tsx
src/components/modern/SearchHeroSection.tsx
src/components/modern/VibrantPageHeader.tsx
src/components/onboarding/OnboardingRedirect.tsx
src/components/onboarding/ProgressBar.tsx
src/components/onboarding/QuizQuestion.tsx
src/components/onboarding/SuccessAnimation.tsx
src/components/providers.tsx
src/components/resume-builder/ai-suggestions.tsx
src/components/resume-builder/ats-checker.tsx
src/components/resume-builder/ats-score.tsx
src/components/resume-builder/bullet-point-generator.tsx
src/components/resume-builder/date-picker.tsx
src/components/resume-builder/export-hub.tsx
src/components/resume-builder/linkedin-url-import.tsx
src/components/resume-builder/perplexity-analysis-display.tsx
src/components/resume-builder/progress-tracker.tsx
src/components/resume-builder/quick-actions.tsx
src/components/resume-builder/quick-start.tsx
src/components/resume-builder/resume-analyzer.tsx
src/components/resume-builder/resume-import-options.tsx
src/components/resume-builder/resume-preview-modal.tsx
src/components/resume-builder/resume-preview.tsx
src/components/resume-builder/section-order.tsx
src/components/resume-builder/template-preview.tsx
src/components/resume-builder/template-selector.tsx
src/components/resume-context.tsx
src/components/resume-customizer/index.tsx
src/components/resume-templates/BaseTemplate.tsx
src/components/resume-templates/index.tsx
src/components/resume-upload/index.tsx
src/components/ResumeAnalysisLoader.tsx
src/components/skeleton-loader.tsx
src/components/stats-section.tsx
src/components/theme-toggle.tsx
src/components/ui/alert.tsx
src/components/ui/avatar.tsx
src/components/ui/badge.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/checkbox.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/progress.tsx
src/components/ui/select.tsx
src/components/ui/separator.tsx
src/components/ui/skeleton.tsx
src/components/ui/tabs.tsx
src/components/ui/textarea.tsx
src/components/unified-navigation.tsx
src/lib/resume-templates-v2.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/app/analytics/components/analytics-dashboard.tsx">
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../components/ui/card'
import { Button } from '../../../components/ui/button'
import { Badge } from '../../../components/ui/badge'
import { Progress } from '../../../components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../../components/ui/tabs'
import {
  BarChart3,
  TrendingUp,
  TrendingDown,
  Users,
  Target,
  Clock,
  Award,
  AlertTriangle,
  CheckCircle,
  RefreshCw,
  Download,
  Share,
  Calendar,
  Briefcase,
  DollarSign,
  Lightbulb
} from 'lucide-react'
import toast from 'react-hot-toast'
// Removed Recharts dependency for serverless build stability

interface AnalyticsData {
  overview: {
    totalApplications: number
    activeApplications: number
    interviewsScheduled: number
    offersReceived: number
    responseRate: number
    averageResponseTime: number
  }
  trends: {
    applicationsByMonth: Array<{ month: string; count: number }>
    statusDistribution: Record<string, number>
    industryBreakdown: Array<{ industry: string; count: number }>
  }
  insights: {
    topIndustries: Array<{ industry: string; count: number; avgSalary?: number }>
    applicationSuccessFactors: Array<{ factor: string; impact: 'high' | 'medium' | 'low' }>
    marketTrends: Array<{ trend: string; description: string; recommendation: string }>
    personalizedTips: string[]
  }
  performance: {
    weeklyGoalProgress: number
    monthlyGoalProgress: number
    improvementAreas: string[]
    strengths: string[]
    variantPerformance?: Array<{ variant: string; views: number; interviews: number; offers: number }>
    sourceLift?: Array<{ source: string; lift: number }>
  }
}

interface AnalyticsDashboardProps {
  userId: string
}

export function AnalyticsDashboard({ userId }: AnalyticsDashboardProps) {
  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null)
  const [loading, setLoading] = useState(true)
  const [refreshing, setRefreshing] = useState(false)
  const [ops, setOps] = useState<{avgLatencyMs:number; p95LatencyMs:number; counters: Record<string, number>}|null>(null)

  useEffect(() => {
    fetchAnalytics()
  }, [])

  const fetchAnalytics = async () => {
    try {
      setRefreshing(true)
      const response = await fetch('/api/analytics')
      if (response.ok) {
        const data = await response.json()
        setAnalytics(data.data)
      } else {
        toast.error('Failed to load analytics')
      }
      try {
        const r2 = await fetch('/api/ops/metrics')
        if (r2.ok) { const j = await r2.json(); setOps({ avgLatencyMs: j.avgLatencyMs || 0, p95LatencyMs: j.p95LatencyMs || 0, counters: j.counters || {} }) }
      } catch {}
    } catch (error) {
      console.error('Analytics fetch error:', error)
      toast.error('Failed to load analytics')
    } finally {
      setLoading(false)
      setRefreshing(false)
    }
  }

  if (loading) {
    return <AnalyticsSkeleton />
  }

  if (!analytics) {
    return (
      <Card>
        <CardContent className="p-8 text-center">
          <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-foreground mb-2">No Analytics Available</h3>
          <p className="text-muted-foreground mb-4">
            Start applying to jobs to see your analytics and insights.
          </p>
          <Button>Start Applying</Button>
        </CardContent>
      </Card>
    )
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'applied': return 'bg-blue-100 text-blue-800'
      case 'interviewing': return 'bg-yellow-100 text-yellow-800'
      case 'offer': return 'bg-green-100 text-green-800'
      case 'rejected': return 'bg-red-100 text-red-800'
      default: return 'bg-muted text-foreground'
    }
  }

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return 'text-red-600'
      case 'medium': return 'text-yellow-600'
      case 'low': return 'text-green-600'
      default: return 'text-muted-foreground'
    }
  }

  return (
    <div className="space-y-8">
      {/* Header with Refresh */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-foreground">Your Career Analytics</h2>
          <p className="text-muted-foreground">Data-driven insights to optimize your job search</p>
        </div>
        <div className="flex gap-3">
          <Button
            variant="outline"
            onClick={fetchAnalytics}
            disabled={refreshing}
          >
            <RefreshCw className={`mr-2 h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
          <Button variant="outline">
            <Download className="mr-2 h-4 w-4" />
            Export
          </Button>
        </div>
      </div>

      {/* Key Metrics Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Applications</p>
                <p className="text-3xl font-bold text-foreground">{analytics.overview.totalApplications}</p>
                <div className="flex items-center mt-2">
                  <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
                  <span className="text-sm text-green-600">+12% this month</span>
                </div>
              </div>
              <div className="p-3 bg-blue-100 rounded-full">
                <Briefcase className="h-6 w-6 text-blue-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Response Rate</p>
                <p className="text-3xl font-bold text-foreground">{analytics.overview.responseRate}%</p>
                <div className="flex items-center mt-2">
                  {analytics.overview.responseRate >= 20 ? (
                    <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
                  ) : (
                    <TrendingDown className="h-4 w-4 text-red-500 mr-1" />
                  )}
                  <span className={`text-sm ${analytics.overview.responseRate >= 20 ? 'text-green-600' : 'text-red-600'}`}>
                    {analytics.overview.responseRate >= 20 ? 'Above average' : 'Below average'}
                  </span>
                </div>
              </div>
              <div className="p-3 bg-green-100 rounded-full">
                <Target className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Interviews</p>
                <p className="text-3xl font-bold text-foreground">{analytics.overview.interviewsScheduled}</p>
                <div className="flex items-center mt-2">
                  <Users className="h-4 w-4 text-blue-500 mr-1" />
                  <span className="text-sm text-blue-600">Scheduled</span>
                </div>
              </div>
              <div className="p-3 bg-yellow-100 rounded-full">
                <Users className="h-6 w-6 text-yellow-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Offers</p>
                <p className="text-3xl font-bold text-foreground">{analytics.overview.offersReceived}</p>
                <div className="flex items-center mt-2">
                  <Award className="h-4 w-4 text-purple-500 mr-1" />
                  <span className="text-sm text-purple-600">Received</span>
                </div>
              </div>
              <div className="p-3 bg-purple-100 rounded-full">
                <Award className="h-6 w-6 text-purple-600" />
              </div>
            </div>
          </CardContent>
        </Card>
        {ops && (
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">AI Latency (p95)</p>
                  <p className="text-3xl font-bold text-foreground">{ops.p95LatencyMs}ms</p>
                  <div className="text-sm text-muted-foreground">Avg {ops.avgLatencyMs}ms</div>
                </div>
                <div className="p-3 bg-sky-100 rounded-full">
                  <BarChart3 className="h-6 w-6 text-sky-600" />
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      <Tabs defaultValue="trends" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="trends">Trends</TabsTrigger>
          <TabsTrigger value="insights">Insights</TabsTrigger>
          <TabsTrigger value="performance">Performance</TabsTrigger>
          <TabsTrigger value="market">Market</TabsTrigger>
        </TabsList>

        <TabsContent value="trends" className="space-y-6">
          {/* Application Trends */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Monthly Applications</CardTitle>
                <CardDescription>Your application activity over time</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {analytics.trends.applicationsByMonth.slice(-6).map((item, index) => (
                    <div key={item.month} className="flex items-center justify-between">
                      <span className="text-sm font-medium">{item.month}</span>
                      <div className="flex items-center gap-3">
                        <div className="flex-1 bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-blue-600 h-2 rounded-full"
                            style={{ width: `${(item.count / Math.max(...analytics.trends.applicationsByMonth.map(d => d.count))) * 100}%` }}
                          />
                        </div>
                        <span className="text-sm font-bold w-8">{item.count}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Application Status</CardTitle>
                <CardDescription>Distribution of your application statuses</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {Object.entries(analytics.trends.statusDistribution).map(([status, count]) => (
                    <div key={status} className="flex items-center justify-between">
                      <Badge className={getStatusColor(status)}>
                        {status.charAt(0).toUpperCase() + status.slice(1)}
                      </Badge>
                      <span className="font-bold">{count}</span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Industry Breakdown */}
          <Card>
            <CardHeader>
              <CardTitle>Industry Focus</CardTitle>
              <CardDescription>Industries you're targeting</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {analytics.trends.industryBreakdown.map((industry, index) => (
                  <div key={industry.industry} className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                      <span className="font-medium">{industry.industry}</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="flex-1 bg-gray-200 rounded-full h-2 max-w-24">
                        <div
                          className="bg-blue-600 h-2 rounded-full"
                          style={{ width: `${(industry.count / Math.max(...analytics.trends.industryBreakdown.map(d => d.count))) * 100}%` }}
                        />
                      </div>
                      <span className="text-sm font-bold w-8">{industry.count}</span>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="insights" className="space-y-6">
          {/* Success Factors */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Target className="h-5 w-5" />
                Success Factors
              </CardTitle>
              <CardDescription>Factors that impact your application success</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {analytics.insights.applicationSuccessFactors.map((factor, index) => (
                  <div key={index} className="flex items-start gap-4 p-4 bg-background rounded-lg">
                    <div className={`w-3 h-3 rounded-full mt-2 ${
                      factor.impact === 'high' ? 'bg-red-500' :
                      factor.impact === 'medium' ? 'bg-yellow-500' : 'bg-green-500'
                    }`} />
                    <div className="flex-1">
                      <h4 className="font-medium text-foreground">{factor.factor}</h4>
                      <p className="text-sm text-muted-foreground mt-1">
                        Impact: <span className={`font-medium ${getImpactColor(factor.impact)}`}>
                          {factor.impact.charAt(0).toUpperCase() + factor.impact.slice(1)}
                        </span>
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Market Trends */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5" />
                Market Trends
              </CardTitle>
              <CardDescription>Current trends affecting your job search</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {analytics.insights.marketTrends.map((trend, index) => (
                  <div key={index} className="border rounded-lg p-4">
                    <h4 className="font-medium text-foreground mb-2">{trend.trend}</h4>
                    <p className="text-sm text-muted-foreground mb-3">{trend.description}</p>
                    <div className="bg-blue-50 p-3 rounded">
                      <p className="text-sm text-blue-800">
                        <strong>Recommendation:</strong> {trend.recommendation}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Personalized Tips */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lightbulb className="h-5 w-5" />
                Personalized Tips
              </CardTitle>
              <CardDescription>Tailored advice based on your activity</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {analytics.insights.personalizedTips.map((tip, index) => (
                  <div key={index} className="flex items-start gap-3">
                    <div className="w-6 h-6 bg-yellow-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                      <span className="text-xs font-bold text-yellow-600">{index + 1}</span>
                    </div>
                    <p className="text-sm text-foreground">{tip}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="performance" className="space-y-6">
          {/* Goal Progress */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Weekly Goals</CardTitle>
                <CardDescription>Applications per week</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Progress</span>
                    <span className="text-sm text-muted-foreground">{analytics.performance.weeklyGoalProgress}%</span>
                  </div>
                  <Progress value={analytics.performance.weeklyGoalProgress} className="w-full" />
                  <p className="text-xs text-muted-foreground">
                    Target: 4 applications per week
                  </p>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Monthly Goals</CardTitle>
                <CardDescription>Applications per month</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Progress</span>
                    <span className="text-sm text-muted-foreground">{analytics.performance.monthlyGoalProgress}%</span>
                  </div>
                  <Progress value={analytics.performance.monthlyGoalProgress} className="w-full" />
                  <p className="text-xs text-muted-foreground">
                    Target: 15 applications per month
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Variant Performance (simple) */}
          {analytics.performance.variantPerformance && analytics.performance.variantPerformance.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle>Resume Variant Performance</CardTitle>
                <CardDescription>Views/Interviews/Offers by variant</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {analytics.performance.variantPerformance.map((row:any)=> (
                    <div key={row.variant} className="space-y-1">
                      <div className="text-sm font-medium">Variant {row.variant}</div>
                      <div className="text-xs text-muted-foreground">Views</div>
                      <div className="w-full bg-gray-200 rounded h-2"><div className="bg-blue-600 h-2 rounded" style={{ width: `${Math.min(100, row.views)}%` }} /></div>
                      <div className="text-xs text-muted-foreground mt-1">Interviews</div>
                      <div className="w-full bg-gray-200 rounded h-2"><div className="bg-yellow-500 h-2 rounded" style={{ width: `${Math.min(100, row.interviews*10)}%` }} /></div>
                      <div className="text-xs text-muted-foreground mt-1">Offers</div>
                      <div className="w-full bg-gray-200 rounded h-2"><div className="bg-green-600 h-2 rounded" style={{ width: `${Math.min(100, row.offers*20)}%` }} /></div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Source Lift */}
          {analytics.performance.sourceLift && analytics.performance.sourceLift.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle>Source Lift</CardTitle>
                <CardDescription>Relative interview/offer lift by source</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {analytics.performance.sourceLift.map((s, i) => (
                    <div key={i} className="flex items-center justify-between">
                      <span className="text-sm font-medium">{s.source}</span>
                      <Badge variant={s.lift >= 0 ? 'secondary' : 'destructive'}>{(s.lift >= 0 ? '+' : '')}{Math.round(s.lift * 100)}%</Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Strengths and Areas for Improvement */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-green-700">
                  <CheckCircle className="h-5 w-5" />
                  Your Strengths
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {analytics.performance.strengths.map((strength, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm">{strength}</span>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-orange-700">
                  <AlertTriangle className="h-5 w-5" />
                  Areas for Improvement
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {analytics.performance.improvementAreas.map((area, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                      <span className="text-sm">{area}</span>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="market" className="space-y-6">
          {/* Top Industries */}
          <Card>
            <CardHeader>
              <CardTitle>Top Industries</CardTitle>
              <CardDescription>Most active industries in your job search</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {analytics.insights.topIndustries.map((industry, index) => (
                  <div key={industry.industry} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                        <span className="text-sm font-bold text-blue-600">{index + 1}</span>
                      </div>
                      <div>
                        <h4 className="font-medium">{industry.industry}</h4>
                        <p className="text-sm text-muted-foreground">{industry.count} applications</p>
                      </div>
                    </div>
                    {industry.avgSalary && (
                      <div className="text-right">
                        <div className="flex items-center gap-1">
                          <DollarSign className="h-4 w-4 text-green-600" />
                          <span className="font-medium">${industry.avgSalary.toLocaleString()}/year</span>
                        </div>
                        <p className="text-xs text-muted-foreground">Avg Salary</p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

function AnalyticsSkeleton() {
  return (
    <div className="space-y-8">
      {/* Header skeleton */}
      <div className="flex items-center justify-between">
        <div className="animate-pulse">
          <div className="w-64 h-8 bg-gray-200 rounded mb-2"></div>
          <div className="w-96 h-4 bg-gray-200 rounded"></div>
        </div>
        <div className="flex gap-3">
          <div className="w-20 h-10 bg-gray-200 rounded animate-pulse"></div>
          <div className="w-20 h-10 bg-gray-200 rounded animate-pulse"></div>
        </div>
      </div>

      {/* Metrics skeleton */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {[...Array(4)].map((_, i) => (
          <div key={i} className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
            <div className="w-12 h-12 bg-gray-200 rounded-lg mb-4"></div>
            <div className="w-20 h-4 bg-gray-200 rounded mb-2"></div>
            <div className="w-16 h-6 bg-gray-200 rounded"></div>
          </div>
        ))}
      </div>

      {/* Tabs skeleton */}
      <div className="bg-card rounded-lg shadow-sm">
        <div className="border-b p-6">
          <div className="flex gap-6 animate-pulse">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="w-20 h-8 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
        <div className="p-6">
          <div className="animate-pulse">
            <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
            <div className="w-full h-64 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/analytics/page.tsx">
import { Suspense } from 'react'
import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import { AnalyticsDashboard } from './components/analytics-dashboard'

export default async function AnalyticsPage() {
  const session = await getServerSession(authOptions)

  if (!session) {
    redirect('/auth/signin')
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground">Career Analytics</h1>
          <p className="mt-2 text-lg text-muted-foreground">
            Insights and analytics to optimize your job search strategy
          </p>
        </div>

        <Suspense fallback={<AnalyticsSkeleton />}>
          <AnalyticsDashboard userId={session.user.id} />
        </Suspense>
      </div>
    </div>
  )
}

function AnalyticsSkeleton() {
  return (
    <div className="space-y-8">
      {/* Overview Cards Skeleton */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {[...Array(4)].map((_, i) => (
          <div key={i} className="bg-card rounded-lg p-6 shadow-sm">
            <div className="animate-pulse">
              <div className="w-12 h-12 bg-gray-200 rounded-lg mb-4"></div>
              <div className="w-20 h-4 bg-gray-200 rounded mb-2"></div>
              <div className="w-16 h-6 bg-gray-200 rounded"></div>
            </div>
          </div>
        ))}
      </div>

      {/* Charts Skeleton */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-card rounded-lg p-6 shadow-sm">
          <div className="animate-pulse">
            <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
            <div className="w-full h-64 bg-gray-200 rounded"></div>
          </div>
        </div>
        <div className="bg-card rounded-lg p-6 shadow-sm">
          <div className="animate-pulse">
            <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
            <div className="w-full h-64 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>

      {/* Insights Skeleton */}
      <div className="bg-card rounded-lg p-6 shadow-sm">
        <div className="animate-pulse">
          <div className="w-48 h-6 bg-gray-200 rounded mb-6"></div>
          <div className="space-y-4">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="flex items-center gap-4">
                <div className="w-8 h-8 bg-gray-200 rounded"></div>
                <div className="flex-1">
                  <div className="w-32 h-4 bg-gray-200 rounded mb-2"></div>
                  <div className="w-full h-3 bg-gray-200 rounded"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/applications/[id]/page.tsx">
'use client'

import { useEffect, useState } from 'react'
import { useParams } from 'next/navigation'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Label } from '@/components/ui/label'
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select'
import { Download, Loader2 } from 'lucide-react'
import toast from 'react-hot-toast'

function highlightKeywords(text: string, keywords: string[]): string {
  if (!text) return ''
  if (!keywords || keywords.length === 0) return text
  const escaped = keywords.map(k => k.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).filter(Boolean)
  if (escaped.length === 0) return text
  const regex = new RegExp(`\\b(${escaped.join('|')})\\b`, 'gi')
  return text.replace(regex, '<mark class="bg-yellow-200">$1</mark>')
}

export default function ApplicationDetailsPage() {
  const params = useParams<{ id: string }>()
  const [loading, setLoading] = useState(true)
  const [data, setData] = useState<any>(null)
  const [attachId, setAttachId] = useState('')
  const [attaching, setAttaching] = useState(false)

  useEffect(() => {
    const load = async () => {
      try {
        const resp = await fetch(`/api/applications/${params.id}`)
        if (!resp.ok) throw new Error('Failed to load application')
        const json = await resp.json()
        setData(json)
      } catch (e) {
        toast.error('Failed to load application')
      } finally {
        setLoading(false)
      }
    }
    if (params?.id) load()
  }, [params?.id])

  const downloadResumeVersion = async (html: string, name: string) => {
    const wrapped = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>${name}</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.5;color:#333;max-width:8.5in;margin:0 auto;padding:0.5in;white-space:pre-wrap}</style></head><body>${html.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
    try {
      const resp = await fetch('/api/resume/export/pdf', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ html: wrapped, filename: `${name}.pdf` }) })
      if (!resp.ok) throw new Error('Failed')
      const blob = await resp.blob()
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${name}.pdf`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch {
      toast.error('Failed to download')
    }
  }

  const addCalendarEvent = async () => {
    if (!data?.application) return
    try {
      const now = new Date()
      const end = new Date(now.getTime() + 30*60000)
      await fetch('/api/calendar/events', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ summary: `${data.application.companyName} - ${data.application.jobTitle} Interview`, start: now.toISOString(), end: end.toISOString(), description: 'Interview scheduled' }) })
      toast.success('Event created in Google Calendar')
    } catch { toast.error('Failed to create event') }
  }

  const downloadICS = async () => {
    if (!data?.application) return
    try {
      const now = new Date()
      const end = new Date(now.getTime() + 30*60000)
      const res = await fetch('/api/calendar/ics', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ summary: `${data.application.companyName} - ${data.application.jobTitle} Interview`, start: now.toISOString(), end: end.toISOString(), description: 'Interview scheduled' }) })
      if (!res.ok) throw new Error('ics failed')
      const blob = await res.blob()
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = 'event.ics'
      a.click()
      URL.revokeObjectURL(url)
    } catch { toast.error('Failed to download ICS') }
  }

  const attachCoverLetter = async () => {
    if (!attachId) { toast.error('Select a cover letter'); return }
    setAttaching(true)
    try {
      const resp = await fetch(`/api/applications/${params.id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ coverLetterId: attachId }) })
      if (!resp.ok) throw new Error('Failed to attach')
      toast.success('Cover letter attached')
    } catch (e) {
      toast.error('Failed to attach cover letter')
    } finally {
      setAttaching(false)
    }
  }

  const exportPack = async () => {
    try {
      const resp = await fetch(`/api/applications/${params.id}/export/pack`)
      if (!resp.ok) throw new Error('Failed to export pack')
      const blob = await resp.blob()
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${data.application.companyName}_${data.application.jobTitle}_ApplicationPack.pdf`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch {
      toast.error('Export failed')
    }
  }

  const attachLatest = async () => {
    try {
      const resp = await fetch(`/api/applications/${params.id}/attach`, { method: 'POST' })
      if (!resp.ok) throw new Error('Attach failed')
      toast.success('Attached latest tailored resume and recent cover letter')
    } catch {
      toast.error('Failed to attach latest assets')
    }
  }

  const [followEmail, setFollowEmail] = useState<{ subject: string; body: string } | null>(null)
  const [followDates, setFollowDates] = useState<Date[] | null>(null)
  const [savingFollows, setSavingFollows] = useState(false)
  const [insights, setInsights] = useState<{ talkingPoints: string[]; keyValues: string[]; cultureFit: string[] } | null>(null)
  const [insightsLoading, setInsightsLoading] = useState(false)
  const [fullResearch, setFullResearch] = useState<any | null>(null)
  const [fullResearchLoading, setFullResearchLoading] = useState(false)
  const [score, setScore] = useState<{ score: number; reasons: string[]; riskFactors: string[]; improvements: string[] } | null>(null)
  const [scoring, setScoring] = useState(false)
  const suggestFollowUp = async () => {
    try {
      const resp = await fetch(`/api/applications/${params.id}/followup/suggest`)
      if (!resp.ok) throw new Error('Failed to suggest follow-up')
      const j = await resp.json()
      setFollowEmail(j.email)
      setFollowDates((j.dates || []).map((d: string) => new Date(d)))
    } catch {
      toast.error('Failed to suggest follow-up')
    }
  }

  const saveFollowUp = async () => {
    if (!followEmail) { toast.error('Generate a follow-up first'); return }
    setSavingFollows(true)
    try {
      const resp = await fetch(`/api/applications/${params.id}/followup/save`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: followEmail, dates: (followDates || []).map(d => d.toISOString()) }) })
      if (!resp.ok) throw new Error('Save failed')
      toast.success('Follow-up saved')
    } catch { toast.error('Failed to save follow-up') } finally { setSavingFollows(false) }
  }

  const copyFollowUp = async () => {
    if (!followEmail) return
    try {
      await navigator.clipboard.writeText(`Subject: ${followEmail.subject}\n\n${followEmail.body}`)
      toast.success('Copied to clipboard')
    } catch { toast.error('Copy failed') }
  }

  const loadCompanyInsights = async () => {
    if (!data?.application) return
    setInsightsLoading(true)
    try {
      // Fetch company research first if needed
      let companyData = data?.application?.companyResearch ? data.application.companyResearch : null
      if (!companyData) {
        // Try to scrape minimal data (best-effort)
        const res = await fetch('/api/company/research', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ companyName: data.application.companyName })
        })
        if (res.ok) {
          const j = await res.json()
          companyData = j.companyData
        }
      }
      const resp = await fetch('/api/company/insights', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ jobTitle: data.application.jobTitle, companyData: companyData || {} })
      })
      if (!resp.ok) throw new Error('Failed to generate insights')
      const j = await resp.json()
      setInsights(j.insights)
    } catch {
      toast.error('Failed to load company insights')
    } finally {
      setInsightsLoading(false)
    }
  }

  const runFullCompanyResearch = async () => {
    if (!data?.application) return
    setFullResearchLoading(true)
    try {
      const resp = await fetch('/api/company/orchestrate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          companyName: data.application.companyName,
          jobPostingUrl: data.application.jobUrl,
          companyWebsite: data.resume?.original?.fileUrl ? undefined : undefined,
          linkedinCompanyUrl: undefined,
          roleHints: ["Recruiter","Talent Acquisition","Engineering Manager","Head of People"],
          locationHint: undefined,
          jobTitle: data.application.jobTitle
        })
      })
      if (!resp.ok) throw new Error('Failed to orchestrate research')
      const j = await resp.json()
      setFullResearch(j.result || j.raw || null)
    } catch (e) {
      toast.error('Failed to run full company research')
    } finally {
      setFullResearchLoading(false)
    }
  }

  const runScore = async () => {
    setScoring(true)
    try {
      const resp = await fetch(`/api/applications/${params.id}/score`)
      if (!resp.ok) throw new Error('Score failed')
      const j = await resp.json()
      setScore(j.score)
    } catch {
      toast.error('Failed to score application')
    } finally {
      setScoring(false)
    }
  }

  if (loading) return <div className="p-6 text-sm text-gray-600">Loading...</div>
  if (!data?.success) return <div className="p-6 text-sm text-red-600">Failed to load application.</div>

  const { application, coverLetter, resume } = data
  return (
    <div className="container mx-auto p-4 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>{application.jobTitle} @ {application.companyName}</CardTitle>
          <CardDescription>Application details and artifacts</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label>Job Description</Label>
            <div className="border rounded p-2 text-sm bg-card" dangerouslySetInnerHTML={{ __html: highlightKeywords(application.jobDescription || '', (application.analysis?.keyRequirements || []).concat(application.analysis?.preferredSkills || [])) }} />
          </div>

          <div>
            <Label>Job Analysis</Label>
            <Textarea readOnly rows={8} value={JSON.stringify(application.analysis || {}, null, 2)} />
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Cover Letter</CardTitle>
          <CardDescription>Attach a saved cover letter or preview the current attachment.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          {coverLetter ? (
            <div className="space-y-2">
              <div className="text-sm text-gray-700">Attached: {coverLetter.jobTitle} @ {coverLetter.companyName}</div>
              <Button onClick={() => downloadResumeVersion(coverLetter.content, `${application.companyName}_${application.jobTitle}_CoverLetter`)}><Download className="h-4 w-4 mr-1" /> Download PDF</Button>
            </div>
          ) : (
            <div className="text-sm text-gray-600">No cover letter attached.</div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
            <Select value={attachId} onValueChange={setAttachId}>
              <SelectTrigger><SelectValue placeholder="Select saved cover letter" /></SelectTrigger>
              <SelectContent>
                {/* This could be populated via client-side fetch to /api/cover-letter/list; keeping simple here */}
                <SelectItem value="">None</SelectItem>
              </SelectContent>
            </Select>
            <Button onClick={attachCoverLetter} disabled={attaching}>{attaching ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Attaching...</>) : 'Attach'}</Button>
            <a className="inline-flex items-center justify-center border rounded px-3 py-2" href="/cover-letter">Create New</a>
          </div>
        </CardContent>
      </Card>

      {/* Follow-up Email */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Follow-up Email</CardTitle>
              <CardDescription>Generate and save a tailored follow-up with suggested dates</CardDescription>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={suggestFollowUp}>Suggest Follow-up</Button>
              <Button variant="outline" onClick={copyFollowUp} disabled={!followEmail}>Copy</Button>
              <Button onClick={saveFollowUp} disabled={!followEmail || savingFollows}>{savingFollows ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Saving...</>) : 'Save'}</Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-3">
          {followEmail ? (
            <div className="space-y-2 text-sm">
              <div><span className="font-medium">Subject:</span> {followEmail.subject}</div>
              <pre className="whitespace-pre-wrap border rounded p-2 bg-card">{followEmail.body}</pre>
              {followDates && followDates.length > 0 && (
                <div className="text-xs text-gray-600">Suggested dates: {followDates.map(d => d.toLocaleDateString()).join(', ')}</div>
              )}
            </div>
          ) : (
            <div className="text-sm text-gray-600">No follow-up generated yet. Click Suggest Follow-up.</div>
          )}
        </CardContent>
      </Card>

      {/* Company Insights */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Company Insights</CardTitle>
              <CardDescription>Comprehensive breakdown to evaluate fit and tailor messaging</CardDescription>
            </div>
            <Button variant="outline" onClick={loadCompanyInsights} disabled={insightsLoading}>
              {insightsLoading ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Loading...</>) : 'Generate Insights'}
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {insights ? (
            <div className="space-y-6">
              <div>
                <div className="text-sm font-medium text-foreground mb-2">Key Values & Culture Signals</div>
                {insights.keyValues && insights.keyValues.length > 0 ? (
                  <ul className="space-y-1">
                    {insights.keyValues.map((v, i) => (
                      <li key={i} className="text-sm text-gray-700 flex gap-2"><span className="text-blue-500">•</span>{v}</li>
                    ))}
                  </ul>
                ) : (
                  <div className="text-sm text-gray-500">No culture signals found.</div>
                )}
              </div>

              <div>
                <div className="text-sm font-medium text-foreground mb-2">Talking Points (Tailor your pitch)</div>
                {insights.talkingPoints && insights.talkingPoints.length > 0 ? (
                  <ol className="space-y-2 list-decimal pl-5">
                    {insights.talkingPoints.map((p, i) => (
                      <li key={i} className="text-sm text-gray-800">{p}</li>
                    ))}
                  </ol>
                ) : (
                  <div className="text-sm text-gray-500">No talking points generated.</div>
                )}
              </div>

              <div>
                <div className="text-sm font-medium text-foreground mb-2">Culture Fit Angles</div>
                {insights.cultureFit && insights.cultureFit.length > 0 ? (
                  <ul className="space-y-1">
                    {insights.cultureFit.map((c, i) => (
                      <li key={i} className="text-sm text-gray-700 flex gap-2"><span className="text-green-500">•</span>{c}</li>
                    ))}
                  </ul>
                ) : (
                  <div className="text-sm text-gray-500">No culture fit suggestions.</div>
                )}
              </div>
            </div>
          ) : (
            <div className="text-sm text-gray-600">Click Generate Insights to build a full company breakdown.</div>
          )}
        </CardContent>
      </Card>

      {/* Full Company Research (Assistant Orchestrated) */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Full Company Research</CardTitle>
              <CardDescription>Profile, culture, reviews, news, contacts, and role relevance</CardDescription>
            </div>
            <Button onClick={runFullCompanyResearch} disabled={fullResearchLoading}>
              {fullResearchLoading ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Researching...</>) : 'Run Research'}
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {!fullResearch && <div className="text-sm text-gray-600">Run research to fetch a complete breakdown from multiple sources.</div>}
          {fullResearch && (
            <div className="space-y-6">
              {/* Profile */}
              {fullResearch.profile && (
                <div>
                  <div className="text-sm font-medium text-foreground mb-2">Company Profile</div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                    <div><span className="text-gray-500">Name:</span> {fullResearch.profile.companyName || 'Unknown'}</div>
                    <div><span className="text-gray-500">Website:</span> {fullResearch.profile.website || 'Unknown'}</div>
                    <div><span className="text-gray-500">Industry:</span> {fullResearch.profile.industry || 'Unknown'}</div>
                    <div><span className="text-gray-500">Size:</span> {fullResearch.profile.size || 'Unknown'}</div>
                    <div className="md:col-span-2"><span className="text-gray-500">Description:</span> {fullResearch.profile.description || 'Unknown'}</div>
                  </div>
                </div>
              )}

              {/* Culture */}
              {fullResearch.culture && (
                <div>
                  <div className="text-sm font-medium text-foreground mb-2">Culture & Benefits</div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Values</div>
                      <ul className="space-y-1">
                        {(fullResearch.culture.values || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}
                      </ul>
                    </div>
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Benefits</div>
                      <ul className="space-y-1">
                        {(fullResearch.culture.benefits || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}
                      </ul>
                    </div>
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Signals</div>
                      <ul className="space-y-1">
                        {(fullResearch.culture.signals || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}
                      </ul>
                    </div>
                  </div>
                </div>
              )}

              {/* Reviews */}
              {fullResearch.reviewsSummary && (
                <div>
                  <div className="text-sm font-medium text-foreground mb-2">Reviews Summary</div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
                    <div><span className="text-gray-500">Glassdoor Rating:</span> {fullResearch.reviewsSummary.glassdoorRating ?? 'Unknown'}</div>
                    <div><span className="text-gray-500">Reviews:</span> {fullResearch.reviewsSummary.glassdoorReviews ?? 'Unknown'}</div>
                    <div className="md:col-span-3 grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div>
                        <div className="text-xs text-gray-500 mb-1">Pros</div>
                        <ul className="space-y-1">{(fullResearch.reviewsSummary.pros || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500 mb-1">Cons</div>
                        <ul className="space-y-1">{(fullResearch.reviewsSummary.cons || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* News */}
              {fullResearch.news && fullResearch.news.items && (
                <div>
                  <div className="text-sm font-medium text-foreground mb-2">Recent News</div>
                  <ul className="space-y-2">
                    {fullResearch.news.items.map((n: any, i: number) => (
                      <li key={i} className="text-sm">
                        <a className="text-blue-600 hover:underline" href={n.url} target="_blank" rel="noopener noreferrer">{n.title}</a>
                        <div className="text-xs text-gray-500">{n.publishedAt}</div>
                        <div>{n.summary}</div>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Contacts */}
              {fullResearch.hiringContacts && (
                <div>
                  <div className="text-sm font-medium text-foreground mb-2">Hiring Contacts</div>
                  <ul className="space-y-1">
                    {fullResearch.hiringContacts.map((p: any, i: number) => (
                      <li key={i} className="text-sm">
                        <span className="font-medium">{p.name}</span> — {p.title} {p.profileUrl && (<a className="text-blue-600 hover:underline ml-2" href={p.profileUrl} target="_blank" rel="noopener noreferrer">Profile</a>)}
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {fullResearch.contactInfo && (
                <div>
                  <div className="text-sm font-medium text-foreground mb-2">Contact Info</div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Emails</div>
                      <ul className="space-y-1">{(fullResearch.contactInfo.emails || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
                    </div>
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Phones</div>
                      <ul className="space-y-1">{(fullResearch.contactInfo.phones || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
                    </div>
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Addresses</div>
                      <ul className="space-y-1">{(fullResearch.contactInfo.addresses || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
                    </div>
                  </div>
                </div>
              )}

              {/* Role Relevance */}
              {fullResearch.roleRelevance && (
                <div>
                  <div className="text-sm font-medium text-foreground mb-2">Role Relevance</div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Why This Company</div>
                      <ul className="space-y-1">{(fullResearch.roleRelevance.whyThisCompany || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
                    </div>
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Talking Points</div>
                      <ul className="space-y-1">{(fullResearch.roleRelevance.talkingPoints || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
                    </div>
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Risks</div>
                      <ul className="space-y-1">{(fullResearch.roleRelevance.riskNotes || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
                    </div>
                    <div>
                      <div className="text-xs text-gray-500 mb-1">Opportunities</div>
                      <ul className="space-y-1">{(fullResearch.roleRelevance.opportunities || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Resume</CardTitle>
          <CardDescription>Original upload and tailored versions.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-end">
            <Button variant="outline" onClick={runScore} disabled={scoring}>{scoring ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Scoring...</>) : 'Score Success Probability'}</Button>
          </div>
          <div>
            <div className="flex items-center justify-between">
              <Label>Original (extracted)</Label>
              {resume?.original?.fileUrl && (
                <a href={resume.original.fileUrl} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-600 hover:underline">Download original upload</a>
              )}
            </div>
            <div className="border rounded p-2 text-sm bg-card" dangerouslySetInnerHTML={{ __html: highlightKeywords(resume?.original?.extractedText || '', (application.analysis?.keyRequirements || []).concat(application.analysis?.preferredSkills || [])) }} />
          </div>
          <div className="space-y-2">
            <Label>Tailored Versions</Label>
            {(!resume?.versions || resume.versions.length === 0) ? (
              <div className="text-sm text-gray-600">No tailored versions yet.</div>
            ) : (
              <div className="space-y-3">
                {resume.versions.map((v: any) => (
                  <div key={v._id} className="border rounded p-3">
                    <div className="text-sm text-gray-700 mb-2">{v.jobTitle} @ {v.companyName} — Match: {v.matchScore ?? 0}%</div>
                    <div className="flex gap-2">
                      <Button variant="outline" onClick={() => downloadResumeVersion(v.customizedText, `${application.companyName}_${application.jobTitle}_Resume`)}><Download className="h-4 w-4 mr-1" /> PDF</Button>
                      <details className="ml-2">
                        <summary className="cursor-pointer text-xs text-gray-600">Preview Changes</summary>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                          <div className="text-xs">
                            <div className="text-gray-500 mb-1">Original</div>
                            <div className="border rounded p-2 bg-card" dangerouslySetInnerHTML={{ __html: highlightKeywords(resume?.original?.extractedText || '', (application.analysis?.keyRequirements || []).concat(application.analysis?.preferredSkills || [])) }} />
                          </div>
                          <div className="text-xs">
                            <div className="text-gray-500 mb-1">Tailored</div>
                            <div className="border rounded p-2 bg-card" dangerouslySetInnerHTML={{ __html: highlightKeywords(v.customizedText || '', (application.analysis?.keyRequirements || []).concat(application.analysis?.preferredSkills || [])) }} />
                          </div>
                        </div>
                      </details>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {score && (
        <Card>
          <CardHeader>
            <CardTitle>Success Probability</CardTitle>
            <CardDescription>AI-assessed score with recommendations</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="text-2xl font-bold">{score.score}/100</div>
            <div>
              <div className="text-sm font-medium mb-1">Reasons</div>
              <ul className="list-disc ml-5 text-sm">{score.reasons.map((r,i)=>(<li key={i}>{r}</li>))}</ul>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <div className="text-sm font-medium mb-1">Risks</div>
                <ul className="list-disc ml-5 text-sm">{score.riskFactors.map((r,i)=>(<li key={i}>{r}</li>))}</ul>
              </div>
              <div>
                <div className="text-sm font-medium mb-1">Improvements</div>
                <ul className="list-disc ml-5 text-sm">{score.improvements.map((r,i)=>(<li key={i}>{r}</li>))}</ul>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Application Pack</CardTitle>
            <CardDescription>Export tailored resume + cover letter + talking points</CardDescription>
          </CardHeader>
          <CardContent>
          <div className="flex flex-col sm:flex-row gap-2">
            <Button onClick={exportPack} className="flex-1"><Download className="h-4 w-4 mr-1" /> Export Application Pack</Button>
            <Button variant="outline" onClick={attachLatest} className="flex-1">Attach Latest Resume + Cover Letter</Button>
            <Button variant="outline" onClick={addCalendarEvent} className="flex-1">Add to Google Calendar</Button>
            <Button variant="outline" onClick={downloadICS} className="flex-1">Download ICS</Button>
          </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Follow-up</CardTitle>
            <CardDescription>Suggest dates and generate email</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <Button variant="outline" onClick={suggestFollowUp}>Suggest Dates & Email</Button>
            {followDates && (
              <div className="text-sm text-gray-700">Suggested dates: {followDates.map(d=>d.toLocaleDateString()).join(', ')}</div>
            )}
            {followDates && followDates.length > 0 && (
              <Button
                variant="default"
                disabled={savingFollows}
                onClick={async ()=>{
                  try {
                    setSavingFollows(true)
                    const resp = await fetch(`/api/applications/${params.id}/followup/save`, {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ dates: followDates.map(d=>d.toISOString()) })
                    })
                    if (!resp.ok) throw new Error('save failed')
                    toast.success('Follow-up dates saved')
                  } catch { toast.error('Failed to save follow-ups') }
                  finally { setSavingFollows(false) }
                }}
              >
                {savingFollows ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Saving...</>) : 'Save Follow-ups'}
              </Button>
            )}
            {followEmail && (
              <div className="space-y-2">
                <div className="text-sm font-medium">Subject</div>
                <div className="text-sm text-gray-800">{followEmail.subject}</div>
                <div className="text-sm font-medium">Body</div>
                <pre className="whitespace-pre-wrap text-sm bg-gray-50 p-3 rounded">{followEmail.body}</pre>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
</file>

<file path="src/app/auth/forgot-password/page.tsx">
'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Alert, AlertDescription } from '@/components/ui/alert'

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState('')
  const [sent, setSent] = useState(false)
  const [error, setError] = useState('')

  const submit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')
    try {
      setSent(true)
    } catch (e) {
      setError('Failed to send reset link')
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-background p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Reset your password</CardTitle>
          <CardDescription>Enter your email and we'll send you a reset link.</CardDescription>
        </CardHeader>
        <CardContent>
          {error && (
            <Alert variant="destructive"><AlertDescription>{error}</AlertDescription></Alert>
          )}
          {sent ? (
            <Alert><AlertDescription>If an account exists for {email}, a reset link has been sent.</AlertDescription></Alert>
          ) : (
            <form onSubmit={submit} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required autoComplete="email" />
              </div>
              <Button type="submit" className="w-full">Send reset link</Button>
            </form>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/auth/signin/page.tsx">
'use client'

export const dynamic = 'force-dynamic'

import { useState, useEffect } from 'react'
import { signIn, getSession, useSession } from 'next-auth/react'
import { useRouter, useSearchParams } from 'next/navigation'
import { Suspense } from 'react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import {
  Mail,
  Lock,
  Eye,
  EyeOff,
  Loader2,
  Sparkles,
  AlertCircle,
  CheckCircle
} from 'lucide-react'
import toast from 'react-hot-toast'

function SignInInner() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [showPassword, setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')

  const { data: session, status } = useSession()
  const router = useRouter()
  const searchParams = useSearchParams()
  // Sanitize callbackUrl: disallow nested /auth redirects and enforce same-origin path
  const rawCallback = searchParams.get('callbackUrl') || '/dashboard'
  let callbackUrl = '/dashboard'
  try {
    // Accept only pathnames starting with '/' and not /auth
    const decoded = decodeURIComponent(rawCallback)
    if (decoded.startsWith('/') && !decoded.startsWith('/auth')) {
      callbackUrl = decoded
    }
  } catch {
    callbackUrl = '/dashboard'
  }

  // Prefill email from query
  useEffect(() => {
    const prefill = searchParams.get('email')
    if (prefill) setEmail(prefill)
  }, [searchParams])

  // Redirect if already authenticated
  useEffect(() => {
    if (session) {
      // Check if user needs onboarding
      const user = session.user as any
      if (user?.profile?.onboardingCompleted === false) {
        router.push('/onboarding/quiz')
      } else {
        router.push(callbackUrl)
      }
    }
  }, [session, router, callbackUrl])

  // Show success message for email verification
  useEffect(() => {
    const verified = searchParams.get('verified')
    if (verified === 'true') {
      setSuccess('Email verified successfully! Please sign in.')
    }

    const registered = searchParams.get('registered')
    if (registered === 'true') {
      setSuccess('Account created successfully! Please sign in.')
    }
  }, [searchParams])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')

    try {
      const result = await signIn('credentials', {
        email,
        password,
        redirect: false,
      })

      if (result?.error) {
        setError('Invalid email or password')
        toast.error('Sign in failed')
      } else if (result?.ok) {
        setSuccess('Sign in successful! Redirecting...')
        toast.success('Welcome back!')
        router.push(callbackUrl)
      }
    } catch (error) {
      setError('An unexpected error occurred')
      toast.error('Something went wrong')
    } finally {
      setIsLoading(false)
    }
  }

  const handleGoogleSignIn = async () => {
    setIsLoading(true)
    try {
      await signIn('google', { callbackUrl })
    } catch (error) {
      setError('Google sign in failed')
      setIsLoading(false)
    }
  }

  const handleDemoSignIn = async () => {
    setIsLoading(true)
    setEmail('demo@careerlever.ai')
    setPassword('demo123')

    try {
      const result = await signIn('credentials', {
        email: 'demo@careerlever.ai',
        password: 'demo123',
        redirect: false,
      })

      if (result?.ok) {
        toast.success('Demo account signed in!')
        router.push(callbackUrl)
      } else {
        setError('Demo sign in failed')
      }
    } catch (error) {
      setError('Demo sign in failed')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-black p-4">
      <div className="w-full max-w-md space-y-6">
        {/* Header */}
        <div className="text-center space-y-2">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-purple-600 rounded-full mb-4">
            <Sparkles className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-white">Welcome back</h1>
          <p className="text-white/70">Sign in to your Career Lever AI account</p>
        </div>

        {/* Success Alert */}
        {success && (
          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>{success}</AlertDescription>
          </Alert>
        )}

        {/* Error Alert */}
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Sign In Form */}
        <Card className="bg-card/5 border-white/10 backdrop-blur-xl">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl text-center text-white">Sign In</CardTitle>
            <CardDescription className="text-center text-white/60">
              Enter your credentials to access your account
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Google Sign In */}
            <Button
              type="button"
              variant="outline"
              className="w-full"
              onClick={handleGoogleSignIn}
              disabled={isLoading}
            >
              <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                <path
                  fill="currentColor"
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                />
                <path
                  fill="currentColor"
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                />
                <path
                  fill="currentColor"
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                />
                <path
                  fill="currentColor"
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                />
              </svg>
              Continue with Google
            </Button>

            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <Separator />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-background px-2 text-muted-foreground">Or continue with email</span>
              </div>
            </div>

            {/* Demo Account */}
            <Button
              type="button"
              variant="outline"
              className="w-full"
              onClick={handleDemoSignIn}
              disabled={isLoading}
            >
              <Sparkles className="w-4 h-4 mr-2" />
              Try Demo Account
            </Button>

            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <Separator />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-background px-2 text-muted-foreground">Or sign in manually</span>
              </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="email" className="text-white">Email</Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-3 h-4 w-4 text-white/50" />
                  <Input
                    id="email"
                    type="email"
                    placeholder="Enter your email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="pl-10 bg-card/10 border-white/20 text-white placeholder:text-white/40"
                    required
                    disabled={isLoading}
                    autoComplete="email"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="password" className="text-white">Password</Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-3 h-4 w-4 text-white/50" />
                  <Input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    placeholder="Enter your password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="pl-10 pr-12 bg-card/10 border-white/20 text-white placeholder:text-white/40"
                    required
                    disabled={isLoading}
                    autoComplete="current-password"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-white/70 hover:text-white z-10"
                    disabled={isLoading}
                    tabIndex={-1}
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </button>
                </div>
              </div>

              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Signing in...
                  </>
                ) : (
                  'Sign In'
                )}
              </Button>
            </form>

            {/* Forgot Password */}
            <div className="text-center">
              <Link
                href="/auth/forgot-password"
                className="text-sm text-purple-400 hover:text-purple-300"
              >
                Forgot your password?
              </Link>
            </div>
          </CardContent>
        </Card>

        {/* Sign Up Link */}
        <div className="text-center">
          <p className="text-sm text-white/70">
            Don't have an account?{' '}
            <Link href="/auth/signup" className="text-purple-400 hover:text-purple-300 font-medium">
              Sign up for free
            </Link>
          </p>
        </div>

        {/* Footer */}
        <div className="text-center text-xs text-white/50">
          By signing in, you agree to our{' '}
          <Link href="/terms" className="text-purple-400 hover:text-purple-300">
            Terms of Service
          </Link>{' '}
          and{' '}
          <Link href="/privacy" className="text-purple-400 hover:text-purple-300">
            Privacy Policy
          </Link>
        </div>
      </div>
    </div>
  )
}

export default function SignInPage() {
  return (
    <Suspense>
      <SignInInner />
    </Suspense>
  )
}
</file>

<file path="src/app/auth/signup/page.tsx">
'use client'

export const dynamic = 'force-dynamic'

import { useEffect, useState, Suspense } from 'react'
import { signIn } from 'next-auth/react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { Checkbox } from '@/components/ui/checkbox'
import {
  Mail,
  Lock,
  Eye,
  EyeOff,
  Loader2,
  Sparkles,
  AlertCircle,
  CheckCircle,
  User,
  Building
} from 'lucide-react'
import toast from 'react-hot-toast'

function SignUpInner() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
    company: '',
    role: ''
  })
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [acceptTerms, setAcceptTerms] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')

  const router = useRouter()
  const searchParams = useSearchParams()

  // Prefill email if passed from homepage
  useEffect(() => {
    const prefill = searchParams.get('email')
    if (prefill) setFormData(prev => ({ ...prev, email: prefill }))
  }, [searchParams])

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const validateForm = () => {
    if (!formData.name.trim()) return 'Name is required'
    if (!formData.email.trim()) return 'Email is required'
    if (!formData.password) return 'Password is required'
    if (formData.password.length < 8) return 'Password must be at least 8 characters'
    if (formData.password !== formData.confirmPassword) return 'Passwords do not match'
    if (!acceptTerms) return 'You must accept the terms and conditions'

    return null
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')

    const validationError = validateForm()
    if (validationError) {
      setError(validationError)
      return
    }

    setIsLoading(true)

    try {
      const res = await fetch('/api/users/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: formData.name,
          email: formData.email,
          password: formData.password,
          title: formData.role,
          location: formData.company ? undefined : undefined
        })
      })

      if (!res.ok) {
        const data = await res.json()
        throw new Error(data.error || 'Failed to create account')
      }

      setSuccess('Account created successfully! Please sign in.')
      toast.success('Account created! Redirecting to sign in...')

      setTimeout(() => {
        router.push('/auth/signin?registered=true')
      }, 1500)

    } catch (error) {
      setError('Failed to create account. Please try again.')
      toast.error('Sign up failed')
    } finally {
      setIsLoading(false)
    }
  }

  const handleGoogleSignUp = async () => {
    setIsLoading(true)
    try {
      await signIn('google', { callbackUrl: '/dashboard' })
    } catch (error) {
      setError('Google sign up failed')
      setIsLoading(false)
    }
  }

  const getPasswordStrength = (password: string) => {
    let strength = 0
    if (password.length >= 8) strength++
    if (/[A-Z]/.test(password)) strength++
    if (/[a-z]/.test(password)) strength++
    if (/[0-9]/.test(password)) strength++
    if (/[^A-Za-z0-9]/.test(password)) strength++

    return {
      level: strength,
      label: strength <= 2 ? 'Weak' : strength <= 3 ? 'Medium' : 'Strong',
      color: strength <= 2 ? 'text-red-600' : strength <= 3 ? 'text-yellow-600' : 'text-green-600'
    }
  }

  const passwordStrength = getPasswordStrength(formData.password)

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-50 via-white to-blue-50 p-4">
      <div className="w-full max-w-lg space-y-6">
        {/* Header */}
        <div className="text-center space-y-2">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-purple-100 rounded-full mb-4">
            <Sparkles className="w-8 h-8 text-purple-600" />
          </div>
          <h1 className="text-3xl font-bold text-foreground">Join Career Lever AI</h1>
          <p className="text-muted-foreground">Create your account and start your career transformation</p>
        </div>

        {/* Success Alert */}
        {success && (
          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>{success}</AlertDescription>
          </Alert>
        )}

        {/* Error Alert */}
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Sign Up Form */}
        <Card>
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl text-center">Create Account</CardTitle>
            <CardDescription className="text-center">
              Fill in your details to get started
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Google Sign Up */}
            <Button
              type="button"
              variant="outline"
              className="w-full"
              onClick={handleGoogleSignUp}
              disabled={isLoading}
            >
              <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                <path
                  fill="currentColor"
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                />
                <path
                  fill="currentColor"
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                />
                <path
                  fill="currentColor"
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                />
                <path
                  fill="currentColor"
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                />
              </svg>
              Continue with Google
            </Button>

            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <Separator />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-background px-2 text-muted-foreground">Or create account with email</span>
              </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Full Name</Label>
                  <div className="relative">
                    <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                      id="name"
                      type="text"
                      placeholder="John Doe"
                      value={formData.name}
                      onChange={(e) => handleInputChange('name', e.target.value)}
                      className="pl-10"
                      required
                      disabled={isLoading}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="role">Your Role</Label>
                  <div className="relative">
                    <Building className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                      id="role"
                      type="text"
                      placeholder="Software Engineer"
                      value={formData.role}
                      onChange={(e) => handleInputChange('role', e.target.value)}
                      className="pl-10"
                      disabled={isLoading}
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="email"
                    type="email"
                    placeholder="john@example.com"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    className="pl-10"
                    required
                    disabled={isLoading}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="company">Company (Optional)</Label>
                <div className="relative">
                  <Building className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="company"
                    type="text"
                    placeholder="Current company or 'Unemployed'"
                    value={formData.company}
                    onChange={(e) => handleInputChange('company', e.target.value)}
                    className="pl-10"
                    disabled={isLoading}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    placeholder="Create a strong password"
                    value={formData.password}
                    onChange={(e) => handleInputChange('password', e.target.value)}
                    className="pl-10 pr-10"
                    required
                    disabled={isLoading}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-3 text-muted-foreground hover:text-muted-foreground"
                    disabled={isLoading}
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </button>
                </div>
                {formData.password && (
                  <div className="flex items-center gap-2 text-sm">
                    <span>Password strength:</span>
                    <span className={`font-medium ${passwordStrength.color}`}>
                      {passwordStrength.label}
                    </span>
                    <div className="flex-1 bg-gray-200 rounded-full h-1">
                      <div
                        className={`h-1 rounded-full ${
                          passwordStrength.level <= 2
                            ? 'bg-red-500'
                            : passwordStrength.level <= 3
                            ? 'bg-yellow-500'
                            : 'bg-green-500'
                        }`}
                        style={{ width: `${(passwordStrength.level / 5) * 100}%` }}
                      />
                    </div>
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="confirmPassword">Confirm Password</Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="confirmPassword"
                    type={showConfirmPassword ? 'text' : 'password'}
                    placeholder="Confirm your password"
                    value={formData.confirmPassword}
                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                    className="pl-10 pr-10"
                    required
                    disabled={isLoading}
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-3 top-3 text-muted-foreground hover:text-muted-foreground"
                    disabled={isLoading}
                  >
                    {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </button>
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="terms"
                  checked={acceptTerms}
                  onCheckedChange={(checked) => setAcceptTerms(checked as boolean)}
                  disabled={isLoading}
                />
                <Label htmlFor="terms" className="text-sm">
                  I agree to the{' '}
                  <Link href="/terms" className="text-blue-600 hover:text-blue-800">
                    Terms of Service
                  </Link>{' '}
                  and{' '}
                  <Link href="/privacy" className="text-blue-600 hover:text-blue-800">
                    Privacy Policy
                  </Link>
                </Label>
              </div>

              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Creating account...
                  </>
                ) : (
                  'Create Account'
                )}
              </Button>
            </form>
          </CardContent>
        </Card>

        {/* Sign In Link */}
        <div className="text-center">
          <p className="text-sm text-muted-foreground">
            Already have an account?{' '}
            <Link href="/auth/signin" className="text-blue-600 hover:text-blue-800 font-medium">
              Sign in here
            </Link>
          </p>
        </div>
      </div>
    </div>
  )
}

export default function SignUpPage() {
  return (
    <Suspense>
      <SignUpInner />
    </Suspense>
  )
}
</file>

<file path="src/app/career-finder/applications/page.tsx">
'use client'

import { useEffect, useState } from 'react'
import { ApplicationTracker, type Application } from '@/lib/application-tracker'
import Link from 'next/link'

export default function ApplicationsPage() {
  const [applications, setApplications] = useState<Application[]>([])
  const [stats, setStats] = useState<ReturnType<typeof ApplicationTracker.getStats>>({
    total: 0,
    applied: 0,
    interview: 0,
    rejected: 0,
    offer: 0,
    accepted: 0,
    responseRate: 0
  })

  useEffect(() => {
    loadApplications()
  }, [])

  const loadApplications = () => {
    const apps = ApplicationTracker.getAll()
    setApplications(apps)
    setStats(ApplicationTracker.getStats())
  }

  const updateStatus = (id: string, status: Application['status']) => {
    ApplicationTracker.updateStatus(id, status)
    loadApplications()
  }

  const getStatusColor = (status: Application['status']) => {
    switch (status) {
      case 'applied': return 'bg-blue-100 text-blue-800'
      case 'interview': return 'bg-yellow-100 text-yellow-800'
      case 'rejected': return 'bg-red-100 text-red-800'
      case 'offer': return 'bg-green-100 text-green-800'
      case 'accepted': return 'bg-purple-100 text-purple-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8 animate-fade-in">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
            Application Tracker
          </h1>
          <p className="text-gray-600">Track and manage your job applications with style ✨</p>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4 mb-8">
          <div className="bg-card p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-gray-100">
            <div className="text-2xl font-bold text-foreground">{stats.total}</div>
            <div className="text-sm text-gray-600">Total</div>
          </div>
          <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-blue-200">
            <div className="text-2xl font-bold text-blue-900">{stats.applied}</div>
            <div className="text-sm text-blue-600">Applied</div>
          </div>
          <div className="bg-gradient-to-br from-yellow-50 to-yellow-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-yellow-200">
            <div className="text-2xl font-bold text-yellow-900">{stats.interview}</div>
            <div className="text-sm text-yellow-600">Interview</div>
          </div>
          <div className="bg-gradient-to-br from-red-50 to-red-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-red-200">
            <div className="text-2xl font-bold text-red-900">{stats.rejected}</div>
            <div className="text-sm text-red-600">Rejected</div>
          </div>
          <div className="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-green-200">
            <div className="text-2xl font-bold text-green-900">{stats.offer}</div>
            <div className="text-sm text-green-600">Offers</div>
          </div>
          <div className="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-purple-200">
            <div className="text-2xl font-bold text-purple-900">{stats.accepted}</div>
            <div className="text-sm text-purple-600">Accepted</div>
          </div>
          <div className="bg-gradient-to-br from-indigo-50 to-indigo-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-indigo-200">
            <div className="text-2xl font-bold text-indigo-900">{stats.responseRate}%</div>
            <div className="text-sm text-indigo-600">Response Rate</div>
          </div>
        </div>

        {/* Applications List */}
        <div className="bg-card rounded-2xl shadow-xl overflow-hidden border border-gray-100">
          <div className="px-6 py-5 bg-gradient-to-r from-blue-50 to-purple-50 border-b border-border flex justify-between items-center">
            <h2 className="text-2xl font-bold text-foreground">Applications</h2>
            <Link 
              href="/career-finder/search"
              className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-300 shadow-lg hover:shadow-xl font-semibold"
            >
              + Apply to More Jobs
            </Link>
          </div>

          {applications.length === 0 ? (
            <div className="p-12 text-center">
              <div className="text-6xl mb-4">📋</div>
              <h3 className="text-xl font-semibold text-foreground mb-2">No Applications Yet</h3>
              <p className="text-gray-600 mb-6">Start applying to jobs to track your progress</p>
              <Link 
                href="/career-finder/resume"
                className="inline-block px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
              >
                Start Job Search
              </Link>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Job Title
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Company
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Applied Date
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Materials
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-card divide-y divide-gray-200">
                  {applications.map((app) => (
                    <tr key={app.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-foreground">{app.jobTitle}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-foreground">{app.company}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">{formatDate(app.appliedAt)}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <select
                          value={app.status}
                          onChange={(e) => updateStatus(app.id, e.target.value as Application['status'])}
                          className={`px-3 py-1 rounded-full text-xs font-semibold ${getStatusColor(app.status)} border-0 cursor-pointer`}
                        >
                          <option value="applied">Applied</option>
                          <option value="interview">Interview</option>
                          <option value="rejected">Rejected</option>
                          <option value="offer">Offer</option>
                          <option value="accepted">Accepted</option>
                        </select>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        Resume: {app.resumeVariant} | Cover: {app.coverLetterVariant}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          onClick={() => ApplicationTracker.delete(app.id)}
                          className="text-red-600 hover:text-red-900 mr-4"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/career-finder/company/page.tsx">
'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'
import CareerFinderStorage from '@/lib/career-finder-storage'
import CompanyResearchService, { CompanyResearchResult } from '@/lib/company-research-service'

export default function CareerFinderCompanyPage() {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [companyData, setCompanyData] = useState<CompanyResearchResult | null>(null)
  const [researchProgress, setResearchProgress] = useState(0)
  const router = useRouter()

  useEffect(() => {
    CareerFinderStorage.setProgress(4, 7)
    initializeAndResearch()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const initializeAndResearch = async () => {
    try {
      // ✅ Use unified storage
      const selectedJob = CareerFinderStorage.getJob()
      
      if (!selectedJob) {
        setError('No job selected. Please go back and select a job.')
        setLoading(false)
        return
      }

      console.log('[COMPANY] ✅ Loaded job:', selectedJob.title, '@', selectedJob.company)

      // ✅ Use shared company research service
      const result = await CompanyResearchService.research({
        company: selectedJob.company,
        role: selectedJob.title,
        location: selectedJob.location,
        onProgress: setResearchProgress
      })

      setCompanyData(result)
      setLoading(false)
      
    } catch (error: any) {
      console.error('[COMPANY] ❌ Initialization error:', error)
      setError(error.message || 'Failed to initialize company research')
      setLoading(false)
    }
  }

  const handleRetry = () => {
    setError('')
    setLoading(true)
    setResearchProgress(0)
    initializeAndResearch()
  }

  if (loading) {
    return (
      <div className="mobile-container space-y-4">
        <CareerFinderBackButton />
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center space-y-4">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <h2 className="text-xl font-semibold text-foreground">Researching Company...</h2>
            <div className="w-full max-w-md mx-auto">
              <div className="w-full bg-secondary rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300 progress-bar-enhanced" 
                  style={{ width: `${researchProgress}%` }}
                ></div>
              </div>
              <p className="text-sm text-muted-foreground mt-2">{researchProgress}% complete</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="mobile-container space-y-4">
        <CareerFinderBackButton />
        <div className="error-container max-w-2xl mx-auto">
          <h2 className="text-xl font-bold mb-2">Research Error</h2>
          <p className="mb-4">{error}</p>
          <div className="flex gap-4">
            <button 
              onClick={handleRetry}
              className="btn-primary-enhanced"
            >
              Try Again
            </button>
            <button 
              onClick={() => router.back()}
              className="btn-secondary-enhanced"
            >
              Go Back
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="mobile-container space-y-6 pb-8">
      <CareerFinderBackButton />
      
      {companyData && (
        <>
          {/* Company Header */}
          <div className="bg-card rounded-xl shadow-lg border border-border p-6">
            <h1 className="text-3xl font-bold text-foreground mb-2">{companyData.company}</h1>
            <p className="text-lg text-muted-foreground mb-4">{companyData.description}</p>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <p className="text-muted-foreground">Size</p>
                <p className="font-medium text-foreground">{companyData.size || 'Unknown'}</p>
              </div>
              <div>
                <p className="text-muted-foreground">Revenue</p>
                <p className="font-medium text-foreground">{companyData.revenue || 'Unknown'}</p>
              </div>
              <div>
                <p className="text-muted-foreground">Industry</p>
                <p className="font-medium text-foreground">{companyData.industry || 'Unknown'}</p>
              </div>
              <div>
                <p className="text-muted-foreground">Founded</p>
                <p className="font-medium text-foreground">{companyData.founded || 'Unknown'}</p>
              </div>
            </div>
          </div>

          {/* Research Results Grid */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Company Psychology */}
            {companyData.psychology && (
              <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
                <h3 className="text-xl font-bold text-purple-600 mb-4">🧠 Company Psychology</h3>
                <p className="text-foreground leading-relaxed">{companyData.psychology}</p>
              </div>
            )}

            {/* Market Intelligence */}
            {companyData.marketIntelligence && (
              <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
                <h3 className="text-xl font-bold text-blue-600 mb-4">📊 Market Intelligence</h3>
                <div className="text-foreground leading-relaxed space-y-3">
                  {typeof companyData.marketIntelligence === 'string' ? (
                    <p className="whitespace-pre-wrap">{companyData.marketIntelligence}</p>
                  ) : (
                    <>
                      {companyData.marketIntelligence.competitivePosition && (
                        <div>
                          <h4 className="font-semibold text-primary mb-2">Market Position</h4>
                          <p className="text-sm">{companyData.marketIntelligence.competitivePosition}</p>
                        </div>
                      )}
                      {companyData.marketIntelligence.industryTrends && companyData.marketIntelligence.industryTrends.length > 0 && (
                        <div>
                          <h4 className="font-semibold text-primary mb-2">Industry Trends</h4>
                          <ul className="space-y-1">
                            {companyData.marketIntelligence.industryTrends.map((trend: string, idx: number) => (
                              <li key={idx} className="text-sm flex items-start gap-2">
                                <span className="text-blue-500 mt-1">▸</span>
                                <span>{trend}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      {companyData.marketIntelligence.recentNews && companyData.marketIntelligence.recentNews.length > 0 && (
                        <div>
                          <h4 className="font-semibold text-primary mb-2">Recent Developments</h4>
                          <ul className="space-y-1">
                            {companyData.marketIntelligence.recentNews.slice(0, 3).map((news: string, idx: number) => (
                              <li key={idx} className="text-sm flex items-start gap-2">
                                <span className="text-blue-500 mt-1">•</span>
                                <span>{news}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </>
                  )}
                </div>
              </div>
            )}

            {/* Hiring Contacts */}
            <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
              <h3 className="text-xl font-bold text-green-600 mb-4">
                👥 Hiring Contacts ({companyData.hiringContacts.length})
              </h3>
              {companyData.hiringContacts && companyData.hiringContacts.length > 0 ? (
                <div className="space-y-3">
                  {companyData.hiringContacts.map((contact: any, index: number) => (
                    <div key={index} className="p-4 bg-green-500/10 border border-green-500/30 rounded-lg">
                      <p className="font-semibold text-foreground">{contact.name}</p>
                      <p className="text-sm text-foreground/80">{contact.title}</p>
                      {contact.email && (
                        <p className="text-sm text-blue-600 dark:text-blue-400 font-medium mt-1">{contact.email}</p>
                      )}
                      {contact.department && (
                        <p className="text-xs text-muted-foreground mt-1">
                          {contact.department} • Confidence: {Math.round((contact.confidence || 0.5) * 100)}%
                        </p>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-muted-foreground">
                  No hiring contacts found. We&apos;ll help you find them in the next step.
                </p>
              )}
            </div>

            {/* Company Culture */}
            {companyData.culture && companyData.culture.length > 0 && (
              <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
                <h3 className="text-xl font-bold text-yellow-600 mb-4">🏢 Culture Insights</h3>
                <ul className="space-y-2">
                  {companyData.culture.map((item: any, index: number) => (
                    <li key={index} className="flex items-start gap-3">
                      <span className="text-yellow-600 mt-1">•</span>
                      <span className="text-foreground">{item.point || item}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* Recent News */}
            {companyData.recentNews && companyData.recentNews.length > 0 && (
              <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
                <h3 className="text-xl font-bold text-red-600 mb-4">📰 Recent News</h3>
                <div className="space-y-3">
                  {companyData.recentNews.map((news: any, index: number) => (
                    <div key={index} className="border-l-4 border-red-500 pl-3">
                      <a href={news.url} target="_blank" rel="noopener noreferrer" className="font-medium text-foreground hover:text-blue-600">
                        {news.title}
                      </a>
                      <p className="text-xs text-muted-foreground mt-1">{news.date}</p>
                      {news.summary && (
                        <p className="text-sm text-muted-foreground mt-1">{news.summary}</p>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Glassdoor Rating */}
            {companyData.glassdoorRating && companyData.glassdoorRating.overallRating && (
              <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
                <h3 className="text-xl font-bold text-emerald-600 mb-4">⭐ Glassdoor Ratings</h3>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-foreground">Overall Rating</span>
                    <span className="text-2xl font-bold text-emerald-600">{companyData.glassdoorRating.overallRating}/5</span>
                  </div>
                  {companyData.glassdoorRating.ceoApproval && (
                    <div className="flex items-center justify-between">
                      <span className="text-foreground">CEO Approval</span>
                      <span className="font-semibold text-foreground">{companyData.glassdoorRating.ceoApproval}%</span>
                    </div>
                  )}
                  {companyData.glassdoorRating.recommendToFriend && (
                    <div className="flex items-center justify-between">
                      <span className="text-foreground">Recommend to Friend</span>
                      <span className="font-semibold text-foreground">{companyData.glassdoorRating.recommendToFriend}%</span>
                    </div>
                  )}
                  {companyData.glassdoorRating.reviewCount && (
                    <p className="text-xs text-muted-foreground mt-2">Based on {companyData.glassdoorRating.reviewCount} reviews</p>
                  )}
                  {companyData.glassdoorRating.url && (
                    <a href={companyData.glassdoorRating.url} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-600 hover:underline">
                      View on Glassdoor →
                    </a>
                  )}
                </div>
              </div>
            )}

            {/* Stock Profile */}
            {companyData.stockProfile && companyData.stockProfile.isPublic && (
              <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
                <h3 className="text-xl font-bold text-indigo-600 mb-4">📈 Stock Profile</h3>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-foreground">Ticker</span>
                    <span className="font-bold text-indigo-600">{companyData.stockProfile.ticker}</span>
                  </div>
                  {companyData.stockProfile.exchange && (
                    <div className="flex items-center justify-between">
                      <span className="text-foreground">Exchange</span>
                      <span className="font-semibold text-foreground">{companyData.stockProfile.exchange}</span>
                    </div>
                  )}
                  {companyData.stockProfile.currentPrice && (
                    <div className="flex items-center justify-between">
                      <span className="text-foreground">Current Price</span>
                      <span className="font-semibold text-foreground">{companyData.stockProfile.currentPrice}</span>
                    </div>
                  )}
                  {companyData.stockProfile.marketCap && (
                    <div className="flex items-center justify-between">
                      <span className="text-foreground">Market Cap</span>
                      <span className="font-semibold text-foreground">{companyData.stockProfile.marketCap}</span>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Social Media Links */}
            {companyData.socialMedia && Object.values(companyData.socialMedia).some(v => v) && (
              <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
                <h3 className="text-xl font-bold text-pink-600 mb-4">🔗 Social Media</h3>
                <div className="flex flex-wrap gap-3">
                  {companyData.socialMedia.linkedin && (
                    <a href={companyData.socialMedia.linkedin} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                      LinkedIn
                    </a>
                  )}
                  {companyData.socialMedia.twitter && (
                    <a href={companyData.socialMedia.twitter} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-sky-500 text-white rounded-lg hover:bg-sky-600 transition-colors">
                      Twitter
                    </a>
                  )}
                  {companyData.socialMedia.facebook && (
                    <a href={companyData.socialMedia.facebook} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
                      Facebook
                    </a>
                  )}
                  {companyData.socialMedia.instagram && (
                    <a href={companyData.socialMedia.instagram} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-pink-500 text-white rounded-lg hover:bg-pink-600 transition-colors">
                      Instagram
                    </a>
                  )}
                  {companyData.socialMedia.youtube && (
                    <a href={companyData.socialMedia.youtube} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                      YouTube
                    </a>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* Continue Button */}
          <div className="text-center mt-8">
            <button
              onClick={() => router.push('/career-finder/optimizer')}
              className="px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:shadow-lg transition-all duration-200 font-semibold"
            >
              Continue to Resume Optimization →
            </button>
          </div>
        </>
      )}
    </div>
  )
}
</file>

<file path="src/app/career-finder/cover-letter/page.tsx">
'use client'

export const dynamic = 'force-dynamic'

import { useState, useEffect } from 'react'
import { toTitleCase } from '@/lib/text-formatting'
import Link from 'next/link'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'

export default function CareerFinderCoverLetterPage() {
  const [loading, setLoading] = useState(true)
  const [letterA, setLetterA] = useState('')
  const [letterB, setLetterB] = useState('')
  const [selected, setSelected] = useState<'A'|'B'|'none'>('none')
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    (async () => {
      try { localStorage.setItem('cf:progress', JSON.stringify({ step: 6, total: 7 })) } catch {}
      setLoading(true)
      
      try {
        // AUTOPILOT: Check cache first
        const cacheKey = 'cf:coverLetters'
        const cached = localStorage.getItem(cacheKey)
        
        if (cached) {
          console.log('[COVER_LETTER] ✅ Loading from cache')
          const letters = JSON.parse(cached)
          setLetterA(letters.variantA || '')
          setLetterB(letters.variantB || '')
          setLoading(false)
          return
        }
        
        console.log('[COVER_LETTER] 🔄 Generating new cover letters via autopilot...')
        
        // Load resume text
        let resumeText = ''
        try {
          const rl = await fetch('/api/resume/list')
          if (rl.ok) {
            const rj = await rl.json()
            resumeText = (rj?.resumes?.[0]?.extractedText || '').toString().slice(0, 8000)
          }
        } catch {}
        
        // Load selected job
        let selectedJob: { title?: string; company?: string } | null = null
        try { selectedJob = JSON.parse(localStorage.getItem('cf:selectedJob') || 'null') } catch {}
        const jobTitle = selectedJob?.title || 'Role'
        const company = selectedJob?.company || 'Company'
        
        // Load userName from signals and format to Title Case
        let userName = '[Your Name]'
        try {
          const signals = JSON.parse(localStorage.getItem('cf:signals') || '{}')
          const rawName = signals.personalInfo?.name || '[Your Name]'
          // ✅ FIX #3: Convert ALL CAPS names to Title Case
          userName = toTitleCase(rawName)
        } catch {}
        
        // Generate TWO variants using main API with templates
        const [responseA, responseB] = await Promise.all([
          fetch('/api/cover-letter/generate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              raw: true,
              jobTitle,
              companyName: company,
              jobDescription: '',
              resumeText,
              save: false,
              templateId: 'professional' // Variant A: Professional
            })
          }),
          fetch('/api/cover-letter/generate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              raw: true,
              jobTitle,
              companyName: company,
              jobDescription: '',
              resumeText,
              save: false,
              templateId: 'modern' // Variant B: Modern
            })
          })
        ])
        
        if (!responseA.ok || !responseB.ok) {
          throw new Error(`API error: ${responseA.status} / ${responseB.status}`)
        }
        
        const [resultA, resultB] = await Promise.all([
          responseA.json(),
          responseB.json()
        ])
        
        if (resultA.success && resultB.success) {
          const variantA = resultA.coverLetter || ''
          const variantB = resultB.coverLetter || ''
          setLetterA(variantA)
          setLetterB(variantB)
          
          // Cache the result
          localStorage.setItem(cacheKey, JSON.stringify({ variantA, variantB }))
          console.log('[COVER_LETTER] ✅ Cover letters generated and cached')
        } else {
          throw new Error(resultA.error || resultB.error || 'Failed to generate cover letters')
        }
      } catch (err) {
        console.error('[COVER_LETTER] Error:', err)
        setError('Failed to generate cover letters')
      }
      
      setLoading(false)
    })()
  }, [])

  const saveSelection = () => {
    try {
      const chosen = selected === 'A' ? letterA : letterB
      localStorage.setItem('cf:selectedCoverLetter', chosen || '')
    } catch {}
  }

  return (
    <div className="mobile-container space-y-4">
      <CareerFinderBackButton />
      <div className="text-sm text-foreground">Choose one of the generated cover letters.</div>
      {loading && <div className="text-sm">Generating letters…</div>}
      {error && <div className="text-xs text-red-600">{error}</div>}
      {!loading && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          <div className={`border rounded p-3 text-sm ${selected==='A'?'ring-2 ring-blue-500':''}`} onClick={()=>setSelected('A')}>
            <div className="text-xs text-muted-foreground mb-2">Option A</div>
            <div className="whitespace-pre-wrap">{letterA || 'No content'}</div>
          </div>
          <div className={`border rounded p-3 text-sm ${selected==='B'?'ring-2 ring-blue-500':''}`} onClick={()=>setSelected('B')}>
            <div className="text-xs text-muted-foreground mb-2">Option B</div>
            <div className="whitespace-pre-wrap">{letterB || 'No content'}</div>
          </div>
        </div>
      )}
      <div className="flex items-center justify-between">
        <div className="text-xs text-muted-foreground">Selected: {selected}</div>
        <Link className={`inline-block px-4 py-2 border rounded ${selected==='none'?'pointer-events-none opacity-50':''}`} href="/career-finder/outreach" onClick={saveSelection}>Next</Link>
      </div>
    </div>
  )
}
</file>

<file path="src/app/career-finder/interview-prep/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'
import CareerFinderStorage from '@/lib/career-finder-storage'
import { Lightbulb, MessageSquare, Target, Download, Loader2 } from 'lucide-react'

interface Application {
  id: string
  company: string
  jobTitle: string
  location?: string
  status: string
  appliedAt: string
  hasInterviewPrep: boolean
}

interface InterviewPrep {
  questions: string[]
  companyInsights: string
  talkingPoints: string[]
  company: string
  jobTitle: string
}

export default function InterviewPrepPage() {
  const router = useRouter()
  const [applications, setApplications] = useState<Application[]>([])
  const [selectedApp, setSelectedApp] = useState<Application | null>(null)
  const [prep, setPrep] = useState<InterviewPrep | null>(null)
  const [loading, setLoading] = useState(true)
  const [generating, setGenerating] = useState(false)

  useEffect(() => {
    loadApplications()
  }, [])

  const loadApplications = async () => {
    try {
      const response = await fetch('/api/applications/list')
      if (response.ok) {
        const apps = await response.json()
        setApplications(apps)
        console.log('[INTERVIEW_PREP] Loaded', apps.length, 'applications')
      }
    } catch (error) {
      console.error('[INTERVIEW_PREP] Error loading applications:', error)
    } finally {
      setLoading(false)
    }
  }

  const generatePrep = async () => {
    if (!selectedApp) return

    setGenerating(true)
    try {
      // Get resume and company research from storage
      const resume = CareerFinderStorage.getResume()
      const companyResearch = CareerFinderStorage.getCompanyResearch()

      const response = await fetch('/api/interview-prep/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          applicationId: selectedApp.id,
          resumeText: resume?.extractedText,
          companyResearch
        })
      })

      if (response.ok) {
        const data = await response.json()
        setPrep(data.prep)
        console.log('[INTERVIEW_PREP] ✅ Generated prep with', data.prep.questions.length, 'questions')
      } else {
        console.error('[INTERVIEW_PREP] Failed to generate prep')
      }
    } catch (error) {
      console.error('[INTERVIEW_PREP] Error:', error)
    } finally {
      setGenerating(false)
    }
  }

  const downloadPDF = () => {
    // TODO: Implement PDF generation
    console.log('[INTERVIEW_PREP] PDF download requested')
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <Loader2 className="w-8 h-8 animate-spin text-primary" />
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
      {/* Header */}
      <div className="gradient-hero p-8 rounded-b-3xl shadow-2xl mb-8">
        <div className="max-w-4xl mx-auto">
          <div className="mb-4">
            <CareerFinderBackButton />
          </div>
          <h1 className="text-4xl font-bold text-foreground text-center mb-3">🎯 Interview Prep</h1>
          <p className="text-foreground/90 text-center text-lg">
            AI-powered interview preparation for your applications
          </p>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-4">
        {applications.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">📝</div>
            <h3 className="text-2xl font-bold mb-2">No Applications Yet</h3>
            <p className="text-muted-foreground mb-6">
              Apply to jobs first to generate interview prep
            </p>
            <button
              onClick={() => router.push('/career-finder/search')}
              className="btn-primary"
            >
              Find Jobs
            </button>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Left: Application Selection */}
            <div className="lg:col-span-1">
              <div className="gradient-border-card">
                <h3 className="text-xl font-bold mb-4">Your Applications</h3>
                <div className="space-y-3">
                  {applications.map((app) => (
                    <div
                      key={app.id}
                      onClick={() => setSelectedApp(app)}
                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                        selectedApp?.id === app.id
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-border hover:border-blue-300'
                      }`}
                    >
                      <h4 className="font-bold text-foreground">{app.jobTitle}</h4>
                      <p className="text-sm text-muted-foreground">{app.company}</p>
                      <div className="flex items-center gap-2 mt-2">
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          app.status === 'applied' ? 'bg-green-100 text-green-700' :
                          app.status === 'interview_scheduled' ? 'bg-blue-100 text-blue-700' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {app.status.replace('_', ' ')}
                        </span>
                        {app.hasInterviewPrep && (
                          <span className="text-xs text-green-600">✓ Prep Ready</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Right: Interview Prep Content */}
            <div className="lg:col-span-2">
              {!selectedApp ? (
                <div className="gradient-border-card text-center py-12">
                  <Lightbulb className="w-16 h-16 mx-auto text-yellow-500 mb-4" />
                  <h1 className="text-2xl sm:text-3xl font-bold mb-2">Interview Preparation</h1>
                  <p className="text-muted-foreground">
                    Choose an application from the left to generate interview prep
                  </p>
                </div>
              ) : !prep ? (
                <div className="gradient-border-card text-center py-12">
                  <MessageSquare className="w-16 h-16 mx-auto text-blue-500 mb-4" />
                  <h3 className="text-xl font-bold mb-2">Generate Interview Prep</h3>
                  <p className="text-muted-foreground mb-6">
                    AI will create tailored interview questions and insights for<br />
                    <strong>{selectedApp.jobTitle}</strong> at <strong>{selectedApp.company}</strong>
                  </p>
                  <button
                    onClick={generatePrep}
                    disabled={generating}
                    className="btn-primary"
                  >
                    {generating ? (
                      <>
                        <Loader2 className="w-5 h-5 animate-spin mr-2" />
                        Generating...
                      </>
                    ) : (
                      <>
                        <Target className="w-5 h-5 mr-2" />
                        Generate Prep
                      </>
                    )}
                  </button>
                </div>
              ) : (
                <div className="space-y-6">
                  {/* Header */}
                  <div className="gradient-border-card">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h2 className="text-2xl font-bold">{prep.jobTitle}</h2>
                        <p className="text-muted-foreground">{prep.company}</p>
                      </div>
                      <button onClick={downloadPDF} className="btn-secondary">
                        <Download className="w-4 h-4 mr-2" />
                        Download PDF
                      </button>
                    </div>
                  </div>

                  {/* Company Insights */}
                  <div className="gradient-border-card">
                    <h3 className="text-xl font-bold mb-3 flex items-center gap-2">
                      <Lightbulb className="w-5 h-5 text-yellow-500" />
                      Company Insights
                    </h3>
                    <p className="text-foreground whitespace-pre-wrap">{prep.companyInsights}</p>
                  </div>

                  {/* Interview Questions */}
                  <div className="gradient-border-card">
                    <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                      <MessageSquare className="w-5 h-5 text-blue-500" />
                      Interview Questions ({prep.questions.length})
                    </h3>
                    <div className="space-y-4">
                      {prep.questions.map((question, i) => (
                        <div key={i} className="p-4 bg-muted/50 rounded-lg">
                          <div className="flex items-start gap-3">
                            <span className="flex-shrink-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold">
                              {i + 1}
                            </span>
                            <p className="flex-1 text-foreground pt-1">{question}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Talking Points */}
                  <div className="gradient-border-card">
                    <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                      <Target className="w-5 h-5 text-green-500" />
                      Key Talking Points
                    </h3>
                    <ul className="space-y-2">
                      {prep.talkingPoints.map((point, i) => (
                        <li key={i} className="flex items-start gap-2">
                          <span className="text-green-500 mt-1">✓</span>
                          <span className="text-foreground">{point}</span>
                        </li>
                      ))}
                    </ul>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-4">
                    <button onClick={generatePrep} className="btn-secondary flex-1">
                      🔄 Regenerate
                    </button>
                    <button
                      onClick={() => router.push('/career-finder/salary-negotiation')}
                      className="btn-primary flex-1"
                    >
                      Next: Salary Negotiation →
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/app/career-finder/job-analysis/page.tsx">
/**
 * Job Analysis Page
 * Auto-analyzes selected job and compares with user's resume
 */

'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Briefcase, MapPin, DollarSign, Target, CheckCircle2, AlertCircle, FileText, ExternalLink } from 'lucide-react'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'
import CareerFinderStorage from '@/lib/career-finder-storage'
import { normalizeSalary, getSalaryDisplayString } from '@/lib/utils/salary-normalizer'
import { CompanyResearchResult } from '@/lib/company-research-types'

interface JobData {
  id?: string
  title: string
  company: string
  location: string
  salary?: string
  description?: string
  summary?: string
  url?: string
  source?: string
  skills?: string[]
}

interface AnalysisResult {
  matchScore?: number // Optional - undefined when no resume
  matchingSkills: string[]
  missingSkills: string[] // Required from Perplexity
  skillsToHighlight?: string[] // May be present in comprehensive research
  recommendations: string[]
  estimatedFit: 'excellent' | 'good' | 'fair' | 'poor' | string // Allow any string from Perplexity
}

export default function JobAnalysisPage() {
  const router = useRouter()
  const [job, setJob] = useState<JobData | null>(null)
  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null)
  const [companyResearch, setCompanyResearch] = useState<CompanyResearchResult | null>(null)
  const [loadingResearch, setLoadingResearch] = useState(false)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [canProceed, setCanProceed] = useState(false) // ENTERPRISE: Prevent accidental skip
  const [hasRedirected, setHasRedirected] = useState(false) // 🔒 Prevent infinite redirect loop

  useEffect(() => {
    // 🔒 CRITICAL: Only run once on mount, prevent redirect loop
    if (hasRedirected) return
    
    // ✅ FIX #10: Validate job data exists
    const validateJobData = () => {
      const storedJob = localStorage.getItem('cf:selectedJob')
      if (!storedJob) {
        console.error('[JOB_ANALYSIS] ❌ No job data found')
        setError('No job selected. Please select a job from the search page.')
        setLoading(false)
        return false
      }
      
      try {
        const parsed = JSON.parse(storedJob)
        if (!parsed.title || !parsed.company) {
          console.error('[JOB_ANALYSIS] ❌ Invalid job data:', parsed)
          setError('Invalid job data. Please select a job again.')
          setLoading(false)
          return false
        }
        return true
      } catch (e) {
        console.error('[JOB_ANALYSIS] ❌ Failed to parse job data:', e)
        setError('Corrupted job data. Please select a job again.')
        setLoading(false)
        return false
      }
    }
    
    if (!validateJobData()) {
      return
    }
    console.log('🎯 [JOB_ANALYSIS] Page mounted - starting analysis flow')
    loadAndAnalyzeJob()
  }, [])

  const loadAndAnalyzeJob = async () => {
    try {
      // DEBUG: Check what's in localStorage
      const rawJob = localStorage.getItem('cf:selectedJob')
      console.log('🎯 [JOB_ANALYSIS] Raw localStorage check:', rawJob ? `Found (${rawJob.length} chars)` : 'NOT FOUND')
      
      // ✅ CRITICAL FIX: Use unified storage
      const jobData = CareerFinderStorage.getJob()
      
      if (!jobData) {
        console.error('🎯 [JOB_ANALYSIS] ❌ No job found - redirecting to search')
        console.error('🎯 [JOB_ANALYSIS] localStorage keys:', Object.keys(localStorage))
        setHasRedirected(true) // 🔒 Mark as redirected to prevent loop
        setLoading(false)
        setTimeout(() => router.push('/career-finder/search'), 100) // Small delay to ensure state is set
        return
      }

      console.log('🎯 [JOB_ANALYSIS] ✅ Job loaded:', jobData.title, '@', jobData.company)
      setJob(jobData)

      // Auto-analyze immediately
      console.log('🎯 [JOB_ANALYSIS] Starting job analysis...')
      await analyzeJob(jobData)
    } catch (err) {
      console.error('🎯 [JOB_ANALYSIS] ❌ Failed to load job:', err)
      setError('Failed to load job data')
      setLoading(false)
    }
  }

  const analyzeJob = async (jobData: JobData) => {
    // ✅ CRITICAL FIX: Use unified storage for resume
    const resumeData = CareerFinderStorage.getResume()
    const resumeText = resumeData?.extractedText || ''

    try {
      // 🚀 OPTIMIZATION: Check for cached comprehensive research first
      const cachedResearch = CareerFinderStorage.getCompanyResearch()
      
      if (cachedResearch?.jobAnalysis) {
        console.log('🎯 [JOB_ANALYSIS] ✅ Using cached comprehensive research (cost savings!):', {
          matchScore: cachedResearch.jobAnalysis.matchScore,
          matchingSkills: cachedResearch.jobAnalysis.matchingSkills?.length,
          age: Date.now() - (cachedResearch.timestamp || 0)
        })
        
        // Use cached analysis - ensure proper type compatibility
        const typedAnalysis: AnalysisResult = {
          matchScore: cachedResearch.jobAnalysis.matchScore,
          matchingSkills: cachedResearch.jobAnalysis.matchingSkills || [],
          missingSkills: cachedResearch.jobAnalysis.missingSkills || [],
          skillsToHighlight: cachedResearch.jobAnalysis.skillsToHighlight,
          recommendations: cachedResearch.jobAnalysis.recommendations || [],
          estimatedFit: cachedResearch.jobAnalysis.estimatedFit || 'good'
        }
        
        setAnalysis(typedAnalysis)
        CareerFinderStorage.setJobAnalysis(typedAnalysis)
        
        // Also set company research
        setCompanyResearch(cachedResearch)
        setLoadingResearch(false)
        
        console.log('🎯 [JOB_ANALYSIS] ✅ All data loaded from cache - NO API CALLS NEEDED!')
      } else {
        // Fallback to individual API call if cache miss
        console.log('🎯 [JOB_ANALYSIS] ⚠️ No cached research, calling individual API...')
        
        // CRITICAL FIX: Send data in format API expects
        const response = await fetch('/api/jobs/analyze', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            jobTitle: jobData.title,
            company: jobData.company,
            jobDescription: jobData.description || jobData.summary || '',
            resumeText: resumeText || '',
            skills: Array.isArray(jobData.skills) ? jobData.skills : []
          })
        })

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}))
          throw new Error(errorData.error || 'Analysis failed')
        }

        const result = await response.json()
        console.log('🎯 [JOB_ANALYSIS] Received analysis:', { hasMatchScore: !!result.matchScore, matchingSkills: result.matchingSkills?.length, recommendations: result.recommendations?.length })
        // CRITICAL FIX: API returns data directly, not nested under "analysis"
        setAnalysis(result)
        
        // ✅ CRITICAL FIX: Store analysis using unified storage
        CareerFinderStorage.setJobAnalysis(result)
      }
      
      if (!resumeData) {
        console.log('📋 Browsing job without resume - match score disabled')
      }
    } catch (err) {
      console.error('🎯 [JOB_ANALYSIS] ❌ Analysis failed:', err)
      // Provide fallback analysis (without match score if no resume)
      setAnalysis({
        matchScore: resumeData ? 75 : undefined,
        matchingSkills: resumeData ? (jobData.skills?.slice(0, 5) || ['JavaScript', 'React', 'Node.js']) : [],
        missingSkills: resumeData ? ['Docker', 'Kubernetes'] : [],
        recommendations: resumeData ? [
          'Highlight your experience with similar technologies',
          'Emphasize transferable skills',
          'Show enthusiasm for learning new tools'
        ] : [],
        estimatedFit: 'good'
      })
    } finally {
      console.log('🎯 [JOB_ANALYSIS] Setting loading to FALSE')
      setLoading(false)
      setCanProceed(true)
      
      // ENTERPRISE ENHANCEMENT: Auto-fetch company research in parallel
      if (jobData.company) {
        fetchCompanyResearch(jobData.company, jobData.title, jobData.location)
      }
      
      console.log('🎯 [JOB_ANALYSIS] Analysis complete - user can now proceed')
    }
  }

  const fetchCompanyResearch = async (companyName: string, jobTitle: string, location: string) => {
    // 🚀 OPTIMIZATION: Check if we already have cached comprehensive research
    const cachedResearch = CareerFinderStorage.getCompanyResearch()
    
    if (cachedResearch && cachedResearch.timestamp) {
      const age = Date.now() - cachedResearch.timestamp
      const FIVE_MINUTES = 5 * 60 * 1000
      
      if (age < FIVE_MINUTES) {
        console.log('[COMPANY_RESEARCH] ✅ Using cached data (age:', Math.round(age / 1000), 'seconds) - NO API CALL!')
        setCompanyResearch(cachedResearch)
        setLoadingResearch(false)
        return
      } else {
        console.log('[COMPANY_RESEARCH] ⚠️ Cache expired, refetching...')
      }
    }
    
    setLoadingResearch(true)
    try {
      console.log('[COMPANY_RESEARCH] Fetching for:', companyName)
      const response = await fetch('/api/v2/company/deep-research', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          companyName,
          position: jobTitle,
          location
        })
      })

      if (!response.ok) {
        console.warn('[COMPANY_RESEARCH] API returned:', response.status)
        return
      }

      const data = await response.json()
      console.log('[COMPANY_RESEARCH] Received data:', data)
      
      if (data.success) {
        // CRITICAL FIX: Ensure hiringContacts is always an array (never undefined)
        const contacts = data.contacts?.data || data.hiringContacts || data.contacts || []
        const safeContacts = Array.isArray(contacts) ? contacts : []
        
        const researchData: Partial<CompanyResearchResult> = {
          company: companyName,
          description: data.company?.description || '',
          aiRiskAnalysis: data.aiRiskAnalysis,
          marketIntelligence: data.marketIntelligence,
          hiringContacts: safeContacts,
          salaryIntelligence: data.salaryIntelligence,
          financials: [],
          culture: [],
          salaries: [],
          contacts: [],
          sources: [],
          confidence: 0.8,
          recentNews: [],
          reviews: []
        }
        
        setCompanyResearch(researchData as CompanyResearchResult)
        
        // ✅ CRITICAL FIX: Store company research using unified storage
        CareerFinderStorage.setCompanyResearch(researchData as CompanyResearchResult)
      }
    } catch (err) {
      console.error('[COMPANY_RESEARCH] Error:', err)
    } finally {
      setLoadingResearch(false)
    }
  }

  const handleResearchCompany = () => {
    if (!job) return
    
    // ✅ Use unified storage - already stored by loadAndAnalyzeJob
    router.push('/career-finder/company')
  }

  /**
   * Extract clean domain from company website URL
   * CRITICAL for email inference and contact discovery
   * 
   * Used for:
   * - Email pattern inference (firstname@company.com)
   * - Contact discovery when LinkedIn fails
   * - Company research and verification
   * - Validating company legitimacy
   * 
   * @example
   * extractWebsite('https://www.shopify.com/careers') → 'shopify.com'
   * extractWebsite('http://google.com/jobs') → 'google.com'
   */
  const extractWebsite = (url: string): string => {
    try {
      const urlObj = new URL(url.startsWith('http') ? url : `https://${url}`)
      return urlObj.hostname.replace(/^www\./, '')
    } catch {
      // Fallback to regex if URL parsing fails
      const match = url.match(/^(?:https?:\/\/)?(?:www\.)?([^\/]+)/)
      return match ? match[1] : url
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto px-6 py-8">
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Analyzing job match...</p>
          </div>
        </div>
      </div>
    )
  }

  if (error || !job) {
    // 🔒 CRITICAL: Show error screen without redirecting (prevents loop)
    return (
      <div className="container mx-auto px-6 py-8">
        <CareerFinderBackButton />
        <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-6 text-center max-w-md mx-auto">
          <AlertCircle className="w-12 h-12 text-destructive mx-auto mb-4" />
          <h2 className="text-xl font-bold text-foreground mb-2">Job Not Found</h2>
          <p className="text-muted-foreground mb-6">
            {error || 'The job you selected couldn\'t be loaded. Please select a job from the search results.'}
          </p>
          <button
            onClick={() => {
              // Clear any cached data that might be stale
              CareerFinderStorage.clearJob()
              router.push('/career-finder/search')
            }}
            className="px-6 py-2 bg-primary text-primary-foreground rounded-lg hover:opacity-90 transition-opacity"
          >
            Back to Job Search
          </button>
        </div>
      </div>
    )
  }

  const fitColor = {
    excellent: 'text-green-500',
    good: 'text-blue-500',
    fair: 'text-yellow-500',
    poor: 'text-red-500'
  }[analysis?.estimatedFit || 'fair']

  return (
    <div className="container mx-auto px-6 py-8 max-w-4xl">
      <CareerFinderBackButton label="Back to Search" />

      {/* Job Header */}
      <div className="bg-card border border-border rounded-xl p-6 mb-6">
        <div className="flex items-start justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold text-foreground mb-2">{job.title}</h1>
            <p className="text-xl text-muted-foreground">{job.company}</p>
          </div>
          {analysis && (
            <div className="text-right">
              <div className="text-4xl font-bold text-primary">{analysis.matchScore}%</div>
              <div className={`text-sm font-medium ${fitColor}`}>
                {analysis.estimatedFit.toUpperCase()} FIT
              </div>
            </div>
          )}
        </div>

        <div className="flex flex-wrap gap-4 text-sm text-muted-foreground">
          <div className="flex items-center gap-2">
            <MapPin className="w-4 h-4" />
            <span>{job.location}</span>
          </div>
          {job.salary && (
            <div className="flex items-center gap-2">
              <DollarSign className="w-4 h-4" />
              <span>{getSalaryDisplayString(normalizeSalary(job.salary))}</span>
            </div>
          )}
          {job.source && (
            <div className="flex items-center gap-2">
              <Briefcase className="w-4 h-4" />
              <span>{job.source}</span>
            </div>
          )}
        </div>
      </div>

      {/* Full Job Description - Like Indeed */}
      {(job.description || job.summary) && (
        <div className="bg-card border border-border rounded-xl p-6 mb-6">
          <div className="flex items-center gap-2 mb-4">
            <FileText className="w-6 h-6 text-primary" />
            <h2 className="text-xl font-bold text-foreground">Job Description</h2>
          </div>
          <div className="prose prose-sm max-w-none text-foreground">
            <div className="whitespace-pre-wrap leading-relaxed">
              {job.description || job.summary}
            </div>
          </div>
          {job.url && (
            <div className="mt-4 pt-4 border-t border-border">
              <a
                href={job.url}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-2 text-primary hover:underline"
              >
                <ExternalLink className="w-4 h-4" />
                View Original Job Posting
              </a>
            </div>
          )}
        </div>
      )}

      {/* No Resume Message */}
      {!analysis && !loading && (
        <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-xl p-6 mb-6">
          <div className="flex items-start gap-3">
            <svg className="w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div>
              <h4 className="font-semibold text-yellow-800 dark:text-yellow-200">Skills Analysis Unavailable</h4>
              <p className="text-sm text-yellow-700 dark:text-yellow-300 mt-1">
                Upload a resume to see detailed skills matching and personalized recommendations for this job.
              </p>
            </div>
          </div>
        </div>
      )}
      
      {/* Analysis Results */}
      {analysis && (
        <div className="space-y-6">
          {/* Matching Skills */}
          <div className="bg-card border border-border rounded-xl p-6">
            <div className="flex items-center gap-2 mb-4">
              <CheckCircle2 className="w-6 h-6 text-green-500" />
              <h2 className="text-xl font-bold text-foreground">Matching Skills</h2>
            </div>
            <div className="flex flex-wrap gap-2">
              {analysis.matchingSkills.map((skill, index) => (
                <span
                  key={index}
                  className="px-3 py-1 bg-green-500/10 text-green-500 rounded-full text-sm font-medium"
                >
                  ✓ {skill}
                </span>
              ))}
            </div>
          </div>

          {/* Missing Skills */}
          {analysis.missingSkills.length > 0 && (
            <div className="bg-card border border-border rounded-xl p-6">
              <div className="flex items-center gap-2 mb-4">
                <Target className="w-6 h-6 text-yellow-500" />
                <h2 className="text-xl font-bold text-foreground">Skills to Highlight</h2>
              </div>
              <div className="flex flex-wrap gap-2">
                {analysis.missingSkills.map((skill, index) => (
                  <span
                    key={index}
                    className="px-3 py-1 bg-yellow-500/10 text-yellow-500 rounded-full text-sm font-medium"
                  >
                    → {skill}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Recommendations */}
          <div className="bg-card border border-border rounded-xl p-6">
            <h2 className="text-xl font-bold text-foreground mb-4">Recommendations</h2>
            <ul className="space-y-2">
              {analysis.recommendations.map((rec, index) => (
                <li key={index} className="flex items-start gap-2 text-foreground">
                  <span className="text-primary mt-1">•</span>
                  <span>{rec}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}

      {/* ENTERPRISE ENHANCEMENT: Rich Company Research Display */}
      {loadingResearch && (
        <div className="mt-6 bg-card border border-border rounded-xl p-6 animate-pulse">
          <div className="flex items-center gap-3">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            <p className="text-muted-foreground">Loading company intelligence...</p>
          </div>
        </div>
      )}

      {companyResearch && !loadingResearch && (
        <div className="mt-6 space-y-6">
          <h2 className="text-2xl font-bold text-foreground">🏢 Company Intelligence</h2>

          {/* AI Risk Analysis */}
          {companyResearch.aiRiskAnalysis && (
            <div className="bg-gradient-to-br from-purple-500/10 to-blue-500/10 border border-purple-500/20 rounded-xl p-6">
              <h3 className="text-lg font-bold text-foreground mb-3">🤖 AI & Automation Risk</h3>
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-sm text-muted-foreground">Automation Probability</p>
                  <p className="text-2xl font-bold text-foreground">{companyResearch.aiRiskAnalysis.automationProbability}</p>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Role Risk</p>
                  <p className={`text-lg font-bold ${
                    companyResearch.aiRiskAnalysis.roleRisk?.toLowerCase().includes('low') ? 'text-green-500' :
                    companyResearch.aiRiskAnalysis.roleRisk?.toLowerCase().includes('medium') ? 'text-yellow-500' : 'text-red-500'
                  }`}>{companyResearch.aiRiskAnalysis.roleRisk}</p>
                </div>
              </div>
              <p className="text-sm text-foreground"><strong>Future Outlook:</strong> {companyResearch.aiRiskAnalysis.futureOutlook}</p>
              <p className="text-sm text-foreground mt-2"><strong>AI Adoption:</strong> {companyResearch.aiRiskAnalysis.companyAIAdoption}</p>
            </div>
          )}

          {/* Market Intelligence */}
          {companyResearch.marketIntelligence && (
            <div className="bg-card border border-border rounded-xl p-6">
              <h3 className="text-lg font-bold text-foreground mb-3">📊 Market Intelligence</h3>
              {typeof companyResearch.marketIntelligence === 'string' ? (
                <p className="text-sm text-foreground leading-relaxed">{companyResearch.marketIntelligence}</p>
              ) : (
                <>
                  {companyResearch.marketIntelligence.competitivePosition && (
                    <p className="text-sm text-foreground mb-3">{companyResearch.marketIntelligence.competitivePosition}</p>
                  )}
                  {companyResearch.marketIntelligence.industryTrends && Array.isArray(companyResearch.marketIntelligence.industryTrends) && companyResearch.marketIntelligence.industryTrends.length > 0 && (
                    <div className="mb-3">
                      <p className="text-sm font-semibold text-muted-foreground mb-2">Industry Trends:</p>
                      <ul className="space-y-1">
                        {companyResearch.marketIntelligence.industryTrends.map((trend, idx) => (
                          <li key={idx} className="text-sm text-foreground flex items-start gap-2">
                            <span className="text-primary mt-1">▸</span>
                            <span>{trend}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {companyResearch.marketIntelligence.recentNews && Array.isArray(companyResearch.marketIntelligence.recentNews) && companyResearch.marketIntelligence.recentNews.length > 0 && (
                    <div>
                      <p className="text-sm font-semibold text-muted-foreground mb-2">Recent News:</p>
                      <ul className="space-y-1">
                        {companyResearch.marketIntelligence.recentNews.slice(0, 3).map((news, idx) => (
                          <li key={idx} className="text-sm text-foreground flex items-start gap-2">
                            <span className="text-primary mt-1">•</span>
                            <span>{news}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </>
              )}
            </div>
          )}

          {/* Hiring Contacts */}
          {companyResearch.hiringContacts && companyResearch.hiringContacts.length > 0 && (
            <div className="bg-gradient-to-br from-green-500/10 to-teal-500/10 border border-green-500/20 rounded-xl p-6">
              <h3 className="text-lg font-bold text-foreground mb-3">👥 Hiring Contacts ({companyResearch.hiringContacts.length})</h3>
              <div className="space-y-3">
                {companyResearch.hiringContacts.slice(0, 5).map((contact, idx) => (
                  <div key={idx} className="flex items-start gap-3 bg-card/50 rounded-lg p-3">
                    <div className="w-10 h-10 rounded-full bg-primary flex items-center justify-center text-white font-bold">
                      {contact.name.charAt(0)}
                    </div>
                    <div className="flex-1">
                      <p className="font-semibold text-foreground">{contact.name}</p>
                      <p className="text-sm text-muted-foreground">{contact.title}</p>
                      {contact.email && (
                        <a href={`mailto:${contact.email}`} className="text-xs text-primary hover:underline">
                          {contact.email}
                        </a>
                      )}
                      {contact.linkedinUrl && (
                        <a href={contact.linkedinUrl} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-500 hover:underline ml-2">
                          LinkedIn
                        </a>
                      )}
                    </div>
                    <div className="text-xs text-muted-foreground">
                      {contact.confidence ? Math.round(contact.confidence * 100) : 0}% match
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Salary Intelligence */}
          {companyResearch.salaryIntelligence && (
            <div className="bg-card border border-border rounded-xl p-6">
              <h3 className="text-lg font-bold text-foreground mb-3">💰 Salary Intelligence</h3>
              <p className="text-sm text-foreground mb-2"><strong>Expected Range:</strong> {companyResearch.salaryIntelligence.salaryRange}</p>
              {companyResearch.salaryIntelligence.benefits && (
                <p className="text-sm text-foreground"><strong>Benefits:</strong> {companyResearch.salaryIntelligence.benefits}</p>
              )}
              {companyResearch.salaryIntelligence.notes && (
                <p className="text-sm text-muted-foreground mt-2">{companyResearch.salaryIntelligence.notes}</p>
              )}
            </div>
          )}

          {/* Company Culture */}
          {companyResearch.culture && companyResearch.culture.length > 0 && (
            <div className="bg-card border border-border rounded-xl p-6">
              <h3 className="text-lg font-bold text-foreground mb-3">🌟 Company Culture</h3>
              <div className="space-y-2">
                {companyResearch.culture.map((point, idx) => (
                  <div key={idx} className="flex items-start gap-2">
                    <span className="text-primary mt-1">•</span>
                    <p className="text-sm text-foreground">{point.point}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* 📰 Recent News with Clickable Links */}
      {companyResearch?.news && companyResearch.news.length > 0 && (
        <div className="mt-6 bg-card border border-border rounded-xl p-6">
          <h3 className="text-lg font-bold text-foreground mb-4 flex items-center gap-2">
            📰 Recent News
            <span className="text-sm font-normal text-muted-foreground">({companyResearch.news.length} articles)</span>
          </h3>
          <div className="space-y-4">
            {companyResearch.news.map((article, idx) => (
              <div key={idx} className="pb-4 border-b border-border last:border-0 last:pb-0">
                <a 
                  href={article.url} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="group"
                >
                  <div className="flex items-start gap-3">
                    <div className="flex-1">
                      <h4 className="font-semibold text-foreground group-hover:text-primary transition-colors flex items-center gap-2">
                        {article.title}
                        <ExternalLink className="w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity" />
                      </h4>
                      {article.summary && (
                        <p className="text-sm text-muted-foreground mt-1 line-clamp-2">{article.summary}</p>
                      )}
                      <div className="flex items-center gap-3 mt-2 text-xs text-muted-foreground">
                        {article.source && <span className="font-medium">{article.source}</span>}
                        {article.date && <span>{article.date}</span>}
                        {article.impact && (
                          <span className={`px-2 py-0.5 rounded-full ${
                            article.impact === 'positive' ? 'bg-green-500/20 text-green-600' :
                            article.impact === 'negative' ? 'bg-red-500/20 text-red-600' :
                            'bg-gray-500/20 text-gray-600'
                          }`}>
                            {article.impact}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                </a>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* ⭐ Employee Reviews with Clickable Links */}
      {companyResearch?.reviews && companyResearch.reviews.length > 0 && (
        <div className="mt-6 bg-card border border-border rounded-xl p-6">
          <h3 className="text-lg font-bold text-foreground mb-4 flex items-center gap-2">
            ⭐ Employee Reviews
            <span className="text-sm font-normal text-muted-foreground">({companyResearch.reviews.length} platforms)</span>
          </h3>
          <div className="space-y-4">
            {companyResearch.reviews.map((review, idx) => (
              <div key={idx} className="pb-4 border-b border-border last:border-0 last:pb-0">
                <a 
                  href={review.url} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="group"
                >
                  <div className="flex items-start justify-between gap-3 mb-2">
                    <h4 className="font-semibold text-foreground group-hover:text-primary transition-colors flex items-center gap-2">
                      {review.platform}
                      <ExternalLink className="w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity" />
                    </h4>
                    {review.rating && (
                      <div className="flex items-center gap-1">
                        <span className="text-lg font-bold text-foreground">{review.rating}</span>
                        <span className="text-yellow-500">★</span>
                      </div>
                    )}
                  </div>
                  {review.summary && (
                    <p className="text-sm text-muted-foreground mb-3">{review.summary}</p>
                  )}
                  <div className="grid grid-cols-2 gap-4">
                    {review.pros && review.pros.length > 0 && (
                      <div>
                        <p className="text-xs font-semibold text-green-600 mb-1">👍 Pros</p>
                        <ul className="space-y-1">
                          {review.pros.map((pro, i) => (
                            <li key={i} className="text-xs text-foreground flex items-start gap-1">
                              <span className="text-green-500 mt-0.5">•</span>
                              <span>{pro}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                    {review.cons && review.cons.length > 0 && (
                      <div>
                        <p className="text-xs font-semibold text-red-600 mb-1">👎 Cons</p>
                        <ul className="space-y-1">
                          {review.cons.map((con, i) => (
                            <li key={i} className="text-xs text-foreground flex items-start gap-1">
                              <span className="text-red-500 mt-0.5">•</span>
                              <span>{con}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </a>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex gap-4 mt-8">
        <button
          onClick={handleResearchCompany}
          disabled={!canProceed}
          className={`flex-1 px-6 py-3 rounded-lg font-medium transition-all ${
            canProceed
              ? 'bg-primary text-primary-foreground hover:opacity-90 cursor-pointer'
              : 'bg-muted text-muted-foreground cursor-not-allowed opacity-60'
          }`}
          title={!canProceed ? 'Please review the analysis before proceeding' : ''}
        >
          {canProceed ? 'Research Company →' : 'Analyzing... Please wait'}
        </button>
      </div>
      
      {/* User guidance */}
      {!canProceed && analysis && (
        <div className="mt-4 text-center text-sm text-muted-foreground animate-pulse">
          ✨ Review your match analysis above before proceeding
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/app/career-finder/job/page.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Button } from '@/components/ui/button'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'

export default function CareerFinderJobPage() {
  const [analysis, setAnalysis] = useState<any | null>(null)
  const [loading, setLoading] = useState(true)
  const [compare, setCompare] = useState<{ score:number; matched:string[]; missing:string[]; suggestions?:string[] }|null>(null)

  useEffect(() => {
    (async () => {
      setLoading(true)
      try { localStorage.setItem('cf:progress', JSON.stringify({ step: 3, total: 7 })) } catch {}
      try {
        let selected: any = null
        try { selected = JSON.parse(localStorage.getItem('cf:selectedJob') || 'null') } catch {}
        const jd: string = selected?.description || ''
        const jt: string = selected?.title || ''
        const cn: string = selected?.company || ''
        // If description is missing, request server to import by URL best-effort
        const payload = jd && jd.length >= 50 ? { jobDescription: jd, jobTitle: jt, companyName: cn } : { jobDescription: '', jobTitle: jt, companyName: cn, jobUrl: selected?.url }
        const resp = await fetch('/api/job/analyze', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) })
        const j = await resp.json().catch(()=>({}))
        if (resp.ok) {
          setAnalysis(j)
          // Attempt resume comparison automatically
          try {
            let resumeId: string | undefined
            let resumeText: string | undefined
            const rl = await fetch('/api/resume/list')
            if (rl.ok) { const rj = await rl.json(); resumeId = rj.resumes?.[0]?._id; resumeText = rj.resumes?.[0]?.extractedText }
            const cmp = await fetch('/api/job/compare', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobAnalysis: j, resumeId, resumeText }) })
            if (cmp.ok) {
              const cj = await cmp.json(); setCompare({ score: cj.score, matched: cj.matchedKeywords||[], missing: cj.missingKeywords||[], suggestions: cj.suggestions||[] })
            }
          } catch {}
        }
      } catch {}
      setLoading(false)
    })()
  }, [])

  return (
    <div className="mobile-container space-y-4">
      <CareerFinderBackButton />
      <div className="text-sm text-foreground">Job analysis auto-runs when you arrive on this page.</div>
      {loading && <div className="text-sm">Analyzing job…</div>}
      {!loading && analysis && (
        <div className="text-sm grid grid-cols-1 md:grid-cols-2 gap-3">
          <div className="border rounded p-3">
            <div className="font-medium mb-1">Job Details</div>
            <div><span className="text-muted-foreground">Title:</span> {analysis?.analysis?.jobTitle || '-'}</div>
            <div><span className="text-muted-foreground">Company:</span> {analysis?.analysis?.companyName || '-'}</div>
            {analysis?.analysis?.salaryRange && <div><span className="text-muted-foreground">Salary Range:</span> {analysis.analysis.salaryRange}</div>}
          </div>
          <div className="border rounded p-3">
            <div className="font-medium mb-1">Keywords Found</div>
            <div className="text-xs text-foreground break-words">{(analysis?.keywords || []).join(', ')}</div>
          </div>
          <div className="border rounded p-3 md:col-span-2">
            <div className="font-medium mb-1">Key Requirements</div>
            <ul className="list-disc ml-5 space-y-1">
              {(analysis?.analysis?.keyRequirements || []).map((k: string, i: number)=>(<li key={i}>{k}</li>))}
            </ul>
          </div>
          <div className="border rounded p-3 md:col-span-2">
            <div className="font-medium mb-1">Responsibilities</div>
            <ul className="list-disc ml-5 space-y-1">
              {(analysis?.analysis?.responsibilities || []).map((k: string, i: number)=>(<li key={i}>{k}</li>))}
            </ul>
          </div>
          {compare && (
            <div className="border rounded p-3 md:col-span-2">
              <div className="font-medium mb-1">Resume Match</div>
              <div className="flex items-center justify-between text-xs"><span>Score</span><span>{compare.score}%</span></div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                <div>
                  <div className="text-xs font-semibold mb-1">Matched</div>
                  <div className="flex flex-wrap gap-1">{compare.matched.slice(0,20).map((kw,i)=>(<span key={i} className="px-2 py-1 border rounded text-[11px]">{kw}</span>))}</div>
                </div>
                <div>
                  <div className="text-xs font-semibold mb-1">Missing</div>
                  <div className="flex flex-wrap gap-1">{compare.missing.slice(0,20).map((kw,i)=>(<span key={i} className="px-2 py-1 border rounded text-[11px] opacity-70">{kw}</span>))}</div>
                </div>
              </div>
              {compare.suggestions && compare.suggestions.length>0 && (
                <div className="mt-2">
                  <div className="text-xs font-semibold mb-1">What to improve</div>
                  <ul className="list-disc ml-5 text-xs">{compare.suggestions.slice(0,4).map((s,i)=>(<li key={i}>{s}</li>))}</ul>
                </div>
              )}
            </div>
          )}
        </div>
      )}
      <div className="text-right">
        {analysis?.analysis?.jobTitle ? (
          <a className="inline-block px-4 py-2 border rounded" href="/career-finder/company">Next</a>
        ) : (
          <button className="inline-block px-4 py-2 border rounded opacity-60" disabled>Awaiting job description</button>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/app/career-finder/layout.tsx">
import { ReactNode } from 'react'
import { CareerFinderProgress } from '@/components/career-finder/progress'

export default function CareerFinderLayout({ children }: { children: ReactNode }) {
  return (
    <div className="mx-auto max-w-5xl px-4 py-6">
      <h1 className="text-2xl font-bold mb-2">Career Finder</h1>
      <CareerFinderProgress />
      {children}
    </div>
  )
}
</file>

<file path="src/app/career-finder/outreach/page.tsx">
'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'
import CareerFinderStorage from '@/lib/career-finder-storage'
import { Mail, Phone, Linkedin, ExternalLink, Building2, User, Briefcase, Copy, Check } from 'lucide-react'

interface HiringContact {
  name: string
  title: string
  department?: string
  linkedinUrl?: string
  email?: string
  phone?: string
  authority?: string
  contactMethod?: string
}

interface EnhancedResearch {
  companyIntelligence: {
    name: string
    industry?: string
    website?: string
  }
  hiringContactIntelligence: {
    officialChannels?: {
      careersPage?: string
      jobsEmail?: string
      hrEmail?: string
      phone?: string
    }
    keyContacts?: HiringContact[]
    emailFormat?: string
    socialMedia?: {
      linkedin?: string
      twitter?: string
      facebook?: string
    }
  }
  strategicRecommendations?: {
    contactStrategy?: string
    applicationStrategy?: string
  }
}

export default function CareerFinderOutreachPage() {
  const [loading, setLoading] = useState(true)
  const [sending, setSending] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [jobData, setJobData] = useState<any>(null)
  const [companyData, setCompanyData] = useState<EnhancedResearch | null>(null)
  const [selectedContact, setSelectedContact] = useState<HiringContact | null>(null)
  const [emailSubject, setEmailSubject] = useState('')
  const [emailBody, setEmailBody] = useState('')
  const [copiedField, setCopiedField] = useState<string | null>(null)
  const router = useRouter()

  useEffect(() => {
    CareerFinderStorage.setProgress(7, 7)
    loadDataAndGenerateEmail()
  }, [])

  const handleCompleteApplication = async () => {
    if (!jobData) return

    try {
      // Create application record
      const response = await fetch('/api/applications/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          jobId: jobData.id,
          company: jobData.company,
          jobTitle: jobData.title,
          location: jobData.location,
          salary: jobData.salary,
          recipient: selectedContact?.email || currentEmail
        })
      })

      if (response.ok) {
        console.log('[OUTREACH] ✅ Application created')
        // Navigate to interview prep
        router.push('/career-finder/interview-prep')
      } else {
        console.error('[OUTREACH] ❌ Failed to create application')
        // Still navigate even if creation fails
        router.push('/career-finder/interview-prep')
      }
    } catch (error) {
      console.error('[OUTREACH] Error creating application:', error)
      // Navigate anyway
      router.push('/career-finder/interview-prep')
    }
  }

  const loadDataAndGenerateEmail = async () => {
    try {
      // Load job data
      const job = CareerFinderStorage.getJob()
      if (!job) {
        setError('No job selected')
        setLoading(false)
        return
      }
      setJobData(job)

      // Load company research data (includes hiring contacts)
      const companyResearch = CareerFinderStorage.getCompanyResearch()
      if (companyResearch) {
        console.log('[OUTREACH] ✅ Loaded company research with contacts:', companyResearch.hiringContacts?.length || 0)
        setCompanyData(companyResearch as any)
      }

      // Load resume
      const resume = CareerFinderStorage.getResume()
      const resumeText = resume?.extractedText || ''

      // Load job analysis for match insights
      const analysis = CareerFinderStorage.getJobAnalysis()

      // AUTOPILOT: Check cache first
      const cacheKey = 'cf:emailOutreach'
      const cached = localStorage.getItem(cacheKey)
      
      if (cached) {
        console.log('[OUTREACH] ✅ Loading from cache')
        const outreach = JSON.parse(cached)
        setEmailSubject(outreach.subjects?.[0] || `Application for ${job.title}`)
        setEmailBody(outreach.templates?.[0]?.body || '')
        setLoading(false)
        return
      }

      console.log('[OUTREACH] 🔄 Generating email outreach via autopilot...')

      // Extract resume highlights
      const skills = analysis?.matchingSkills || []
      const resumeHighlights = skills.slice(0, 3)

      // Call new autopilot endpoint
      const response = await fetch('/api/contacts/email-outreach', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          hiringContact: {
            name: 'Hiring Manager',
            title: 'Hiring Manager'
          },
          jobTitle: job.title,
          company: job.company,
          resumeHighlights
        })
      })

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`)
      }

      const result = await response.json()

      if (result.success && result.data) {
        const { subjects, templates } = result.data
        setEmailSubject(subjects?.[0] || `Application for ${job.title}`)
        setEmailBody(templates?.[0]?.body || '')
        
        // Cache the result
        localStorage.setItem(cacheKey, JSON.stringify(result.data))
        console.log('[OUTREACH] ✅ Email outreach generated and cached')
      } else {
        throw new Error(result.error || 'Failed to generate email outreach')
      }

      setLoading(false)
    } catch (err) {
      console.error('[OUTREACH] Error:', err)
      setError('Failed to load outreach data')
      setLoading(false)
    }
  }

  const selectContact = (contact: HiringContact, job: any, analysis: any, resumeText: string) => {
    setSelectedContact(contact)
    
    // Generate personalized email
    const subject = `Application for ${job.title} - ${extractName(resumeText) || 'Experienced Professional'}`
    setEmailSubject(subject)

    const matchScore = analysis?.matchScore || 0
    const skills = analysis?.matchingSkills || []
    const name = extractName(resumeText) || ''

    const body = `Dear ${contact.name || 'Hiring Manager'},

I am writing to express my strong interest in the ${job.title} position at ${job.company}. ${contact.title ? `As ${contact.title}, I` : 'I'} believe you would be the right person to discuss how my qualifications align with your team's needs.

KEY QUALIFICATIONS:
${skills.slice(0, 5).map((skill: string) => `• ${skill}`).join('\n')}

${matchScore >= 80 ? `My background shows a ${matchScore}% alignment with your requirements, particularly in ${skills[0] || 'the core competencies'} needed for this role.` : ''}

I have attached my resume and cover letter for your review. I would welcome the opportunity to discuss how I can contribute to ${job.company}'s success.

Thank you for your consideration. I look forward to speaking with you.

Best regards,
${name}

---
Resume and cover letter attached
${contact.linkedinUrl ? `LinkedIn: Let's connect at ${contact.linkedinUrl}` : ''}`

    setEmailBody(body)
  }

  const generateEmailForOfficial = (email: string, job: any, analysis: any, resumeText: string) => {
    const subject = `Application for ${job.title} Position`
    setEmailSubject(subject)

    const matchScore = analysis?.matchScore || 0
    const skills = analysis?.matchingSkills || []
    const name = extractName(resumeText) || ''

    const body = `Dear Hiring Team,

I am writing to apply for the ${job.title} position at ${job.company}.

KEY QUALIFICATIONS:
${skills.slice(0, 5).map((skill: string) => `• ${skill}`).join('\n')}

${matchScore >= 80 ? `My professional background demonstrates a strong ${matchScore}% alignment with the role requirements.` : ''}

Please find my resume and cover letter attached for your consideration.

Thank you for your time and consideration.

Best regards,
${name}`

    setEmailBody(body)
  }

  const extractName = (resumeText: string): string => {
    const lines = resumeText.split('\n').map(l => l.trim()).filter(Boolean)
    for (const line of lines.slice(0, 5)) {
      if (line.length > 5 && line.length < 50 && !line.includes('@') && !line.match(/\d{3}/) && /^[A-Z]/.test(line)) {
        return line
      }
    }
    return ''
  }

  const copyToClipboard = (text: string, field: string) => {
    navigator.clipboard.writeText(text)
    setCopiedField(field)
    setTimeout(() => setCopiedField(null), 2000)
  }

  const sendEmail = async () => {
    if (!currentEmail) {
      console.error('[OUTREACH] No email address available')
      setError('No email address available')
      return
    }

    setSending(true)
    setError('')
    setSuccess('')

    try {
      console.log('[OUTREACH] Sending email to:', currentEmail)

      // Get resume and cover letter HTML from storage
      const resumeHTML = localStorage.getItem('cf:selectedResumeHtml') || ''
      const coverLetterHTML = localStorage.getItem('cf:selectedCoverLetterHtml') || ''

      // Prepare contact object
      const contact = {
        name: selectedContact?.name || 'Hiring Manager',
        email: currentEmail,
        title: selectedContact?.title,
        company: jobData?.company
      }

      // Send via API
      const response = await fetch('/api/outreach/send', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contact,
          email: {
            subject: emailSubject,
            body: emailBody
          },
          resumeHTML,
          coverLetterHTML,
          send_immediately: true
        })
      })

      const result = await response.json()

      // Handle mailto method (user sends from their own email)
      if (result.method === 'mailto' && result.success) {
        console.log('[OUTREACH] Using mailto method with attachments')
        
        // Download PDF attachments for user
        if (result.attachments && result.attachments.length > 0) {
          result.attachments.forEach((attachment: any) => {
            const blob = new Blob(
              [Uint8Array.from(atob(attachment.content), c => c.charCodeAt(0))],
              { type: attachment.contentType }
            )
            const url = URL.createObjectURL(blob)
            const a = document.createElement('a')
            a.href = url
            a.download = attachment.filename
            a.click()
            URL.revokeObjectURL(url)
          })
        }
        
        // Open mailto link
        setTimeout(() => {
          window.location.href = result.mailto_link
        }, 500)
        
        setSuccess(`PDFs downloaded! Your email client will open. Attach the PDFs and send to ${currentEmail}.`)
        return
      }

      if (!response.ok) {
        // Fallback for errors
        if (result.mailto_fallback) {
          console.log('[OUTREACH] Error, using mailto fallback')
          
          // Create Gmail compose URL
          const gmailUrl = `https://mail.google.com/mail/?view=cm&fs=1&to=${encodeURIComponent(currentEmail)}&su=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(emailBody)}`
          
          window.open(gmailUrl, '_blank')
          setSuccess(`Opening Gmail to send to ${currentEmail}. Please attach your resume and cover letter manually.`)
        } else {
          throw new Error(result.error || 'Failed to send email')
        }
      } else {
        // Resend method succeeded
        console.log('[OUTREACH] ✅ Email sent via Resend:', result.message_id)
        setSuccess(`Email sent successfully to ${currentEmail}!`)
        
        setTimeout(() => {
          handleCompleteApplication()
        }, 2000)
      }

    } catch (error) {
      console.error('[OUTREACH] Send error:', error)
      setError(error instanceof Error ? error.message : 'Failed to send email')
    } finally {
      setSending(false)
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto px-6 py-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto"></div>
          <h2 className="text-xl font-bold mt-4">Preparing Your Outreach...</h2>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="container mx-auto px-6 py-8">
        <CareerFinderBackButton />
        <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-6 mt-4">
          <p className="text-red-600 dark:text-red-400">{error}</p>
        </div>
      </div>
    )
  }

  const contacts = (companyData as any)?.hiringContacts || (companyData as any)?.contacts || (companyData as any)?.hiringContactIntelligence?.keyContacts || []
  const officialChannels = (companyData as any)?.officialChannels || (companyData as any)?.hiringContactIntelligence?.officialChannels
  const currentEmail = selectedContact?.email || officialChannels?.jobsEmail || officialChannels?.hrEmail

  return (
    <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
      <CareerFinderBackButton />

      {/* Header */}
      <div className="text-center mb-8">
        <h1 className="text-2xl sm:text-3xl font-bold mb-2">Ready to Reach Out</h1>
        <p className="text-gray-600">
          Your personalized outreach materials for {jobData?.title} at {jobData?.company}
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Left Column: Contacts */}
        <div className="lg:col-span-1 space-y-6">
          {/* Hiring Contacts */}
          {contacts.length > 0 ? (
            <div className="bg-card rounded-xl shadow-sm border p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <User className="w-5 h-5 text-blue-600" />
                Hiring Contacts
              </h3>
              <div className="space-y-3">
                {contacts.map((contact, index) => (
                  <div
                    key={index}
                    onClick={() => selectContact(contact, jobData, CareerFinderStorage.getJobAnalysis(), CareerFinderStorage.getResume()?.extractedText || '')}
                    className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                      selectedContact === contact
                        ? 'border-blue-500 bg-blue-500/10'
                        : 'border-border hover:border-blue-300'
                    }`}
                  >
                    <p className="font-semibold text-foreground">{contact.name}</p>
                    <p className="text-sm text-gray-600">{contact.title}</p>
                    {contact.department && (
                      <p className="text-xs text-gray-500 mt-1">{contact.department}</p>
                    )}
                    <div className="flex flex-wrap gap-2 mt-2">
                      {contact.email && (
                        <span className="inline-flex items-center gap-1 text-xs bg-green-100 text-green-700 px-2 py-1 rounded">
                          <Mail className="w-3 h-3" /> Email
                        </span>
                      )}
                      {contact.linkedinUrl && (
                        <span className="inline-flex items-center gap-1 text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">
                          <Linkedin className="w-3 h-3" /> LinkedIn
                        </span>
                      )}
                      {contact.phone && (
                        <span className="inline-flex items-center gap-1 text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded">
                          <Phone className="w-3 h-3" /> Phone
                        </span>
                      )}
                    </div>
                    {contact.authority && (
                      <p className="text-xs text-blue-600 font-medium mt-2">
                        {contact.authority}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-xl p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <User className="w-5 h-5 text-yellow-600" />
                No Specific Contacts Found
              </h3>
              <p className="text-sm text-gray-700 mb-4">
                We couldn't find specific hiring contacts for this company. Try these options:
              </p>
              <div className="space-y-3">
                <div className="bg-card p-3 rounded border">
                  <p className="text-xs text-gray-600 mb-1">Suggested Email Addresses:</p>
                  <div className="space-y-1">
                    {jobData?.company && (
                      <>
                        <p className="text-sm font-mono">careers@{jobData.company.toLowerCase().replace(/\s+/g, '')}.com</p>
                        <p className="text-sm font-mono">hr@{jobData.company.toLowerCase().replace(/\s+/g, '')}.com</p>
                        <p className="text-sm font-mono">jobs@{jobData.company.toLowerCase().replace(/\s+/g, '')}.com</p>
                      </>
                    )}
                  </div>
                </div>
                <p className="text-xs text-gray-600">
                  💡 <strong>Tip:</strong> Search LinkedIn for "{jobData?.company} recruiter" or "{jobData?.company} talent acquisition"
                </p>
              </div>
            </div>
          )}

          {/* Official Channels */}
          {officialChannels && (
            <div className="bg-card rounded-xl shadow-sm border p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <Building2 className="w-5 h-5 text-purple-600" />
                Official Channels
              </h3>
              <div className="space-y-3 text-sm">
                {officialChannels.careersPage && (
                  <div>
                    <p className="text-gray-600 mb-1">Careers Page</p>
                    <a 
                      href={officialChannels.careersPage}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:underline flex items-center gap-1"
                    >
                      Apply Online <ExternalLink className="w-3 h-3" />
                    </a>
                  </div>
                )}
                {officialChannels.jobsEmail && (
                  <div>
                    <p className="text-gray-600 mb-1">Jobs Email</p>
                    <p className="font-medium">{officialChannels.jobsEmail}</p>
                  </div>
                )}
                {officialChannels.phone && (
                  <div>
                    <p className="text-gray-600 mb-1">Phone</p>
                    <a href={`tel:${officialChannels.phone}`} className="font-medium text-blue-600 hover:underline">
                      {officialChannels.phone}
                    </a>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Strategy Recommendations */}
          {companyData?.strategicRecommendations?.contactStrategy && (
            <div className="bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-xl border border-blue-500/30 p-6">
              <h3 className="text-lg font-bold mb-3 text-blue-600 dark:text-blue-400">💡 Contact Strategy</h3>
              <p className="text-sm text-foreground leading-relaxed">
                {companyData.strategicRecommendations.contactStrategy}
              </p>
            </div>
          )}
        </div>

        {/* Right Column: Email Draft */}
        <div className="lg:col-span-2 space-y-6">
          {/* Email Preview */}
          <div className="bg-card rounded-xl shadow-sm border p-6">
            <h3 className="text-xl font-bold mb-4">Your Outreach Email</h3>

            {/* To Field */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">To:</label>
              <div className="flex items-center gap-2">
                <input
                  type="email"
                  value={currentEmail || 'No email found'}
                  disabled
                  className="flex-1 px-4 py-2 border border-border rounded-lg bg-muted text-foreground"
                />
                {currentEmail && (
                  <Button
                    onClick={() => copyToClipboard(currentEmail, 'email')}
                    variant="outline"
                    size="sm"
                  >
                    {copiedField === 'email' ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                  </Button>
                )}
              </div>
            </div>

            {/* Subject Field */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">Subject:</label>
              <div className="flex items-center gap-2">
                <input
                  type="text"
                  value={emailSubject}
                  onChange={(e) => setEmailSubject(e.target.value)}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-foreground bg-card"
                />
                <Button
                  onClick={() => copyToClipboard(emailSubject, 'subject')}
                  variant="outline"
                  size="sm"
                >
                  {copiedField === 'subject' ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                </Button>
              </div>
            </div>

            {/* Body Field */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">Message:</label>
              <div className="relative">
                <textarea
                  value={emailBody}
                  onChange={(e) => setEmailBody(e.target.value)}
                  rows={16}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm text-foreground bg-card"
                />
                <Button
                  onClick={() => copyToClipboard(emailBody, 'body')}
                  variant="outline"
                  size="sm"
                  className="absolute top-2 right-2"
                >
                  {copiedField === 'body' ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                </Button>
              </div>
            </div>

            {/* Success/Error Messages */}
            {success && (
              <div className="mb-4 p-4 bg-green-500/10 border border-green-500/30 rounded-lg">
                <p className="text-green-600 dark:text-green-400 text-sm font-medium">{success}</p>
              </div>
            )}
            {error && (
              <div className="mb-4 p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
                <p className="text-red-600 dark:text-red-400 text-sm font-medium">{error}</p>
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex gap-4">
              <Button
                onClick={sendEmail}
                disabled={!currentEmail || sending}
                className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-3 sm:py-4 rounded-lg flex items-center justify-center gap-2 min-h-[48px] disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {sending ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    Sending Email...
                  </>
                ) : (
                  <>
                    <Mail className="w-5 h-5" />
                    Send Email Now
                  </>
                )}
              </Button>
            </div>

            <p className="text-xs text-gray-500 mt-4 text-center">
              {sending ? 'Sending your email with resume and cover letter attachments...' : 'Click to send your email with resume and cover letter attached as PDFs.'}
            </p>
          </div>

          {/* Additional Contact Options */}
          {selectedContact && (
            <div className="bg-card rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-bold mb-4">Additional Contact Methods</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {selectedContact.linkedinUrl && (
                  <a
                    href={selectedContact.linkedinUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center gap-3 p-4 border-2 border-blue-500/30 rounded-lg hover:border-blue-400 hover:bg-blue-500/10 transition-all"
                  >
                    <Linkedin className="w-6 h-6 text-blue-600" />
                    <div>
                      <p className="font-semibold text-foreground">Connect on LinkedIn</p>
                      <p className="text-sm text-gray-600">Send a connection request</p>
                    </div>
                  </a>
                )}
                {selectedContact.phone && (
                  <a
                    href={`tel:${selectedContact.phone}`}
                    className="flex items-center gap-3 p-4 border-2 border-purple-500/30 rounded-lg hover:border-purple-400 hover:bg-purple-500/10 transition-all"
                  >
                    <Phone className="w-6 h-6 text-purple-600" />
                    <div>
                      <p className="font-semibold text-foreground">Call {selectedContact.name}</p>
                      <p className="text-sm text-gray-600">{selectedContact.phone}</p>
                    </div>
                  </a>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Bottom Navigation */}
      <div className="mt-8 flex justify-between items-center">
        <Button
          onClick={() => router.push('/career-finder/cover-letter')}
          variant="outline"
        >
          ← Back to Cover Letter
        </Button>
        <div className="flex gap-3">
          <Button
            onClick={() => router.push('/career-finder/search')}
            variant="outline"
            className="border-blue-600 text-blue-600 hover:bg-blue-500/10"
          >
            Apply to More Jobs →
          </Button>
          <Button
            onClick={handleCompleteApplication}
            className="bg-green-600 hover:bg-green-700"
          >
            Complete Application → Interview Prep
          </Button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/career-finder/resume/page.tsx">
'use client'

export const dynamic = 'force-dynamic'

import { ResumeUpload } from '@/components/resume-upload'
import { useEffect, useState } from 'react'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'
import { formatResumeWithLineBreaks } from '@/lib/text-formatting'
import { AutopilotProgressTracker } from '@/components/autopilot-progress-tracker'
import { ResumeAnalysisLoaderManual } from '@/components/ResumeAnalysisLoader'
import toast from 'react-hot-toast'

interface Resume {
  _id: string
  extractedText: string
  originalFileName?: string
}

interface ComprehensiveAnalysis {
  aiRisk?: {
    aiReplacementRisk: string
    reasoning: string
    careerOutlook: string
    fiveYearOutlook?: string
    recommendations?: string[]
  }
  salaryIntelligence?: {
    targetRange?: {
      min?: number
      max?: number
    }
    marketData?: {
      percentile50?: number
    }
  }
  careerPath?: {
    currentLevel?: string
    nextPossibleRoles?: string[]
  }
  [key: string]: unknown
}

export default function CareerFinderResumePage() {
  const [existingResume, setExistingResume] = useState<Resume | null>(null)
  const [loadingExisting, setLoadingExisting] = useState<boolean>(true)
  const [comprehensiveAnalysis, setComprehensiveAnalysis] = useState<ComprehensiveAnalysis | null>(null)
  const [analyzingResume, setAnalyzingResume] = useState(false)
  const [showAnalysisLoader, setShowAnalysisLoader] = useState(false)
  const [analysisProgress, setAnalysisProgress] = useState(0)
  const [analysisStage, setAnalysisStage] = useState<'analyzing' | 'matching' | 'finding'>('analyzing')

  // COMPETITIVE ADVANTAGE: Comprehensive resume analysis with AI risk
  const handleComprehensiveAnalysis = async (resumeText: string) => {
    if (!resumeText || resumeText.length < 100) {
      console.warn('[COMPREHENSIVE_ANALYSIS] Resume text too short:', resumeText.length)
      return
    }

    setAnalyzingResume(true)
    console.log('[COMPREHENSIVE_ANALYSIS] Starting analysis, text length:', resumeText.length)

    try {
      const response = await fetch('/api/resume/analyze-comprehensive', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          resumeText, 
          options: { 
            includeAiRisk: true,
            includeMarketData: true,
            includeCareerPath: true
          } 
        })
      })

      if (response.ok) {
        const data = await response.json()
        console.log('[COMPREHENSIVE_ANALYSIS] Success:', data)
        setComprehensiveAnalysis(data.analysis)
        
        // Cache the analysis
        try {
          localStorage.setItem('cf:comprehensiveAnalysis', JSON.stringify(data.analysis))
        } catch (e) {
          console.warn('[COMPREHENSIVE_ANALYSIS] Failed to cache:', e)
        }
      } else {
        const error = await response.json()
        console.error('[COMPREHENSIVE_ANALYSIS] API error:', error)
      }
    } catch (error) {
      console.error('[COMPREHENSIVE_ANALYSIS] Request failed:', error)
    } finally {
      setAnalyzingResume(false)
    }
  }

  // ENTERPRISE FIX: Auto-load existing resume from localStorage or DB
  useEffect(() => {
    (async () => {
      try { localStorage.setItem('cf:progress', JSON.stringify({ step: 1, total: 7 })) } catch {}
      
      // Step 1: Check localStorage for cached resume
      try {
        const cachedResume = localStorage.getItem('cf:resume')
        if (cachedResume) {
          const parsed = JSON.parse(cachedResume)
          console.log('[RESUME_PAGE] Found cached resume in localStorage:', parsed?._id || parsed?.originalFileName)
          setExistingResume(parsed)
          setLoadingExisting(false)
          return // Early return if we have a cached resume
        }
      } catch (e) {
        console.warn('[RESUME_PAGE] Failed to load cached resume from localStorage:', e)
      }

      // Step 2: Fetch from API if no cache
      try {
        const r = await fetch('/api/resume/list')
        if (r.ok) {
          const j = await r.json()
          if (Array.isArray(j.resumes) && j.resumes.length > 0) {
            const mostRecent = j.resumes[0]
            console.log('[RESUME_PAGE] Found DB resume:', mostRecent._id)
            setExistingResume(mostRecent)
            
            // Cache it for future use
            try {
              localStorage.setItem('cf:resume', JSON.stringify(mostRecent))
              localStorage.setItem('cf:autopilotReady', '1')
              console.log('[RESUME_PAGE] Resume cached, autopilot will trigger on Continue button')
            } catch (cacheError) {
              console.warn('[RESUME_PAGE] Failed to cache resume:', cacheError)
            }
          }
        }
      } catch (e) {
        console.warn('[RESUME_PAGE] Failed to fetch resumes from API:', e)
      }
      
      setLoadingExisting(false)
    })()
  }, [])

  return (
    <div className="min-h-screen bg-background">
      {/* PHASE 1: Autopilot Progress Tracker */}
      <AutopilotProgressTracker />
      
      {/* Modern Header */}
      <div className="gradient-hero p-8 rounded-b-3xl shadow-2xl mb-8">
        <div className="max-w-4xl mx-auto">
          <div className="mb-4">
            <CareerFinderBackButton />
          </div>
          <h1 className="text-4xl font-bold text-foreground text-center mb-3">📄 Resume Manager</h1>
          <p className="text-foreground/90 text-center text-lg">Upload or build your resume to get started!</p>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 mt-8">
        {/* ENTERPRISE FIX: Show existing resume if available */}
        {loadingExisting && (
          <div className="text-center py-12">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
            <p className="mt-4 text-foreground">Loading your resume...</p>
          </div>
        )}

        {!loadingExisting && existingResume && (
          <div className="gradient-border-card mb-8 hover:shadow-2xl hover:shadow-green-500/20 transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-12 h-12 bg-green-500 rounded-2xl flex items-center justify-center">
                <span className="text-2xl">✅</span>
              </div>
              <div>
                <h3 className="text-2xl font-bold text-foreground">Resume Loaded</h3>
                <p className="text-sm text-muted-foreground">
                  {existingResume.originalFileName || 'Your Resume'} • {existingResume.extractedText?.length || 0} chars
                </p>
              </div>
            </div>
            
            <div className="bg-muted/50 rounded-lg p-4 mb-4 max-h-[200px] overflow-y-auto">
              <p className="text-sm text-foreground whitespace-pre-wrap font-mono">
                {formatResumeWithLineBreaks(existingResume.extractedText || '').slice(0, 500)}
                {existingResume.extractedText?.length > 500 && '...'}
              </p>
            </div>

            <div className="flex gap-3">
              <button
                onClick={async () => {
                  // Show analysis loader
                  setShowAnalysisLoader(true)
                  setAnalysisProgress(0)
                  setAnalysisStage('analyzing')
                  
                  try {
                    // Stage 1: Analyzing resume with Perplexity (0-33%)
                    console.log('[RESUME_ANALYSIS] Stage 1: Analyzing resume...')
                    setAnalysisProgress(5)
                    
                    const autopilotResponse = await fetch('/api/career-finder/autopilot', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        resumeId: existingResume?._id
                      })
                    })
                    
                    setAnalysisProgress(33)
                    
                    if (autopilotResponse.ok) {
                      const autopilotData = await autopilotResponse.json()
                      console.log('[AUTOPILOT] ✅ Success:', autopilotData)
                      
                      // Stage 2: Matching skills (33-66%)
                      setAnalysisStage('matching')
                      setAnalysisProgress(40)
                      console.log('[RESUME_ANALYSIS] Stage 2: Matching skills...')
                      
                      // Store signals in localStorage for job search
                      if (autopilotData.signals) {
                        if (autopilotData.signals.keywords && autopilotData.signals.keywords.length > 0) {
                          localStorage.setItem('cf:keywords', JSON.stringify(autopilotData.signals.keywords))
                          console.log('[AUTOPILOT] ✅ Keywords:', autopilotData.signals.keywords.length)
                        }
                        
                        if (autopilotData.signals.location) {
                          localStorage.setItem('cf:location', autopilotData.signals.location)
                          console.log('[AUTOPILOT] ✅ Location:', autopilotData.signals.location)
                        }
                        
                        // CRITICAL: Set autopilot ready flag so search page knows to auto-search
                        localStorage.setItem('cf:autopilotReady', '1')
                        console.log('[AUTOPILOT] ✅ Set autopilotReady flag')
                      }
                      
                      setAnalysisProgress(66)
                      
                      // Stage 3: Finding jobs (66-100%)
                      setAnalysisStage('finding')
                      setAnalysisProgress(70)
                      console.log('[RESUME_ANALYSIS] Stage 3: Finding jobs...')
                      
                      // Simulate finding jobs progress
                      await new Promise(resolve => setTimeout(resolve, 500))
                      setAnalysisProgress(85)
                      await new Promise(resolve => setTimeout(resolve, 500))
                      setAnalysisProgress(100)
                      
                      // Navigate to search
                      await new Promise(resolve => setTimeout(resolve, 500))
                      window.location.href = '/career-finder/search'
                    } else {
                      console.error('[AUTOPILOT] ❌ Failed:', await autopilotResponse.text())
                      toast.error('Failed to analyze resume. Please try again.')
                      setShowAnalysisLoader(false)
                    }
                  } catch (error) {
                    console.error('[AUTOPILOT] ❌ Error:', error)
                    toast.error('An error occurred. Please try again.')
                    setShowAnalysisLoader(false)
                  }
                }}
                className="flex-1 btn-gradient text-center py-3 rounded-xl font-semibold hover:opacity-90 transition-opacity"
              >
                🚀 Continue with this Resume
              </button>
              <button 
                onClick={() => {
                  if (existingResume?.extractedText) {
                    handleComprehensiveAnalysis(existingResume.extractedText)
                  }
                }}
                disabled={analyzingResume}
                className="px-6 py-3 bg-purple-500 text-white rounded-xl font-semibold hover:bg-purple-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {analyzingResume ? '🔄 Analyzing...' : '🔍 AI Analysis'}
              </button>
              <button 
                onClick={() => {
                  setExistingResume(null)
                  setComprehensiveAnalysis(null)
                  try {
                    // Clear all autopilot cache
                    localStorage.removeItem('cf:resume')
                    localStorage.removeItem('cf:autopilotReady')
                    localStorage.removeItem('cf:comprehensiveAnalysis')
                    localStorage.removeItem('cf:signals')
                    localStorage.removeItem('cf:resumeVariants')
                    localStorage.removeItem('cf:coverLetters')
                    localStorage.removeItem('cf:emailOutreach')
                    console.log('[CACHE] All autopilot cache cleared')
                  } catch {}
                }}
                className="px-6 py-3 bg-red-500 text-white rounded-xl font-semibold hover:bg-red-600 transition-colors"
              >
                Upload New
              </button>
            </div>
          </div>
        )}

        {/* COMPETITIVE ADVANTAGE: Display comprehensive analysis results */}
        {comprehensiveAnalysis && (
          <div className="gradient-border-card mb-8 hover:shadow-2xl hover:shadow-purple-500/20 transition-all duration-300">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-12 h-12 bg-purple-500 rounded-2xl flex items-center justify-center">
                <span className="text-2xl">🤖</span>
              </div>
              <h3 className="text-2xl font-bold gradient-text">AI-Powered Resume Analysis</h3>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              {/* AI Risk Analysis */}
              {comprehensiveAnalysis.aiRisk && (
                <div className="bg-gradient-to-br from-red-500/10 to-orange-500/10 rounded-xl p-6 border border-red-500/20">
                  <div className="flex items-center gap-2 mb-3">
                    <span className="text-2xl">⚠️</span>
                    <h4 className="text-lg font-bold text-foreground">AI/Automation Risk</h4>
                  </div>
                  <div className="text-3xl font-bold mb-2">
                    <span className={`${
                      comprehensiveAnalysis.aiRisk.aiReplacementRisk === 'low' ? 'text-green-500' :
                      comprehensiveAnalysis.aiRisk.aiReplacementRisk === 'medium' ? 'text-yellow-500' : 'text-red-500'
                    }`}>
                      {comprehensiveAnalysis.aiRisk.aiReplacementRisk?.toUpperCase() || 'N/A'}
                    </span>
                  </div>
                  <p className="text-sm text-muted-foreground">{comprehensiveAnalysis.aiRisk.reasoning?.slice(0, 100)}...</p>
                </div>
              )}

              {/* Career Outlook */}
              {comprehensiveAnalysis.aiRisk && (
                <div className="bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-xl p-6 border border-blue-500/20">
                  <div className="flex items-center gap-2 mb-3">
                    <span className="text-2xl">📈</span>
                    <h4 className="text-lg font-bold text-foreground">5-Year Outlook</h4>
                  </div>
                  <div className="text-3xl font-bold mb-2">
                    <span className={`${
                      comprehensiveAnalysis.aiRisk.fiveYearOutlook === 'thriving' ? 'text-green-500' :
                      comprehensiveAnalysis.aiRisk.fiveYearOutlook === 'growing' ? 'text-blue-500' :
                      comprehensiveAnalysis.aiRisk.fiveYearOutlook === 'stable' ? 'text-yellow-500' : 'text-red-500'
                    }`}>
                      {comprehensiveAnalysis.aiRisk.fiveYearOutlook?.toUpperCase() || 'N/A'}
                    </span>
                  </div>
                  <p className="text-sm text-muted-foreground">Career trajectory projection based on market trends</p>
                </div>
              )}
            </div>

            {/* Salary Intelligence */}
            {comprehensiveAnalysis.salaryIntelligence && (
              <div className="bg-gradient-to-br from-green-500/10 to-emerald-500/10 rounded-xl p-6 border border-green-500/20 mb-4">
                <div className="flex items-center gap-2 mb-3">
                  <span className="text-2xl">💰</span>
                  <h4 className="text-lg font-bold text-foreground">Market Salary Intelligence</h4>
                </div>
                <div className="flex gap-6">
                  <div>
                    <p className="text-sm text-muted-foreground">Target Range</p>
                    <p className="text-2xl font-bold text-green-500">
                      ${comprehensiveAnalysis.salaryIntelligence.targetRange?.min?.toLocaleString()} - 
                      ${comprehensiveAnalysis.salaryIntelligence.targetRange?.max?.toLocaleString()}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Median (P50)</p>
                    <p className="text-xl font-bold text-foreground">
                      ${comprehensiveAnalysis.salaryIntelligence.marketData?.percentile50?.toLocaleString()}
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Career Path Intelligence */}
            {comprehensiveAnalysis.careerPath && (
              <div className="bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-xl p-6 border border-purple-500/20 mb-4">
                <div className="flex items-center gap-2 mb-3">
                  <span className="text-2xl">🎯</span>
                  <h4 className="text-lg font-bold text-foreground">Career Path Intelligence</h4>
                </div>
                <div className="space-y-3">
                  <div>
                    <p className="text-sm text-muted-foreground mb-1">Current Level</p>
                    <p className="text-lg font-semibold text-foreground">{comprehensiveAnalysis.careerPath.currentLevel}</p>
                  </div>
                  {(comprehensiveAnalysis.careerPath.nextPossibleRoles?.length ?? 0) > 0 && (
                    <div>
                      <p className="text-sm text-muted-foreground mb-2">Next Possible Roles</p>
                      <div className="flex flex-wrap gap-2">
                        {comprehensiveAnalysis.careerPath.nextPossibleRoles?.slice(0, 3).map((role: string, i: number) => (
                          <span key={i} className="px-3 py-1 bg-purple-500/20 text-purple-300 rounded-full text-sm">
                            {role}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* AI Recommendations */}
            {(comprehensiveAnalysis.aiRisk?.recommendations?.length ?? 0) > 0 && (
              <div className="bg-gradient-to-br from-yellow-500/10 to-amber-500/10 rounded-xl p-6 border border-yellow-500/20">
                <div className="flex items-center gap-2 mb-3">
                  <span className="text-2xl">💡</span>
                  <h4 className="text-lg font-bold text-foreground">AI Recommendations</h4>
                </div>
                <ul className="space-y-2">
                  {comprehensiveAnalysis.aiRisk?.recommendations?.slice(0, 3).map((rec: string, i: number) => (
                    <li key={i} className="flex items-start gap-2">
                      <span className="text-yellow-500 mt-1">•</span>
                      <span className="text-sm text-foreground">{rec}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}

        {!loadingExisting && !existingResume && (
          <div className="gradient-border-card hover:shadow-2xl hover:shadow-primary/20 transition-all duration-300">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-12 h-12 gradient-primary rounded-2xl flex items-center justify-center">
                <span className="text-2xl">📤</span>
              </div>
              <h3 className="text-2xl font-bold gradient-text">Resume Upload</h3>
            </div>
            <ResumeUpload 
              onUploadSuccess={async (resume) => {
                try {
                  console.log('[AUTOPILOT] Resume uploaded, triggering autopilot...', resume._id)
                  
                  // Clear old autopilot cache before generating new data
                  localStorage.removeItem('cf:signals')
                  localStorage.removeItem('cf:resumeVariants')
                  localStorage.removeItem('cf:coverLetters')
                  localStorage.removeItem('cf:emailOutreach')
                  localStorage.removeItem('cf:comprehensiveAnalysis')
                  console.log('[CACHE] Old autopilot cache cleared')
                  
                  // Trigger autopilot to pre-compute AI data
                  const autopilotResponse = await fetch('/api/career-finder/autopilot', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                      resumeId: resume._id
                    })
                  })
                  
                  if (autopilotResponse.ok) {
                    const autopilotData = await autopilotResponse.json()
                    console.log('[AUTOPILOT] Success:', autopilotData)
                    
                    // Cache signals in localStorage for instant access
                    if (autopilotData.signals) {
                      localStorage.setItem('cf:signals', JSON.stringify(autopilotData.signals))
                      
                      // CRITICAL: Cache keywords and location separately for search page
                      if (autopilotData.signals.keywords?.length > 0) {
                        const topKeywords = autopilotData.signals.keywords.slice(0, 30).join(', ')
                        localStorage.setItem('cf:keywords', topKeywords)
                        console.log('[AUTOPILOT] ✅ Keywords:', topKeywords)
                      }
                      
                      if (autopilotData.signals.location) {
                        localStorage.setItem('cf:location', autopilotData.signals.location)
                        console.log('[AUTOPILOT] ✅ Location:', autopilotData.signals.location)
                      }
                      
                      // CRITICAL: Set autopilot ready flag AFTER successful extraction
                      localStorage.setItem('cf:autopilotReady', '1')
                      console.log('[AUTOPILOT] ✅ Set autopilotReady flag')
                    }
                    
                    toast.success('✅ Resume uploaded! Autopilot is preparing your data...', {
                      duration: 3000
                    })
                  } else {
                    console.warn('[AUTOPILOT] Failed:', await autopilotResponse.text())
                    toast.error('⚠️ Resume uploaded, but autopilot failed. You can still proceed manually.', {
                      duration: 4000
                    })
                  }
                  
                  // Trigger re-fetch
                  setTimeout(() => window.location.reload(), 1000)
                } catch (error) {
                  console.error('[AUTOPILOT] Error:', error)
                  toast.error('⚠️ Resume uploaded, but autopilot encountered an error.', {
                    duration: 4000
                  })
                  // Still reload even if autopilot fails
                  setTimeout(() => window.location.reload(), 1000)
                }
              }} 
              onUploadError={() => {}}
            />
          </div>
        )}

      </div>

      {/* Analysis Loader Overlay */}
      {showAnalysisLoader && (
        <ResumeAnalysisLoaderManual 
          progress={analysisProgress}
          stage={analysisStage}
        />
      )}
    </div>
  )
}
</file>

<file path="src/app/career-finder/salary-negotiation/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'
import { DollarSign, TrendingUp, Target, Download, Loader2, CheckCircle } from 'lucide-react'
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js'
import { Bar } from 'react-chartjs-2'

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend)

interface Application {
  id: string
  company: string
  jobTitle: string
  location?: string
  status: string
  hasSalaryData: boolean
}

interface SalaryData {
  marketMin: number
  marketMedian: number
  marketMax: number
  userTarget: number
  negotiationTips: string[]
  factors?: string
  company: string
  jobTitle: string
  location?: string
}

export default function SalaryNegotiationPage() {
  const router = useRouter()
  const [applications, setApplications] = useState<Application[]>([])
  const [selectedApp, setSelectedApp] = useState<Application | null>(null)
  const [salaryData, setSalaryData] = useState<SalaryData | null>(null)
  const [loading, setLoading] = useState(true)
  const [generating, setGenerating] = useState(false)

  useEffect(() => {
    loadApplications()
  }, [])

  const loadApplications = async () => {
    try {
      const response = await fetch('/api/applications/list')
      if (response.ok) {
        const apps = await response.json()
        setApplications(apps)
        console.log('[SALARY] Loaded', apps.length, 'applications')
      }
    } catch (error) {
      console.error('[SALARY] Error loading applications:', error)
    } finally {
      setLoading(false)
    }
  }

  const generateSalaryGuide = async () => {
    if (!selectedApp) return

    setGenerating(true)
    try {
      const response = await fetch('/api/salary/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          applicationId: selectedApp.id,
          yearsExperience: 5 // TODO: Get from user profile
        })
      })

      if (response.ok) {
        const data = await response.json()
        setSalaryData(data.salary)
        console.log('[SALARY] ✅ Generated salary range:', data.salary.marketMin, '-', data.salary.marketMax)
      } else {
        console.error('[SALARY] Failed to generate salary data')
      }
    } catch (error) {
      console.error('[SALARY] Error:', error)
    } finally {
      setGenerating(false)
    }
  }

  const chartData = salaryData ? {
    labels: ['25th Percentile', 'Median (50th)', '75th Percentile', 'Your Target'],
    datasets: [
      {
        label: 'Salary ($)',
        data: [
          salaryData.marketMin,
          salaryData.marketMedian,
          salaryData.marketMax,
          salaryData.userTarget
        ],
        backgroundColor: [
          'rgba(59, 130, 246, 0.5)',
          'rgba(16, 185, 129, 0.5)',
          'rgba(245, 158, 11, 0.5)',
          'rgba(139, 92, 246, 0.8)'
        ],
        borderColor: [
          'rgb(59, 130, 246)',
          'rgb(16, 185, 129)',
          'rgb(245, 158, 11)',
          'rgb(139, 92, 246)'
        ],
        borderWidth: 2
      }
    ]
  } : null

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        display: false
      },
      title: {
        display: true,
        text: 'Market Salary Range',
        font: {
          size: 18,
          weight: 'bold' as const
        }
      },
      tooltip: {
        callbacks: {
          label: function(context: any) {
            return '$' + context.parsed.y.toLocaleString()
          }
        }
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          callback: function(value: any) {
            return '$' + (value / 1000) + 'K'
          }
        }
      }
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <Loader2 className="w-8 h-8 animate-spin text-primary" />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="gradient-hero p-8 rounded-b-3xl shadow-2xl mb-8">
        <div className="max-w-4xl mx-auto">
          <div className="mb-4">
            <CareerFinderBackButton />
          </div>
          <h1 className="text-4xl font-bold text-foreground text-center mb-3">💰 Salary Negotiation</h1>
          <p className="text-foreground/90 text-center text-lg">
            Market data and negotiation strategies for your offers
          </p>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-4">
        {applications.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">📝</div>
            <h3 className="text-2xl font-bold mb-2">No Applications Yet</h3>
            <p className="text-muted-foreground mb-6">
              Apply to jobs first to get salary benchmarks
            </p>
            <button
              onClick={() => router.push('/career-finder/search')}
              className="btn-primary"
            >
              Find Jobs
            </button>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Left: Application Selection */}
            <div className="lg:col-span-1">
              <div className="gradient-border-card">
                <h3 className="text-xl font-bold mb-4">Your Applications</h3>
                <div className="space-y-3">
                  {applications.map((app) => (
                    <div
                      key={app.id}
                      onClick={() => setSelectedApp(app)}
                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                        selectedApp?.id === app.id
                          ? 'border-green-500 bg-green-50'
                          : 'border-border hover:border-green-300'
                      }`}
                    >
                      <h4 className="font-bold text-foreground">{app.jobTitle}</h4>
                      <p className="text-sm text-muted-foreground">{app.company}</p>
                      <div className="flex items-center gap-2 mt-2">
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          app.status === 'applied' ? 'bg-green-100 text-green-700' :
                          app.status === 'offer_received' ? 'bg-purple-100 text-purple-700' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {app.status.replace('_', ' ')}
                        </span>
                        {app.hasSalaryData && (
                          <span className="text-xs text-green-600">✓ Data Ready</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Right: Salary Data */}
            <div className="lg:col-span-2">
              {!selectedApp ? (
                <div className="gradient-border-card text-center py-12">
                  <DollarSign className="w-16 h-16 mx-auto text-green-500 mb-4" />
                  <h3 className="text-xl font-bold mb-2">Select an Application</h3>
                  <p className="text-muted-foreground">
                    Choose an application to get salary benchmarks
                  </p>
                </div>
              ) : !salaryData ? (
                <div className="gradient-border-card text-center py-12">
                  <TrendingUp className="w-16 h-16 mx-auto text-green-500 mb-4" />
                  <h3 className="text-xl font-bold mb-2">Get Salary Benchmarks</h3>
                  <p className="text-muted-foreground mb-6">
                    AI will analyze market data for<br />
                    <strong>{selectedApp.jobTitle}</strong> at <strong>{selectedApp.company}</strong>
                  </p>
                  <button
                    onClick={generateSalaryGuide}
                    disabled={generating}
                    className="btn-primary"
                  >
                    {generating ? (
                      <>
                        <Loader2 className="w-5 h-5 animate-spin mr-2" />
                        Analyzing Market...
                      </>
                    ) : (
                      <>
                        <Target className="w-5 h-5 mr-2" />
                        Generate Salary Guide
                      </>
                    )}
                  </button>
                </div>
              ) : (
                <div className="space-y-6">
                  {/* Header */}
                  <div className="gradient-border-card">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h2 className="text-2xl font-bold">{salaryData.jobTitle}</h2>
                        <p className="text-muted-foreground">{salaryData.company}</p>
                        {salaryData.location && (
                          <p className="text-sm text-muted-foreground">📍 {salaryData.location}</p>
                        )}
                      </div>
                      <button className="btn-secondary">
                        <Download className="w-4 h-4 mr-2" />
                        Download PDF
                      </button>
                    </div>
                  </div>

                  {/* Salary Chart */}
                  <div className="gradient-border-card">
                    <h3 className="text-xl font-bold mb-4">Market Salary Range</h3>
                    {chartData && (
                      <div className="bg-card p-4 rounded-lg">
                        <Bar data={chartData} options={chartOptions} />
                      </div>
                    )}
                    
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
                      <div className="text-center p-4 bg-blue-50 rounded-lg">
                        <p className="text-sm text-muted-foreground mb-1">25th Percentile</p>
                        <p className="text-2xl font-bold text-blue-600">
                          ${(salaryData.marketMin / 1000).toFixed(0)}K
                        </p>
                      </div>
                      <div className="text-center p-4 bg-green-50 rounded-lg">
                        <p className="text-sm text-muted-foreground mb-1">Median</p>
                        <p className="text-2xl font-bold text-green-600">
                          ${(salaryData.marketMedian / 1000).toFixed(0)}K
                        </p>
                      </div>
                      <div className="text-center p-4 bg-yellow-50 rounded-lg">
                        <p className="text-sm text-muted-foreground mb-1">75th Percentile</p>
                        <p className="text-2xl font-bold text-yellow-600">
                          ${(salaryData.marketMax / 1000).toFixed(0)}K
                        </p>
                      </div>
                      <div className="text-center p-4 bg-purple-50 rounded-lg border-2 border-purple-500">
                        <p className="text-sm text-muted-foreground mb-1">Your Target</p>
                        <p className="text-2xl font-bold text-purple-600">
                          ${(salaryData.userTarget / 1000).toFixed(0)}K
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Negotiation Tips */}
                  <div className="gradient-border-card">
                    <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                      <CheckCircle className="w-5 h-5 text-green-500" />
                      Negotiation Strategy
                    </h3>
                    <div className="space-y-3">
                      {salaryData.negotiationTips.map((tip, i) => (
                        <div key={i} className="flex items-start gap-3 p-4 bg-green-50 rounded-lg">
                          <span className="flex-shrink-0 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center font-bold">
                            {i + 1}
                          </span>
                          <p className="flex-1 text-foreground pt-1">{tip}</p>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-4">
                    <button onClick={generateSalaryGuide} className="btn-secondary flex-1">
                      🔄 Refresh Data
                    </button>
                    <button
                      onClick={() => router.push('/career-finder/applications')}
                      className="btn-primary flex-1"
                    >
                      View All Applications →
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/app/dashboard/components/action-center.tsx">
'use client'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Skeleton } from '@/components/ui/skeleton'
import { ArrowRight, ClipboardList, Sparkles, Target, Bell, Route } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useDashboardStatsData } from '@/hooks/use-dashboard-stats'

export function ActionCenter() {
  const router = useRouter()
  const { stats, isLoading } = useDashboardStatsData()

  const actions = [
    {
      title: 'Find Jobs',
      description: 'Search for jobs with AI-powered matching and analysis.',
      icon: ClipboardList,
      href: '/career-finder/search',
      color: 'text-green-600',
      bg: 'bg-green-100',
    },
    {
      title: 'Research a Company',
      description: 'Get culture, news, and talking points for outreach and interviews.',
      icon: Target,
      href: '/career-finder/company',
      color: 'text-orange-600',
      bg: 'bg-orange-100',
    },
    {
      title: 'Optimize Resume',
      description: 'Tailor your resume for higher match scores and better responses.',
      icon: Sparkles,
      href: '/career-finder/optimizer',
      color: 'text-purple-600',
      bg: 'bg-purple-100',
    },
    {
      title: 'Alerts & Preferences',
      description: 'Manage job alerts, locations, and frequency to get daily finds.',
      icon: Bell,
      href: '/settings/alerts',
      color: 'text-blue-600',
      bg: 'bg-blue-100',
    },
    {
      title: 'Commute Filters',
      description: 'Filter jobs by travel time and preferred mode from your address.',
      icon: Route,
      href: '/jobs?commute=1',
      color: 'text-sky-600',
      bg: 'bg-sky-100',
    },
  ]

  return (
    <Card className="glass-card action-center">
      <CardHeader>
        <CardTitle>Smart Action Center</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {isLoading ? (
          <div className="space-y-3">
            <Skeleton className="h-4 w-1/2" />
            <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
              {[...Array(3)].map((_, i) => (
                <Skeleton key={i} className="h-16" />
              ))}
            </div>
          </div>
        ) : (
          <>
            <div className="text-sm text-muted-foreground">
              {stats.appliedThisWeek > 0
                ? `Great work — ${stats.appliedThisWeek} applications this week. Keep momentum with these actions.`
                : 'Kickstart your week with these recommended actions.'}
            </div>
            <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
              {actions.map((action) => (
                <Button
                  key={action.title}
                  variant="outline"
                  className="h-auto p-4 flex items-center justify-between hover:shadow-md transition whitespace-pre-wrap break-words text-left action-primary"
                  onClick={() => router.push(action.href)}
                >
                  <div className="flex items-center gap-3">
                    <div className={`rounded-md p-2 ${action.bg}`}>
                      <action.icon className={`h-5 w-5 ${action.color}`} />
                    </div>
                    <div className="text-left">
                      <div className="font-medium text-foreground leading-normal">{action.title}</div>
                      <div className="text-xs text-muted-foreground leading-normal">{action.description}</div>
                    </div>
                  </div>
                  <ArrowRight className="h-4 w-4" />
                </Button>
              ))}
            </div>
          </>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/dashboard/components/ai-insights.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { isFeatureEnabled } from '@/lib/flags'

interface Insight {
  title: string
  detail: string
}

export default function AIInsights() {
  const [insights, setInsights] = useState<Insight[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const run = async () => {
      try {
        // Compute success probability if cache available
        let success: { score: number } | null = null
        try {
          const jd = localStorage.getItem('job:description') || ''
          const rt = localStorage.getItem('resume:latest') || ''
          if (jd && rt) {
            const r = await fetch('/api/insights/success', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription: jd, resumeText: rt }) })
            const j = await r.json().catch(()=>({}))
            if (r.ok && j.success && j.successScore) success = { score: j.successScore.score }
          }
        } catch {}

        // Use cached stats from shared hook instead of fetching again
        const res = await fetch('/api/analytics/dashboard')
        if (res.ok) {
          const data = await res.json()
          const s = data?.stats || { totalApplications: 0, appliedThisWeek: 0, interviewRate: 0 }
          // TODO: Refactor to use useDashboardStatsData() hook
          const items: Insight[] = [
            { title: 'Focus company outreach', detail: `Interview rate at ${s.interviewRate}% — tailor follow-ups to top targets.` },
            { title: 'Consistency wins', detail: `Apply to at least ${(s.appliedThisWeek || 0) + 3} roles this week to maintain momentum.` },
          ]
          setInsights(items)
          if (typeof success?.score === 'number') {
            setInsights(prev => [{ title: 'Success Probability', detail: `${success!.score}% estimated chance — strengthen missing keywords and quantify recent wins.` }, ...prev])
          }
          // Optional market intel summary (behind flag)
          if (isFeatureEnabled('intel-dashboard')) {
            try {
              const cname = localStorage.getItem('job:company') || ''
              const role = localStorage.getItem('job:title') || ''
              if (cname) {
                const mi = await fetch('/api/v2/company/intel', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ companyName: cname, role }) })
                const mj = await mi.json().catch(()=>({}))
                if (mi.ok && mj.success && mj.intel?.summary) {
                  setInsights(prev => [{ title: 'Market Intel', detail: mj.intel.summary.split('\n')[0] || 'New signals available.' }, ...prev])
                }
              }
            } catch {}
          }
        } else {
          setInsights([
            { title: 'Get started', detail: 'Upload a resume and analyze a role to unlock insights.' },
          ])
        }
      } catch (e) {
        setInsights([
          { title: 'Get started', detail: 'Upload a resume and analyze a role to unlock insights.' },
        ])
      } finally {
        setLoading(false)
      }
    }
    run()
  }, [])

  return (
    <Card className="glass-card">
      <CardHeader>
        <CardTitle>AI Insights</CardTitle>
      </CardHeader>
      <CardContent>
        {loading ? (
          <div className="space-y-3">
            <div className="h-4 w-3/5 bg-gray-200 rounded animate-pulse"></div>
            <div className="h-4 w-4/5 bg-gray-200 rounded animate-pulse"></div>
            <div className="h-4 w-2/5 bg-gray-200 rounded animate-pulse"></div>
          </div>
        ) : (
          <ul className="space-y-3">
            {insights.map((insight, idx) => (
              <li key={idx} className="p-3 rounded-md bg-blue-50 text-blue-900">
                <div className="font-medium">{insight.title}</div>
                <div className="text-sm text-blue-800">{insight.detail}</div>
              </li>
            ))}
          </ul>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/dashboard/components/application-pipeline.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { FileText, Send, Calendar, CheckCircle2, XCircle } from 'lucide-react'

interface PipelineStats {
  applied: number
  screening: number
  interview: number
  offer: number
  rejected: number
}

export function ApplicationPipeline() {
  const [stats, setStats] = useState<PipelineStats>({
    applied: 0,
    screening: 0,
    interview: 0,
    offer: 0,
    rejected: 0
  })
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchPipelineStats()
  }, [])

  const fetchPipelineStats = async () => {
    try {
      const response = await fetch('/api/applications/pipeline-stats')
      if (response.ok) {
        const data = await response.json()
        setStats(data)
      }
    } catch (error) {
      console.error('[PIPELINE] Error fetching stats:', error)
    } finally {
      setLoading(false)
    }
  }

  const stages = [
    { name: 'Applied', count: stats.applied, icon: FileText, color: 'bg-blue-500', textColor: 'text-blue-600' },
    { name: 'Screening', count: stats.screening, icon: Send, color: 'bg-purple-500', textColor: 'text-purple-600' },
    { name: 'Interview', count: stats.interview, icon: Calendar, color: 'bg-yellow-500', textColor: 'text-yellow-600' },
    { name: 'Offer', count: stats.offer, icon: CheckCircle2, color: 'bg-green-500', textColor: 'text-green-600' },
    { name: 'Rejected', count: stats.rejected, icon: XCircle, color: 'bg-red-500', textColor: 'text-red-600' }
  ]

  const total = stats.applied + stats.screening + stats.interview + stats.offer + stats.rejected

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Application Pipeline</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-4">
            <div className="h-24 bg-muted rounded"></div>
            <div className="h-24 bg-muted rounded"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Application Pipeline</span>
          <span className="text-sm font-normal text-muted-foreground">{total} Total</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {stages.map((stage, index) => {
            const percentage = total > 0 ? (stage.count / total) * 100 : 0
            const Icon = stage.icon

            return (
              <div key={stage.name} className="space-y-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Icon className={`w-5 h-5 ${stage.textColor}`} />
                    <span className="font-medium">{stage.name}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-2xl font-bold">{stage.count}</span>
                    <span className="text-sm text-muted-foreground">
                      ({percentage.toFixed(0)}%)
                    </span>
                  </div>
                </div>
                <div className="w-full bg-muted rounded-full h-3 overflow-hidden">
                  <div
                    className={`${stage.color} h-full rounded-full transition-all duration-500`}
                    style={{ width: `${percentage}%` }}
                  />
                </div>
              </div>
            )
          })}
        </div>

        {/* Success Rate */}
        <div className="mt-6 pt-6 border-t">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Success Rate</span>
            <span className="text-lg font-bold text-green-600">
              {total > 0 ? ((stats.offer / total) * 100).toFixed(1) : 0}%
            </span>
          </div>
          <p className="text-xs text-muted-foreground mt-1">
            Offers received out of total applications
          </p>
        </div>

        {/* Conversion Rate */}
        <div className="mt-4">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Interview Conversion</span>
            <span className="text-lg font-bold text-yellow-600">
              {stats.applied > 0 ? ((stats.interview / stats.applied) * 100).toFixed(1) : 0}%
            </span>
          </div>
          <p className="text-xs text-muted-foreground mt-1">
            Applications that reached interview stage
          </p>
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/dashboard/components/dashboard-header.tsx">
'use client'

import { signOut } from 'next-auth/react'
import { Button } from '@/components/ui/button'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { LogOut, Settings, User } from 'lucide-react'

interface DashboardHeaderProps {
  user: {
    name?: string | null
    email?: string | null
    image?: string | null
  }
}

export function DashboardHeader({ user }: DashboardHeaderProps) {
  const handleSignOut = () => {
    signOut({ callbackUrl: '/' })
  }

  return (
    <header className="text-foreground brand-gradient">
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between">
          <div className="flex items-center gap-3">
            <img src="/icon-192.svg" alt="Career Lever AI" className="h-8 w-8" />
            <h1 className="text-lg font-semibold sm:text-xl">Career Lever AI</h1>
          </div>

          <div className="flex items-center space-x-4">
            <a href="/reverse-market" className="text-sm underline underline-offset-4 hover:opacity-90">Reverse Market</a>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="secondary" className="relative h-8 w-8 rounded-full">
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={user.image || ''} alt={user.name || ''} />
                    <AvatarFallback>
                      {user.name?.charAt(0)?.toUpperCase() || 'U'}
                    </AvatarFallback>
                  </Avatar>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56 sm:w-64" align="end" forceMount sideOffset={8}>
                <div className="flex items-center justify-start gap-2 p-2">
                  <div className="flex flex-col space-y-1 leading-none">
                    {user.name && <p className="font-medium truncate">{user.name}</p>}
                    {user.email && (
                      <p className="max-w-[180px] sm:max-w-[220px] truncate text-sm text-muted-foreground">
                        {user.email}
                      </p>
                    )}
                  </div>
                </div>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <User className="mr-2 h-4 w-4" />
                  <span>Profile</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Settings className="mr-2 h-4 w-4" />
                  <span>Settings</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleSignOut}>
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Log out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </div>
    </header>
  )
}
</file>

<file path="src/app/dashboard/components/enterprise-sidebar.tsx">
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Briefcase, LineChart, Layers, Wand2, Users, Settings } from 'lucide-react'

export function EnterpriseSidebar() {
  const pathname = usePathname()
  const nav = [
    { label: 'Overview', href: '/dashboard', icon: LineChart },
    { label: 'Career Finder', href: '/career-finder/resume', icon: Layers },
    { label: 'Analytics', href: '/analytics', icon: LineChart },
    { label: 'Job Boards', href: '/job-boards', icon: Briefcase },
    { label: 'Resume Builder', href: '/resume-builder', icon: Wand2 },
    { label: 'Network', href: '/network', icon: Users },
  ]

  return (
    <aside className="hidden lg:block sidebar bg-card text-card-foreground dark:bg-gray-900 dark:text-gray-100">
      <div className="nav-group">
        <div className="nav-group-title">Navigation</div>
        <nav>
          {nav.map((item) => {
            const active = pathname === item.href
            const Icon = item.icon
            return (
              <Link key={item.href} href={item.href} className={`nav-item ${active ? 'active' : ''}`}>
                <Icon className="h-5 w-5" />
                <span className="text-sm">{item.label}</span>
              </Link>
            )
          })}
        </nav>
      </div>

      <div className="nav-group">
        <div className="nav-group-title">Settings</div>
        <Link href="#" className="nav-item">
          <Settings className="h-5 w-5" />
          <span className="text-sm">Preferences</span>
        </Link>
      </div>
    </aside>
  )
}
</file>

<file path="src/app/dashboard/components/follow-up-reminders.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Bell, Mail, Calendar, CheckCircle2 } from 'lucide-react'
import Link from 'next/link'

interface FollowUpItem {
  id: string
  company: string
  jobTitle: string
  appliedDate: string
  daysSinceApplied: number
  status: string
  priority: 'high' | 'medium' | 'low'
}

export function FollowUpReminders() {
  const [reminders, setReminders] = useState<FollowUpItem[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchFollowUpReminders()
  }, [])

  const fetchFollowUpReminders = async () => {
    try {
      const response = await fetch('/api/applications/follow-up-reminders')
      if (response.ok) {
        const data = await response.json()
        setReminders(data)
      }
    } catch (error) {
      console.error('[FOLLOW_UP] Error:', error)
    } finally {
      setLoading(false)
    }
  }

  const markAsFollowedUp = async (id: string) => {
    try {
      await fetch(`/api/applications/${id}/follow-up`, {
        method: 'POST'
      })
      // Remove from list
      setReminders(prev => prev.filter(r => r.id !== id))
    } catch (error) {
      console.error('[FOLLOW_UP] Error marking as followed up:', error)
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'text-red-600 bg-red-50 dark:bg-red-950'
      case 'medium': return 'text-yellow-600 bg-yellow-50 dark:bg-yellow-950'
      case 'low': return 'text-blue-600 bg-blue-50 dark:bg-blue-950'
      default: return 'text-gray-600 bg-gray-50 dark:bg-gray-950'
    }
  }

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Follow-Up Reminders</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-3">
            <div className="h-16 bg-muted rounded"></div>
            <div className="h-16 bg-muted rounded"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Bell className="w-5 h-5" />
            Follow-Up Reminders
          </div>
          {reminders.length > 0 && (
            <span className="text-sm font-normal px-3 py-1 bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-200 rounded-full">
              {reminders.length}
            </span>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent>
        {reminders.length === 0 ? (
          <div className="text-center py-8">
            <CheckCircle2 className="w-12 h-12 mx-auto text-green-500 mb-3" />
            <p className="text-sm text-muted-foreground">
              All caught up! No follow-ups needed right now.
            </p>
          </div>
        ) : (
          <div className="space-y-3">
            {reminders.map((reminder) => (
              <div
                key={reminder.id}
                className={`p-4 rounded-lg border-2 ${getPriorityColor(reminder.priority)}`}
              >
                <div className="flex items-start justify-between gap-3">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-semibold truncate">{reminder.jobTitle}</h4>
                      <span className={`text-xs px-2 py-0.5 rounded-full ${
                        reminder.priority === 'high' ? 'bg-red-200 dark:bg-red-800' :
                        reminder.priority === 'medium' ? 'bg-yellow-200 dark:bg-yellow-800' :
                        'bg-blue-200 dark:bg-blue-800'
                      }`}>
                        {reminder.priority}
                      </span>
                    </div>
                    <p className="text-sm text-muted-foreground mb-2">{reminder.company}</p>
                    <div className="flex items-center gap-4 text-xs text-muted-foreground">
                      <div className="flex items-center gap-1">
                        <Calendar className="w-3 h-3" />
                        <span>{reminder.daysSinceApplied} days ago</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <span className="font-medium">{reminder.status}</span>
                      </div>
                    </div>
                  </div>
                  <div className="flex flex-col gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => markAsFollowedUp(reminder.id)}
                      className="whitespace-nowrap"
                    >
                      <Mail className="w-3 h-3 mr-1" />
                      Mark Done
                    </Button>
                  </div>
                </div>
                
                {/* Quick Action Suggestions */}
                <div className="mt-3 pt-3 border-t border-current/20">
                  <p className="text-xs font-medium mb-2">Suggested Action:</p>
                  <p className="text-xs opacity-80">
                    {reminder.daysSinceApplied >= 14 ? (
                      <>Send a polite follow-up email asking about your application status.</>
                    ) : reminder.daysSinceApplied >= 7 ? (
                      <>Consider reaching out to the hiring manager on LinkedIn.</>
                    ) : (
                      <>Wait a few more days before following up.</>
                    )}
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* View All Link */}
        {reminders.length > 0 && (
          <div className="mt-4 text-center">
            <Link href="/applications">
              <Button variant="ghost" size="sm">
                View All Applications →
              </Button>
            </Link>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/dashboard/components/metrics-hero.tsx">
'use client'

import { Card, CardContent } from '@/components/ui/card'
import React from 'react'
import { Skeleton } from '@/components/ui/skeleton'
import { TrendingUp, TrendingDown, Briefcase, Calendar, Target, Clock } from 'lucide-react'
import { useDashboardStatsData } from '@/hooks/use-dashboard-stats'

export function MetricsHero() {
  const { stats, isLoading } = useDashboardStatsData()

  const metricCards = [
    {
      title: 'Total Applications',
      value: stats.totalApplications,
      change: stats.appliedWeekChangePct,
      changeText: 'vs last week',
      icon: Briefcase,
      gradient: 'from-blue-500 to-cyan-500',
      bgGradient: 'from-blue-500/10 to-cyan-500/10',
    },
    {
      title: 'Applied This Week',
      value: stats.appliedThisWeek,
      subtitle: 'Keep a steady cadence',
      icon: Calendar,
      gradient: 'from-purple-500 to-pink-500',
      bgGradient: 'from-purple-500/10 to-pink-500/10',
    },
    {
      title: 'Interview Rate',
      value: `${stats.interviewRate}%`,
      change: 2,
      changeText: 'pts increase',
      icon: Target,
      gradient: 'from-green-500 to-emerald-500',
      bgGradient: 'from-green-500/10 to-emerald-500/10',
    },
    {
      title: 'Avg Response Time',
      value: `${stats.averageResponseTime}d`,
      subtitle: 'Goal: < 7 days',
      icon: Clock,
      gradient: 'from-orange-500 to-red-500',
      bgGradient: 'from-orange-500/10 to-red-500/10',
    },
  ]

  return (
    <div className="space-y-4">
      {isLoading ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="overflow-hidden">
              <CardContent className="p-6">
                <Skeleton className="h-4 w-24 mb-3" />
                <Skeleton className="h-8 w-16 mb-2" />
                <Skeleton className="h-3 w-32" />
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {metricCards.map((metric, index) => (
            <Card 
              key={index}
              className="group relative overflow-hidden border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl hover:from-white/10 hover:to-white/[0.05] transition-all duration-300 hover:scale-[1.02] hover:shadow-2xl hover:shadow-primary/20"
            >
              <div className={`absolute inset-0 bg-gradient-to-br ${metric.bgGradient} opacity-0 group-hover:opacity-100 transition-opacity duration-300`} />
              
              <CardContent className="relative p-6">
                {/* Icon */}
                <div className={`inline-flex items-center justify-center w-12 h-12 rounded-xl bg-gradient-to-br ${metric.gradient} mb-4 shadow-lg`}>
                  <metric.icon className="w-6 h-6 text-white" />
                </div>

                {/* Label */}
                <div className="text-sm font-medium text-muted-foreground mb-2">
                  {metric.title}
                </div>

                {/* Value */}
                <div className="text-4xl font-bold text-foreground mb-2 tracking-tight">
                  {metric.value}
                </div>

                {/* Change or Subtitle */}
                {metric.change !== undefined ? (
                  <div className={`flex items-center gap-1 text-sm font-medium ${
                    Number(metric.change) >= 0 ? 'text-green-500' : 'text-red-500'
                  }`}>
                    {Number(metric.change) >= 0 ? (
                      <TrendingUp className="w-4 h-4" />
                    ) : (
                      <TrendingDown className="w-4 h-4" />
                    )}
                    <span>
                      {Number(metric.change) >= 0 ? '+' : ''}{metric.change}% {metric.changeText}
                    </span>
                  </div>
                ) : (
                  <div className="text-xs text-muted-foreground">
                    {metric.subtitle}
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}
      
      {/* Inbox Status */}
      <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl">
        <CardContent className="p-4">
          <InboxStatusChips />
        </CardContent>
      </Card>
    </div>
  )
}

function InboxStatusChips() {
  const [state, setState] = React.useState<{ gmail?: boolean; outlook?: boolean; syncing?: boolean; last?: string }>({ syncing: false })
  React.useEffect(() => {
    const run = async () => {
      try {
        setState(s => ({ ...s, syncing: true }))
        const res = await fetch('/api/inbox/run', { method: 'POST' })
        const j = await res.json().catch(()=>({}))
        if (res.ok) {
          setState({ gmail: !!j.gmailLinked, outlook: !!j.outlookLinked, syncing: false, last: new Date().toLocaleTimeString() })
        } else {
          setState(s => ({ ...s, syncing: false }))
        }
      } catch { setState(s => ({ ...s, syncing: false })) }
    }
    run()
  }, [])
  return (
    <div className="flex items-center gap-3 flex-wrap">
      <div className="flex items-center gap-2 text-sm text-muted-foreground">
        <span className="font-medium">Inbox Status:</span>
      </div>
      <span className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-all ${
        state.gmail 
          ? 'bg-gradient-to-r from-green-500/20 to-emerald-500/20 text-green-400 border border-green-500/30' 
          : 'bg-white/5 text-muted-foreground border border-white/10'
      }`}>
        Gmail {state.gmail ? '✓' : '○'}
      </span>
      <span className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-all ${
        state.outlook 
          ? 'bg-gradient-to-r from-blue-500/20 to-cyan-500/20 text-blue-400 border border-blue-500/30' 
          : 'bg-white/5 text-muted-foreground border border-white/10'
      }`}>
        Outlook {state.outlook ? '✓' : '○'}
      </span>
      {state.syncing && (
        <span className="px-3 py-1.5 rounded-lg text-xs font-medium bg-gradient-to-r from-purple-500/20 to-pink-500/20 text-purple-400 border border-purple-500/30 animate-pulse">
          Syncing...
        </span>
      )}
      {state.last && !state.syncing && (
        <span className="px-3 py-1.5 rounded-lg text-xs font-medium bg-card/5 text-muted-foreground border border-white/10">
          Last sync: {state.last}
        </span>
      )}
    </div>
  )
}
</file>

<file path="src/app/dashboard/components/quick-actions.tsx">
'use client'

import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import {
  Upload,
  FileText,
  Search,
  Users,
  BarChart3,
  Sparkles,
  ArrowRight,
  Zap
} from 'lucide-react'

const quickActions = [
  {
    title: 'Career Finder',
    description: 'Start the complete AI-powered job application workflow',
    icon: Sparkles,
    href: '/career-finder/resume',
    gradient: 'from-blue-600 via-purple-600 to-pink-600',
    bgGradient: 'from-blue-500/10 via-purple-500/10 to-pink-500/10',
    primary: true,
  },
  {
    title: 'Upload Resume',
    description: 'Upload and parse your resume for customization',
    icon: Upload,
    href: '/career-finder/resume',
    gradient: 'from-blue-500 to-cyan-500',
    bgGradient: 'from-blue-500/10 to-cyan-500/10',
  },
  {
    title: 'Find Jobs',
    description: 'Search for jobs with AI-powered matching',
    icon: Search,
    href: '/career-finder/search',
    gradient: 'from-green-500 to-emerald-500',
    bgGradient: 'from-green-500/10 to-emerald-500/10',
  },
  {
    title: 'Optimize Resume',
    description: 'Tailor your resume for a specific job',
    icon: Zap,
    href: '/career-finder/optimizer',
    gradient: 'from-purple-500 to-pink-500',
    bgGradient: 'from-purple-500/10 to-pink-500/10',
  },
  {
    title: 'Research Company',
    description: 'Get insights about a potential employer',
    icon: Users,
    href: '/career-finder/company',
    gradient: 'from-orange-500 to-red-500',
    bgGradient: 'from-orange-500/10 to-red-500/10',
  },
  {
    title: 'Generate Cover Letter',
    description: 'Create a personalized cover letter',
    icon: FileText,
    href: '/cover-letter',
    gradient: 'from-red-500 to-pink-500',
    bgGradient: 'from-red-500/10 to-pink-500/10',
  },
  {
    title: 'View Applications',
    description: 'Track and manage your job applications',
    icon: BarChart3,
    href: '/analytics',
    gradient: 'from-teal-500 to-cyan-500',
    bgGradient: 'from-teal-500/10 to-cyan-500/10',
  },
]

export function QuickActions() {
  const router = useRouter()

  return (
    <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl overflow-hidden">
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-2 text-foreground text-2xl font-bold">
          <Sparkles className="h-6 w-6 text-primary" />
          Quick Actions
        </CardTitle>
        <CardDescription className="text-muted-foreground">
          Get started with common tasks
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {/* Primary Action - Featured Card */}
          {quickActions.filter(action => action.primary).map((action, index) => (
            <div
              key={index}
              onClick={() => router.push(action.href)}
              className="group relative overflow-hidden rounded-2xl cursor-pointer transition-all duration-300 hover:scale-[1.02]"
            >
              {/* Gradient Background */}
              <div className={`absolute inset-0 bg-gradient-to-r ${action.gradient} opacity-90 group-hover:opacity-100 transition-opacity`} />
              
              {/* Content */}
              <div className="relative p-6 flex items-center gap-4">
                <div className="flex-shrink-0 w-14 h-14 rounded-xl bg-card/20 backdrop-blur-sm flex items-center justify-center">
                  <action.icon className="h-7 w-7 text-white" />
                </div>
                <div className="flex-1">
                  <h3 className="font-bold text-lg text-white mb-1">{action.title}</h3>
                  <p className="text-sm text-white/90">{action.description}</p>
                </div>
                <ArrowRight className="h-6 w-6 text-white group-hover:translate-x-1 transition-transform" />
              </div>
            </div>
          ))}

          {/* Secondary Actions - Grid */}
          <div>
            <h3 className="text-sm font-semibold text-foreground mb-4 flex items-center gap-2">
              <Zap className="h-4 w-4 text-primary" />
              Quick Tools
            </h3>
            <div className="grid grid-cols-1 gap-3 sm:grid-cols-2 lg:grid-cols-3">
              {quickActions.filter(action => !action.primary).map((action, index) => (
                <div
                  key={index}
                  onClick={() => router.push(action.href)}
                  className="group relative overflow-hidden rounded-xl cursor-pointer transition-all duration-300 hover:scale-[1.02] border border-white/10 bg-gradient-to-br from-white/5 to-white/[0.02] hover:from-white/10 hover:to-white/[0.05]"
                >
                  {/* Hover Gradient Overlay */}
                  <div className={`absolute inset-0 bg-gradient-to-br ${action.bgGradient} opacity-0 group-hover:opacity-100 transition-opacity duration-300`} />
                  
                  {/* Content */}
                  <div className="relative p-5 flex flex-col h-full min-h-[140px]">
                    <div className={`inline-flex items-center justify-center w-10 h-10 rounded-lg bg-gradient-to-br ${action.gradient} mb-3 shadow-lg`}>
                      <action.icon className="h-5 w-5 text-white" />
                    </div>
                    <h4 className="font-semibold text-sm text-foreground mb-2 leading-tight">{action.title}</h4>
                    <p className="text-xs text-muted-foreground leading-relaxed flex-1">
                      {action.description}
                    </p>
                    <div className="mt-3 flex items-center gap-1 text-xs font-medium text-primary opacity-0 group-hover:opacity-100 transition-opacity">
                      <span>Get started</span>
                      <ArrowRight className="h-3 w-3" />
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/dashboard/components/recent-applications.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { formatRelativeDate } from '@/lib/utils'
import { JobApplication } from '@/types'
import { Briefcase, ExternalLink, Calendar } from 'lucide-react'

export function RecentApplications() {
  const [applications, setApplications] = useState<JobApplication[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchApplications()
  }, [])

  const fetchApplications = async () => {
    try {
      const response = await fetch('/api/applications?limit=5')
      if (response.ok) {
        const data = await response.json()
        setApplications(data.applications)
      }
    } catch (error) {
      console.error('Failed to fetch applications:', error)
    } finally {
      setLoading(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'applied':
        return 'bg-blue-100 text-blue-800'
      case 'interviewing':
        return 'bg-yellow-100 text-yellow-800'
      case 'offer':
        return 'bg-green-100 text-green-800'
      case 'rejected':
        return 'bg-red-100 text-red-800'
      case 'withdrawn':
        return 'bg-muted text-foreground'
      default:
        return 'bg-muted text-foreground'
    }
  }

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Briefcase className="h-5 w-5" />
            Recent Applications
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="animate-pulse">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              <Briefcase className="h-5 w-5" />
              Recent Applications
            </CardTitle>
            <CardDescription>
              Your latest job applications and their status
            </CardDescription>
          </div>
          <Button variant="outline" size="sm">
            View All
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {applications.length === 0 ? (
          <div className="text-center py-8">
            <Briefcase className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-medium text-foreground mb-2">No applications yet</h3>
            <p className="text-muted-foreground mb-4">
              Start your job search by uploading a resume and analyzing job descriptions.
            </p>
            <Button>Upload Resume</Button>
          </div>
        ) : (
          <div className="space-y-4">
            {applications.map((application) => (
              <div
                key={application._id}
                className="flex items-center justify-between p-4 border rounded-lg hover:bg-background transition-colors"
              >
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h4 className="font-semibold text-foreground">
                      {application.jobTitle}
                    </h4>
                    <Badge className={getStatusColor(application.applicationStatus)}>
                      {application.applicationStatus}
                    </Badge>
                  </div>
                  <p className="text-sm text-muted-foreground mb-2">
                    {application.companyName}
                  </p>
                  {application.applicationStatus === 'saved' && (
                    <div className="text-xs text-muted-foreground">Tip: Apply on the employer site, then run Inbox Sync to auto-update status.</div>
                  )}
                  <div className="flex items-center gap-4 text-xs text-muted-foreground">
                    <span className="flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      {application.appliedDate
                        ? formatRelativeDate(new Date(application.appliedDate))
                        : 'Not applied yet'
                      }
                    </span>
                    {application.jobUrl && (
                      <a
                        href={application.jobUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-1 text-blue-600 hover:text-blue-800"
                      >
                        <ExternalLink className="h-3 w-3" />
                        View Job
                      </a>
                    )}
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" size="sm">
                    Edit
                  </Button>
                  <Button variant="outline" size="sm" onClick={async ()=>{ try { const r = await fetch('/api/inbox/run', { method: 'POST' }); if (r.ok) { fetchApplications() } } catch {} }}>Sync Inbox</Button>
                  <a href={`/applications/${application._id}`} className="inline-flex items-center px-3 py-2 border rounded text-sm">
                    View Details
                  </a>
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/dashboard/components/recent-cover-letters.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Download, FileText } from 'lucide-react'
import { Skeleton } from '@/components/ui/skeleton'
import toast from 'react-hot-toast'

export function RecentCoverLetters() {
  const [letters, setLetters] = useState<Array<any>>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const load = async () => {
      try {
        const resp = await fetch('/api/cover-letter/list')
        if (!resp.ok) throw new Error('Failed to load cover letters')
        const data = await resp.json()
        setLetters(data.letters || [])
      } catch (e) {
        toast.error('Failed to load cover letters')
      } finally {
        setLoading(false)
      }
    }
    load()
  }, [])

  const download = async (content: string, fileName: string) => {
    const html = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>${fileName}</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.5;color:#333;max-width:8.5in;margin:0 auto;padding:0.5in;white-space:pre-wrap}</style></head><body>${content.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
    try {
      const resp = await fetch('/api/resume/export/pdf', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ html, filename: `${fileName}.pdf` }) })
      if (!resp.ok) throw new Error('Failed')
      const blob = await resp.blob()
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${fileName}.pdf`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch {
      toast.error('Failed to download')
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Recent Cover Letters</CardTitle>
      </CardHeader>
      <CardContent>
        {loading ? (
          <div className="space-y-3">
            {[...Array(3)].map((_, i) => (
              <Skeleton key={i} className="h-16" />
            ))}
          </div>
        ) : letters.length === 0 ? (
          <div className="text-sm text-muted-foreground">No cover letters yet.</div>
        ) : (
          <div className="space-y-3">
            {letters.map((l) => (
              <div key={l._id} className="flex items-center justify-between border rounded p-3">
                <div className="text-sm">
                  <div className="font-medium">{l.jobTitle} @ {l.companyName}</div>
                  <div className="text-muted-foreground">{new Date(l.createdAt).toLocaleString()}</div>
                </div>
                <div className="flex gap-2">
                  <Button size="sm" variant="outline" onClick={() => download(l.content, `${l.companyName}_${l.jobTitle}`)}>
                    <Download className="h-4 w-4 mr-1" /> PDF
                  </Button>
                  <a href="/cover-letter" className="inline-flex items-center text-sm px-3 py-2 border rounded">
                    <FileText className="h-4 w-4 mr-1" /> New
                  </a>
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/dashboard/components/response-time-tracker.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Clock, TrendingUp, TrendingDown } from 'lucide-react'

interface ResponseMetrics {
  averageResponseTime: number
  fastestResponse: number
  slowestResponse: number
  totalResponses: number
  trend: 'up' | 'down' | 'stable'
}

export function ResponseTimeTracker() {
  const [metrics, setMetrics] = useState<ResponseMetrics>({
    averageResponseTime: 0,
    fastestResponse: 0,
    slowestResponse: 0,
    totalResponses: 0,
    trend: 'stable'
  })
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchResponseMetrics()
  }, [])

  const fetchResponseMetrics = async () => {
    try {
      const response = await fetch('/api/applications/response-metrics')
      if (response.ok) {
        const data = await response.json()
        setMetrics(data)
      }
    } catch (error) {
      console.error('[RESPONSE_METRICS] Error:', error)
    } finally {
      setLoading(false)
    }
  }

  const formatDays = (days: number) => {
    if (days === 0) return 'N/A'
    if (days < 1) return '< 1 day'
    if (days === 1) return '1 day'
    return `${Math.round(days)} days`
  }

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Response Time Tracking</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-4">
            <div className="h-20 bg-muted rounded"></div>
            <div className="h-20 bg-muted rounded"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Clock className="w-5 h-5" />
          Response Time Tracking
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {/* Average Response Time */}
          <div className="text-center p-6 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950 rounded-xl">
            <div className="text-sm text-muted-foreground mb-2">Average Response Time</div>
            <div className="text-4xl font-bold text-primary mb-2">
              {formatDays(metrics.averageResponseTime)}
            </div>
            <div className="flex items-center justify-center gap-2 text-sm">
              {metrics.trend === 'down' ? (
                <>
                  <TrendingDown className="w-4 h-4 text-green-600" />
                  <span className="text-green-600">Improving</span>
                </>
              ) : metrics.trend === 'up' ? (
                <>
                  <TrendingUp className="w-4 h-4 text-red-600" />
                  <span className="text-red-600">Slowing</span>
                </>
              ) : (
                <span className="text-muted-foreground">Stable</span>
              )}
            </div>
          </div>

          {/* Stats Grid */}
          <div className="grid grid-cols-2 gap-4">
            <div className="p-4 bg-muted rounded-lg">
              <div className="text-xs text-muted-foreground mb-1">Fastest</div>
              <div className="text-2xl font-bold text-green-600">
                {formatDays(metrics.fastestResponse)}
              </div>
            </div>
            <div className="p-4 bg-muted rounded-lg">
              <div className="text-xs text-muted-foreground mb-1">Slowest</div>
              <div className="text-2xl font-bold text-red-600">
                {formatDays(metrics.slowestResponse)}
              </div>
            </div>
          </div>

          {/* Total Responses */}
          <div className="pt-4 border-t">
            <div className="flex items-center justify-between">
              <span className="text-sm text-muted-foreground">Total Responses</span>
              <span className="text-lg font-bold">{metrics.totalResponses}</span>
            </div>
          </div>

          {/* Insights */}
          {metrics.averageResponseTime > 0 && (
            <div className="p-4 bg-yellow-50 dark:bg-yellow-950 rounded-lg">
              <p className="text-sm text-yellow-800 dark:text-yellow-200">
                {metrics.averageResponseTime <= 7 ? (
                  <>✨ Great! Companies are responding quickly to your applications.</>
                ) : metrics.averageResponseTime <= 14 ? (
                  <>⏳ Average response time. Keep following up after 1 week.</>
                ) : (
                  <>📧 Consider following up on applications older than 2 weeks.</>
                )}
              </p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/dashboard/components/stats-overview.tsx">
'use client'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import {
  Briefcase,
  TrendingUp,
  Calendar,
  Target
} from 'lucide-react'
import { useDashboardStatsData } from '@/hooks/use-dashboard-stats'

export function StatsOverview() {
  const { stats, isLoading: loading } = useDashboardStatsData()

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Overview</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="animate-pulse">
                <div className="h-4 bg-gray-200 rounded w-full mb-2"></div>
                <div className="h-6 bg-gray-200 rounded w-1/2"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-4">
      {/* Quick Stats */}
      <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-lg">
            <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center">
              <TrendingUp className="h-4 w-4 text-white" />
            </div>
            Your Progress
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="flex items-center justify-between p-3 rounded-lg bg-white/5 hover:bg-card/10 transition-colors">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center">
                <Briefcase className="h-4 w-4 text-white" />
              </div>
              <span className="text-sm font-medium text-foreground">Total Applications</span>
            </div>
            <Badge className="bg-gradient-to-r from-blue-500/20 to-cyan-500/20 text-blue-400 border-blue-500/30 hover:from-blue-500/30 hover:to-cyan-500/30">{stats.totalApplications}</Badge>
          </div>

          <div className="flex items-center justify-between p-3 rounded-lg bg-white/5 hover:bg-card/10 transition-colors">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-green-500 to-emerald-500 flex items-center justify-center">
                <Calendar className="h-4 w-4 text-white" />
              </div>
              <span className="text-sm font-medium text-foreground">Applied This Week</span>
            </div>
            <Badge className="bg-gradient-to-r from-green-500/20 to-emerald-500/20 text-green-400 border-green-500/30 hover:from-green-500/30 hover:to-emerald-500/30">{stats.appliedThisWeek}</Badge>
          </div>

          <div className="flex items-center justify-between p-3 rounded-lg bg-white/5 hover:bg-card/10 transition-colors">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
                <Target className="h-4 w-4 text-white" />
              </div>
              <span className="text-sm font-medium text-foreground">Interview Rate</span>
            </div>
            <Badge className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 text-purple-400 border-purple-500/30 hover:from-purple-500/30 hover:to-pink-500/30">{stats.interviewRate}%</Badge>
          </div>

          <div className="flex items-center justify-between p-3 rounded-lg bg-white/5 hover:bg-card/10 transition-colors">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-orange-500 to-red-500 flex items-center justify-center">
                <TrendingUp className="h-4 w-4 text-white" />
              </div>
              <span className="text-sm font-medium text-foreground">Avg Response Time</span>
            </div>
            <Badge className="bg-gradient-to-r from-orange-500/20 to-red-500/20 text-orange-400 border-orange-500/30 hover:from-orange-500/30 hover:to-red-500/30">{stats.averageResponseTime} days</Badge>
          </div>
        </CardContent>
      </Card>

      {/* Goals */}
      <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-lg">
            <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
              <Target className="h-4 w-4 text-white" />
            </div>
            Weekly Goals
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-foreground">Applications this week</span>
                <span className="text-sm font-bold text-primary">
                  {stats.appliedThisWeek}/5
                </span>
              </div>
              <div className="w-full bg-card/10 rounded-full h-2.5 overflow-hidden">
                <div
                  className="bg-gradient-to-r from-blue-500 to-cyan-500 h-2.5 rounded-full transition-all duration-500 shadow-lg shadow-blue-500/50"
                  style={{ width: `${Math.max(0, Math.min(100, (stats.appliedThisWeek / 5) * 100))}%` }}
                ></div>
              </div>
            </div>

            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-foreground">Network connections</span>
                <span className="text-sm font-bold text-primary">2/3</span>
              </div>
              <div className="w-full bg-card/10 rounded-full h-2.5 overflow-hidden">
                <div
                  className="bg-gradient-to-r from-green-500 to-emerald-500 h-2.5 rounded-full transition-all duration-500 shadow-lg shadow-green-500/50"
                  style={{ width: '67%' }}
                ></div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Tips */}
      <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl overflow-hidden">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-lg">
            <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-yellow-500 to-orange-500 flex items-center justify-center">
              <span className="text-white text-sm">💡</span>
            </div>
            Pro Tips
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="relative overflow-hidden p-4 rounded-xl bg-gradient-to-br from-blue-500/10 to-cyan-500/10 border border-blue-500/20">
              <div className="absolute top-0 right-0 w-20 h-20 bg-blue-500/10 rounded-full blur-2xl" />
              <p className="text-sm text-foreground relative z-10">
                <span className="font-bold text-blue-400">Customize your resume</span> for each application to increase your chances by 30%.
              </p>
            </div>
            <div className="relative overflow-hidden p-4 rounded-xl bg-gradient-to-br from-green-500/10 to-emerald-500/10 border border-green-500/20">
              <div className="absolute top-0 right-0 w-20 h-20 bg-green-500/10 rounded-full blur-2xl" />
              <p className="text-sm text-foreground relative z-10">
                <span className="font-bold text-green-400">Follow up</span> within 7-10 days if you haven't heard back.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/dashboard/components/trends-chart.tsx">
'use client'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

// Simple trends display without external chart library
export default function TrendsChart() {
  const weeklyData = [
    { week: 'W1', applications: 2 },
    { week: 'W2', applications: 4 },
    { week: 'W3', applications: 3 },
    { week: 'W4', applications: 6 },
    { week: 'W5', applications: 5 },
    { week: 'W6', applications: 7 },
  ]

  const maxApps = Math.max(...weeklyData.map(d => d.applications))

  return (
    <Card className="glass-card">
      <CardHeader>
        <CardTitle>Application Trends</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {weeklyData.map((data) => (
            <div key={data.week} className="flex items-center gap-3">
              <span className="text-sm font-medium w-8 text-muted-foreground">{data.week}</span>
              <div className="flex-1 h-8 bg-secondary rounded-lg overflow-hidden">
                <div
                  className="h-full bg-primary transition-all duration-500"
                  style={{ width: `${(data.applications / maxApps) * 100}%` }}
                />
              </div>
              <span className="text-sm font-semibold w-8 text-right">{data.applications}</span>
            </div>
          ))}
        </div>
        <div className="mt-4 pt-4 border-t">
          <p className="text-sm text-muted-foreground">
            Total Applications: <span className="font-semibold text-foreground">{weeklyData.reduce((sum, d) => sum + d.applications, 0)}</span>
          </p>
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/dashboard/page.tsx">
import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import { DashboardHeader } from './components/dashboard-header'
import { QuickActions } from './components/quick-actions'
import { RecentApplications } from './components/recent-applications'
import { StatsOverview } from './components/stats-overview'
import { Skeleton } from '@/components/ui/skeleton'
import { MetricsHero } from './components/metrics-hero'
import dynamic from 'next/dynamic'
import { ActionCenter } from './components/action-center'

export default async function DashboardPage() {
  const session = await getServerSession(authOptions)

  if (!session) {
    redirect('/auth/signin')
  }

  const TrendsChart = dynamic(() => import('./components/trends-chart'), {
    ssr: false,
    loading: () => (
      <div className="space-y-3">
        <Skeleton className="h-6 w-40" />
        <Skeleton className="h-64 w-full" />
      </div>
    ),
  })

  const AIInsights = dynamic(() => import('./components/ai-insights'), {
    ssr: false,
    loading: () => (
      <div className="space-y-3">
        <Skeleton className="h-4 w-2/5" />
        <Skeleton className="h-14 w-full" />
        <Skeleton className="h-14 w-full" />
      </div>
    )
  })

  const RecentCoverLetters = dynamic(() => import('./components/recent-cover-letters').then(m => m.RecentCoverLetters), {
    ssr: false,
    loading: () => (
      <div className="space-y-3">
        <Skeleton className="h-5 w-48" />
        <Skeleton className="h-16 w-full" />
        <Skeleton className="h-16 w-full" />
      </div>
    )
  })

  return (
    <div className="min-h-screen bg-background">
      <main>
        <div className="dashboard-container grid grid-cols-1 lg:grid-cols-[1fr_340px] gap-8">
          <div className="space-y-8">
            <MetricsHero />
            <QuickActions />
            <ActionCenter />
            <TrendsChart />
            <RecentApplications />
          </div>
          <div className="space-y-8">
            <StatsOverview />
            <RecentCoverLetters />
            <AIInsights />
          </div>
        </div>
      </main>
    </div>
  )
}
</file>

<file path="src/app/interview-prep/components/interview-preparation.tsx">
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  Brain,
  MessageSquare,
  Target,
  Clock,
  CheckCircle,
  AlertCircle,
  Loader2,
  Play,
  BookOpen,
  Users,
  Lightbulb,
  ChevronRight
} from 'lucide-react'
import JobApplication from '@/models/JobApplication'
import toast from 'react-hot-toast'

interface InterviewPrepData {
  companyOverview: {
    name: string
    industry: string
    culture: string[]
    recentNews: string[]
    keyFacts: string[]
  }
  jobSpecificPrep: {
    roleRequirements: string[]
    technicalSkills: string[]
    behavioralQuestions: Array<{
      question: string
      suggestedAnswer: string
      tips: string[]
    }>
    technicalQuestions: Array<{
      question: string
      difficulty: 'beginner' | 'intermediate' | 'advanced'
      suggestedAnswer: string
      relatedSkills: string[]
    }>
  }
  candidatePreparation: {
    strengths: string[]
    potentialConcerns: string[]
    talkingPoints: string[]
    salaryExpectations: {
      range: string
      justification: string
      negotiationTips: string[]
    }
  }
  practicePlan: {
    timeline: Array<{
      day: number
      activities: string[]
      focus: string
    }>
    mockInterviewQuestions: string[]
    resources: Array<{
      type: 'article' | 'video' | 'tool'
      title: string
      url: string
      description: string
    }>
  }
}

interface InterviewPreparationProps {
  userId: string
}

export function InterviewPreparation({ userId }: InterviewPreparationProps) {
  const [applications, setApplications] = useState<any[]>([])
  const [selectedApplication, setSelectedApplication] = useState<string>('')
  const [prepData, setPrepData] = useState<InterviewPrepData | null>(null)
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState('overview')

  useEffect(() => {
    fetchApplications()
  }, [])

  const fetchApplications = async () => {
    try {
      const response = await fetch('/api/applications')
      if (response.ok) {
        const data = await response.json()
        setApplications(data.applications || [])
      }
    } catch (error) {
      console.error('Failed to fetch applications:', error)
    }
  }

  const generatePreparation = async () => {
    if (!selectedApplication) {
      toast.error('Please select a job application')
      return
    }

    setLoading(true)
    try {
      const response = await fetch('/api/interview/prepare', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jobApplicationId: selectedApplication,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to generate preparation')
      }

      const data = await response.json()
      setPrepData(data.preparation)
      toast.success('Interview preparation generated successfully!')
    } catch (error) {
      console.error('Preparation error:', error)
      toast.error(error instanceof Error ? error.message : 'Failed to generate preparation')
    } finally {
      setLoading(false)
    }
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-100 text-green-800'
      case 'intermediate': return 'bg-yellow-100 text-yellow-800'
      case 'advanced': return 'bg-red-100 text-red-800'
      default: return 'bg-muted text-foreground'
    }
  }

  return (
    <div className="space-y-8">
      {/* Job Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5" />
            Select Job Application
          </CardTitle>
          <CardDescription>
            Choose the job application you want to prepare for
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4">
            <div className="flex-1">
              <Select value={selectedApplication} onValueChange={setSelectedApplication}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a job application" />
                </SelectTrigger>
                <SelectContent>
                  {applications.map((app) => (
                    <SelectItem key={app._id} value={app._id}>
                      {app.jobTitle} at {app.companyName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <Button
              onClick={generatePreparation}
              disabled={loading || !selectedApplication}
              className="min-w-[140px]"
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Brain className="mr-2 h-4 w-4" />
                  Prepare
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Preparation Content */}
      {prepData && (
        <div className="space-y-6">
          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>
              Interview preparation generated for {prepData.companyOverview.name} - {prepData.jobSpecificPrep.roleRequirements[0]}
            </AlertDescription>
          </Alert>

          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="questions">Questions</TabsTrigger>
              <TabsTrigger value="preparation">Preparation</TabsTrigger>
              <TabsTrigger value="practice">Practice</TabsTrigger>
              <TabsTrigger value="resources">Resources</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              {/* Company Overview */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Company Overview</CardTitle>
                    <CardDescription>Get to know {prepData.companyOverview.name}</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <h4 className="font-medium text-foreground mb-2">Industry</h4>
                      <p className="text-muted-foreground">{prepData.companyOverview.industry}</p>
                    </div>
                    <div>
                      <h4 className="font-medium text-foreground mb-2">Key Facts</h4>
                      <ul className="space-y-1">
                        {prepData.companyOverview.keyFacts.map((fact, index) => (
                          <li key={index} className="text-sm text-muted-foreground flex items-center gap-2">
                            <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
                            {fact}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Company Culture</CardTitle>
                    <CardDescription>Values and work environment</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-wrap gap-2">
                      {prepData.companyOverview.culture.map((value, index) => (
                        <Badge key={index} variant="secondary">
                          {value}
                        </Badge>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Role Requirements */}
              <Card>
                <CardHeader>
                  <CardTitle>Role Requirements</CardTitle>
                  <CardDescription>What the company is looking for</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <h4 className="font-medium text-foreground mb-2">Key Requirements</h4>
                      <ul className="space-y-2">
                        {prepData.jobSpecificPrep.roleRequirements.map((req, index) => (
                          <li key={index} className="flex items-center gap-2 text-sm">
                            <CheckCircle className="h-4 w-4 text-green-500" />
                            {req}
                          </li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-medium text-foreground mb-2">Technical Skills</h4>
                      <div className="flex flex-wrap gap-2">
                        {prepData.jobSpecificPrep.technicalSkills.map((skill, index) => (
                          <Badge key={index} variant="outline">
                            {skill}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="questions" className="space-y-6">
              <Tabs defaultValue="behavioral">
                <TabsList>
                  <TabsTrigger value="behavioral">Behavioral</TabsTrigger>
                  <TabsTrigger value="technical">Technical</TabsTrigger>
                </TabsList>

                <TabsContent value="behavioral" className="space-y-4">
                  <div className="space-y-4">
                    {prepData.jobSpecificPrep.behavioralQuestions.map((item, index) => (
                      <Card key={index}>
                        <CardHeader>
                          <CardTitle className="text-lg">{item.question}</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div>
                            <h4 className="font-medium text-foreground mb-2">Suggested Answer</h4>
                            <p className="text-foreground leading-relaxed">{item.suggestedAnswer}</p>
                          </div>
                          <div>
                            <h4 className="font-medium text-foreground mb-2">Tips</h4>
                            <ul className="space-y-1">
                              {item.tips.map((tip, tipIndex) => (
                                <li key={tipIndex} className="text-sm text-muted-foreground flex items-start gap-2">
                                  <ChevronRight className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                                  {tip}
                                </li>
                              ))}
                            </ul>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </TabsContent>

                <TabsContent value="technical" className="space-y-4">
                  <div className="space-y-4">
                    {prepData.jobSpecificPrep.technicalQuestions.map((item, index) => (
                      <Card key={index}>
                        <CardHeader>
                          <div className="flex items-center justify-between">
                            <CardTitle className="text-lg">{item.question}</CardTitle>
                            <Badge className={getDifficultyColor(item.difficulty)}>
                              {item.difficulty}
                            </Badge>
                          </div>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div>
                            <h4 className="font-medium text-foreground mb-2">Suggested Answer</h4>
                            <p className="text-foreground leading-relaxed">{item.suggestedAnswer}</p>
                          </div>
                          <div>
                            <h4 className="font-medium text-foreground mb-2">Related Skills</h4>
                            <div className="flex flex-wrap gap-2">
                              {item.relatedSkills.map((skill, skillIndex) => (
                                <Badge key={skillIndex} variant="outline">
                                  {skill}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </TabsContent>
              </Tabs>
            </TabsContent>

            <TabsContent value="preparation" className="space-y-6">
              {/* Your Strengths */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-green-700">
                    <CheckCircle className="h-5 w-5" />
                    Your Strengths
                  </CardTitle>
                  <CardDescription>What you bring to the table</CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {prepData.candidatePreparation.strengths.map((strength, index) => (
                      <li key={index} className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span>{strength}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>

              {/* Talking Points */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MessageSquare className="h-5 w-5" />
                    Key Talking Points
                  </CardTitle>
                  <CardDescription>Points to emphasize during the interview</CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3">
                    {prepData.candidatePreparation.talkingPoints.map((point, index) => (
                      <li key={index} className="flex items-start gap-3">
                        <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                          <span className="text-xs font-bold text-blue-600">{index + 1}</span>
                        </div>
                        <span className="text-foreground">{point}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>

              {/* Salary Expectations */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    Salary Expectations
                  </CardTitle>
                  <CardDescription>Negotiation preparation</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="bg-green-50 p-4 rounded-lg">
                    <h4 className="font-medium text-green-800 mb-2">Suggested Range</h4>
                    <p className="text-lg font-semibold text-green-700">{prepData.candidatePreparation.salaryExpectations.range}</p>
                    <p className="text-sm text-green-600 mt-1">{prepData.candidatePreparation.salaryExpectations.justification}</p>
                  </div>
                  <div>
                    <h4 className="font-medium text-foreground mb-2">Negotiation Tips</h4>
                    <ul className="space-y-2">
                      {prepData.candidatePreparation.salaryExpectations.negotiationTips.map((tip, index) => (
                        <li key={index} className="flex items-start gap-2 text-sm">
                          <Lightbulb className="h-4 w-4 text-yellow-500 mt-0.5 flex-shrink-0" />
                          {tip}
                        </li>
                      ))}
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="practice" className="space-y-6">
              {/* Practice Timeline */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Clock className="h-5 w-5" />
                    Practice Timeline
                  </CardTitle>
                  <CardDescription>Your 4-day interview preparation plan</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {prepData.practicePlan.timeline.map((day, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                            <span className="text-sm font-bold text-blue-600">D{day.day}</span>
                          </div>
                          <div>
                            <h4 className="font-medium">Day {day.day}</h4>
                            <p className="text-sm text-muted-foreground">{day.focus}</p>
                          </div>
                        </div>
                        <ul className="space-y-1 ml-11">
                          {day.activities.map((activity, actIndex) => (
                            <li key={actIndex} className="text-sm text-foreground flex items-center gap-2">
                              <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
                              {activity}
                            </li>
                          ))}
                        </ul>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Mock Interview Questions */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Play className="h-5 w-5" />
                    Mock Interview Questions
                  </CardTitle>
                  <CardDescription>Practice questions for mock interviews</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {prepData.practicePlan.mockInterviewQuestions.map((question, index) => (
                      <div key={index} className="flex items-start gap-3 p-3 bg-background rounded-lg">
                        <div className="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                          <span className="text-xs font-bold text-purple-600">{index + 1}</span>
                        </div>
                        <span className="text-foreground">{question}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="resources" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BookOpen className="h-5 w-5" />
                    Recommended Resources
                  </CardTitle>
                  <CardDescription>Additional materials to enhance your preparation</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {prepData.practicePlan.resources.map((resource, index) => (
                      <div key={index} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                        <div className="flex items-start gap-3">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            {resource.type === 'video' && <Play className="h-4 w-4 text-blue-600" />}
                            {resource.type === 'article' && <BookOpen className="h-4 w-4 text-blue-600" />}
                            {resource.type === 'tool' && <Target className="h-4 w-4 text-blue-600" />}
                          </div>
                          <div className="flex-1">
                            <h4 className="font-medium text-foreground">{resource.title}</h4>
                            <p className="text-sm text-muted-foreground mt-1">{resource.description}</p>
                            <div className="flex items-center gap-2 mt-2">
                              <Badge variant="outline" className="text-xs">
                                {resource.type}
                              </Badge>
                              <Button variant="ghost" size="sm" className="text-xs">
                                Access Resource
                                <ChevronRight className="ml-1 h-3 w-3" />
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/app/interview-prep/page.tsx">
import { Suspense } from 'react'
import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import { InterviewPreparation } from './components/interview-preparation'

export default async function InterviewPrepPage() {
  const session = await getServerSession(authOptions)

  if (!session) {
    redirect('/auth/signin')
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground">Interview Preparation</h1>
          <p className="mt-2 text-lg text-muted-foreground">
            AI-powered interview preparation tailored to your target role and company
          </p>
        </div>

        <Suspense fallback={<InterviewPrepSkeleton />}>
          <InterviewPreparation userId={session.user.id} />
        </Suspense>
      </div>
    </div>
  )
}

function InterviewPrepSkeleton() {
  return (
    <div className="space-y-8">
      {/* Job Selection Skeleton */}
      <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
        <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
        <div className="w-full h-12 bg-gray-200 rounded mb-4"></div>
        <div className="w-32 h-10 bg-gray-200 rounded"></div>
      </div>

      {/* Content Skeleton */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
              <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
              <div className="space-y-3">
                <div className="w-full h-4 bg-gray-200 rounded"></div>
                <div className="w-3/4 h-4 bg-gray-200 rounded"></div>
              </div>
            </div>
          ))}
        </div>
        <div className="space-y-6">
          {[...Array(2)].map((_, i) => (
            <div key={i} className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
              <div className="w-24 h-6 bg-gray-200 rounded mb-4"></div>
              <div className="w-full h-20 bg-gray-200 rounded"></div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/job-boards/components/job-boards-dashboard.tsx">
'use client'

import { useState, useEffect, useCallback } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Progress } from '@/components/ui/progress'
import {
  Send,
  CheckCircle,
  AlertTriangle,
  Zap,
  Target,
  TrendingUp,
  Clock,
  Settings,
  ExternalLink,
  Play,
  Pause,
  RefreshCw,
  Users,
  Building,
  Briefcase,
  FileText,
  Link,
  Globe,
  Loader2
} from 'lucide-react'
import toast from 'react-hot-toast'
import { useSession } from 'next-auth/react'

interface JobBoard {
  id: string
  name: string
  automationLevel: 'full' | 'partial' | 'manual'
  loginRequired: boolean
  features: {
    fileUpload: boolean
    coverLetter: boolean
    autoSubmit: boolean
  }
  status: 'connected' | 'disconnected' | 'error'
  lastUsed?: Date
  successRate?: number
  totalApplications?: number
}

interface BulkSubmission {
  selectedBoards: string[]
  selectedApplications: string[]
  status: 'idle' | 'running' | 'completed' | 'failed'
  progress: number
  results?: any[]
}

interface JobBoardsDashboardProps {
  userId: string
}

export function JobBoardsDashboard({ userId }: JobBoardsDashboardProps) {
  const { data: session } = useSession()
  const [jobBoards, setJobBoards] = useState<JobBoard[]>([])
  const [applications, setApplications] = useState<any[]>([])
  const [selectedBoards, setSelectedBoards] = useState<string[]>([])
  const [selectedApplications, setSelectedApplications] = useState<string[]>([])
  const [bulkSubmission, setBulkSubmission] = useState<BulkSubmission>({
    selectedBoards: [],
    selectedApplications: [],
    status: 'idle',
    progress: 0
  })
  const [isLoading, setIsLoading] = useState(true)
  const [autoPilotEnabled, setAutoPilotEnabled] = useState(true)
  const [jobsByBoard, setJobsByBoard] = useState<Record<string, Array<{ title?: string; url?: string; company?: string; location?: string }>>>({})
  const [jobsLoading, setJobsLoading] = useState<Record<string, boolean>>({})
  const [jobsOpen, setJobsOpen] = useState<Record<string, boolean>>({})
  const [autoPilotSettings, setAutoPilotSettings] = useState({
    dailyLimit: 10,
    jobBoards: [],
    keywords: '',
    locations: '',
    salaryRange: { min: 0, max: 0 },
    timeoutMs: 120000
  })
  const [autoPilotResults, setAutoPilotResults] = useState<Array<{ title?: string; url: string; company?: string; location?: string; source?: string }>>([])
  const [autoPilotRunning, setAutoPilotRunning] = useState(false)
  const [progress, setProgress] = useState<{ percent: number; stage: string }>({ percent: 0, stage: 'Idle' })
  const [qualityMode, setQualityMode] = useState<'speed'|'quality'>('speed')
  const [filters, setFilters] = useState<{ workType: 'any'|'remote'|'hybrid'|'onsite'; experienceLevel: 'any'|'entry'|'mid'|'senior'|'executive'; salaryMin?: number; maxResults?: number }>({ workType: 'any', experienceLevel: 'any', salaryMin: undefined, maxResults: 15 })

  // Load job boards and applications
  useEffect(() => {
    loadData()
  }, [])

  // When Auto-Pilot is enabled, try to prefill keywords/locations from resume/profile
  useEffect(() => {
    if (!autoPilotEnabled) return
    (async () => {
      try {
        // Prefill location from profile
        const prof = await fetch('/api/profile')
        if (prof.ok) {
          const pj = await prof.json()
          if (pj?.profile?.location) {
            setAutoPilotSettings(prev => ({ ...prev, locations: pj.profile.location }))
          }
        }
      } catch {}
      try {
        // Prefill keywords from resume titles (best-effort)
        const res = await fetch('/api/resume/list')
        if (res.ok) {
          const rj = await res.json()
          const txt: string = rj?.resumes?.[0]?.extractedText || ''
          if (txt && txt.length > 50) {
            const firstLines = txt.split(/\n|\r/).slice(0, 12).join(' ')
            const words = firstLines.match(/[A-Za-z][A-Za-z+\-]{2,}/g) || []
            const top = Array.from(new Set(words)).slice(0, 8).join(', ')
            if (top) setAutoPilotSettings(prev => ({ ...prev, keywords: top }))
          }
        }
      } catch {}
    })()
  }, [autoPilotEnabled])

  const loadData = async () => {
    setIsLoading(true)
    try {
      // Load available job boards
      const boardsResponse = await fetch('/api/job-boards/submit')
      const boardsData = await boardsResponse.json()

      // Load user's job applications
      const appsResponse = await fetch('/api/applications')
      const appsData = await appsResponse.json()

      // Load profile to prefill autopilot
      try {
        const profRes = await fetch('/api/profile')
        if (profRes.ok) {
          const pj = await profRes.json()
          const p = pj?.profile || {}
          setAutoPilotSettings(prev => ({
            ...prev,
            keywords: (p.skills && Array.isArray(p.skills) ? p.skills.slice(0, 8).join(', ') : prev.keywords),
            locations: (typeof p.location === 'string' && p.location) ? p.location : prev.locations,
          }))
        }
      } catch {}

      if (boardsData.success) {
        // Load user's job board integrations from database
        const integrationsResponse = await fetch('/api/job-boards/integrations')
        const integrationsData = await integrationsResponse.json()

        // Enhance job board data with user-specific status
        const enhancedBoards = boardsData.jobBoards.map((board: any) => {
          const integration = integrationsData.success ?
            integrationsData.integrations.find((i: any) => i.boardName === board.id) : null

          return {
            ...board,
            status: integration ? integration.status : 'disconnected',
            lastUsed: integration ? integration.lastApplicationAt : undefined,
            successRate: integration ?
              Math.round((integration.successfulApplications / Math.max(integration.totalApplications, 1)) * 100) : 0,
            totalApplications: integration ? integration.totalApplications : 0
          }
        })
        setJobBoards(enhancedBoards)
      }

      if (appsData.applications) {
        // Map to fields this UI expects minimally
        const mapped = appsData.applications.map((app: any) => ({
          _id: app._id,
          jobTitle: app.jobTitle,
          company: app.companyName, // UI uses company
          status: app.applicationStatus, // UI uses status
          createdAt: app.createdAt,
        }))
        setApplications(mapped)
      }
    } catch (error) {
      console.error('Failed to load data:', error)
      toast.error('Failed to load job board data')
    } finally {
      setIsLoading(false)
    }
  }

  const handleBoardSelection = (boardId: string, checked: boolean) => {
    setSelectedBoards(prev =>
      checked
        ? [...prev, boardId]
        : prev.filter(id => id !== boardId)
    )
  }

  const handleApplicationSelection = (appId: string, checked: boolean) => {
    setSelectedApplications(prev =>
      checked
        ? [...prev, appId]
        : prev.filter(id => id !== appId)
    )
  }

  const handleBulkSubmit = async () => {
    if (selectedBoards.length === 0 || selectedApplications.length === 0) {
      toast.error('Please select both job boards and applications')
      return
    }

    setBulkSubmission({
      selectedBoards,
      selectedApplications,
      status: 'running',
      progress: 0
    })

    try {
      const totalOperations = selectedBoards.length * selectedApplications.length
      let completedOperations = 0

      const results: any[] = []

      for (const boardId of selectedBoards) {
        for (const appId of selectedApplications) {
          try {
            const response = await fetch('/api/job-boards/submit', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                jobApplicationId: appId,
                jobBoards: [boardId],
                customizations: {}
              }),
            })

            const result = await response.json()
            results.push({ boardId, appId, ...result })

            completedOperations++
            setBulkSubmission(prev => ({
              ...prev,
              progress: (completedOperations / totalOperations) * 100
            }))

            // Small delay to avoid rate limiting
            await new Promise(resolve => setTimeout(resolve, 1000))
          } catch (error) {
            console.error(`Failed to submit ${appId} to ${boardId}:`, error)
            results.push({
              boardId,
              appId,
              success: false,
              error: error instanceof Error ? error.message : 'Unknown error'
            })

            completedOperations++
            setBulkSubmission(prev => ({
              ...prev,
              progress: (completedOperations / totalOperations) * 100
            }))
          }
        }
      }

      setBulkSubmission(prev => ({
        ...prev,
        status: 'completed',
        results
      }))

      const successful = results.filter(r => r.success).length
      toast.success(`Successfully submitted to ${successful} out of ${results.length} positions`)

      // Reset selections
      setSelectedBoards([])
      setSelectedApplications([])

    } catch (error) {
      console.error('Bulk submission error:', error)
      setBulkSubmission(prev => ({
        ...prev,
        status: 'failed'
      }))
      toast.error('Bulk submission failed')
    }
  }

  const connectToBoard = async (boardId: string) => {
    try {
      // Initiate OAuth flow
      const response = await fetch('/api/job-boards/oauth/authorize', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ boardName: boardId }),
      })

      const data = await response.json()

      if (data.success && data.authUrl) {
        // Redirect to OAuth authorization URL
        window.location.href = data.authUrl
      } else {
        throw new Error(data.error || 'Failed to initiate OAuth flow')
      }
    } catch (error) {
      console.error('Failed to connect to job board:', error)
      toast.error(`Failed to connect to ${jobBoards.find(b => b.id === boardId)?.name}`)
    }
  }

  const syncJobs = async (boardId: string) => {
    try {
      const resp = await fetch('/api/job-boards/jobs/sync', {
        method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId })
      })
      const json = await resp.json()
      if (!resp.ok || !json.success) throw new Error(json.error || 'Sync failed')
      toast.success(`Imported ${json.created} new, updated ${json.updated}`)
    } catch (e) {
      toast.error('Failed to sync jobs')
    }
  }

  const loadBoardJobs = async (boardId: string) => {
    setJobsLoading(prev => ({ ...prev, [boardId]: true }))
    try {
      const resp = await fetch('/api/job-boards/jobs/list', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId }) })
      const reqId = resp.headers.get('x-request-id') || ''
      const json = await resp.json().catch(()=>({}))
      if (!resp.ok || !json.success) {
        if (resp.status === 401) toast.error('Please re-connect this integration' + (reqId ? ` (Ref: ${reqId})` : ''))
        else toast.error((json.error || 'Failed to load jobs') + (reqId ? ` (Ref: ${reqId})` : ''))
        return
      }
      const jobs = (json.jobs || []).map((j: any) => ({ title: j.title || j.position || j.name, url: j.url || j.link, company: j.company || j.companyName, location: j.location }))
      setJobsByBoard(prev => ({ ...prev, [boardId]: jobs }))
      setJobsOpen(prev => ({ ...prev, [boardId]: true }))
    } catch {
      toast.error('Failed to load jobs')
    } finally {
      setJobsLoading(prev => ({ ...prev, [boardId]: false }))
    }
  }

  const getAutomationBadgeColor = (level: string) => {
    switch (level) {
      case 'full': return 'bg-green-100 text-green-800'
      case 'partial': return 'bg-yellow-100 text-yellow-800'
      default: return 'bg-muted text-foreground'
    }
  }

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'connected': return 'bg-green-100 text-green-800'
      case 'error': return 'bg-red-100 text-red-800'
      default: return 'bg-muted text-foreground'
    }
  }

  // Stats calculation
  const stats = {
    totalBoards: jobBoards.length,
    connectedBoards: jobBoards.filter(b => b.status === 'connected').length,
    totalApplications: applications.length,
    successfulApplications: applications.filter(a => a.status === 'offer').length,
    automationRate: Math.round((jobBoards.filter(b => b.automationLevel === 'full').length / jobBoards.length) * 100)
  }

  if (isLoading) {
    return (
      <div className="space-y-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <Card key={i}>
              <CardContent className="p-6">
                <div className="animate-pulse">
                  <div className="w-16 h-4 bg-gray-200 rounded mb-2"></div>
                  <div className="w-8 h-8 bg-gray-200 rounded"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, i) => (
            <Card key={i}>
              <CardContent className="p-6">
                <div className="animate-pulse">
                  <div className="w-24 h-6 bg-gray-200 rounded mb-4"></div>
                  <div className="w-full h-20 bg-gray-200 rounded"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Connected Boards</p>
                <p className="text-2xl font-bold">{stats.connectedBoards}/{stats.totalBoards}</p>
              </div>
              <Globe className="h-8 w-8 text-blue-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Applications</p>
                <p className="text-2xl font-bold">{stats.successfulApplications}/{stats.totalApplications}</p>
              </div>
              <Briefcase className="h-8 w-8 text-green-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Automation Rate</p>
                <p className="text-2xl font-bold">{stats.automationRate}%</p>
              </div>
              <Zap className="h-8 w-8 text-purple-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Success Rate</p>
                <p className="text-2xl font-bold">
                  {stats.totalApplications > 0
                    ? Math.round((stats.successfulApplications / stats.totalApplications) * 100)
                    : 0}%
                </p>
              </div>
              <TrendingUp className="h-8 w-8 text-orange-600" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Auto-Pilot Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="h-5 w-5" />
            Auto-Pilot Mode
          </CardTitle>
          <CardDescription>
            Automatically find and apply to jobs matching your criteria
          </CardDescription>
        </CardHeader>
        <CardContent>
          {/* Autopilot status */}
          <div className="mb-3 text-sm text-foreground">
            <AutopilotStatus />
          </div>
          <div className="flex items-center justify-between mb-4">
            <div>
              <h4 className="font-medium">Enable Auto-Pilot</h4>
              <p className="text-sm text-muted-foreground">
                Let Career Lever AI automatically find and apply to relevant positions
              </p>
            </div>
            <Button
              variant={autoPilotEnabled ? "default" : "outline"}
              onClick={() => setAutoPilotEnabled(!autoPilotEnabled)}
            >
              {autoPilotEnabled ? <Pause className="w-4 h-4 mr-2" /> : <Play className="w-4 h-4 mr-2" />}
              {autoPilotEnabled ? 'Disable' : 'Enable'} Auto-Pilot
            </Button>
          </div>

          {autoPilotEnabled && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-4 bg-background rounded-lg">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="dailyLimit">Daily Application Limit</Label>
                  <Input
                    id="dailyLimit"
                    type="number"
                    value={autoPilotSettings.dailyLimit}
                    onChange={(e) => setAutoPilotSettings(prev => ({
                      ...prev,
                      dailyLimit: parseInt(e.target.value)
                    }))}
                    min="1"
                    max="50"
                  />
                </div>
                <div>
                  <Label htmlFor="keywords">Keywords</Label>
                  <Input
                    id="keywords"
                    value={autoPilotSettings.keywords}
                    onChange={(e) => setAutoPilotSettings(prev => ({
                      ...prev,
                      keywords: e.target.value
                    }))}
                    placeholder="e.g., software engineer, react, typescript"
                  />
                </div>
              </div>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="locations">Locations</Label>
                  <Input
                    id="locations"
                    value={autoPilotSettings.locations}
                    onChange={(e) => setAutoPilotSettings(prev => ({
                      ...prev,
                      locations: e.target.value
                    }))}
                    placeholder="e.g., San Francisco, Remote, New York"
                  />
                </div>
                <div>
                  <Label>Salary Range</Label>
                  <div className="flex gap-2">
                    <Input
                      type="number"
                      placeholder="Min"
                      value={autoPilotSettings.salaryRange.min}
                      onChange={(e) => setAutoPilotSettings(prev => ({
                        ...prev,
                        salaryRange: { ...prev.salaryRange, min: parseInt(e.target.value) || 0 }
                      }))}
                    />
                    <Input
                      type="number"
                      placeholder="Max"
                      value={autoPilotSettings.salaryRange.max}
                      onChange={(e) => setAutoPilotSettings(prev => ({
                        ...prev,
                        salaryRange: { ...prev.salaryRange, max: parseInt(e.target.value) || 0 }
                      }))}
                    />
                  </div>
                </div>
              </div>
            </div>
          )}

          {autoPilotEnabled && (
            <div className="mt-4 flex items-center gap-3">
              <Button disabled={autoPilotRunning} onClick={async () => {
                setAutoPilotRunning(true)
                setProgress({ percent: 5, stage: 'Preparing search…' })
                try {
                  const controller = new AbortController()
                  const userTimeout = Math.max(30000, Math.min(180000, Number(autoPilotSettings.timeoutMs) || 120000))
                  const to = setTimeout(()=>controller.abort(), userTimeout)
                  // Faux staged progress while waiting (client-side only)
                  const start = Date.now()
                  const ticker = setInterval(() => {
                    const elapsed = Date.now() - start
                    const pct = Math.min(95, Math.round((elapsed / userTimeout) * 100))
                    const stage = pct < 30 ? 'Searching job boards…' : pct < 60 ? 'Aggregating listings…' : 'Finding contacts…'
                    setProgress({ percent: pct, stage })
                  }, 500)
                  const resp = await fetch('/api/job-boards/autopilot/search', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                      keywords: autoPilotSettings.keywords, 
                      locations: autoPilotSettings.locations, 
                      radiusKm: 150, days: 30, limit: 20, timeoutMs: userTimeout,
                      mode: qualityMode,
                      filters
                    }),
                    signal: controller.signal
                  })
                  clearTimeout(to)
                  clearInterval(ticker)
                  const json = await resp.json()
                  if (!resp.ok || !json.success) throw new Error(json.error || 'Search failed')
                  setAutoPilotResults(json.results || [])
                  setProgress({ percent: 100, stage: 'Complete' })
                } catch (e) {
                  toast.error(e instanceof Error ? e.message : 'Autopilot search failed')
                  setProgress({ percent: 0, stage: 'Idle' })
                } finally {
                  setAutoPilotRunning(false)
                }
              }}>
                {autoPilotRunning ? (<><Loader2 className="w-4 h-4 mr-2 animate-spin"/> Searching...</>) : (<><Zap className="w-4 h-4 mr-2"/>Run Autopilot Search</>)}
              </Button>
              {autoPilotResults.length > 0 && (
                <div className="text-sm text-muted-foreground">Found {autoPilotResults.length} public listings</div>
              )}
            </div>
          )}

          {autoPilotResults.length > 0 && (
            <div className="mt-4 border-t pt-4">
              <div className="text-sm font-medium mb-2">Public Listings</div>
              <div className="max-h-64 overflow-y-auto space-y-2">
                {autoPilotResults.slice(0, 100).map((j, idx) => (
                  <div key={idx} className="text-xs flex items-center justify-between gap-2">
                    <div className="min-w-0">
                      <div className="font-medium truncate">{j.title || 'Untitled role'}</div>
                      <div className="text-muted-foreground truncate">{[j.company, j.location, j.source].filter(Boolean).join(' • ')}</div>
                    </div>
                    {j.url && <a href={j.url} target="_blank" rel="noopener noreferrer" className="px-2 py-1 border rounded">Open</a>}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Progress bar */}
          {autoPilotRunning || progress.percent > 0 ? (
            <div className="mt-3">
              <div className="flex items-center justify-between text-xs text-muted-foreground mb-1">
                <span>{progress.stage}</span>
                <span>{progress.percent}%</span>
              </div>
              <Progress value={progress.percent} className="w-full" />
            </div>
          ) : null}

          {/* Filters and Mode */}
          <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
            <div>
              <Label className="text-xs">Mode</Label>
              <Select value={qualityMode} onValueChange={(v)=>setQualityMode(v as any)}>
                <SelectTrigger><SelectValue placeholder="Mode" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="speed">Speed (Search/Sonar)</SelectItem>
                  <SelectItem value="quality">Quality (Sonar Pro/V2)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label className="text-xs">Work Type</Label>
              <Select value={filters.workType} onValueChange={(v)=>setFilters(p=>({ ...p, workType: v as any }))}>
                <SelectTrigger><SelectValue placeholder="Any" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="any">Any</SelectItem>
                  <SelectItem value="remote">Remote</SelectItem>
                  <SelectItem value="hybrid">Hybrid</SelectItem>
                  <SelectItem value="onsite">Onsite</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label className="text-xs">Experience</Label>
              <Select value={filters.experienceLevel} onValueChange={(v)=>setFilters(p=>({ ...p, experienceLevel: v as any }))}>
                <SelectTrigger><SelectValue placeholder="Any" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="any">Any</SelectItem>
                  <SelectItem value="entry">Entry</SelectItem>
                  <SelectItem value="mid">Mid</SelectItem>
                  <SelectItem value="senior">Senior</SelectItem>
                  <SelectItem value="executive">Executive</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-end gap-2">
              <div className="flex-1">
                <Label className="text-xs">Min Salary (USD)</Label>
                <Input type="number" placeholder="e.g., 80000" value={filters.salaryMin || ''} onChange={(e)=>setFilters(p=>({ ...p, salaryMin: e.target.value ? Number(e.target.value) : undefined }))} />
              </div>
              <div className="w-28">
                <Label className="text-xs">Max Results</Label>
                <Input type="number" value={filters.maxResults || 15} onChange={(e)=>setFilters(p=>({ ...p, maxResults: Math.max(5, Math.min(30, Number(e.target.value)||15)) }))} />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Job Board integrations have moved to Settings → Integrations; no UI here by design */}

      {/* Bulk Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Send className="h-5 w-5" />
            Bulk Application Submission
          </CardTitle>
          <CardDescription>
            Submit multiple applications to selected job boards at once
          </CardDescription>
        </CardHeader>
        <CardContent>
          {/* Application Selection */}
          <div className="mb-6">
            <h4 className="font-medium mb-3">Select Applications ({selectedApplications.length})</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-h-40 overflow-y-auto">
              {applications.slice(0, 10).map((app) => (
                <div key={app._id} className="flex items-center space-x-3 p-3 border rounded-lg">
                  <Checkbox
                    checked={selectedApplications.includes(app._id)}
                    onCheckedChange={(checked) => handleApplicationSelection(app._id, checked as boolean)}
                  />
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">{app.jobTitle}</p>
                    <p className="text-xs text-muted-foreground truncate">{app.company}</p>
                  </div>
                  <Badge variant={app.status === 'submitted' ? 'default' : 'outline'} className="text-xs">
                    {app.status}
                  </Badge>
                </div>
              ))}
            </div>
          </div>

          {/* Progress and Actions */}
          {bulkSubmission.status === 'running' && (
            <div className="mb-6">
              <div className="flex justify-between text-sm mb-2">
                <span>Submission Progress</span>
                <span>{Math.round(bulkSubmission.progress)}%</span>
              </div>
              <Progress value={bulkSubmission.progress} className="h-2 mb-2" />
              <p className="text-xs text-muted-foreground">
                Submitting {bulkSubmission.selectedApplications.length} applications to {bulkSubmission.selectedBoards.length} job boards...
              </p>
            </div>
          )}

          <div className="flex gap-4">
            <Button
              onClick={handleBulkSubmit}
              disabled={
                selectedBoards.length === 0 ||
                selectedApplications.length === 0 ||
                bulkSubmission.status === 'running'
              }
              className="flex-1"
            >
              {bulkSubmission.status === 'running' ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Submitting...
                </>
              ) : (
                <>
                  <Send className="w-4 h-4 mr-2" />
                  Submit {selectedApplications.length} Applications
                </>
              )}
            </Button>

            <Button
              variant="outline"
              onClick={() => {
                setSelectedBoards([])
                setSelectedApplications([])
              }}
              disabled={bulkSubmission.status === 'running'}
            >
              Clear Selection
            </Button>
          </div>

          {bulkSubmission.status === 'completed' && bulkSubmission.results && (
            <Alert className="mt-4">
              <CheckCircle className="h-4 w-4" />
              <AlertDescription>
                Bulk submission completed! {bulkSubmission.results.filter(r => r.success).length} successful submissions out of {bulkSubmission.results.length} attempts.
              </AlertDescription>
            </Alert>
          )}

          {bulkSubmission.status === 'failed' && (
            <Alert className="mt-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                Bulk submission failed. Please try again or contact support if the issue persists.
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Recent Activity */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Clock className="h-5 w-5" />
            Recent Activity
          </CardTitle>
          <CardDescription>
            Latest application submissions and job board activity
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {applications.slice(0, 5).map((app) => (
              <div key={app._id} className="flex items-center justify-between p-3 border rounded-lg">
                <div className="flex items-center gap-3">
                  <div className={`w-3 h-3 rounded-full ${
                    app.status === 'submitted' ? 'bg-green-500' :
                    app.status === 'draft' ? 'bg-yellow-500' : 'bg-gray-500'
                  }`} />
                  <div>
                    <p className="font-medium">{app.jobTitle}</p>
                    <p className="text-sm text-muted-foreground">{app.company}</p>
                  </div>
                </div>
                <div className="text-right">
                  <Badge variant={app.status === 'submitted' ? 'default' : 'outline'}>
                    {app.status}
                  </Badge>
                  <p className="text-xs text-muted-foreground mt-1">
                    {new Date(app.createdAt).toLocaleDateString()}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

function AutopilotStatus() {
  const [status, setStatus] = useState<{ lastRunAt?: string; lastFound?: number; nextRunAt?: string } | null>(null)
  useEffect(() => {
    (async () => {
      try {
        const res = await fetch('/api/profile')
        if (!res.ok) return
        const j = await res.json()
        const meta = j?.profile?.autopilotMeta || {}
        setStatus({
          lastRunAt: meta.lastRunAt,
          lastFound: meta.lastFound,
          nextRunAt: meta.nextRunAt,
        })
      } catch {}
    })()
  }, [])
  if (!status) return null
  return (
    <div className="flex items-center gap-4">
      <div>Last run: {status.lastRunAt ? new Date(status.lastRunAt).toLocaleString() : '—'}</div>
      <div>Found: {typeof status.lastFound === 'number' ? status.lastFound : 0}</div>
      <div>Next run: {status.nextRunAt ? new Date(status.nextRunAt).toLocaleString() : '—'}</div>
    </div>
  )
}
</file>

<file path="src/app/job-boards/page.tsx">
import { Suspense } from 'react'
import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import { JobBoardsDashboard } from './components/job-boards-dashboard'

export default async function JobBoardsPage() {
  const session = await getServerSession(authOptions)

  if (!session) {
    redirect('/auth/signin')
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground">Job Board Integrations</h1>
          <p className="mt-2 text-lg text-muted-foreground">
            Automate your job applications across multiple platforms with AI-optimized submissions
          </p>
        </div>

        <Suspense fallback={<JobBoardsSkeleton />}>
          <JobBoardsDashboard userId={session.user.id} />
        </Suspense>
      </div>
    </div>
  )
}

function JobBoardsSkeleton() {
  return (
    <div className="space-y-8">
      {/* Stats Overview Skeleton - Dribbble Style */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        {[...Array(4)].map((_, i) => (
          <div key={i} className="glass-card animate-pulse">
            <div className="w-16 h-4 bg-muted rounded mb-2"></div>
            <div className="w-8 h-8 bg-muted rounded"></div>
          </div>
        ))}
      </div>

      {/* Job Boards Grid Skeleton - Dribbble Style */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[...Array(6)].map((_, i) => (
          <div key={i} className="modern-card animate-pulse">
            <div className="w-24 h-6 bg-muted rounded mb-4"></div>
            <div className="w-full h-20 bg-muted rounded mb-4"></div>
            <div className="w-20 h-4 bg-muted rounded mb-3"></div>
            <div className="w-16 h-8 bg-primary/20 rounded"></div>
          </div>
        ))}
      </div>

      {/* Bulk Actions Skeleton - Dribbble Style */}
      <div className="gradient-border-card animate-pulse">
        <div className="w-32 h-6 bg-muted rounded mb-4"></div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div className="w-full h-10 bg-muted rounded"></div>
          <div className="w-full h-10 bg-muted rounded"></div>
          <div className="w-full h-10 bg-muted rounded"></div>
        </div>
        <div className="w-32 h-10 bg-gradient-primary/20 rounded"></div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/jobs/[id]/page.tsx">
/**
 * Job Details Page
 * Figma-inspired job details with all sections
 */

'use client'

import { useParams, useRouter } from 'next/navigation'
import { useState } from 'react'
import { ArrowLeft, Edit, CheckCircle, User, Gift, Send } from 'lucide-react'
import { MapPin, GraduationCap, Clock } from 'lucide-react'

export default function JobDetailsPage() {
  const params = useParams()
  const router = useRouter()
  const [isSaving, setIsSaving] = useState(false)

  // Mock job data - will be replaced with API call
  const job = {
    id: params.id,
    title: 'Graphic Designer',
    company: 'Spotify',
    companyLogo: null,
    location: 'Remote',
    experience: 'Freshers',
    workType: 'Fulltime',
    salary: '50K',
    postedDate: 'Posted 2 days ago',
    colorTheme: 'yellow' as const,
    description: 'In a UX Designer job, you\'ll need both types of skills to develop the next generation of products. You\'ll partner with Researchers and Designers to define and deliver new features.',
    requirements: [
      '3 years experience',
      'Degree in Computer Science, Psychology, Design or any other related fields.',
      'Proficiency in User Personas, Competitive Analysis, Empathy Maps and Information Architecture.'
    ],
    role: 'As a UX Designer, you will be directly responsible for helping the evolution of enterprise design systems at Google. You will engineer solutions that create shareable web components to be used in enterprise products within the organization. You\'ll support multiple different product areas and collaborate with multiple job functions across the globe.',
    benefits: [
      'Lorem ipsum dolor sit amet consectetur. Ut sit tincidunt nec quis vel quisque nunc egestas. Et rutrum amet volutpat orci. Magna id arcu viverra justo ut vel tortor. Quis in morbi laoreet diam neque congue nec facilisi.',
      'Lorem ipsum dolor sit amet consectetur. Ut sit tincidunt nec quis vel quisque nunc egestas. Et rutrum amet volutpat orci. Magna id arcu viverra justo ut vel tortor. Quis in morbi laoreet diam neque congue nec facilisi.'
    ]
  }

  const colorThemes = {
    purple: '#5424FD',
    red: '#F5001E',
    yellow: '#FCC636',
  }

  const bgColor = colorThemes[job.colorTheme]
  const isYellow = job.colorTheme === 'yellow'
  const textColor = isYellow ? '#000000' : '#FFFFFF'
  const badgeBg = isYellow ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.2)'
  const badgeBorder = isYellow ? 'rgba(0, 0, 0, 0.4)' : 'rgba(255, 255, 255, 0.4)'

  const handleApply = () => {
    router.push(`/jobs/${job.id}/apply`)
  }

  const handleSave = async () => {
    setIsSaving(true)
    // TODO: Implement save functionality
    await new Promise(resolve => setTimeout(resolve, 500))
    setIsSaving(false)
  }

  return (
    <div className="min-h-screen bg-background pb-20">
      {/* Header */}
      <div className="sticky top-0 z-50 bg-background/95 backdrop-blur-md border-b border-border/50">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <button
              onClick={() => router.back()}
              className="flex items-center gap-3 text-foreground hover:text-primary transition-colors"
            >
              <ArrowLeft className="w-6 h-6" />
              <span className="text-lg font-medium">Job Details</span>
            </button>

            {/* User avatar placeholder */}
            <div className="w-8 h-8 rounded-full bg-gradient-primary" />
          </div>
        </div>
      </div>

      {/* Job Header Card */}
      <div className="container mx-auto px-6 py-6">
        <div 
          className="relative rounded-3xl overflow-hidden shadow-xl"
          style={{ background: bgColor }}
        >
          {/* Main content */}
          <div className="px-4 pt-4 pb-3">
            {/* Company info */}
            <div className="flex items-center gap-3 mb-4">
              <div className="w-12 h-12 rounded-lg bg-[#1F1F1F] flex items-center justify-center">
                <span className="text-white text-sm font-bold">
                  {job.company.charAt(0)}
                </span>
              </div>

              <div className="flex flex-col gap-1">
                <h1 
                  className="text-lg font-bold"
                  style={{ color: textColor }}
                >
                  {job.title}
                </h1>
                <p 
                  className="text-xs font-medium"
                  style={{ color: textColor }}
                >
                  {job.company}
                </p>
              </div>
            </div>

            {/* Badges */}
            <div className="flex items-center gap-2 flex-wrap">
              <div
                className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
                style={{
                  background: badgeBg,
                  borderColor: badgeBorder,
                  color: textColor,
                }}
              >
                <MapPin className="w-4 h-4" />
                <span>{job.location}</span>
              </div>

              <div
                className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
                style={{
                  background: badgeBg,
                  borderColor: badgeBorder,
                  color: textColor,
                }}
              >
                <GraduationCap className="w-4 h-4" />
                <span>{job.experience}</span>
              </div>

              <div
                className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
                style={{
                  background: badgeBg,
                  borderColor: badgeBorder,
                  color: textColor,
                }}
              >
                <Clock className="w-4 h-4" />
                <span>{job.workType}</span>
              </div>
            </div>
          </div>

          {/* White footer */}
          <div className="bg-card px-4 py-4 rounded-b-3xl">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-1 text-xs text-foreground font-medium">
                <Clock className="w-4 h-4" />
                <span>{job.postedDate}</span>
              </div>
              <div className="text-lg font-bold text-foreground">
                ${job.salary}/mo
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Job Details Sections */}
      <div className="container mx-auto px-6 space-y-4">
        {/* Job Description */}
        <div className="bg-[#2B2B2B] rounded-3xl p-5">
          <div className="flex items-center gap-2 mb-4">
            <div className="w-10 h-10 rounded-lg bg-card/10 flex items-center justify-center">
              <Edit className="w-6 h-6 text-white" />
            </div>
            <h2 className="text-lg font-bold text-white">Job Description</h2>
          </div>
          <p className="text-sm text-white leading-relaxed opacity-90">
            {job.description}
          </p>
        </div>

        {/* Skills & Requirements */}
        <div className="bg-[#2B2B2B] rounded-3xl p-5">
          <div className="flex items-center gap-2 mb-4">
            <div className="w-10 h-10 rounded-lg bg-card/10 flex items-center justify-center">
              <CheckCircle className="w-6 h-6 text-white" />
            </div>
            <h2 className="text-lg font-bold text-white">Skills & Requirements</h2>
          </div>
          <ul className="space-y-2">
            {job.requirements.map((req, index) => (
              <li key={index} className="text-sm text-white leading-relaxed opacity-90 flex items-start gap-2">
                <span className="text-primary mt-1">•</span>
                <span>{req}</span>
              </li>
            ))}
          </ul>
        </div>

        {/* Your Role */}
        <div className="bg-[#2B2B2B] rounded-3xl p-5">
          <div className="flex items-center gap-2 mb-4">
            <div className="w-10 h-10 rounded-lg bg-card/10 flex items-center justify-center">
              <User className="w-6 h-6 text-white" />
            </div>
            <h2 className="text-lg font-bold text-white">Your Role</h2>
          </div>
          <p className="text-sm text-white leading-relaxed opacity-90">
            {job.role}
          </p>
        </div>

        {/* Benefits */}
        <div className="bg-[#2B2B2B] rounded-3xl p-5">
          <div className="flex items-center gap-2 mb-4">
            <div className="w-10 h-10 rounded-lg bg-card/10 flex items-center justify-center">
              <Gift className="w-6 h-6 text-white" />
            </div>
            <h2 className="text-lg font-bold text-white">Benefits</h2>
          </div>
          <div className="space-y-3">
            {job.benefits.map((benefit, index) => (
              <p key={index} className="text-sm text-white leading-relaxed opacity-90">
                {benefit}
              </p>
            ))}
          </div>
        </div>
      </div>

      {/* Fixed bottom action bar */}
      <div className="fixed bottom-0 left-0 right-0 bg-background border-t border-border/50 p-6 z-50">
        <div className="container mx-auto flex items-center gap-3 relative">
          {/* Background progress bar */}
          <div className="absolute left-0 right-0 top-1/2 -translate-y-1/2 h-2 bg-card rounded-full -z-10" />

          {/* Save button */}
          <button
            onClick={handleSave}
            disabled={isSaving}
            className="flex items-center justify-center px-6 py-3 bg-card text-foreground font-medium text-base rounded-full transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-50 z-10"
          >
            Save
          </button>

          {/* Apply Now button */}
          <button
            onClick={handleApply}
            className="flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-[#5424FD] text-white font-bold text-base rounded-full transition-all duration-200 hover:scale-105 active:scale-95 z-20"
          >
            <span>Apply Now</span>
            <Send className="w-5 h-5 rotate-[-45deg]" />
          </button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/jobs/components/jobs-actions.tsx">
'use client'

import { useEffect, useState } from 'react'

export function JobsActions() {
  const [providers, setProviders] = useState<Array<{ id: string; name: string; status: string }>>([])
  const [selected, setSelected] = useState('')
  const [loading, setLoading] = useState(false)
  const [jobs, setJobs] = useState<any[]>([])

  useEffect(() => {
    ;(async () => {
      try {
        const res = await fetch('/api/job-boards/integrations')
        const j = await res.json()
        if (j.success && Array.isArray(j.integrations)) {
          setProviders(j.integrations.map((i: any) => ({ id: i.boardName, name: i.boardName, status: i.status })))
        }
      } catch {}
    })()
  }, [])

  const load = async () => {
    if (!selected) return
    setLoading(true)
    try {
      const res = await fetch('/api/job-boards/jobs/list', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: selected }) })
      const j = await res.json()
      setJobs(Array.isArray(j.jobs?.items) ? j.jobs.items : (Array.isArray(j.jobs) ? j.jobs : []))
    } catch { setJobs([]) }
    setLoading(false)
  }

  const importJob = async (url?: string) => {
    if (!url) return
    try {
      const base = typeof window !== 'undefined' ? '' : (process.env.NEXTAUTH_URL || 'http://localhost:3000')
      await fetch(`${base}/api/jobs/import`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobUrl: url }) })
    } catch {}
  }

  return (
    <div className="space-y-4">
      <div className="flex gap-2">
        <select value={selected} onChange={(e)=>setSelected(e.target.value)} className="border rounded p-2">
          <option value="">Select connected provider</option>
          {providers.filter(p=>p.status==='connected').map((p)=> (
            <option key={p.id} value={p.id}>{p.name}</option>
          ))}
        </select>
        <button onClick={load} disabled={!selected || loading} className="px-3 py-2 bg-blue-600 text-foreground rounded">{loading ? 'Loading…' : 'Load Jobs'}</button>
      </div>
      {jobs.length > 0 && (
        <div className="space-y-2">
          {jobs.slice(0, 20).map((job: any, idx: number) => (
            <div key={idx} className="p-3 border rounded flex items-center justify-between">
              <div className="min-w-0">
                <div className="font-medium truncate">{job.title || job.name || 'Job'}</div>
                <div className="text-sm text-muted-foreground truncate">{job.company || job.companyName || ''}</div>
              </div>
              <div className="flex items-center gap-2">
                {job.url && <a href={job.url} target="_blank" rel="noopener noreferrer" className="text-blue-600 text-sm">View</a>}
                <button onClick={()=>importJob(job.url)} disabled={!job.url} className="px-2 py-1 border rounded text-sm">Import</button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/app/jobs/components/local-discover.tsx">
'use client'

import { useEffect, useState } from 'react'

type Result = { title?: string; url: string; snippet?: string; source: string }

const SOURCE_OPTIONS = [
  { id: 'indeed', label: 'Indeed' },
  { id: 'linkedin', label: 'LinkedIn' },
  { id: 'ziprecruiter', label: 'ZipRecruiter' },
  { id: 'jobbank', label: 'Job Bank' },
  { id: 'workopolis', label: 'Workopolis' },
  { id: 'google', label: 'Google' },
]

export function LocalDiscover() {
  const [jobTitle, setJobTitle] = useState('')
  const [location, setLocation] = useState('')
  const [radiusKm, setRadiusKm] = useState(25)
  const [sources, setSources] = useState<string[]>(['indeed','linkedin','google'])
  const [commuteFrom, setCommuteFrom] = useState('')
  const [commuteMode, setCommuteMode] = useState<'driving'|'walking'|'transit'>('driving')
  const [loading, setLoading] = useState(false)
  const [results, setResults] = useState<Result[]>([])
  const [ranked, setRanked] = useState<Array<{ url: string; title?: string; companyName?: string; score: number; reasons: string[] }>>([])
  const [commutes, setCommutes] = useState<Record<string, number>>({})
  const [error, setError] = useState<string | null>(null)

  const toggleSource = (id: string) => {
    setSources(prev => prev.includes(id) ? prev.filter(s => s !== id) : [...prev, id])
  }

  const runSearch = async () => {
    setLoading(true); setError(null); setResults([])
    try {
      // Auto-fill location from profile if empty
      let effectiveLocation = location
      if (!effectiveLocation) {
        try {
          const prof = await fetch('/api/profile')
          if (prof.ok) { const pj = await prof.json(); if (pj?.profile?.location) effectiveLocation = pj.profile.location }
        } catch {}
      }
      const resp = await fetch('/api/v2/jobs/discover', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ jobTitle, location: effectiveLocation, radiusKm, sources, commuteFrom: commuteFrom || undefined, commuteMode })
      })
      const reqId = resp.headers.get('x-request-id') || ''
      const json = await resp.json().catch(()=>({}))
      if (!resp.ok || !json.success) {
        if (resp.status === 401) { setError('Please sign in' + (reqId ? ` (Ref: ${reqId})` : '')); return }
        if (resp.status === 429) { setError((json.error || 'Rate limit exceeded') + (reqId ? ` (Ref: ${reqId})` : '')); return }
        if (resp.status >= 500) { setError('Server error during search' + (reqId ? ` (Ref: ${reqId})` : '')); return }
        throw new Error(json.error || 'Search failed')
      }
      const items = (json.results || []) as Result[]
      setResults(items)
      // Rank against latest resume
      try {
        const rankResp = await fetch('/api/v2/jobs/rank', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobs: items }) })
        const rj = await rankResp.json().catch(()=>({}))
        if (rankResp.ok && rj.success) setRanked(rj.rankings || [])
      } catch {}
      // Commute estimates
      if (commuteFrom && items.length) {
        const out: Record<string, number> = {}
        for (const it of items.slice(0, 12)) {
          try {
            const c = await fetch('/api/commute/estimate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ origin: commuteFrom, destination: `${it.title || ''} ${location}`.trim(), mode: commuteMode }) })
            const cj = await c.json()
            if (c.ok && cj.success) out[it.url] = cj.minutes
          } catch {}
        }
        setCommutes(out)
      }
    } catch (e) {
      setError(e instanceof Error ? e.message : 'Search failed')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="space-y-4">
      <h2 className="text-lg font-semibold">Local Job Search</h2>
      <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
        <input className="border rounded p-2" placeholder="Job title (e.g., Sales Manager)" value={jobTitle} onChange={e=>setJobTitle(e.target.value)} />
        <input className="border rounded p-2" placeholder="Location (e.g., Edmonton, AB)" value={location} onChange={e=>setLocation(e.target.value)} />
        <div className="flex items-center gap-2">
          <label className="text-sm text-muted-foreground">Radius</label>
          <input type="number" min={1} max={500} className="border rounded p-2 w-24" value={radiusKm} onChange={e=>setRadiusKm(parseInt(e.target.value||'25',10))} />
          <span className="text-sm">km</span>
        </div>
        <button onClick={runSearch} disabled={loading || !jobTitle} className="border rounded p-2 bg-blue-600 text-foreground disabled:opacity-50">{loading ? 'Searching…' : 'Search'}</button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <input className="border rounded p-2" placeholder="Commute from (address/city)" value={commuteFrom} onChange={e=>setCommuteFrom(e.target.value)} />
        <select className="border rounded p-2" value={commuteMode} onChange={e=>setCommuteMode(e.target.value as any)}>
          <option value="driving">Driving</option>
          <option value="walking">Walking</option>
          <option value="transit">Transit</option>
        </select>
      </div>
      <div className="flex flex-wrap gap-3">
        {SOURCE_OPTIONS.map(s => (
          <label key={s.id} className={`px-3 py-1 border rounded text-sm cursor-pointer ${sources.includes(s.id) ? 'bg-blue-50 border-blue-300 text-blue-700' : 'bg-white'}`}>
            <input type="checkbox" checked={sources.includes(s.id)} onChange={()=>toggleSource(s.id)} className="mr-2" />{s.label}
          </label>
        ))}
      </div>
      {error && <div className="text-red-600 text-sm">{error}</div>}
      {!loading && results.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {results.map((r, i) => {
            const scored = ranked.find(x => x.url === r.url)
            return (
            <div key={`${r.url}-${i}`} className="border rounded p-3 bg-card">
              <div className="text-sm text-muted-foreground mb-1">{r.source}</div>
              <a href={r.url} target="_blank" rel="noopener noreferrer" className="font-medium text-blue-700 dark:text-blue-300 line-clamp-2">{r.title || r.url}</a>
              {r.snippet && <div className="text-sm text-foreground dark:text-gray-300 mt-1 line-clamp-3">{r.snippet}</div>}
              {(scored || commutes[r.url] != null) && (
                <div className="mt-2 text-xs">
                  {scored && <div className="font-medium">Fit Score: {scored.score}%</div>}
                  {commutes[r.url] != null && <div className="text-muted-foreground">Commute: {commutes[r.url]} mins ({commuteMode})</div>}
                  {scored && scored.reasons && scored.reasons.length > 0 && (
                    <ul className="list-disc ml-5 mt-1">
                      {scored.reasons.slice(0,2).map((rs,idx)=>(<li key={idx}>{rs}</li>))}
                    </ul>
                  )}
                </div>
              )}
              <div className="mt-2 flex gap-2">
                <a href={r.url} target="_blank" rel="noopener noreferrer" className="text-xs px-2 py-1 border rounded">Open</a>
                <a href="/create-application?step=analyze" className="text-xs px-2 py-1 border rounded">Analyze</a>
              </div>
            </div>
          )})}
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/app/jobs/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import Link from 'next/link'
import { MagnifyingGlassIcon, FunnelIcon, MapPinIcon } from '@heroicons/react/24/outline'
import { JobCard } from '@/components/job-card'

export default function JobsPage() {
  const [jobs, setJobs] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [filters, setFilters] = useState({ location: 'Toronto, ON', salaryMin: '', salaryMax: '', remote: false })
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const { data: session } = useSession()

  // ENTERPRISE FIX: Fetch real jobs from API
  useEffect(() => {
    const fetchJobs = async () => {
      if (!searchQuery || searchQuery.length < 2) return
      
      setLoading(true)
      try {
        const response = await fetch('/api/jobs/search', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            keywords: searchQuery,
            location: filters.location || 'Toronto, ON',
            limit: 50
          })
        })
        
        if (response.ok) {
          const data = await response.json()
          setJobs(data.jobs || [])
        }
      } catch (error) {
        console.error('Failed to fetch jobs:', error)
      } finally {
        setLoading(false)
      }
    }
    
    fetchJobs()
  }, [searchQuery, filters.location])

  const handleFilterChange = (key: string, value: any) => {
    setFilters(prev => ({ ...prev, [key]: value }))
  }

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen)
    if (!sidebarOpen) document.body.classList.add('sidebar-open')
    else document.body.classList.remove('sidebar-open')
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Search */}
      <section className="search-hero">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold text-foreground mb-4">Find Your Next Opportunity</h1>
          <div className="search-input-group">
            <div className="relative flex-1">
              <MagnifyingGlassIcon className="search-icon" />
              <input
                type="text"
                placeholder="Search jobs by title, company, or keywords..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="search-input"
              />
            </div>
            <button className="search-btn">
              <MagnifyingGlassIcon className="w-5 h-5 mr-2" />
              Search
            </button>
          </div>
        </div>
      </section>

      <div className="flex flex-col lg:flex-row gap-6 max-w-7xl mx-auto px-4 py-8">
        {/* Main Content: Job Grid */}
        <main className="flex-1">
          {loading ? (
            <div className="text-center py-12">
              <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
              <p className="mt-4 text-muted-foreground">Searching for jobs...</p>
            </div>
          ) : jobs.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-muted-foreground">Enter a search term to find jobs</p>
            </div>
          ) : (
            <div className="job-grid">
              {jobs.map((job) => (
                <JobCard key={job.id} job={job} />
              ))}
            </div>
          )}
        </main>

        {/* Sidebar: Filters */}
        <aside className={`filter-sidebar lg:translate-x-0 ${sidebarOpen ? 'sidebar-open' : ''}`}>
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold text-foreground">Filters</h2>
            <button onClick={toggleSidebar} className="sidebar-toggle">
              <FunnelIcon className="w-5 h-5" />
            </button>
          </div>
          <div className="filter-group">
            <label className="filter-label">Location</label>
            <div className="filter-checkbox">
              <input type="checkbox" id="remote" checked={filters.remote} onChange={(e) => handleFilterChange('remote', e.target.checked)} />
              <span>Remote</span>
            </div>
            <input
              type="text"
              placeholder="e.g., Toronto, ON"
              value={filters.location}
              onChange={(e) => handleFilterChange('location', e.target.value)}
              className="w-full p-2 border rounded"
            />
          </div>
          <div className="filter-group">
            <label className="filter-label">Salary Range</label>
            <input
              type="number"
              placeholder="Min Salary"
              value={filters.salaryMin}
              onChange={(e) => handleFilterChange('salaryMin', e.target.value)}
              className="w-full p-2 border rounded mb-2"
            />
            <input
              type="number"
              placeholder="Max Salary"
              value={filters.salaryMax}
              onChange={(e) => handleFilterChange('salaryMax', e.target.value)}
              className="w-full p-2 border rounded"
            />
          </div>
          {/* Add more filters as needed */}
        </aside>
      </div>

      {/* Overlay for mobile sidebar */}
      {sidebarOpen && (
        <div className="sidebar-overlay" onClick={toggleSidebar} />
      )}
    </div>
  )
}
</file>

<file path="src/app/network/components/network-dashboard.tsx">
'use client'

import { useState, useEffect, useCallback } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Alert, AlertDescription } from '@/components/ui/alert'
import {
  Heart,
  MessageCircle,
  Share2,
  UserPlus,
  Users,
  Briefcase,
  TrendingUp,
  Search,
  Filter,
  Plus,
  Send,
  MapPin,
  Calendar,
  ThumbsUp,
  Eye,
  Star,
  MessageSquare,
  UserCheck,
  UserX,
  Bell,
  Settings,
  BookOpen,
  Award,
  Zap
} from 'lucide-react'
import toast from 'react-hot-toast'

interface NetworkPost {
  _id: string
  userId: string
  userName: string
  userAvatar?: string
  userTitle?: string
  type: 'job_opportunity' | 'career_advice' | 'success_story' | 'question' | 'general'
  title?: string
  content: string
  tags?: string[]
  attachments?: Array<{
    type: 'image' | 'document' | 'link'
    url: string
    name: string
  }>
  likes: string[]
  comments: Array<{
    userId: string
    userName: string
    content: string
    createdAt: Date
  }>
  shares: number
  createdAt: Date
  updatedAt: Date
  visibility: 'public' | 'connections' | 'private'
}

interface NetworkUser {
  id: string
  name: string
  title?: string
  avatar?: string
  location?: string
  skills?: string[]
  experience?: string
  connections: number
  mutualConnections: number
  isOnline?: boolean
  lastActive?: Date
}

interface Connection {
  _id: string
  userId: string
  connectedUserId: string
  status: 'pending' | 'accepted' | 'declined' | 'blocked'
  initiatedBy: string
  createdAt: Date
  acceptedAt?: Date
  message?: string
  user?: NetworkUser
}

interface NetworkDashboardProps {
  userId: string
}

export function NetworkDashboard({ userId }: NetworkDashboardProps) {
  const [activeTab, setActiveTab] = useState('feed')
  const [posts, setPosts] = useState<NetworkPost[]>([])
  const [connections, setConnections] = useState<Connection[]>([])
  const [suggestions, setSuggestions] = useState<NetworkUser[]>([])
  const [searchQuery, setSearchQuery] = useState('')
  const [filterType, setFilterType] = useState('all')
  const [isLoading, setIsLoading] = useState(true)
  const [showCreatePost, setShowCreatePost] = useState(false)

  // Messaging state
  const [selectedConversation, setSelectedConversation] = useState<string | null>(null)
  const [selectedConversationUser, setSelectedConversationUser] = useState<NetworkUser | null>(null)
  const [messages, setMessages] = useState<any[]>([])
  const [newMessage, setNewMessage] = useState('')
  const [showConnectionRequests, setShowConnectionRequests] = useState(false)

  // Create post state
  const [newPost, setNewPost] = useState({
    type: 'general' as NetworkPost['type'],
    title: '',
    content: '',
    tags: [] as string[],
    visibility: 'public' as NetworkPost['visibility']
  })

  // Load initial data
  useEffect(() => {
    loadFeed()
    loadConnections()
  }, [])

  const loadFeed = async () => {
    try {
      const response = await fetch('/api/network/feed')
      const data = await response.json()
      if (data.success) {
        setPosts(data.posts)
      }
    } catch (error) {
      console.error('Failed to load feed:', error)
      toast.error('Failed to load network feed')
    }
  }

  const loadConnections = async () => {
    try {
      // Load accepted connections
      const connectionsResponse = await fetch('/api/network/connections')
      const connectionsData = await connectionsResponse.json()

      // Load suggestions
      const suggestionsResponse = await fetch('/api/network/connections?type=suggestions')
      const suggestionsData = await suggestionsResponse.json()

      if (connectionsData.success) {
        setConnections(connectionsData.connections)
      }

      if (suggestionsData.success) {
        setSuggestions(suggestionsData.connections)
      }
    } catch (error) {
      console.error('Failed to load connections:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleCreatePost = async () => {
    if (!newPost.content.trim()) {
      toast.error('Please enter some content for your post')
      return
    }

    try {
      const response = await fetch('/api/network/feed', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newPost),
      })

      const data = await response.json()
      if (data.success) {
        setPosts(prev => [data.post, ...prev])
        setNewPost({
          type: 'general',
          title: '',
          content: '',
          tags: [],
          visibility: 'public'
        })
        setShowCreatePost(false)
        toast.success('Post created successfully!')
      } else {
        throw new Error(data.error)
      }
    } catch (error) {
      console.error('Failed to create post:', error)
      toast.error('Failed to create post')
    }
  }

  const handleLikePost = async (postId: string) => {
    // Mock like functionality
    setPosts(prev => prev.map(post =>
      post._id === postId
        ? {
            ...post,
            likes: post.likes.includes(userId)
              ? post.likes.filter(id => id !== userId)
              : [...post.likes, userId]
          }
        : post
    ))
  }

  const handleAddComment = (postId: string, comment: string) => {
    if (!comment.trim()) return

    const newComment = {
      userId,
      userName: 'You', // In real app, get from user session
      content: comment,
      createdAt: new Date()
    }

    setPosts(prev => prev.map(post =>
      post._id === postId
        ? { ...post, comments: [...post.comments, newComment] }
        : post
    ))
  }

  const handleConnect = async (targetUserId: string, message?: string) => {
    try {
      const response = await fetch('/api/network/connections', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'connect',
          targetUserId,
          message
        }),
      })

      const data = await response.json()
      if (data.success) {
        toast.success('Connection request sent!')
        // Remove from suggestions and add to pending connections
        setSuggestions(prev => prev.filter(user => user.id !== targetUserId))
      } else {
        throw new Error(data.error)
      }
    } catch (error) {
      console.error('Failed to send connection request:', error)
      toast.error('Failed to send connection request')
    }
  }

  const handleConnectionAction = async (action: 'accept' | 'decline', targetUserId: string) => {
    try {
      const response = await fetch('/api/network/connections', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action,
          targetUserId
        }),
      })

      const data = await response.json()
      if (data.success) {
        if (action === 'accept') {
          setConnections(prev => prev.map(conn =>
            conn.userId === targetUserId && conn.connectedUserId === userId
              ? { ...conn, status: 'accepted', acceptedAt: new Date() }
              : conn
          ))
          toast.success('Connection accepted!')
        } else {
          setConnections(prev => prev.filter(conn =>
            !(conn.userId === targetUserId && conn.connectedUserId === userId)
          ))
          toast.success('Connection request declined')
        }
      }
    } catch (error) {
      console.error(`Failed to ${action} connection:`, error)
      toast.error(`Failed to ${action} connection`)
    }
  }

  const loadMessages = async (otherUserId: string) => {
    try {
      const response = await fetch(`/api/network/messages?otherUserId=${otherUserId}`)
      const data = await response.json()
      if (data.success) {
        setMessages(data.messages)
      }
    } catch (error) {
      console.error('Failed to load messages:', error)
      toast.error('Failed to load messages')
    }
  }

  const sendMessage = async () => {
    if (!newMessage.trim() || !selectedConversation) return

    try {
      const response = await fetch('/api/network/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          receiverId: selectedConversation,
          content: newMessage.trim()
        }),
      })

      const data = await response.json()
      if (data.success) {
        setMessages(prev => [...prev, data.message])
        setNewMessage('')
      } else {
        throw new Error(data.error)
      }
    } catch (error) {
      console.error('Failed to send message:', error)
      toast.error('Failed to send message')
    }
  }

  const getPostTypeIcon = (type: NetworkPost['type']) => {
    switch (type) {
      case 'job_opportunity': return <Briefcase className="w-4 h-4" />
      case 'career_advice': return <BookOpen className="w-4 h-4" />
      case 'success_story': return <Award className="w-4 h-4" />
      case 'question': return <MessageSquare className="w-4 h-4" />
      default: return <MessageCircle className="w-4 h-4" />
    }
  }

  const getPostTypeColor = (type: NetworkPost['type']) => {
    switch (type) {
      case 'job_opportunity': return 'bg-blue-100 text-blue-800'
      case 'career_advice': return 'bg-green-100 text-green-800'
      case 'success_story': return 'bg-purple-100 text-purple-800'
      case 'question': return 'bg-orange-100 text-orange-800'
      default: return 'bg-muted text-foreground'
    }
  }

  const filteredPosts = posts.filter(post => {
    const matchesSearch = !searchQuery ||
      post.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
      post.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      post.tags?.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))

    const matchesType = filterType === 'all' || post.type === filterType

    return matchesSearch && matchesType
  })

  const pendingRequests = connections.filter(conn => conn.status === 'pending' && conn.initiatedBy !== userId)

  if (isLoading) {
    return <div>Loading network...</div>
  }

  return (
    <div className="space-y-8">
      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Connections</p>
                <p className="text-2xl font-bold">{connections.filter(c => c.status === 'accepted').length}</p>
              </div>
              <Users className="h-8 w-8 text-blue-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Network Posts</p>
                <p className="text-2xl font-bold">{posts.length}</p>
              </div>
              <MessageCircle className="h-8 w-8 text-green-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Pending Requests</p>
                <p className="text-2xl font-bold">{pendingRequests.length}</p>
              </div>
              <UserPlus className="h-8 w-8 text-orange-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Profile Views</p>
                <p className="text-2xl font-bold">0</p>
              </div>
              <Eye className="h-8 w-8 text-purple-600" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Network Interface */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="feed" className="flex items-center gap-2">
            <MessageCircle className="w-4 h-4" />
            Feed
          </TabsTrigger>
          <TabsTrigger value="connections" className="flex items-center gap-2">
            <Users className="w-4 h-4" />
            Connections
          </TabsTrigger>
          <TabsTrigger value="discover" className="flex items-center gap-2">
            <Search className="w-4 h-4" />
            Discover
          </TabsTrigger>
          <TabsTrigger value="messages" className="flex items-center gap-2">
            <MessageSquare className="w-4 h-4" />
            Messages
          </TabsTrigger>
        </TabsList>

        {/* Feed Tab */}
        <TabsContent value="feed" className="space-y-6">
          {/* Create Post */}
          <Card>
            <CardContent className="p-6">
              <div className="flex gap-4">
                <Avatar className="w-12 h-12">
                  <AvatarImage src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150" />
                  <AvatarFallback>You</AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <Button
                    variant="outline"
                    className="w-full justify-start text-muted-foreground"
                    onClick={() => setShowCreatePost(true)}
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Share your thoughts, ask a question, or post a job opportunity...
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Search and Filter */}
          <Card>
            <CardContent className="p-4">
              <div className="flex gap-4">
                <div className="flex-1">
                  <Input
                    placeholder="Search posts, people, or topics..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full"
                  />
                </div>
                <Select value={filterType} onValueChange={setFilterType}>
                  <SelectTrigger className="w-48">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Posts</SelectItem>
                    <SelectItem value="job_opportunity">Job Opportunities</SelectItem>
                    <SelectItem value="career_advice">Career Advice</SelectItem>
                    <SelectItem value="success_story">Success Stories</SelectItem>
                    <SelectItem value="question">Questions</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Posts Feed */}
          <div className="space-y-6">
            {filteredPosts.map((post) => (
              <Card key={post._id}>
                <CardContent className="p-6">
                  <div className="flex gap-4">
                    <Avatar className="w-12 h-12">
                      <AvatarImage src={post.userAvatar} />
                      <AvatarFallback>{post.userName[0]}</AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <h3 className="font-semibold">{post.userName}</h3>
                        <Badge variant="outline" className="text-xs">
                          {post.userTitle}
                        </Badge>
                        <Badge className={`text-xs ${getPostTypeColor(post.type)}`}>
                          {getPostTypeIcon(post.type)}
                          <span className="ml-1 capitalize">{post.type.replace('_', ' ')}</span>
                        </Badge>
                      </div>

                      {post.title && (
                        <h4 className="font-medium mb-2">{post.title}</h4>
                      )}

                      <p className="text-foreground mb-3 whitespace-pre-wrap">{post.content}</p>

                      {post.tags && post.tags.length > 0 && (
                        <div className="flex flex-wrap gap-1 mb-3">
                          {post.tags.map((tag, index) => (
                            <Badge key={index} variant="secondary" className="text-xs">
                              #{tag}
                            </Badge>
                          ))}
                        </div>
                      )}

                      <div className="flex items-center justify-between text-sm text-muted-foreground">
                        <span>{new Date(post.createdAt).toLocaleDateString()}</span>
                        <div className="flex gap-4">
                          <button
                            onClick={() => handleLikePost(post._id)}
                            className={`flex items-center gap-1 hover:text-red-500 ${
                              post.likes.includes(userId) ? 'text-red-500' : ''
                            }`}
                          >
                            <ThumbsUp className="w-4 h-4" />
                            {post.likes.length}
                          </button>
                          <button className="flex items-center gap-1 hover:text-blue-500">
                            <MessageCircle className="w-4 h-4" />
                            {post.comments.length}
                          </button>
                          <button className="flex items-center gap-1 hover:text-green-500">
                            <Share2 className="w-4 h-4" />
                            {post.shares}
                          </button>
                        </div>
                      </div>

                      {/* Comments Section */}
                      {post.comments.length > 0 && (
                        <div className="mt-4 space-y-3">
                          {post.comments.slice(0, 3).map((comment, index) => (
                            <div key={index} className="flex gap-3 p-3 bg-background rounded-lg">
                              <Avatar className="w-8 h-8">
                                <AvatarFallback className="text-xs">
                                  {comment.userName[0]}
                                </AvatarFallback>
                              </Avatar>
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-1">
                                  <span className="font-medium text-sm">{comment.userName}</span>
                                  <span className="text-xs text-muted-foreground">
                                    {new Date(comment.createdAt).toLocaleDateString()}
                                  </span>
                                </div>
                                <p className="text-sm text-foreground">{comment.content}</p>
                              </div>
                            </div>
                          ))}

                          {post.comments.length > 3 && (
                            <button className="text-sm text-blue-600 hover:underline">
                              View all {post.comments.length} comments
                            </button>
                          )}
                        </div>
                      )}

                      {/* Add Comment */}
                      <div className="mt-3 flex gap-3">
                        <Avatar className="w-8 h-8">
                          <AvatarFallback className="text-xs">Y</AvatarFallback>
                        </Avatar>
                        <div className="flex-1 flex gap-2">
                          <Input
                            placeholder="Write a comment..."
                            className="text-sm"
                            onKeyPress={(e) => {
                              if (e.key === 'Enter') {
                                handleAddComment(post._id, (e.target as HTMLInputElement).value)
                                ;(e.target as HTMLInputElement).value = ''
                              }
                            }}
                          />
                          <Button size="sm" variant="outline">
                            <Send className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Connections Tab */}
        <TabsContent value="connections" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Connection Requests */}
            <Card className="lg:col-span-1">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bell className="w-5 h-5" />
                  Connection Requests
                </CardTitle>
              </CardHeader>
              <CardContent>
                {pendingRequests.length === 0 ? (
                  <p className="text-muted-foreground text-center py-4">No pending requests</p>
                ) : (
                  <div className="space-y-4">
                    {pendingRequests.map((request) => (
                      <div key={request.userId} className="flex items-center gap-3 p-3 border rounded-lg">
                        <Avatar>
                          <AvatarImage src={request.user?.avatar} />
                          <AvatarFallback>{request.user?.name[0]}</AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <p className="font-medium text-sm">{request.user?.name}</p>
                          <p className="text-xs text-muted-foreground">{request.user?.title}</p>
                          {request.message && (
                            <p className="text-xs text-muted-foreground mt-1">"{request.message}"</p>
                          )}
                        </div>
                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            onClick={() => handleConnectionAction('accept', request.userId)}
                          >
                            <UserCheck className="w-4 h-4" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleConnectionAction('decline', request.userId)}
                          >
                            <UserX className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* My Connections */}
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle>My Network</CardTitle>
                <CardDescription>
                  {connections.filter(c => c.status === 'accepted').length} connections
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {connections
                    .filter(conn => conn.status === 'accepted')
                    .map((connection) => (
                      <div key={connection.userId} className="flex items-center gap-3 p-3 border rounded-lg">
                        <Avatar>
                          <AvatarImage src={connection.user?.avatar} />
                          <AvatarFallback>{connection.user?.name[0]}</AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <p className="font-medium">{connection.user?.name}</p>
                          <p className="text-sm text-muted-foreground">{connection.user?.title}</p>
                          <div className="flex items-center gap-2 mt-1">
                            <MapPin className="w-3 h-3 text-muted-foreground" />
                            <span className="text-xs text-muted-foreground">{connection.user?.location}</span>
                          </div>
                        </div>
                        <Button size="sm" variant="outline">
                          <MessageSquare className="w-4 h-4 mr-2" />
                          Message
                        </Button>
                      </div>
                    ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Discover Tab */}
        <TabsContent value="discover" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>People You May Know</CardTitle>
              <CardDescription>
                Expand your network with relevant connections
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {suggestions.map((person) => (
                  <Card key={person.id}>
                    <CardContent className="p-6">
                      <div className="text-center">
                        <Avatar className="w-16 h-16 mx-auto mb-4">
                          <AvatarImage src={person.avatar} />
                          <AvatarFallback>{person.name[0]}</AvatarFallback>
                        </Avatar>
                        <h3 className="font-semibold mb-1">{person.name}</h3>
                        <p className="text-sm text-muted-foreground mb-2">{person.title}</p>
                        <div className="text-xs text-muted-foreground mb-4">
                          <div className="flex items-center justify-center gap-1 mb-1">
                            <MapPin className="w-3 h-3" />
                            {person.location}
                          </div>
                          <div>{person.mutualConnections} mutual connections</div>
                        </div>

                        {person.skills && person.skills.length > 0 && (
                          <div className="flex flex-wrap justify-center gap-1 mb-4">
                            {person.skills.slice(0, 3).map((skill, index) => (
                              <Badge key={index} variant="outline" className="text-xs">
                                {skill}
                              </Badge>
                            ))}
                          </div>
                        )}

                        <Button
                          onClick={() => handleConnect(person.id)}
                          className="w-full"
                        >
                          <UserPlus className="w-4 h-4 mr-2" />
                          Connect
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Messages Tab */}
        <TabsContent value="messages" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Conversations List */}
            <Card className="lg:col-span-1">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MessageSquare className="w-5 h-5" />
                  Conversations
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {connections
                    .filter(conn => conn.status === 'accepted')
                    .slice(0, 10)
                    .map((connection) => (
                      <div
                        key={connection._id}
                        className="flex items-center gap-3 p-3 rounded-lg hover:bg-background cursor-pointer border"
                        onClick={() => {
                          if (connection.user) {
                            setSelectedConversation(connection.user.id)
                            setSelectedConversationUser(connection.user)
                            loadMessages(connection.user.id)
                          }
                        }}
                      >
                        <Avatar>
                          <AvatarImage src={connection.user?.avatar} />
                          <AvatarFallback>{connection.user?.name?.[0] || '?'}</AvatarFallback>
                        </Avatar>
                        <div className="flex-1 min-w-0">
                          <p className="font-medium truncate">{connection.user?.name || 'Unknown'}</p>
                          <p className="text-sm text-muted-foreground truncate">{connection.user?.title || 'Job Seeker'}</p>
                        </div>
                        {connection.user?.isOnline && (
                          <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        )}
                      </div>
                    ))}
                </div>
              </CardContent>
            </Card>

            {/* Messages View */}
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle>
                  {selectedConversationUser ? selectedConversationUser.name : 'Select a conversation'}
                </CardTitle>
              </CardHeader>
              <CardContent>
                {selectedConversation ? (
                  <div className="flex flex-col h-96">
                    {/* Messages List */}
                    <div className="flex-1 overflow-y-auto space-y-4 mb-4">
                      {messages.map((message) => (
                        <div
                          key={message._id}
                          className={`flex gap-3 ${
                            message.isFromCurrentUser ? 'justify-end' : 'justify-start'
                          }`}
                        >
                          {!message.isFromCurrentUser && (
                            <Avatar className="w-8 h-8">
                              <AvatarImage src={message.sender.avatar} />
                              <AvatarFallback>{message.sender.name[0]}</AvatarFallback>
                            </Avatar>
                          )}
                          <div
                            className={`max-w-xs px-4 py-2 rounded-lg ${
                              message.isFromCurrentUser
                                ? 'bg-blue-500 text-foreground'
                                : 'bg-muted text-foreground'
                            }`}
                          >
                            <p className="text-sm">{message.content}</p>
                            <p className={`text-xs mt-1 ${
                              message.isFromCurrentUser ? 'text-blue-100' : 'text-muted-foreground'
                            }`}>
                              {new Date(message.createdAt).toLocaleTimeString()}
                            </p>
                          </div>
                          {message.isFromCurrentUser && (
                            <Avatar className="w-8 h-8">
                              <AvatarFallback>You</AvatarFallback>
                            </Avatar>
                          )}
                        </div>
                      ))}
                    </div>

                    {/* Message Input */}
                    <div className="flex gap-2">
                      <Input
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        placeholder="Type your message..."
                        onKeyPress={(e) => {
                          if (e.key === 'Enter') {
                            sendMessage()
                          }
                        }}
                        className="flex-1"
                      />
                      <Button onClick={sendMessage} disabled={!newMessage.trim()}>
                        <Send className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-12 text-muted-foreground">
                    <MessageSquare className="w-16 h-16 mx-auto mb-4 opacity-50" />
                    <p>Select a conversation to start messaging</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Create Post Dialog */}
      <Dialog open={showCreatePost} onOpenChange={setShowCreatePost}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create a Post</DialogTitle>
            <DialogDescription>
              Share your thoughts, ask questions, or post opportunities with your network
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">Post Type</label>
              <Select
                value={newPost.type}
                onValueChange={(value: NetworkPost['type']) =>
                  setNewPost(prev => ({ ...prev, type: value }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="general">General Post</SelectItem>
                  <SelectItem value="job_opportunity">Job Opportunity</SelectItem>
                  <SelectItem value="career_advice">Career Advice</SelectItem>
                  <SelectItem value="success_story">Success Story</SelectItem>
                  <SelectItem value="question">Question</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {(newPost.type === 'job_opportunity' || newPost.type === 'career_advice' ||
              newPost.type === 'success_story' || newPost.type === 'question') && (
              <div>
                <label className="text-sm font-medium">Title</label>
                <Input
                  value={newPost.title}
                  onChange={(e) => setNewPost(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="Give your post a title..."
                />
              </div>
            )}

            <div>
              <label className="text-sm font-medium">Content</label>
              <Textarea
                value={newPost.content}
                onChange={(e) => setNewPost(prev => ({ ...prev, content: e.target.value }))}
                placeholder="What's on your mind?"
                rows={6}
              />
            </div>

            <div>
              <label className="text-sm font-medium">Tags (optional)</label>
              <Input
                value={newPost.tags.join(', ')}
                onChange={(e) => setNewPost(prev => ({
                  ...prev,
                  tags: e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag)
                }))}
                placeholder="e.g., javascript, react, career-advice"
              />
            </div>

            <div>
              <label className="text-sm font-medium">Visibility</label>
              <Select
                value={newPost.visibility}
                onValueChange={(value: NetworkPost['visibility']) =>
                  setNewPost(prev => ({ ...prev, visibility: value }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="public">Public</SelectItem>
                  <SelectItem value="connections">Connections Only</SelectItem>
                  <SelectItem value="private">Private</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex gap-3 pt-4">
              <Button onClick={handleCreatePost} className="flex-1">
                <Send className="w-4 h-4 mr-2" />
                Post
              </Button>
              <Button variant="outline" onClick={() => setShowCreatePost(false)}>
                Cancel
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/app/network/page.tsx">
import { Suspense } from 'react'
import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import { NetworkDashboard } from './components/network-dashboard'

export default async function NetworkPage() {
  const session = await getServerSession(authOptions)

  if (!session) {
    redirect('/auth/signin')
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground">Professional Network</h1>
          <p className="mt-2 text-lg text-muted-foreground">
            Connect with fellow job seekers, share opportunities, and build your professional network
          </p>
        </div>

        <Suspense fallback={<NetworkSkeleton />}>
          <NetworkDashboard userId={session.user.id} />
        </Suspense>
      </div>
    </div>
  )
}

function NetworkSkeleton() {
  return (
    <div className="space-y-8">
      {/* Stats Overview Skeleton - Dribbble Style */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        {[...Array(4)].map((_, i) => (
          <div key={i} className="glass-card animate-pulse">
            <div className="w-16 h-4 bg-muted rounded mb-2"></div>
            <div className="w-8 h-8 bg-muted rounded"></div>
          </div>
        ))}
      </div>

      {/* Feed Skeleton - Dribbble Style */}
      <div className="modern-card">
        <div className="p-6 border-b border-border/50">
          <div className="w-48 h-6 bg-muted rounded mb-4"></div>
          <div className="w-full h-12 bg-muted rounded"></div>
        </div>
        <div className="divide-y divide-border/50">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="p-6 animate-pulse">
              <div className="flex items-start gap-4">
                <div className="w-12 h-12 bg-gradient-primary rounded-full opacity-50"></div>
                <div className="flex-1">
                  <div className="w-32 h-4 bg-muted rounded mb-2"></div>
                  <div className="w-full h-16 bg-muted rounded mb-3"></div>
                  <div className="w-24 h-4 bg-muted rounded"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/onboarding/page.tsx">
'use client'

import { useEffect, useMemo, useState } from 'react'
import Link from 'next/link'

type JobItem = { title?: string; url: string; company?: string; location?: string; source?: string }

export default function OnboardingPage() {
  const [step, setStep] = useState<'welcome' | 'upload' | 'autopilot' | 'review' | 'done'>('welcome')
  const [loading, setLoading] = useState(false)
  const [message, setMessage] = useState('')
  const [profile, setProfile] = useState<any>(null)
  const [resumeFound, setResumeFound] = useState(false)
  const [jobs, setJobs] = useState<JobItem[]>([])
  const [selectedIdx, setSelectedIdx] = useState<number | null>(null)

  useEffect(() => {
    ;(async () => {
      try {
        const [p, r] = await Promise.all([
          fetch('/api/profile'),
          fetch('/api/resume/list')
        ])
        if (p.ok) { const pj = await p.json(); setProfile(pj.profile) }
        if (r.ok) { const rj = await r.json(); setResumeFound((rj.resumes || []).length > 0) }
      } catch {}
    })()
  }, [])

  const startAutopilot = async () => {
    setLoading(true)
    setMessage('Searching public job boards…')
    try {
      const keywords = (profile?.skills && Array.isArray(profile.skills) && profile.skills.length) ? profile.skills.slice(0, 8).join(', ') : ''
      const locations = typeof profile?.location === 'string' ? profile.location : ''
      const resp = await fetch('/api/job-boards/autopilot/search', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ keywords, locations, radiusKm: 150, days: 30, limit: 20 })
      })
      const json = await resp.json().catch(()=>({}))
      if (!resp.ok || !json.success) throw new Error(json.error || 'Search failed')
      setJobs(json.results || [])
      setStep('review')
    } catch (e: any) {
      setMessage(e?.message || 'Search failed. Please try again.')
    } finally { setLoading(false) }
  }

  const useSelectedJob = async () => {
    if (selectedIdx == null) return
    const j = jobs[selectedIdx]
    try {
      // Prefill for analyze step via localStorage bridge
      if (j?.title) localStorage.setItem('job:title', j.title)
      if (j?.company) localStorage.setItem('job:company', j.company)
      if (j?.url) localStorage.setItem('job:url', j.url)
    } catch {}
    // Mark onboarding complete
    try { await fetch('/api/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ preferences: { onboardingCompleted: true } }) }) } catch {}
    setStep('done')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="mx-auto max-w-4xl px-4 py-8">
        <div className="mb-6">
          <h1 className="text-2xl font-bold">Welcome to Career Lever</h1>
          <p className="text-sm text-foreground">Well set you up with resume and job matches in a few steps.</p>
        </div>

        {step === 'welcome' && (
          <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border">
            <div className="text-sm text-foreground">Start by uploading a resume or build one.</div>
            <div className="flex gap-3">
              <button className="px-4 py-2 border rounded" onClick={() => setStep('upload')}>Upload Resume</button>
              <Link className="px-4 py-2 border rounded" href="/resume-builder">Build a Resume</Link>
              {resumeFound && <button className="px-4 py-2 border rounded" onClick={() => setStep('autopilot')}>Use Existing Resume</button>}
            </div>
          </div>
        )}

        {step === 'upload' && (
          <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border">
            <div className="text-sm text-foreground">Upload PDF resume. Well extract keywords and location automatically.</div>
            <form className="space-y-3" onSubmit={async (e) => {
              e.preventDefault(); setLoading(true); setMessage('Uploading resume…')
              const form = e.target as HTMLFormElement
              const fd = new FormData(form)
              try {
                const r = await fetch('/api/resume/upload', { method: 'POST', body: fd })
                if (r.ok) { setStep('autopilot') } else { setMessage('Upload failed') }
              } catch { setMessage('Upload failed') }
              setLoading(false)
            }}>
              <input type="file" name="resume" accept="application/pdf" className="block" required />
              <button type="submit" className="px-4 py-2 border rounded">Upload</button>
              {message && <div className="text-xs text-muted-foreground">{message}</div>}
            </form>
          </div>
        )}

        {step === 'autopilot' && (
          <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border">
            <div className="text-sm text-foreground">Were finding public listings that match your resume.</div>
            <button onClick={startAutopilot} disabled={loading} className="px-4 py-2 border rounded">{loading ? 'Searching…' : 'Start Search'}</button>
            {loading && (
              <div className="mt-4">
                <div className="h-2 w-full bg-gray-200 rounded overflow-hidden">
                  <div className="h-2 w-2/3 bg-gradient-to-r from-blue-400 to-purple-400 animate-pulse" />
                </div>
                <div className="text-xs text-muted-foreground mt-2">{message}</div>
              </div>
            )}
          </div>
        )}

        {step === 'review' && (
          <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border">
            <div className="text-sm text-foreground">Select a job to proceed through Analyze → Research → Customize.</div>
            <div className="max-h-96 overflow-y-auto space-y-2">
              {jobs.map((j, idx) => (
                <div key={idx} className={`border rounded p-3 flex items-center justify-between ${selectedIdx===idx?'border-blue-500 bg-blue-50':'border-gray-200'}`}>
                  <div className="min-w-0">
                    <div className="font-medium truncate">{j.title || 'Untitled role'}</div>
                    <div className="text-xs text-muted-foreground truncate">{[j.company, j.location, j.source].filter(Boolean).join(' • ')}</div>
                  </div>
                  <div className="flex items-center gap-2">
                    {j.url && <a href={j.url} target="_blank" rel="noopener noreferrer" className="px-2 py-1 border rounded text-xs">Open</a>}
                    <button className="px-2 py-1 border rounded text-xs" onClick={()=>setSelectedIdx(idx)}>{selectedIdx===idx?'Selected':'Select'}</button>
                  </div>
                </div>
              ))}
              {jobs.length===0 && <div className="text-xs text-muted-foreground">No results. Try running search again.</div>}
            </div>
            <div className="flex gap-3">
              <button onClick={()=>setStep('autopilot')} className="px-3 py-2 border rounded text-sm">Run Again</button>
              <button onClick={useSelectedJob} disabled={selectedIdx==null} className="px-3 py-2 border rounded text-sm">Use This Job</button>
            </div>
          </div>
        )}

        {step === 'done' && (
          <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border text-center">
            <div className="text-sm text-foreground">Great! Lets analyze the job next.</div>
            <Link className="px-4 py-2 border rounded" href="/create-application?step=analyze">Go to Analyze</Link>
          </div>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/app/onboarding/quiz/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useSession } from 'next-auth/react'
import { ProgressBar } from '@/components/onboarding/ProgressBar'
import { QuizQuestion } from '@/components/onboarding/QuizQuestion'
import { SuccessAnimation } from '@/components/onboarding/SuccessAnimation'
import './styles.css'
import {
  QuizAnswers,
  CurrentSituation,
  WorkPreference,
  Timeline,
  getExperienceLevelLabel,
  saveQuizProgress,
  loadQuizProgress,
  clearQuizProgress,
  calculateUrgency
} from '@/lib/onboarding-utils'

const TOTAL_STEPS = 6

export default function OnboardingQuizPage() {
  const router = useRouter()
  const { status, update } = useSession()
  const [currentStep, setCurrentStep] = useState(1)
  const [showSuccess, setShowSuccess] = useState(false)
  const [saving, setSaving] = useState(false)
  
  // Quiz answers
  const [answers, setAnswers] = useState<Partial<QuizAnswers>>({
    workPreferences: [],
    preferredLocation: '',
    yearsOfExperience: 5,
    careerInterests: [] // Multi-select career interests
  })
  const [hasResume, setHasResume] = useState<boolean | null>(null)

  // Autocomplete state (removed - no longer needed for multi-select)

  // Load saved progress on mount
  useEffect(() => {
    const saved = loadQuizProgress()
    if (saved) {
      setAnswers(saved.answers)
      setCurrentStep(saved.currentStep)
    }
  }, [])

  // Redirect if not authenticated
  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/signin?callbackUrl=/onboarding/quiz')
    }
  }, [status, router])

  // Auto-save progress
  useEffect(() => {
    if (currentStep > 1) {
      saveQuizProgress(answers, currentStep)
    }
  }, [answers, currentStep])

  // Handle role search (removed - no longer needed for multi-select)

  const handleNext = () => {
    if (currentStep < TOTAL_STEPS) {
      setCurrentStep(currentStep + 1)
    } else {
      handleSubmit()
    }
  }

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleSubmit = async () => {
    setSaving(true)
    
    try {
      // Calculate urgency
      const urgency = calculateUrgency(
        answers.currentSituation!,
        answers.timeline
      )

      const response = await fetch('/api/onboarding/quiz', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...answers,
          urgency,
          completedAt: new Date().toISOString()
        })
      })

      if (!response.ok) {
        throw new Error('Failed to save quiz answers')
      }

      // Clear saved progress
      clearQuizProgress()

      // Update session to reflect onboarding completion
      await update()

      // Show success animation
      setShowSuccess(true)
    } catch (error) {
      console.error('[ONBOARDING] Failed to save quiz:', error)
      alert('Failed to save your answers. Please try again.')
      setSaving(false)
    }
  }

  const handleSuccessComplete = () => {
    // Route based on resume answer
    if (hasResume === false) {
      // No resume - go to resume builder
      router.push('/resume-builder')
    } else if (hasResume === true) {
      // Has resume - go to career finder to upload it
      router.push('/career-finder')
    } else {
      // Default - go to career finder
      router.push('/career-finder')
    }
  }

  // Check if current step is complete
  const isStepComplete = (): boolean => {
    switch (currentStep) {
      case 1:
        return !!answers.currentSituation
      case 2:
        return answers.yearsOfExperience !== undefined
      case 3:
        return !!(answers.careerInterests && answers.careerInterests.length > 0)
      case 4:
        return hasResume !== null
      case 5:
        return answers.workPreferences!.length > 0
      case 6:
        // Timeline only required for actively searching or career change
        if (answers.currentSituation === 'actively_searching' || answers.currentSituation === 'career_change') {
          return !!answers.timeline
        }
        return true
      default:
        return false
    }
  }

  if (status === 'loading') {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  if (showSuccess) {
    return <SuccessAnimation onComplete={handleSuccessComplete} />
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <ProgressBar currentStep={currentStep} totalSteps={TOTAL_STEPS} />

      {/* Question 1: Current Situation */}
      {currentStep === 1 && (
        <QuizQuestion
          title="What's your current situation?"
          subtitle="This helps us understand your job search urgency"
          onNext={handleNext}
          showBack={false}
          nextDisabled={!isStepComplete()}
        >
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {[
              { value: 'actively_searching', icon: '🔍', label: 'Actively job searching', desc: 'I need a job soon' },
              { value: 'open_to_offers', icon: '👀', label: 'Open to new opportunities', desc: 'Exploring options' },
              { value: 'employed_not_looking', icon: '💼', label: 'Employed, not looking', desc: 'Just browsing' },
              { value: 'student', icon: '🎓', label: 'Student/Recent graduate', desc: 'Starting my career' },
              { value: 'career_change', icon: '🚀', label: 'Career change', desc: 'Switching industries' }
            ].map(option => (
              <button
                key={option.value}
                onClick={() => setAnswers({ ...answers, currentSituation: option.value as CurrentSituation })}
                className={`p-4 rounded-xl border-2 text-left transition-all min-h-[80px] ${
                  answers.currentSituation === option.value
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
                    : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-700'
                }`}
              >
                <div className="flex items-start gap-3">
                  <span className="text-2xl">{option.icon}</span>
                  <div className="flex-1">
                    <div className="font-semibold text-gray-900 dark:text-white mb-1">
                      {option.label}
                    </div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">
                      {option.desc}
                    </div>
                  </div>
                  {answers.currentSituation === option.value && (
                    <span className="text-blue-500 text-xl">✓</span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </QuizQuestion>
      )}

      {/* Question 2: Years of Experience */}
      {currentStep === 2 && (
        <QuizQuestion
          title="How many years of experience do you have?"
          subtitle="This helps us match you with the right seniority level"
          onNext={handleNext}
          onBack={handleBack}
          nextDisabled={!isStepComplete()}
        >
          <div className="space-y-6">
            <div className="bg-card rounded-xl p-6 shadow-lg">
              <div className="text-center mb-6">
                <div className="text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
                  {answers.yearsOfExperience}
                </div>
                <div className="text-lg text-gray-600 dark:text-gray-400">
                  {getExperienceLevelLabel(answers.yearsOfExperience || 0)}
                </div>
              </div>

              <input
                type="range"
                min="0"
                max="30"
                value={answers.yearsOfExperience || 5}
                onChange={(e) => setAnswers({ ...answers, yearsOfExperience: parseInt(e.target.value) })}
                className="w-full h-3 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
              />

              <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-2">
                <span>0</span>
                <span>5</span>
                <span>10</span>
                <span>15</span>
                <span>20</span>
                <span>30+</span>
              </div>
            </div>

            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4">
              <div className="flex items-start gap-3">
                <span className="text-2xl">💡</span>
                <div className="text-sm text-blue-900 dark:text-blue-100">
                  {answers.yearsOfExperience === 0 && "You're early in your career - we'll focus on entry-level opportunities"}
                  {answers.yearsOfExperience! >= 1 && answers.yearsOfExperience! <= 2 && "You have some experience - we'll target junior to mid-level roles"}
                  {answers.yearsOfExperience! >= 3 && answers.yearsOfExperience! <= 5 && "You're a mid-level professional - we'll find senior opportunities"}
                  {answers.yearsOfExperience! >= 6 && answers.yearsOfExperience! <= 10 && "You're an experienced professional - we'll target senior and lead roles"}
                  {answers.yearsOfExperience! > 10 && "You're a seasoned professional - we'll focus on leadership and executive positions"}
                </div>
              </div>
            </div>
          </div>
        </QuizQuestion>
      )}

      {/* Question 3: Career Interests (MULTI-SELECT) */}
      {currentStep === 3 && (
        <QuizQuestion
          title="What career areas interest you?"
          subtitle="Select all that apply"
          onNext={handleNext}
          onBack={handleBack}
          nextDisabled={!isStepComplete()}
        >
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
            {[
              { value: 'technology', icon: '💻', label: 'Technology' },
              { value: 'finance', icon: '💰', label: 'Finance' },
              { value: 'healthcare', icon: '🏥', label: 'Healthcare' },
              { value: 'education', icon: '📚', label: 'Education' },
              { value: 'marketing', icon: '📱', label: 'Marketing' },
              { value: 'sales', icon: '💼', label: 'Sales' },
              { value: 'operations', icon: '⚙️', label: 'Operations' },
              { value: 'creative', icon: '🎨', label: 'Creative' },
              { value: 'engineering', icon: '🔧', label: 'Engineering' },
              { value: 'legal', icon: '⚖️', label: 'Legal' },
              { value: 'hr', icon: '👥', label: 'Human Resources' },
              { value: 'consulting', icon: '📊', label: 'Consulting' }
            ].map(option => {
              const isSelected = answers.careerInterests?.includes(option.value)
              return (
                <button
                  key={option.value}
                  onClick={() => {
                    const current = answers.careerInterests || []
                    const updated = isSelected
                      ? current.filter((i: string) => i !== option.value)
                      : [...current, option.value]
                    setAnswers({ ...answers, careerInterests: updated })
                  }}
                  className={`p-4 rounded-xl border-2 text-center transition-all min-h-[100px] ${
                    isSelected
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
                      : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-700'
                  }`}
                >
                  <div className="text-3xl mb-2">{option.icon}</div>
                  <div className="font-semibold text-gray-900 dark:text-white text-sm">
                    {option.label}
                  </div>
                  {isSelected && (
                    <div className="mt-2 text-blue-500 text-xl">✓</div>
                  )}
                </button>
              )
            })}
          </div>
        </QuizQuestion>
      )}

      {/* Question 4: Resume Question */}
      {currentStep === 4 && (
        <QuizQuestion
          title="Do you have a resume ready to upload?"
          subtitle="This helps us guide you to the right place"
          onNext={handleNext}
          onBack={handleBack}
          nextDisabled={!isStepComplete()}
        >
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 max-w-2xl mx-auto">
            <button
              onClick={() => setHasResume(true)}
              className={`p-6 rounded-xl border-2 text-center transition-all min-h-[160px] ${
                hasResume === true
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
                  : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-700'
              }`}
            >
              <div className="text-5xl mb-3">📄</div>
              <div className="font-bold text-xl text-gray-900 dark:text-white mb-2">
                Yes, I have a resume
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">
                I&apos;ll upload my existing resume
              </div>
              {hasResume === true && (
                <div className="mt-3 text-blue-500 text-2xl">✓</div>
              )}
            </button>
            
            <button
              onClick={() => setHasResume(false)}
              className={`p-6 rounded-xl border-2 text-center transition-all min-h-[160px] ${
                hasResume === false
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
                  : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-700'
              }`}
            >
              <div className="text-5xl mb-3">✏️</div>
              <div className="font-bold text-xl text-gray-900 dark:text-white mb-2">
                No, I need to build one
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">
                I&apos;ll create a new resume from scratch
              </div>
              {hasResume === false && (
                <div className="mt-3 text-blue-500 text-2xl">✓</div>
              )}
            </button>
          </div>
          
          <div className="mt-6 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4 max-w-2xl mx-auto">
            <div className="flex items-start gap-3">
              <span className="text-2xl">💡</span>
              <div className="text-sm text-blue-900 dark:text-blue-100">
                {hasResume === true && "Great! You&apos;ll be able to upload your resume and we&apos;ll optimize it for your target jobs."}
                {hasResume === false && "No problem! Our resume builder will guide you through creating a professional resume step-by-step."}
                {hasResume === null && "Choose the option that best describes your situation."}
              </div>
            </div>
          </div>
        </QuizQuestion>
      )}

      {/* Question 5: Work Preferences */}
      {currentStep === 5 && (
        <QuizQuestion
          title="Where do you want to work?"
          subtitle="Select all that apply"
          onNext={handleNext}
          onBack={handleBack}
          nextDisabled={!isStepComplete()}
        >
          <div className="space-y-6">
            {/* Work preference chips */}
            <div>
              <div className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-3">Work arrangement:</div>
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                {[
                  { value: 'remote', icon: '🏡', label: 'Remote', desc: 'Work from anywhere' },
                  { value: 'onsite', icon: '🏢', label: 'On-site', desc: 'In the office' },
                  { value: 'hybrid', icon: '🔄', label: 'Hybrid', desc: 'Mix of both' }
                ].map(option => {
                  const isSelected = answers.workPreferences?.includes(option.value as WorkPreference)
                  return (
                    <button
                      key={option.value}
                      onClick={() => {
                        const current = answers.workPreferences || []
                        const updated = isSelected
                          ? current.filter(p => p !== option.value)
                          : [...current, option.value as WorkPreference]
                        setAnswers({ ...answers, workPreferences: updated })
                      }}
                      className={`p-4 rounded-xl border-2 text-center transition-all min-h-[100px] ${
                        isSelected
                          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
                          : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300'
                      }`}
                    >
                      <div className="text-3xl mb-2">{option.icon}</div>
                      <div className="font-semibold text-gray-900 dark:text-white mb-1">
                        {option.label}
                      </div>
                      <div className="text-xs text-gray-600 dark:text-gray-400">
                        {option.desc}
                      </div>
                      {isSelected && (
                        <div className="mt-2 text-blue-500 text-xl">✓</div>
                      )}
                    </button>
                  )
                })}
              </div>
            </div>

            {/* Location input */}
            <div>
              <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-3">
                Preferred city/region (optional):
              </label>
              <input
                type="text"
                value={answers.preferredLocation || ''}
                onChange={(e) => setAnswers({ ...answers, preferredLocation: e.target.value })}
                placeholder="e.g., Edmonton, AB or New York, NY"
                className="w-full px-4 py-3 rounded-xl border-2 border-gray-200 dark:border-gray-700 bg-card text-gray-900 dark:text-white placeholder-gray-400 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all"
              />
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                💡 Leave blank if you selected &quot;Remote&quot; only
              </p>
            </div>
          </div>
        </QuizQuestion>
      )}

      {/* Question 6: Timeline (conditional) */}
      {currentStep === 6 && (
        <QuizQuestion
          title="What's your timeline?"
          subtitle={
            answers.currentSituation === 'actively_searching' || answers.currentSituation === 'career_change'
              ? 'When do you need a new job?'
              : 'This helps us prioritize opportunities'
          }
          onNext={handleNext}
          onBack={handleBack}
          nextDisabled={!isStepComplete()}
          nextLabel={saving ? 'Saving...' : 'Complete Profile'}
        >
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {[
              { value: 'asap', icon: '⚡', label: 'ASAP (within 2 weeks)', desc: 'I need a job urgently' },
              { value: '1-3_months', icon: '📅', label: '1-3 months', desc: 'Actively searching' },
              { value: '3-6_months', icon: '🗓️', label: '3-6 months', desc: 'Planning ahead' },
              { value: 'flexible', icon: '🕐', label: 'Flexible', desc: 'No rush' }
            ].map(option => (
              <button
                key={option.value}
                onClick={() => setAnswers({ ...answers, timeline: option.value as Timeline })}
                className={`p-4 rounded-xl border-2 text-left transition-all min-h-[80px] ${
                  answers.timeline === option.value
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
                    : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300'
                }`}
              >
                <div className="flex items-start gap-3">
                  <span className="text-2xl">{option.icon}</span>
                  <div className="flex-1">
                    <div className="font-semibold text-gray-900 dark:text-white mb-1">
                      {option.label}
                    </div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">
                      {option.desc}
                    </div>
                  </div>
                  {answers.timeline === option.value && (
                    <span className="text-blue-500 text-xl">✓</span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </QuizQuestion>
      )}
    </div>
  )
}
</file>

<file path="src/app/page.tsx">
import { HeroSectionV2 } from '@/components/hero-section-v2'
import { FeaturesSection } from '@/components/features-section'
import { StatsSection } from '@/components/stats-section'

export default function HomePage() {
  return (
    <div className="min-h-screen bg-background">
      <HeroSectionV2 />
      <FeaturesSection />
      <StatsSection />
    </div>
  )
}
</file>

<file path="src/app/payment/page.tsx">
'use client'

import { useState, Suspense } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { Check, Loader2, CreditCard } from 'lucide-react'

function PaymentContent() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [loading, setLoading] = useState(false)
  const cancelled = searchParams.get('payment') === 'cancelled'

  const handleSubscribe = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/stripe/create-checkout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      })

      const data = await response.json()
      
      if (data.url) {
        window.location.href = data.url
      }
    } catch (error) {
      console.error('Payment error:', error)
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 flex items-center justify-center p-4">
      <div className="max-w-4xl w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-5xl font-bold text-foreground mb-4">
            🚀 Career Lever AI Pro
          </h1>
          <p className="text-xl text-gray-600">
            Your AI-powered career companion
          </p>
        </div>

        {cancelled && (
          <div className="mb-6 p-4 bg-yellow-50 border-2 border-yellow-300 rounded-xl text-center">
            <p className="text-yellow-800 font-semibold">
              Payment was cancelled. Ready to try again?
            </p>
          </div>
        )}

        {/* Pricing Card */}
        <div className="bg-card rounded-2xl shadow-2xl p-8 border-4 border-blue-500 relative overflow-hidden">
          {/* Popular Badge */}
          <div className="absolute top-0 right-0 bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-2 rounded-bl-2xl font-bold">
            LAUNCH SPECIAL
          </div>

          <div className="text-center mb-8 mt-4">
            <div className="text-6xl font-bold text-foreground mb-2">
              $4.99
              <span className="text-2xl text-gray-600 font-normal">/week</span>
            </div>
            <p className="text-gray-600">Cancel anytime • No hidden fees</p>
          </div>

          {/* Features */}
          <div className="space-y-4 mb-8">
            <h3 className="text-xl font-bold text-foreground mb-4">What's Included:</h3>
            
            {[
              'AI-Powered Resume Builder with 6 templates',
              'Unlimited Job Search across 25+ boards',
              'AI Interview Prep with company-specific questions',
              'Salary Negotiation Guide with market data',
              'Personalized Cover Letter Generator',
              'Email Outreach to hiring managers',
              'Application Tracking & Analytics',
              'Resume A/B Testing & Optimization',
              'ATS Score Checker',
              'Priority Support'
            ].map((feature, i) => (
              <div key={i} className="flex items-start gap-3">
                <div className="flex-shrink-0 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center mt-0.5">
                  <Check className="w-4 h-4 text-white" />
                </div>
                <span className="text-gray-700">{feature}</span>
              </div>
            ))}
          </div>

          {/* CTA Button */}
          <button
            onClick={handleSubscribe}
            disabled={loading}
            className="w-full py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-bold text-lg hover:from-blue-700 hover:to-purple-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3 shadow-lg"
          >
            {loading ? (
              <>
                <Loader2 className="w-6 h-6 animate-spin" />
                Processing...
              </>
            ) : (
              <>
                <CreditCard className="w-6 h-6" />
                Subscribe Now
              </>
            )}
          </button>

          <p className="text-center text-sm text-gray-500 mt-4">
            Secure payment powered by Stripe • Cancel anytime
          </p>
        </div>

        {/* Trust Badges */}
        <div className="mt-8 text-center">
          <div className="flex items-center justify-center gap-8 text-gray-600">
            <div className="flex items-center gap-2">
              <Check className="w-5 h-5 text-green-500" />
              <span>Secure Payment</span>
            </div>
            <div className="flex items-center gap-2">
              <Check className="w-5 h-5 text-green-500" />
              <span>Cancel Anytime</span>
            </div>
            <div className="flex items-center gap-2">
              <Check className="w-5 h-5 text-green-500" />
              <span>Money-Back Guarantee</span>
            </div>
          </div>
        </div>

        {/* FAQ */}
        <div className="mt-12 bg-card rounded-xl p-6 shadow-lg">
          <h3 className="text-xl font-bold text-foreground mb-4">Frequently Asked Questions</h3>
          
          <div className="space-y-4">
            <div>
              <h4 className="font-semibold text-foreground mb-1">Can I cancel anytime?</h4>
              <p className="text-gray-600">Yes! Cancel anytime from your account settings. No questions asked.</p>
            </div>
            
            <div>
              <h4 className="font-semibold text-foreground mb-1">Is there a free trial?</h4>
              <p className="text-gray-600">We offer a 7-day money-back guarantee. Try it risk-free!</p>
            </div>
            
            <div>
              <h4 className="font-semibold text-foreground mb-1">What payment methods do you accept?</h4>
              <p className="text-gray-600">We accept all major credit cards through Stripe's secure payment system.</p>
            </div>
            
            <div>
              <h4 className="font-semibold text-foreground mb-1">How does billing work?</h4>
              <p className="text-gray-600">You'll be charged $4.99 every week. You can cancel anytime before your next billing date.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default function PaymentPage() {
  return (
    <Suspense fallback={<div className="min-h-screen flex items-center justify-center"><Loader2 className="w-12 h-12 animate-spin text-blue-600" /></div>}>
      <PaymentContent />
    </Suspense>
  )
}
</file>

<file path="src/app/privacy-policy/page.tsx">
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Privacy Policy | Career Lever AI',
  description: 'Learn how Career Lever AI collects, uses, and protects your personal and professional information.',
  robots: 'index, follow'
}

export default function PrivacyPolicyPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
      <div className="max-w-4xl mx-auto px-4 py-12">
        <div className="bg-card rounded-2xl shadow-xl p-8 md:p-12">
          <h1 className="text-4xl font-bold text-center text-blue-600 dark:text-blue-400 mb-4">
            Career Lever AI Privacy Policy
          </h1>
          <p className="text-center text-gray-600 dark:text-gray-400 mb-8">
            <strong>Last Updated:</strong> October 24, 2025
          </p>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">1. Introduction</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              Career Lever AI ("we", "our", "us") is committed to respecting and protecting your privacy.
              This Privacy Policy describes how we collect, use, store, and protect your personal information
              when using our website, platform, and integrated services ("Service").
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">2. Information We Collect</h2>
            <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
              <li><strong>Personal Information:</strong> Your name, email, job application data, resumes, and LinkedIn profile details (if authorized).</li>
              <li><strong>Automatically Collected:</strong> Browser type, device info, cookies, IP address, session duration, and usage analytics.</li>
              <li><strong>Third-Party Sources:</strong> Public company insights, recruiter LinkedIn profiles, and verified job postings from APIs and boards such as Indeed, Workopolis, and LinkedIn Jobs.</li>
            </ul>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">3. How We Use Information</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
              We use data to:
            </p>
            <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
              <li>Match your resume and skills with open jobs and employers.</li>
              <li>Generate custom insights, cover letters, and analytics for your applications.</li>
              <li>Improve predictive career recommendations and system performance.</li>
              <li>Communicate updates and support messages.</li>
            </ul>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed mt-3 font-semibold">
              We do not rent or sell your personal data.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">4. Data Sharing and Disclosure</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
              We may share aggregated or anonymized datasets with analytics vendors or employers you directly interact with.
              Personal info is disclosed only:
            </p>
            <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
              <li>With your consent to connect you to employers or recruiters.</li>
              <li>With cloud and analytics partners who comply with equivalent security standards.</li>
              <li>If required by law or lawful subpoena.</li>
            </ul>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">5. Data Retention</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              We store data securely using encrypted cloud infrastructure (AWS, Supabase, Vercel) and retain it
              only as long as required to provide services or as required by law.
              Users can delete data anytime by contacting:{' '}
              <a href="mailto:privacy@careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
                privacy@careerleverai.com
              </a>
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">6. LinkedIn and API Integrations</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
              If you link your account to LinkedIn:
            </p>
            <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
              <li>We access limited profile fields (name, picture, experience summary, and email if authorized).</li>
              <li>LinkedIn OAuth 2.0 is used for secure token-based login (we never store your LinkedIn password).</li>
              <li>Data access can be revoked from your LinkedIn settings at any time.</li>
            </ul>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">7. Cookies and Analytics</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              We use cookies for authentication, session management, and usage analytics via tools like Google
              Analytics and Vercel Insights. You may disable cookies through your browser but some features may be limited.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">8. Data Security</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              We protect user data with encrypted communications (HTTPS/TLS), access control, and periodic
              vulnerability monitoring. No method of online transfer or storage is entirely risk-free, but we maintain industry-grade security standards.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">9. Your Privacy Rights</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
              Depending on your location, you may have rights to:
            </p>
            <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
              <li>Access or request deletion of your personal data.</li>
              <li>Withdraw consent for data usage.</li>
              <li>Receive a copy of your data in a portable format.</li>
              <li>Contact your local data authority under GDPR or CCPA compliance.</li>
            </ul>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">10. International Transfers</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              Personal Information may be transferred to servers outside your region. When this occurs, we ensure appropriate data protection safeguards are maintained.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">11. Updates to Privacy Policy</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              We may update this policy periodically. Updated versions will include a "Last Updated" date at the top of the page.
              Material changes will be communicated via email or platform notifications.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">12. Contact Us</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              For privacy concerns, data requests, or legal inquiries:
            </p>
            <p className="text-gray-700 dark:text-gray-300 mt-3">
              📧 <a href="mailto:privacy@careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
                privacy@careerleverai.com
              </a><br />
              🌐 <a href="https://careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
                https://careerleverai.com
              </a>
            </p>
          </section>

          <footer className="text-center text-sm text-gray-500 dark:text-gray-400 mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
            &copy; 2025 Career Lever AI. All rights reserved. |{' '}
            <a href="/" className="text-blue-600 dark:text-blue-400 hover:underline">
              Back to Home
            </a>
          </footer>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/privacy/page.tsx">
"use client"

export default function PrivacyPage() {
  return (
    <div className="max-w-4xl mx-auto p-6 md:p-8 space-y-6">
      <div className="space-y-2">
        <h1 className="text-3xl md:text-4xl font-bold">Privacy Policy</h1>
        <p className="text-sm text-muted-foreground">Last Updated: October 19, 2025</p>
        <p className="text-base text-foreground">Career Lever AI ("we", "our", "us") is committed to protecting your privacy. This policy explains how we collect, use, and safeguard your personal information.</p>
      </div>

      <div className="bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
        <h2 className="text-lg font-semibold mb-2">Your Data Rights</h2>
        <p className="text-sm text-foreground">You control your data. Manage consent, export your information, or request deletion below.</p>
      </div>

      <h2 className="text-lg font-semibold mt-4">Consent</h2>
      <div className="text-sm text-foreground space-y-2">
        <p>We request consent to process your application data to provide core features (customization, analytics, alerts). You can withdraw consent anytime.</p>
        <div className="space-x-2">
          <button className="px-3 py-2 border rounded text-sm" onClick={()=>{ try { localStorage.setItem('consent:processing','granted'); alert('Consent saved'); } catch {} }}>Grant Consent</button>
          <button className="px-3 py-2 border rounded text-sm" onClick={()=>{ try { localStorage.setItem('consent:processing','withdrawn'); alert('Consent withdrawn'); } catch {} }}>Withdraw</button>
        </div>
      </div>

      <h2 className="text-lg font-semibold mt-6">Export Your Data</h2>
      <div className="text-sm text-foreground space-y-2">
        <p>Download a JSON export of your account data.</p>
        <a href="/api/privacy/export" className="px-3 py-2 border rounded text-sm inline-block">Export JSON</a>
      </div>

      <h2 className="text-lg font-semibold mt-6">Request Deletion</h2>
      <div className="text-sm text-foreground space-y-2">
        <p>Submit a deletion request. We’ll confirm via your account email.</p>
        <form onSubmit={async(e)=>{ e.preventDefault(); const email=(e.target as any).email.value; const r = await fetch('/api/privacy/delete',{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ email }) }); alert(r.ok?'Request submitted':'Failed'); }} className="space-x-2">
          <input name="email" type="email" required placeholder="Your email" className="border rounded p-2" />
          <button type="submit" className="px-3 py-2 border rounded text-sm">Request</button>
        </form>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">1. Information We Collect</h2>
        
        <div>
          <h3 className="text-lg font-semibold">1.1 Information You Provide</h3>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li><strong>Account Information:</strong> Name, email address, profile photo</li>
            <li><strong>Professional Information:</strong> Resumes, cover letters, work experience, skills, education</li>
            <li><strong>Job Applications:</strong> Job titles, companies, application status, notes</li>
            <li><strong>User-Generated Content:</strong> Custom templates, saved searches, preferences</li>
          </ul>
        </div>

        <div>
          <h3 className="text-lg font-semibold">1.2 Information Collected Automatically</h3>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li><strong>Device Information:</strong> Device type, operating system, browser type, IP address</li>
            <li><strong>Usage Data:</strong> Pages viewed, features used, time spent, click patterns</li>
            <li><strong>Location Data:</strong> Approximate location based on IP address (for job matching)</li>
            <li><strong>Performance Data:</strong> Error logs, crash reports, API response times</li>
          </ul>
        </div>

        <div>
          <h3 className="text-lg font-semibold">1.3 Information from Third Parties</h3>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li><strong>Google OAuth:</strong> Email, name, profile photo (with your permission)</li>
            <li><strong>Google Calendar:</strong> Calendar events (only when you enable integration)</li>
            <li><strong>AI Services:</strong> Processed data from Perplexity AI for research and insights</li>
          </ul>
        </div>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">2. How We Use Your Information</h2>
        
        <div>
          <h3 className="text-lg font-semibold">2.1 To Provide Our Services</h3>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li>Generate AI-powered resume and cover letter customizations</li>
            <li>Provide company research and job market insights</li>
            <li>Track and manage your job applications</li>
            <li>Send notifications about application deadlines and updates</li>
            <li>Sync with your calendar for interview scheduling</li>
          </ul>
        </div>

        <div>
          <h3 className="text-lg font-semibold">2.2 To Improve Our Services</h3>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li>Analyze usage patterns to enhance features</li>
            <li>Conduct research and development</li>
            <li>Test new features and improvements</li>
            <li>Personalize your experience and recommendations</li>
          </ul>
        </div>

        <div>
          <h3 className="text-lg font-semibold">2.3 For Security and Legal Compliance</h3>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li>Prevent fraud, abuse, and security incidents</li>
            <li>Comply with legal obligations and law enforcement requests</li>
            <li>Enforce our Terms of Service</li>
            <li>Protect the rights and safety of our users</li>
          </ul>
        </div>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">3. How We Share Your Information</h2>
        
        <div className="bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-4">
          <p className="text-sm font-semibold">✓ We DO NOT sell your personal data to third parties.</p>
        </div>

        <div>
          <h3 className="text-lg font-semibold">3.1 Service Providers</h3>
          <p className="text-sm text-foreground mt-2">We share data with trusted service providers who help us operate our services:</p>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li><strong>Cloud Hosting:</strong> Railway, Vercel (infrastructure)</li>
            <li><strong>Database:</strong> MongoDB Atlas (data storage)</li>
            <li><strong>AI Services:</strong> Perplexity AI (research and insights)</li>
            <li><strong>Authentication:</strong> Google OAuth (sign-in)</li>
            <li><strong>Analytics:</strong> Error tracking and performance monitoring</li>
          </ul>
        </div>

        <div>
          <h3 className="text-lg font-semibold">3.2 With Your Consent</h3>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li>When you connect third-party services (e.g., Google Calendar)</li>
            <li>When you share your resume or application with others</li>
            <li>When you explicitly authorize data sharing</li>
          </ul>
        </div>

        <div>
          <h3 className="text-lg font-semibold">3.3 Legal Requirements</h3>
          <p className="text-sm text-foreground mt-2">We may disclose information if required by law, court order, or to protect rights and safety.</p>
        </div>
      </div>

      <h2 className="text-lg font-semibold mt-4">Security</h2>
      <p className="text-sm text-foreground">We use industry practices (encryption in transit, restricted access, rate limiting) to protect your data. Despite safeguards, no method is 100% secure.</p>

      <h2 className="text-lg font-semibold mt-4">Retention</h2>
      <p className="text-sm text-foreground">We retain data for the duration of your account or as required by law. You may delete your account to remove data, subject to legal/operational limits.</p>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">4. Your Privacy Rights</h2>
        
        <div>
          <h3 className="text-lg font-semibold">4.1 GDPR Rights (EU Users)</h3>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li><strong>Right to Access:</strong> Request a copy of your personal data</li>
            <li><strong>Right to Rectification:</strong> Correct inaccurate data</li>
            <li><strong>Right to Erasure:</strong> Request deletion of your data</li>
            <li><strong>Right to Portability:</strong> Export your data in machine-readable format</li>
            <li><strong>Right to Object:</strong> Object to processing of your data</li>
            <li><strong>Right to Restrict:</strong> Limit how we use your data</li>
          </ul>
        </div>

        <div>
          <h3 className="text-lg font-semibold">4.2 CCPA Rights (California Users)</h3>
          <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
            <li><strong>Right to Know:</strong> What personal information we collect and how we use it</li>
            <li><strong>Right to Delete:</strong> Request deletion of your personal information</li>
            <li><strong>Right to Opt-Out:</strong> Opt-out of sale of personal information (we don't sell data)</li>
            <li><strong>Right to Non-Discrimination:</strong> Equal service regardless of privacy choices</li>
          </ul>
        </div>

        <div>
          <h3 className="text-lg font-semibold">4.3 How to Exercise Your Rights</h3>
          <p className="text-sm text-foreground mt-2">Use the tools above or contact us at <strong>privacy@careerlever.com</strong></p>
        </div>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">5. Data Security</h2>
        <p className="text-sm text-foreground">We implement industry-standard security measures to protect your data:</p>
        <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
          <li><strong>Encryption:</strong> All data encrypted in transit (TLS/SSL) and at rest</li>
          <li><strong>Access Controls:</strong> Role-based access with multi-factor authentication</li>
          <li><strong>Monitoring:</strong> 24/7 security monitoring and incident response</li>
          <li><strong>Regular Audits:</strong> Security assessments and penetration testing</li>
          <li><strong>Data Backups:</strong> Regular encrypted backups with disaster recovery</li>
        </ul>
        <p className="text-sm text-muted-foreground mt-2">Despite our safeguards, no method of transmission over the Internet is 100% secure. We cannot guarantee absolute security.</p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">6. Data Retention</h2>
        <p className="text-sm text-foreground">We retain your data for as long as your account is active or as needed to provide services. Retention periods:</p>
        <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
          <li><strong>Account Data:</strong> Until account deletion + 30 days</li>
          <li><strong>Resumes & Applications:</strong> Until you delete them or close your account</li>
          <li><strong>Usage Logs:</strong> 90 days for analytics, 1 year for security</li>
          <li><strong>Backups:</strong> 30 days rolling retention</li>
        </ul>
        <p className="text-sm text-foreground mt-2">After deletion, some data may remain in backups for up to 30 days before permanent removal.</p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">7. Children's Privacy</h2>
        <p className="text-sm text-foreground">Career Lever AI is not intended for users under 16 years of age. We do not knowingly collect personal information from children. If you believe we have collected data from a child, please contact us immediately.</p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">8. International Data Transfers</h2>
        <p className="text-sm text-foreground">Your data may be transferred to and processed in countries other than your own. We ensure appropriate safeguards are in place, including:</p>
        <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
          <li>Standard Contractual Clauses (SCCs) for EU data transfers</li>
          <li>Data Processing Agreements with all service providers</li>
          <li>Compliance with applicable data protection laws</li>
        </ul>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">9. Cookies and Tracking</h2>
        <p className="text-sm text-foreground">We use cookies and similar technologies to:</p>
        <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
          <li>Keep you signed in</li>
          <li>Remember your preferences</li>
          <li>Understand how you use our services</li>
          <li>Improve performance and security</li>
        </ul>
        <p className="text-sm text-foreground mt-2">You can control cookies through your browser settings. Disabling cookies may affect functionality.</p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">10. Changes to This Policy</h2>
        <p className="text-sm text-foreground">We may update this privacy policy from time to time. We will notify you of significant changes by:</p>
        <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
          <li>Posting the new policy on this page</li>
          <li>Updating the "Last Updated" date</li>
          <li>Sending an email notification (for material changes)</li>
        </ul>
        <p className="text-sm text-foreground mt-2">Your continued use of our services after changes constitutes acceptance of the updated policy.</p>
      </div>

      <div className="space-y-4">
        <h2 className="text-2xl font-bold">11. Contact Us</h2>
        <p className="text-sm text-foreground">For privacy questions, concerns, or to exercise your rights:</p>
        <div className="bg-gray-50 dark:bg-gray-900 border rounded-lg p-4 space-y-2">
          <p className="text-sm"><strong>Email:</strong> privacy@careerlever.com</p>
          <p className="text-sm"><strong>Support:</strong> support@careerlever.com</p>
          <p className="text-sm"><strong>Data Protection Officer:</strong> dpo@careerlever.com</p>
          <p className="text-sm"><strong>Address:</strong> Career Lever AI, [Your Address]</p>
        </div>
        <p className="text-sm text-muted-foreground mt-4">We will respond to all requests within 30 days.</p>
      </div>

      <div className="border-t pt-6 mt-8">
        <p className="text-xs text-muted-foreground">This privacy policy is effective as of October 19, 2025. Version 1.0</p>
      </div>
    </div>
  )
}
</file>

<file path="src/app/profile/page.tsx">
'use client'

import { useEffect } from 'react'
import { useRouter } from 'next/navigation'

/**
 * Redirect /profile to /settings/profile
 * This route is referenced in navigation but doesn't exist
 */
export default function ProfileRedirect() {
  const router = useRouter()
  
  useEffect(() => {
    router.replace('/settings/profile')
  }, [router])
  
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
        <p className="text-muted-foreground">Redirecting to Profile Settings...</p>
      </div>
    </div>
  )
}
</file>

<file path="src/app/resume-ab-testing/page.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { BarChart3, Eye, Download, Mail, TrendingUp, Plus } from 'lucide-react'

interface VariantAnalytics {
  id: string
  name: string
  template: string
  isActive: boolean
  metrics: {
    views: number
    downloads: number
    responses: number
    totalInteractions: number
    responseRate: number
    downloadRate: number
  }
  createdAt: string
}

export default function ResumeABTestingPage() {
  const [variants, setVariants] = useState<VariantAnalytics[]>([])
  const [bestVariantId, setBestVariantId] = useState<string | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchAnalytics()
  }, [])

  const fetchAnalytics = async () => {
    try {
      // Get first resume ID (simplified)
      const resumeResponse = await fetch('/api/resume/list')
      if (!resumeResponse.ok) return

      const resumeData = await resumeResponse.json()
      const resumeId = resumeData.resumes?.[0]?.id

      if (!resumeId) return

      // Fetch variant analytics
      const response = await fetch(`/api/resume/variants/analytics?resumeId=${resumeId}`)
      if (response.ok) {
        const data = await response.json()
        setVariants(data.variants || [])
        setBestVariantId(data.bestVariant)
      }
    } catch (error) {
      console.error('[AB_TESTING] Error:', error)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
        <div className="animate-pulse space-y-4">
          <div className="h-12 bg-muted rounded"></div>
          <div className="h-64 bg-muted rounded"></div>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-2xl sm:text-3xl font-bold mb-2">Resume A/B Testing</h1>
        <p className="text-muted-foreground">
          Track which resume variants perform best and optimize your applications
        </p>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Total Variants</p>
                <p className="text-2xl font-bold">{variants.length}</p>
              </div>
              <BarChart3 className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Total Views</p>
                <p className="text-2xl font-bold">
                  {variants.reduce((sum, v) => sum + v.metrics.views, 0)}
                </p>
              </div>
              <Eye className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Downloads</p>
                <p className="text-2xl font-bold">
                  {variants.reduce((sum, v) => sum + v.metrics.downloads, 0)}
                </p>
              </div>
              <Download className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Responses</p>
                <p className="text-2xl font-bold">
                  {variants.reduce((sum, v) => sum + v.metrics.responses, 0)}
                </p>
              </div>
              <Mail className="w-8 h-8 text-yellow-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Variants List */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Resume Variants Performance</span>
            <Button size="sm">
              <Plus className="w-4 h-4 mr-2" />
              Create Variant
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {variants.length === 0 ? (
            <div className="text-center py-12">
              <BarChart3 className="w-16 h-16 mx-auto text-muted-foreground mb-4" />
              <p className="text-muted-foreground mb-4">
                No variants yet. Create your first variant to start A/B testing.
              </p>
              <Button>
                <Plus className="w-4 h-4 mr-2" />
                Create First Variant
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {variants.map((variant) => (
                <div
                  key={variant.id}
                  className={`p-6 rounded-lg border-2 ${
                    variant.id === bestVariantId
                      ? 'border-green-500 bg-green-50 dark:bg-green-950'
                      : 'border-border'
                  }`}
                >
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <div className="flex items-center gap-2 mb-1">
                        <h3 className="text-lg font-bold">{variant.name}</h3>
                        {variant.id === bestVariantId && (
                          <span className="px-2 py-1 bg-green-500 text-white text-xs rounded-full flex items-center gap-1">
                            <TrendingUp className="w-3 h-3" />
                            Best Performer
                          </span>
                        )}
                        {variant.isActive && (
                          <span className="px-2 py-1 bg-blue-500 text-white text-xs rounded-full">
                            Active
                          </span>
                        )}
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Template: {variant.template}
                      </p>
                    </div>
                  </div>

                  {/* Metrics Grid */}
                  <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                    <div className="text-center p-3 bg-muted rounded-lg">
                      <div className="flex items-center justify-center gap-1 mb-1">
                        <Eye className="w-4 h-4 text-blue-500" />
                        <span className="text-xs text-muted-foreground">Views</span>
                      </div>
                      <div className="text-2xl font-bold">{variant.metrics.views}</div>
                    </div>

                    <div className="text-center p-3 bg-muted rounded-lg">
                      <div className="flex items-center justify-center gap-1 mb-1">
                        <Download className="w-4 h-4 text-green-500" />
                        <span className="text-xs text-muted-foreground">Downloads</span>
                      </div>
                      <div className="text-2xl font-bold">{variant.metrics.downloads}</div>
                    </div>

                    <div className="text-center p-3 bg-muted rounded-lg">
                      <div className="flex items-center justify-center gap-1 mb-1">
                        <Mail className="w-4 h-4 text-yellow-500" />
                        <span className="text-xs text-muted-foreground">Responses</span>
                      </div>
                      <div className="text-2xl font-bold">{variant.metrics.responses}</div>
                    </div>

                    <div className="text-center p-3 bg-muted rounded-lg">
                      <div className="text-xs text-muted-foreground mb-1">Response Rate</div>
                      <div className="text-2xl font-bold text-green-600">
                        {variant.metrics.responseRate}%
                      </div>
                    </div>

                    <div className="text-center p-3 bg-muted rounded-lg">
                      <div className="text-xs text-muted-foreground mb-1">Download Rate</div>
                      <div className="text-2xl font-bold text-purple-600">
                        {variant.metrics.downloadRate}%
                      </div>
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2 mt-4">
                    <Button size="sm" variant="outline">View</Button>
                    <Button size="sm" variant="outline">Edit</Button>
                    <Button size="sm" variant="outline">
                      {variant.isActive ? 'Deactivate' : 'Activate'}
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/resume-builder-v2/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { QuickStart } from '@/components/resume-builder/quick-start'
import { TemplateSelector } from '@/components/resume-builder/template-selector'
import { ResumePreview } from '@/components/resume-builder/resume-preview'
import { BulletPointGenerator } from '@/components/resume-builder/bullet-point-generator'
import { ATSChecker } from '@/components/resume-builder/ats-checker'
import { ProgressTracker } from '@/components/resume-builder/progress-tracker'
import { ExportHub } from '@/components/resume-builder/export-hub'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Plus, Trash2, Save, ArrowRight } from 'lucide-react'

interface ResumeData {
  personalInfo: {
    fullName: string
    email: string
    phone: string
    location: string
    linkedin?: string
    website?: string
    summary: string
  }
  experience: Array<{
    id: string
    company: string
    position: string
    location: string
    startDate: string
    endDate: string
    current: boolean
    achievements: string[]
  }>
  education: Array<{
    id: string
    institution: string
    degree: string
    field: string
    graduationDate: string
  }>
  skills: {
    technical: string[]
    soft: string[]
  }
}

const EMPTY_RESUME: ResumeData = {
  personalInfo: {
    fullName: '',
    email: '',
    phone: '',
    location: '',
    linkedin: '',
    website: '',
    summary: ''
  },
  experience: [],
  education: [],
  skills: {
    technical: [],
    soft: []
  }
}

export default function ResumeBuilderV2Page() {
  const [step, setStep] = useState<'quick-start' | 'builder'>('quick-start')
  const [resume, setResume] = useState<ResumeData>(EMPTY_RESUME)
  const [selectedTemplate, setSelectedTemplate] = useState('modern')
  const [activeSection, setActiveSection] = useState<'personal' | 'experience' | 'education' | 'skills'>('personal')
  const [editingExpIndex, setEditingExpIndex] = useState<number | null>(null)

  const handleResumeImported = (data: any) => {
    if (data) {
      setResume(data)
    }
    setStep('builder')
  }

  const updatePersonalInfo = (field: string, value: string) => {
    setResume(prev => ({
      ...prev,
      personalInfo: { ...prev.personalInfo, [field]: value }
    }))
  }

  const addExperience = () => {
    const newExp = {
      id: Date.now().toString(),
      company: '',
      position: '',
      location: '',
      startDate: '',
      endDate: '',
      current: false,
      achievements: []
    }
    setResume(prev => ({
      ...prev,
      experience: [...prev.experience, newExp]
    }))
    setEditingExpIndex(resume.experience.length)
  }

  const updateExperience = (index: number, field: string, value: any) => {
    setResume(prev => ({
      ...prev,
      experience: prev.experience.map((exp, i) =>
        i === index ? { ...exp, [field]: value } : exp
      )
    }))
  }

  const addAchievement = (expIndex: number, achievement: string) => {
    setResume(prev => ({
      ...prev,
      experience: prev.experience.map((exp, i) =>
        i === expIndex
          ? { ...exp, achievements: [...exp.achievements, achievement] }
          : exp
      )
    }))
  }

  const removeExperience = (index: number) => {
    setResume(prev => ({
      ...prev,
      experience: prev.experience.filter((_, i) => i !== index)
    }))
  }

  const addEducation = () => {
    const newEdu = {
      id: Date.now().toString(),
      institution: '',
      degree: '',
      field: '',
      graduationDate: ''
    }
    setResume(prev => ({
      ...prev,
      education: [...prev.education, newEdu]
    }))
  }

  const updateEducation = (index: number, field: string, value: string) => {
    setResume(prev => ({
      ...prev,
      education: prev.education.map((edu, i) =>
        i === index ? { ...edu, [field]: value } : edu
      )
    }))
  }

  const removeEducation = (index: number) => {
    setResume(prev => ({
      ...prev,
      education: prev.education.filter((_, i) => i !== index)
    }))
  }

  const addSkill = (type: 'technical' | 'soft', skill: string) => {
    if (!skill.trim()) return
    setResume(prev => ({
      ...prev,
      skills: {
        ...prev.skills,
        [type]: [...prev.skills[type], skill.trim()]
      }
    }))
  }

  const removeSkill = (type: 'technical' | 'soft', index: number) => {
    setResume(prev => ({
      ...prev,
      skills: {
        ...prev.skills,
        [type]: prev.skills[type].filter((_, i) => i !== index)
      }
    }))
  }

  if (step === 'quick-start') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 py-12">
        <div className="max-w-7xl mx-auto px-4">
          <div className="text-center mb-12">
            <h1 className="text-5xl font-bold text-foreground mb-4">
              ✨ AI-Powered Resume Builder
            </h1>
            <p className="text-xl text-gray-600">
              Create a professional, ATS-optimized resume in minutes
            </p>
          </div>

          <QuickStart onResumeImported={handleResumeImported} />
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 shadow-lg">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Resume Builder</h1>
            <p className="text-blue-100">Build your perfect resume with AI assistance</p>
          </div>
          <div className="flex items-center gap-4">
            <Button
              onClick={() => setStep('quick-start')}
              variant="outline"
              className="bg-white/10 border-white/30 text-white hover:bg-card/20"
            >
              ← Start Over
            </Button>
            <Button className="bg-card text-blue-600 hover:bg-blue-50">
              <Save className="w-4 h-4 mr-2" />
              Save Resume
            </Button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Template Selector */}
        <div className="mb-8">
          <TemplateSelector
            selectedTemplate={selectedTemplate}
            onSelectTemplate={setSelectedTemplate}
          />
        </div>

        {/* Main Builder Layout */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left: Editor (2 columns) */}
          <div className="lg:col-span-2 space-y-6">
            {/* Section Tabs */}
            <div className="bg-card rounded-xl border-2 border-border p-2 flex gap-2">
              {(['personal', 'experience', 'education', 'skills'] as const).map((section) => (
                <button
                  key={section}
                  onClick={() => setActiveSection(section)}
                  className={`flex-1 py-3 px-4 rounded-lg font-semibold transition-all ${
                    activeSection === section
                      ? 'bg-blue-500 text-white shadow-lg'
                      : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  {section.charAt(0).toUpperCase() + section.slice(1)}
                </button>
              ))}
            </div>

            {/* Personal Info Section */}
            {activeSection === 'personal' && (
              <div className="bg-card rounded-xl border-2 border-border p-6 space-y-4">
                <h3 className="text-xl font-bold text-foreground">Personal Information</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      Full Name *
                    </label>
                    <Input
                      value={resume.personalInfo.fullName}
                      onChange={(e) => updatePersonalInfo('fullName', e.target.value)}
                      placeholder="John Doe"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      Email *
                    </label>
                    <Input
                      type="email"
                      value={resume.personalInfo.email}
                      onChange={(e) => updatePersonalInfo('email', e.target.value)}
                      placeholder="john@example.com"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      Phone *
                    </label>
                    <Input
                      value={resume.personalInfo.phone}
                      onChange={(e) => updatePersonalInfo('phone', e.target.value)}
                      placeholder="(555) 123-4567"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      Location
                    </label>
                    <Input
                      value={resume.personalInfo.location}
                      onChange={(e) => updatePersonalInfo('location', e.target.value)}
                      placeholder="San Francisco, CA"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      LinkedIn
                    </label>
                    <Input
                      value={resume.personalInfo.linkedin}
                      onChange={(e) => updatePersonalInfo('linkedin', e.target.value)}
                      placeholder="linkedin.com/in/johndoe"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      Website
                    </label>
                    <Input
                      value={resume.personalInfo.website}
                      onChange={(e) => updatePersonalInfo('website', e.target.value)}
                      placeholder="johndoe.com"
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    Professional Summary
                  </label>
                  <Textarea
                    value={resume.personalInfo.summary}
                    onChange={(e) => updatePersonalInfo('summary', e.target.value)}
                    placeholder="A brief summary of your professional background and key achievements..."
                    rows={4}
                  />
                </div>

                <Button
                  onClick={() => setActiveSection('experience')}
                  className="w-full bg-blue-500 hover:bg-blue-600"
                >
                  Next: Add Experience <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            )}

            {/* Experience Section */}
            {activeSection === 'experience' && (
              <div className="space-y-6">
                {resume.experience.map((exp, index) => (
                  <div key={exp.id} className="bg-card rounded-xl border-2 border-border p-6 space-y-4">
                    <div className="flex items-center justify-between">
                      <h4 className="text-lg font-bold text-foreground">
                        Experience #{index + 1}
                      </h4>
                      <Button
                        onClick={() => removeExperience(index)}
                        variant="outline"
                        size="sm"
                        className="text-red-600 border-red-300 hover:bg-red-50"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Position
                        </label>
                        <Input
                          value={exp.position}
                          onChange={(e) => updateExperience(index, 'position', e.target.value)}
                          placeholder="Software Engineer"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Company
                        </label>
                        <Input
                          value={exp.company}
                          onChange={(e) => updateExperience(index, 'company', e.target.value)}
                          placeholder="Tech Corp"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Location
                        </label>
                        <Input
                          value={exp.location}
                          onChange={(e) => updateExperience(index, 'location', e.target.value)}
                          placeholder="San Francisco, CA"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Start Date
                        </label>
                        <Input
                          value={exp.startDate}
                          onChange={(e) => updateExperience(index, 'startDate', e.target.value)}
                          placeholder="Jan 2020"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          End Date
                        </label>
                        <Input
                          value={exp.endDate}
                          onChange={(e) => updateExperience(index, 'endDate', e.target.value)}
                          placeholder="Present"
                          disabled={exp.current}
                        />
                      </div>
                      
                      <div className="flex items-center pt-8">
                        <input
                          type="checkbox"
                          checked={exp.current}
                          onChange={(e) => updateExperience(index, 'current', e.target.checked)}
                          className="mr-2"
                        />
                        <label className="text-sm text-gray-700">Currently working here</label>
                      </div>
                    </div>

                    {/* AI Bullet Generator */}
                    <BulletPointGenerator
                      role={exp.position}
                      company={exp.company}
                      achievements={exp.achievements}
                      onAddBullet={(bullet) => addAchievement(index, bullet)}
                    />

                    {/* Achievements List */}
                    {exp.achievements.length > 0 && (
                      <div>
                        <h5 className="font-semibold text-foreground mb-2">Achievements:</h5>
                        <ul className="space-y-2">
                          {exp.achievements.map((achievement, achIndex) => (
                            <li key={achIndex} className="flex items-start gap-2 p-3 bg-gray-50 rounded-lg">
                              <span className="text-gray-700">• {achievement}</span>
                              <button
                                onClick={() => {
                                  const newAchievements = exp.achievements.filter((_, i) => i !== achIndex)
                                  updateExperience(index, 'achievements', newAchievements)
                                }}
                                className="ml-auto text-red-500 hover:text-red-700"
                              >
                                <Trash2 className="w-4 h-4" />
                              </button>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                ))}

                <Button
                  onClick={addExperience}
                  variant="outline"
                  className="w-full border-2 border-dashed border-gray-300 hover:border-blue-500 hover:bg-blue-50"
                >
                  <Plus className="w-5 h-5 mr-2" />
                  Add Experience
                </Button>

                <Button
                  onClick={() => setActiveSection('education')}
                  className="w-full bg-blue-500 hover:bg-blue-600"
                >
                  Next: Add Education <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            )}

            {/* Education & Skills sections would go here - keeping it concise */}
            
            {/* Export Hub */}
            <ExportHub resume={resume} />
          </div>

          {/* Right: Preview & Tools (1 column) */}
          <div className="space-y-6">
            <ResumePreview resume={resume} template={selectedTemplate} />
            <ProgressTracker resume={resume} />
            <ATSChecker resume={resume} />
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/resume-builder/page.tsx">
import { Suspense } from 'react'
import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import { ResumeBuilder } from './components/resume-builder'

export default async function ResumeBuilderPage() {
  const session = await getServerSession(authOptions)

  if (!session) {
    redirect('/auth/signin')
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground">Resume Builder</h1>
          <p className="mt-2 text-lg text-muted-foreground">
            Create professional, ATS-optimized resumes with AI assistance and beautiful templates
          </p>
        </div>

        <Suspense fallback={<ResumeBuilderSkeleton />}>
          <ResumeBuilder userId={session.user.id} />
        </Suspense>
      </div>
    </div>
  )
}

function ResumeBuilderSkeleton() {
  return (
    <div className="space-y-8">
      {/* Template Selection Skeleton */}
      <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
        <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="border rounded-lg p-4">
              <div className="w-full h-32 bg-gray-200 rounded mb-3"></div>
              <div className="w-20 h-4 bg-gray-200 rounded"></div>
            </div>
          ))}
        </div>
      </div>

      {/* Builder Interface Skeleton */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
              <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
              <div className="space-y-3">
                <div className="w-full h-10 bg-gray-200 rounded"></div>
                <div className="w-3/4 h-10 bg-gray-200 rounded"></div>
              </div>
            </div>
          ))}
        </div>

        <div className="space-y-6">
          <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
            <div className="w-24 h-6 bg-gray-200 rounded mb-4"></div>
            <div className="w-full h-64 bg-gray-200 rounded"></div>
          </div>

          <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
            <div className="w-20 h-6 bg-gray-200 rounded mb-4"></div>
            <div className="w-full h-32 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/resumes/page.tsx">
'use client'

import { useEffect } from 'react'
import { useRouter } from 'next/navigation'

/**
 * Redirect /resumes to /resume-builder
 * This route is referenced in navigation but doesn't exist
 */
export default function ResumesRedirect() {
  const router = useRouter()
  
  useEffect(() => {
    router.replace('/resume-builder')
  }, [router])
  
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
        <p className="text-muted-foreground">Redirecting to Resume Builder...</p>
      </div>
    </div>
  )
}
</file>

<file path="src/app/reverse-market/page.tsx">
import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import ReverseMarketClient from './reverse-market-client'

export default async function ReverseMarketPage() {
  const session = await getServerSession(authOptions)
  if (!session) redirect('/auth/signin')
  return (
    <div className="mx-auto max-w-5xl p-6 space-y-6">
      <h1 className="text-2xl font-semibold">Reverse Market</h1>
      <p className="text-sm text-muted-foreground">Create an anonymous showcase so employers can reach out with opportunities.</p>
      <div className="space-y-2">
        <a href="/api/openapi" className="text-xs underline">API Docs</a>
        <div className="text-sm text-foreground">Use the Integrations or API to post your showcase and view bids.</div>
      </div>
      <ReverseMarketClient />
    </div>
  )
}
</file>

<file path="src/app/reverse-market/reverse-market-client.tsx">
'use client'

import { useEffect, useMemo, useState } from 'react'

type Showcase = {
  _id: string
  headline: string
  anonymous: boolean
  skills: string[]
  desiredRoles: string[]
  location?: string
  availability?: 'immediate' | '2-weeks' | '1-month' | 'flexible'
  minSalary?: string
  summary?: string
  links?: Array<{ label: string; url: string }>
}

export default function ReverseMarketClient() {
  const [loading, setLoading] = useState(false)
  const [mine, setMine] = useState(true)
  const [showcases, setShowcases] = useState<Showcase[]>([])
  const [headline, setHeadline] = useState('')
  const [skills, setSkills] = useState('')
  const [desiredRoles, setDesiredRoles] = useState('')
  const [anonymous, setAnonymous] = useState(true)
  const [summary, setSummary] = useState('')
  const [location, setLocation] = useState('')
  const [minSalary, setMinSalary] = useState('')

  const fetchShowcases = async () => {
    setLoading(true)
    try {
      const url = `/api/reverse-market/showcases?${mine ? 'mine=true' : ''}`
      const resp = await fetch(url)
      const data = await resp.json()
      if (resp.ok) setShowcases(data.showcases || [])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => { fetchShowcases() }, [mine])

  const onCreate = async () => {
    if (!headline.trim()) return
    setLoading(true)
    try {
      const resp = await fetch('/api/reverse-market/showcases', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          headline: headline.trim(),
          anonymous,
          skills: skills.split(',').map(s => s.trim()).filter(Boolean),
          desiredRoles: desiredRoles.split(',').map(s => s.trim()).filter(Boolean),
          summary: summary.trim() || undefined,
          location: location.trim() || undefined,
          minSalary: minSalary.trim() || undefined,
        })
      })
      if (resp.ok) {
        setHeadline('')
        setSkills('')
        setDesiredRoles('')
        setSummary('')
        setLocation('')
        setMinSalary('')
        await fetchShowcases()
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="space-y-6">
      <div className="grid gap-3 md:grid-cols-2">
        <div className="space-y-2">
          <label className="text-sm font-medium">Headline</label>
          <input className="border rounded px-3 py-2 w-full" value={headline} onChange={e=>setHeadline(e.target.value)} placeholder="Senior Full-Stack Engineer (TypeScript/React/Node)" />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Skills (comma separated)</label>
          <input className="border rounded px-3 py-2 w-full" value={skills} onChange={e=>setSkills(e.target.value)} placeholder="TypeScript, React, Node, AWS" />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Desired Roles (comma separated)</label>
          <input className="border rounded px-3 py-2 w-full" value={desiredRoles} onChange={e=>setDesiredRoles(e.target.value)} placeholder="Senior Engineer, Tech Lead" />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Location</label>
          <input className="border rounded px-3 py-2 w-full" value={location} onChange={e=>setLocation(e.target.value)} placeholder="Remote / Toronto, ON" />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Minimum Salary</label>
          <input className="border rounded px-3 py-2 w-full" value={minSalary} onChange={e=>setMinSalary(e.target.value)} placeholder="$150k+ USD" />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Summary</label>
          <textarea className="border rounded px-3 py-2 w-full" rows={3} value={summary} onChange={e=>setSummary(e.target.value)} placeholder="Brief pitch about your experience and value" />
        </div>
        <div className="flex items-center gap-3">
          <input id="anonymous" type="checkbox" checked={anonymous} onChange={e=>setAnonymous(e.target.checked)} />
          <label htmlFor="anonymous" className="text-sm">Anonymous</label>
        </div>
      </div>
      <div className="flex items-center gap-3">
        <button disabled={loading} className="px-4 py-2 rounded bg-blue-600 text-foreground disabled:opacity-60" onClick={onCreate}>Create Showcase</button>
        <label className="flex items-center gap-2 text-sm">
          <input type="checkbox" checked={mine} onChange={e=>setMine(e.target.checked)} />
          Show only my showcases
        </label>
      </div>
      <div className="border rounded">
        <table className="w-full text-sm">
          <thead>
            <tr className="bg-background">
              <th className="text-left p-2">Headline</th>
              <th className="text-left p-2">Skills</th>
              <th className="text-left p-2">Desired Roles</th>
              <th className="text-left p-2">Anonymous</th>
            </tr>
          </thead>
          <tbody>
            {showcases.map(s => (
              <tr key={s._id} className="border-t">
                <td className="p-2">{s.headline}</td>
                <td className="p-2">{s.skills?.join(', ')}</td>
                <td className="p-2">{s.desiredRoles?.join(', ')}</td>
                <td className="p-2">{s.anonymous ? 'Yes' : 'No'}</td>
              </tr>
            ))}
            {!showcases.length && (
              <tr>
                <td className="p-4 text-muted-foreground" colSpan={4}>No showcases found.</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  )
}
</file>

<file path="src/app/salary-negotiation/components/salary-negotiation.tsx">
'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  DollarSign,
  TrendingUp,
  Target,
  AlertTriangle,
  CheckCircle,
  Loader2,
  Calculator,
  MessageSquare,
  FileText,
  Award,
  Lightbulb
} from 'lucide-react'
import toast from 'react-hot-toast'

interface SalaryAnalysis {
  marketData: {
    role: string
    location: string
    experience: string
    salaryRange: {
      min: number
      median: number
      max: number
      currency: string
    }
    percentiles: {
      p25: number
      p50: number
      p75: number
      p90: number
    }
  }
  negotiationStrategy: {
    targetSalary: number
    openingOffer: number
    counterOffer: number
    reasoning: string[]
  }
  leveragePoints: {
    experience: string[]
    skills: string[]
    marketDemand: string[]
    companyFactors: string[]
  }
  talkingPoints: {
    strengths: string[]
    valueProposition: string
    marketComparison: string
    growthPotential: string
  }
  redFlags: {
    warningSigns: string[]
    alternatives: string[]
    walkAwayPoints: string[]
  }
  preparationSteps: {
    research: string[]
    practice: string[]
    documentation: string[]
    followUp: string[]
  }
}

interface SalaryNegotiationProps {
  userId: string
}

export function SalaryNegotiation({ userId }: SalaryNegotiationProps) {
  const [formData, setFormData] = useState({
    jobTitle: '',
    company: '',
    location: '',
    experience: '',
    currentSalary: ''
  })
  const [analysis, setAnalysis] = useState<SalaryAnalysis | null>(null)
  const [plan, setPlan] = useState<null | {
    targetRange: { base: string; totalComp: string }
    justifications: string[]
    tradeoffs: string[]
    negotiationEmail: { subject: string; body: string }
    talkingPoints: string[]
  }>(null)
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState('market')

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const generateAnalysis = async () => {
    if (!formData.jobTitle || !formData.location) {
      toast.error('Please fill in job title and location')
      return
    }

    setLoading(true)
    try {
      const response = await fetch('/api/salary/analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jobTitle: formData.jobTitle,
          company: formData.company || undefined,
          location: formData.location,
          experience: formData.experience || 'mid',
          currentSalary: parseInt(formData.currentSalary) || 0,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Analysis failed')
      }

      const data = await response.json()
      setAnalysis(data.analysis)
      toast.success('Salary analysis completed!')
    } catch (error) {
      console.error('Analysis error:', error)
      toast.error(error instanceof Error ? error.message : 'Analysis failed')
    } finally {
      setLoading(false)
    }
  }

  const generateNegotiationPlan = async () => {
    if (!formData.jobTitle || !formData.location) {
      toast.error('Please fill in job title and location')
      return
    }
    setLoading(true)
    try {
      const payload = {
        jobTitle: formData.jobTitle,
        companyName: formData.company || 'Unknown',
        location: formData.location,
        seniority: (formData.experience as any) === 'senior' ? 'senior' : (formData.experience as any) === 'entry' ? 'entry' : 'mid',
        offer: { base: formData.currentSalary ? `$${formData.currentSalary}` : 'TBD' },
        marketData: undefined,
        candidateHighlights: 'Key achievements and impact from resume',
        constraints: undefined,
        tone: 'professional' as const,
      }
      const res = await fetch('/api/salary/coach', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      })
      if (!res.ok) {
        const err = await res.json()
        throw new Error(err.error || 'Failed to generate plan')
      }
      const data = await res.json()
      setPlan(data.plan)
      toast.success('Negotiation plan generated!')
    } catch (e) {
      console.error(e)
      toast.error(e instanceof Error ? e.message : 'Failed to generate plan')
    } finally {
      setLoading(false)
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount)
  }

  return (
    <div className="space-y-8">
      {/* Input Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calculator className="h-5 w-5" />
            Salary Analysis
          </CardTitle>
          <CardDescription>
            Get market data and negotiation strategies for your target role
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="jobTitle">Job Title *</Label>
              <Input
                id="jobTitle"
                placeholder="e.g., Software Engineer"
                value={formData.jobTitle}
                onChange={(e) => handleInputChange('jobTitle', e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="company">Company (Optional)</Label>
              <Input
                id="company"
                placeholder="e.g., Google"
                value={formData.company}
                onChange={(e) => handleInputChange('company', e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="location">Location *</Label>
              <Input
                id="location"
                placeholder="e.g., San Francisco"
                value={formData.location}
                onChange={(e) => handleInputChange('location', e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="experience">Experience Level</Label>
              <Select value={formData.experience} onValueChange={(value) => handleInputChange('experience', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Select experience level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="entry">Entry Level (0-2 years)</SelectItem>
                  <SelectItem value="junior">Junior (2-3 years)</SelectItem>
                  <SelectItem value="mid">Mid Level (3-5 years)</SelectItem>
                  <SelectItem value="senior">Senior (5-8 years)</SelectItem>
                  <SelectItem value="lead">Lead/Principal (8+ years)</SelectItem>
                  <SelectItem value="manager">Manager (5+ years)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="currentSalary">Current Salary (Optional)</Label>
              <Input
                id="currentSalary"
                type="number"
                placeholder="80000"
                value={formData.currentSalary}
                onChange={(e) => handleInputChange('currentSalary', e.target.value)}
              />
            </div>
          </div>

          <Button
            onClick={generateAnalysis}
            disabled={loading || !formData.jobTitle || !formData.location}
            className="w-full md:w-auto"
          >
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Analyzing Salary Data...
              </>
            ) : (
              <>
                <TrendingUp className="mr-2 h-4 w-4" />
                Generate Salary Analysis
              </>
            )}
          </Button>
          <Button
            onClick={generateNegotiationPlan}
            disabled={loading || !formData.jobTitle || !formData.location}
            variant="secondary"
            className="w-full md:w-auto ml-0 md:ml-3"
          >
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating Plan...
              </>
            ) : (
              <>
                <Target className="mr-2 h-4 w-4" />
                Generate Negotiation Plan
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Analysis Results */}
      {analysis && (
        <div className="space-y-6">
          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>
              Salary analysis completed for {analysis.marketData.role} in {analysis.marketData.location}
            </AlertDescription>
          </Alert>

          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="market">Market Data</TabsTrigger>
              <TabsTrigger value="strategy">Strategy</TabsTrigger>
              <TabsTrigger value="leverage">Leverage</TabsTrigger>
              <TabsTrigger value="talking">Talking Points</TabsTrigger>
              <TabsTrigger value="preparation">Preparation</TabsTrigger>
            </TabsList>

            <TabsContent value="market" className="space-y-6">
              {/* Salary Range Visualization */}
              <Card>
                <CardHeader>
                  <CardTitle>Salary Range Overview</CardTitle>
                  <CardDescription>
                    Market data for {analysis.marketData.role} in {analysis.marketData.location}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {/* Salary Range Bar */}
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm text-muted-foreground">
                        <span>Salary Range</span>
                        <span>{formatCurrency(analysis.marketData.salaryRange.min)} - {formatCurrency(analysis.marketData.salaryRange.max)}</span>
                      </div>
                      <div className="relative h-4 bg-gray-200 rounded-full">
                        <div
                          className="absolute top-0 left-0 h-full bg-gradient-to-r from-green-500 via-yellow-500 to-red-500 rounded-full"
                          style={{ width: '100%' }}
                        />
                        {/* Median marker */}
                        <div
                          className="absolute top-0 w-1 h-full bg-black"
                          style={{
                            left: `${((analysis.marketData.salaryRange.median - analysis.marketData.salaryRange.min) / (analysis.marketData.salaryRange.max - analysis.marketData.salaryRange.min)) * 100}%`
                          }}
                        />
                      </div>
                      <div className="flex justify-between text-xs text-muted-foreground">
                        <span>Min</span>
                        <span className="font-medium">Median: {formatCurrency(analysis.marketData.salaryRange.median)}</span>
                        <span>Max</span>
                      </div>
                    </div>

                    {/* Percentiles */}
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div className="text-center p-3 bg-background rounded-lg">
                        <div className="text-lg font-bold text-green-600">{formatCurrency(analysis.marketData.percentiles.p25)}</div>
                        <div className="text-sm text-muted-foreground">25th Percentile</div>
                      </div>
                      <div className="text-center p-3 bg-blue-50 rounded-lg">
                        <div className="text-lg font-bold text-blue-600">{formatCurrency(analysis.marketData.percentiles.p50)}</div>
                        <div className="text-sm text-muted-foreground">50th Percentile (Median)</div>
                      </div>
                      <div className="text-center p-3 bg-yellow-50 rounded-lg">
                        <div className="text-lg font-bold text-yellow-600">{formatCurrency(analysis.marketData.percentiles.p75)}</div>
                        <div className="text-sm text-muted-foreground">75th Percentile</div>
                      </div>
                      <div className="text-center p-3 bg-purple-50 rounded-lg">
                        <div className="text-lg font-bold text-purple-600">{formatCurrency(analysis.marketData.percentiles.p90)}</div>
                        <div className="text-sm text-muted-foreground">90th Percentile</div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Market Insights */}
              <Card>
                <CardHeader>
                  <CardTitle>Market Context</CardTitle>
                  <CardDescription>Understanding your position in the market</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-4 bg-blue-50 rounded-lg">
                      <div>
                        <h4 className="font-medium text-blue-900">Your Experience Level</h4>
                        <p className="text-sm text-blue-700">{analysis.marketData.experience} level professional</p>
                      </div>
                      <Badge className="bg-blue-100 text-blue-800">
                        {analysis.marketData.experience}
                      </Badge>
                    </div>

                    <div className="flex items-center justify-between p-4 bg-green-50 rounded-lg">
                      <div>
                        <h4 className="font-medium text-green-900">Market Position</h4>
                        <p className="text-sm text-green-700">Your skills place you in the competitive range</p>
                      </div>
                      <TrendingUp className="h-6 w-6 text-green-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="strategy" className="space-y-6">
              {/* Negotiation Strategy */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    Negotiation Strategy
                  </CardTitle>
                  <CardDescription>Your personalized salary negotiation plan</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {/* Salary Targets */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="text-center p-4 border-2 border-green-200 bg-green-50 rounded-lg">
                        <div className="text-sm text-green-700 mb-1">Target Salary</div>
                        <div className="text-2xl font-bold text-green-800">{formatCurrency(analysis.negotiationStrategy.targetSalary)}</div>
                        <div className="text-xs text-green-600 mt-1">Your goal</div>
                      </div>

                      <div className="text-center p-4 border-2 border-blue-200 bg-blue-50 rounded-lg">
                        <div className="text-sm text-blue-700 mb-1">Opening Offer</div>
                        <div className="text-2xl font-bold text-blue-800">{formatCurrency(analysis.negotiationStrategy.openingOffer)}</div>
                        <div className="text-xs text-blue-600 mt-1">What to ask for</div>
                      </div>

                      <div className="text-center p-4 border-2 border-purple-200 bg-purple-50 rounded-lg">
                        <div className="text-sm text-purple-700 mb-1">Counter Offer</div>
                        <div className="text-2xl font-bold text-purple-800">{formatCurrency(analysis.negotiationStrategy.counterOffer)}</div>
                        <div className="text-xs text-purple-600 mt-1">If they counter</div>
                      </div>
                    </div>

                    {/* Strategy Reasoning */}
                    <div>
                      <h4 className="font-medium text-foreground mb-3">Strategy Rationale</h4>
                      <ul className="space-y-2">
                        {analysis.negotiationStrategy.reasoning.map((reason, index) => (
                          <li key={index} className="flex items-start gap-2">
                            <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                            <span className="text-sm text-foreground">{reason}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="leverage" className="space-y-6">
              {/* Leverage Points */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Experience Leverage</CardTitle>
                    <CardDescription>Your professional background</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {analysis.leveragePoints.experience.map((point, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <Award className="h-4 w-4 text-blue-500 mt-1 flex-shrink-0" />
                          <span className="text-sm">{point}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Skills Leverage</CardTitle>
                    <CardDescription>Your technical competencies</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {analysis.leveragePoints.skills.map((point, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <Lightbulb className="h-4 w-4 text-yellow-500 mt-1 flex-shrink-0" />
                          <span className="text-sm">{point}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Market Demand</CardTitle>
                    <CardDescription>External market factors</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {analysis.leveragePoints.marketDemand.map((point, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <TrendingUp className="h-4 w-4 text-green-500 mt-1 flex-shrink-0" />
                          <span className="text-sm">{point}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Company Factors</CardTitle>
                    <CardDescription>Organization-specific advantages</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {analysis.leveragePoints.companyFactors.map((point, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <CheckCircle className="h-4 w-4 text-purple-500 mt-1 flex-shrink-0" />
                          <span className="text-sm">{point}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="talking" className="space-y-6">
              {/* Talking Points */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MessageSquare className="h-5 w-5" />
                    Key Talking Points
                  </CardTitle>
                  <CardDescription>Scripted responses for salary discussions</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Value Proposition */}
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <h4 className="font-medium text-blue-900 mb-2">Your Value Proposition</h4>
                    <p className="text-sm text-blue-800 leading-relaxed">{analysis.talkingPoints.valueProposition}</p>
                  </div>

                  {/* Market Comparison */}
                  <div className="p-4 bg-green-50 rounded-lg">
                    <h4 className="font-medium text-green-900 mb-2">Market Comparison</h4>
                    <p className="text-sm text-green-800 leading-relaxed">{analysis.talkingPoints.marketComparison}</p>
                  </div>

                  {/* Growth Potential */}
                  <div className="p-4 bg-purple-50 rounded-lg">
                    <h4 className="font-medium text-purple-900 mb-2">Growth Potential</h4>
                    <p className="text-sm text-purple-800 leading-relaxed">{analysis.talkingPoints.growthPotential}</p>
                  </div>

                  {/* Strengths */}
                  <div>
                    <h4 className="font-medium text-foreground mb-3">Your Key Strengths</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {analysis.talkingPoints.strengths.map((strength, index) => (
                        <div key={index} className="flex items-start gap-2 p-3 bg-background rounded">
                          <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                          <span className="text-sm">{strength}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="preparation" className="space-y-6">
              {/* Red Flags */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-red-700">
                    <AlertTriangle className="h-5 w-5" />
                    Red Flags & Walk-Away Points
                  </CardTitle>
                  <CardDescription>When to reconsider the offer</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <h4 className="font-medium text-foreground mb-2">Warning Signs</h4>
                      <ul className="space-y-1">
                        {analysis.redFlags.warningSigns.map((sign, index) => (
                          <li key={index} className="text-sm text-muted-foreground flex items-start gap-1">
                            <span className="text-red-500">•</span>
                            {sign}
                          </li>
                        ))}
                      </ul>
                    </div>

                    <div>
                      <h4 className="font-medium text-foreground mb-2">Alternatives</h4>
                      <ul className="space-y-1">
                        {analysis.redFlags.alternatives.map((alt, index) => (
                          <li key={index} className="text-sm text-muted-foreground flex items-start gap-1">
                            <span className="text-blue-500">•</span>
                            {alt}
                          </li>
                        ))}
                      </ul>
                    </div>

                    <div>
                      <h4 className="font-medium text-foreground mb-2">Walk-Away Points</h4>
                      <ul className="space-y-1">
                        {analysis.redFlags.walkAwayPoints.map((point, index) => (
                          <li key={index} className="text-sm text-muted-foreground flex items-start gap-1">
                            <span className="text-orange-500">•</span>
                            {point}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Preparation Steps */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Research Phase</CardTitle>
                    <CardDescription>Gather information before negotiating</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ol className="space-y-2">
                      {analysis.preparationSteps.research.map((step, index) => (
                        <li key={index} className="flex items-start gap-2 text-sm">
                          <span className="bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium flex-shrink-0 mt-0.5">
                            {index + 1}
                          </span>
                          {step}
                        </li>
                      ))}
                    </ol>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Practice Phase</CardTitle>
                    <CardDescription>Prepare your negotiation skills</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ol className="space-y-2">
                      {analysis.preparationSteps.practice.map((step, index) => (
                        <li key={index} className="flex items-start gap-2 text-sm">
                          <span className="bg-green-100 text-green-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium flex-shrink-0 mt-0.5">
                            {index + 1}
                          </span>
                          {step}
                        </li>
                      ))}
                    </ol>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Documentation</CardTitle>
                    <CardDescription>Keep records of your negotiation</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {analysis.preparationSteps.documentation.map((step, index) => (
                        <li key={index} className="flex items-start gap-2 text-sm">
                          <FileText className="h-4 w-4 text-purple-500 flex-shrink-0 mt-0.5" />
                          {step}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Follow-Up</CardTitle>
                    <CardDescription>After the negotiation is complete</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {analysis.preparationSteps.followUp.map((step, index) => (
                        <li key={index} className="flex items-start gap-2 text-sm">
                          <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0 mt-0.5" />
                          {step}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      )}

      {/* Negotiation Plan */}
      {plan && (
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Target className="h-5 w-5" />
                Negotiation Plan
              </CardTitle>
              <CardDescription>Targets, rationale, tradeoffs, and email draft</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="p-4 bg-green-50 rounded">
                  <div className="text-sm text-green-800">Target Base</div>
                  <div className="text-xl font-semibold text-green-900">{plan.targetRange.base}</div>
                </div>
                <div className="p-4 bg-blue-50 rounded">
                  <div className="text-sm text-blue-800">Target Total Comp</div>
                  <div className="text-xl font-semibold text-blue-900">{plan.targetRange.totalComp}</div>
                </div>
                <div className="p-4 bg-purple-50 rounded">
                  <div className="text-sm text-purple-800">Tradeoffs</div>
                  <div className="text-sm text-purple-900">{plan.tradeoffs[0]}</div>
                </div>
              </div>

              <div>
                <h4 className="font-medium mb-2">Justifications</h4>
                <ul className="space-y-1">
                  {plan.justifications.map((j, i) => (
                    <li key={i} className="text-sm text-foreground flex gap-2">
                      <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                      {j}
                    </li>
                  ))}
                </ul>
              </div>

              <div>
                <h4 className="font-medium mb-2">Talking Points</h4>
                <div className="flex flex-wrap gap-2">
                  {plan.talkingPoints.map((tp, i) => (
                    <Badge key={i} variant="outline">{tp}</Badge>
                  ))}
                </div>
              </div>

              <div>
                <h4 className="font-medium mb-2">Negotiation Email</h4>
                <div className="p-4 bg-background rounded border">
                  <div className="font-semibold mb-2">Subject: {plan.negotiationEmail.subject}</div>
                  <pre className="whitespace-pre-wrap text-sm text-foreground">{plan.negotiationEmail.body}</pre>
                </div>
                <div className="mt-3 flex gap-2">
                  <Button
                    variant="secondary"
                    onClick={() => {
                      const blob = new Blob([plan.negotiationEmail.body], { type: 'text/plain;charset=utf-8' })
                      const url = URL.createObjectURL(blob)
                      const a = document.createElement('a')
                      a.href = url
                      a.download = 'negotiation-email.txt'
                      a.click()
                      URL.revokeObjectURL(url)
                    }}
                  >
                    <FileText className="mr-2 h-4 w-4" /> Download Email
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/app/salary-negotiation/page.tsx">
import { Suspense } from 'react'
import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import { SalaryNegotiation } from './components/salary-negotiation'

export default async function SalaryNegotiationPage() {
  const session = await getServerSession(authOptions)

  if (!session) {
    redirect('/auth/signin')
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground">Salary Negotiation</h1>
          <p className="mt-2 text-lg text-muted-foreground">
            AI-powered salary analysis and negotiation strategies to maximize your compensation
          </p>
        </div>

        <Suspense fallback={<SalaryNegotiationSkeleton />}>
          <SalaryNegotiation userId={session.user.id} />
        </Suspense>
      </div>
    </div>
  )
}

function SalaryNegotiationSkeleton() {
  return (
    <div className="space-y-8">
      {/* Input Form Skeleton */}
      <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
        <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
          <div className="w-full h-12 bg-gray-200 rounded"></div>
          <div className="w-full h-12 bg-gray-200 rounded"></div>
          <div className="w-full h-12 bg-gray-200 rounded"></div>
          <div className="w-full h-12 bg-gray-200 rounded"></div>
        </div>
        <div className="w-32 h-10 bg-gray-200 rounded"></div>
      </div>

      {/* Results Skeleton */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
          <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
          <div className="w-full h-32 bg-gray-200 rounded"></div>
        </div>
        <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
          <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
          <div className="w-full h-32 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/settings/alerts/page.tsx">
'use client'

import { useEffect, useState } from 'react'

export default function AlertsSettingsPage() {
  const [jobTitle, setJobTitle] = useState('')
  const [location, setLocation] = useState('')
  const [saving, setSaving] = useState(false)
  const [message, setMessage] = useState('')

  useEffect(() => {
    ;(async () => {
      try {
        const r = await fetch('/api/profile')
        if (r.ok) {
          const j = await r.json()
          const prefs = j?.profile?.preferences || {}
          setLocation(j?.profile?.location || prefs?.alerts?.location || '')
          setJobTitle(prefs?.alerts?.jobTitle || '')
        }
      } catch {}
    })()
  }, [])

  const save = async () => {
    setSaving(true); setMessage('')
    try {
      const r = await fetch('/api/alerts/subscribe', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobTitle, location, frequency: 'daily' }) })
      if (r.ok) setMessage('Saved. You will receive daily job suggestions.')
      else setMessage('Failed to save. Please try again.')
    } catch {
      setMessage('Failed to save. Please try again.')
    } finally { setSaving(false) }
  }

  return (
    <div className="space-y-4">
      <div className="text-sm text-muted-foreground">Daily job suggestions will be sent and shown in the Dashboard Action Center. A Railway cron calls /api/alerts/run.</div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
        <input className="border rounded p-2" placeholder="Target job title (e.g., Sales Manager)" value={jobTitle} onChange={(e)=>setJobTitle(e.target.value)} />
        <input className="border rounded p-2" placeholder="Location (e.g., Edmonton, AB)" value={location} onChange={(e)=>setLocation(e.target.value)} />
      </div>
      <button onClick={save} disabled={saving || !jobTitle} className="px-4 py-2 border rounded bg-blue-600 text-foreground disabled:opacity-50">{saving ? 'Saving…' : 'Save Preferences'}</button>
      {message && <div className="text-sm">{message}</div>}
    </div>
  )
}
</file>

<file path="src/app/settings/integrations/page.tsx">
'use client'

import { useEffect, useState } from 'react'

interface Board {
  id: string
  name: string
  automationLevel: 'full' | 'partial' | 'manual'
  status: 'connected' | 'disconnected' | 'error'
  features: { fileUpload: boolean; coverLetter: boolean; autoSubmit: boolean }
  lastUsed?: string
  successRate?: number
  totalApplications?: number
}

export default function IntegrationsSettingsPage() {
  const [boards, setBoards] = useState<Board[]>([])
  const [loading, setLoading] = useState(true)
  const [jobsOpen, setJobsOpen] = useState<Record<string, boolean>>({})
  const [jobsLoading, setJobsLoading] = useState<Record<string, boolean>>({})
  const [jobsByBoard, setJobsByBoard] = useState<Record<string, Array<{ title?: string; url?: string; company?: string; location?: string }>>>({})

  useEffect(() => {
    (async () => {
      setLoading(true)
      try {
        const boardsResponse = await fetch('/api/job-boards/submit')
        const boardsData = await boardsResponse.json()
        const integrationsResponse = await fetch('/api/job-boards/integrations')
        const integrationsData = await integrationsResponse.json()
        const enhanced = (boardsData.jobBoards || []).map((b: any) => {
          const integration = integrationsData.success ? integrationsData.integrations.find((i: any) => i.boardName === b.id) : null
          return {
            id: b.id,
            name: b.name,
            automationLevel: b.automationLevel,
            features: b.features,
            status: integration ? integration.status : 'disconnected',
            lastUsed: integration?.lastApplicationAt,
            successRate: integration ? Math.round((integration.successfulApplications / Math.max(integration.totalApplications, 1)) * 100) : 0,
            totalApplications: integration ? integration.totalApplications : 0,
          } as Board
        })
        setBoards(enhanced)
      } catch {}
      setLoading(false)
    })()
  }, [])

  const connectToBoard = async (boardId: string) => {
    try {
      const response = await fetch('/api/job-boards/oauth/authorize', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId }) })
      const data = await response.json()
      if (data.success && data.authUrl) window.location.href = data.authUrl
    } catch {}
  }

  const syncJobs = async (boardId: string) => {
    try {
      await fetch('/api/job-boards/jobs/sync', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId }) })
    } catch {}
  }

  const loadBoardJobs = async (boardId: string) => {
    setJobsLoading(prev => ({ ...prev, [boardId]: true }))
    try {
      const resp = await fetch('/api/job-boards/jobs/list', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId }) })
      const json = await resp.json().catch(()=>({}))
      const jobs = (json.jobs || []).map((j: any) => ({ title: j.title || j.position || j.name, url: j.url || j.link, company: j.company || j.companyName, location: j.location }))
      setJobsByBoard(prev => ({ ...prev, [boardId]: jobs }))
      setJobsOpen(prev => ({ ...prev, [boardId]: true }))
    } catch {}
    setJobsLoading(prev => ({ ...prev, [boardId]: false }))
  }

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">Job Board Integrations</h2>
      <p className="text-sm text-muted-foreground">Connect and manage job board accounts. This enables syncing jobs and streamlined submissions.</p>
      {loading ? (
        <div className="text-sm text-muted-foreground">Loading…</div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {boards.map(board => (
            <div key={board.id} className="border rounded p-4">
              <div className="flex items-center justify-between mb-2">
                <div>
                  <div className="font-medium">{board.name}</div>
                  <div className="text-xs text-muted-foreground">{board.automationLevel} automation · {board.status}</div>
                </div>
                <a className="text-xs underline" href={`https://${board.id}.com`} target="_blank" rel="noreferrer">Open</a>
              </div>
              <div className="text-xs text-foreground mb-2">Success {board.successRate || 0}% · {board.totalApplications || 0} applications</div>
              <div className="flex gap-2">
                {board.status !== 'connected' ? (
                  <button onClick={() => connectToBoard(board.id)} className="px-3 py-2 border rounded text-sm flex-1">Connect</button>
                ) : (
                  <>
                    <button onClick={() => syncJobs(board.id)} className="px-3 py-2 border rounded text-sm flex-1">Sync Jobs</button>
                    <button onClick={() => loadBoardJobs(board.id)} className="px-3 py-2 border rounded text-sm flex-1">{jobsLoading[board.id] ? 'Loading…' : 'View Jobs'}</button>
                  </>
                )}
              </div>
              {jobsOpen[board.id] && (jobsByBoard[board.id] || []).length > 0 && (
                <div className="mt-3 border-t pt-2 space-y-1 max-h-40 overflow-y-auto">
                  {(jobsByBoard[board.id] || []).slice(0, 25).map((j, idx) => (
                    <div key={idx} className="text-xs flex items-center justify-between gap-2">
                      <div className="min-w-0">
                        <div className="font-medium truncate">{j.title || 'Untitled role'}</div>
                        <div className="text-muted-foreground truncate">{[j.company, j.location].filter(Boolean).join(' • ')}</div>
                      </div>
                      {j.url && <a href={j.url} target="_blank" rel="noopener noreferrer" className="px-2 py-1 border rounded">Open</a>}
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/app/settings/job-boards/page.tsx">
'use client'

import Link from 'next/link'

export default function JobBoardsSettingsIndex() {
  return (
    <div className="space-y-3">
      <div className="text-sm text-foreground">Manage your job board integrations and preferences.</div>
      <div className="text-sm">
        Go to <Link className="underline" href="/settings/integrations">Integrations</Link> to connect boards.
      </div>
      <div className="text-sm">
        Use <Link className="underline" href="/job-boards">Job Boards</Link> to run Autopilot and review public listings.
      </div>
    </div>
  )
}
</file>

<file path="src/app/settings/layout.tsx">
import { ReactNode } from 'react'
import Link from 'next/link'

export default function SettingsLayout({ children }: { children: ReactNode }) {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-5xl px-4 py-6 sm:px-6 lg:px-8">
        <h1 className="text-2xl font-bold mb-4">Settings</h1>
        <div className="flex items-center gap-4 mb-6 border-b pb-2 text-sm">
          <Link href="/settings/alerts" className="text-blue-600 hover:text-blue-800">Alerts</Link>
          <Link href="/settings/integrations" className="text-blue-600 hover:text-blue-800">Integrations</Link>
          <Link href="/settings/privacy" className="text-blue-600 hover:text-blue-800">Privacy</Link>
          <Link href="/settings/preferences" className="text-blue-600 hover:text-blue-800">Preferences</Link>
          <Link href="/settings/job-boards" className="text-blue-600 hover:text-blue-800">Job Boards</Link>
        </div>
        {children}
      </div>
    </div>
  )
}
</file>

<file path="src/app/settings/page.tsx">
export default function SettingsIndexPage() {
  return (
    <div className="text-sm text-foreground">
      Choose a settings section above.
    </div>
  )
}
</file>

<file path="src/app/settings/preferences/page.tsx">
"use client"
import { useEffect, useState } from 'react'

export const dynamic = 'force-dynamic'

export default function PreferencesPage() {
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [message, setMessage] = useState('')

  const [useResume, setUseResume] = useState(true)
  const [allowPublicScraping, setAllowPublicScraping] = useState(true)
  const [defaultRadiusKm, setDefaultRadiusKm] = useState(150)
  const [defaultDays, setDefaultDays] = useState(30)
  const [defaultMaxResults, setDefaultMaxResults] = useState(15)

  useEffect(() => {
    (async () => {
      try {
        const r = await fetch('/api/profile')
        if (r.ok) {
          const j = await r.json()
          const prefs = j?.profile?.preferences || {}
          setUseResume(prefs?.autopilot?.useResume !== false)
          setAllowPublicScraping(prefs?.autopilot?.allowPublicScraping !== false)
          setDefaultRadiusKm(typeof prefs?.autopilot?.radiusKm === 'number' ? prefs.autopilot.radiusKm : 150)
          setDefaultDays(typeof prefs?.autopilot?.days === 'number' ? prefs.autopilot.days : 30)
          setDefaultMaxResults(typeof prefs?.autopilot?.maxResults === 'number' ? prefs.autopilot.maxResults : 15)
        }
      } finally { setLoading(false) }
    })()
  }, [])

  const save = async () => {
    setSaving(true); setMessage('')
    try {
      const r = await fetch('/api/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({
        preferences: { autopilot: { useResume, allowPublicScraping, radiusKm: defaultRadiusKm, days: defaultDays, maxResults: defaultMaxResults } }
      }) })
      setMessage(r.ok ? 'Saved' : 'Failed to save')
    } catch { setMessage('Failed to save') }
    finally { setSaving(false) }
  }

  if (loading) return <div className="text-sm">Loading…</div>

  return (
    <div className="space-y-4">
      <div className="text-lg font-semibold">Preferences</div>
      <div className="space-y-3">
        <div className="flex items-center gap-2">
          <input id="useResume" type="checkbox" checked={useResume} onChange={(e)=>setUseResume(e.target.checked)} />
          <label htmlFor="useResume" className="text-sm">Use my resume to prefill Autopilot</label>
        </div>
        <div className="flex items-center gap-2">
          <input id="allowScrape" type="checkbox" checked={allowPublicScraping} onChange={(e)=>setAllowPublicScraping(e.target.checked)} />
          <label htmlFor="allowScrape" className="text-sm">Allow public web scraping for job discovery</label>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 text-sm">
          <div>
            <div>Default radius (km)</div>
            <input type="number" className="border rounded p-2 w-full" value={defaultRadiusKm} onChange={(e)=>setDefaultRadiusKm(Math.max(1, Math.min(500, Number(e.target.value)||150)))} />
          </div>
          <div>
            <div>Default lookback (days)</div>
            <input type="number" className="border rounded p-2 w-full" value={defaultDays} onChange={(e)=>setDefaultDays(Math.max(1, Math.min(90, Number(e.target.value)||30)))} />
          </div>
          <div>
            <div>Max results</div>
            <input type="number" className="border rounded p-2 w-full" value={defaultMaxResults} onChange={(e)=>setDefaultMaxResults(Math.max(5, Math.min(30, Number(e.target.value)||15)))} />
          </div>
        </div>
      </div>
      <div className="flex items-center gap-3">
        <button onClick={save} disabled={saving} className="px-4 py-2 border rounded bg-blue-600 text-foreground disabled:opacity-50">{saving ? 'Saving…' : 'Save'}</button>
        {message && <div className="text-sm">{message}</div>}
      </div>
    </div>
  )
}
</file>

<file path="src/app/settings/privacy/page.tsx">
'use client'

import { useEffect, useState } from 'react'

export default function PrivacySettingsPage() {
  const [useResumeForAutopilot, setUseResumeForAutopilot] = useState(true)
  const [allowPublicScraping, setAllowPublicScraping] = useState(true)
  const [saving, setSaving] = useState(false)
  const [message, setMessage] = useState('')

  useEffect(() => {
    (async () => {
      try {
        const r = await fetch('/api/profile')
        if (r.ok) {
          const j = await r.json()
          const prefs = j?.profile?.preferences || {}
          setUseResumeForAutopilot(prefs?.autopilot?.useResume !== false)
          setAllowPublicScraping(prefs?.autopilot?.allowPublicScraping !== false)
        }
      } catch {}
    })()
  }, [])

  const save = async () => {
    setSaving(true); setMessage('')
    try {
      const r = await fetch('/api/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({
        preferences: { autopilot: { useResume: useResumeForAutopilot, allowPublicScraping } }
      }) })
      setMessage(r.ok ? 'Saved' : 'Failed to save')
    } catch { setMessage('Failed to save') }
    setSaving(false)
  }

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">Privacy Controls</h2>
      <div className="space-y-2">
        <label className="flex items-center gap-2 text-sm">
          <input type="checkbox" checked={useResumeForAutopilot} onChange={e=>setUseResumeForAutopilot(e.target.checked)} />
          Use my resume to power Autopilot (extract keywords, titles, location)
        </label>
        <label className="flex items-center gap-2 text-sm">
          <input type="checkbox" checked={allowPublicScraping} onChange={e=>setAllowPublicScraping(e.target.checked)} />
          Allow searching public job listings via search engines
        </label>
      </div>
      <button onClick={save} disabled={saving} className="px-3 py-2 border rounded text-sm">{saving ? 'Saving…' : 'Save'}</button>
      {message && <div className="text-sm">{message}</div>}
    </div>
  )
}
</file>

<file path="src/app/settings/profile/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Button } from '@/components/ui/button'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Loader2, User, Mail, Briefcase, MapPin, Phone, Calendar } from 'lucide-react'
import { toast } from 'react-hot-toast'

export default function ProfileSettingsPage() {
  const { data: session, status } = useSession()
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    location: '',
    jobTitle: '',
    company: '',
    yearsOfExperience: '',
    bio: '',
  })

  useEffect(() => {
    if (session?.user) {
      setFormData(prev => ({
        ...prev,
        name: session.user.name || '',
        email: session.user.email || '',
      }))
    }
  }, [session])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)

    try {
      const response = await fetch('/api/profile', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      })

      if (!response.ok) {
        throw new Error('Failed to update profile')
      }

      toast.success('Profile updated successfully!')
    } catch (error: any) {
      console.error('Profile update error:', error)
      toast.error(error.message || 'Failed to update profile')
    } finally {
      setLoading(false)
    }
  }

  if (status === 'loading') {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="w-8 h-8 animate-spin text-primary" />
      </div>
    )
  }

  if (!session) {
    return (
      <div className="container mx-auto px-4 py-8">
        <Card>
          <CardContent className="p-6 text-center">
            <p className="text-muted-foreground">Please sign in to view your profile.</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <div className="mb-8">
        <h1 className="text-4xl font-bold text-foreground mb-2">Profile Settings</h1>
        <p className="text-muted-foreground">Manage your personal information and preferences</p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Profile Picture */}
        <Card>
          <CardHeader>
            <CardTitle>Profile Picture</CardTitle>
            <CardDescription>Your profile picture is synced with your authentication provider</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-6">
              <Avatar className="w-24 h-24">
                <AvatarImage src={session.user?.image || undefined} alt={session.user?.name || 'User'} />
                <AvatarFallback className="text-2xl">
                  {session.user?.name?.charAt(0)?.toUpperCase() || <User className="w-8 h-8" />}
                </AvatarFallback>
              </Avatar>
              <div className="space-y-1">
                <p className="text-sm font-medium text-foreground">{session.user?.name || 'Anonymous User'}</p>
                <p className="text-sm text-muted-foreground">{session.user?.email}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Basic Information */}
        <Card>
          <CardHeader>
            <CardTitle>Basic Information</CardTitle>
            <CardDescription>Update your personal details</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name" className="flex items-center gap-2">
                  <User className="w-4 h-4" />
                  Full Name
                </Label>
                <Input
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  placeholder="John Doe"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="email" className="flex items-center gap-2">
                  <Mail className="w-4 h-4" />
                  Email
                </Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={formData.email}
                  onChange={handleChange}
                  placeholder="john@example.com"
                  disabled
                />
                <p className="text-xs text-muted-foreground">Email cannot be changed</p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="phone" className="flex items-center gap-2">
                  <Phone className="w-4 h-4" />
                  Phone Number
                </Label>
                <Input
                  id="phone"
                  name="phone"
                  type="tel"
                  value={formData.phone}
                  onChange={handleChange}
                  placeholder="+1 (555) 123-4567"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="location" className="flex items-center gap-2">
                  <MapPin className="w-4 h-4" />
                  Location
                </Label>
                <Input
                  id="location"
                  name="location"
                  value={formData.location}
                  onChange={handleChange}
                  placeholder="Toronto, ON"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Professional Information */}
        <Card>
          <CardHeader>
            <CardTitle>Professional Information</CardTitle>
            <CardDescription>Your current work details</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="jobTitle" className="flex items-center gap-2">
                  <Briefcase className="w-4 h-4" />
                  Job Title
                </Label>
                <Input
                  id="jobTitle"
                  name="jobTitle"
                  value={formData.jobTitle}
                  onChange={handleChange}
                  placeholder="Senior Software Engineer"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="company" className="flex items-center gap-2">
                  <Briefcase className="w-4 h-4" />
                  Company
                </Label>
                <Input
                  id="company"
                  name="company"
                  value={formData.company}
                  onChange={handleChange}
                  placeholder="Tech Corp"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="yearsOfExperience" className="flex items-center gap-2">
                  <Calendar className="w-4 h-4" />
                  Years of Experience
                </Label>
                <Input
                  id="yearsOfExperience"
                  name="yearsOfExperience"
                  type="number"
                  min="0"
                  max="50"
                  value={formData.yearsOfExperience}
                  onChange={handleChange}
                  placeholder="5"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="bio">Professional Bio</Label>
              <textarea
                id="bio"
                name="bio"
                value={formData.bio}
                onChange={handleChange}
                placeholder="Tell us about your professional background..."
                className="w-full min-h-[100px] px-3 py-2 rounded-md border border-border bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 resize-y"
              />
            </div>
          </CardContent>
        </Card>

        {/* Save Button */}
        <div className="flex justify-end">
          <Button type="submit" disabled={loading} className="px-8">
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Saving...
              </>
            ) : (
              'Save Changes'
            )}
          </Button>
        </div>
      </form>
    </div>
  )
}
</file>

<file path="src/app/skill-analysis/components/skill-analysis.tsx">
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  Brain,
  TrendingUp,
  Target,
  Award,
  AlertTriangle,
  CheckCircle,
  Loader2,
  BookOpen,
  Clock,
  DollarSign,
  ArrowRight,
  Lightbulb,
  Zap,
  Users
} from 'lucide-react'
import Resume from '@/models/Resume'
import toast from 'react-hot-toast'

interface SkillAnalysisData {
  currentSkills: {
    technical: Array<{ skill: string; level: 'beginner' | 'intermediate' | 'advanced'; confidence: number }>
    soft: Array<{ skill: string; level: 'beginner' | 'intermediate' | 'advanced' }>
  }
  requiredSkills: {
    jobSpecific: Array<{ skill: string; importance: 'critical' | 'important' | 'nice-to-have' }>
    industryStandard: Array<{ skill: string; demand: 'high' | 'medium' | 'low' }>
  }
  skillGaps: {
    critical: Array<{ skill: string; gap: string; priority: 'high' | 'medium' | 'low' }>
    recommended: Array<{ skill: string; reason: string; timeToLearn: string }>
  }
  careerPath: {
    currentLevel: string
    targetLevel: string
    nextSteps: Array<{ step: string; timeline: string; resources: string[] }>
    alternativePaths: Array<{ role: string; match: number; requiredSkills: string[] }>
  }
  learningPlan: {
    shortTerm: Array<{ skill: string; resource: string; duration: string; cost: string }>
    longTerm: Array<{ skill: string; certification: string; timeline: string }>
    dailyHabits: string[]
  }
  marketInsights: {
    salaryImpact: Array<{ skill: string; salaryBoost: string; demand: string }>
    trendingSkills: Array<{ skill: string; growth: string; reason: string }>
    jobMarketFit: number
  }
}

interface SkillAnalysisProps {
  userId: string
}

export function SkillAnalysis({ userId }: SkillAnalysisProps) {
  const [resumes, setResumes] = useState<any[]>([])
  const [selectedResume, setSelectedResume] = useState<string>('')
  const [targetJob, setTargetJob] = useState('')
  const [targetIndustry, setTargetIndustry] = useState('')
  const [analysisData, setAnalysisData] = useState<SkillAnalysisData | null>(null)
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState('overview')

  useEffect(() => {
    fetchResumes()
  }, [])

  const fetchResumes = async () => {
    try {
      const response = await fetch('/api/resume/list')
      if (response.ok) {
        const data = await response.json()
        setResumes(data.resumes || [])
      }
    } catch (error) {
      console.error('Failed to fetch resumes:', error)
    }
  }

  const generateAnalysis = async () => {
    if (!selectedResume) {
      toast.error('Please select a resume')
      return
    }

    setLoading(true)
    try {
      const response = await fetch('/api/skills/analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          resumeId: selectedResume,
          targetJob: targetJob.trim() || undefined,
          targetIndustry: targetIndustry.trim() || undefined,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Analysis failed')
      }

      const data = await response.json()
      setAnalysisData(data.analysis)
      toast.success('Skill analysis completed!')
    } catch (error) {
      console.error('Analysis error:', error)
      toast.error(error instanceof Error ? error.message : 'Analysis failed')
    } finally {
      setLoading(false)
    }
  }

  const getSkillLevelColor = (level: string) => {
    switch (level) {
      case 'beginner': return 'bg-green-100 text-green-800'
      case 'intermediate': return 'bg-blue-100 text-blue-800'
      case 'advanced': return 'bg-purple-100 text-purple-800'
      default: return 'bg-muted text-foreground'
    }
  }

  const getImportanceColor = (importance: string) => {
    switch (importance) {
      case 'critical': return 'text-red-600'
      case 'important': return 'text-orange-600'
      case 'nice-to-have': return 'text-green-600'
      default: return 'text-muted-foreground'
    }
  }

  const getDemandColor = (demand: string) => {
    switch (demand) {
      case 'high': return 'text-green-600'
      case 'medium': return 'text-yellow-600'
      case 'low': return 'text-red-600'
      default: return 'text-muted-foreground'
    }
  }

  return (
    <div className="space-y-8">
      {/* Analysis Input */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5" />
            Skill Gap Analysis
          </CardTitle>
          <CardDescription>
            Analyze your skills and get personalized career development recommendations
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="resume">Select Resume</Label>
              <Select value={selectedResume} onValueChange={setSelectedResume}>
                <SelectTrigger>
                  <SelectValue placeholder="Choose your resume" />
                </SelectTrigger>
                <SelectContent>
                  {resumes.map((resume) => (
                    <SelectItem key={resume._id} value={resume._id}>
                      {resume.originalFileName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="targetJob">Target Job (Optional)</Label>
              <Input
                id="targetJob"
                placeholder="e.g., Software Engineer"
                value={targetJob}
                onChange={(e) => setTargetJob(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="targetIndustry">Target Industry (Optional)</Label>
              <Select value={targetIndustry} onValueChange={setTargetIndustry}>
                <SelectTrigger>
                  <SelectValue placeholder="Choose industry" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="technology">Technology</SelectItem>
                  <SelectItem value="finance">Finance</SelectItem>
                  <SelectItem value="healthcare">Healthcare</SelectItem>
                  <SelectItem value="consulting">Consulting</SelectItem>
                  <SelectItem value="marketing">Marketing</SelectItem>
                  <SelectItem value="education">Education</SelectItem>
                  <SelectItem value="retail">Retail</SelectItem>
                  <SelectItem value="manufacturing">Manufacturing</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <Button
            onClick={generateAnalysis}
            disabled={loading || !selectedResume}
            className="w-full md:w-auto"
          >
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Analyzing Skills...
              </>
            ) : (
              <>
                <Brain className="mr-2 h-4 w-4" />
                Generate Analysis
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Analysis Results */}
      {analysisData && (
        <div className="space-y-6">
          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>
              Skill analysis completed! Here's your personalized career development plan.
            </AlertDescription>
          </Alert>

          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="gaps">Skill Gaps</TabsTrigger>
              <TabsTrigger value="career">Career Path</TabsTrigger>
              <TabsTrigger value="learning">Learning Plan</TabsTrigger>
              <TabsTrigger value="market">Market Insights</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              {/* Current Skills Overview */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Technical Skills</CardTitle>
                    <CardDescription>Your current technical competencies</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {analysisData.currentSkills.technical.map((skill, index) => (
                        <div key={index} className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                              <Zap className="h-5 w-5 text-blue-600" />
                            </div>
                            <div>
                              <p className="font-medium">{skill.skill}</p>
                              <p className="text-sm text-muted-foreground">Confidence: {skill.confidence}%</p>
                            </div>
                          </div>
                          <Badge className={getSkillLevelColor(skill.level)}>
                            {skill.level}
                          </Badge>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Soft Skills</CardTitle>
                    <CardDescription>Your interpersonal and professional skills</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {analysisData.currentSkills.soft.map((skill, index) => (
                        <div key={index} className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                              <Users className="h-5 w-5 text-green-600" />
                            </div>
                            <div>
                              <p className="font-medium">{skill.skill}</p>
                            </div>
                          </div>
                          <Badge className={getSkillLevelColor(skill.level)}>
                            {skill.level}
                          </Badge>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Required Skills */}
              <Card>
                <CardHeader>
                  <CardTitle>Target Role Requirements</CardTitle>
                  <CardDescription>Skills needed for your target position</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-medium text-foreground mb-3">Job-Specific Skills</h4>
                      <div className="space-y-2">
                        {analysisData.requiredSkills.jobSpecific.map((skill, index) => (
                          <div key={index} className="flex items-center justify-between">
                            <span className="text-sm">{skill.skill}</span>
                            <Badge variant="outline" className={getImportanceColor(skill.importance)}>
                              {skill.importance}
                            </Badge>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div>
                      <h4 className="font-medium text-foreground mb-3">Industry Standards</h4>
                      <div className="space-y-2">
                        {analysisData.requiredSkills.industryStandard.map((skill, index) => (
                          <div key={index} className="flex items-center justify-between">
                            <span className="text-sm">{skill.skill}</span>
                            <Badge variant="outline" className={getDemandColor(skill.demand)}>
                              {skill.demand} demand
                            </Badge>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="gaps" className="space-y-6">
              {/* Critical Gaps */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-red-700">
                    <AlertTriangle className="h-5 w-5" />
                    Critical Skill Gaps
                  </CardTitle>
                  <CardDescription>High-priority skills you need to acquire</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysisData.skillGaps.critical.map((gap, index) => (
                      <div key={index} className="border border-red-200 rounded-lg p-4 bg-red-50">
                        <div className="flex items-start gap-3">
                          <AlertTriangle className="h-5 w-5 text-red-500 mt-0.5 flex-shrink-0" />
                          <div className="flex-1">
                            <h4 className="font-medium text-red-800">{gap.skill}</h4>
                            <p className="text-sm text-red-700 mt-1">{gap.gap}</p>
                            <Badge className="mt-2 bg-red-100 text-red-800">
                              {gap.priority} priority
                            </Badge>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Recommended Skills */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-blue-700">
                    <Lightbulb className="h-5 w-5" />
                    Recommended Skills
                  </CardTitle>
                  <CardDescription>Skills that would enhance your profile</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysisData.skillGaps.recommended.map((skill, index) => (
                      <div key={index} className="border rounded-lg p-4 hover:bg-background transition-colors">
                        <div className="flex items-start gap-3">
                          <Lightbulb className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                          <div className="flex-1">
                            <h4 className="font-medium text-foreground">{skill.skill}</h4>
                            <p className="text-sm text-muted-foreground mt-1">{skill.reason}</p>
                            <div className="flex items-center gap-2 mt-2">
                              <Clock className="h-4 w-4 text-muted-foreground" />
                              <span className="text-sm text-muted-foreground">{skill.timeToLearn}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="career" className="space-y-6">
              {/* Career Level Assessment */}
              <Card>
                <CardHeader>
                  <CardTitle>Career Level Assessment</CardTitle>
                  <CardDescription>Your current position and growth trajectory</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="text-center">
                      <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
                        <Target className="h-8 w-8 text-blue-600" />
                      </div>
                      <h4 className="font-medium text-foreground">Current Level</h4>
                      <p className="text-lg text-blue-600 font-semibold">{analysisData.careerPath.currentLevel}</p>
                    </div>

                    <div className="text-center">
                      <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
                        <TrendingUp className="h-8 w-8 text-green-600" />
                      </div>
                      <h4 className="font-medium text-foreground">Target Level</h4>
                      <p className="text-lg text-green-600 font-semibold">{analysisData.careerPath.targetLevel}</p>
                    </div>

                    <div className="text-center">
                      <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3">
                        <Award className="h-8 w-8 text-purple-600" />
                      </div>
                      <h4 className="font-medium text-foreground">Market Fit</h4>
                      <p className="text-lg text-purple-600 font-semibold">{analysisData.marketInsights.jobMarketFit}%</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Next Steps */}
              <Card>
                <CardHeader>
                  <CardTitle>Next Steps for Growth</CardTitle>
                  <CardDescription>Your personalized career development roadmap</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysisData.careerPath.nextSteps.map((step, index) => (
                      <div key={index} className="flex items-start gap-4">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                          <span className="text-sm font-bold text-blue-600">{index + 1}</span>
                        </div>
                        <div className="flex-1">
                          <h4 className="font-medium text-foreground">{step.step}</h4>
                          <div className="flex items-center gap-4 mt-2">
                            <div className="flex items-center gap-1">
                              <Clock className="h-4 w-4 text-muted-foreground" />
                              <span className="text-sm text-muted-foreground">{step.timeline}</span>
                            </div>
                          </div>
                          <div className="mt-2">
                            <p className="text-sm text-muted-foreground mb-2">Recommended resources:</p>
                            <div className="flex flex-wrap gap-2">
                              {step.resources.map((resource, resIndex) => (
                                <Badge key={resIndex} variant="outline">
                                  {resource}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Alternative Career Paths */}
              <Card>
                <CardHeader>
                  <CardTitle>Alternative Career Paths</CardTitle>
                  <CardDescription>Explore different career directions</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysisData.careerPath.alternativePaths.map((path, index) => (
                      <div key={index} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-medium text-foreground">{path.role}</h4>
                          <Badge className={path.match >= 80 ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}>
                            {path.match}% match
                          </Badge>
                        </div>
                        <div>
                          <p className="text-sm text-muted-foreground mb-2">Key skills needed:</p>
                          <div className="flex flex-wrap gap-2">
                            {path.requiredSkills.map((skill, skillIndex) => (
                              <Badge key={skillIndex} variant="outline">
                                {skill}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="learning" className="space-y-6">
              {/* Short-term Learning Plan */}
              <Card>
                <CardHeader>
                  <CardTitle>Short-term Learning Plan (3-6 months)</CardTitle>
                  <CardDescription>Immediate skills to acquire</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysisData.learningPlan.shortTerm.map((item, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <div className="flex items-start gap-3">
                          <BookOpen className="h-5 w-5 text-blue-500 mt-1 flex-shrink-0" />
                          <div className="flex-1">
                            <h4 className="font-medium text-foreground">{item.skill}</h4>
                            <p className="text-sm text-muted-foreground mt-1">{item.resource}</p>
                            <div className="flex items-center gap-4 mt-2">
                              <div className="flex items-center gap-1">
                                <Clock className="h-4 w-4 text-muted-foreground" />
                                <span className="text-sm text-muted-foreground">{item.duration}</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <DollarSign className="h-4 w-4 text-muted-foreground" />
                                <span className="text-sm text-muted-foreground">{item.cost}</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Long-term Certifications */}
              <Card>
                <CardHeader>
                  <CardTitle>Long-term Certifications</CardTitle>
                  <CardDescription>Advanced credentials for career advancement</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysisData.learningPlan.longTerm.map((cert, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <div className="flex items-start gap-3">
                          <Award className="h-5 w-5 text-purple-500 mt-1 flex-shrink-0" />
                          <div className="flex-1">
                            <h4 className="font-medium text-foreground">{cert.skill}</h4>
                            <p className="text-sm text-muted-foreground mt-1">{cert.certification}</p>
                            <div className="flex items-center gap-1 mt-2">
                              <Clock className="h-4 w-4 text-muted-foreground" />
                              <span className="text-sm text-muted-foreground">{cert.timeline}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Daily Habits */}
              <Card>
                <CardHeader>
                  <CardTitle>Daily Learning Habits</CardTitle>
                  <CardDescription>Build consistent skill development routines</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {analysisData.learningPlan.dailyHabits.map((habit, index) => (
                      <div key={index} className="flex items-start gap-3">
                        <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                          <CheckCircle className="h-4 w-4 text-green-600" />
                        </div>
                        <span className="text-sm text-foreground">{habit}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="market" className="space-y-6">
              {/* Salary Impact */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <DollarSign className="h-5 w-5" />
                    Skill Salary Impact
                  </CardTitle>
                  <CardDescription>How different skills affect earning potential</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysisData.marketInsights.salaryImpact.map((skill, index) => (
                      <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                        <div>
                          <h4 className="font-medium text-foreground">{skill.skill}</h4>
                          <p className="text-sm text-muted-foreground">{skill.demand} demand</p>
                        </div>
                        <div className="text-right">
                          <p className="text-lg font-semibold text-green-600">{skill.salaryBoost}</p>
                          <p className="text-sm text-muted-foreground">salary boost</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Trending Skills */}
              <Card>
                <CardHeader>
                  <CardTitle>Trending Skills</CardTitle>
                  <CardDescription>Emerging skills with high growth potential</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analysisData.marketInsights.trendingSkills.map((skill, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <div className="flex items-start gap-3">
                          <TrendingUp className="h-5 w-5 text-blue-500 mt-1 flex-shrink-0" />
                          <div className="flex-1">
                            <h4 className="font-medium text-foreground">{skill.skill}</h4>
                            <p className="text-sm text-muted-foreground mt-1">{skill.reason}</p>
                            <Badge className="mt-2 bg-green-100 text-green-800">
                              {skill.growth} growth
                            </Badge>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/app/skill-analysis/page.tsx">
import { Suspense } from 'react'
import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import { SkillAnalysis } from './components/skill-analysis'

export default async function SkillAnalysisPage() {
  const session = await getServerSession(authOptions)

  if (!session) {
    redirect('/auth/signin')
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground">Skill Analysis</h1>
          <p className="mt-2 text-lg text-muted-foreground">
            AI-powered career planning and skill gap analysis to accelerate your professional growth
          </p>
        </div>

        <Suspense fallback={<SkillAnalysisSkeleton />}>
          <SkillAnalysis userId={session.user.id} />
        </Suspense>
      </div>
    </div>
  )
}

function SkillAnalysisSkeleton() {
  return (
    <div className="space-y-8">
      {/* Input Section Skeleton */}
      <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
        <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div className="w-full h-12 bg-gray-200 rounded"></div>
          <div className="w-full h-12 bg-gray-200 rounded"></div>
          <div className="w-full h-12 bg-gray-200 rounded"></div>
        </div>
        <div className="w-32 h-10 bg-gray-200 rounded"></div>
      </div>

      {/* Results Skeleton */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
          <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
          <div className="space-y-3">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="flex items-center gap-3">
                <div className="w-12 h-12 bg-gray-200 rounded-full"></div>
                <div className="flex-1">
                  <div className="w-24 h-4 bg-gray-200 rounded mb-2"></div>
                  <div className="w-16 h-3 bg-gray-200 rounded"></div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
          <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
          <div className="space-y-3">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="flex items-center gap-3">
                <div className="w-12 h-12 bg-gray-200 rounded-full"></div>
                <div className="flex-1">
                  <div className="w-24 h-4 bg-gray-200 rounded mb-2"></div>
                  <div className="w-20 h-3 bg-gray-200 rounded"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Career Path Skeleton */}
      <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
        <div className="w-40 h-6 bg-gray-200 rounded mb-6"></div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="text-center">
              <div className="w-16 h-16 bg-gray-200 rounded-full mx-auto mb-3"></div>
              <div className="w-20 h-4 bg-gray-200 rounded mx-auto mb-2"></div>
              <div className="w-16 h-3 bg-gray-200 rounded mx-auto"></div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/terms/page.tsx">
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Terms of Service | Career Lever AI',
  description: 'Your agreement when using our AI-powered job search and recruitment automation platform.',
  robots: 'index, follow'
}

export default function TermsPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
      <div className="max-w-4xl mx-auto px-4 py-12">
        <div className="bg-card rounded-2xl shadow-xl p-8 md:p-12">
          <h1 className="text-4xl font-bold text-center text-blue-600 dark:text-blue-400 mb-4">
            Career Lever AI – Terms of Service
          </h1>
          <p className="text-center text-gray-600 dark:text-gray-400 mb-8">
            <strong>Last updated:</strong> October 24, 2025
          </p>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">1. Acceptance of Terms</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              By accessing or using the Career Lever AI website, mobile application, or any AI-based recruitment tools (collectively, the "Service"), you agree to be bound by these Terms of Service ("Terms") and our{' '}
              <a href="/privacy-policy" className="text-blue-600 dark:text-blue-400 hover:underline">Privacy Policy</a>.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">2. About Career Lever AI</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              Career Lever AI provides artificial intelligence–powered tools designed to streamline job discovery, resume optimization, recruiter outreach, and company intelligence analysis. The Service integrates authorized APIs, such as Perplexity and LinkedIn, to deliver accurate and personalized user experiences.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">3. Eligibility</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              You must be at least 18 years old to use Career Lever AI. By using this Service, you confirm that you meet the applicable age and legal requirements to form a binding contract.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">4. User Responsibilities</h2>
            <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
              <li>Provide accurate and complete information when creating an account.</li>
              <li>Not share login credentials or misuse platform access tokens.</li>
              <li>Use the Service only for lawful job search or recruitment purposes.</li>
              <li>Refrain from scraping, reselling, or redistributing platform data.</li>
            </ul>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">5. AI-Generated Content</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              Career Lever AI uses artificial intelligence for job recommendations, company profiling, and outreach drafting. While we strive for accuracy, AI-generated results are informational only and not guaranteed to be free from error, bias, or incompleteness. Users are encouraged to verify facts before acting on recommendations.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">6. Intellectual Property</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              All software, AI models, brand assets, and proprietary algorithms within the platform are owned or licensed by Career Lever AI. Users are granted a limited, non-exclusive license for personal or internal business use only.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">7. Third-Party Integrations</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              Our Service may interface with third-party platforms, including job boards, LinkedIn, and email APIs. By authorizing such integrations, you grant permission for Career Lever AI to access only necessary data as defined by the third party's API policies. We never store third-party passwords.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">8. Limitation of Liability</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
              To the extent permitted by law, Career Lever AI and its affiliates are not liable for any indirect, incidental, or consequential damages resulting from:
            </p>
            <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
              <li>Data inaccuracies in AI-generated insights or external job listings.</li>
              <li>Service downtime, loss of data, or technical errors.</li>
              <li>Unauthorized access despite standard security measures.</li>
            </ul>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">9. Account Termination</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              We reserve the right to suspend or terminate accounts that violate these Terms, misuse integrations, scrape data, or engage in unlawful behavior. You may delete your account anytime via platform settings or by contacting{' '}
              <a href="mailto:privacy@careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
                privacy@careerleverai.com
              </a>.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">10. Changes to Terms</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              We may update these Terms periodically. Continued use after notice constitutes acceptance of modified terms.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">11. Governing Law</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              These Terms of Service shall be governed by and construed in accordance with the laws of Canada and the province of Alberta.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">12. Contact Us</h2>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              Questions about these Terms or platform usage may be directed to:
            </p>
            <p className="text-gray-700 dark:text-gray-300 mt-3">
              📧 <a href="mailto:privacy@careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
                privacy@careerleverai.com
              </a><br />
              🌐 <a href="https://careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
                https://careerleverai.com
              </a>
            </p>
          </section>

          <footer className="text-center text-sm text-gray-500 dark:text-gray-400 mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
            &copy; 2025 Career Lever AI. All rights reserved. |{' '}
            <a href="/privacy-policy" className="text-blue-600 dark:text-blue-400 hover:underline">
              Privacy Policy
            </a>
          </footer>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/analytics-tracker.tsx">
'use client'

import { useEffect, Suspense } from 'react'
import { usePathname, useSearchParams } from 'next/navigation'
import { useSession } from 'next-auth/react'
import { analytics } from '@/lib/analytics'

/**
 * Analytics Tracker Component
 * Automatically tracks page views and user sessions
 */
function AnalyticsTrackerInner() {
  const pathname = usePathname()
  const searchParams = useSearchParams()
  const { data: session } = useSession()

  // Set user ID when session changes
  useEffect(() => {
    if (session?.user?.id) {
      analytics?.setUserId(session.user.id)
    } else {
      analytics?.setUserId(null)
    }
  }, [session])

  // Track page views on route change
  useEffect(() => {
    if (pathname) {
      const url = searchParams ? `${pathname}?${searchParams.toString()}` : pathname
      analytics?.pageView({
        path: pathname,
        title: document.title,
        referrer: document.referrer,
      })

      // Track specific page types
      if (pathname.includes('/dashboard')) {
        analytics?.track('dashboard_view')
      } else if (pathname.includes('/create-application')) {
        analytics?.track('create_application_view')
      } else if (pathname.includes('/resume-builder')) {
        analytics?.track('resume_builder_view')
      } else if (pathname.includes('/cover-letter')) {
        analytics?.track('cover_letter_view')
      } else if (pathname.includes('/job-boards')) {
        analytics?.track('job_boards_view')
      } else if (pathname.includes('/career-finder')) {
        analytics?.track('career_finder_view')
      }
    }
  }, [pathname, searchParams])

  // Track session duration on unmount
  useEffect(() => {
    const sessionStart = Date.now()

    return () => {
      const duration = Date.now() - sessionStart
      analytics?.track('session_duration', { duration })
    }
  }, [])

  return null // This component doesn't render anything
}

// Wrap in Suspense to fix Next.js build error
export function AnalyticsTracker() {
  return (
    <Suspense fallback={null}>
      <AnalyticsTrackerInner />
    </Suspense>
  )
}
</file>

<file path="src/components/app-shell.tsx">
'use client'

import { usePathname } from 'next/navigation'
import { UnifiedNavigation } from './unified-navigation'
import { Breadcrumbs } from './breadcrumbs'

export function AppShell({ children }: { children: React.ReactNode }) {
  const pathname = usePathname() || ''
  const isAuthPage = pathname.startsWith('/auth')
  const isLandingPage = pathname === '/'

  // Landing page: No navigation, no wrapper (hero section handles everything)
  if (isLandingPage) {
    return <>{children}</>
  }

  // Auth pages: Minimal wrapper, no navigation
  if (isAuthPage) {
    return <main id="main-content" role="main">{children}</main>
  }

  // App pages: Single navigation with breadcrumbs
  return (
    <div className="min-h-screen bg-background">
      {/* UNIFIED NAVIGATION (includes sidebar) */}
      <UnifiedNavigation />
      
      {/* MAIN CONTENT WITH BREADCRUMBS - Add top padding for fixed header */}
      <main 
        id="main-content" 
        role="main" 
        className="pt-20 px-4 sm:px-6 lg:px-8 py-6 transition-all duration-300"
        style={{ 
          marginLeft: '0', // Sidebar handles its own positioning
        }}
      >
        <div className="container mx-auto">
          <Breadcrumbs />
          {children}
        </div>
      </main>
    </div>
  )
}
</file>

<file path="src/components/autopilot-progress-tracker.tsx">
"use client"

import { useEffect, useState } from 'react'
import { Card } from '@/components/ui/card'
import { CheckCircle, Loader2, Clock } from 'lucide-react'

interface ProgressTask {
  id: string
  label: string
  status: 'pending' | 'loading' | 'complete'
  time: string
}

export function AutopilotProgressTracker() {
  const [tasks, setTasks] = useState<ProgressTask[]>([
    { id: 'resume', label: 'Analyzing resume', status: 'complete', time: '2s' },
    { id: 'search', label: 'Searching 25+ job boards', status: 'pending', time: '~8s' },
    { id: 'research', label: 'Researching companies', status: 'pending', time: '~10s' },
    { id: 'optimize', label: 'Pre-generating materials', status: 'pending', time: '~15s' }
  ])
  
  const [isVisible, setIsVisible] = useState(false)
  
  useEffect(() => {
    // Listen for progress updates from localStorage
    const interval = setInterval(() => {
      try {
        const progress = JSON.parse(localStorage.getItem('cf:autopilotProgress') || '{}')
        
        // Check if any task is active
        const hasActiveTask = Object.values(progress).some(status => status === 'loading')
        const allComplete = Object.keys(progress).length === 4 && 
                           Object.values(progress).every(status => status === 'complete')
        
        if (allComplete) {
          // Hide after 3 seconds if all complete
          setTimeout(() => {
            setIsVisible(false)
            localStorage.removeItem('cf:autopilotProgress')
          }, 3000)
        } else if (hasActiveTask || Object.keys(progress).length > 0) {
          setIsVisible(true)
        }
        
        // Update task statuses
        setTasks(prev => prev.map(task => ({
          ...task,
          status: (progress[task.id] as 'pending' | 'loading' | 'complete') || task.status
        })))
      } catch (error) {
        console.error('[AUTOPILOT_TRACKER] Error:', error)
      }
    }, 500)
    
    return () => clearInterval(interval)
  }, [])
  
  if (!isVisible) return null
  
  const allComplete = tasks.every(task => task.status === 'complete')
  
  return (
    <Card className="fixed bottom-4 right-4 p-4 shadow-2xl z-50 w-80 bg-card border-border backdrop-blur-sm">
      <div className="flex items-center gap-2 mb-3">
        {allComplete ? (
          <>
            <CheckCircle className="w-5 h-5 text-green-500" />
            <h4 className="font-semibold text-foreground">✅ Autopilot Complete!</h4>
          </>
        ) : (
          <>
            <div className="relative">
              <Loader2 className="w-5 h-5 animate-spin text-primary" />
              <div className="absolute inset-0 bg-primary/20 rounded-full animate-ping" />
            </div>
            <h4 className="font-semibold text-foreground">🤖 AI Autopilot Working...</h4>
          </>
        )}
      </div>
      
      <div className="space-y-2">
        {tasks.map(task => {
          const StatusIcon = task.status === 'complete' ? CheckCircle :
                           task.status === 'loading' ? Loader2 : Clock
          
          const iconColor = task.status === 'complete' ? 'text-green-500' :
                          task.status === 'loading' ? 'text-primary' : 'text-muted-foreground'
          
          const textColor = task.status === 'complete' ? 'text-muted-foreground' : 'text-foreground'
          
          return (
            <div key={task.id} className="flex items-center gap-2 text-sm">
              <StatusIcon className={`w-4 h-4 ${iconColor} ${task.status === 'loading' ? 'animate-spin' : ''} flex-shrink-0`} />
              <span className={textColor}>{task.label}</span>
              <span className="text-xs text-muted-foreground ml-auto">{task.time}</span>
            </div>
          )
        })}
      </div>
      
      {allComplete && (
        <div className="mt-3 pt-3 border-t border-border">
          <p className="text-xs text-muted-foreground text-center">
            Your personalized job matches are ready! 🎉
          </p>
        </div>
      )}
    </Card>
  )
}
</file>

<file path="src/components/breadcrumbs.tsx">
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'
import { ChevronRight, Home } from 'lucide-react'

export function Breadcrumbs() {
  const pathname = usePathname()
  
  if (!pathname || pathname === '/' || pathname === '/dashboard') return null
  
  const segments = pathname.split('/').filter(Boolean)
  
  const breadcrumbs = segments.map((segment, index) => {
    const href = '/' + segments.slice(0, index + 1).join('/')
    const label = segment
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ')
    
    return { href, label }
  })
  
  return (
    <nav className="flex items-center space-x-2 text-sm text-muted-foreground mb-4 overflow-x-auto">
      <Link 
        href="/dashboard" 
        className="flex items-center hover:text-foreground transition-colors"
      >
        <Home className="w-4 h-4" />
      </Link>
      
      {breadcrumbs.map((crumb, index) => (
        <div key={crumb.href} className="flex items-center space-x-2">
          <ChevronRight className="w-4 h-4 shrink-0" />
          {index === breadcrumbs.length - 1 ? (
            <span className="text-foreground font-medium whitespace-nowrap">{crumb.label}</span>
          ) : (
            <Link 
              href={crumb.href}
              className="hover:text-foreground transition-colors whitespace-nowrap"
            >
              {crumb.label}
            </Link>
          )}
        </div>
      ))}
    </nav>
  )
}
</file>

<file path="src/components/career-finder-back-button.tsx">
/**
 * Career Finder Back Button
 * Consistent navigation for all Career Finder pages
 */

'use client'

import { ArrowLeft } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { cn } from '@/lib/utils'

interface CareerFinderBackButtonProps {
  label?: string
  className?: string
  onClick?: () => void
}

export function CareerFinderBackButton({ 
  label = 'Back', 
  className,
  onClick 
}: CareerFinderBackButtonProps) {
  const router = useRouter()
  
  const handleClick = () => {
    if (onClick) {
      onClick()
    } else {
      router.back()
    }
  }
  
  return (
    <button
      onClick={handleClick}
      className={cn(
        "flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors mb-6 group",
        className
      )}
    >
      <ArrowLeft className="w-5 h-5 group-hover:-translate-x-1 transition-transform" />
      <span className="font-medium">{label}</span>
    </button>
  )
}
</file>

<file path="src/components/career-finder/progress.tsx">
'use client'

import { usePathname } from 'next/navigation'

const steps = [
  { key: 'resume', label: 'Resume', icon: '📝' },
  { key: 'search', label: 'Search', icon: '🔍' },
  { key: 'job', label: 'Analysis', icon: '📊' },
  { key: 'company', label: 'Insights', icon: '🏢' },
  { key: 'optimizer', label: 'Optimize', icon: '✨' },
  { key: 'cover-letter', label: 'Letter', icon: '✉️' },
  { key: 'outreach', label: 'Outreach', icon: '🚀' },
]

export function CareerFinderProgress() {
  const pathname = usePathname()
  // Derive index from path or persisted localStorage
  let idx = Math.max(0, steps.findIndex(s => pathname?.includes(`/career-finder/${s.key}`)))
  try {
    const persisted = JSON.parse(localStorage.getItem('cf:progress') || 'null')
    if (persisted && typeof persisted.step === 'number') {
      idx = Math.max(idx, Math.min(steps.length - 1, (persisted.step - 1)))
    }
  } catch {}
  const percent = Math.round(((idx + 1) / steps.length) * 100)

  return (
    <div className="w-full mb-8 px-4">
      {/* Progress Steps */}
      <div className="flex items-center justify-between mb-6 overflow-x-auto pb-2">
        {steps.map((step, i) => (
          <div key={step.key} className="flex flex-col items-center min-w-[80px] relative">
            {/* Step Circle */}
            <div className="relative">
              {/* Moving Loader (only on current step) */}
              {i === idx && (
                <div 
                  className="absolute inset-0 w-12 h-12 rounded-full border-4 border-transparent border-t-[#5424FD] border-r-[#8B5CF6]"
                  style={{
                    animation: 'spin 1.5s linear infinite',
                  }}
                />
              )}
              
              {/* Step Icon */}
              <div 
                className={`
                  w-12 h-12 rounded-full flex items-center justify-center text-xl
                  transition-all duration-300 shadow-lg relative z-10
                  ${i <= idx 
                    ? 'bg-gradient-to-br from-[#5424FD] to-[#8B5CF6] text-white scale-110' 
                    : 'bg-muted text-muted-foreground scale-100'
                  }
                `}
              >
                {step.icon}
              </div>
            </div>
            
            {/* Step Label */}
            <span 
              className={`
                mt-2 text-xs font-medium text-center
                ${i <= idx ? 'text-foreground font-semibold' : 'text-muted-foreground'}
              `}
            >
              {step.label}
            </span>
            
            {/* Connector Line */}
            {i < steps.length - 1 && (
              <div 
                className={`
                  absolute top-6 left-[calc(50%+24px)] w-[calc(100%-48px)]
                  h-1 rounded-full transition-all duration-500
                  ${i < idx 
                    ? 'bg-gradient-to-r from-[#5424FD] to-[#8B5CF6]' 
                    : 'bg-muted'
                  }
                `}
                style={{ zIndex: -1 }}
              />
            )}
          </div>
        ))}
      </div>

      {/* Modern Progress Bar */}
      <div className="relative">
        {/* Progress Text */}
        <div className="flex items-center justify-between mb-3">
          <span className="text-sm font-semibold text-foreground">
            Step {idx + 1} of {steps.length}
          </span>
          <span className="text-sm font-bold text-primary">
            {percent}%
          </span>
        </div>
        
        {/* Progress Bar Track */}
        <div className="relative w-full h-3 bg-muted/50 rounded-full overflow-hidden shadow-inner">
          {/* Animated Progress Fill */}
          <div 
            className="absolute top-0 left-0 h-full rounded-full transition-all duration-700 ease-out"
            style={{ 
              width: `${percent}%`,
              background: 'linear-gradient(90deg, #5424FD 0%, #8B5CF6 50%, #A78BFA 100%)',
              boxShadow: '0 0 12px rgba(84, 36, 253, 0.5)'
            }}
          >
            {/* Shine Effect */}
            <div 
              className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent"
              style={{
                animation: 'shine 2s infinite',
              }}
            />
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes shine {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(200%); }
        }
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  )
}
</file>

<file path="src/components/client-init.tsx">
'use client'

import { useEffect } from 'react'
import { ThemeManager } from '@/lib/theme-manager'
import { DeviceManager } from '@/lib/device-manager'

export function ClientInit() {
  useEffect(() => {
    try { ThemeManager.init() } catch {}
    try { DeviceManager.init() } catch {}
    return () => {
      try { DeviceManager.dispose() } catch {}
    }
  }, [])
  return null
}
</file>

<file path="src/components/command-palette.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Search, FileText, Briefcase, Home, Settings, Users, BarChart3, Target } from 'lucide-react'

interface Command {
  id: string
  label: string
  icon: any
  href: string
  keywords: string[]
}

const commands: Command[] = [
  { id: 'dashboard', label: 'Dashboard', icon: Home, href: '/dashboard', keywords: ['home', 'main'] },
  { id: 'search', label: 'Job Search', icon: Search, href: '/career-finder/search', keywords: ['jobs', 'find', 'search'] },
  { id: 'analysis', label: 'Job Analysis', icon: Target, href: '/career-finder/job-analysis', keywords: ['analyze', 'match'] },
  { id: 'company', label: 'Company Research', icon: Briefcase, href: '/career-finder/company', keywords: ['research', 'employer'] },
  { id: 'optimizer', label: 'Resume Optimizer', icon: FileText, href: '/career-finder/optimizer', keywords: ['resume', 'optimize', 'tailor'] },
  { id: 'cover', label: 'Cover Letter', icon: FileText, href: '/career-finder/cover-letter', keywords: ['letter', 'cover'] },
  { id: 'outreach', label: 'Outreach', icon: Users, href: '/career-finder/outreach', keywords: ['send', 'email', 'apply'] },
  { id: 'resume', label: 'Resume Builder', icon: FileText, href: '/resume-builder', keywords: ['create', 'build'] },
  { id: 'applications', label: 'Applications', icon: Briefcase, href: '/applications', keywords: ['track', 'apps'] },
  { id: 'analytics', label: 'Analytics', icon: BarChart3, href: '/analytics', keywords: ['stats', 'metrics'] },
  { id: 'network', label: 'Network', icon: Users, href: '/network', keywords: ['contacts', 'connections'] },
  { id: 'settings', label: 'Settings', icon: Settings, href: '/settings', keywords: ['preferences', 'config'] },
]

export function CommandPalette() {
  const [open, setOpen] = useState(false)
  const [query, setQuery] = useState('')
  const router = useRouter()

  const filteredCommands = commands.filter(cmd =>
    cmd.label.toLowerCase().includes(query.toLowerCase()) ||
    cmd.keywords.some(kw => kw.includes(query.toLowerCase()))
  )

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault()
        setOpen(true)
      }
      if (e.key === 'Escape') {
        setOpen(false)
      }
    }
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [])

  const handleSelect = (href: string) => {
    router.push(href)
    setOpen(false)
    setQuery('')
  }

  if (!open) return null

  return (
    <div className="fixed inset-0 z-[9999] bg-black/50 backdrop-blur-sm flex items-start justify-center pt-[20vh]">
      <div className="w-full max-w-2xl mx-4 bg-card border border-border rounded-2xl shadow-2xl overflow-hidden">
        <div className="flex items-center border-b border-border px-4">
          <Search className="w-5 h-5 text-muted-foreground" />
          <input
            type="text"
            placeholder="Search commands... (Ctrl+K)"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="flex-1 px-4 py-4 bg-transparent outline-none text-foreground placeholder:text-muted-foreground"
            autoFocus
          />
        </div>
        
        <div className="max-h-96 overflow-y-auto p-2">
          {filteredCommands.length === 0 ? (
            <div className="px-4 py-8 text-center text-muted-foreground">
              No commands found
            </div>
          ) : (
            filteredCommands.map((cmd) => {
              const Icon = cmd.icon
              return (
                <button
                  key={cmd.id}
                  onClick={() => handleSelect(cmd.href)}
                  className="w-full flex items-center space-x-3 px-4 py-3 rounded-xl hover:bg-accent/50 transition-all text-left"
                >
                  <Icon className="w-5 h-5 text-muted-foreground" />
                  <span className="text-foreground font-medium">{cmd.label}</span>
                </button>
              )
            })
          )}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/company-research/index.tsx">
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { Skeleton } from '@/components/ui/skeleton'
import type { CompanyData, CompanyResearchPanelProps } from '@/types'
import {
  Building,
  Search,
  Star,
  Users,
  TrendingUp,
  Globe,
  Calendar,
  AlertCircle,
  CheckCircle,
  ExternalLink,
  RefreshCw,
  Twitter,
  Brain,
  Target
} from 'lucide-react'

type CompanyResearchProps = {
  initialCompanyName?: string
  onResearchComplete?: (data: CompanyData) => void
  onError?: (error: string) => void
  titleOverride?: string
  descriptionOverride?: string
  autoRun?: boolean
  hideInputs?: boolean
  hideActions?: boolean
  defaultSubject?: string
  defaultBody?: string
}

export default function CompanyResearch({ initialCompanyName, onResearchComplete, onError, titleOverride, descriptionOverride, autoRun, hideInputs, hideActions, defaultSubject, defaultBody }: CompanyResearchProps = {}) {
  const [companyName, setCompanyName] = useState(initialCompanyName || (typeof window !== 'undefined' ? localStorage.getItem('job:company') || '' : ''))
  const [website, setWebsite] = useState<string>(()=>{ try { return localStorage.getItem('job:website') || '' } catch { return '' } })
  const [jobTitle, setJobTitle] = useState<string>(()=>{ try { return localStorage.getItem('job:title') || '' } catch { return '' } })
  const [location, setLocation] = useState('')
  const [isResearching, setIsResearching] = useState(false)
  const [researchProgress, setResearchProgress] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [researchResult, setResearchResult] = useState<any | null>(null)
  const [profileIndex, setProfileIndex] = useState<number | null>(null)
  const [profileLoading, setProfileLoading] = useState(false)
  const [profileData, setProfileData] = useState<any | null>(null)
  const [psychology, setPsychology] = useState<any | null>(null)
  const [loadingPsych, setLoadingPsych] = useState(false)
  const [marketIntel, setMarketIntel] = useState<string>('')
  const [loadingIntel, setLoadingIntel] = useState(false)
  // Intro email composer state
  const [composeOpen, setComposeOpen] = useState(false)
  const [composeSubject, setComposeSubject] = useState('')
  const [composeBody, setComposeBody] = useState('')
  const [composeTo, setComposeTo] = useState('')
  const [downloading, setDownloading] = useState(false)

  // Auto-run research on mount if requested
  useEffect(() => {
    if (autoRun && !researchResult && !isResearching) {
      // FIX RACE CONDITION: Use local variables instead of state
      const c = initialCompanyName || (typeof window !== 'undefined' ? localStorage.getItem('job:company') || '' : '')
      const w = typeof window !== 'undefined' ? localStorage.getItem('job:website') || '' : ''
      const t = typeof window !== 'undefined' ? localStorage.getItem('job:title') || '' : ''
      const l = typeof window !== 'undefined' ? localStorage.getItem('job:location') || '' : ''
      
      console.log('[COMPANY_RESEARCH] Auto-run with:', { company: c, website: w, title: t, location: l })
      
      // Update state (for display)
      if (c) setCompanyName(c)
      if (w) setWebsite(w)
      if (t) setJobTitle(t)
      if (l) setLocation(l)
      
      // Call research with local variables (not state)
      if (c && c.trim()) {
        handleResearchWithData(c, w, t, l)
      } else {
        console.warn('[COMPANY_RESEARCH] No company name found for auto-run')
        setError('No company name provided')
      }
    }
  }, [autoRun, initialCompanyName])

  // New method: Research with explicit data (avoids state race condition)
  const handleResearchWithData = async (company: string, web?: string, title?: string, loc?: string) => {
    if (!company || !company.trim()) {
      setError('Please enter a company name')
      onError?.('Please enter a company name')
      return
    }
    
    setIsResearching(true)
    setResearchProgress(0)
    setError(null)

    try {
      const progressInterval = setInterval(() => {
        setResearchProgress((p) => (p >= 90 ? 90 : p + 15))
      }, 500)

      const response = await fetch('/api/v2/company/deep-research', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          companyName: company.trim(),
          website: web?.trim() || undefined,
          jobTitle: title?.trim() || undefined,
          location: loc?.trim() || undefined,
        })
      })

      clearInterval(progressInterval)
      setResearchProgress(100)

      if (!response.ok) {
        const data = await response.json().catch(()=>({}))
        throw new Error((data as any).error || 'Research failed')
      }

      const data = await response.json()
      const result: CompanyData = (data.companyData || data.research)
      // Attach contacts if provided by API
      if (Array.isArray((data as any).contacts)) {
        ;(result as any).hiringContacts = (data as any).contacts
      }
      setResearchResult(result)
      onResearchComplete?.(result)
      // Save to localStorage
      try {
        if (company) localStorage.setItem('job:company', company)
        if (web) localStorage.setItem('job:website', web)
        if (title) localStorage.setItem('job:title', title)
      } catch {}
    } catch (e) {
      const msg = e instanceof Error ? e.message : 'Research failed'
      setError(msg)
      onError?.(msg)
    } finally {
      setIsResearching(false)
      setTimeout(() => setResearchProgress(0), 800)
    }
  }

  const handleResearch = async () => {
    if (!companyName.trim()) {
      setError('Please enter a company name')
      onError?.('Please enter a company name')
      return
    }
    // Use the new method with state variables
    return handleResearchWithData(companyName, website, jobTitle, location)
  }

  const refreshResearch = async () => {
    if (!companyName.trim()) return
    setIsResearching(true)
    setError(null)
    setResearchProgress(0)
    try {
      const response = await fetch('/api/v2/company/deep-research', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ companyName: companyName.trim(), website: website.trim() || undefined, jobTitle: jobTitle.trim() || undefined, location: location.trim() || undefined })
      })
      if (!response.ok) {
        const data = await response.json().catch(()=>({}))
        throw new Error((data as any).error || 'Refresh failed')
      }
      const data = await response.json()
      const result: CompanyData = (data.companyData || data.research)
      if (Array.isArray((data as any).contacts)) {
        ;(result as any).hiringContacts = (data as any).contacts
      }
      setResearchResult(result)
      onResearchComplete?.(result)
    } catch (e) {
      const msg = e instanceof Error ? e.message : 'Refresh failed'
      setError(msg)
      onError?.(msg)
    } finally {
      setIsResearching(false)
    }
  }

  const showProfileForContact = async (index: number, person: any) => {
    setProfileIndex(index)
    setProfileLoading(true)
    setProfileData(null)
    try {
      const res = await fetch('/api/insights/hiring/profile', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: person.name, companyName: companyName.trim(), roleType: jobTitle.trim() || undefined, linkedinUrl: person.profileUrl || undefined })
      })
      if (!res.ok) throw new Error('Profile fetch failed')
      const json = await res.json()
      setProfileData(json.profile)
    } catch (e) {
      setProfileData({ error: 'Failed to load profile' })
    } finally {
      setProfileLoading(false)
    }
  }

  const runPsychology = async () => {
    setLoadingPsych(true)
    try {
      let jd = ''
      try { jd = localStorage.getItem('job:description') || '' } catch {}
      if (!jd || jd.length < 20) throw new Error('Add a job description first (Analyze step)')
      const res = await fetch('/api/insights/psychology', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription: jd, companySignals: researchResult || {} }) })
      const json = await res.json().catch(()=>({}))
      if (!res.ok || !json.success) throw new Error(json.error || 'Failed to compute psychology')
      setPsychology(json.psychology)
      try { localStorage.setItem('analyze:psychology', JSON.stringify(json.psychology)) } catch {}
    } catch (e: any) {
      setError(e?.message || 'Psychology failed')
    } finally { setLoadingPsych(false) }
  }

  const runMarketIntel = async () => {
    setLoadingIntel(true)
    try {
      const res = await fetch('/api/v2/company/intel', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ companyName: companyName.trim(), role: jobTitle.trim() || undefined, geo: location.trim() || undefined }) })
      const json = await res.json().catch(()=>({}))
      if (!res.ok || !json.success) throw new Error(json.error || 'Failed to fetch market intelligence')
      setMarketIntel(json.intel?.summary || '')
    } catch (e: any) {
      setError(e?.message || 'Market intelligence failed')
    } finally { setLoadingIntel(false) }
  }

  // Intro email helpers
  const openComposer = (person: any) => {
    const subj = (defaultSubject && defaultSubject.trim()) ? defaultSubject : `Introduction regarding ${jobTitle || 'an opportunity'} – ${companyName}`
    const greeting = `Hello ${person?.name?.split(' ')[0] || 'there'},`
    const fallbackBody = `${greeting}\n\n` +
      `I’m reaching out regarding ${jobTitle || 'an opportunity'} at ${companyName}. ` +
      `I believe my background aligns well and I’d welcome the chance to connect.\n\n` +
      `Please see attached resume and a brief cover letter summarizing my fit. ` +
      `Happy to share more details or schedule a short call at your convenience.\n\n` +
      `Best regards,\n` +
      (typeof window !== 'undefined' ? (localStorage.getItem('user:name') || 'Candidate') : 'Candidate')
    const body = (defaultBody && defaultBody.trim()) ? defaultBody : fallbackBody
    setComposeSubject(subj)
    setComposeBody(body)
    setComposeTo(typeof person?.email === 'string' ? person.email : '')
    setComposeOpen(true)
  }

  const mailtoHref = () => {
    const to = composeTo || ''
    const s = encodeURIComponent(composeSubject || '')
    const b = encodeURIComponent(composeBody || '')
    return `mailto:${to}?subject=${s}&body=${b}`
  }

  const downloadPdfFromHtml = async (html: string, filename: string) => {
    const wrapped = `<!DOCTYPE html><html><head><meta charset=\"utf-8\"><title>${filename}</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.5;color:#333;max-width:8.5in;margin:0 auto;padding:0.5in;white-space:pre-wrap}</style></head><body>${html.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
    setDownloading(true)
    try {
      const resp = await fetch('/api/resume/export/pdf', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ html: wrapped, filename: `${filename}.pdf` }) })
      if (!resp.ok) throw new Error('Failed')
      const blob = await resp.blob()
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${filename}.pdf`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch {}
    finally { setDownloading(false) }
  }

  const downloadLatestResume = async () => {
    try {
      // Prefer selected optimized HTML from optimizer step
      let html = ''
      try { html = localStorage.getItem('cf:selectedResumeHtml') || '' } catch {}
      if (!html) {
        const rl = await fetch('/api/resume/list')
        if (!rl.ok) return
        const rj = await rl.json()
        const txt: string = rj?.resumes?.[0]?.extractedText || ''
        if (!txt) return
        html = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Resume</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.5;color:#333;max-width:8.5in;margin:0 auto;padding:0.5in;white-space:pre-wrap}</style></head><body>${txt.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
      }
      const name = `${companyName || 'Company'}_${jobTitle || 'Role'}_Resume`
      await downloadPdfFromHtml(html, name)
    } catch {}
  }

  const downloadLatestCoverLetter = async () => {
    try {
      // Prefer selected cover letter from wizard
      let content = ''
      try { content = localStorage.getItem('cf:selectedCoverLetter') || '' } catch {}
      if (!content) {
        const cl = await fetch('/api/cover-letter/list')
        if (!cl.ok) return
        const cj = await cl.json()
        const latest = Array.isArray(cj.letters) && cj.letters.length ? cj.letters[0] : null
        content = latest?.content || ''
      }
      if (!content) return
      const name = `${companyName || 'Company'}_${jobTitle || 'Role'}_CoverLetter`
      await downloadPdfFromHtml(content, name)
    } catch {}
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Building className="h-5 w-5" />
          {titleOverride || 'Company Research'}
        </CardTitle>
          <CardDescription>
          {descriptionOverride || 'Get comprehensive insights about companies from multiple sources. Use responsibly and verify before contacting.'}
          </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Error */}
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Form */}
        {!hideInputs && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="space-y-2">
            <Label htmlFor="companyName">Company Name *</Label>
            <Input id="companyName" placeholder="e.g., Google" value={companyName} onChange={(e)=>setCompanyName(e.target.value)} disabled={isResearching} />
          </div>
          <div className="space-y-2">
            <Label htmlFor="website">Website (Optional)</Label>
            <Input id="website" placeholder="https://company.com" value={website} onChange={(e)=>setWebsite(e.target.value)} disabled={isResearching} />
          </div>
          <div className="space-y-2">
            <Label htmlFor="jobTitle">Target Role (Optional)</Label>
            <Input id="jobTitle" placeholder="e.g., Senior AE" value={jobTitle} onChange={(e)=>setJobTitle(e.target.value)} disabled={isResearching} />
          </div>
          <div className="space-y-2">
            <Label htmlFor="location">Location (Optional)</Label>
            <Input id="location" placeholder="e.g., Edmonton, AB" value={location} onChange={(e)=>setLocation(e.target.value)} disabled={isResearching} />
          </div>
        </div>
        )}

        {/* Progress */}
        {isResearching && (
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Researching company...</span>
              <span className="text-sm text-gray-600">{researchProgress}%</span>
            </div>
            <Progress value={researchProgress} className="w-full" />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
              <Skeleton className="h-24" />
              <Skeleton className="h-24" />
              <Skeleton className="h-32 md:col-span-2" />
            </div>
          </div>
        )}

        {/* Actions */}
        {!hideActions && (
        <div className="flex gap-3">
          <Button onClick={handleResearch} disabled={isResearching || !companyName.trim()} className="flex-1">
            {isResearching ? (<><Search className="mr-2 h-4 w-4" /> Researching...</>) : (<><Search className="mr-2 h-4 w-4" /> Research Company</>) }
          </Button>
          {researchResult && (
            <Button variant="outline" onClick={refreshResearch} disabled={isResearching}>
              <RefreshCw className="mr-2 h-4 w-4" /> Refresh
            </Button>
          )}
        </div>
        )}

        {/* Results */}
        {researchResult && (
          <div className="space-y-4">
            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertDescription>Research completed successfully!</AlertDescription>
            </Alert>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {/* Company */}
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <Building className="h-8 w-8 text-blue-600" />
                    <div>
                      <p className="text-sm font-medium text-gray-600">Company</p>
                      <p className="text-lg font-semibold line-clamp-2">{researchResult.companyName}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Glassdoor Rating */}
              {researchResult.glassdoorRating && (
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <Star className="h-8 w-8 text-yellow-600" />
                      <div>
                        <p className="text-sm font-medium text-gray-600">Glassdoor Rating</p>
                        <p className="text-lg font-semibold">{researchResult.glassdoorRating}/5</p>
                        {researchResult.glassdoorReviews && (
                          <p className="text-xs text-gray-600">{researchResult.glassdoorReviews} reviews</p>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Size */}
              {researchResult.size && (
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <Users className="h-8 w-8 text-green-600" />
                      <div>
                        <p className="text-sm font-medium text-gray-600">Company Size</p>
                        <p className="text-lg font-semibold">{researchResult.size}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Industry */}
              {researchResult.industry && (
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <TrendingUp className="h-8 w-8 text-purple-600" />
                      <div>
                        <p className="text-sm font-medium text-gray-600">Industry</p>
                        <p className="text-lg font-semibold">{researchResult.industry}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>

            {/* Description */}
            {researchResult.description && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Company Description</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-700 dark:text-gray-300 leading-relaxed whitespace-pre-wrap">{researchResult.description}</p>
                </CardContent>
              </Card>
            )}

            {/* LinkedIn */}
            {researchResult.linkedinData && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Globe className="h-4 w-4" />
                    LinkedIn Presence
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {researchResult.linkedinData.followers && (
                    <div className="flex justify-between"><span className="text-sm text-gray-600">Followers</span><span className="font-medium">{researchResult.linkedinData.followers.toLocaleString()}</span></div>
                  )}
                  {researchResult.linkedinData.employeeCount && (
                    <div className="flex justify-between"><span className="text-sm text-gray-600">Employees</span><span className="font-medium">{researchResult.linkedinData.employeeCount.toLocaleString()}</span></div>
                  )}
                  {researchResult.linkedinData.companyPage && (
                    <Button variant="outline" size="sm" asChild>
                      <a href={researchResult.linkedinData.companyPage} target="_blank" rel="noopener noreferrer">
                        <ExternalLink className="mr-2 h-4 w-4" /> View on LinkedIn
                      </a>
                    </Button>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Contacts */}
            {Array.isArray(researchResult.hiringContacts) && researchResult.hiringContacts.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Hiring Contacts</CardTitle>
                  <CardDescription>Publicly discoverable recruiter/manager leads</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {researchResult.hiringContacts.map((p: any, idx: number) => (
                      <div key={idx} className="border rounded p-3 space-y-2 bg-card">
                        <div className="flex items-center justify-between">
                          <div>
                            <div className="font-medium text-sm text-foreground">{p.name}</div>
                            <div className="text-xs text-muted-foreground">{p.title}</div>
                            {(p.email || (p.alternativeEmails && p.alternativeEmails.length)) && (
                              <div className="text-xs text-muted-foreground mt-1">
                                {p.email ? (<div className="text-foreground">{p.emailType === 'inferred' ? '(inferred) ' : ''}{p.email}</div>) : null}
                                {Array.isArray(p.alternativeEmails) && p.alternativeEmails.slice(0,2).map((em:string,i:number)=>(<div key={i} className="opacity-80">{em}</div>))}
                              </div>
                            )}
                          </div>
                          <div className="flex gap-2">
                            {p.profileUrl && (
                              <Button asChild size="sm" variant="outline">
                                <a href={p.profileUrl} target="_blank" rel="noopener noreferrer"><ExternalLink className="h-4 w-4 mr-1" /> Profile</a>
                              </Button>
                            )}
                            <Button size="sm" variant="outline" onClick={() => openComposer(p)}>Compose</Button>
                            <Button size="sm" variant="secondary" onClick={() => showProfileForContact(idx, p)} disabled={profileLoading && profileIndex === idx}>
                              {profileLoading && profileIndex === idx ? 'Loading…' : 'Insights'}
                            </Button>
                          </div>
                        </div>
                        {profileIndex === idx && (
                          <div className="text-xs text-gray-700 dark:text-gray-200 bg-gray-50 dark:bg-gray-800 rounded p-3 no-text-bleed">
                            {profileLoading && <div>Loading insights…</div>}
                            {!profileLoading && profileData && (
                              profileData.error ? <div className="text-red-600">{profileData.error}</div> : (
                                <div className="space-y-1">
                                  <div><span className="font-semibold">Personality:</span> {profileData.personalityType}</div>
                                  <div><span className="font-semibold">Style:</span> {profileData.communicationStyle}</div>
                                  <div><span className="font-semibold">Red flags:</span> {(profileData.redFlags || []).join(', ')}</div>
                                  <div><span className="font-semibold">Approach:</span> {profileData.optimizedApproach}</div>
                                </div>
                              )
                            )}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Employer Psychology */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Brain className="h-4 w-4" /> Employer Psychology
                </CardTitle>
                <CardDescription>Tone, formality, values, and best send windows</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex gap-2">
                  <Button onClick={runPsychology} disabled={loadingPsych}>
                    {loadingPsych ? 'Analyzing…' : 'Compute Psychology'}
                  </Button>
                  {psychology && <Badge variant="secondary">Saved for tailoring</Badge>}
                </div>
                {psychology && (
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
                    <div>
                      <div className="font-medium mb-1">Tone</div>
                      <div className="text-gray-700">{psychology.tone} ({psychology.formality}/100)</div>
                    </div>
                    <div>
                      <div className="font-medium mb-1">Values</div>
                      <div className="text-gray-700">{(psychology.values || []).join(', ')}</div>
                    </div>
                    <div>
                      <div className="font-medium mb-1">Best Send Windows</div>
                      <div className="text-gray-700">{(psychology.bestSendWindows || []).join(' • ')}</div>
                    </div>
                    {Array.isArray(psychology.languageGuidance) && psychology.languageGuidance.length > 0 && (
                      <div className="md:col-span-3">
                        <div className="font-medium mb-1">Language Guidance</div>
                        <ul className="list-disc ml-5 space-y-1">
                          {psychology.languageGuidance.map((g: string, i: number)=>(<li key={i}>{g}</li>))}
                        </ul>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Market Intelligence */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Target className="h-4 w-4" /> Market Intelligence
                </CardTitle>
                <CardDescription>Hiring momentum, positioning, culture signals, and angles</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button onClick={runMarketIntel} variant="outline" disabled={loadingIntel}>
                  {loadingIntel ? 'Loading…' : 'Fetch Market Intel'}
                </Button>
                {marketIntel && (
                  <div className="text-sm text-gray-700 whitespace-pre-wrap">
                    {marketIntel}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Contact Info from Website */}
            {researchResult.contactInfo && (Array.isArray(researchResult.contactInfo.emails) || Array.isArray(researchResult.contactInfo.phones) || Array.isArray(researchResult.contactInfo.addresses)) && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Contact Information</CardTitle>
                  <CardDescription>Discovered from website pages</CardDescription>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  {Array.isArray(researchResult.contactInfo.emails) && researchResult.contactInfo.emails.length > 0 && (
                    <div>
                      <div className="font-medium mb-1">Emails</div>
                      <ul className="space-y-1">
                        {researchResult.contactInfo.emails.slice(0,8).map((e:string,i:number)=> (
                          <li key={i} className="break-all">{e}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {Array.isArray(researchResult.contactInfo.phones) && researchResult.contactInfo.phones.length > 0 && (
                    <div>
                      <div className="font-medium mb-1">Phones</div>
                      <ul className="space-y-1">
                        {researchResult.contactInfo.phones.slice(0,8).map((p:string,i:number)=> (
                          <li key={i}>{p}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {Array.isArray(researchResult.contactInfo.addresses) && researchResult.contactInfo.addresses.length > 0 && (
                    <div className="md:col-span-1">
                      <div className="font-medium mb-1">Addresses</div>
                      <ul className="space-y-1">
                        {researchResult.contactInfo.addresses.slice(0,6).map((a:string,i:number)=> (
                          <li key={i}>{a}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Google OSINT Bundles */}
            {researchResult.osint && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Public Web Signals</CardTitle>
                  <CardDescription>Financials, culture, leadership, growth, benefits, news</CardDescription>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                  {['financial','culture','leadership','growth','benefits','news'].map((k) => (
                    Array.isArray(researchResult.osint[k]) && researchResult.osint[k].length > 0 ? (
                      <div key={k}>
                        <div className="font-medium mb-1 capitalize">{k}</div>
                        <ul className="space-y-1">
                          {researchResult.osint[k].slice(0,5).map((it:any,i:number)=> (
                            <li key={i} className="flex items-center justify-between gap-2">
                              <div className="line-clamp-1">{it.title || it.snippet}</div>
                              {it.url && <Button asChild size="sm" variant="outline"><a href={it.url} target="_blank" rel="noopener noreferrer">Open</a></Button>}
                            </li>
                          ))}
                        </ul>
                      </div>
                    ) : null
                  ))}
                </CardContent>
              </Card>
            )}

            {/* Twitter/X Mentions */}
            {researchResult.osint?.twitter && Array.isArray(researchResult.osint.twitter) && researchResult.osint.twitter.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Twitter className="h-4 w-4 text-sky-500" />
                    Twitter/X Mentions
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-2">
                  {researchResult.osint.twitter.slice(0,6).map((t:any,i:number)=> (
                    <div key={i} className="flex items-center justify-between border rounded p-3">
                      <div className="pr-3 text-sm line-clamp-1">{t.title || t.snippet}</div>
                      {t.url && (
                        <Button asChild size="sm" variant="outline"><a href={t.url} target="_blank" rel="noopener noreferrer">Open</a></Button>
                      )}
                    </div>
                  ))}
                </CardContent>
              </Card>
            )}

            {/* Sources */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Sources</CardTitle>
                <CardDescription>Primary links and timestamps</CardDescription>
              </CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                {researchResult.website && (
                  <div className="flex items-center justify-between border rounded p-3">
                    <span className="font-medium">Website</span>
                    <Button asChild size="sm" variant="outline"><a href={researchResult.website} target="_blank" rel="noopener noreferrer">Open</a></Button>
                  </div>
                )}
                {researchResult.linkedinData?.companyPage && (
                  <div className="flex items-center justify-between border rounded p-3">
                    <span className="font-medium">LinkedIn</span>
                    <Button asChild size="sm" variant="outline"><a href={researchResult.linkedinData.companyPage} target="_blank" rel="noopener noreferrer">Open</a></Button>
                  </div>
                )}
                {Array.isArray(researchResult.recentNews) && researchResult.recentNews.length > 0 && (
                  <div className="md:col-span-2">
                    <div className="font-medium mb-2">Recent News</div>
                    <div className="space-y-2">
                      {researchResult.recentNews.slice(0,5).map((n: any, i: number)=> (
                        <div key={i} className="flex items-center justify-between border rounded p-3">
                          <div className="pr-3">
                            <div className="text-sm font-medium line-clamp-1">{n.title}</div>
                            <div className="text-xs text-gray-500 flex items-center gap-2"><Calendar className="h-3 w-3" /> {new Date(n.publishedAt).toLocaleString()}</div>
                          </div>
                          {n.url && (
                            <Button asChild size="sm" variant="outline"><a href={n.url} target="_blank" rel="noopener noreferrer">Open</a></Button>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                {researchResult.cachedAt && (
                  <div className="text-xs text-gray-500 md:col-span-2">Cached: {new Date(researchResult.cachedAt).toLocaleString()}</div>
                )}
              </CardContent>
            </Card>
          </div>
        )}

        {!isResearching && !researchResult && !error && (
          <div className="text-sm text-gray-600 border rounded-lg p-4">
            Enter a company name and click Research to get reviews, social signals, contacts, and sources.
          </div>
        )}
      {/* Intro Email Composer Modal */}
      {composeOpen && (
        <div className="fixed inset-0 z-50 bg-black/40 flex items-center justify-center p-4">
          <div className="bg-card rounded-lg w-full max-w-2xl p-4 space-y-3">
            <div className="text-sm font-medium">Compose Introduction Email</div>
            <div className="grid grid-cols-1 gap-2 text-sm">
              <div>
                <div className="text-xs text-gray-600">To</div>
                <input className="border rounded p-2 w-full" value={composeTo} onChange={(e)=>setComposeTo(e.target.value)} placeholder="email@company.com" />
              </div>
              <div>
                <div className="text-xs text-gray-600">Subject</div>
                <input className="border rounded p-2 w-full" value={composeSubject} onChange={(e)=>setComposeSubject(e.target.value)} />
              </div>
              <div>
                <div className="text-xs text-gray-600">Body</div>
                <textarea className="border rounded p-2 w-full h-40" value={composeBody} onChange={(e)=>setComposeBody(e.target.value)} />
              </div>
            </div>
            <div className="flex flex-wrap gap-2">
              <a className="px-3 py-2 border rounded" href={mailtoHref()}>Open in Email</a>
              <button className="px-3 py-2 border rounded" onClick={()=>navigator.clipboard.writeText(`Subject: ${composeSubject}\n\n${composeBody}`)}>Copy</button>
              <button className="px-3 py-2 border rounded" onClick={downloadLatestResume} disabled={downloading}>Download Resume PDF</button>
              <button className="px-3 py-2 border rounded" onClick={downloadLatestCoverLetter} disabled={downloading}>Download Cover Letter PDF</button>
              <div className="flex-1" />
              <button className="px-3 py-2 border rounded" onClick={()=>setComposeOpen(false)}>Close</button>
            </div>
          </div>
        </div>
      )}
      </CardContent>
    </Card>
  )
}

export function CompanyResearchPanel({ companyName, onResearchComplete, onError }: CompanyResearchPanelProps) {
  return (
    <CompanyResearch
      initialCompanyName={companyName}
      onResearchComplete={onResearchComplete}
      onError={onError}
    />
  )
}
</file>

<file path="src/components/debug-panel.tsx">
'use client'

import { useState, useEffect } from 'react'
import { X, ChevronDown, ChevronUp, AlertTriangle, CheckCircle } from 'lucide-react'

interface DebugLog {
  timestamp: number
  method: string
  status: 'success' | 'error'
  message: string
  data?: any
  rawResponse?: string
  cleanupSteps?: string[]
  error?: string
}

/**
 * Debug Panel Component
 * Displays Perplexity responses and JSON parsing steps for debugging
 * Activated via ?debug=true query parameter
 */
export function DebugPanel() {
  const [isVisible, setIsVisible] = useState(false)
  const [isExpanded, setIsExpanded] = useState(true)
  const [logs, setLogs] = useState<DebugLog[]>([])
  const [filter, setFilter] = useState<'all' | 'errors'>('all')

  useEffect(() => {
    // Check if debug mode is enabled via URL
    const params = new URLSearchParams(window.location.search)
    const debugMode = params.get('debug') === 'true'
    setIsVisible(debugMode)

    // Listen for debug events from the app
    const handleDebugEvent = (event: CustomEvent) => {
      const log: DebugLog = {
        timestamp: Date.now(),
        ...event.detail
      }
      setLogs(prev => [log, ...prev].slice(0, 50)) // Keep last 50 logs
    }

    window.addEventListener('debug-log' as any, handleDebugEvent)
    return () => {
      window.removeEventListener('debug-log' as any, handleDebugEvent)
    }
  }, [])

  // Helper function to call from anywhere in your app
  if (typeof window !== 'undefined') {
    (window as any).debugLog = (detail: Omit<DebugLog, 'timestamp'>) => {
      window.dispatchEvent(new CustomEvent('debug-log', { detail }))
    }
  }

  if (!isVisible) return null

  const filteredLogs = filter === 'all' 
    ? logs 
    : logs.filter(log => log.status === 'error')

  return (
    <div className="fixed bottom-4 right-4 z-[9999] w-[600px] max-w-[90vw]">
      <div className="bg-gray-900 text-green-400 rounded-lg shadow-2xl border border-gray-700 overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between bg-gray-800 px-4 py-2 border-b border-gray-700">
          <div className="flex items-center gap-2">
            <span className="text-sm font-mono font-bold">🔍 DEBUG PANEL</span>
            <span className="text-xs text-gray-400">({filteredLogs.length} logs)</span>
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={() => setFilter(filter === 'all' ? 'errors' : 'all')}
              className="text-xs px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded"
            >
              {filter === 'all' ? 'Show Errors' : 'Show All'}
            </button>
            <button
              onClick={() => setLogs([])}
              className="text-xs px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded"
            >
              Clear
            </button>
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="text-gray-400 hover:text-white"
            >
              {isExpanded ? <ChevronDown size={18} /> : <ChevronUp size={18} />}
            </button>
            <button
              onClick={() => setIsVisible(false)}
              className="text-gray-400 hover:text-white"
            >
              <X size={18} />
            </button>
          </div>
        </div>

        {/* Log Content */}
        {isExpanded && (
          <div className="max-h-[500px] overflow-y-auto p-4 space-y-3 text-xs font-mono">
            {filteredLogs.length === 0 ? (
              <div className="text-center text-gray-500 py-8">
                No debug logs yet. Logs will appear here as you use the app.
              </div>
            ) : (
              filteredLogs.map((log, index) => (
                <LogEntry key={`${log.timestamp}-${index}`} log={log} />
              ))
            )}
          </div>
        )}

        {/* Footer */}
        <div className="bg-gray-800 px-4 py-2 border-t border-gray-700 text-xs text-gray-400">
          Debug mode active. Remove <code className="text-green-400">?debug=true</code> from URL to hide.
        </div>
      </div>
    </div>
  )
}

function LogEntry({ log }: { log: DebugLog }) {
  const [isExpanded, setIsExpanded] = useState(false)
  const timestamp = new Date(log.timestamp).toLocaleTimeString()

  return (
    <div className={`border rounded p-3 ${
      log.status === 'error' 
        ? 'border-red-500/50 bg-red-500/5' 
        : 'border-green-500/50 bg-green-500/5'
    }`}>
      {/* Log Header */}
      <div className="flex items-start justify-between mb-2">
        <div className="flex items-center gap-2">
          {log.status === 'error' ? (
            <AlertTriangle size={14} className="text-red-400" />
          ) : (
            <CheckCircle size={14} className="text-green-400" />
          )}
          <span className={log.status === 'error' ? 'text-red-400' : 'text-green-400'}>
            [{timestamp}] {log.method}
          </span>
        </div>
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="text-gray-400 hover:text-white text-xs"
        >
          {isExpanded ? 'Collapse' : 'Expand'}
        </button>
      </div>

      {/* Log Message */}
      <div className="text-gray-300 mb-2">{log.message}</div>

      {/* Expanded Details */}
      {isExpanded && (
        <div className="space-y-2 mt-3 pt-3 border-t border-gray-700">
          {/* Cleanup Steps */}
          {log.cleanupSteps && log.cleanupSteps.length > 0 && (
            <div>
              <div className="text-blue-400 mb-1">Cleanup Steps:</div>
              <div className="pl-4 text-gray-400">
                {log.cleanupSteps.map((step, i) => (
                  <div key={i}>→ {step}</div>
                ))}
              </div>
            </div>
          )}

          {/* Raw Response */}
          {log.rawResponse && (
            <div>
              <div className="text-yellow-400 mb-1">Raw Response (first 500 chars):</div>
              <pre className="bg-gray-800 p-2 rounded overflow-x-auto text-xs text-gray-300">
                {log.rawResponse.slice(0, 500)}
                {log.rawResponse.length > 500 && '...'}
              </pre>
            </div>
          )}

          {/* Error Details */}
          {log.error && (
            <div>
              <div className="text-red-400 mb-1">Error:</div>
              <pre className="bg-red-900/20 p-2 rounded overflow-x-auto text-xs text-red-300">
                {log.error}
              </pre>
            </div>
          )}

          {/* Additional Data */}
          {log.data && (
            <div>
              <div className="text-purple-400 mb-1">Data:</div>
              <pre className="bg-gray-800 p-2 rounded overflow-x-auto text-xs text-gray-300">
                {JSON.stringify(log.data, null, 2)}
              </pre>
            </div>
          )}
        </div>
      )}
    </div>
  )
}

/**
 * Helper function to add debug logs from anywhere in your app
 * Usage: debugLog({ method: 'jobSearch', status: 'success', message: 'Found 10 jobs' })
 */
export function debugLog(detail: Omit<DebugLog, 'timestamp'>) {
  if (typeof window !== 'undefined') {
    window.dispatchEvent(new CustomEvent('debug-log', { detail }))
  }
}
</file>

<file path="src/components/error-boundaries/dashboard-error-boundary.tsx">
'use client'

import React from 'react'
import { ErrorBoundary } from '../error-boundary'
import { Button } from '../ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
import { AlertTriangle, RefreshCcw, Home } from 'lucide-react'
import { useRouter } from 'next/navigation'

interface DashboardErrorFallbackProps {
  error: Error
  retry: () => void
  errorId: string
}

function DashboardErrorFallback({ error, retry, errorId }: DashboardErrorFallbackProps) {
  const router = useRouter()

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <Card className="max-w-lg w-full">
        <CardHeader>
          <div className="flex items-center gap-3 mb-2">
            <div className="h-12 w-12 rounded-full bg-destructive/10 flex items-center justify-center">
              <AlertTriangle className="h-6 w-6 text-destructive" />
            </div>
            <div>
              <CardTitle className="text-2xl">Dashboard Error</CardTitle>
              <CardDescription className="text-sm text-muted-foreground">
                Error ID: {errorId}
              </CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-muted p-4 rounded-lg">
            <p className="text-sm font-medium mb-2">What happened?</p>
            <p className="text-sm text-muted-foreground">{error.message}</p>
          </div>

          <div className="bg-muted/50 p-4 rounded-lg border border-border">
            <p className="text-sm font-medium mb-2">💡 Suggestions:</p>
            <ul className="text-sm text-muted-foreground space-y-1 list-disc list-inside">
              <li>Try refreshing the page</li>
              <li>Clear your browser cache</li>
              <li>Check your internet connection</li>
              <li>Contact support if the issue persists</li>
            </ul>
          </div>

          <div className="flex gap-3">
            <Button onClick={retry} className="flex-1">
              <RefreshCcw className="mr-2 h-4 w-4" />
              Retry
            </Button>
            <Button onClick={() => router.push('/')} variant="outline" className="flex-1">
              <Home className="mr-2 h-4 w-4" />
              Go Home
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export function DashboardErrorBoundary({ children }: { children: React.ReactNode }) {
  return (
    <ErrorBoundary
      fallback={DashboardErrorFallback}
      isolate={false} // Allow errors to propagate if needed
    >
      {children}
    </ErrorBoundary>
  )
}
</file>

<file path="src/components/error-boundaries/job-search-error-boundary.tsx">
'use client'

import React from 'react'
import { ErrorBoundary } from '../error-boundary'
import { Button } from '../ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
import { SearchX, RefreshCcw, ArrowLeft } from 'lucide-react'
import { useRouter } from 'next/navigation'

interface JobSearchErrorFallbackProps {
  error: Error
  retry: () => void
  errorId: string
}

function JobSearchErrorFallback({ error, retry, errorId }: JobSearchErrorFallbackProps) {
  const router = useRouter()

  return (
    <div className="flex items-center justify-center min-h-[500px] p-4">
      <Card className="max-w-lg w-full">
        <CardHeader>
          <div className="flex items-center gap-3 mb-2">
            <div className="h-12 w-12 rounded-full bg-warning/10 flex items-center justify-center">
              <SearchX className="h-6 w-6 text-warning" />
            </div>
            <div>
              <CardTitle>Job Search Error</CardTitle>
              <CardDescription className="text-xs">Error ID: {errorId}</CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-muted p-3 rounded-md">
            <p className="text-sm font-medium mb-1">What went wrong:</p>
            <p className="text-xs text-muted-foreground">{error.message}</p>
          </div>

          <div className="bg-primary/5 p-3 rounded-md border border-primary/10">
            <p className="text-sm font-medium mb-2">💡 Quick Fixes:</p>
            <ul className="text-xs text-muted-foreground space-y-1 list-disc list-inside">
              <li>Try simplifying your search terms</li>
              <li>Check your internet connection</li>
              <li>Wait a moment and try again</li>
              <li>Contact support with the error ID above</li>
            </ul>
          </div>

          <div className="flex gap-2">
            <Button onClick={retry} size="sm" className="flex-1">
              <RefreshCcw className="mr-2 h-4 w-4" />
              Retry Search
            </Button>
            <Button onClick={() => router.back()} size="sm" variant="outline">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Go Back
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export function JobSearchErrorBoundary({ children }: { children: React.ReactNode }) {
  return (
    <ErrorBoundary
      fallback={JobSearchErrorFallback}
      isolate={true} // Isolate errors to this section only
    >
      {children}
    </ErrorBoundary>
  )
}
</file>

<file path="src/components/error-boundaries/resume-error-boundary.tsx">
'use client'

import React from 'react'
import { ErrorBoundary } from '../error-boundary'
import { Button } from '../ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
import { FileX, RefreshCcw, Upload } from 'lucide-react'
import { useRouter } from 'next/navigation'

interface ResumeErrorFallbackProps {
  error: Error
  retry: () => void
  errorId: string
}

function ResumeErrorFallback({ error, retry, errorId }: ResumeErrorFallbackProps) {
  const router = useRouter()

  return (
    <div className="flex items-center justify-center min-h-[400px] p-4">
      <Card className="max-w-md w-full">
        <CardHeader>
          <div className="flex items-center gap-3 mb-2">
            <div className="h-12 w-12 rounded-full bg-destructive/10 flex items-center justify-center">
              <FileX className="h-6 w-6 text-destructive" />
            </div>
            <div>
              <CardTitle>Resume Processing Error</CardTitle>
              <CardDescription className="text-xs">Error ID: {errorId}</CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-muted p-3 rounded-md">
            <p className="text-sm font-medium mb-1">Error Details:</p>
            <p className="text-xs text-muted-foreground">{error.message}</p>
          </div>

          <div className="bg-accent/10 p-3 rounded-md border border-accent/20">
            <p className="text-sm font-medium mb-2 text-accent-foreground">💡 Try This:</p>
            <ul className="text-xs text-muted-foreground space-y-1 list-disc list-inside">
              <li>Ensure your PDF is not corrupted or password-protected</li>
              <li>Try converting your resume to a standard PDF format</li>
              <li>Upload a smaller file size (&lt; 10MB)</li>
              <li>Use the "Paste Text" option as an alternative</li>
            </ul>
          </div>

          <div className="flex gap-2">
            <Button onClick={retry} size="sm" className="flex-1">
              <RefreshCcw className="mr-2 h-4 w-4" />
              Try Again
            </Button>
            <Button onClick={() => router.push('/career-finder/resume')} size="sm" variant="outline" className="flex-1">
              <Upload className="mr-2 h-4 w-4" />
              Upload New
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export function ResumeErrorBoundary({ children }: { children: React.ReactNode }) {
  return (
    <ErrorBoundary
      fallback={ResumeErrorFallback}
      isolate={true} // Isolate errors to prevent full page crashes
    >
      {children}
    </ErrorBoundary>
  )
}
</file>

<file path="src/components/error-boundary.tsx">
'use client'
import React from 'react'
import { logger, securityLogger } from '@/lib/logger'
import { errorTracker } from '@/lib/error-tracking'

interface Props {
  children: React.ReactNode
  fallback?: React.ComponentType<{ error: Error; retry: () => void; errorId: string }>
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void
  isolate?: boolean // If true, error won't propagate to parent boundaries
}

interface State {
  hasError: boolean
  error?: Error
  errorId?: string
  errorCount: number
}

export class ErrorBoundary extends React.Component<Props, State> {
  private resetTimeout?: NodeJS.Timeout

  constructor(props: Props) {
    super(props)
    this.state = { 
      hasError: false,
      errorCount: 0
    }
  }

  static getDerivedStateFromError(error: Error): Partial<State> {
    // Generate unique error ID for tracking
    const errorId = `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    
    return { 
      hasError: true, 
      error,
      errorId
    }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    const { errorId, errorCount } = this.state
    
    // Track error in error tracking service
    errorTracker.trackError(error, {
      context: 'react-error-boundary',
      severity: 'high',
      tags: ['ui', 'react'],
      metadata: {
        errorId,
        errorCount,
        componentStack: errorInfo.componentStack
      }
    })
    
    // Log error with full context
    logger.error('React Error Boundary caught error', {
      errorId,
      errorName: error.name,
      errorMessage: error.message,
      errorStack: error.stack,
      componentStack: errorInfo.componentStack,
      errorCount: errorCount + 1,
      timestamp: new Date().toISOString()
    })

    // Update error count
    this.setState(prev => ({
      errorCount: prev.errorCount + 1
    }))

    // Security logging for suspicious patterns
    if (error.message.includes('script') || error.message.includes('injection')) {
      securityLogger.securityEvent('Suspicious error pattern detected', 'high', {
        errorId,
        errorMessage: error.message,
        componentStack: errorInfo.componentStack
      })
    }

    // Send to external error tracking (Sentry, etc.)
    this.reportToExternalService(error, errorInfo, errorId)

    // Call custom error handler if provided
    if (this.props.onError) {
      this.props.onError(error, errorInfo)
    }

    // Prevent error cascade - reset after 5 seconds if error persists
    if (errorCount > 3) {
      logger.warn('Error boundary hit multiple times, forcing reload', {
        errorId,
        errorCount
      })
      
      if (this.resetTimeout) {
        clearTimeout(this.resetTimeout)
      }
      
      this.resetTimeout = setTimeout(() => {
        window.location.reload()
      }, 5000)
    }
  }

  private reportToExternalService(error: Error, errorInfo: React.ErrorInfo, errorId?: string) {
    // Sentry integration
    if (typeof window !== 'undefined' && (window as any).Sentry) {
      (window as any).Sentry.captureException(error, {
        contexts: {
          react: {
            componentStack: errorInfo.componentStack,
            errorId
          }
        }
      })
    }

    // Custom error reporting endpoint
    if (process.env.NEXT_PUBLIC_ERROR_REPORTING_ENDPOINT) {
      fetch(process.env.NEXT_PUBLIC_ERROR_REPORTING_ENDPOINT, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          errorId,
          name: error.name,
          message: error.message,
          stack: error.stack,
          componentStack: errorInfo.componentStack,
          url: window.location.href,
          userAgent: navigator.userAgent,
          timestamp: new Date().toISOString()
        })
      }).catch(err => {
        console.error('Failed to report error:', err)
      })
    }
  }

  componentWillUnmount() {
    if (this.resetTimeout) {
      clearTimeout(this.resetTimeout)
    }
  }

  private handleRetry = () => {
    logger.info('User initiated error boundary retry', {
      errorId: this.state.errorId
    })
    
    this.setState({ 
      hasError: false,
      error: undefined,
      errorId: undefined
    })
  }

  render() {
    if (this.state.hasError) {
      const Fallback = this.props.fallback || DefaultErrorFallback
      return (
        <Fallback 
          error={this.state.error!} 
          retry={this.handleRetry}
          errorId={this.state.errorId!}
        />
      )
    }

    return this.props.children
  }
}

const DefaultErrorFallback = ({ 
  error, 
  retry, 
  errorId 
}: { 
  error: Error
  retry: () => void
  errorId: string
}) => {
  const isDevelopment = process.env.NODE_ENV === 'development'

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 p-4">
      <div className="max-w-2xl w-full bg-card shadow-2xl rounded-xl overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-red-500 to-red-600 p-6 text-white">
          <div className="flex items-start gap-4">
            <div className="flex-shrink-0">
              <svg className="w-8 h-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
            <div className="flex-1">
              <h2 className="text-2xl font-bold mb-1">Something went wrong</h2>
              <p className="text-red-100 text-sm">
                We apologize for the inconvenience. Our team has been notified.
              </p>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-4">
          {/* Error Message */}
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <h3 className="text-sm font-semibold text-red-800 mb-2">Error Details</h3>
            <p className="text-red-700 text-sm font-mono break-words">
              {error.message || 'An unexpected error occurred'}
            </p>
          </div>

          {/* Error ID */}
          <div className="bg-gray-50 border border-border rounded-lg p-4">
            <h3 className="text-xs font-semibold text-gray-600 mb-1">Error ID (for support)</h3>
            <code className="text-xs text-gray-800 font-mono select-all">
              {errorId}
            </code>
          </div>

          {/* Stack Trace (Development Only) */}
          {isDevelopment && error.stack && (
            <details className="bg-gray-900 text-gray-100 rounded-lg overflow-hidden">
              <summary className="cursor-pointer p-4 hover:bg-gray-800 font-semibold text-sm">
                Stack Trace (Development)
              </summary>
              <pre className="p-4 text-xs overflow-x-auto">
                <code>{error.stack}</code>
              </pre>
            </details>
          )}

          {/* Actions */}
          <div className="flex flex-col sm:flex-row gap-3 pt-2">
            <button
              onClick={retry}
              className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-6 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
            >
              Try Again
            </button>
            <button
              onClick={() => window.location.href = '/'}
              className="flex-1 bg-gray-200 text-gray-700 py-3 px-6 rounded-lg font-semibold hover:bg-gray-300 transition-all duration-200"
            >
              Go to Home
            </button>
          </div>

          {/* Help Text */}
          <div className="text-center text-sm text-gray-500 pt-4">
            <p>If this problem persists, please contact support with the Error ID above.</p>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/features-section.tsx">
'use client'

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import {
  FileText,
  Search,
  Zap,
  Users,
  BarChart3,
  Mail,
  Shield,
  Clock
} from 'lucide-react'

const features = [
  {
    icon: FileText,
    title: 'AI Resume Customization',
    description: 'Upload your resume and let AI tailor it to specific job descriptions. Our system analyzes keywords, optimizes for ATS, and highlights relevant experience.',
    badge: 'Most Popular',
    color: 'text-blue-600',
  },
  {
    icon: Search,
    title: 'Intelligent Job Analysis',
    description: 'Paste any job description and get instant analysis of key requirements, preferred skills, and company culture indicators.',
    badge: null,
    color: 'text-green-600',
  },
  {
    icon: Users,
    title: 'Company Research Hub',
    description: 'Get comprehensive company insights from LinkedIn, Glassdoor, and social media. Understand culture, benefits, and recent developments.',
    badge: 'New',
    color: 'text-purple-600',
  },
  {
    icon: Mail,
    title: 'Cover Letter Generation',
    description: 'AI-crafted cover letters that incorporate company research and demonstrate genuine interest in the role and organization.',
    badge: null,
    color: 'text-orange-600',
  },
  {
    icon: BarChart3,
    title: 'Application Tracking',
    description: 'Track all your job applications in one place. Monitor status, set follow-up reminders, and analyze your job search progress.',
    badge: null,
    color: 'text-red-600',
  },
  {
    icon: Zap,
    title: 'Follow-up Automation',
    description: 'Generate personalized follow-up emails and LinkedIn messages. Never miss an opportunity to stay top-of-mind with employers.',
    badge: 'Pro',
    color: 'text-yellow-600',
  },
  {
    icon: Shield,
    title: 'Privacy & Security',
    description: 'Your data is encrypted and secure. We never share your information with employers or third parties.',
    badge: null,
    color: 'text-indigo-600',
  },
  {
    icon: Clock,
    title: 'Time-Saving Workflow',
    description: 'Streamlined process from resume upload to application submission. Spend less time on applications, more time on interviews.',
    badge: null,
    color: 'text-teal-600',
  },
]

export function FeaturesSection() {
  return (
    <section className="py-24 bg-[#2B2B2B]">
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        {/* BEFORE/AFTER METRICS - NEW! */}
        <div className="mx-auto max-w-4xl mb-20">
          <div className="text-center mb-10">
            <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl mb-2">
              Real Results from Real Job Seekers
            </h2>
            <p className="text-lg text-white/70">
              See the dramatic difference Career Lever AI makes
            </p>
          </div>
          
          <div className="grid md:grid-cols-2 gap-8">
            {/* WITHOUT Career Lever AI */}
            <div className="bg-red-50 border-2 border-red-200 rounded-2xl p-8">
              <div className="text-center mb-6">
                <div className="inline-flex items-center justify-center w-16 h-16 bg-red-100 rounded-full mb-4">
                  <span className="text-3xl">😓</span>
                </div>
                <h3 className="text-xl font-bold text-red-900 mb-2">Without Career Lever AI</h3>
              </div>
              <ul className="space-y-4">
                <li className="flex items-start">
                  <span className="text-red-500 font-bold mr-3">❌</span>
                  <div>
                    <div className="font-semibold text-foreground">50+ applications = 2 interviews</div>
                    <div className="text-sm text-gray-600">4% response rate</div>
                  </div>
                </li>
                <li className="flex items-start">
                  <span className="text-red-500 font-bold mr-3">❌</span>
                  <div>
                    <div className="font-semibold text-foreground">4 hours per application</div>
                    <div className="text-sm text-gray-600">200+ hours wasted</div>
                  </div>
                </li>
                <li className="flex items-start">
                  <span className="text-red-500 font-bold mr-3">❌</span>
                  <div>
                    <div className="font-semibold text-foreground">Generic resumes ignored</div>
                    <div className="text-sm text-gray-600">15% ATS pass rate</div>
                  </div>
                </li>
                <li className="flex items-start">
                  <span className="text-red-500 font-bold mr-3">❌</span>
                  <div>
                    <div className="font-semibold text-foreground">Missed follow-ups</div>
                    <div className="text-sm text-gray-600">Lost opportunities</div>
                  </div>
                </li>
              </ul>
            </div>

            {/* WITH Career Lever AI */}
            <div className="bg-green-50 border-2 border-green-400 rounded-2xl p-8 relative">
              <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                <Badge className="bg-green-600 text-white px-4 py-1 text-sm font-bold">
                  85% SUCCESS RATE
                </Badge>
              </div>
              <div className="text-center mb-6 mt-2">
                <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
                  <span className="text-3xl">🎯</span>
                </div>
                <h3 className="text-xl font-bold text-green-900 mb-2">With Career Lever AI</h3>
              </div>
              <ul className="space-y-4">
                <li className="flex items-start">
                  <span className="text-green-600 font-bold mr-3">✅</span>
                  <div>
                    <div className="font-semibold text-foreground">15 applications = 8 interviews</div>
                    <div className="text-sm text-gray-600">53% response rate (13x better!)</div>
                  </div>
                </li>
                <li className="flex items-start">
                  <span className="text-green-600 font-bold mr-3">✅</span>
                  <div>
                    <div className="font-semibold text-foreground">20 minutes per application</div>
                    <div className="text-sm text-gray-600">5 hours total (12x faster!)</div>
                  </div>
                </li>
                <li className="flex items-start">
                  <span className="text-green-600 font-bold mr-3">✅</span>
                  <div>
                    <div className="font-semibold text-foreground">ATS-optimized resumes</div>
                    <div className="text-sm text-gray-600">85% ATS pass rate (5.6x better!)</div>
                  </div>
                </li>
                <li className="flex items-start">
                  <span className="text-green-600 font-bold mr-3">✅</span>
                  <div>
                    <div className="font-semibold text-foreground">Automated follow-ups</div>
                    <div className="text-sm text-gray-600">Never miss opportunities</div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </div>

        <div className="mx-auto max-w-3xl text-center mb-16">
          <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl">
            Everything you need to land your dream job
          </h2>
          <p className="mt-4 text-lg text-gray-600">
            Our AI-powered platform provides comprehensive tools to optimize every aspect of your job search.
          </p>
        </div>

        <div className="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-8 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-2 xl:grid-cols-4">
          {features.map((feature, index) => (
            <Card key={index} className="relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-shadow duration-300">
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <div className={`rounded-lg p-3 ${feature.color.replace('text-', 'bg-').replace('600', '100')}`}>
                    <feature.icon className={`h-6 w-6 ${feature.color}`} />
                  </div>
                  {feature.badge && (
                    <Badge variant="secondary" className="text-xs">
                      {feature.badge}
                    </Badge>
                  )}
                </div>
                <CardTitle className="text-xl">{feature.title}</CardTitle>
              </CardHeader>
              <CardContent>
                <CardDescription className="text-base leading-relaxed">
                  {feature.description}
                </CardDescription>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* MOBILE APP FEATURES - NEW! */}
        <div className="mx-auto max-w-4xl mt-32">
          <div className="text-center mb-12">
            <Badge className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-1 mb-4">
              📱 Mobile Apps
            </Badge>
            <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-4">
              Job Search on the Go
            </h2>
            <p className="text-lg text-gray-600">
              Apply to jobs from anywhere with our powerful mobile apps
            </p>
          </div>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card className="border-2 border-blue-100 hover:border-blue-300 transition-colors">
              <CardContent className="p-6 text-center">
                <div className="text-4xl mb-4">📸</div>
                <h3 className="font-bold text-foreground mb-2">Scan Job Postings</h3>
                <p className="text-sm text-gray-600">Take a photo of any job posting and instantly apply with AI-optimized resume</p>
              </CardContent>
            </Card>
            
            <Card className="border-2 border-purple-100 hover:border-purple-300 transition-colors">
              <CardContent className="p-6 text-center">
                <div className="text-4xl mb-4">🔔</div>
                <h3 className="font-bold text-foreground mb-2">Push Notifications</h3>
                <p className="text-sm text-gray-600">Get instant alerts for interview prep, follow-ups, and application updates</p>
              </CardContent>
            </Card>
            
            <Card className="border-2 border-green-100 hover:border-green-300 transition-colors">
              <CardContent className="p-6 text-center">
                <div className="text-4xl mb-4">📍</div>
                <h3 className="font-bold text-foreground mb-2">Location-Based Jobs</h3>
                <p className="text-sm text-gray-600">Find and apply to local opportunities while commuting or traveling</p>
              </CardContent>
            </Card>
            
            <Card className="border-2 border-orange-100 hover:border-orange-300 transition-colors">
              <CardContent className="p-6 text-center">
                <div className="text-4xl mb-4">💾</div>
                <h3 className="font-bold text-foreground mb-2">Offline Mode</h3>
                <p className="text-sm text-gray-600">Edit resumes and prepare applications even without internet connection</p>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* PRICING PREVIEW - NEW! */}
        <div className="mx-auto max-w-5xl mt-32 mb-16">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-4">
              Simple, Transparent Pricing
            </h2>
            <p className="text-lg text-gray-600">
              Start free, upgrade when you're ready
            </p>
          </div>
          
          <div className="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
            {/* FREE TIER */}
            <Card className="border-2 border-border hover:shadow-xl transition-all">
              <CardHeader className="bg-gray-50 pb-4">
                <div className="text-center">
                  <CardTitle className="text-2xl mb-2">Free Forever</CardTitle>
                  <div className="text-4xl font-bold text-foreground mb-2">$0</div>
                  <p className="text-sm text-gray-600">Perfect for getting started</p>
                </div>
              </CardHeader>
              <CardContent className="p-6">
                <ul className="space-y-3">
                  <li className="flex items-start">
                    <span className="text-green-500 mr-2">✅</span>
                    <span className="text-gray-700"><strong>3 AI resume customizations</strong> per month</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-green-500 mr-2">✅</span>
                    <span className="text-gray-700"><strong>10 company research reports</strong></span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-green-500 mr-2">✅</span>
                    <span className="text-gray-700"><strong>Basic application tracking</strong></span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-green-500 mr-2">✅</span>
                    <span className="text-gray-700"><strong>ATS optimization</strong></span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-green-500 mr-2">✅</span>
                    <span className="text-gray-700"><strong>Job search tools</strong></span>
                  </li>
                </ul>
              </CardContent>
            </Card>

            {/* PRO TIER */}
            <Card className="border-2 border-blue-400 hover:shadow-2xl transition-all relative">
              <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                <Badge className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-2 text-sm font-bold">
                  🔥 MOST POPULAR
                </Badge>
              </div>
              <CardHeader className="bg-gradient-to-br from-blue-50 to-purple-50 pb-4 pt-8">
                <div className="text-center">
                  <CardTitle className="text-2xl mb-2">Pro</CardTitle>
                  <div className="text-4xl font-bold text-blue-600 mb-2">$9.99<span className="text-lg text-gray-600">/mo</span></div>
                  <p className="text-sm text-gray-600">Land your dream job faster</p>
                </div>
              </CardHeader>
              <CardContent className="p-6">
                <ul className="space-y-3">
                  <li className="flex items-start">
                    <span className="text-blue-500 mr-2">⚡</span>
                    <span className="text-gray-700"><strong>Unlimited AI customizations</strong></span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-blue-500 mr-2">⚡</span>
                    <span className="text-gray-700"><strong>Unlimited company research</strong></span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-blue-500 mr-2">⚡</span>
                    <span className="text-gray-700"><strong>Priority ATS optimization</strong></span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-blue-500 mr-2">⚡</span>
                    <span className="text-gray-700"><strong>LinkedIn integration</strong></span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-blue-500 mr-2">⚡</span>
                    <span className="text-gray-700"><strong>Advanced analytics</strong></span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-blue-500 mr-2">⚡</span>
                    <span className="text-gray-700"><strong>Interview prep AI</strong></span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-blue-500 mr-2">⚡</span>
                    <span className="text-gray-700"><strong>Priority support</strong></span>
                  </li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="src/components/hero-section-v2.tsx">
'use client'

import { useState, useEffect } from 'react'
import { signIn } from 'next-auth/react'
import { ArrowRight } from 'lucide-react'

// Company logos data for floating pills - MORE RECOGNIZABLE COMPANIES
const COMPANY_PILLS = [
  { name: 'Netflix', logo: '📺', color: '#E50914', delay: 0 },
  { name: 'Amazon', logo: '📦', color: '#FF9900', delay: 0.5 },
  { name: 'Spotify', logo: '🎵', color: '#1DB954', delay: 1 },
  { name: 'LinkedIn', logo: '💼', color: '#0077B5', delay: 1.5 },
  { name: 'Uber', logo: '🚗', color: '#000000', delay: 2 },
  { name: 'Airbnb', logo: '🏠', color: '#FF5A5F', delay: 2.5 },
  { name: 'Meta', logo: '📘', color: '#0075FF', delay: 3 },
  { name: 'Google', logo: '🔍', color: '#FFFFFF', delay: 3.5, textColor: '#000000' },
  { name: 'Apple', logo: '🍎', color: '#FFFFFF', delay: 4, textColor: '#000000' },
  { name: 'Tesla', logo: '⚡', color: '#E82127', delay: 4.5 },
  { name: 'Goldman', logo: '💰', color: '#1F1F1F', delay: 5, textColor: '#FFFFFF' },
  { name: 'PepsiCo', logo: '🥤', color: 'linear-gradient(135deg, #004B93 0%, #E32934 100%)', delay: 5.5 },
]

// Pill positions (scattered layout) - MORE POSITIONS FOR MORE COMPANIES
const PILL_POSITIONS = [
  { top: '20%', left: '5%', rotation: -8 },
  { top: '25%', right: '10%', rotation: 5 },
  { top: '40%', left: '12%', rotation: -3 },
  { bottom: '40%', left: '3%', rotation: 7 },
  { top: '50%', right: '6%', rotation: -5 },
  { bottom: '30%', left: '15%', rotation: 4 },
  { bottom: '35%', right: '12%', rotation: -6 },
  { top: '60%', left: '20%', rotation: 3 },
  { bottom: '50%', right: '3%', rotation: -4 },
  { top: '70%', right: '18%', rotation: 6 },
  { bottom: '20%', left: '25%', rotation: -7 },
  { top: '35%', right: '25%', rotation: 8 },
]

export function HeroSectionV2() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  const handleGetStarted = async () => {
    const base = typeof window !== 'undefined' ? window.location.origin : ''
    const target = `${base}/auth/signin?callbackUrl=${encodeURIComponent(`${base}/dashboard`)}`
    window.location.href = target
  }

  const handleGoogle = async () => {
    try {
      await signIn('google', { callbackUrl: '/dashboard' })
    } catch {}
  }

  return (
    <section className="landing-page relative min-h-screen overflow-hidden flex flex-col items-center justify-center px-6 py-12">
      {/* Background with theme-aware gradients */}
      <div 
        className="absolute inset-0 -z-10 bg-background"
        style={{
          background: `
            radial-gradient(circle at 20% 30%, hsl(var(--primary) / 0.08) 0%, transparent 50%),
            radial-gradient(circle at 80% 70%, hsl(var(--secondary) / 0.08) 0%, transparent 50%),
            hsl(var(--background))
          `
        }}
      />

      {/* Scattered Company Pills */}
      {mounted && (
        <div className="company-pills absolute inset-0 pointer-events-none">
          {COMPANY_PILLS.map((pill, index) => {
            const position = PILL_POSITIONS[index]
            return (
              <div
                key={pill.name}
                className="company-pill absolute flex items-center gap-2 px-5 py-3 rounded-full shadow-lg pointer-events-auto cursor-pointer transition-all duration-300 hover:scale-110 hover:shadow-xl"
                style={{
                  ...position,
                  background: pill.color,
                  color: pill.textColor || '#FFFFFF',
                  transform: `rotate(${position.rotation}deg)`,
                  animation: `float 6s ease-in-out infinite`,
                  animationDelay: `${pill.delay}s`,
                } as React.CSSProperties}
              >
                <span className="text-xl">{pill.logo}</span>
                <span className="text-sm font-medium">{pill.name}</span>
              </div>
            )
          })}
        </div>
      )}

      {/* Hero Content */}
      <div className="landing-hero relative z-10 text-center max-w-2xl mx-auto">
        <h1 className="text-5xl md:text-6xl font-bold text-white leading-tight mb-6">
          Find Your Dream Job{' '}
          <span className="inline-block animate-bounce-slow">🚀</span>
        </h1>
        <p className="text-xl font-bold text-white mb-8 leading-relaxed">
          AI-powered resume optimization, company research, and application tracking—all in one platform designed for modern job seekers.
        </p>

        {/* CTA Button */}
        <button
          onClick={handleGetStarted}
          className="landing-cta group inline-flex items-center gap-3 px-12 py-4 bg-gradient-to-r from-[#5424FD] to-[#4318E8] text-white font-bold text-lg rounded-full shadow-lg hover:shadow-2xl transition-all duration-300 hover:scale-105 active:scale-95 relative overflow-hidden"
        >
          <span className="relative z-10">Find Your Dream Job</span>
          <ArrowRight className="w-5 h-5 relative z-10 group-hover:translate-x-1 transition-transform" />
          
          {/* Shine effect */}
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
        </button>

        <p className="mt-6 text-sm font-semibold text-white/70">
          Join 10,000+ job seekers who landed their dream roles
        </p>
      </div>

      {/* SSO Options */}
      <div className="relative z-10 mt-12 max-w-md w-full">
        <div className="text-center mb-4">
          <p className="text-xs font-semibold text-white/60 uppercase tracking-wider">Or continue with</p>
        </div>
        <div className="flex items-center justify-center gap-4">
          <button
            onClick={handleGoogle}
            className="glass-card px-6 py-3 rounded-xl hover:scale-105 transition-all duration-300 flex items-center gap-2"
          >
            <svg className="w-5 h-5" viewBox="0 0 24 24">
              <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
              <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            <span className="text-sm font-medium text-white">Google</span>
          </button>
          <button
            onClick={() => signIn('apple', { callbackUrl: '/dashboard' })}
            className="glass-card px-6 py-3 rounded-xl hover:scale-105 transition-all duration-300 flex items-center gap-2"
          >
            <svg className="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor">
              <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
            </svg>
            <span className="text-sm font-medium text-white">Apple</span>
          </button>
          <button
            onClick={() => signIn('azure-ad', { callbackUrl: '/dashboard' })}
            className="glass-card px-6 py-3 rounded-xl hover:scale-105 transition-all duration-300 flex items-center gap-2"
          >
            <svg className="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor">
              <path d="M11.5,3L2,5.5V11H11.5V3M22,3L12.5,5.5V11H22V3M11.5,13H2V18.5L11.5,21V13M12.5,13V21L22,18.5V13H12.5Z"/>
            </svg>
            <span className="text-sm font-medium text-white">Microsoft</span>
          </button>
        </div>
      </div>

      <style jsx>{`
        @keyframes float {
          0%, 100% { 
            transform: translateY(0); 
          }
          50% { 
            transform: translateY(-20px); 
          }
        }

        @keyframes bounce-slow {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-10px); }
        }

        .animate-bounce-slow {
          animation: bounce-slow 2s ease-in-out infinite;
        }

        .glass-card {
          background: rgba(255, 255, 255, 0.1);
          backdrop-filter: blur(10px);
          border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .glass-card:hover {
          background: rgba(255, 255, 255, 0.15);
          border-color: rgba(255, 255, 255, 0.3);
        }

        @media (max-width: 768px) {
          .company-pill {
            display: none;
          }
        }
      `}</style>
    </section>
  )
}
</file>

<file path="src/components/hero-section.tsx">
'use client'

import { useState } from 'react'
import Link from 'next/link'
import { signIn } from 'next-auth/react'
import { Sparkles, Target, Zap, Users } from 'lucide-react'

export function HeroSection() {
  const [email, setEmail] = useState('')

  const handleGetStarted = async () => {
    // Send users to dedicated auth page with their email prefilled
    const callbackUrl = encodeURIComponent('/dashboard')
    const base = typeof window !== 'undefined' ? window.location.origin : ''
    const target = `${base}/auth/signin?callbackUrl=${encodeURIComponent(`${base}/dashboard`)}${email ? `&email=${encodeURIComponent(email)}` : ''}`
    window.location.href = target
  }

  const handleGoogle = async () => {
    try {
      await signIn('google', { callbackUrl: '/dashboard' })
    } catch {}
  }

  return (
    <section className="relative overflow-hidden bg-gradient-to-br from-blue-600 via-purple-600 to-blue-800">
      {/* Background Pattern */}
      <div className="absolute inset-0 bg-black/10">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='4'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }} />
      </div>

      <div className="relative mx-auto max-w-7xl px-4 py-24 sm:px-6 sm:py-32 lg:px-8">
        {/* Top Nav with brand + auth actions (visible on all viewports) */}
        <div className="mb-10">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <img src="/icon-192.svg" alt="Career Lever AI" className="h-8 w-8" />
              <span className="text-white font-semibold text-lg">Career Lever AI</span>
            </div>
            <div className="flex items-center gap-3">
              <Link
                href={`/auth/signin${email ? `?email=${encodeURIComponent(email)}` : ''}`}
                className="text-white/90 hover:text-white text-sm font-medium"
              >
                Sign in
              </Link>
              <Link
                href={`/auth/signup${email ? `?email=${encodeURIComponent(email)}` : ''}`}
                className="btn btn-secondary text-white border-white/20 hover:bg-card/20"
              >
                Sign up
              </Link>
            </div>
          </div>
        </div>
        <div className="mx-auto max-w-3xl text-center">
          {/* Badge */}
          <div className="badge badge-accent mb-8 bg-white/10 text-white hover:bg-card/20">
            <Sparkles className="mr-2 h-4 w-4" />
            AI-Powered Job Application Assistant
          </div>

          {/* Main Heading */}
          <h1 className="text-4xl font-extrabold tracking-tight text-white sm:text-6xl lg:text-7xl">
            <span className="block">Career Lever AI</span>
            <span className="block bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">
              Land Your Dream Job with AI-Powered Tools
            </span>
          </h1>

          {/* Subheading */}
          <p className="mx-auto mt-6 max-w-2xl text-lg leading-8 text-blue-100 sm:text-xl">
            Customize your resume and cover letters with AI, research companies instantly,
            and track your applications—all in one powerful platform designed for job seekers.
          </p>

          {/* APP STORE BADGES - NEW! */}
          <div className="mx-auto mt-10 flex flex-col items-center gap-4">
            <p className="text-sm font-semibold text-white/90 uppercase tracking-wider">
              Download on Your Platform
            </p>
            <div className="flex flex-wrap justify-center gap-4">
              {/* App Store Badge */}
              <a 
                href="#" 
                className="inline-flex items-center gap-2 px-6 py-3 bg-black rounded-xl hover:bg-gray-800 transition-all hover:scale-105"
                aria-label="Download on App Store"
              >
                <svg className="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
                </svg>
                <div className="text-left">
                  <div className="text-xs text-white/70">Download on the</div>
                  <div className="text-sm font-semibold text-white">App Store</div>
                </div>
              </a>

              {/* Google Play Badge */}
              <a 
                href="#" 
                className="inline-flex items-center gap-2 px-6 py-3 bg-black rounded-xl hover:bg-gray-800 transition-all hover:scale-105"
                aria-label="Get it on Google Play"
              >
                <svg className="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z"/>
                </svg>
                <div className="text-left">
                  <div className="text-xs text-white/70">GET IT ON</div>
                  <div className="text-sm font-semibold text-white">Google Play</div>
                </div>
              </a>

              {/* Microsoft Store Badge */}
              <a 
                href="#" 
                className="inline-flex items-center gap-2 px-6 py-3 bg-black rounded-xl hover:bg-gray-800 transition-all hover:scale-105"
                aria-label="Get it from Microsoft"
              >
                <svg className="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M11.5,3L2,5.5V11H11.5V3M22,3L12.5,5.5V11H22V3M11.5,13H2V18.5L11.5,21V13M12.5,13V21L22,18.5V13H12.5Z"/>
                </svg>
                <div className="text-left">
                  <div className="text-xs text-white/70">Get it from</div>
                  <div className="text-sm font-semibold text-white">Microsoft</div>
                </div>
              </a>
            </div>
          </div>

          {/* CTA Section */}
          <div className="mx-auto mt-10 max-w-md">
            <div className="text-center mb-6">
              <p className="text-sm text-white/70 uppercase tracking-wider font-semibold mb-4">
                Or Sign Up on Web
              </p>
            </div>
            
            {/* SSO Buttons */}
            <div className="space-y-3">
              <button
                onClick={handleGoogle}
                className="btn btn-secondary w-full bg-card text-gray-700 hover:bg-gray-50 flex items-center justify-center gap-3"
              >
                <svg className="w-5 h-5" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Google
              </button>

              <button
                onClick={() => signIn('apple', { callbackUrl: '/dashboard' })}
                className="btn w-full bg-black text-white hover:bg-gray-900 flex items-center justify-center gap-3"
              >
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
                </svg>
                Continue with Apple
              </button>

              <button
                onClick={() => signIn('azure-ad', { callbackUrl: '/dashboard' })}
                className="btn w-full bg-[#00A4EF] text-white hover:bg-[#008BCF] flex items-center justify-center gap-3"
              >
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M11.5,3L2,5.5V11H11.5V3M22,3L12.5,5.5V11H22V3M11.5,13H2V18.5L11.5,21V13M12.5,13V21L22,18.5V13H12.5Z"/>
                </svg>
                Continue with Microsoft
              </button>
            </div>

            <div className="mt-6 text-center">
              <Link href={`/auth/signup${email ? `?email=${encodeURIComponent(email)}` : ''}`} className="text-sm text-blue-100 hover:text-white underline">
                Or sign up with email
              </Link>
            </div>

            <p className="mt-6 text-center text-xs text-blue-200">
              🚀 Join 10,000+ job seekers who've landed their dream roles
            </p>
          </div>

          {/* Feature Cards */}
          <div className="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-6 sm:grid-cols-3">
            <div className="card bg-card/10 border-white/20 backdrop-blur-sm">
              <div className="text-center">
                <Target className="mx-auto h-8 w-8 text-yellow-400" />
                <h3 className="mt-4 text-sm font-semibold text-white">Smart Resume Tailoring</h3>
                <p className="mt-2 text-sm text-blue-100">
                  AI analyzes job descriptions and optimizes your resume for ATS systems
                </p>
              </div>
            </div>

            <div className="card bg-card/10 border-white/20 backdrop-blur-sm">
              <div className="text-center">
                <Zap className="mx-auto h-8 w-8 text-yellow-400" />
                <h3 className="mt-4 text-sm font-semibold text-white">Instant Company Research</h3>
                <p className="mt-2 text-sm text-blue-100">
                  Get company insights from LinkedIn, Glassdoor, and social media
                </p>
              </div>
            </div>

            <div className="card bg-card/10 border-white/20 backdrop-blur-sm">
              <div className="text-center">
                <Users className="mx-auto h-8 w-8 text-yellow-400" />
                <h3 className="mt-4 text-sm font-semibold text-white">Application Tracking</h3>
                <p className="mt-2 text-sm text-blue-100">
                  Track all your applications and follow-ups in one dashboard
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="src/components/job-analysis/index.tsx">
'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { Skeleton } from '@/components/ui/skeleton'
import {
  Search,
  Briefcase,
  Building,
  Target,
  Users,
  Award,
  Clock,
  AlertCircle,
  CheckCircle,
  Loader2
} from 'lucide-react'
import { JobAnalysis } from '@/types'
import toast from 'react-hot-toast'

interface JobAnalysisFormProps {
  onAnalysisComplete: (analysis: { analysis: JobAnalysis; keywords: string[] }) => void
  onError: (error: string) => void
}

export function JobAnalysisForm({ onAnalysisComplete, onError }: JobAnalysisFormProps) {
  const [jobDescription, setJobDescription] = useState<string>(()=>{
    try { return localStorage.getItem('job:description') || '' } catch { return '' }
  })
  const [jobTitle, setJobTitle] = useState<string>(()=>{
    try { return localStorage.getItem('job:title') || '' } catch { return '' }
  })
  const [companyName, setCompanyName] = useState<string>(()=>{
    try { return localStorage.getItem('job:company') || '' } catch { return '' }
  })
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisProgress, setAnalysisProgress] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [analysisResult, setAnalysisResult] = useState<{ analysis: JobAnalysis; keywords: string[] } | null>(null)
  const [compare, setCompare] = useState<{ score: number; matched: string[]; missing: string[]; suggestions?: string[] } | null>(null)
  const [importUrl, setImportUrl] = useState('')
  const [isImporting, setIsImporting] = useState(false)
  const [psychology, setPsychology] = useState<any | null>(null)
  const [competition, setCompetition] = useState<any | null>(null)
  const [painpoints, setPainpoints] = useState<any | null>(null)
  const [success, setSuccess] = useState<{ score:number; reasons:string[]; riskFactors:string[]; improvements:string[] } | null>(null)
  const [timing, setTiming] = useState<{ score:number; bestWindows:Array<{window:string;reason:string}>; notes:string[] } | null>(null)

  const handleAnalyze = async () => {
    if (!jobDescription.trim()) {
      setError('Please enter a job description')
      return
    }

    if (jobDescription.length < 50) {
      setError('Job description must be at least 50 characters long')
      return
    }

    setIsAnalyzing(true)
    setAnalysisProgress(0)
    setError(null)

    try {
      // Simulate progress updates
      const progressInterval = setInterval(() => {
        setAnalysisProgress(prev => Math.min(prev + 15, 90))
      }, 500)

      const response = await fetch('/api/job/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jobDescription,
          jobTitle: jobTitle.trim() || undefined,
          companyName: companyName.trim() || undefined,
        }),
      })

      clearInterval(progressInterval)
      setAnalysisProgress(100)

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Analysis failed')
      }

      const data = await response.json()
      const result = {
        analysis: data.analysis,
        keywords: data.keywords
      }

      setAnalysisResult(result)
      try {
        localStorage.setItem('job:description', jobDescription)
        if (jobTitle) localStorage.setItem('job:title', jobTitle)
        if (companyName) localStorage.setItem('job:company', companyName)
      } catch {}
      onAnalysisComplete(result)

      // Fetch psychology, competition, pain points, and success probability in parallel
      try {
        // Try to load resume text for success scoring
        let resumeText: string | undefined
        try {
          const rl = await fetch('/api/resume/list')
          if (rl.ok) { const rj = await rl.json(); resumeText = rj.resumes?.[0]?.extractedText }
        } catch {}

        const [psyRes, compRes, painRes, sucRes, timRes] = await Promise.all([
          fetch('/api/insights/psychology', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription }) }),
          fetch('/api/insights/competition', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription, jobUrl: importUrl || undefined }) }),
          fetch('/api/insights/painpoints', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobTitle: jobTitle || result.analysis.jobTitle, jobDescription }) }),
          resumeText ? fetch('/api/insights/success', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription, resumeText }) }) : Promise.resolve({ ok: false }) as any,
          fetch('/api/insights/timing', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobTitle: jobTitle || result.analysis.jobTitle, companyName: companyName || result.analysis.companyName, location: companyName ? undefined : '', urgency: competition?.urgency, applicants: competition?.applicantsEstimate }) })
        ])
        if (psyRes.ok) { const pj = await psyRes.json(); setPsychology(pj.psychology || null); try { localStorage.setItem('analyze:psychology', JSON.stringify(pj.psychology || {})) } catch {} }
        if (compRes.ok) { const cj = await compRes.json(); setCompetition(cj.competition || null) }
        if (painRes.ok) { const pj2 = await painRes.json(); setPainpoints(pj2.painpoints || null) }
        if ((sucRes as any).ok) { const sj = await (sucRes as Response).json(); setSuccess(sj.successScore || null) }
        if (timRes.ok) { const tj = await timRes.json(); setTiming(tj.timing || null) }
      } catch {}

      toast.success('Job analysis completed successfully!')

    } catch (error) {
      console.error('Analysis error:', error)
      const errorMessage = error instanceof Error ? error.message : 'Analysis failed'
      setError(errorMessage)
      onError(errorMessage)
      toast.error(errorMessage)
    } finally {
      setIsAnalyzing(false)
      setTimeout(() => setAnalysisProgress(0), 1000)
    }
  }

  const runComparison = async () => {
    try {
      if (!analysisResult) return
      // Try to load latest resume id
      let resumeId: string | undefined
      let resumeText: string | undefined
      try {
        const rl = await fetch('/api/resume/list')
        if (rl.ok) {
          const rj = await rl.json()
          resumeId = rj.resumes?.[0]?._id
          resumeText = rj.resumes?.[0]?.extractedText
        }
      } catch {}
      if (!resumeId && !resumeText) {
        toast.error('No resume found. Upload a resume first (Quick Actions or Resume Builder).')
        return
      }

      const resp = await fetch('/api/job/compare', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ jobAnalysis: analysisResult, resumeId, resumeText })
      })
      if (!resp.ok) throw new Error('Compare failed')
      const json = await resp.json()
      setCompare({ score: json.score, matched: json.matchedKeywords || [], missing: json.missingKeywords || [], suggestions: json.suggestions || [] })
    } catch (e) {
      toast.error('Comparison failed. Upload or select a resume and try again.')
      setCompare(null)
    }
  }

  const resetForm = () => {
    setJobDescription('')
    setJobTitle('')
    setCompanyName('')
    setAnalysisResult(null)
    setError(null)
    setAnalysisProgress(0)
  }

  const importJob = async () => {
    if (!importUrl || !/^https?:\/\//i.test(importUrl)) {
      toast.error('Enter a valid job URL')
      return
    }
    setIsImporting(true)
    try {
      const base = typeof window !== 'undefined' ? '' : (process.env.NEXTAUTH_URL || 'http://localhost:3000')
      const resp = await fetch(`${base}/api/jobs/import`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobUrl: importUrl }) })
      const json = await resp.json()
      if (!resp.ok || !json.success) throw new Error(json.error || 'Import failed')
      // We cannot fetch full application easily here; prompt user to Analyze with scraped description
      toast.success('Imported job. Paste its description to analyze or proceed if prefilled.')
    } catch (e) {
      toast.error('Failed to import job')
    } finally {
      setIsImporting(false)
    }
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Search className="h-5 w-5" />
          Job Analysis
        </CardTitle>
        <CardDescription>
          Paste a job description to get AI-powered analysis of requirements, skills, and company insights
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Import by URL */}
        <div className="space-y-2">
          <Label htmlFor="importUrl">Import Job by URL (optional)</Label>
          <div className="flex gap-2">
            <Input id="importUrl" placeholder="https://..." value={importUrl} onChange={(e)=>setImportUrl(e.target.value)} disabled={isAnalyzing || isImporting} />
            <Button variant="outline" onClick={importJob} disabled={isAnalyzing || isImporting}>
              {isImporting ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin"/> Importing...</>) : 'Import'}
            </Button>
          </div>
        </div>
        {/* Error Alert */}
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Form Inputs */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="jobTitle">Job Title (Optional)</Label>
            <Input
              id="jobTitle"
              placeholder="e.g., Senior Software Engineer"
              value={jobTitle}
              onChange={(e) => setJobTitle(e.target.value)}
              disabled={isAnalyzing}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="companyName">Company Name (Optional)</Label>
            <Input
              id="companyName"
              placeholder="e.g., Google"
              value={companyName}
              onChange={(e) => setCompanyName(e.target.value)}
              disabled={isAnalyzing}
            />
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="jobDescription">Job Description *</Label>
          <Textarea
            id="jobDescription"
            placeholder="Paste the complete job description here..."
            value={jobDescription}
            onChange={(e) => setJobDescription(e.target.value)}
            rows={10}
            disabled={isAnalyzing}
            className="resize-none"
          />
          <div className="text-sm text-gray-500">
            {jobDescription.length} characters (minimum 50 required)
          </div>
        </div>

        {/* Progress Bar */}
        {isAnalyzing && (
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Analyzing job description...</span>
              <span className="text-sm text-gray-600">{analysisProgress}%</span>
            </div>
            <Progress value={analysisProgress} className="w-full" />
            {/* Skeletons while loading */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
              <Skeleton className="h-40" />
              <Skeleton className="h-40" />
              <Skeleton className="h-28 md:col-span-2" />
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex gap-3">
          <Button
            onClick={handleAnalyze}
            disabled={isAnalyzing || !jobDescription.trim() || jobDescription.length < 50}
            className="flex-1"
          >
            {isAnalyzing ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Analyzing...
              </>
            ) : (
              <>
                <Search className="mr-2 h-4 w-4" />
                Analyze Job
              </>
            )}
          </Button>
          {(analysisResult || error) && (
            <Button variant="outline" onClick={resetForm}>
              Reset
            </Button>
          )}
          {analysisResult && (
            <Button
              variant="outline"
              onClick={runComparison}
              disabled={isAnalyzing}
              title="Compare analyzed job against your latest resume"
            >
              Compare with Resume
            </Button>
          )}
        </div>

        {/* Analysis Results */}
        {analysisResult && (
          <div className="space-y-4">
            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertDescription>
                Analysis completed successfully!
              </AlertDescription>
            </Alert>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Job Details */}
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Briefcase className="h-4 w-4" />
                    Job Details
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <Label className="text-sm font-medium">Title</Label>
                    <p className="text-sm text-gray-600">{analysisResult.analysis.jobTitle}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">Company</Label>
                    <p className="text-sm text-gray-600">{analysisResult.analysis.companyName}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">Experience Level</Label>
                    <p className="text-sm text-gray-600">{analysisResult.analysis.experienceLevel}</p>
                  </div>
                  {analysisResult.analysis.salaryRange && (
                    <div>
                      <Label className="text-sm font-medium">Salary Range</Label>
                      <p className="text-sm text-gray-600">{analysisResult.analysis.salaryRange}</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Requirements */}
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Target className="h-4 w-4" />
                    Key Requirements
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {analysisResult.analysis.keyRequirements.map((req, index) => (
                      <Badge key={index} variant="secondary">
                        {req}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Skills */}
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Award className="h-4 w-4" />
                    Preferred Skills
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {analysisResult.analysis.preferredSkills.map((skill, index) => (
                      <Badge key={index} variant="outline">
                        {skill}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Company Culture */}
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Users className="h-4 w-4" />
                    Company Culture
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {analysisResult.analysis.companyCulture.map((culture, index) => (
                      <div key={index} className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span className="text-sm">{culture}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Keywords */}
            <Card>
              <CardHeader className="pb-3">
              <CardTitle className="text-lg flex items-center gap-2">
                  <Search className="h-4 w-4" />
                  Keywords Found
                </CardTitle>
                <CardDescription>
                  Important keywords to include in your resume and cover letter
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {analysisResult.keywords.map((keyword, index) => (
                    <Badge key={index} variant="secondary">
                      {keyword}
                    </Badge>
                  ))}
                </div>
                {compare?.suggestions && compare.suggestions.length > 0 && (
                  <div className="mt-3">
                    <div className="text-sm font-medium mb-1">What to fix</div>
                    <ul className="list-disc ml-5 text-sm text-gray-700">
                      {compare.suggestions.slice(0,4).map((s, i)=>(<li key={i}>{s}</li>))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Responsibilities */}
            {analysisResult.analysis.responsibilities.length > 0 && (
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Clock className="h-4 w-4" />
                    Key Responsibilities
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {analysisResult.analysis.responsibilities.map((responsibility, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                        <span className="text-sm">{responsibility}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            )}
          </div>
        )}

        {/* Empty state */}
        {!isAnalyzing && !analysisResult && !error && (
          <div className="text-sm text-gray-600 border rounded-lg p-4">
            Paste a full job description and click Analyze to see requirements, skills, and company insights.
          </div>
        )}

        {compare && (
          <div className="space-y-3 mt-4 p-4 border rounded-lg">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Match Score</span>
              <span className="text-sm">{compare.score}%</span>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <div className="text-xs font-semibold mb-1">Matched Keywords</div>
                <div className="flex flex-wrap gap-2">
                  {compare.matched.slice(0, 20).map((kw, i) => (
                    <Badge key={i} variant="secondary">{kw}</Badge>
                  ))}
                </div>
              </div>
              <div>
                <div className="text-xs font-semibold mb-1">Missing Keywords</div>
                <div className="flex flex-wrap gap-2">
                  {compare.missing.slice(0, 20).map((kw, i) => (
                    <Badge key={i} variant="outline">{kw}</Badge>
                  ))}
                </div>
              </div>
            </div>
            {compare.suggestions && compare.suggestions.length > 0 && (
              <div className="mt-2">
                <div className="text-xs font-semibold mb-1">What to fix</div>
                <ul className="list-disc ml-5 text-sm text-gray-700">
                  {compare.suggestions.map((s, i)=>(<li key={i}>{s}</li>))}
                </ul>
              </div>
            )}
          </div>
        )}

        {(psychology || competition || painpoints || success) && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {psychology && (
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg">Psychology & Tone</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2 text-sm text-gray-700">
                  <div><span className="font-medium">Tone:</span> {psychology.tone} (formality {psychology.formality})</div>
                  {Array.isArray(psychology.values) && psychology.values.length > 0 && (
                    <div>
                      <div className="font-medium">Values</div>
                      <div className="flex flex-wrap gap-2 mt-1">{psychology.values.map((v:string,i:number)=>(<Badge key={i} variant="outline">{v}</Badge>))}</div>
                    </div>
                  )}
                  {Array.isArray(psychology.languageGuidance) && psychology.languageGuidance.length > 0 && (
                    <div>
                      <div className="font-medium">Language Guidance</div>
                      <ul className="list-disc ml-5 mt-1">{psychology.languageGuidance.map((g:string,i:number)=>(<li key={i}>{g}</li>))}</ul>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
            {competition && (
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg">Competition & Urgency</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2 text-sm text-gray-700">
                  <div><span className="font-medium">Applicants (est):</span> {competition.applicantsEstimate} ({competition.competitionBand})</div>
                  <div><span className="font-medium">Urgency:</span> {competition.urgency}/100</div>
                  {Array.isArray(competition.differentiation) && competition.differentiation.length > 0 && (
                    <div>
                      <div className="font-medium">Differentiation</div>
                      <ul className="list-disc ml-5 mt-1">{competition.differentiation.slice(0,4).map((d:string,i:number)=>(<li key={i}>{d}</li>))}</ul>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
            {painpoints && (
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg">Pain Points & Angles</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3 text-sm text-gray-700">
                  {Array.isArray(painpoints.companyPainPoints) && painpoints.companyPainPoints.length > 0 && (
                    <div>
                      <div className="font-medium">Company Pain Points</div>
                      <ul className="list-disc ml-5 mt-1">{painpoints.companyPainPoints.slice(0,6).map((p:string,i:number)=>(<li key={i}>{p}</li>))}</ul>
                    </div>
                  )}
                  {Array.isArray(painpoints.rolePainPoints) && painpoints.rolePainPoints.length > 0 && (
                    <div>
                      <div className="font-medium">Role Pain Points</div>
                      <ul className="list-disc ml-5 mt-1">{painpoints.rolePainPoints.slice(0,6).map((p:string,i:number)=>(<li key={i}>{p}</li>))}</ul>
                    </div>
                  )}
                  {Array.isArray(painpoints.solutionAngles) && painpoints.solutionAngles.length > 0 && (
                    <div>
                      <div className="font-medium">Solution Angles</div>
                      <ul className="list-disc ml-5 mt-1">{painpoints.solutionAngles.slice(0,6).map((p:string,i:number)=>(<li key={i}>{p}</li>))}</ul>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
            {success && (
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg">Predicted Success Probability</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2 text-sm text-gray-700">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Score</span>
                    <span>{success.score}/100</span>
                  </div>
                  {Array.isArray(success.reasons) && success.reasons.length > 0 && (
                    <div>
                      <div className="font-medium">Reasons</div>
                      <ul className="list-disc ml-5 mt-1">{success.reasons.slice(0,4).map((r:string,i:number)=>(<li key={i}>{r}</li>))}</ul>
                    </div>
                  )}
                  {Array.isArray(success.improvements) && success.improvements.length > 0 && (
                    <div>
                      <div className="font-medium">Improvements</div>
                      <ul className="list-disc ml-5 mt-1">{success.improvements.slice(0,4).map((r:string,i:number)=>(<li key={i}>{r}</li>))}</ul>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
            {timing && (
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg">Optimal Timing</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2 text-sm text-gray-700">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Timing Score</span>
                    <span>{timing.score}/100</span>
                  </div>
                  {Array.isArray(timing.bestWindows) && timing.bestWindows.length > 0 && (
                    <div>
                      <div className="font-medium">Best Windows</div>
                      <ul className="list-disc ml-5 mt-1">
                        {timing.bestWindows.slice(0,3).map((w,i)=>(<li key={i}>{w.window} — {w.reason}</li>))}
                      </ul>
                    </div>
                  )}
                  {Array.isArray(timing.notes) && timing.notes.length > 0 && (
                    <div>
                      <div className="font-medium">Notes</div>
                      <ul className="list-disc ml-5 mt-1">
                        {timing.notes.slice(0,3).map((n,i)=>(<li key={i}>{n}</li>))}
                      </ul>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/components/job-card.tsx">
'use client'

import { useState } from 'react'
import { useSession } from 'next-auth/react'
import Link from 'next/link'
import {
  MapPinIcon,
  CurrencyDollarIcon,
  CheckCircleIcon,
  EnvelopeIcon,
  EyeIcon,
  CheckBadgeIcon
} from '@heroicons/react/24/outline'
import { Button } from '@/components/ui/button'
import { useToast } from '@/components/ui/use-toast'
import { cn } from '@/lib/utils'

interface Job {
  id: string
  title: string
  company: string
  location: string
  salary?: string
  skills?: string[]
  url: string
  logo?: string
  description?: string
  contacts?: { email?: string } // From research
  seen?: boolean // User has viewed this job
  applied?: boolean // User has applied to this job
  saved?: boolean // User has saved this job
}

interface JobCardProps {
  job: Job;
  resumeText?: string;
  coverText?: string;
  className?: string;
}

export function JobCard({ job, resumeText, coverText, className }: JobCardProps) {
  const { data: session } = useSession()
  const { toast } = useToast()
  const [isApplying, setIsApplying] = useState(false)

  const handleApply = async () => {
    if (!session?.user?.id || !resumeText || !coverText || !job.contacts?.email) {
      toast({
        title: 'Apply Failed',
        description: 'Login and complete research first.',
        variant: 'destructive'
      })
      return
    }

    setIsApplying(true)
    try {
      const response = await fetch('/api/outreach/compose', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          jobId: job.id,
          resumeText,
          coverText,
          contacts: job.contacts,
          company: job.company,
          jobTitle: job.title
        })
      })

      if (!response.ok) {
        throw new Error('Compose failed')
      }

      const data = await response.json()
      window.location.href = data.mailtoUrl // Open email client
      toast({
        title: 'Application Sent!',
        description: `Tracked as ${data.applicationId}. Check your email client.`,
      })
    } catch (error) {
      toast({
        title: 'Apply Failed',
        description: 'Try again or check contacts.',
        variant: 'destructive'
      })
    } finally {
      setIsApplying(false)
    }
  }

  // Dynamic gradient classes using CSS variables
  const gradientStyles = [
    'linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)))', // Blue to Yellow
    'linear-gradient(135deg, hsl(var(--secondary)), hsl(var(--primary)))', // Red to Blue
    'linear-gradient(135deg, hsl(var(--accent)), hsl(var(--warning)))', // Yellow to Orange
    'linear-gradient(135deg, hsl(var(--success)), hsl(142 76% 30%))', // Green
    'linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)))', // Blue to Red
  ]
  const gradientIndex = parseInt(job.id) % gradientStyles.length
  const gradientStyle = gradientStyles[gradientIndex]

  return (
    <div className={cn(
      'bg-card border border-border rounded-xl p-6 hover:shadow-lg transition-all duration-300 hover:border-primary/50 relative',
      className
    )}>
      {/* Status Badges */}
      <div className="absolute top-4 right-4 flex gap-2">
        {job.seen && (
          <div className="flex items-center gap-1 px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full text-xs font-semibold">
            <EyeIcon className="w-3 h-3" />
            Viewed
          </div>
        )}
        {job.applied && (
          <div className="flex items-center gap-1 px-2 py-1 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-full text-xs font-semibold">
            <CheckBadgeIcon className="w-3 h-3" />
            Applied
          </div>
        )}
      </div>
      {/* Modern gradient border wrapper using theme colors */}
      <div 
        className="p-1 rounded-3xl shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-2"
        style={{ background: gradientStyle }}
      >
        <div className="bg-card rounded-[calc(1.5rem-1px)] p-6 h-full">
          <Link href={job.url} className="block">
            {/* Header with colorful logo */}
            <div className="flex items-start gap-4 mb-4">
              <div 
                className="w-16 h-16 rounded-2xl flex items-center justify-center flex-shrink-0 shadow-lg"
                style={{ background: gradientStyle }}
              >
                {job.logo ? (
                  <img src={job.logo} alt={`${job.company} logo`} className="w-14 h-14 rounded-xl object-cover" />
                ) : (
                  <span className="text-2xl font-bold text-white">{job.company.charAt(0).toUpperCase()}</span>
                )}
              </div>
              <div className="flex-1 min-w-0">
                <h3 className="text-xl font-bold text-foreground mb-1 line-clamp-2 group-hover:text-primary transition-colors">{job.title}</h3>
                <p className="text-base font-semibold text-muted-foreground">{job.company}</p>
                <div className="flex items-center text-sm text-muted-foreground mt-1">
                  <MapPinIcon className="w-4 h-4 mr-1 flex-shrink-0" />
                  <span className="truncate">{job.location}</span>
                </div>
              </div>
            </div>

            {/* Description */}
            <p className="text-sm text-muted-foreground mb-4 line-clamp-2">
              {job.description || 'Exciting opportunity in a dynamic team. Apply now to learn more!'}
            </p>

            {/* Modern skill badges */}
            {job.skills && job.skills.length > 0 && (
              <div className="flex flex-wrap gap-2 mb-4">
                {job.skills.slice(0, 3).map((skill, idx) => {
                  const badgeClasses = [
                    'badge-primary',
                    'badge-secondary',
                    'badge-accent',
                  ]
                  const badgeClass = badgeClasses[idx % badgeClasses.length]
                  return (
                    <span key={idx} className={`${badgeClass} text-xs font-bold`}>
                      {skill}
                    </span>
                  )
                })}
              </div>
            )}

            {/* Salary with icon */}
            {job.salary && (
              <div className="flex items-center text-sm font-bold text-primary mb-4">
                <CurrencyDollarIcon className="w-5 h-5 mr-1" />
                {job.salary}
              </div>
            )}
          </Link>

          {/* Modern Apply Button */}
          <Button 
            onClick={handleApply} 
            disabled={isApplying} 
            className="w-full text-white font-bold py-3 rounded-xl shadow-lg hover:shadow-2xl hover:-translate-y-1 transition-all duration-300 border-0 mb-3"
            style={{ background: gradientStyle }}
          >
            {isApplying ? (
              <>
                <EnvelopeIcon className="w-5 h-5 mr-2" />
                Sending...
              </>
            ) : (
              <>
                <CheckCircleIcon className="w-5 h-5 mr-2" />
                Apply Now
              </>
            )}
          </Button>

          {/* Quick Access Buttons */}
          <div className="grid grid-cols-2 gap-2">
            <Link 
              href={`/career-finder/company?company=${encodeURIComponent(job.company)}`}
              className="flex items-center justify-center gap-2 px-3 py-2 text-xs font-semibold text-primary border border-primary rounded-lg hover:bg-primary/10 transition-colors"
            >
              🔍 Research
            </Link>
            <Link 
              href={`/career-finder/job-analysis?job=${job.id}`}
              className="flex items-center justify-center gap-2 px-3 py-2 text-xs font-semibold text-primary border border-primary rounded-lg hover:bg-primary/10 transition-colors"
            >
              📊 Analytics
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/job-status-bar.tsx">
/**
 * Job Status Bar Component
 * Figma-inspired status tabs for job tracking
 * 
 * Displays: Discover, Saved, Applied, Closed, Discarded
 */

'use client'

import { cn } from '@/lib/utils'

export type JobStatus = 'discover' | 'saved' | 'applied' | 'closed' | 'discarded'

interface JobStatusBarProps {
  activeStatus: JobStatus
  onStatusChange: (status: JobStatus) => void
  counts?: {
    discover?: number
    saved?: number
    applied?: number
    closed?: number
    discarded?: number
  }
}

const statusConfig = [
  { key: 'discover' as JobStatus, label: 'Discover' },
  { key: 'saved' as JobStatus, label: 'Saved' },
  { key: 'applied' as JobStatus, label: 'Applied' },
  { key: 'closed' as JobStatus, label: 'Closed' },
  { key: 'discarded' as JobStatus, label: 'Discarded' },
]

export function JobStatusBar({ activeStatus, onStatusChange, counts }: JobStatusBarProps) {
  return (
    <div className="relative w-full px-6 py-4">
      {/* Background Progress Bar */}
      <div className="absolute left-6 right-6 top-1/2 -translate-y-1/2 h-2 bg-[#D5D5D5] rounded-full" />
      
      {/* Status Tabs */}
      <div className="relative flex items-center justify-start gap-2 z-10">
        {statusConfig.map((status, index) => {
          const isActive = activeStatus === status.key
          const count = counts?.[status.key]
          
          return (
            <button
              key={status.key}
              onClick={() => onStatusChange(status.key)}
              className={cn(
                'flex items-center justify-center px-4 py-3 rounded-full font-semibold text-sm transition-all duration-300',
                'hover:scale-105 active:scale-95',
                isActive
                  ? 'bg-[#5424FD] text-white shadow-lg z-20'
                  : 'bg-[#D5D5D5] text-black hover:bg-[#BFBFBF] z-10'
              )}
              style={{
                order: index + 1,
                fontFamily: 'var(--font-inter), Satoshi, sans-serif',
              }}
            >
              {status.label}
              {count !== undefined && count > 0 && (
                <span className={cn(
                  'ml-2 px-2 py-0.5 rounded-full text-xs font-bold',
                  isActive 
                    ? 'bg-white/20 text-white' 
                    : 'bg-black/10 text-black'
                )}>
                  {count}
                </span>
              )}
            </button>
          )
        })}
      </div>
    </div>
  )
}

/**
 * Compact version for mobile
 */
export function JobStatusBarCompact({ activeStatus, onStatusChange }: JobStatusBarProps) {
  return (
    <div className="flex items-center gap-2 overflow-x-auto px-4 py-2 scrollbar-hide">
      {statusConfig.map((status) => {
        const isActive = activeStatus === status.key
        
        return (
          <button
            key={status.key}
            onClick={() => onStatusChange(status.key)}
            className={cn(
              'flex-shrink-0 px-4 py-2 rounded-full text-xs font-semibold transition-all duration-300',
              isActive
                ? 'bg-[#5424FD] text-white'
                : 'bg-[#D5D5D5] text-black'
            )}
          >
            {status.label}
          </button>
        )
      })}
    </div>
  )
}
</file>

<file path="src/components/linkedin-import.tsx">
'use client'

import { useState, useEffect } from 'react'
import { signIn, useSession } from 'next-auth/react'
import { Upload, Linkedin, FileText, AlertCircle, CheckCircle2, Loader2 } from 'lucide-react'

interface LinkedInImportProps {
  onImport: (resumeData: any) => void
  className?: string
  mode?: 'structured' | 'upload' // structured = return ResumeData, upload = create Resume record
}

export function LinkedInImport({ onImport, className = '', mode = 'upload' }: LinkedInImportProps) {
  const { data: session, status } = useSession()
  const [isProcessing, setIsProcessing] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)
  const [linkedInUrl, setLinkedInUrl] = useState('')
  const [autoFetched, setAutoFetched] = useState(false)

  // Auto-fetch profile if user is already signed in
  useEffect(() => {
    if (session?.user && status === 'authenticated' && !autoFetched) {
      console.log('[LINKEDIN_IMPORT] Auto-fetching profile for authenticated user, mode:', mode)
      setAutoFetched(true)
      fetchLinkedInProfile()
    } else {
      console.log('[LINKEDIN_IMPORT] Not auto-fetching:', { 
        hasSession: !!session?.user, 
        status, 
        autoFetched,
        mode 
      })
    }
  }, [session, status, autoFetched, mode])

  const fetchLinkedInProfile = async () => {
    setIsProcessing(true)
    setError(null)

    try {
      const response = await fetch('/api/linkedin/profile')
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to fetch LinkedIn profile')
      }

      const data = await response.json()
      console.log('[LINKEDIN_IMPORT] Profile API response:', { success: data.success, hasResumeData: !!data.resumeData })
      
      if (data.success && data.resumeData) {
        if (mode === 'structured') {
          // Resume Builder mode: Return structured data directly
          console.log('[LINKEDIN_IMPORT] Structured mode - returning resumeData:', data.resumeData)
          setSuccess(true)
          onImport(data.resumeData)
          setTimeout(() => setSuccess(false), 3000)
        } else {
          // Career Finder mode: Convert to text and upload to create Resume record
          const resumeText = convertResumeDataToText(data.resumeData)
          
          // Upload to API to create Resume record
          const uploadResponse = await fetch('/api/resume/upload', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              text: resumeText,
              source: 'linkedin-oauth',
              fileName: 'LinkedIn Profile.txt'
            })
          })

          if (!uploadResponse.ok) {
            throw new Error('Failed to save LinkedIn profile')
          }

          const uploadData = await uploadResponse.json()
          
          setSuccess(true)
          onImport(uploadData.resume) // Pass the Resume object with _id and extractedText
          setTimeout(() => setSuccess(false), 3000)
        }
      } else {
        throw new Error(data.error || 'Failed to import LinkedIn data')
      }
    } catch (err) {
      const errorMessage = (err as Error).message
      console.error('[LINKEDIN_IMPORT] Error:', errorMessage)
      // Show all errors in structured mode (resume builder needs to know)
      if (mode === 'structured' || !errorMessage.includes('No LinkedIn access token')) {
        setError(errorMessage)
      }
    } finally {
      setIsProcessing(false)
    }
  }

  // Helper function to convert structured resume data to text
  const convertResumeDataToText = (resumeData: any): string => {
    let text = ''
    
    // Personal Info
    if (resumeData.personalInfo) {
      const p = resumeData.personalInfo
      text += `${p.fullName || ''}\n`
      if (p.email) text += `${p.email}\n`
      if (p.phone) text += `${p.phone}\n`
      if (p.location) text += `${p.location}\n`
      if (p.linkedin) text += `${p.linkedin}\n`
      if (p.website) text += `${p.website}\n`
      if (p.summary) text += `\n${p.summary}\n`
      text += '\n'
    }
    
    // Experience
    if (resumeData.experience && resumeData.experience.length > 0) {
      text += 'WORK EXPERIENCE\n\n'
      resumeData.experience.forEach((exp: any) => {
        text += `${exp.position || ''}\n`
        text += `${exp.company || ''} | ${exp.location || ''}\n`
        text += `${exp.startDate || ''} - ${exp.endDate || 'Present'}\n`
        if (exp.description) text += `${exp.description}\n`
        if (exp.achievements && exp.achievements.length > 0) {
          exp.achievements.forEach((ach: string) => text += `• ${ach}\n`)
        }
        text += '\n'
      })
    }
    
    // Education
    if (resumeData.education && resumeData.education.length > 0) {
      text += 'EDUCATION\n\n'
      resumeData.education.forEach((edu: any) => {
        text += `${edu.degree || ''} in ${edu.field || ''}\n`
        text += `${edu.institution || ''}\n`
        if (edu.graduationDate) text += `Graduated: ${edu.graduationDate}\n`
        if (edu.gpa) text += `GPA: ${edu.gpa}\n`
        text += '\n'
      })
    }
    
    // Skills
    if (resumeData.skills) {
      const allSkills = [
        ...(resumeData.skills.technical || []),
        ...(resumeData.skills.soft || [])
      ]
      if (allSkills.length > 0) {
        text += 'SKILLS\n\n'
        text += allSkills.join(', ') + '\n\n'
      }
    }
    
    return text
  }

  const handleLinkedInOAuth = async () => {
    setIsProcessing(true)
    setError(null)

    try {
      // If already signed in, just fetch the profile
      if (session?.user) {
        await fetchLinkedInProfile()
        return
      }

      // Sign in with LinkedIn OAuth (will redirect)
      await signIn('linkedin', {
        callbackUrl: window.location.href
      })

      // Note: After redirect, the page will reload and auto-fetch will handle profile import
    } catch (err) {
      setError((err as Error).message)
      setIsProcessing(false)
    }
  }

  const handleLinkedInPDFUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    if (file.type !== 'application/pdf') {
      setError('Please upload a PDF file from LinkedIn')
      return
    }

    setIsProcessing(true)
    setError(null)
    setSuccess(false)

    try {
      // Upload and parse LinkedIn PDF
      const formData = new FormData()
      formData.append('file', file)
      formData.append('source', 'linkedin')

      const response = await fetch('/api/resume/parse-linkedin', {
        method: 'POST',
        body: formData
      })

      if (!response.ok) {
        throw new Error('Failed to parse LinkedIn resume')
      }

      const data = await response.json()
      
      if (data.success) {
        setSuccess(true)
        onImport(data.resumeData)
        
        // Clear success message after 3 seconds
        setTimeout(() => setSuccess(false), 3000)
      } else {
        throw new Error(data.error || 'Failed to import LinkedIn data')
      }
    } catch (err) {
      setError((err as Error).message)
    } finally {
      setIsProcessing(false)
    }
  }

  const handleLinkedInUrlScrape = async () => {
    if (!linkedInUrl.trim()) {
      setError('Please enter your LinkedIn profile URL')
      return
    }

    // Validate LinkedIn URL
    if (!linkedInUrl.includes('linkedin.com/in/')) {
      setError('Please enter a valid LinkedIn profile URL (e.g., https://linkedin.com/in/yourname)')
      return
    }

    setIsProcessing(true)
    setError(null)
    setSuccess(false)

    try {
      const response = await fetch('/api/resume/scrape-linkedin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: linkedInUrl })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to scrape LinkedIn profile')
      }

      const data = await response.json()
      
      if (data.success) {
        setSuccess(true)
        onImport(data.resumeData)
        setTimeout(() => setSuccess(false), 3000)
      } else {
        throw new Error(data.error || 'Failed to import LinkedIn data')
      }
    } catch (err) {
      setError((err as Error).message)
    } finally {
      setIsProcessing(false)
    }
  }

  const handleLinkedInTextPaste = async (text: string) => {
    if (!text.trim()) return

    setIsProcessing(true)
    setError(null)
    setSuccess(false)

    try {
      const response = await fetch('/api/resume/parse-linkedin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text, source: 'linkedin' })
      })

      if (!response.ok) {
        throw new Error('Failed to parse LinkedIn data')
      }

      const data = await response.json()
      
      if (data.success) {
        setSuccess(true)
        onImport(data.resumeData)
        setTimeout(() => setSuccess(false), 3000)
      } else {
        throw new Error(data.error || 'Failed to import LinkedIn data')
      }
    } catch (err) {
      setError((err as Error).message)
    } finally {
      setIsProcessing(false)
    }
  }

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Status Indicator */}
      {session?.user && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-3 text-sm">
          <div className="flex items-center gap-2">
            <CheckCircle2 className="w-4 h-4 text-green-600" />
            <span className="text-green-900 font-medium">
              {isProcessing ? 'Importing LinkedIn profile...' : 'Signed in - Click button below to import'}
            </span>
          </div>
        </div>
      )}

      {/* LinkedIn OAuth Sign-In - PRIMARY METHOD */}
      <div className="border-2 border-solid border-blue-600 rounded-lg p-6 bg-gradient-to-br from-blue-50 to-blue-100 shadow-lg">
        <div className="flex items-center gap-3 mb-4">
          <Linkedin className="w-10 h-10 text-blue-600" />
          <div>
            <h3 className="font-bold text-foreground text-xl">Sign in with LinkedIn</h3>
            <p className="text-sm text-gray-600">Securely connect your LinkedIn account to automatically import your profile</p>
          </div>
        </div>
        <button
          onClick={handleLinkedInOAuth}
          disabled={isProcessing}
          className="w-full px-6 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-bold text-lg flex items-center justify-center gap-3 shadow-md hover:shadow-xl"
        >
          {isProcessing ? (
            <>
              <Loader2 className="w-6 h-6 animate-spin" />
              Connecting to LinkedIn...
            </>
          ) : (
            <>
              <Linkedin className="w-6 h-6" />
              Sign in with LinkedIn
            </>
          )}
        </button>
        <div className="mt-3 text-xs text-gray-500 text-center">
          ✓ Secure OAuth 2.0 • ✓ Official LinkedIn API • ✓ No password sharing
        </div>
      </div>

      {/* Divider */}
      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <div className="w-full border-t border-border"></div>
        </div>
        <div className="relative flex justify-center text-sm">
          <span className="px-2 bg-card text-gray-500">Or use alternative methods</span>
        </div>
      </div>

      {/* LinkedIn PDF Upload - ALTERNATIVE */}
      <div className="border-2 border-dashed border-border rounded-lg p-6 bg-muted/50 hover:bg-muted transition-colors">
        <label className="cursor-pointer block">
          <input
            type="file"
            accept=".pdf"
            onChange={handleLinkedInPDFUpload}
            disabled={isProcessing}
            className="hidden"
          />
          <div className="flex flex-col items-center gap-3">
            <div className="flex items-center gap-2">
              <Linkedin className="w-6 h-6 text-blue-600" />
              <Upload className="w-5 h-5 text-blue-600" />
            </div>
            <div className="text-center">
              <p className="font-semibold text-foreground">Import from LinkedIn PDF</p>
              <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                Go to LinkedIn → Your Profile → Resources → Download Profile as PDF
              </p>
            </div>
            <div className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-semibold">
              {isProcessing ? (
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Processing...
                </div>
              ) : (
                'Click to Choose LinkedIn PDF'
              )}
            </div>
          </div>
        </label>
      </div>

      {/* LinkedIn Text Paste */}
      <div className="border-2 border-dashed border-border rounded-lg p-6 bg-muted/50">
        <div className="flex items-start gap-3">
          <FileText className="w-5 h-5 text-gray-600 mt-1" />
          <div className="flex-1">
            <p className="font-semibold text-foreground mb-2">Or paste LinkedIn profile text</p>
            <textarea
              placeholder="Copy your LinkedIn profile text and paste it here..."
              className="w-full h-32 px-3 py-2 border border-border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none bg-background text-foreground"
              disabled={isProcessing}
              onPaste={(e) => {
                e.preventDefault()
                const text = e.clipboardData.getData('text')
                handleLinkedInTextPaste(text)
              }}
            />
            <p className="text-xs text-gray-500 mt-2">
              Tip: Go to your LinkedIn profile, select all text (Ctrl+A), copy (Ctrl+C), then paste here
            </p>
          </div>
        </div>
      </div>

      {/* Instructions */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
          <Linkedin className="w-4 h-4" />
          How to export from LinkedIn:
        </h4>
        <ol className="text-sm text-blue-800 space-y-1 list-decimal list-inside">
          <li>Go to your LinkedIn profile</li>
          <li>Click "More" → "Save to PDF"</li>
          <li>Upload the downloaded PDF here</li>
        </ol>
      </div>

      {/* Status Messages */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start gap-3">
          <AlertCircle className="w-5 h-5 text-red-600 mt-0.5" />
          <div>
            <p className="font-semibold text-red-900">Import Failed</p>
            <p className="text-sm text-red-700">{error}</p>
          </div>
        </div>
      )}

      {success && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
          <CheckCircle2 className="w-5 h-5 text-green-600 mt-0.5" />
          <div>
            <p className="font-semibold text-green-900">LinkedIn Data Imported!</p>
            <p className="text-sm text-green-700">Your profile has been successfully imported</p>
          </div>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/components/mobile/JobCard.tsx">
'use client'

import { useState, useRef, useEffect } from 'react'
import { motion, useMotionValue, useTransform, PanInfo } from 'framer-motion'
import { Haptics, ImpactStyle } from '@capacitor/haptics'

interface JobCardProps {
  job: {
    id: string
    title: string
    company: string
    location: string
    salary?: string
    type: string
    postedDate: string
    description: string
  }
  onSwipeLeft?: (jobId: string) => void
  onSwipeRight?: (jobId: string) => void
  onTap?: (jobId: string) => void
}

export function JobCard({ job, onSwipeLeft, onSwipeRight, onTap }: JobCardProps) {
  const [isExiting, setIsExiting] = useState(false)
  const cardRef = useRef<HTMLDivElement>(null)
  const x = useMotionValue(0)
  
  // Transform x position to rotation
  const rotate = useTransform(x, [-200, 0, 200], [-15, 0, 15])
  
  // Transform x position to opacity for indicators
  const leftOpacity = useTransform(x, [-200, -50, 0], [1, 0.5, 0])
  const rightOpacity = useTransform(x, [0, 50, 200], [0, 0.5, 1])

  // Trigger haptic feedback
  const triggerHaptic = async (style: ImpactStyle = ImpactStyle.Light) => {
    try {
      await Haptics.impact({ style })
    } catch (error) {
      // Haptics not available (web browser)
      console.debug('Haptics not available')
    }
  }

  const handleDragEnd = async (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {
    const threshold = 100
    
    if (Math.abs(info.offset.x) > threshold) {
      setIsExiting(true)
      
      // Trigger strong haptic feedback
      await triggerHaptic(ImpactStyle.Medium)
      
      if (info.offset.x > 0) {
        // Swiped right (like/save)
        onSwipeRight?.(job.id)
      } else {
        // Swiped left (dismiss)
        onSwipeLeft?.(job.id)
      }
    } else {
      // Snap back to center
      await triggerHaptic(ImpactStyle.Light)
    }
  }

  const handleTap = async () => {
    await triggerHaptic(ImpactStyle.Light)
    onTap?.(job.id)
  }

  return (
    <motion.div
      ref={cardRef}
      className="swipeable-card ripple"
      style={{ x, rotate }}
      drag="x"
      dragConstraints={{ left: 0, right: 0 }}
      dragElastic={0.7}
      onDragEnd={handleDragEnd}
      onTap={handleTap}
      animate={isExiting ? { opacity: 0, scale: 0.8 } : { opacity: 1, scale: 1 }}
      transition={{ duration: 0.3 }}
    >
      {/* Swipe indicators */}
      <motion.div
        className="swipe-indicator swipe-indicator-left"
        style={{ opacity: leftOpacity }}
      >
        ❌
      </motion.div>
      
      <motion.div
        className="swipe-indicator swipe-indicator-right"
        style={{ opacity: rightOpacity }}
      >
        ⭐
      </motion.div>

      {/* Card content */}
      <div className="flex flex-col gap-3">
        {/* Header */}
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-1">
              {job.title}
            </h3>
            <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
              {job.company}
            </p>
          </div>
          <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center text-white font-bold text-lg flex-shrink-0">
            {job.company.charAt(0)}
          </div>
        </div>

        {/* Details */}
        <div className="flex flex-wrap gap-2">
          <span className="inline-flex items-center gap-1 px-3 py-1 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 rounded-full text-sm font-medium">
            📍 {job.location}
          </span>
          <span className="inline-flex items-center gap-1 px-3 py-1 bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 rounded-full text-sm font-medium">
            💼 {job.type}
          </span>
          {job.salary && (
            <span className="inline-flex items-center gap-1 px-3 py-1 bg-purple-50 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300 rounded-full text-sm font-medium">
              💰 {job.salary}
            </span>
          )}
        </div>

        {/* Description */}
        <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-3">
          {job.description}
        </p>

        {/* Footer */}
        <div className="flex items-center justify-between pt-2 border-t border-gray-200 dark:border-gray-700">
          <span className="text-xs text-gray-500 dark:text-gray-400">
            Posted {job.postedDate}
          </span>
          <div className="flex gap-2">
            <button
              className="w-10 h-10 rounded-full bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 flex items-center justify-center ripple"
              onClick={(e) => {
                e.stopPropagation()
                triggerHaptic(ImpactStyle.Light)
                onSwipeLeft?.(job.id)
              }}
              aria-label="Dismiss job"
            >
              ✕
            </button>
            <button
              className="w-10 h-10 rounded-full bg-yellow-50 dark:bg-yellow-900/20 text-yellow-600 dark:text-yellow-400 flex items-center justify-center ripple"
              onClick={(e) => {
                e.stopPropagation()
                triggerHaptic(ImpactStyle.Light)
                onSwipeRight?.(job.id)
              }}
              aria-label="Save job"
            >
              ⭐
            </button>
          </div>
        </div>
      </div>
    </motion.div>
  )
}
</file>

<file path="src/components/mobile/PullToRefresh.tsx">
'use client'

import { useState, useRef, useEffect, ReactNode } from 'react'
import { Haptics, ImpactStyle } from '@capacitor/haptics'
import confetti from 'canvas-confetti'

interface PullToRefreshProps {
  onRefresh: () => Promise<void>
  children: ReactNode
  threshold?: number
  disabled?: boolean
}

export function PullToRefresh({ 
  onRefresh, 
  children, 
  threshold = 80,
  disabled = false 
}: PullToRefreshProps) {
  const [isPulling, setIsPulling] = useState(false)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const [pullDistance, setPullDistance] = useState(0)
  const startY = useRef(0)
  const containerRef = useRef<HTMLDivElement>(null)

  const triggerHaptic = async () => {
    try {
      await Haptics.impact({ style: ImpactStyle.Medium })
    } catch (error) {
      console.debug('Haptics not available')
    }
  }

  const triggerConfetti = () => {
    confetti({
      particleCount: 50,
      spread: 60,
      origin: { y: 0.1 }
    })
  }

  const handleTouchStart = (e: TouchEvent) => {
    if (disabled || isRefreshing) return
    
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop
    if (scrollTop === 0) {
      startY.current = e.touches[0].clientY
    }
  }

  const handleTouchMove = (e: TouchEvent) => {
    if (disabled || isRefreshing || startY.current === 0) return
    
    const currentY = e.touches[0].clientY
    const distance = currentY - startY.current
    
    if (distance > 0) {
      setPullDistance(Math.min(distance, threshold * 1.5))
      setIsPulling(distance > threshold)
      
      // Haptic feedback when reaching threshold
      if (distance > threshold && !isPulling) {
        triggerHaptic()
      }
    }
  }

  const handleTouchEnd = async () => {
    if (disabled || isRefreshing) return
    
    if (isPulling && pullDistance > threshold) {
      setIsRefreshing(true)
      await triggerHaptic()
      
      try {
        await onRefresh()
        triggerConfetti()
      } catch (error) {
        console.error('Refresh failed:', error)
      } finally {
        setIsRefreshing(false)
      }
    }
    
    setIsPulling(false)
    setPullDistance(0)
    startY.current = 0
  }

  useEffect(() => {
    const container = containerRef.current
    if (!container) return

    container.addEventListener('touchstart', handleTouchStart, { passive: true })
    container.addEventListener('touchmove', handleTouchMove, { passive: true })
    container.addEventListener('touchend', handleTouchEnd)

    return () => {
      container.removeEventListener('touchstart', handleTouchStart)
      container.removeEventListener('touchmove', handleTouchMove)
      container.removeEventListener('touchend', handleTouchEnd)
    }
  }, [isPulling, pullDistance, isRefreshing, disabled])

  const pullProgress = Math.min((pullDistance / threshold) * 100, 100)

  return (
    <div ref={containerRef} className="relative">
      {/* Pull indicator */}
      <div
        className="pull-to-refresh"
        style={{
          transform: `translateY(${Math.min(pullDistance, threshold)}px)`,
          opacity: pullDistance > 0 ? 1 : 0
        }}
      >
        {isRefreshing ? (
          <div className="pull-to-refresh-spinner" />
        ) : (
          <div className="relative w-12 h-12 flex items-center justify-center">
            {/* Progress circle */}
            <svg className="absolute w-12 h-12 transform -rotate-90">
              <circle
                cx="24"
                cy="24"
                r="20"
                stroke="#e5e7eb"
                strokeWidth="3"
                fill="none"
              />
              <circle
                cx="24"
                cy="24"
                r="20"
                stroke="#667eea"
                strokeWidth="3"
                fill="none"
                strokeDasharray={`${2 * Math.PI * 20}`}
                strokeDashoffset={`${2 * Math.PI * 20 * (1 - pullProgress / 100)}`}
                strokeLinecap="round"
                style={{ transition: 'stroke-dashoffset 0.1s ease' }}
              />
            </svg>
            {/* Arrow icon */}
            <div
              className="text-2xl transition-transform duration-200"
              style={{
                transform: isPulling ? 'rotate(180deg)' : 'rotate(0deg)'
              }}
            >
              ↓
            </div>
          </div>
        )}
      </div>

      {/* Content */}
      <div
        style={{
          transform: `translateY(${Math.min(pullDistance * 0.5, threshold * 0.5)}px)`,
          transition: isPulling || isRefreshing ? 'none' : 'transform 0.3s ease'
        }}
      >
        {children}
      </div>
    </div>
  )
}
</file>

<file path="src/components/mobile/SuccessAnimation.tsx">
'use client'

import { useEffect } from 'react'
import { motion } from 'framer-motion'
import confetti from 'canvas-confetti'
import { Haptics, ImpactStyle, NotificationType } from '@capacitor/haptics'

interface SuccessAnimationProps {
  title?: string
  message?: string
  onComplete?: () => void
  autoClose?: boolean
  autoCloseDelay?: number
}

export function SuccessAnimation({
  title = 'Success!',
  message = 'Action completed successfully',
  onComplete,
  autoClose = true,
  autoCloseDelay = 2000
}: SuccessAnimationProps) {
  
  useEffect(() => {
    // Trigger haptic feedback
    const triggerHaptics = async () => {
      try {
        // Success notification haptic
        await Haptics.notification({ type: NotificationType.Success })
      } catch (error) {
        console.debug('Haptics not available')
      }
    }

    // Fire confetti
    const fireConfetti = () => {
      const duration = 2000
      const animationEnd = Date.now() + duration
      const defaults = { 
        startVelocity: 30, 
        spread: 360, 
        ticks: 60, 
        zIndex: 10000,
        colors: ['#667eea', '#764ba2', '#10b981', '#f59e0b']
      }

      function randomInRange(min: number, max: number) {
        return Math.random() * (max - min) + min
      }

      const interval = setInterval(() => {
        const timeLeft = animationEnd - Date.now()

        if (timeLeft <= 0) {
          clearInterval(interval)
          return
        }

        const particleCount = 30 * (timeLeft / duration)
        
        // Fire from left
        confetti({
          ...defaults,
          particleCount,
          origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
        })
        
        // Fire from right
        confetti({
          ...defaults,
          particleCount,
          origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
        })
      }, 250)

      return () => clearInterval(interval)
    }

    triggerHaptics()
    const cleanup = fireConfetti()

    // Auto-close
    if (autoClose && onComplete) {
      const timer = setTimeout(() => {
        onComplete()
      }, autoCloseDelay)

      return () => {
        cleanup()
        clearTimeout(timer)
      }
    }

    return cleanup
  }, [autoClose, autoCloseDelay, onComplete])

  return (
    <div className="fixed inset-0 z-[10000] flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <motion.div
        initial={{ scale: 0, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.8, opacity: 0 }}
        transition={{ 
          type: 'spring', 
          stiffness: 200, 
          damping: 20 
        }}
        className="bg-card rounded-3xl p-8 mx-4 max-w-sm w-full shadow-2xl"
      >
        {/* Success icon */}
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ 
            delay: 0.2, 
            type: 'spring', 
            stiffness: 200, 
            damping: 15 
          }}
          className="w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center shadow-lg"
        >
          <motion.svg
            initial={{ pathLength: 0 }}
            animate={{ pathLength: 1 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="w-12 h-12 text-white"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth={3}
          >
            <motion.path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M5 13l4 4L19 7"
            />
          </motion.svg>
        </motion.div>

        {/* Title */}
        <motion.h2
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="text-2xl font-bold text-center text-gray-900 dark:text-white mb-2"
        >
          {title}
        </motion.h2>

        {/* Message */}
        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="text-center text-gray-600 dark:text-gray-400"
        >
          {message}
        </motion.p>

        {/* Progress indicator (if auto-close) */}
        {autoClose && (
          <motion.div
            initial={{ width: '100%' }}
            animate={{ width: '0%' }}
            transition={{ duration: autoCloseDelay / 1000, ease: 'linear' }}
            className="h-1 bg-gradient-to-r from-green-400 to-green-600 rounded-full mt-6"
          />
        )}
      </motion.div>
    </div>
  )
}
</file>

<file path="src/components/modern/DribbblePageLayout.tsx">
'use client'

import React from 'react'
import { MobileNavigation } from './MobileNavigation'

interface PageLayoutProps {
  children: React.ReactNode
  showNavigation?: boolean
  fullWidth?: boolean
}

export const DribbblePageLayout: React.FC<PageLayoutProps> = ({ 
  children, 
  showNavigation = true,
  fullWidth = false
}) => {
  return (
    <div className="page-background-dribbble min-h-screen">
      <div className={`relative z-10 ${showNavigation ? 'pb-20' : 'pb-8'} ${fullWidth ? '' : 'max-w-7xl mx-auto'}`}>
        {children}
      </div>
      {showNavigation && <MobileNavigation />}
    </div>
  )
}
</file>

<file path="src/components/modern/MobileNavigation.tsx">
'use client'

import React from 'react'

export const MobileNavigation: React.FC = () => {
  return (
    <nav className="fixed bottom-0 left-0 right-0 bg-card border-t border-border shadow-lg z-50 md:hidden">
      <div className="flex justify-around items-center h-16 px-4">
        {/* Navigation items can be added here */}
      </div>
    </nav>
  )
}
</file>

<file path="src/components/modern/ModernJobCard.tsx">
'use client'

import React from 'react'
import { MapPinIcon, CurrencyDollarIcon, CheckCircleIcon } from '@heroicons/react/24/outline'

interface JobCardProps {
  job: {
    id: string
    title: string
    company: string
    location: string
    salary?: string
    skills: string[]
    urgent?: boolean
    featured?: boolean
    logo?: string
  }
  onApply?: () => void
}

export const ModernJobCard: React.FC<JobCardProps> = ({ job, onApply }) => {
  return (
    <div className="dribbble-card p-6 group cursor-pointer">
      {/* Status Badges */}
      <div className="flex justify-between items-start mb-4">
        <div className="flex gap-2">
          {job.featured && (
            <span className="px-3 py-1 bg-gradient-to-r from-yellow-400 to-orange-500 text-white text-xs font-bold rounded-full">
              FEATURED
            </span>
          )}
          {job.urgent && (
            <span className="px-3 py-1 bg-gradient-to-r from-red-500 to-pink-500 text-white text-xs font-bold rounded-full animate-pulse">
              URGENT
            </span>
          )}
        </div>
        <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center text-white font-bold text-lg shadow-lg">
          {job.logo ? (
            <img src={job.logo} alt={job.company} className="w-full h-full rounded-2xl object-cover" />
          ) : (
            job.company.charAt(0)
          )}
        </div>
      </div>

      {/* Job Info */}
      <div className="mb-4">
        <h3 className="text-xl font-bold text-foreground mb-2 group-hover:text-blue-600 transition-colors">
          {job.title}
        </h3>
        <p className="text-gray-600 font-medium text-lg">{job.company}</p>
      </div>

      {/* Location & Salary */}
      <div className="flex items-center gap-4 mb-4 text-sm text-gray-500">
        <div className="flex items-center gap-1">
          <MapPinIcon className="w-4 h-4 text-blue-500" />
          <span>{job.location}</span>
        </div>
        {job.salary && (
          <div className="flex items-center gap-1">
            <CurrencyDollarIcon className="w-4 h-4 text-green-500" />
            <span className="font-semibold text-green-600">{job.salary}</span>
          </div>
        )}
      </div>

      {/* Skills */}
      <div className="flex flex-wrap gap-2 mb-6">
        {job.skills.slice(0, 3).map((skill, index) => (
          <span 
            key={skill}
            className={`px-3 py-1 rounded-full text-sm font-medium ${
              index === 0 ? 'bg-blue-100 text-blue-700' :
              index === 1 ? 'bg-red-100 text-red-700' :
              'bg-yellow-100 text-yellow-700'
            }`}
          >
            {skill}
          </span>
        ))}
        {job.skills.length > 3 && (
          <span className="px-3 py-1 bg-gray-100 text-gray-600 rounded-full text-sm font-medium">
            +{job.skills.length - 3}
          </span>
        )}
      </div>

      {/* Apply Button */}
      <button 
        onClick={onApply}
        className="btn-dribbble-primary w-full group-hover:scale-[1.02] transition-transform"
      >
        <span className="flex items-center justify-center gap-2">
          Apply Now
          <CheckCircleIcon className="w-5 h-5" />
        </span>
      </button>
    </div>
  )
}
</file>

<file path="src/components/modern/ModernResumeUpload.tsx">
'use client'

import React, { useCallback } from 'react'
import { useDropzone } from 'react-dropzone'
import { DocumentArrowUpIcon, CheckCircleIcon } from '@heroicons/react/24/outline'

interface ResumeUploadProps {
  onFileUpload: (file: File) => void
  isUploaded?: boolean
  fileName?: string
}

export const ModernResumeUpload: React.FC<ResumeUploadProps> = ({ 
  onFileUpload, 
  isUploaded = false, 
  fileName 
}) => {
  const onDrop = useCallback((acceptedFiles: File[]) => {
    if (acceptedFiles.length > 0) {
      onFileUpload(acceptedFiles[0])
    }
  }, [onFileUpload])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
    },
    multiple: false,
  })

  if (isUploaded) {
    return (
      <div className="dribbble-card p-8 text-center">
        <div className="w-16 h-16 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-xl">
          <CheckCircleIcon className="w-8 h-8 text-white" />
        </div>
        <h3 className="text-xl font-bold text-foreground mb-2">Resume Uploaded!</h3>
        <p className="text-gray-600 mb-4">{fileName}</p>
        <button 
          {...getRootProps()} 
          className="btn-dribbble-secondary"
        >
          Upload Different File
        </button>
      </div>
    )
  }

  return (
    <div className="dribbble-card p-8">
      <div className="text-center mb-6">
        <h3 className="text-2xl font-bold text-foreground mb-2">📄 Upload Resume</h3>
        <p className="text-gray-600">Upload your PDF resume for AI-powered optimization</p>
      </div>

      <div
        {...getRootProps()}
        className={`
          border-3 border-dashed rounded-3xl p-12 text-center cursor-pointer transition-all duration-300
          ${isDragActive 
            ? 'border-blue-500 bg-blue-50 scale-105 shadow-lg' 
            : 'border-gray-300 hover:border-blue-400 hover:bg-blue-50 hover:shadow-md'
          }
        `}
      >
        <input {...getInputProps()} />
        
        <div className="w-20 h-20 bg-gradient-to-r from-blue-500 to-purple-600 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl">
          <DocumentArrowUpIcon className="w-10 h-10 text-white" />
        </div>

        {isDragActive ? (
          <div>
            <p className="text-xl font-semibold text-blue-600 mb-2">Drop your resume here!</p>
            <p className="text-gray-500">We'll analyze it with AI ✨</p>
          </div>
        ) : (
          <div>
            <p className="text-xl font-semibold text-foreground mb-2">
              Drag & drop your resume here
            </p>
            <p className="text-gray-500 mb-4">Or click to browse files</p>
            <div className="inline-flex px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-2xl font-semibold shadow-lg hover:shadow-xl transition-shadow">
              Choose File
            </div>
          </div>
        )}

        <p className="text-xs text-gray-400 mt-4">PDF files only • Max 10MB</p>
      </div>
    </div>
  )
}
</file>

<file path="src/components/modern/SearchHeroSection.tsx">
'use client'

import React, { useState } from 'react'
import { MagnifyingGlassIcon, FunnelIcon } from '@heroicons/react/24/outline'

interface SearchHeroProps {
  onSearch?: (query: string, location: string) => void
  onFilterClick?: () => void
}

export const SearchHeroSection: React.FC<SearchHeroProps> = ({ onSearch, onFilterClick }) => {
  const [searchQuery, setSearchQuery] = useState('')
  const [location, setLocation] = useState('')

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    onSearch?.(searchQuery, location)
  }

  return (
    <div className="relative overflow-hidden rounded-3xl mb-8 mx-4">
      {/* Animated Background */}
      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-red-500 p-8 relative">
        {/* Floating Elements */}
        <div className="absolute top-4 right-4 w-32 h-32 bg-yellow-400 bg-opacity-20 rounded-full animate-bounce blur-xl" style={{ animationDelay: '0s', animationDuration: '3s' }}></div>
        <div className="absolute bottom-4 left-4 w-20 h-20 bg-card bg-opacity-10 rounded-2xl animate-bounce blur-lg" style={{ animationDelay: '1s', animationDuration: '4s' }}></div>
        <div className="absolute top-1/2 left-1/4 w-16 h-16 bg-red-400 bg-opacity-15 rounded-full animate-bounce blur-lg" style={{ animationDelay: '2s', animationDuration: '5s' }}></div>

        <div className="relative z-10 text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4 drop-shadow-lg">
            🚀 Find Your Dream Job
          </h1>
          <p className="text-white text-opacity-90 text-lg font-medium">
            Discover opportunities that match your skills and passion
          </p>
        </div>

        {/* Search Bar */}
        <form onSubmit={handleSearch} className="relative z-10 max-w-4xl mx-auto">
          <div className="bg-card bg-opacity-95 backdrop-blur-sm rounded-2xl p-6 shadow-2xl">
            <div className="flex flex-col md:flex-row gap-4">
              {/* Job Title Search */}
              <div className="flex-1 relative">
                <MagnifyingGlassIcon className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="Job title or keyword"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full pl-12 pr-4 py-4 bg-gray-50 border-2 border-border rounded-xl text-foreground placeholder-gray-500 focus:border-blue-500 focus:ring-0 focus:outline-none transition-colors"
                />
              </div>

              {/* Location Search */}
              <div className="flex-1 relative">
                <input
                  type="text"
                  placeholder="Location"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  className="w-full px-4 py-4 bg-gray-50 border-2 border-border rounded-xl text-foreground placeholder-gray-500 focus:border-blue-500 focus:ring-0 focus:outline-none transition-colors"
                />
              </div>

              {/* Filter Button */}
              <button 
                type="button"
                onClick={onFilterClick}
                className="px-6 py-4 bg-gray-100 hover:bg-gray-200 rounded-xl transition-colors flex items-center justify-center"
              >
                <FunnelIcon className="w-5 h-5 text-gray-600" />
              </button>

              {/* Search Button */}
              <button 
                type="submit"
                className="btn-dribbble-primary px-8 py-4 flex items-center justify-center gap-2 whitespace-nowrap"
              >
                <MagnifyingGlassIcon className="w-5 h-5" />
                Search Jobs
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  )
}
</file>

<file path="src/components/modern/VibrantPageHeader.tsx">
'use client'

import React from 'react'

interface PageHeaderProps {
  title: string
  subtitle: string
  progress?: number
  showProgress?: boolean
}

export const VibrantPageHeader: React.FC<PageHeaderProps> = ({ 
  title, 
  subtitle, 
  progress = 0, 
  showProgress = false 
}) => {
  return (
    <div className="relative overflow-hidden rounded-b-[40px] mb-8">
      {/* Gradient Background */}
      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-red-500 px-6 py-12">
        {/* Decorative Elements */}
        <div className="absolute top-4 right-4 w-20 h-20 bg-card bg-opacity-10 rounded-full blur-xl"></div>
        <div className="absolute bottom-4 left-4 w-12 h-12 bg-yellow-400 bg-opacity-20 rounded-2xl blur-lg"></div>
        
        {/* Content */}
        <div className="relative z-10 text-center">
          <h1 className="text-4xl font-bold text-white mb-4 drop-shadow-lg">
            {title}
          </h1>
          <p className="text-white text-opacity-90 text-lg font-medium max-w-md mx-auto">
            {subtitle}
          </p>
          
          {/* Progress Bar */}
          {showProgress && (
            <div className="mt-6 max-w-xs mx-auto">
              <div className="flex justify-between items-center mb-2">
                <span className="text-white text-sm font-medium">Progress</span>
                <span className="text-white text-sm font-bold">{progress}%</span>
              </div>
              <div className="w-full bg-card bg-opacity-20 rounded-full h-3 overflow-hidden">
                <div 
                  className="bg-gradient-to-r from-yellow-400 to-orange-500 h-3 rounded-full transition-all duration-500 ease-out shadow-lg"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/onboarding/OnboardingRedirect.tsx">
'use client'

import { useEffect, useRef } from 'react'
import { useSession } from 'next-auth/react'
import { useRouter, usePathname } from 'next/navigation'

/**
 * Client-side component that redirects new users to onboarding quiz
 * Place this in the root layout or dashboard pages
 */
export function OnboardingRedirect() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const pathname = usePathname()
  const hasRedirected = useRef(false)

  useEffect(() => {
    // Only check if authenticated and not already on quiz/auth pages
    if (status === 'authenticated' && !pathname.startsWith('/onboarding') && !pathname.startsWith('/auth')) {
      const user = session?.user as any
      
      // Check if user has completed onboarding
      if (user && user.onboardingComplete === false && !hasRedirected.current) {
        console.log('[ONBOARDING] User needs to complete quiz, redirecting...', {
          email: user.email,
          onboardingComplete: user.onboardingComplete,
          pathname
        })
        hasRedirected.current = true
        router.push('/onboarding/quiz')
      }
    }
  }, [status, session, pathname, router])

  return null // This component doesn't render anything
}
</file>

<file path="src/components/onboarding/ProgressBar.tsx">
'use client'

import { motion } from 'framer-motion'

interface ProgressBarProps {
  currentStep: number
  totalSteps: number
}

export function ProgressBar({ currentStep, totalSteps }: ProgressBarProps) {
  const percentage = (currentStep / totalSteps) * 100

  return (
    <div className="sticky top-0 z-50 bg-card border-b border-gray-200 dark:border-gray-800 px-4 py-3">
      <div className="max-w-2xl mx-auto">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Question {currentStep} of {totalSteps}
          </span>
          <span className="text-sm text-gray-500 dark:text-gray-400">
            {Math.round(percentage)}%
          </span>
        </div>
        <div className="progress-modern">
          <motion.div
            className="progress-fill"
            initial={{ width: 0 }}
            animate={{ width: `${percentage}%` }}
            transition={{ duration: 0.5, ease: 'easeOut' }}
          />
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/onboarding/QuizQuestion.tsx">
'use client'

import { motion } from 'framer-motion'
import { ReactNode } from 'react'

interface QuizQuestionProps {
  title: string
  subtitle?: string
  children: ReactNode
  onNext: () => void
  onBack?: () => void
  nextLabel?: string
  nextDisabled?: boolean
  showBack?: boolean
}

export function QuizQuestion({
  title,
  subtitle,
  children,
  onNext,
  onBack,
  nextLabel = 'Continue',
  nextDisabled = false,
  showBack = true
}: QuizQuestionProps) {
  return (
    <motion.div
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: -20 }}
      transition={{ duration: 0.3 }}
      className="flex flex-col min-h-[calc(100vh-80px)] px-4 py-6"
    >
      <div className="max-w-2xl mx-auto w-full flex-1 flex flex-col">
        {/* Question Header */}
        <div className="mb-8">
          <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white mb-2">
            {title}
          </h2>
          {subtitle && (
            <p className="text-gray-600 dark:text-gray-400 text-sm sm:text-base">
              {subtitle}
            </p>
          )}
        </div>

        {/* Question Content */}
        <div className="flex-1 mb-6">
          {children}
        </div>

        {/* Navigation Buttons */}
        <div className="flex items-center gap-3 pt-4 border-t border-gray-200 dark:border-gray-800">
          {showBack && onBack && (
            <button
              onClick={onBack}
              className="px-6 py-3 rounded-xl font-medium text-gray-700 dark:text-gray-300 bg-card border border-gray-300 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all min-h-[44px]"
            >
              ← Back
            </button>
          )}
          <button
            onClick={onNext}
            disabled={nextDisabled}
            className="flex-1 px-6 py-3 rounded-xl font-semibold text-white bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all shadow-lg hover:shadow-xl min-h-[44px]"
          >
            {nextLabel} →
          </button>
        </div>
      </div>
    </motion.div>
  )
}
</file>

<file path="src/components/onboarding/SuccessAnimation.tsx">
'use client'

import { useEffect } from 'react'
import confetti from 'canvas-confetti'
import { motion } from 'framer-motion'

interface SuccessAnimationProps {
  onComplete?: () => void
}

export function SuccessAnimation({ onComplete }: SuccessAnimationProps) {
  useEffect(() => {
    // Fire confetti
    const duration = 3000
    const animationEnd = Date.now() + duration
    const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 }

    function randomInRange(min: number, max: number) {
      return Math.random() * (max - min) + min
    }

    const interval = setInterval(function() {
      const timeLeft = animationEnd - Date.now()

      if (timeLeft <= 0) {
        clearInterval(interval)
        return
      }

      const particleCount = 50 * (timeLeft / duration)
      
      confetti({
        ...defaults,
        particleCount,
        origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
      })
      confetti({
        ...defaults,
        particleCount,
        origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
      })
    }, 250)

    // Auto-complete after animation
    const timer = setTimeout(() => {
      onComplete?.()
    }, 3500)

    return () => {
      clearInterval(interval)
      clearTimeout(timer)
    }
  }, [onComplete])

  return (
    <div className="flex flex-col items-center justify-center min-h-[calc(100vh-80px)] px-4">
      <motion.div
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ type: 'spring', stiffness: 200, damping: 15 }}
        className="text-center"
      >
        {/* Checkmark Circle */}
        <div className="w-24 h-24 sm:w-32 sm:h-32 mx-auto mb-6 rounded-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center shadow-2xl">
          <motion.svg
            initial={{ pathLength: 0 }}
            animate={{ pathLength: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="w-12 h-12 sm:w-16 sm:h-16 text-white"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth={3}
          >
            <motion.path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M5 13l4 4L19 7"
            />
          </motion.svg>
        </div>

        {/* Success Message */}
        <motion.h1
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-white mb-3"
        >
          Profile Complete! 🎉
        </motion.h1>

        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="text-lg text-gray-600 dark:text-gray-400 mb-8"
        >
          Let's find your next opportunity
        </motion.p>

        {/* Loading Indicator */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
          className="flex items-center justify-center gap-2 text-sm text-gray-500"
        >
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
          <span>Redirecting to resume upload...</span>
        </motion.div>
      </motion.div>
    </div>
  )
}
</file>

<file path="src/components/providers.tsx">
'use client'

import { SessionProvider } from 'next-auth/react'
import { usePathname } from 'next/navigation'
import { QueryClientProvider } from '@tanstack/react-query'
import { useEffect, useState } from 'react'
import { Toaster } from 'react-hot-toast'
import { ResumeProvider } from '@/components/resume-context'
import { initSentry, addRequestBreadcrumb } from '@/lib/sentry'
import toast from 'react-hot-toast'
import { createQueryClient } from '@/lib/query-client'

export function Providers({ children }: { children: React.ReactNode }) {
  const [queryClient] = useState(() => createQueryClient())
  const pathname = usePathname() || ''
  const DASHBOARD_PREFIXES = [
    '/dashboard',
    '/career-finder',
    '/analytics',
    '/job-boards',
    '/network',
    '/resume-builder',
    '/cover-letter',
    '/salary-negotiation',
    '/skill-analysis',
  ]
  const shouldMountResume = DASHBOARD_PREFIXES.some((p) => pathname.startsWith(p))
  useEffect(() => {
    // Initialize Sentry once on client
    try { initSentry() } catch {}
    // Global fetch wrapper to capture x-request-id and add breadcrumbs
    try {
      const originalFetch = window.fetch
      if (!(originalFetch as any).__wrapped) {
        const wrapped = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {
          try {
            const resp = await originalFetch(input, init)
            const reqId = resp.headers.get('x-request-id') || ''
            if (reqId) addRequestBreadcrumb(reqId)
            
            // CRITICAL FIX: Only show automatic toasts if NOT explicitly disabled
            // APIs can set 'x-skip-auto-toast' header to handle their own error messages
            const skipAutoToast = resp.headers.get('x-skip-auto-toast') === 'true'
            
            // Minimal default toasts for unhandled auth/rate/server errors
            if (!resp.ok && !skipAutoToast) {
              if (resp.status === 401) { toast.error('Session expired. Please sign in.'); }
              else if (resp.status === 429) { toast.error('Rate limit exceeded. Please wait and try again.'); }
              else if (resp.status >= 500) { toast.error('Server error. Please try again later.'); }
            }
            return resp
          } catch (e) {
            toast.error('Network error. Check your connection and try again.')
            throw e
          }
        }
        ;(wrapped as any).__wrapped = true
        window.fetch = wrapped as typeof window.fetch
      }
    } catch {}
  }, [])
  const content = (
    <>
      {children}
      <Toaster
        position="top-right"
        toastOptions={{
          duration: 4000,
          style: {
            background: '#363636',
            color: '#fff',
          },
        }}
      />
    </>
  )

  return (
    <SessionProvider>
      <QueryClientProvider client={queryClient}>
        {shouldMountResume ? <ResumeProvider>{content}</ResumeProvider> : content}
      </QueryClientProvider>
    </SessionProvider>
  )
}
</file>

<file path="src/components/resume-builder/ai-suggestions.tsx">
'use client'

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Sparkles, Copy, Check, Lightbulb, TrendingUp } from 'lucide-react'
import toast from 'react-hot-toast'

interface AISuggestionsProps {
  section: 'summary' | 'experience' | 'skills' | 'achievements'
  context?: {
    jobTitle?: string
    industry?: string
    yearsExperience?: number
    currentText?: string
  }
}

export function AISuggestions({ section, context = {} }: AISuggestionsProps) {
  const [suggestions, setSuggestions] = useState<string[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [copiedIndex, setCopiedIndex] = useState<number | null>(null)

  const getSuggestions = () => {
    setIsLoading(true)
    
    // Simulate AI suggestions (in production, this would call your AI API)
    setTimeout(() => {
      const mockSuggestions = generateMockSuggestions(section, context)
      setSuggestions(mockSuggestions)
      setIsLoading(false)
    }, 1000)
  }

  const copyToClipboard = (text: string, index: number) => {
    navigator.clipboard.writeText(text)
    setCopiedIndex(index)
    toast.success('Copied to clipboard!')
    setTimeout(() => setCopiedIndex(null), 2000)
  }

  const generateMockSuggestions = (
    section: string,
    context: any
  ): string[] => {
    switch (section) {
      case 'summary':
        return [
          `Results-driven ${context.jobTitle || 'professional'} with ${context.yearsExperience || 5}+ years of experience in ${context.industry || 'technology'}. Proven track record of delivering high-impact solutions and driving business growth through innovative strategies and cross-functional collaboration.`,
          `Accomplished ${context.jobTitle || 'professional'} specializing in ${context.industry || 'technology'} with expertise in strategic planning, team leadership, and process optimization. Known for exceeding targets and implementing solutions that improve efficiency by 30%+.`,
          `Dynamic ${context.jobTitle || 'professional'} with a passion for ${context.industry || 'innovation'}. Combines technical expertise with business acumen to deliver measurable results. Skilled in stakeholder management, project delivery, and continuous improvement.`
        ]
      
      case 'experience':
        return [
          'Led cross-functional team of 12 engineers to deliver enterprise-scale platform, resulting in 40% increase in user engagement and $2M annual revenue growth',
          'Spearheaded implementation of agile methodologies across 5 departments, reducing project delivery time by 35% and improving team productivity by 50%',
          'Architected and deployed cloud-native microservices infrastructure serving 10M+ daily active users with 99.99% uptime',
          'Mentored 8 junior developers, establishing coding standards and best practices that reduced bug rate by 60%',
          'Collaborated with C-suite executives to define product roadmap, securing $5M in additional funding for strategic initiatives'
        ]
      
      case 'skills':
        return [
          'Technical Skills: Python, JavaScript, React, Node.js, AWS, Docker, Kubernetes, PostgreSQL, MongoDB',
          'Soft Skills: Leadership, Strategic Planning, Cross-functional Collaboration, Stakeholder Management, Agile/Scrum',
          'Industry Skills: Cloud Architecture, DevOps, CI/CD, Microservices, API Design, System Design',
          'Tools & Platforms: Git, JIRA, Confluence, Slack, Figma, Tableau, Salesforce'
        ]
      
      case 'achievements':
        return [
          'Increased system performance by 250% through database optimization and caching strategies',
          'Reduced operational costs by $500K annually by migrating legacy systems to cloud infrastructure',
          'Achieved 98% customer satisfaction score through implementation of automated support systems',
          'Grew user base from 100K to 1M+ users in 12 months through strategic product enhancements',
          'Received "Employee of the Year" award for exceptional contributions to company growth'
        ]
      
      default:
        return []
    }
  }

  const getSectionTitle = () => {
    switch (section) {
      case 'summary':
        return 'Professional Summary Suggestions'
      case 'experience':
        return 'Achievement Bullet Points'
      case 'skills':
        return 'Skills Suggestions'
      case 'achievements':
        return 'Quantifiable Achievements'
      default:
        return 'AI Suggestions'
    }
  }

  const getSectionIcon = () => {
    switch (section) {
      case 'summary':
        return <Lightbulb className="w-5 h-5" />
      case 'experience':
      case 'achievements':
        return <TrendingUp className="w-5 h-5" />
      case 'skills':
        return <Sparkles className="w-5 h-5" />
      default:
        return <Sparkles className="w-5 h-5" />
    }
  }

  return (
    <Card className="border-2 border-purple-200 dark:border-purple-800">
      <CardHeader>
        <CardTitle className="text-lg flex items-center justify-between">
          <span className="flex items-center gap-2">
            {getSectionIcon()}
            {getSectionTitle()}
          </span>
          <Badge variant="outline" className="bg-purple-50 dark:bg-purple-950/30 text-purple-700 dark:text-purple-300 border-purple-300 dark:border-purple-700">
            AI-Powered
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {suggestions.length === 0 ? (
          <div className="text-center py-8">
            <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4">
              <Sparkles className="w-8 h-8 text-white" />
            </div>
            <p className="text-sm text-muted-foreground mb-4">
              Get AI-powered suggestions tailored to your role and industry
            </p>
            <Button
              onClick={getSuggestions}
              disabled={isLoading}
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
            >
              {isLoading ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Generating...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 mr-2" />
                  Generate Suggestions
                </>
              )}
            </Button>
          </div>
        ) : (
          <>
            <div className="space-y-3">
              {suggestions.map((suggestion, index) => (
                <div
                  key={index}
                  className="p-4 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950/20 dark:to-pink-950/20 border border-purple-200 dark:border-purple-800 rounded-lg hover:shadow-md transition-all group"
                >
                  <div className="flex items-start justify-between gap-3">
                    <p className="text-sm text-foreground flex-1 leading-relaxed">
                      {suggestion}
                    </p>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(suggestion, index)}
                      className="opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      {copiedIndex === index ? (
                        <Check className="w-4 h-4 text-green-600" />
                      ) : (
                        <Copy className="w-4 h-4" />
                      )}
                    </Button>
                  </div>
                </div>
              ))}
            </div>

            <div className="flex gap-2">
              <Button
                onClick={getSuggestions}
                variant="outline"
                size="sm"
                className="flex-1"
                disabled={isLoading}
              >
                <Sparkles className="w-4 h-4 mr-2" />
                Generate More
              </Button>
            </div>

            <div className="p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
              <p className="text-xs text-blue-800 dark:text-blue-300">
                <strong>💡 Tip:</strong> Click the copy icon to add suggestions to your resume. Customize them to match your specific experience!
              </p>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/components/resume-builder/ats-checker.tsx">
'use client'

import { useState, useEffect } from 'react'
import { CheckCircle, AlertTriangle, XCircle, Zap, Loader2 } from 'lucide-react'

interface ATSIssue {
  severity: 'critical' | 'warning' | 'info'
  title: string
  description: string
  fix?: () => void
}

interface ATSAnalysis {
  score: number
  formatting: number
  keywords: number
  completeness: number
  issues: ATSIssue[]
}

interface ATSCheckerProps {
  resume: any
  onAutoFix?: (issue: ATSIssue) => void
}

export function ATSChecker({ resume, onAutoFix }: ATSCheckerProps) {
  const [analysis, setAnalysis] = useState<ATSAnalysis | null>(null)
  const [checking, setChecking] = useState(false)

  useEffect(() => {
    if (resume) {
      checkATS()
    }
  }, [resume])

  const checkATS = () => {
    setChecking(true)
    
    // Simulate ATS analysis
    setTimeout(() => {
      const issues: ATSIssue[] = []
      let score = 100

      // Check 1: Contact Information
      if (!resume.personalInfo?.email || !resume.personalInfo?.phone) {
        issues.push({
          severity: 'critical',
          title: 'Missing Contact Info',
          description: 'Add email and phone number for ATS compatibility'
        })
        score -= 20
      }

      // Check 2: Experience Section
      if (!resume.experience || resume.experience.length === 0) {
        issues.push({
          severity: 'critical',
          title: 'No Work Experience',
          description: 'Add at least one work experience entry'
        })
        score -= 15
      }

      // Check 3: Education Section
      if (!resume.education || resume.education.length === 0) {
        issues.push({
          severity: 'warning',
          title: 'No Education Listed',
          description: 'Add your educational background'
        })
        score -= 10
      }

      // Check 4: Skills Section
      const skillCount = (resume.skills?.technical?.length || 0) + (resume.skills?.soft?.length || 0)
      if (skillCount < 5) {
        issues.push({
          severity: 'warning',
          title: 'Low Keyword Count',
          description: 'Add more skills and keywords (minimum 5 recommended)'
        })
        score -= 10
      }

      // Check 5: Achievement Metrics
      const hasMetrics = resume.experience?.some((exp: any) =>
        exp.achievements?.some((a: string) => /\d+/.test(a))
      )
      if (!hasMetrics) {
        issues.push({
          severity: 'info',
          title: 'Missing Quantifiable Achievements',
          description: 'Add numbers, percentages, or metrics to show impact'
        })
        score -= 8
      }

      // Check 6: Summary
      if (!resume.personalInfo?.summary || resume.personalInfo.summary.length < 50) {
        issues.push({
          severity: 'info',
          title: 'Weak Professional Summary',
          description: 'Add a compelling summary (50+ characters recommended)'
        })
        score -= 5
      }

      setAnalysis({
        score: Math.max(0, score),
        formatting: 95,
        keywords: skillCount >= 10 ? 90 : skillCount >= 5 ? 70 : 40,
        completeness: resume.experience?.length > 0 && resume.education?.length > 0 ? 90 : 60,
        issues
      })
      setChecking(false)
    }, 1000)
  }

  if (checking) {
    return (
      <div className="bg-card rounded-xl border-2 border-border p-8 text-center">
        <Loader2 className="w-12 h-12 animate-spin text-blue-600 mx-auto mb-4" />
        <p className="text-gray-600">Analyzing ATS compatibility...</p>
      </div>
    )
  }

  if (!analysis) return null

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600 bg-green-50 border-green-500'
    if (score >= 60) return 'text-yellow-600 bg-yellow-50 border-yellow-500'
    return 'text-red-600 bg-red-50 border-red-500'
  }

  const getScoreLabel = (score: number) => {
    if (score >= 80) return 'Excellent'
    if (score >= 60) return 'Good'
    return 'Needs Work'
  }

  return (
    <div className="bg-card rounded-xl border-2 border-border p-6 space-y-6">
      {/* Score Circle */}
      <div className="text-center">
        <div className={`inline-flex flex-col items-center justify-center w-32 h-32 rounded-full border-4 ${getScoreColor(analysis.score)}`}>
          <div className="text-4xl font-bold">{analysis.score}</div>
          <div className="text-sm font-semibold">ATS Score</div>
        </div>
        <p className="mt-3 text-lg font-semibold text-foreground">{getScoreLabel(analysis.score)}</p>
      </div>

      {/* Score Breakdown */}
      <div className="space-y-3">
        <div>
          <div className="flex justify-between text-sm mb-1">
            <span className="text-gray-700">Formatting</span>
            <span className="font-semibold text-foreground">{analysis.formatting}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-green-500 h-2 rounded-full transition-all"
              style={{ width: `${analysis.formatting}%` }}
            />
          </div>
        </div>

        <div>
          <div className="flex justify-between text-sm mb-1">
            <span className="text-gray-700">Keywords</span>
            <span className="font-semibold text-foreground">{analysis.keywords}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className={`h-2 rounded-full transition-all ${
                analysis.keywords >= 70 ? 'bg-green-500' : 'bg-yellow-500'
              }`}
              style={{ width: `${analysis.keywords}%` }}
            />
          </div>
        </div>

        <div>
          <div className="flex justify-between text-sm mb-1">
            <span className="text-gray-700">Completeness</span>
            <span className="font-semibold text-foreground">{analysis.completeness}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className={`h-2 rounded-full transition-all ${
                analysis.completeness >= 70 ? 'bg-green-500' : 'bg-yellow-500'
              }`}
              style={{ width: `${analysis.completeness}%` }}
            />
          </div>
        </div>
      </div>

      {/* Issues */}
      {analysis.issues.length > 0 && (
        <div className="space-y-3">
          <h4 className="font-bold text-foreground flex items-center gap-2">
            <Zap className="w-5 h-5 text-yellow-500" />
            Issues Detected ({analysis.issues.length})
          </h4>
          {analysis.issues.map((issue, i) => (
            <div
              key={i}
              className={`p-4 rounded-lg border-l-4 ${
                issue.severity === 'critical'
                  ? 'bg-red-50 border-red-500'
                  : issue.severity === 'warning'
                  ? 'bg-yellow-50 border-yellow-500'
                  : 'bg-blue-50 border-blue-500'
              }`}
            >
              <div className="flex items-start gap-3">
                {issue.severity === 'critical' ? (
                  <XCircle className="w-5 h-5 text-red-500 flex-shrink-0 mt-0.5" />
                ) : issue.severity === 'warning' ? (
                  <AlertTriangle className="w-5 h-5 text-yellow-500 flex-shrink-0 mt-0.5" />
                ) : (
                  <CheckCircle className="w-5 h-5 text-blue-500 flex-shrink-0 mt-0.5" />
                )}
                <div className="flex-1">
                  <h5 className="font-semibold text-foreground mb-1">{issue.title}</h5>
                  <p className="text-sm text-gray-700">{issue.description}</p>
                  {issue.fix && onAutoFix && (
                    <button
                      onClick={() => onAutoFix(issue)}
                      className="mt-2 text-sm font-semibold text-blue-600 hover:text-blue-700"
                    >
                      ✨ Auto-Fix
                    </button>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Refresh Button */}
      <button
        onClick={checkATS}
        className="w-full py-2 px-4 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors font-semibold"
      >
        🔄 Re-check ATS Score
      </button>
    </div>
  )
}
</file>

<file path="src/components/resume-builder/ats-score.tsx">
'use client'

import { useMemo } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { CheckCircle, AlertCircle, XCircle, Shield } from 'lucide-react'

interface ResumeData {
  personalInfo: {
    fullName: string
    email: string
    phone: string
    location: string
    linkedin?: string
    website?: string
    summary: string
  }
  experience: Array<any>
  education: Array<any>
  skills: {
    technical: string[]
    soft: string[]
    languages: Array<any>
    certifications: Array<any>
  }
  projects: Array<any>
}

interface ATSScoreProps {
  resumeData: ResumeData
  selectedTemplate: string
}

interface ScoreItem {
  category: string
  score: number
  maxScore: number
  status: 'pass' | 'warning' | 'fail'
  feedback: string
}

export function ATSScore({ resumeData, selectedTemplate }: ATSScoreProps) {
  const analysis = useMemo(() => {
    const scores: ScoreItem[] = []

    // 1. Contact Information (15 points)
    let contactScore = 0
    if (resumeData.personalInfo.fullName) contactScore += 4
    if (resumeData.personalInfo.email && resumeData.personalInfo.email.includes('@')) contactScore += 4
    if (resumeData.personalInfo.phone) contactScore += 3
    if (resumeData.personalInfo.location) contactScore += 2
    if (resumeData.personalInfo.linkedin) contactScore += 2

    scores.push({
      category: 'Contact Information',
      score: contactScore,
      maxScore: 15,
      status: contactScore >= 12 ? 'pass' : contactScore >= 8 ? 'warning' : 'fail',
      feedback: contactScore >= 12 
        ? 'Complete contact information' 
        : 'Add missing contact details (LinkedIn, phone, or location)'
    })

    // 2. Professional Summary (10 points)
    let summaryScore = 0
    const summary = resumeData.personalInfo.summary || ''
    if (summary.length >= 50) summaryScore += 3
    if (summary.length >= 100) summaryScore += 3
    if (summary.length >= 150 && summary.length <= 300) summaryScore += 4

    scores.push({
      category: 'Professional Summary',
      score: summaryScore,
      maxScore: 10,
      status: summaryScore >= 8 ? 'pass' : summaryScore >= 5 ? 'warning' : 'fail',
      feedback: summaryScore >= 8
        ? 'Strong professional summary'
        : summary.length < 50
        ? 'Summary too short (aim for 100-250 words)'
        : summary.length > 300
        ? 'Summary too long (keep it under 250 words)'
        : 'Expand your summary with key achievements'
    })

    // 3. Work Experience (30 points)
    let experienceScore = 0
    const hasExperience = resumeData.experience.length > 0
    if (hasExperience) experienceScore += 10

    const experienceWithBullets = resumeData.experience.filter(exp => 
      exp.achievements && exp.achievements.length >= 3
    ).length
    experienceScore += Math.min(experienceWithBullets * 5, 15)

    const experienceWithQuantifiableResults = resumeData.experience.filter(exp =>
      exp.description && /\d+%|\$\d+|[0-9]+ (users|clients|projects|team)/i.test(exp.description)
    ).length
    experienceScore += Math.min(experienceWithQuantifiableResults * 5, 5)

    scores.push({
      category: 'Work Experience',
      score: experienceScore,
      maxScore: 30,
      status: experienceScore >= 24 ? 'pass' : experienceScore >= 15 ? 'warning' : 'fail',
      feedback: experienceScore >= 24
        ? 'Excellent work experience section'
        : experienceWithBullets === 0
        ? 'Add bullet points with achievements for each role'
        : experienceWithQuantifiableResults === 0
        ? 'Add quantifiable results (numbers, percentages, metrics)'
        : 'Expand achievements with more specific details'
    })

    // 4. Education (15 points)
    let educationScore = 0
    if (resumeData.education.length > 0) educationScore += 10
    const educationWithDetails = resumeData.education.filter(edu =>
      edu.degree && edu.institution && edu.graduationDate
    ).length
    educationScore += Math.min(educationWithDetails * 5, 5)

    scores.push({
      category: 'Education',
      score: educationScore,
      maxScore: 15,
      status: educationScore >= 12 ? 'pass' : educationScore >= 8 ? 'warning' : 'fail',
      feedback: educationScore >= 12
        ? 'Complete education information'
        : 'Add degree, institution, and graduation date'
    })

    // 5. Skills (20 points)
    let skillsScore = 0
    const totalSkills = resumeData.skills.technical.length + resumeData.skills.soft.length
    if (totalSkills >= 5) skillsScore += 8
    if (totalSkills >= 10) skillsScore += 6
    if (totalSkills >= 15) skillsScore += 6

    scores.push({
      category: 'Skills',
      score: skillsScore,
      maxScore: 20,
      status: skillsScore >= 16 ? 'pass' : skillsScore >= 10 ? 'warning' : 'fail',
      feedback: skillsScore >= 16
        ? 'Comprehensive skills list'
        : totalSkills < 5
        ? 'Add at least 10-15 relevant skills'
        : 'Add more industry-specific skills'
    })

    // 6. Formatting & ATS Compatibility (10 points)
    let formatScore = 0
    // Simple templates score higher for ATS
    if (['minimal', 'professional'].includes(selectedTemplate)) formatScore += 5
    else if (['modern', 'tech'].includes(selectedTemplate)) formatScore += 4
    else formatScore += 3

    // Check for good formatting practices
    const hasConsistentDates = resumeData.experience.every(exp => exp.startDate && exp.endDate)
    if (hasConsistentDates) formatScore += 3

    const hasNoSpecialChars = !resumeData.personalInfo.fullName.match(/[^a-zA-Z\s\-\']/g)
    if (hasNoSpecialChars) formatScore += 2

    scores.push({
      category: 'ATS Compatibility',
      score: formatScore,
      maxScore: 10,
      status: formatScore >= 8 ? 'pass' : formatScore >= 5 ? 'warning' : 'fail',
      feedback: formatScore >= 8
        ? 'Excellent ATS compatibility'
        : !hasConsistentDates
        ? 'Ensure all dates are filled in consistently'
        : 'Consider using a simpler template for better ATS parsing'
    })

    const totalScore = scores.reduce((sum, item) => sum + item.score, 0)
    const maxTotalScore = scores.reduce((sum, item) => sum + item.maxScore, 0)
    const percentage = Math.round((totalScore / maxTotalScore) * 100)

    return { scores, totalScore, maxTotalScore, percentage }
  }, [resumeData, selectedTemplate])

  const getScoreColor = (percentage: number) => {
    if (percentage >= 80) return 'text-green-600'
    if (percentage >= 60) return 'text-yellow-600'
    return 'text-orange-600'
  }

  const getScoreLabel = (percentage: number) => {
    if (percentage >= 90) return 'Excellent'
    if (percentage >= 80) return 'Very Good'
    if (percentage >= 70) return 'Good'
    if (percentage >= 60) return 'Fair'
    return 'Needs Improvement'
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pass':
        return <CheckCircle className="w-4 h-4 text-green-600" />
      case 'warning':
        return <AlertCircle className="w-4 h-4 text-yellow-600" />
      case 'fail':
        return <XCircle className="w-4 h-4 text-red-600" />
    }
  }

  return (
    <Card className="sticky top-4">
      <CardHeader>
        <CardTitle className="text-lg flex items-center justify-between">
          <span className="flex items-center gap-2">
            <Shield className="w-5 h-5" />
            ATS Score
          </span>
          <Badge 
            variant="outline" 
            className={`${getScoreColor(analysis.percentage)} border-current text-lg px-3 py-1`}
          >
            {analysis.percentage}%
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Overall Score */}
        <div>
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-foreground">Overall ATS Compatibility</span>
            <span className={`text-sm font-bold ${getScoreColor(analysis.percentage)}`}>
              {getScoreLabel(analysis.percentage)}
            </span>
          </div>
          <Progress value={analysis.percentage} className="h-3" />
          <p className="text-xs text-muted-foreground mt-2">
            {analysis.totalScore} / {analysis.maxTotalScore} points
          </p>
        </div>

        {/* Category Breakdown */}
        <div className="space-y-3">
          <h4 className="text-sm font-semibold text-foreground">Category Breakdown</h4>
          {analysis.scores.map((item, index) => (
            <div
              key={index}
              className="space-y-2 p-3 rounded-lg hover:bg-muted/50 transition-colors"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  {getStatusIcon(item.status)}
                  <span className="text-sm font-medium text-foreground">{item.category}</span>
                </div>
                <span className="text-sm text-muted-foreground">
                  {item.score}/{item.maxScore}
                </span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5">
                <div
                  className={`h-1.5 rounded-full transition-all ${
                    item.status === 'pass' 
                      ? 'bg-green-500' 
                      : item.status === 'warning'
                      ? 'bg-yellow-500'
                      : 'bg-red-500'
                  }`}
                  style={{ width: `${(item.score / item.maxScore) * 100}%` }}
                />
              </div>
              <p className="text-xs text-muted-foreground">{item.feedback}</p>
            </div>
          ))}
        </div>

        {/* Tips */}
        {analysis.percentage < 80 && (
          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
            <p className="text-xs text-blue-800 dark:text-blue-300 font-medium mb-2">
              💡 Quick Wins to Improve Score:
            </p>
            <ul className="text-xs text-blue-700 dark:text-blue-400 space-y-1">
              {analysis.scores
                .filter(item => item.status !== 'pass')
                .slice(0, 3)
                .map((item, index) => (
                  <li key={index}>• {item.feedback}</li>
                ))}
            </ul>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/components/resume-builder/bullet-point-generator.tsx">
'use client'

import { useState } from 'react'
import { Wand2, Loader2, Plus, Sparkles } from 'lucide-react'

interface BulletPointGeneratorProps {
  role?: string
  company?: string
  achievements?: string[]
  onAddBullet: (bullet: string) => void
}

export function BulletPointGenerator({ role, company, achievements, onAddBullet }: BulletPointGeneratorProps) {
  const [generatedBullets, setGeneratedBullets] = useState<string[]>([])
  const [customInput, setCustomInput] = useState('')
  const [loading, setLoading] = useState(false)

  const generateBullets = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/resume/generate-bullets', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ role, company, achievements })
      })

      if (response.ok) {
        const data = await response.json()
        setGeneratedBullets(data.bullets)
      } else {
        console.error('Failed to generate bullets')
      }
    } catch (error) {
      console.error('Error generating bullets:', error)
    } finally {
      setLoading(false)
    }
  }

  const enhanceCustomInput = async () => {
    if (!customInput.trim()) return

    setLoading(true)
    try {
      const response = await fetch('/api/resume/generate-bullets', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          input: customInput,
          role,
          company
        })
      })

      if (response.ok) {
        const data = await response.json()
        setGeneratedBullets(data.bullets)
        setCustomInput('')
      }
    } catch (error) {
      console.error('Error enhancing input:', error)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="bg-gradient-to-br from-purple-50 to-blue-50 rounded-xl p-6 border-2 border-purple-200">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Sparkles className="w-5 h-5 text-purple-600" />
          <h4 className="font-bold text-lg text-foreground">AI Bullet Point Generator</h4>
        </div>
        <button
          onClick={generateBullets}
          disabled={loading}
          className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50 flex items-center gap-2"
        >
          {loading ? (
            <>
              <Loader2 className="w-4 h-4 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <Wand2 className="w-4 h-4" />
              {generatedBullets.length > 0 ? 'Regenerate' : 'Generate'}
            </>
          )}
        </button>
      </div>

      {generatedBullets.length > 0 && (
        <div className="space-y-3 mb-4">
          <p className="text-sm text-gray-600">Click any bullet to add it to your resume:</p>
          {generatedBullets.map((bullet, i) => (
            <button
              key={i}
              onClick={() => onAddBullet(bullet)}
              className="w-full text-left p-4 bg-card rounded-lg border-2 border-border hover:border-purple-500 hover:bg-purple-50 transition-all group"
            >
              <div className="flex items-start gap-3">
                <span className="flex-shrink-0 w-6 h-6 bg-purple-100 text-purple-600 rounded-full flex items-center justify-center text-sm font-bold group-hover:bg-purple-600 group-hover:text-white transition-colors">
                  {i + 1}
                </span>
                <span className="flex-1 text-gray-700 group-hover:text-foreground">{bullet}</span>
                <Plus className="w-5 h-5 text-gray-400 group-hover:text-purple-600 transition-colors" />
              </div>
            </button>
          ))}
        </div>
      )}

      <div className="space-y-3">
        <div className="relative">
          <textarea
            placeholder="Or describe what you did in plain English... AI will transform it into a powerful achievement bullet!"
            value={customInput}
            onChange={(e) => setCustomInput(e.target.value)}
            className="w-full p-4 border-2 border-border rounded-lg focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-all resize-none"
            rows={3}
          />
        </div>
        <button
          onClick={enhanceCustomInput}
          disabled={loading || !customInput.trim()}
          className="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 font-semibold"
        >
          {loading ? (
            <>
              <Loader2 className="w-5 h-5 animate-spin" />
              Enhancing...
            </>
          ) : (
            <>
              <Sparkles className="w-5 h-5" />
              ✨ Enhance This
            </>
          )}
        </button>
      </div>

      <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
        <p className="text-xs text-blue-800">
          <strong>💡 Tip:</strong> AI works best when you provide context. Mention numbers, timeframes, or specific outcomes!
        </p>
      </div>
    </div>
  )
}
</file>

<file path="src/components/resume-builder/date-picker.tsx">
'use client'

import { useState } from 'react'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Calendar } from 'lucide-react'

interface DatePickerProps {
  label: string
  value: string
  onChange: (value: string) => void
  allowCurrent?: boolean
  isCurrent?: boolean
  onCurrentChange?: (current: boolean) => void
}

const MONTHS = [
  'January', 'February', 'March', 'April', 'May', 'June',
  'July', 'August', 'September', 'October', 'November', 'December'
]

const YEARS = Array.from({ length: 50 }, (_, i) => new Date().getFullYear() - i)

export function DatePicker({
  label,
  value,
  onChange,
  allowCurrent = false,
  isCurrent = false,
  onCurrentChange
}: DatePickerProps) {
  // Parse existing value (format: "Month YYYY" or "MM/YYYY")
  const parseDate = (dateStr: string) => {
    if (!dateStr || dateStr === 'Present') return { month: '', year: '' }
    
    // Try "Month YYYY" format
    const parts = dateStr.split(' ')
    if (parts.length === 2) {
      return { month: parts[0], year: parts[1] }
    }
    
    // Try "MM/YYYY" format
    const slashParts = dateStr.split('/')
    if (slashParts.length === 2) {
      const monthIndex = parseInt(slashParts[0]) - 1
      return { 
        month: MONTHS[monthIndex] || '', 
        year: slashParts[1] 
      }
    }
    
    return { month: '', year: '' }
  }

  const { month: initialMonth, year: initialYear } = parseDate(value)
  const [selectedMonth, setSelectedMonth] = useState(initialMonth)
  const [selectedYear, setSelectedYear] = useState(initialYear)

  const handleMonthChange = (month: string) => {
    setSelectedMonth(month)
    if (month && selectedYear) {
      onChange(`${month} ${selectedYear}`)
    }
  }

  const handleYearChange = (year: string) => {
    setSelectedYear(year)
    if (selectedMonth && year) {
      onChange(`${selectedMonth} ${year}`)
    }
  }

  const handleCurrentToggle = () => {
    if (onCurrentChange) {
      onCurrentChange(!isCurrent)
      if (!isCurrent) {
        onChange('Present')
      }
    }
  }

  return (
    <div className="space-y-2">
      <Label className="text-sm font-medium flex items-center gap-2">
        <Calendar className="w-4 h-4" />
        {label}
      </Label>
      
      {allowCurrent && (
        <label className="flex items-center gap-2 text-sm cursor-pointer">
          <input
            type="checkbox"
            checked={isCurrent}
            onChange={handleCurrentToggle}
            className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
          />
          <span className="text-muted-foreground">Current position</span>
        </label>
      )}

      {!isCurrent && (
        <div className="grid grid-cols-2 gap-2">
          <Select value={selectedMonth} onValueChange={handleMonthChange}>
            <SelectTrigger>
              <SelectValue placeholder="Month" />
            </SelectTrigger>
            <SelectContent>
              {MONTHS.map((month) => (
                <SelectItem key={month} value={month}>
                  {month}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <Select value={selectedYear} onValueChange={handleYearChange}>
            <SelectTrigger>
              <SelectValue placeholder="Year" />
            </SelectTrigger>
            <SelectContent>
              {YEARS.map((year) => (
                <SelectItem key={year} value={year.toString()}>
                  {year}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      )}

      {isCurrent && (
        <div className="px-3 py-2 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg text-sm text-blue-700 dark:text-blue-300">
          Present
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/components/resume-builder/export-hub.tsx">
'use client'

import { useState } from 'react'
import { Download, FileText, Link2, Copy, Check, Loader2 } from 'lucide-react'

interface ExportHubProps {
  resume: any
}

export function ExportHub({ resume }: ExportHubProps) {
  const [exporting, setExporting] = useState<string | null>(null)
  const [copied, setCopied] = useState(false)

  const generateResumeHTML = (resume: any) => {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }
          h1 { font-size: 28px; margin-bottom: 5px; color: #1a1a1a; }
          h2 { font-size: 18px; border-bottom: 2px solid #333; padding-bottom: 5px; margin-top: 20px; margin-bottom: 10px; }
          .contact { font-size: 14px; color: #666; margin-bottom: 20px; }
          .section { margin-bottom: 20px; }
          .job { margin-bottom: 15px; }
          .job-title { font-weight: bold; font-size: 16px; }
          .job-company { font-style: italic; color: #666; font-size: 14px; }
          ul { margin: 5px 0; padding-left: 20px; }
          li { margin-bottom: 5px; }
        </style>
      </head>
      <body>
        <h1>${resume.personalInfo?.name || 'Your Name'}</h1>
        <div class="contact">
          ${[resume.personalInfo?.email, resume.personalInfo?.phone, resume.personalInfo?.location].filter(Boolean).join(' | ')}
        </div>
        
        ${resume.personalInfo?.summary ? `
          <div class="section">
            <h2>PROFESSIONAL SUMMARY</h2>
            <p>${resume.personalInfo.summary}</p>
          </div>
        ` : ''}
        
        ${resume.experience?.length ? `
          <div class="section">
            <h2>EXPERIENCE</h2>
            ${resume.experience.map((exp: any) => `
              <div class="job">
                <div class="job-title">${exp.position || 'Position'}</div>
                <div class="job-company">${exp.company || 'Company'} | ${exp.location || ''} | ${exp.startDate || ''} - ${exp.current ? 'Present' : exp.endDate || ''}</div>
                ${exp.achievements?.length ? `
                  <ul>
                    ${exp.achievements.map((achievement: string) => `<li>${achievement}</li>`).join('')}
                  </ul>
                ` : ''}
              </div>
            `).join('')}
          </div>
        ` : ''}
        
        ${resume.education?.length ? `
          <div class="section">
            <h2>EDUCATION</h2>
            ${resume.education.map((edu: any) => `
              <div class="job">
                <div class="job-title">${edu.degree || 'Degree'} in ${edu.field || 'Field'}</div>
                <div class="job-company">${edu.institution || 'Institution'} | ${edu.graduationDate || ''}</div>
              </div>
            `).join('')}
          </div>
        ` : ''}
        
        ${resume.skills?.length ? `
          <div class="section">
            <h2>SKILLS</h2>
            <p>${resume.skills.join(' • ')}</p>
          </div>
        ` : ''}
      </body>
      </html>
    `
  }

  const handleExportPDF = async () => {
    setExporting('pdf')
    try {
      // Generate HTML from resume
      const resumeHtml = generateResumeHTML(resume)
      
      const response = await fetch('/api/resume/export-pdf', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          resumeHtml,
          filename: `${resume.personalInfo?.name || 'resume'}.pdf`
        })
      })

      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `${resume.personalInfo?.name || 'resume'}.pdf`
        a.click()
        window.URL.revokeObjectURL(url)
      }
    } catch (error) {
      console.error('PDF export error:', error)
    } finally {
      setExporting(null)
    }
  }

  const handleExportWord = async () => {
    setExporting('word')
    try {
      const response = await fetch('/api/resume/export-docx', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          resume,
          filename: `${resume.personalInfo?.name || 'resume'}.docx`
        })
      })

      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `${resume.personalInfo?.name || 'resume'}.docx`
        a.click()
        window.URL.revokeObjectURL(url)
      }
    } catch (error) {
      console.error('Word export error:', error)
    } finally {
      setExporting(null)
    }
  }

  const handleCopyText = () => {
    const text = generatePlainText(resume)
    navigator.clipboard.writeText(text)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const generatePlainText = (resume: any) => {
    let text = ''
    
    // Personal Info
    if (resume.personalInfo) {
      text += `${resume.personalInfo.fullName}\n`
      text += `${resume.personalInfo.email} | ${resume.personalInfo.phone}\n`
      if (resume.personalInfo.location) text += `${resume.personalInfo.location}\n`
      if (resume.personalInfo.linkedin) text += `${resume.personalInfo.linkedin}\n`
      text += '\n'
    }

    // Summary
    if (resume.personalInfo?.summary) {
      text += 'PROFESSIONAL SUMMARY\n'
      text += `${resume.personalInfo.summary}\n\n`
    }

    // Experience
    if (resume.experience?.length > 0) {
      text += 'PROFESSIONAL EXPERIENCE\n\n'
      resume.experience.forEach((exp: any) => {
        text += `${exp.position}\n`
        text += `${exp.company} | ${exp.location}\n`
        text += `${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}\n`
        if (exp.achievements?.length > 0) {
          exp.achievements.forEach((achievement: string) => {
            text += `• ${achievement}\n`
          })
        }
        text += '\n'
      })
    }

    // Education
    if (resume.education?.length > 0) {
      text += 'EDUCATION\n\n'
      resume.education.forEach((edu: any) => {
        text += `${edu.degree} in ${edu.field}\n`
        text += `${edu.institution}\n`
        text += `${edu.graduationDate}\n\n`
      })
    }

    // Skills
    if (resume.skills) {
      text += 'SKILLS\n\n'
      if (resume.skills.technical?.length > 0) {
        text += `Technical: ${resume.skills.technical.join(', ')}\n`
      }
      if (resume.skills.soft?.length > 0) {
        text += `Soft Skills: ${resume.skills.soft.join(', ')}\n`
      }
    }

    return text
  }

  return (
    <div className="bg-card rounded-xl border-2 border-border p-6">
      <h3 className="text-xl font-bold text-foreground mb-4">📤 Download Your Resume</h3>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* PDF Export */}
        <div className="bg-gradient-to-br from-red-50 to-pink-50 rounded-xl p-6 border-2 border-red-200">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-12 h-12 bg-red-500 rounded-xl flex items-center justify-center">
              <FileText className="w-6 h-6 text-white" />
            </div>
            <div>
              <h4 className="font-bold text-foreground">PDF</h4>
              <p className="text-xs text-gray-600">Best for applications</p>
            </div>
          </div>
          <button
            onClick={handleExportPDF}
            disabled={exporting === 'pdf'}
            className="w-full py-3 bg-red-500 hover:bg-red-600 text-white rounded-lg font-semibold transition-colors disabled:opacity-50 flex items-center justify-center gap-2"
          >
            {exporting === 'pdf' ? (
              <>
                <Loader2 className="w-5 h-5 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <Download className="w-5 h-5" />
                Download PDF
              </>
            )}
          </button>
          <div className="mt-3 space-y-1">
            <div className="flex items-center gap-2 text-xs text-gray-700">
              <Check className="w-3 h-3 text-green-500" />
              <span>ATS-friendly</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-gray-700">
              <Check className="w-3 h-3 text-green-500" />
              <span>Print-ready</span>
            </div>
          </div>
        </div>

        {/* Word Export */}
        <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 border-2 border-blue-200">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
              <FileText className="w-6 h-6 text-white" />
            </div>
            <div>
              <h4 className="font-bold text-foreground">Word (DOCX)</h4>
              <p className="text-xs text-gray-600">Editable for recruiters</p>
            </div>
          </div>
          <button
            onClick={handleExportWord}
            disabled={exporting === 'word'}
            className="w-full py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-semibold transition-colors disabled:opacity-50 flex items-center justify-center gap-2"
          >
            {exporting === 'word' ? (
              <>
                <Loader2 className="w-5 h-5 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <Download className="w-5 h-5" />
                Download Word
              </>
            )}
          </button>
          <div className="mt-3 space-y-1">
            <div className="flex items-center gap-2 text-xs text-gray-700">
              <Check className="w-3 h-3 text-green-500" />
              <span>Fully editable</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-gray-700">
              <Check className="w-3 h-3 text-green-500" />
              <span>Widely accepted</span>
            </div>
          </div>
        </div>

        {/* Plain Text */}
        <div className="bg-gradient-to-br from-gray-50 to-slate-50 rounded-xl p-6 border-2 border-border">
          <div className="flex items-center gap-3 mb-3">
            <div className="w-12 h-12 bg-gray-500 rounded-xl flex items-center justify-center">
              <Copy className="w-6 h-6 text-white" />
            </div>
            <div>
              <h4 className="font-bold text-foreground">Plain Text</h4>
              <p className="text-xs text-gray-600">For online forms</p>
            </div>
          </div>
          <button
            onClick={handleCopyText}
            className="w-full py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-semibold transition-colors flex items-center justify-center gap-2"
          >
            {copied ? (
              <>
                <Check className="w-5 h-5" />
                Copied!
              </>
            ) : (
              <>
                <Copy className="w-5 h-5" />
                Copy to Clipboard
              </>
            )}
          </button>
          <div className="mt-3 space-y-1">
            <div className="flex items-center gap-2 text-xs text-gray-700">
              <Check className="w-3 h-3 text-green-500" />
              <span>Copy-paste ready</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-gray-700">
              <Check className="w-3 h-3 text-green-500" />
              <span>No formatting loss</span>
            </div>
          </div>
        </div>

        {/* Shareable Link (Premium) */}
        <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl p-6 border-2 border-purple-200 relative overflow-hidden">
          <div className="absolute top-2 right-2">
            <span className="px-2 py-1 bg-yellow-400 text-yellow-900 text-xs font-bold rounded-full">
              Coming Soon
            </span>
          </div>
          <div className="flex items-center gap-3 mb-3">
            <div className="w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center">
              <Link2 className="w-6 h-6 text-white" />
            </div>
            <div>
              <h4 className="font-bold text-foreground">Shareable Link</h4>
              <p className="text-xs text-gray-600">Online portfolio version</p>
            </div>
          </div>
          <button
            disabled
            className="w-full py-3 bg-purple-300 text-white rounded-lg font-semibold cursor-not-allowed flex items-center justify-center gap-2"
          >
            <Link2 className="w-5 h-5" />
            Create Link
          </button>
          <div className="mt-3 space-y-1">
            <div className="flex items-center gap-2 text-xs text-gray-700">
              <Check className="w-3 h-3 text-green-500" />
              <span>Beautiful web version</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-gray-700">
              <Check className="w-3 h-3 text-green-500" />
              <span>Track views</span>
            </div>
          </div>
        </div>
      </div>

      <div className="mt-6 p-4 bg-green-50 rounded-lg border border-green-200">
        <p className="text-sm text-green-800">
          <strong>💼 Apply to Multiple Jobs?</strong> Download all formats at once for maximum compatibility!
        </p>
      </div>
    </div>
  )
}
</file>

<file path="src/components/resume-builder/progress-tracker.tsx">
'use client'

import { CheckCircle, Circle } from 'lucide-react'

interface ProgressTrackerProps {
  resume: any
}

export function ProgressTracker({ resume }: ProgressTrackerProps) {
  const checks = [
    {
      label: 'Add your name and contact info',
      completed: !!resume.personalInfo?.fullName && !!resume.personalInfo?.email
    },
    {
      label: 'Add work experience',
      completed: resume.experience?.length > 0
    },
    {
      label: 'Add achievement bullets',
      completed: resume.experience?.some((exp: any) => exp.achievements?.length > 0)
    },
    {
      label: 'Add education',
      completed: resume.education?.length > 0
    },
    {
      label: 'Add at least 5 skills',
      completed: (resume.skills?.technical?.length || 0) + (resume.skills?.soft?.length || 0) >= 5
    },
    {
      label: 'Include numbers/metrics',
      completed: resume.experience?.some((exp: any) =>
        exp.achievements?.some((a: string) => /\d+/.test(a))
      )
    },
    {
      label: 'Add professional summary',
      completed: resume.personalInfo?.summary?.length >= 50
    }
  ]

  const completedCount = checks.filter(c => c.completed).length
  const progress = Math.round((completedCount / checks.length) * 100)

  return (
    <div className="bg-gradient-to-br from-green-50 to-blue-50 rounded-xl border-2 border-green-200 p-6">
      <div className="mb-4">
        <div className="flex items-center justify-between mb-2">
          <h4 className="font-bold text-lg text-foreground">Resume Completeness</h4>
          <span className="text-2xl font-bold text-green-600">{progress}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3">
          <div
            className="bg-gradient-to-r from-green-500 to-blue-500 h-3 rounded-full transition-all duration-500"
            style={{ width: `${progress}%` }}
          />
        </div>
      </div>

      <div className="space-y-2">
        {checks.map((check, i) => (
          <div
            key={i}
            className={`flex items-center gap-3 p-3 rounded-lg transition-all ${
              check.completed ? 'bg-green-100' : 'bg-white'
            }`}
          >
            {check.completed ? (
              <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0" />
            ) : (
              <Circle className="w-5 h-5 text-gray-400 flex-shrink-0" />
            )}
            <span
              className={`text-sm ${
                check.completed ? 'text-green-900 font-semibold' : 'text-gray-700'
              }`}
            >
              {check.label}
            </span>
          </div>
        ))}
      </div>

      {progress >= 80 && (
        <div className="mt-4 p-4 bg-green-500 text-white rounded-lg text-center">
          <div className="text-3xl mb-2">🎉</div>
          <p className="font-bold">Resume Ready!</p>
          <p className="text-sm opacity-90">Your resume looks great!</p>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/components/resume-builder/quick-actions.tsx">
'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import {
  Download,
  Eye,
  Copy,
  Sparkles,
  FileText,
  Mail,
  Linkedin,
  Share2
} from 'lucide-react'
import toast from 'react-hot-toast'

interface QuickActionsProps {
  onGenerateResume: () => void
  onDownloadPDF: () => void
  onDownloadHTML: () => void
  onPreview: () => void
  onCopyText: () => void
  isGenerating: boolean
  hasGenerated: boolean
}

export function QuickActions({
  onGenerateResume,
  onDownloadPDF,
  onDownloadHTML,
  onPreview,
  onCopyText,
  isGenerating,
  hasGenerated
}: QuickActionsProps) {
  const handleShare = () => {
    toast.success('Share feature coming soon!')
  }

  const handleLinkedInExport = () => {
    toast.success('LinkedIn export coming soon!')
  }

  const handleEmailResume = () => {
    toast.success('Email feature coming soon!')
  }

  return (
    <Card className="sticky top-4">
      <CardContent className="p-4">
        <div className="space-y-3">
          {/* Primary Action */}
          <Button
            onClick={onGenerateResume}
            disabled={isGenerating}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
            size="lg"
          >
            {isGenerating ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                Generating...
              </>
            ) : (
              <>
                <Sparkles className="w-4 h-4 mr-2" />
                Generate Resume
              </>
            )}
          </Button>

          {/* Secondary Actions */}
          {hasGenerated && (
            <>
              <div className="grid grid-cols-2 gap-2">
                <Button
                  onClick={onDownloadPDF}
                  variant="outline"
                  size="sm"
                  className="w-full"
                >
                  <Download className="w-4 h-4 mr-1" />
                  PDF
                </Button>
                <Button
                  onClick={onDownloadHTML}
                  variant="outline"
                  size="sm"
                  className="w-full"
                >
                  <FileText className="w-4 h-4 mr-1" />
                  HTML
                </Button>
              </div>

              <div className="grid grid-cols-2 gap-2">
                <Button
                  onClick={onPreview}
                  variant="outline"
                  size="sm"
                  className="w-full"
                >
                  <Eye className="w-4 h-4 mr-1" />
                  Preview
                </Button>
                <Button
                  onClick={onCopyText}
                  variant="outline"
                  size="sm"
                  className="w-full"
                >
                  <Copy className="w-4 h-4 mr-1" />
                  Copy
                </Button>
              </div>

              {/* Divider */}
              <div className="border-t border-border my-2"></div>

              {/* Share Actions */}
              <div className="space-y-2">
                <p className="text-xs font-medium text-muted-foreground mb-2">Share & Export</p>
                <Button
                  onClick={handleLinkedInExport}
                  variant="outline"
                  size="sm"
                  className="w-full justify-start"
                >
                  <Linkedin className="w-4 h-4 mr-2 text-blue-600" />
                  <span className="text-sm">Export to LinkedIn</span>
                </Button>
                <Button
                  onClick={handleEmailResume}
                  variant="outline"
                  size="sm"
                  className="w-full justify-start"
                >
                  <Mail className="w-4 h-4 mr-2 text-green-600" />
                  <span className="text-sm">Email Resume</span>
                </Button>
                <Button
                  onClick={handleShare}
                  variant="outline"
                  size="sm"
                  className="w-full justify-start"
                >
                  <Share2 className="w-4 h-4 mr-2 text-purple-600" />
                  <span className="text-sm">Share Link</span>
                </Button>
              </div>
            </>
          )}

          {/* Help Text */}
          <div className="mt-4 p-3 bg-muted/50 rounded-lg">
            <p className="text-xs text-muted-foreground">
              {!hasGenerated ? (
                <>
                  <strong>💡 Tip:</strong> Fill in your information, then click Generate to create your professional resume.
                </>
              ) : (
                <>
                  <strong>✅ Ready!</strong> Your resume is generated. Download or share it now.
                </>
              )}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/components/resume-builder/quick-start.tsx">
'use client'

import { useState } from 'react'
import { Upload, Linkedin, Wand2, Loader2, CheckCircle } from 'lucide-react'

interface QuickStartProps {
  onResumeImported: (data: any) => void
}

export function QuickStart({ onResumeImported }: QuickStartProps) {
  const [uploading, setUploading] = useState(false)
  const [linkedinConnecting, setLinkedinConnecting] = useState(false)

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    setUploading(true)
    try {
      const formData = new FormData()
      formData.append('file', file)

      const response = await fetch('/api/resume/upload', {
        method: 'POST',
        body: formData
      })

      if (response.ok) {
        const data = await response.json()
        onResumeImported(data)
      }
    } catch (error) {
      console.error('Upload error:', error)
    } finally {
      setUploading(false)
    }
  }

  const handleLinkedInImport = async () => {
    setLinkedinConnecting(true)
    try {
      // TODO: Implement LinkedIn OAuth
      // For now, show coming soon message
      alert('LinkedIn import coming soon! For now, please upload your resume or start from scratch.')
    } finally {
      setLinkedinConnecting(false)
    }
  }

  const handleAIStart = () => {
    // Start with empty template
    onResumeImported(null)
  }

  return (
    <div className="max-w-5xl mx-auto">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-foreground mb-3">
          How would you like to start?
        </h2>
        <p className="text-lg text-gray-600">
          Choose the fastest way to build your professional resume
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Option 1: Upload Resume */}
        <div className="relative bg-card rounded-2xl p-8 border-2 border-border hover:border-blue-500 hover:shadow-xl transition-all cursor-pointer group">
          <input
            type="file"
            accept=".pdf,.doc,.docx"
            onChange={handleFileUpload}
            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            disabled={uploading}
          />
          
          <div className="text-center">
            <div className="w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-blue-500 transition-colors">
              {uploading ? (
                <Loader2 className="w-8 h-8 text-blue-600 animate-spin group-hover:text-white" />
              ) : (
                <Upload className="w-8 h-8 text-blue-600 group-hover:text-white" />
              )}
            </div>
            
            <h3 className="text-xl font-bold text-foreground mb-2">Upload Your Resume</h3>
            <p className="text-sm text-gray-600 mb-4">
              Have a resume? We'll import it and make it better
            </p>
            
            <div className="space-y-2 text-left">
              <div className="flex items-center gap-2 text-sm text-gray-700">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span>Auto-extract all sections</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-700">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span>AI enhancement suggestions</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-700">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span>Ready in 30 seconds</span>
              </div>
            </div>
          </div>
        </div>

        {/* Option 2: LinkedIn Import (Featured) */}
        <div className="relative bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl p-8 border-2 border-transparent hover:shadow-2xl transition-all cursor-pointer group">
          <div className="absolute top-4 right-4">
            <span className="px-3 py-1 bg-yellow-400 text-yellow-900 text-xs font-bold rounded-full">
              Most Popular
            </span>
          </div>
          
          <button
            onClick={handleLinkedInImport}
            disabled={linkedinConnecting}
            className="w-full text-center"
          >
            <div className="w-16 h-16 bg-white/20 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-card/30 transition-colors">
              {linkedinConnecting ? (
                <Loader2 className="w-8 h-8 text-white animate-spin" />
              ) : (
                <Linkedin className="w-8 h-8 text-white" />
              )}
            </div>
            
            <h3 className="text-xl font-bold text-white mb-2">Import from LinkedIn</h3>
            <p className="text-sm text-white/90 mb-4">
              Already on LinkedIn? Import your profile instantly
            </p>
            
            <div className="space-y-2 text-left">
              <div className="flex items-center gap-2 text-sm text-white">
                <CheckCircle className="w-4 h-4" />
                <span>One-click import</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-white">
                <CheckCircle className="w-4 h-4" />
                <span>All details pre-filled</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-white">
                <CheckCircle className="w-4 h-4" />
                <span>Zero typing required</span>
              </div>
            </div>
          </button>
        </div>

        {/* Option 3: AI-Guided Build */}
        <div className="relative bg-card rounded-2xl p-8 border-2 border-border hover:border-purple-500 hover:shadow-xl transition-all cursor-pointer group">
          <button onClick={handleAIStart} className="w-full text-center">
            <div className="w-16 h-16 bg-purple-100 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-purple-500 transition-colors">
              <Wand2 className="w-8 h-8 text-purple-600 group-hover:text-white" />
            </div>
            
            <h3 className="text-xl font-bold text-foreground mb-2">AI-Guided Resume</h3>
            <p className="text-sm text-gray-600 mb-4">
              Starting fresh? AI will help you write everything
            </p>
            
            <div className="space-y-2 text-left">
              <div className="flex items-center gap-2 text-sm text-gray-700">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span>AI writes for you</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-700">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span>Smart suggestions</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-700">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span>Optimized for ATS</span>
              </div>
            </div>
          </button>
        </div>
      </div>

      <div className="mt-8 text-center">
        <p className="text-sm text-gray-500">
          All options include AI-powered enhancements and ATS optimization
        </p>
      </div>
    </div>
  )
}
</file>

<file path="src/components/resume-builder/resume-analyzer.tsx">
'use client'

import { useMemo } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { CheckCircle, AlertCircle, Circle } from 'lucide-react'

interface ResumeData {
  personalInfo: {
    fullName: string
    email: string
    phone: string
    location: string
    linkedin?: string
    website?: string
    summary: string
  }
  experience: Array<any>
  education: Array<any>
  skills: {
    technical: string[]
    soft: string[]
    languages: Array<any>
    certifications: Array<any>
  }
  projects: Array<any>
}

interface ResumeAnalyzerProps {
  resumeData: ResumeData
}

interface AnalysisItem {
  label: string
  status: 'complete' | 'incomplete' | 'optional'
  weight: number
}

export function ResumeAnalyzer({ resumeData }: ResumeAnalyzerProps) {
  const analysis = useMemo(() => {
    const items: AnalysisItem[] = [
      {
        label: 'Personal Information',
        status: resumeData.personalInfo.fullName && 
                resumeData.personalInfo.email && 
                resumeData.personalInfo.phone && 
                resumeData.personalInfo.location 
          ? 'complete' 
          : 'incomplete',
        weight: 15
      },
      {
        label: 'Professional Summary',
        status: resumeData.personalInfo.summary && resumeData.personalInfo.summary.length >= 50
          ? 'complete'
          : 'incomplete',
        weight: 10
      },
      {
        label: 'Work Experience',
        status: resumeData.experience.length > 0
          ? 'complete'
          : 'incomplete',
        weight: 30
      },
      {
        label: 'Education',
        status: resumeData.education.length > 0
          ? 'complete'
          : 'incomplete',
        weight: 20
      },
      {
        label: 'Skills',
        status: (resumeData.skills.technical.length + resumeData.skills.soft.length) >= 5
          ? 'complete'
          : 'incomplete',
        weight: 15
      },
      {
        label: 'LinkedIn Profile',
        status: resumeData.personalInfo.linkedin
          ? 'complete'
          : 'optional',
        weight: 5
      },
      {
        label: 'Projects/Portfolio',
        status: resumeData.projects.length > 0
          ? 'complete'
          : 'optional',
        weight: 5
      }
    ]

    const completedWeight = items
      .filter(item => item.status === 'complete')
      .reduce((sum, item) => sum + item.weight, 0)

    const totalWeight = items
      .filter(item => item.status !== 'optional')
      .reduce((sum, item) => sum + item.weight, 0)

    const completeness = Math.round((completedWeight / totalWeight) * 100)

    return { items, completeness }
  }, [resumeData])

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'complete':
        return <CheckCircle className="w-4 h-4 text-green-600" />
      case 'incomplete':
        return <AlertCircle className="w-4 h-4 text-orange-600" />
      case 'optional':
        return <Circle className="w-4 h-4 text-gray-400" />
    }
  }

  const getCompletenessColor = (score: number) => {
    if (score >= 80) return 'text-green-600'
    if (score >= 60) return 'text-yellow-600'
    return 'text-orange-600'
  }

  const getCompletenessLabel = (score: number) => {
    if (score >= 90) return 'Excellent'
    if (score >= 80) return 'Very Good'
    if (score >= 70) return 'Good'
    if (score >= 60) return 'Fair'
    return 'Needs Work'
  }

  return (
    <Card className="sticky top-4">
      <CardHeader>
        <CardTitle className="text-lg flex items-center justify-between">
          <span>Resume Analysis</span>
          <Badge 
            variant="outline" 
            className={`${getCompletenessColor(analysis.completeness)} border-current`}
          >
            {getCompletenessLabel(analysis.completeness)}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Completeness Score */}
        <div>
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-foreground">Completeness</span>
            <span className={`text-2xl font-bold ${getCompletenessColor(analysis.completeness)}`}>
              {analysis.completeness}%
            </span>
          </div>
          <Progress value={analysis.completeness} className="h-2" />
        </div>

        {/* Section Checklist */}
        <div className="space-y-2">
          <h4 className="text-sm font-semibold text-foreground mb-3">Sections</h4>
          {analysis.items.map((item, index) => (
            <div
              key={index}
              className="flex items-center justify-between py-2 px-3 rounded-lg hover:bg-muted/50 transition-colors"
            >
              <div className="flex items-center gap-2">
                {getStatusIcon(item.status)}
                <span className={`text-sm ${
                  item.status === 'complete' 
                    ? 'text-foreground' 
                    : item.status === 'optional'
                    ? 'text-muted-foreground'
                    : 'text-orange-600'
                }`}>
                  {item.label}
                </span>
              </div>
              {item.status === 'optional' && (
                <Badge variant="outline" className="text-xs">
                  Optional
                </Badge>
              )}
            </div>
          ))}
        </div>

        {/* Tips */}
        {analysis.completeness < 80 && (
          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
            <p className="text-xs text-blue-800 dark:text-blue-300 font-medium mb-1">
              💡 Quick Tips
            </p>
            <ul className="text-xs text-blue-700 dark:text-blue-400 space-y-1">
              {analysis.items
                .filter(item => item.status === 'incomplete')
                .slice(0, 2)
                .map((item, index) => (
                  <li key={index}>• Complete your {item.label.toLowerCase()}</li>
                ))}
            </ul>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/components/resume-builder/resume-preview.tsx">
'use client'

import { useState } from 'react'
import { ZoomIn, ZoomOut, Download, Eye } from 'lucide-react'

interface ResumeData {
  personalInfo: {
    fullName: string
    email: string
    phone: string
    location: string
    linkedin?: string
    website?: string
    summary: string
  }
  experience: Array<{
    company: string
    position: string
    location: string
    startDate: string
    endDate: string
    current: boolean
    achievements: string[]
  }>
  education: Array<{
    institution: string
    degree: string
    field: string
    graduationDate: string
  }>
  skills: {
    technical: string[]
    soft: string[]
  }
}

interface ResumePreviewProps {
  resume: ResumeData
  template?: string
}

export function ResumePreview({ resume, template = 'modern' }: ResumePreviewProps) {
  const [zoom, setZoom] = useState(100)

  const handleZoomIn = () => setZoom(Math.min(zoom + 10, 150))
  const handleZoomOut = () => setZoom(Math.max(zoom - 10, 50))

  return (
    <div className="sticky top-4 bg-card rounded-xl border-2 border-border shadow-lg">
      {/* Preview Header */}
      <div className="flex items-center justify-between p-4 border-b border-border bg-gray-50 rounded-t-xl">
        <div className="flex items-center gap-2">
          <Eye className="w-5 h-5 text-gray-600" />
          <h3 className="font-bold text-foreground">Live Preview</h3>
        </div>
        
        <div className="flex items-center gap-2">
          <button
            onClick={handleZoomOut}
            className="p-2 hover:bg-gray-200 rounded-lg transition-colors"
            title="Zoom Out"
          >
            <ZoomOut className="w-4 h-4 text-gray-600" />
          </button>
          <span className="text-sm font-medium text-gray-600 min-w-[3rem] text-center">
            {zoom}%
          </span>
          <button
            onClick={handleZoomIn}
            className="p-2 hover:bg-gray-200 rounded-lg transition-colors"
            title="Zoom In"
          >
            <ZoomIn className="w-4 h-4 text-gray-600" />
          </button>
          <div className="w-px h-6 bg-gray-300 mx-2" />
          <button
            className="p-2 hover:bg-blue-50 rounded-lg transition-colors"
            title="Download PDF"
          >
            <Download className="w-4 h-4 text-blue-600" />
          </button>
        </div>
      </div>

      {/* Preview Content */}
      <div className="p-6 bg-gray-100 max-h-[calc(100vh-12rem)] overflow-y-auto">
        <div
          className="bg-card shadow-xl mx-auto transition-transform"
          style={{
            transform: `scale(${zoom / 100})`,
            transformOrigin: 'top center',
            width: '8.5in',
            minHeight: '11in',
            padding: '0.75in'
          }}
        >
          {/* Modern Template */}
          {template === 'modern' && (
            <div className="space-y-6">
              {/* Header with Gradient */}
              <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 -m-6 mb-6 rounded-t-lg">
                <h1 className="text-3xl font-bold mb-2">
                  {resume.personalInfo.fullName || 'Your Name'}
                </h1>
                <div className="flex flex-wrap gap-4 text-sm">
                  {resume.personalInfo.email && (
                    <span>📧 {resume.personalInfo.email}</span>
                  )}
                  {resume.personalInfo.phone && (
                    <span>📱 {resume.personalInfo.phone}</span>
                  )}
                  {resume.personalInfo.location && (
                    <span>📍 {resume.personalInfo.location}</span>
                  )}
                </div>
                {resume.personalInfo.linkedin && (
                  <div className="mt-2 text-sm">
                    🔗 {resume.personalInfo.linkedin}
                  </div>
                )}
              </div>

              {/* Summary */}
              {resume.personalInfo.summary && (
                <div>
                  <h2 className="text-xl font-bold text-foreground border-b-2 border-blue-600 pb-2 mb-3">
                    Professional Summary
                  </h2>
                  <p className="text-gray-700 leading-relaxed">
                    {resume.personalInfo.summary}
                  </p>
                </div>
              )}

              {/* Experience */}
              {resume.experience.length > 0 && (
                <div>
                  <h2 className="text-xl font-bold text-foreground border-b-2 border-blue-600 pb-2 mb-3">
                    Professional Experience
                  </h2>
                  <div className="space-y-4">
                    {resume.experience.map((exp, i) => (
                      <div key={i}>
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <h3 className="font-bold text-foreground">{exp.position}</h3>
                            <p className="text-gray-700">{exp.company} • {exp.location}</p>
                          </div>
                          <span className="text-sm text-gray-600 whitespace-nowrap">
                            {exp.startDate} - {exp.current ? 'Present' : exp.endDate}
                          </span>
                        </div>
                        {exp.achievements.length > 0 && (
                          <ul className="list-disc list-inside space-y-1 text-gray-700 text-sm">
                            {exp.achievements.map((achievement, j) => (
                              <li key={j}>{achievement}</li>
                            ))}
                          </ul>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Education */}
              {resume.education.length > 0 && (
                <div>
                  <h2 className="text-xl font-bold text-foreground border-b-2 border-blue-600 pb-2 mb-3">
                    Education
                  </h2>
                  <div className="space-y-3">
                    {resume.education.map((edu, i) => (
                      <div key={i}>
                        <div className="flex justify-between items-start">
                          <div>
                            <h3 className="font-bold text-foreground">{edu.degree} in {edu.field}</h3>
                            <p className="text-gray-700">{edu.institution}</p>
                          </div>
                          <span className="text-sm text-gray-600">{edu.graduationDate}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Skills */}
              {(resume.skills.technical.length > 0 || resume.skills.soft.length > 0) && (
                <div>
                  <h2 className="text-xl font-bold text-foreground border-b-2 border-blue-600 pb-2 mb-3">
                    Skills
                  </h2>
                  {resume.skills.technical.length > 0 && (
                    <div className="mb-2">
                      <span className="font-semibold text-foreground">Technical: </span>
                      <span className="text-gray-700">{resume.skills.technical.join(' • ')}</span>
                    </div>
                  )}
                  {resume.skills.soft.length > 0 && (
                    <div>
                      <span className="font-semibold text-foreground">Soft Skills: </span>
                      <span className="text-gray-700">{resume.skills.soft.join(' • ')}</span>
                    </div>
                  )}
                </div>
              )}
            </div>
          )}

          {/* Empty State */}
          {!resume.personalInfo.fullName && (
            <div className="flex items-center justify-center h-full text-center text-gray-400">
              <div>
                <Eye className="w-16 h-16 mx-auto mb-4 opacity-50" />
                <p className="text-lg">Your resume preview will appear here</p>
                <p className="text-sm">Start filling in your information →</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/resume-builder/section-order.tsx">
'use client'

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { GripVertical, ChevronUp, ChevronDown, Eye, EyeOff } from 'lucide-react'

interface Section {
  id: string
  label: string
  icon: string
  visible: boolean
}

interface SectionOrderProps {
  sections: Section[]
  onReorder: (sections: Section[]) => void
}

export function SectionOrder({ sections: initialSections, onReorder }: SectionOrderProps) {
  const [sections, setSections] = useState<Section[]>(initialSections)
  const [draggedIndex, setDraggedIndex] = useState<number | null>(null)

  const moveSection = (fromIndex: number, toIndex: number) => {
    const newSections = [...sections]
    const [movedSection] = newSections.splice(fromIndex, 1)
    newSections.splice(toIndex, 0, movedSection)
    setSections(newSections)
    onReorder(newSections)
  }

  const moveUp = (index: number) => {
    if (index > 0) {
      moveSection(index, index - 1)
    }
  }

  const moveDown = (index: number) => {
    if (index < sections.length - 1) {
      moveSection(index, index + 1)
    }
  }

  const toggleVisibility = (index: number) => {
    const newSections = [...sections]
    newSections[index].visible = !newSections[index].visible
    setSections(newSections)
    onReorder(newSections)
  }

  const handleDragStart = (index: number) => {
    setDraggedIndex(index)
  }

  const handleDragOver = (e: React.DragEvent, index: number) => {
    e.preventDefault()
    if (draggedIndex !== null && draggedIndex !== index) {
      moveSection(draggedIndex, index)
      setDraggedIndex(index)
    }
  }

  const handleDragEnd = () => {
    setDraggedIndex(null)
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-lg">Section Order</CardTitle>
        <p className="text-sm text-muted-foreground">
          Drag to reorder sections or use arrows
        </p>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          {sections.map((section, index) => (
            <div
              key={section.id}
              draggable
              onDragStart={() => handleDragStart(index)}
              onDragOver={(e) => handleDragOver(e, index)}
              onDragEnd={handleDragEnd}
              className={`flex items-center gap-2 p-3 rounded-lg border-2 transition-all ${
                draggedIndex === index
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-950/30 opacity-50'
                  : section.visible
                  ? 'border-border bg-card hover:bg-muted/50'
                  : 'border-dashed border-muted-foreground/30 bg-muted/30'
              }`}
            >
              {/* Drag Handle */}
              <div className="cursor-grab active:cursor-grabbing">
                <GripVertical className="w-5 h-5 text-muted-foreground" />
              </div>

              {/* Section Info */}
              <div className="flex-1 flex items-center gap-2">
                <span className="text-lg">{section.icon}</span>
                <span className={`text-sm font-medium ${
                  section.visible ? 'text-foreground' : 'text-muted-foreground'
                }`}>
                  {section.label}
                </span>
              </div>

              {/* Controls */}
              <div className="flex items-center gap-1">
                {/* Visibility Toggle */}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => toggleVisibility(index)}
                  className="h-8 w-8 p-0"
                >
                  {section.visible ? (
                    <Eye className="w-4 h-4" />
                  ) : (
                    <EyeOff className="w-4 h-4 text-muted-foreground" />
                  )}
                </Button>

                {/* Move Up */}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => moveUp(index)}
                  disabled={index === 0}
                  className="h-8 w-8 p-0"
                >
                  <ChevronUp className="w-4 h-4" />
                </Button>

                {/* Move Down */}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => moveDown(index)}
                  disabled={index === sections.length - 1}
                  className="h-8 w-8 p-0"
                >
                  <ChevronDown className="w-4 h-4" />
                </Button>
              </div>
            </div>
          ))}
        </div>

        <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
          <p className="text-xs text-blue-800 dark:text-blue-300">
            <strong>💡 Tip:</strong> Put your strongest sections first. Most recruiters spend only 6 seconds on initial resume review!
          </p>
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/components/resume-builder/template-preview.tsx">
/**
 * Template Preview Component
 * @description Displays resume template options with visual previews
 */
'use client'

import { Card } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Check } from 'lucide-react'

interface TemplatePreviewProps {
  id: string
  name: string
  description: string
  isSelected: boolean
  onSelect: () => void
  recommended?: boolean
}

export function TemplatePreview({
  id,
  name,
  description,
  isSelected,
  onSelect,
  recommended = false
}: TemplatePreviewProps) {
  // FIX: Simple, reliable visual indicators instead of complex mini-layouts
  const getPreviewVisual = () => {
    const baseClasses = "w-full h-32 rounded-lg flex items-center justify-center text-4xl transition-all";
    
    switch (id) {
      case 'modern':
        return (
          <div className={`${baseClasses} bg-gradient-to-br from-blue-500 to-purple-600 text-white`}>
            🎨
          </div>
        );
      case 'professional':
        return (
          <div className={`${baseClasses} bg-gradient-to-br from-gray-700 to-gray-900 text-white`}>
            💼
          </div>
        );
      case 'creative':
        return (
          <div className={`${baseClasses} bg-gradient-to-br from-pink-500 to-orange-500 text-white`}>
            🎭
          </div>
        );
      case 'tech':
        return (
          <div className={`${baseClasses} bg-gradient-to-br from-green-500 to-teal-600 text-white`}>
            💻
          </div>
        );
      case 'minimal':
        return (
          <div className={`${baseClasses} bg-gradient-to-br from-gray-400 to-gray-600 text-white`}>
            📄
          </div>
        );
      case 'executive':
        return (
          <div className={`${baseClasses} bg-gradient-to-br from-indigo-600 to-purple-700 text-white`}>
            👔
          </div>
        );
      default:
        return (
          <div className={`${baseClasses} bg-gradient-to-br from-blue-500 to-purple-600 text-white`}>
            📝
          </div>
        );
    }
  };

  return (
    <button
      onClick={onSelect}
      className={`relative group transition-all duration-200 ${
        isSelected ? 'scale-105' : 'hover:scale-102'
      }`}
    >
      <Card
        className={`overflow-hidden transition-all ${
          isSelected
            ? 'ring-2 ring-blue-500 shadow-lg'
            : 'hover:shadow-md border-2 border-border'
        }`}
      >
        {/* Selected Indicator */}
        {isSelected && (
          <div className="absolute top-2 right-2 z-10 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center shadow-lg">
            <Check className="w-4 h-4 text-white" />
          </div>
        )}

        {/* Recommended Badge */}
        {recommended && !isSelected && (
          <div className="absolute top-2 left-2 z-10">
            <Badge className="bg-yellow-400 text-yellow-900 hover:bg-yellow-400">
              ⭐ Recommended
            </Badge>
          </div>
        )}

        {/* Template Preview - FIXED: Simple, reliable visual */}
        <div className="relative w-full aspect-[8.5/11] bg-gray-100 dark:bg-gray-800 overflow-hidden">
          {getPreviewVisual()}
          
          {/* Hover Overlay */}
          <div className={`absolute inset-0 bg-blue-500/10 transition-opacity ${
            isSelected ? 'opacity-100' : 'opacity-0 group-hover:opacity-100'
          }`} />
        </div>

        {/* Template Info */}
        <div className="p-3 bg-card">
          <h4 className="font-semibold text-sm text-foreground mb-1">{name}</h4>
          <p className="text-xs text-muted-foreground line-clamp-2">{description}</p>
        </div>
      </Card>
    </button>
  )
}
</file>

<file path="src/components/resume-context.tsx">
'use client'

import React, { createContext, useContext, useEffect, useMemo, useState } from 'react'

type ResumeItem = {
  _id: string
  originalFileName: string
  fileUrl?: string
  extractedText: string
  createdAt?: string
}

type ResumeContextValue = {
  resumes: ResumeItem[]
  selectedResumeId?: string
  selectedResume?: ResumeItem
  setSelectedResumeId: (id?: string) => void
  refresh: () => Promise<void>
}

const ResumeContext = createContext<ResumeContextValue | undefined>(undefined)

export function ResumeProvider({ children }: { children: React.ReactNode }) {
  const [resumes, setResumes] = useState<ResumeItem[]>([])
  const [selectedResumeId, setSelectedResumeIdState] = useState<string | undefined>(undefined)

  const refresh = async () => {
    try {
      const resp = await fetch('/api/resume/list')
      if (resp.ok) {
        const data = await resp.json()
        const list = (data.resumes || []) as ResumeItem[]
        setResumes(list)
        if (!selectedResumeId && list.length) {
          const lastSaved = typeof window !== 'undefined' ? localStorage.getItem('resume:selected') || '' : ''
          const found = list.find(r => r._id === lastSaved) ? lastSaved : list[0]._id
          setSelectedResumeIdState(found)
        }
      } else if (resp.status === 401) {
        // Redirect to sign-in if not authenticated, but never from auth pages
        if (typeof window !== 'undefined') {
          const path = window.location.pathname || '/'
          if (!path.startsWith('/auth')) {
            const back = encodeURIComponent(path + window.location.search)
            const safe = back.includes('%2Fauth') ? encodeURIComponent('/dashboard') : back
            window.location.href = `/auth/signin?callbackUrl=${safe}`
          }
        }
      }
    } catch {}
  }

  useEffect(() => {
    refresh()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const setSelectedResumeId = (id?: string) => {
    setSelectedResumeIdState(id)
    try { if (id) localStorage.setItem('resume:selected', id) } catch {}
  }

  const selectedResume = useMemo(() => resumes.find(r => r._id === selectedResumeId), [resumes, selectedResumeId])

  const value: ResumeContextValue = {
    resumes,
    selectedResumeId,
    selectedResume,
    setSelectedResumeId,
    refresh,
  }

  return (
    <ResumeContext.Provider value={value}>
      {children}
    </ResumeContext.Provider>
  )
}

export function useResumeContext(): ResumeContextValue {
  const ctx = useContext(ResumeContext)
  if (!ctx) throw new Error('useResumeContext must be used within ResumeProvider')
  return ctx
}
</file>

<file path="src/components/resume-customizer/index.tsx">
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { Skeleton } from '@/components/ui/skeleton'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import {
  Wand2,
  FileText,
  Download,
  Eye,
  AlertCircle,
  CheckCircle,
  Loader2,
  Target,
  Lightbulb,
  TrendingUp
} from 'lucide-react'
import { Resume, JobAnalysis } from '@/types'
import toast from 'react-hot-toast'

interface ResumeCustomizerProps {
  resume: Resume
  jobAnalysis: { analysis: JobAnalysis; keywords: string[] }
  onCustomizationComplete: (customizedResume: any) => void
  onError: (error: string) => void
}

export function ResumeCustomizer({
  resume,
  jobAnalysis,
  onCustomizationComplete,
  onError
}: ResumeCustomizerProps) {
  const [isCustomizing, setIsCustomizing] = useState(false)
  const [customizationProgress, setCustomizationProgress] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [customizedResult, setCustomizedResult] = useState<any>(null)
  const [customizedResultB, setCustomizedResultB] = useState<any>(null)
  const [diffHtml, setDiffHtml] = useState<string>('')
  const [diffHtmlB, setDiffHtmlB] = useState<string>('')
  const [ats, setAts] = useState<any>(null)
  const [atsB, setAtsB] = useState<any>(null)
  const [activeTab, setActiveTab] = useState('preview')
  const [activeVariant, setActiveVariant] = useState<'A' | 'B'>('A')
  const [authenticity, setAuthenticity] = useState<{ score: number; suggestions: string[] } | null>(null)
  const [authenticityB, setAuthenticityB] = useState<{ score: number; suggestions: string[] } | null>(null)
  const [tone, setTone] = useState<'professional'|'enthusiastic'|'concise'>('professional')
  const [autoTone, setAutoTone] = useState<boolean>(false)
  const [generateVariantB, setGenerateVariantB] = useState<boolean>(true)
  const [overrideText, setOverrideText] = useState<string>(()=>{ try { return localStorage.getItem('resume:override') || '' } catch { return '' } })
  const [templateId, setTemplateId] = useState<string>(()=>{ try { return localStorage.getItem('resume:template') || 'classic' } catch { return 'classic' } })
  const [styleHumanize, setStyleHumanize] = useState<boolean>(true)
  const [styleTone, setStyleTone] = useState<'professional'|'enthusiastic'|'concise'>(tone)
  const [availableTemplates, setAvailableTemplates] = useState<Array<{ id: string; name: string }>>([])
  const [liveHighlights, setLiveHighlights] = useState<boolean>(false)
  const [highlighted, setHighlighted] = useState<string>('')

  useEffect(() => {
    ;(async () => {
      try {
        const r = await fetch('/api/resume/templates')
        if (r.ok) {
          const j = await r.json()
          setAvailableTemplates((j.templates || []).map((t: any)=>({ id: t.id, name: t.name })))
        }
      } catch {}
    })()
  }, [])

  // Live keyword coverage highlights in override editor
  useEffect(() => {
    if (!liveHighlights) return
    try {
      const kws = (jobAnalysis?.keywords || []).slice(0, 30).map(k => k.toLowerCase())
      const text = (overrideText && overrideText.length > 30 ? overrideText : resume.extractedText || '')
      if (!text) { setHighlighted(''); return }
      const safe = text.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
      let html = safe
      for (const kw of kws) {
        const re = new RegExp(`(\\b${kw.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b)`, 'gi')
        html = html.replace(re, '<mark class="bg-green-200">$1</mark>')
      }
      setHighlighted(html)
    } catch { setHighlighted('') }
  }, [liveHighlights, overrideText, resume.extractedText, jobAnalysis])

  const handleCustomize = async () => {
    setIsCustomizing(true)
    setCustomizationProgress(0)
    setError(null)

    try {
      if (autoTone) {
        try {
          const stored = localStorage.getItem('analyze:psychology')
          if (stored) {
            const pj = JSON.parse(stored)
            if (pj?.tone) {
              const normalized = String(pj.tone).toLowerCase()
              if (normalized.includes('enthusias')) setTone('enthusiastic')
              else if (normalized.includes('concise') || normalized.includes('direct')) setTone('concise')
              else setTone('professional')
            }
          }
        } catch {}
      }
      const progressInterval = setInterval(() => {
        setCustomizationProgress(prev => Math.min(prev + 15, 88))
      }, 300)

      let psychology: any | undefined
      try { const stored = localStorage.getItem('analyze:psychology'); if (stored) psychology = JSON.parse(stored) } catch {}

      const requestPayload = (t: 'professional'|'enthusiastic'|'concise') => ({
        resumeId: resume._id,
        jobDescription: `Title: ${jobAnalysis.analysis.jobTitle}\nCompany: ${jobAnalysis.analysis.companyName}\n\nRequirements: ${jobAnalysis.analysis.keyRequirements.join(', ')}\nSkills: ${jobAnalysis.analysis.preferredSkills.join(', ')}\nResponsibilities: ${jobAnalysis.analysis.responsibilities.join(', ')}\nCulture: ${jobAnalysis.analysis.companyCulture.join(', ')}`,
        jobTitle: jobAnalysis.analysis.jobTitle,
        companyName: jobAnalysis.analysis.companyName,
        tone: t,
        overrideResumeText: overrideText && overrideText.length > 50 ? overrideText : undefined,
        psychology,
        style: { humanize: styleHumanize, tone: styleTone },
        templateId
      })

      // Variant A
      const resA = await fetch('/api/resume/customize', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(requestPayload(tone)) })
      if (!resA.ok) { const e = await resA.json().catch(()=>({})); throw new Error((e as any).error || 'Customization failed') }
      const dataA = await resA.json()
      setCustomizedResult(dataA)
      onCustomizationComplete(dataA.customizedResume)

      // Diff A
      try {
        const beforeText = (dataA.originalResumeText || resume.extractedText || '') as string
        const afterText = dataA.customizedResume.customizedText as string
        const beforeTokens = beforeText.split(/\s+/)
        const afterTokens = afterText.split(/\s+/)
        const pieces: string[] = []
        let ai = 0, bi = 0
        while (ai < afterTokens.length && bi < beforeTokens.length) {
          if (afterTokens[ai] === beforeTokens[bi]) { pieces.push(afterTokens[ai]); ai++; bi++ } else {
            const start = ai
            let window = 0
            while (ai < afterTokens.length && window < 20 && afterTokens[ai] !== beforeTokens[bi]) { ai++; window++ }
            const added = afterTokens.slice(start, ai).join(' ')
            if (added) pieces.push(`<mark class="bg-yellow-200">${added}</mark>`) 
          }
        }
        if (ai < afterTokens.length) { pieces.push(`<mark class=\"bg-yellow-200\">${afterTokens.slice(ai).join(' ')}</mark>`) }
        setDiffHtml(pieces.join(' '))
      } catch {}

      // ATS A
      try {
        const resp = await fetch('/api/insights/ats/score', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ resumeText: dataA.customizedResume.customizedText, jobAnalysis }) })
        if (resp.ok) { const j = await resp.json(); setAts(j.ats) }
        else {
          const reqId = resp.headers.get('x-request-id') || ''
          if (resp.status === 429) toast.error('ATS scoring rate limited' + (reqId ? ` (Ref: ${reqId})` : ''))
        }
      } catch {}

      // Authenticity A
      try {
        const ar = await fetch('/api/insights/authenticity', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ originalText: resume.extractedText, generatedText: dataA.customizedResume.customizedText }) })
        if (ar.ok) { const aj = await ar.json(); setAuthenticity(aj.authenticity) }
      } catch {}

      // Variant B (optional)
      if (generateVariantB) {
        const altTone: 'professional'|'enthusiastic'|'concise' = tone === 'professional' ? 'concise' : 'professional'
        const resB = await fetch('/api/resume/customize', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(requestPayload(altTone)) })
        if (resB.ok) {
          const dataB = await resB.json()
          setCustomizedResultB(dataB)
          // Diff B
          try {
            const beforeText = (dataB.originalResumeText || resume.extractedText || '') as string
            const afterText = dataB.customizedResume.customizedText as string
            const beforeTokens = beforeText.split(/\s+/)
            const afterTokens = afterText.split(/\s+/)
            const piecesB: string[] = []
            let ai = 0, bi = 0
            while (ai < afterTokens.length && bi < beforeTokens.length) {
              if (afterTokens[ai] === beforeTokens[bi]) { piecesB.push(afterTokens[ai]); ai++; bi++ } else {
                const start = ai
                let window = 0
                while (ai < afterTokens.length && window < 20 && afterTokens[ai] !== beforeTokens[bi]) { ai++; window++ }
                const added = afterTokens.slice(start, ai).join(' ')
                if (added) piecesB.push(`<mark class=\"bg-yellow-200\">${added}</mark>`) 
              }
            }
            if (ai < afterTokens.length) { piecesB.push(`<mark class=\"bg-yellow-200\">${afterTokens.slice(ai).join(' ')}</mark>`) }
            setDiffHtmlB(piecesB.join(' '))
          } catch {}
          // ATS B
          try {
            const respB = await fetch('/api/insights/ats/score', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ resumeText: dataB.customizedResume.customizedText, jobAnalysis }) })
            if (respB.ok) { const j = await respB.json(); setAtsB(j.ats) }
          } catch {}
          // Authenticity B
          try {
            const arB = await fetch('/api/insights/authenticity', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ originalText: resume.extractedText, generatedText: dataB.customizedResume.customizedText }) })
            if (arB.ok) { const ajB = await arB.json(); setAuthenticityB(ajB.authenticity) }
          } catch {}
        }
      }

      clearInterval(progressInterval)
      setCustomizationProgress(100)
      try { if (overrideText) localStorage.setItem('resume:override', overrideText) } catch {}
      toast.success('Resume customized successfully!')

    } catch (error) {
      console.error('Customization error:', error)
      const errorMessage = error instanceof Error ? error.message : 'Customization failed'
      setError(errorMessage)
      onError(errorMessage)
      toast.error(errorMessage)
    } finally {
      setIsCustomizing(false)
      setTimeout(() => setCustomizationProgress(0), 1000)
    }
  }

  const activeData = activeVariant === 'A' ? customizedResult : customizedResultB
  const activeAts = activeVariant === 'A' ? ats : atsB
  const activeDiff = activeVariant === 'A' ? diffHtml : diffHtmlB
  const activeAuth = activeVariant === 'A' ? authenticity : authenticityB

  const downloadResume = async () => {
    const data = activeData
    if (!data) return
    const safeUser = (resume.userName || '').replace(/\s+/g,'_')
    const safeCompany = (jobAnalysis.analysis.companyName || 'Company').replace(/\s+/g,'_')
    const fileName = `${safeUser ? safeUser + '_' : ''}Resume_${safeCompany}`
    try {
      const esc = (s: string) => s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
      const lines = (data.customizedResume.customizedText || '').split(/\r?\n/)
      const headingRe = /^(Professional Summary|Core Competencies|Skills|Professional Experience|Experience|Education|Certifications)\s*$/i
      const parts: string[] = []
      for (const line of lines) {
        if (!line.trim()) { parts.push('<div class="sp">&nbsp;</div>'); continue }
        if (headingRe.test(line.trim())) {
          parts.push(`<div class="section"><strong>${esc(line.trim())}</strong></div>`)
          continue
        }
        if (line.trim().startsWith('• ')) {
          parts.push(`<div class="bullet">${esc(line.trim())}</div>`)
          continue
        }
        parts.push(`<div class="line">${esc(line)}</div>`)
      }
      const html = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>${fileName}</title><style>
        body{font-family:Arial,Segoe UI,Helvetica,sans-serif;font-size:11pt;line-height:1.55;color:#111;max-width:8.5in;margin:0 auto;padding:0.7in;background:#fff}
        .section{margin-top:14px;margin-bottom:4px;font-size:11.2pt}
        .bullet{margin-left:14px;text-indent:-10px;padding-left:10px}
        .line{white-space:pre-wrap}
        .sp{height:6px}
      </style></head><body>${parts.join('')}</body></html>`
      const resp = await fetch('/api/resume/export/pdf', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ html, filename: `${fileName}.pdf` }) })
      if (resp.ok) {
        const blob = await resp.blob()
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `${fileName}.pdf`
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        URL.revokeObjectURL(url)
        toast.success('Resume PDF downloaded!')
      } else {
        // Fallback to .txt
        const blob = new Blob([data.customizedResume.customizedText], { type: 'text/plain' })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `${fileName}.txt`
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        URL.revokeObjectURL(url)
        toast.success('Resume downloaded!')
      }
    } catch {
      const blob = new Blob([data.customizedResume.customizedText], { type: 'text/plain' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${fileName}.txt`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      toast.success('Resume downloaded!')
    }
  }

  return (
    <div className="space-y-6">
      {/* Customization Controls */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wand2 className="h-5 w-5" />
            Resume Customization
          </CardTitle>
          <CardDescription>
            AI-powered resume tailoring based on job requirements and company insights
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-1">
              <p className="text-sm font-medium text-muted-foreground">Tone guidance</p>
              <Select value={tone} onValueChange={(v)=>setTone(v as any)}>
                <SelectTrigger><SelectValue placeholder="Select tone" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="professional">Professional</SelectItem>
                  <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
                  <SelectItem value="concise">Concise</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-1">
              <p className="text-sm font-medium text-muted-foreground">Template</p>
              <Select value={templateId} onValueChange={(v)=>{ setTemplateId(v); try { localStorage.setItem('resume:template', v) } catch {} }}>
                <SelectTrigger><SelectValue placeholder="Select template" /></SelectTrigger>
                <SelectContent>
                  {(availableTemplates.length ? availableTemplates : [
                    { id: 'classic', name: 'Classic (ATS Safe)' },
                    { id: 'modern', name: 'Modern (ATS Safe)' },
                    { id: 'compact', name: 'Compact (ATS Safe)' },
                  ]).map(t => (
                    <SelectItem key={t.id} value={t.id}>{t.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-1">
              <p className="text-sm font-medium text-muted-foreground">Auto-tone from Psychology</p>
              <button type="button" onClick={()=>setAutoTone(v=>!v)} className={`px-3 py-2 border rounded text-sm ${autoTone ? 'bg-green-500/10 border-green-500' : 'bg-card'}`}>{autoTone ? 'Enabled' : 'Disabled'}</button>
              {autoTone && (
                <p className="text-xs text-muted-foreground">We’ll use the Analyze page’s tone if available</p>
              )}
            </div>
            <div className="space-y-1">
              <p className="text-sm font-medium text-muted-foreground">Humanize Style</p>
              <button type="button" onClick={()=>setStyleHumanize(v=>!v)} className={`px-3 py-2 border rounded text-sm ${styleHumanize ? 'bg-green-500/10 border-green-500' : 'bg-card'}`}>{styleHumanize ? 'Enabled' : 'Disabled'}</button>
              <p className="text-xs text-muted-foreground">Reduce AI detectability patterns</p>
            </div>
          <div className="space-y-1">
            <p className="text-sm font-medium text-muted-foreground">Live Highlights</p>
            <button type="button" onClick={()=>setLiveHighlights(v=>!v)} className={`px-3 py-2 border rounded text-sm ${liveHighlights ? 'bg-yellow-500/10 border-yellow-500' : 'bg-card'}`}>{liveHighlights ? 'On' : 'Off'}</button>
            <p className="text-xs text-muted-foreground">Highlight covered keywords in the editor</p>
          </div>
            <div className="space-y-1">
              <p className="text-sm font-medium text-muted-foreground">Generate A/B Variants</p>
              <button type="button" onClick={()=>setGenerateVariantB(v=>!v)} className={`px-3 py-2 border rounded text-sm ${generateVariantB ? 'bg-blue-500/10 border-blue-500' : 'bg-card'}`}>{generateVariantB ? 'A & B' : 'A only'}</button>
              <p className="text-xs text-muted-foreground">Two tailored variants for side-by-side comparison</p>
            </div>
          </div>

          <div className="space-y-1">
            <p className="text-sm font-medium text-muted-foreground">Optional: Override Resume Text</p>
            {!liveHighlights ? (
              <Textarea rows={6} placeholder="Paste clean resume text to override extraction (optional)" value={overrideText} onChange={(e)=>setOverrideText(e.target.value)} />
            ) : (
              <div className="border rounded p-3 bg-background text-foreground text-sm max-h-48 overflow-y-auto" dangerouslySetInnerHTML={{ __html: highlighted || (overrideText || resume.extractedText || '').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;') }} />
            )}
            <p className="text-xs text-muted-foreground">Use this if the PDF text extraction contained gibberish. Minimum 50 characters.</p>
          </div>
          {/* Job Match Summary */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card className="p-4">
              <div className="flex items-center gap-3">
                <Target className="h-8 w-8 text-blue-600" />
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Target Job</p>
                  <p className="text-lg font-semibold">{jobAnalysis.analysis.jobTitle}</p>
                  <p className="text-sm text-muted-foreground">{jobAnalysis.analysis.companyName}</p>
                </div>
              </div>
            </Card>

            <Card className="p-4">
              <div className="flex items-center gap-3">
                <TrendingUp className="h-8 w-8 text-green-600" />
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Keywords Found</p>
                  <p className="text-lg font-semibold">{jobAnalysis.keywords.length}</p>
                  <p className="text-sm text-muted-foreground">relevant terms</p>
                </div>
              </div>
            </Card>

            <Card className="p-4">
              <div className="flex items-center gap-3">
                <Lightbulb className="h-8 w-8 text-purple-600" />
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Experience Level</p>
                  <p className="text-lg font-semibold">{jobAnalysis.analysis.experienceLevel}</p>
                  <p className="text-sm text-muted-foreground">required</p>
                </div>
              </div>
            </Card>
          </div>

          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {isCustomizing && (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Customizing resume...</span>
                <span className="text-sm text-muted-foreground">{customizationProgress}%</span>
              </div>
              <Progress value={customizationProgress} className="w-full" />
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <Skeleton className="h-28" />
                <Skeleton className="h-28" />
                <Skeleton className="h-40 md:col-span-2" />
              </div>
            </div>
          )}

          {!customizedResult && (
            <Button onClick={handleCustomize} disabled={isCustomizing} size="lg" className="w-full">
              {isCustomizing ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Customizing Resume...</>) : (<><Wand2 className="mr-2 h-4 w-4" /> Customize Resume with AI</>) }
            </Button>
          )}
        </CardContent>
      </Card>

      {customizedResult && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="h-5 w-5 text-green-600" />
                  Customization Complete
                </CardTitle>
                <CardDescription>
                  Your resume has been optimized for the {jobAnalysis.analysis.jobTitle} position at {jobAnalysis.analysis.companyName}
                </CardDescription>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" onClick={downloadResume}>
                  <Download className="mr-2 h-4 w-4" />
                  Download
                </Button>
                <Button variant="outline" onClick={async ()=>{
                  try {
                    const appId = customizedResult?.jobApplication?._id || customizedResultB?.jobApplication?._id
                    if (!appId) { toast.error('Missing application id'); return }
                    const resp = await fetch(`/api/applications/${appId}/export/pack`)
                    if (resp.ok) {
                      const blob = await resp.blob(); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `${jobAnalysis.analysis.companyName}_${jobAnalysis.analysis.jobTitle}_ApplicationPack.pdf`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); toast.success('Pack downloaded')
                    } else {
                      toast.error('Failed to export pack')
                    }
                  } catch { toast.error('Failed to export pack') }
                }}>
                  <Download className="mr-2 h-4 w-4" />
                  Generate Pack
                </Button>
                <Button variant="outline" onClick={async ()=>{
                  try {
                    const appId = customizedResult?.jobApplication?._id || customizedResultB?.jobApplication?._id
                    if (!appId) { toast.error('Missing application id'); return }
                    const resp = await fetch(`/api/applications/${appId}/export/zip`)
                    if (resp.ok) {
                      const blob = await resp.blob(); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `${jobAnalysis.analysis.companyName}_${jobAnalysis.analysis.jobTitle}_ApplicationPack.bundle`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); toast.success('Bundle downloaded')
                    } else { toast.error('Failed to export bundle') }
                  } catch { toast.error('Failed to export bundle') }
                }}>
                  <Download className="mr-2 h-4 w-4" />
                  Download Bundle
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="preview">Preview</TabsTrigger>
                <TabsTrigger value="improvements">Improvements</TabsTrigger>
                <TabsTrigger value="suggestions">Suggestions</TabsTrigger>
              </TabsList>

              <TabsContent value="preview" className="space-y-4">
                <div className="bg-muted rounded-lg p-4">
                  <div className="flex items-center justify-between mb-4">
                    <h4 className="font-medium text-foreground">Customized Resume</h4>
                    <div className="flex items-center gap-2">
                      <Button size="sm" variant={activeVariant === 'A' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('A')}>Variant A</Button>
                      <Button size="sm" variant={activeVariant === 'B' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('B')} disabled={!customizedResultB}>Variant B</Button>
                      <Badge variant="secondary">{(activeData?.matchScore ?? 0)}% Match Score</Badge>
                    </div>
                  </div>
                  <div className="text-sm text-foreground whitespace-pre-wrap max-h-96 overflow-y-auto border rounded p-4 bg-background">
                    {activeData?.customizedResume?.customizedText}
                  </div>
                  {activeAuth && (
                    <div className="mt-3 text-sm text-foreground">
                      <div className="font-medium">Authenticity Score: {activeAuth.score}/100</div>
                      {activeAuth.suggestions.length > 0 && (
                        <ul className="list-disc ml-5 mt-1">
                          {activeAuth.suggestions.slice(0,3).map((s, i)=>(<li key={i}>{s}</li>))}
                        </ul>
                      )}
                    </div>
                  )}
                </div>

                <div className="bg-card rounded-lg p-4 border border-border">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium text-foreground">Changes Highlighted</h4>
                    <div className="flex items-center gap-2">
                      <Button size="sm" variant={activeVariant === 'A' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('A')}>Variant A</Button>
                      <Button size="sm" variant={activeVariant === 'B' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('B')} disabled={!customizedResultB}>Variant B</Button>
                    </div>
                  </div>
                  <div className="text-sm text-foreground whitespace-pre-wrap max-h-96 overflow-y-auto border border-border rounded p-4 bg-background" dangerouslySetInnerHTML={{ __html: activeDiff || activeData?.customizedResume?.customizedText?.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;') || '' }} />
                  <div className="text-xs text-muted-foreground mt-2">New or significantly changed text is highlighted.</div>
                </div>

                {activeAts && (
                  <div className="bg-card rounded-lg p-4 border border-border">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium text-foreground">ATS Optimization</h4>
                      <Badge variant="secondary">{activeAts.score}/100</Badge>
                    </div>
                    <div className="text-xs text-foreground">Missing keywords:</div>
                    <div className="mt-1 flex flex-wrap gap-2">
                      {activeAts.missingKeywords.slice(0, 20).map((k: string, i: number) => (
                        <Badge key={i} variant="outline">{k}</Badge>
                      ))}
                    </div>
                    {activeAts.suggestions?.length > 0 && (
                      <ul className="list-disc ml-5 mt-2 text-sm text-foreground">
                        {activeAts.suggestions.map((s: string, i: number) => (<li key={i}>{s}</li>))}
                      </ul>
                    )}
                  </div>
                )}
              </TabsContent>

              <TabsContent value="improvements" className="space-y-4">
                <div className="space-y-3">
                  <h4 className="font-medium text-foreground">Applied Improvements ({activeVariant})</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {(activeData?.improvements || []).map((improvement: string, index: number) => (
                      <div key={index} className="flex items-start gap-3 p-3 bg-green-50 rounded-lg">
                        <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                        <span className="text-sm text-green-800">{improvement}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="suggestions" className="space-y-4">
                <div className="space-y-3">
                  <h4 className="font-medium text-foreground">Additional Suggestions ({activeVariant})</h4>
                  <div className="space-y-3">
                    {(activeData?.suggestions || []).map((suggestion: string, index: number) => (
                      <div key={index} className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg">
                        <Lightbulb className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                        <span className="text-sm text-blue-800">{suggestion}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      )}

      {customizedResult && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Eye className="h-5 w-5" />
              Before vs After Comparison
            </CardTitle>
            <CardDescription>
              See how your resume has been optimized
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2 mb-3">
              <Button size="sm" variant={activeVariant === 'A' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('A')}>Variant A</Button>
              <Button size="sm" variant={activeVariant === 'B' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('B')} disabled={!customizedResultB}>Variant B</Button>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="space-y-3">
                <h4 className="font-medium text-foreground flex items-center gap-2">
                  <FileText className="h-4 w-4" />
                  Original Resume
                </h4>
                <div className="text-sm text-foreground whitespace-pre-wrap max-h-64 overflow-y-auto border rounded p-3 bg-red-500/10">
                  {(customizedResult.originalResumeText || resume.extractedText || '').substring(0, 1000)}{(customizedResult.originalResumeText || resume.extractedText || '').length > 1000 ? '...' : ''}
                </div>
              </div>

              <div className="space-y-3">
                <h4 className="font-medium text-foreground flex items-center gap-2">
                  <Wand2 className="h-4 w-4" />
                  Customized Resume (Variant {activeVariant})
                </h4>
                <div className="text-sm text-foreground whitespace-pre-wrap max-h-64 overflow-y-auto border rounded p-3 bg-green-500/10">
                  {(activeData?.customizedResume?.customizedText || '').substring(0, 1000)}{(activeData?.customizedResume?.customizedText || '').length > 1000 ? '...' : ''}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
</file>

<file path="src/components/resume-templates/BaseTemplate.tsx">
import React from 'react'
import type { Resume } from '@/lib/resume/parser'
import { formatDate, formatDateRange } from '@/lib/resume/parser'

export interface TemplateProps {
  resume: Resume
  variant: 'A' | 'B'
  config?: TemplateConfig
}

export interface TemplateConfig {
  colorScheme?: 'blue' | 'green' | 'purple' | 'black' | 'red'
  fontSize?: 'small' | 'medium' | 'large'
  margins?: 'narrow' | 'normal' | 'wide'
  sectionSpacing?: 'compact' | 'normal' | 'spacious'
}

export const BaseTemplate: React.FC<TemplateProps> = ({ resume, config }) => {
  // Validation
  if (!resume || !resume.personalInfo) {
    return (
      <div style={{ padding: '40px', color: 'red', fontFamily: 'Arial, sans-serif' }}>
        ⚠️ Invalid resume data
      </div>
    )
  }

  const colors = {
    blue: '#2563eb',
    green: '#059669',
    purple: '#7c3aed',
    black: '#1a1a1a',
    red: '#dc2626'
  }
  
  const primaryColor = colors[config?.colorScheme || 'blue']
  const baseFontSize = config?.fontSize === 'small' ? 10 : config?.fontSize === 'large' ? 12 : 11
  const margin = config?.margins === 'narrow' ? '0.5in' : config?.margins === 'wide' ? '1in' : '0.75in'
  
  // ALL INLINE STYLES - NO TAILWIND
  const styles = {
    page: {
      backgroundColor: '#ffffff',
      color: '#1a1a1a',
      maxWidth: '8.5in',
      margin: '0 auto',
      padding: margin,
      fontFamily: 'Georgia, "Times New Roman", serif',
      fontSize: `${baseFontSize}pt`,
      lineHeight: '1.5',
      boxSizing: 'border-box' as const
    },
    header: {
      marginBottom: '20pt',
      paddingBottom: '12pt',
      borderBottom: `2pt solid ${primaryColor}` 
    },
    name: {
      fontSize: '26pt',
      fontWeight: 'bold' as const,
      color: primaryColor,
      marginBottom: '4pt',
      marginTop: 0
    },
    contactLine: {
      fontSize: '10pt',
      color: '#4a5568',
      marginBottom: 0
    },
    section: {
      marginBottom: '18pt',
      pageBreakInside: 'avoid' as const
    },
    sectionHeader: {
      fontSize: '13pt',
      fontWeight: 'bold' as const,
      color: primaryColor,
      textTransform: 'uppercase' as const,
      letterSpacing: '0.5pt',
      marginBottom: '10pt',
      marginTop: 0,
      borderBottom: `1pt solid ${primaryColor}`,
      paddingBottom: '4pt'
    },
    summaryText: {
      fontSize: `${baseFontSize}pt`,
      color: '#2d3748',
      lineHeight: '1.6',
      margin: 0
    },
    experienceItem: {
      marginBottom: '14pt',
      pageBreakInside: 'avoid' as const
    },
    experienceHeader: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'baseline',
      marginBottom: '4pt'
    },
    jobTitle: {
      fontSize: '12pt',
      fontWeight: 'bold' as const,
      color: '#1a1a1a',
      margin: 0
    },
    dateRange: {
      fontSize: '10pt',
      color: '#718096',
      fontStyle: 'italic' as const
    },
    companyLocation: {
      fontSize: '10pt',
      color: '#4a5568',
      fontStyle: 'italic' as const,
      marginBottom: '6pt'
    },
    description: {
      fontSize: `${baseFontSize}pt`,
      color: '#2d3748',
      marginBottom: '6pt',
      marginTop: 0
    },
    achievementList: {
      marginLeft: '20pt',
      marginTop: '4pt',
      marginBottom: 0,
      paddingLeft: 0
    },
    achievementItem: {
      fontSize: `${baseFontSize}pt`,
      color: '#2d3748',
      marginBottom: '4pt',
      lineHeight: '1.5'
    }
  }

  // Build clean contact line (NO EMOJIS)
  const contactParts: string[] = []
  const { location, phone, email } = resume.personalInfo
  if (location) contactParts.push(location)
  if (phone) contactParts.push(phone)
  if (email) contactParts.push(email)

  return (
    <div style={styles.page}>
      {/* Header */}
      <header style={styles.header}>
        <h1 style={styles.name}>{resume.personalInfo.name}</h1>
        <div style={styles.contactLine}>
          {contactParts.join(' | ')}
        </div>
      </header>

      {/* Summary */}
      {resume.summary && (
        <section style={styles.section}>
          <h2 style={styles.sectionHeader}>Professional Summary</h2>
          <p style={styles.summaryText}>{resume.summary}</p>
        </section>
      )}

      {/* Experience */}
      {resume.experience && resume.experience.length > 0 && (
        <section style={styles.section}>
          <h2 style={styles.sectionHeader}>Professional Experience</h2>
          {resume.experience.map((exp, i) => (
            <div key={i} style={styles.experienceItem}>
              <div style={styles.experienceHeader}>
                <h3 style={styles.jobTitle}>{exp.title}</h3>
                <span style={styles.dateRange}>{formatDateRange(exp)}</span>
              </div>
              <div style={styles.companyLocation}>
                {exp.company}{exp.location ? ` | ${exp.location}` : ''}
              </div>
              {exp.description && (
                <p style={styles.description}>{exp.description}</p>
              )}
              {exp.achievements && exp.achievements.length > 0 && (
                <ul style={styles.achievementList}>
                  {exp.achievements.map((achievement, j) => (
                    <li key={j} style={styles.achievementItem}>{achievement}</li>
                  ))}
                </ul>
              )}
            </div>
          ))}
        </section>
      )}

      {/* Skills */}
      {resume.skills && (resume.skills.technical?.length > 0 || resume.skills.soft?.length > 0) && (
        <section style={styles.section}>
          <h2 style={styles.sectionHeader}>Skills</h2>
          {resume.skills.technical && resume.skills.technical.length > 0 && (
            <div style={{ marginBottom: '6pt' }}>
              <span style={{ fontWeight: 'bold', fontSize: `${baseFontSize}pt` }}>Technical: </span>
              <span style={{ fontSize: `${baseFontSize}pt`, color: '#2d3748' }}>
                {resume.skills.technical.join(' • ')}
              </span>
            </div>
          )}
          {resume.skills.soft && resume.skills.soft.length > 0 && (
            <div>
              <span style={{ fontWeight: 'bold', fontSize: `${baseFontSize}pt` }}>Professional: </span>
              <span style={{ fontSize: `${baseFontSize}pt`, color: '#2d3748' }}>
                {resume.skills.soft.join(' • ')}
              </span>
            </div>
          )}
        </section>
      )}

      {/* Education */}
      {resume.education && resume.education.length > 0 && (
        <section style={styles.section}>
          <h2 style={styles.sectionHeader}>Education</h2>
          {resume.education.map((edu, i) => (
            <div key={i} style={{ marginBottom: '12pt' }}>
              <div style={styles.experienceHeader}>
                <h3 style={styles.jobTitle}>{edu.degree}</h3>
                <span style={styles.dateRange}>{formatDate(edu.graduationDate)}</span>
              </div>
              <div style={styles.companyLocation}>
                {edu.institution}{edu.location ? ` | ${edu.location}` : ''}
              </div>
              {edu.gpa && <div style={{ fontSize: '10pt', color: '#2d3748', marginTop: '2pt' }}>GPA: {edu.gpa}</div>}
            </div>
          ))}
        </section>
      )}

      {/* Certifications */}
      {resume.skills?.certifications && resume.skills.certifications.length > 0 && (
        <section style={styles.section}>
          <h2 style={styles.sectionHeader}>Certifications</h2>
          {resume.skills.certifications.map((cert, i) => (
            <div key={i} style={{ fontSize: `${baseFontSize}pt`, color: '#2d3748', marginBottom: '4pt' }}>
              <span style={{ fontWeight: 'bold' }}>{cert.name}</span> | {cert.issuer} | {formatDate(cert.date)}
            </div>
          ))}
        </section>
      )}

      {/* Projects */}
      {resume.projects && resume.projects.length > 0 && (
        <section style={styles.section}>
          <h2 style={styles.sectionHeader}>Projects</h2>
          {resume.projects.map((project, i) => (
            <div key={i} style={styles.experienceItem}>
              <h3 style={styles.jobTitle}>{project.name}</h3>
              <div style={styles.companyLocation}>{project.technologies.join(', ')}</div>
              <p style={styles.description}>{project.description}</p>
              {project.achievements && project.achievements.length > 0 && (
                <ul style={styles.achievementList}>
                  {project.achievements.map((achievement, j) => (
                    <li key={j} style={styles.achievementItem}>{achievement}</li>
                  ))}
                </ul>
              )}
            </div>
          ))}
        </section>
      )}
    </div>
  )
}
</file>

<file path="src/components/resume-templates/index.tsx">
/**
 * Resume Template System
 * Exports all 6 professional resume templates
 */

export { BaseTemplate } from './BaseTemplate'
export type { TemplateProps, TemplateConfig } from './BaseTemplate'

// Template metadata for UI
export const TEMPLATE_METADATA = {
  modern: {
    id: 'modern',
    name: 'Modern',
    description: 'Two-column layout with visual timeline',
    icon: '🚀',
    bestFor: ['Tech', 'Startup', 'Marketing', 'Design'],
    features: ['Timeline', 'Skill bars', 'Color accents']
  },
  professional: {
    id: 'professional',
    name: 'Professional',
    description: 'Traditional single-column format',
    icon: '💼',
    bestFor: ['Finance', 'Legal', 'Corporate', 'Healthcare'],
    features: ['Black & white', 'Formal fonts', 'Conservative']
  },
  creative: {
    id: 'creative',
    name: 'Creative',
    description: 'Bold, unique design to showcase creativity',
    icon: '🎨',
    bestFor: ['Design', 'Marketing', 'Media', 'Arts'],
    features: ['Asymmetric layout', 'Bold colors', 'Visual elements']
  },
  tech: {
    id: 'tech',
    name: 'Tech-Focused',
    description: 'Developer-friendly with project highlights',
    icon: '💻',
    bestFor: ['Software Engineering', 'DevOps', 'Data Science'],
    features: ['GitHub integration', 'Code font', 'Project showcase']
  },
  minimal: {
    id: 'minimal',
    name: 'Minimal/ATS',
    description: 'Plain text, maximum ATS compatibility',
    icon: '📄',
    bestFor: ['ATS Systems', 'Large Corporations', 'Government'],
    features: ['Plain text', 'No graphics', 'ATS-optimized']
  },
  executive: {
    id: 'executive',
    name: 'Executive',
    description: 'Leadership-focused with metrics emphasis',
    icon: '👔',
    bestFor: ['C-Suite', 'Director', 'VP', 'Senior Management'],
    features: ['Metrics-driven', 'Leadership focus', 'Board positions']
  }
} as const

export type TemplateId = keyof typeof TEMPLATE_METADATA
</file>

<file path="src/components/resume-upload/index.tsx">
'use client'

import { useState, useCallback } from 'react'
import { useDropzone } from 'react-dropzone'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Upload, FileText, X, CheckCircle, AlertCircle, Loader2, Linkedin } from 'lucide-react'
import { Resume } from '@/types'
import toast from 'react-hot-toast'
import { LinkedInImport } from '@/components/linkedin-import'

interface ResumeUploadProps {
  onUploadSuccess: (resume: Resume) => void
  onUploadError: (error: string) => void
  maxFileSize?: number
  acceptedTypes?: string[]
  setKeywords?: (keywords: string[]) => void
  setLocation?: (location: string) => void
}

// PHASE 1: Zero-Friction Automation - Background job search and company research
const triggerAutopilotFlow = async (resume: Resume) => {
  try {
    // Starting autopilot background flow
    
    // Update progress indicator
    const updateProgress = (step: string, status: 'loading' | 'complete') => {
      try {
        const progress = JSON.parse(localStorage.getItem('cf:autopilotProgress') || '{}')
        progress[step] = status
        localStorage.setItem('cf:autopilotProgress', JSON.stringify(progress))
      } catch {}
    }
    
    updateProgress('resume', 'complete')
    
    // PHASE 1B: Extract smart profile (salary, work type, preferences)
    try {
      const profileResponse = await fetch('/api/resume/extract-profile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ resumeText: resume.extractedText })
      })
      
      if (profileResponse.ok) {
        const profileData = await profileResponse.json()
        if (profileData.success && profileData.profile) {
          // Cache profile for later use
          localStorage.setItem('cf:profile', JSON.stringify(profileData.profile))
          // Smart profile extracted and cached
        }
      }
    } catch (err) {
      console.warn('[AUTOPILOT] Profile extraction failed (non-critical):', err)
    }
    
    updateProgress('search', 'loading')
    
    // Get location and keywords from localStorage (already extracted by processResumeSignals)
    const location = localStorage.getItem('cf:location') || ''
    const keywords = localStorage.getItem('cf:keywords') || ''
    
    console.log('[AUTOPILOT] Using location:', location, 'keywords:', keywords)
    
    // Searching with extracted location and keywords
    
    // Trigger background job search (fire and forget for speed)
    fetch('/api/jobs/search', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        keywords,
        location,
        useResumeMatching: true,
        limit: 50
      })
    }).then(async (response) => {
      if (response.ok) {
        const jobsData = await response.json()
        const jobs = jobsData.data || []
        
        // Jobs found and cached
        
        // Cache results
        localStorage.setItem('cf:jobResults', JSON.stringify(jobs))
        localStorage.setItem('cf:jobResultsTime', Date.now().toString())
        
        updateProgress('search', 'complete')
        updateProgress('research', 'loading')
        
        // Pre-research top 10 companies (fire and forget)
        const topJobs = jobs.slice(0, 10)
        let researchedCount = 0
        
        topJobs.forEach((job: { company: string; title: string }) => {
          fetch('/api/v2/company/deep-research', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              companyName: job.company,
              targetRole: job.title 
            })
          }).then(() => {
            researchedCount++
            // Company research completed
            
            if (researchedCount === topJobs.length) {
              updateProgress('research', 'complete')
              updateProgress('optimize', 'loading')
              
              // Show success notification
              toast.success(`🚀 Autopilot complete! Found ${jobs.length} jobs and researched ${topJobs.length} companies.`)
              
              updateProgress('optimize', 'complete')
            }
          }).catch(err => {
            console.warn('[AUTOPILOT] Company research failed for', job.company, err)
          })
        })
        
        // If no jobs to research, mark as complete
        if (topJobs.length === 0) {
          updateProgress('research', 'complete')
          updateProgress('optimize', 'complete')
        }
      } else {
        console.error('[AUTOPILOT] Job search failed:', response.status)
        updateProgress('search', 'complete')
        updateProgress('research', 'complete')
        updateProgress('optimize', 'complete')
      }
    }).catch(error => {
      console.error('[AUTOPILOT] Error:', error)
      // Don't show error to user, just log it
    })
    
  } catch (error) {
    console.error('[AUTOPILOT] Flow error:', error)
    // Silent fail - don't interrupt user experience
  }
}

export function ResumeUpload({
  onUploadSuccess,
  onUploadError,
  maxFileSize = 10 * 1024 * 1024 // 10MB
}: ResumeUploadProps) {
  const [uploadedFile, setUploadedFile] = useState<File | null>(null)
  const [uploadedResume, setUploadedResume] = useState<Resume | null>(null)
  const [isUploading, setIsUploading] = useState(false)
  const [uploadProgress, setUploadProgress] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [pastedText, setPastedText] = useState('')
  const [activeTab, setActiveTab] = useState<'upload' | 'linkedin' | 'paste'>('upload')

  const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: any[]) => {
    // Handle rejected files
    if (rejectedFiles.length > 0) {
      const rejection = rejectedFiles[0]
      if (rejection.errors.some((error: any) => error.code === 'file-too-large')) {
        setError(`File size too large. Maximum size is ${maxFileSize / (1024 * 1024)}MB.`)
      } else if (rejection.errors.some((error: any) => error.code === 'file-invalid-type')) {
        setError('Only PDF files are accepted.')
      } else {
        setError('File upload failed. Please try again.')
      }
      return
    }

    // Handle accepted files
    if (acceptedFiles.length > 0) {
      const file = acceptedFiles[0]
      setUploadedFile(file)
      setError(null)
      setUploadedResume(null)
    }
  }, [maxFileSize])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf']
    },
    maxFiles: 1,
    maxSize: maxFileSize,
    disabled: isUploading
  })

  const processResumeSignals = async (resumeText: string) => {
    try {
      const response = await fetch('/api/resume/signals', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          resumeText,
          maxKeywords: 50,
          locationHint: 'Edmonton, AB'
        })
      })

      if (!response.ok) {
        const error = await response.json()
        console.error('Signals API error:', error)
        throw new Error(error.error || 'Signal extraction failed')
      }

      const data = await response.json()

      // Signals extracted successfully

      // Note: Keywords and location are stored in the resume record
      // and can be retrieved from the API response if needed

      return data

    } catch (error) {
      console.error('Signal processing failed:', error)
      toast.error('Could not extract keywords/location. Using defaults.')
      throw error
    }
  }

  const handleUpload = async () => {
    if (!uploadedFile && !pastedText.trim()) {
      setError('Please upload a PDF or paste your resume text')
      toast.error('Please upload a PDF or paste your resume text')
      return
    }

    setIsUploading(true)
    setUploadProgress(0)
    setError(null)

    try {
      // Simulate progress for better UX
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval)
            return 90
          }
          return prev + 10
        })
      }, 200)

      const formData = new FormData()
      if (uploadedFile) {
        formData.append('file', uploadedFile) // API expects 'file' not 'resume'
        // Uploading file
      }
      if (pastedText.trim()) {
        formData.append('pastedText', pastedText.trim())
        // Uploading pasted text
      }

      const response = await fetch('/api/resume/upload', {
        method: 'POST',
        body: formData,
      })

      clearInterval(progressInterval)
      setUploadProgress(100)

      if (!response.ok) {
        // Try to read json error with details, otherwise use status text
        let message = 'Upload failed'
        let details = ''
        try { 
          const errorData = await response.json()
          console.error('❌ Upload API error:', errorData)
          message = (errorData as { error?: string }).error || message 
          details = (errorData as { details?: string }).details || ''
        } catch {}
        throw new Error(details ? `${message}: ${details}` : message)
      }

      const data = await response.json()
      // Upload successful
      const resume = data.resume

      if (!resume) {
        throw new Error('Resume upload failed - no resume data returned')
      }
      
      // Store resume in localStorage for immediate use even if DB save fails
      try {
        localStorage.setItem('uploadedResume', JSON.stringify(resume))
        localStorage.setItem('cf:resume', JSON.stringify(resume))
      } catch (e) {
        console.warn('Could not store resume in localStorage:', e)
      }

      setUploadedResume(resume)
      toast.success('Resume uploaded successfully!')
      
      // CRITICAL: Call onUploadSuccess callback
      onUploadSuccess(resume)
      
      // AUTO-SEARCH: Extract keywords and trigger job search
      if (resume.extractedText) {
        // Auto-triggering job search
        try {
          const signalsResp = await fetch('/api/resume/extract-signals', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ resume: resume.extractedText }) // CRITICAL FIX: Use correct endpoint and param name
          })
          
          if (signalsResp.ok) {
            const signals = await signalsResp.json()
            // Signals extracted
            
            // PERPLEXITY FIX: Standardized localStorage keys as per audit
            localStorage.setItem('cf:location', signals.location || '') // Standard key for location
            localStorage.setItem('cf:keywords', signals.keywords?.slice(0, 30).join(', ') || '') // FIXED: Use 30 keywords for better job matches
            localStorage.setItem('cf:resume', JSON.stringify(resume)) // Full resume object
            localStorage.setItem('cf:autopilotReady', '1') // Autopilot flag
            
            // Location stored in localStorage
            
            toast.success('Keywords extracted! Redirecting to job search...')
            
            // Redirect to search page - CRITICAL: Only pass location if extracted
            setTimeout(() => {
              const keywords = signals.keywords?.slice(0, 30).join(', ') || ''
              const location = signals.location || ''
              const url = location 
                ? `/career-finder/search?auto=true&keywords=${encodeURIComponent(keywords)}&location=${encodeURIComponent(location)}`
                : `/career-finder/search?auto=true&keywords=${encodeURIComponent(keywords)}`
              window.location.href = url
            }, 1000)
          }
        } catch (err) {
          console.error('Auto-search setup failed:', err)
          // Don't block the upload success
        }
      }

      setUploadedResume(resume)
      // Enable Autopilot preference best-effort
      try { await fetch('/api/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ preferences: { autopilot: { useResume: true } } }) }) } catch {}

      // Auto-suggest jobs using resume content
      try {
        const resp = await fetch('/api/v2/jobs/suggest', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ resumeId: resume._id }) })
        const js = await resp.json()
        if (resp.ok && js.success) {
          try { localStorage.setItem('jobs:lastSuggest', JSON.stringify(js)) } catch {}
          toast.success(`Found ${js.results?.length || 0} local jobs for ${js.titles?.join(', ')}`)
        }
      } catch {}

      // Mark Autopilot ready and move wizard
      try { localStorage.setItem('cf:autopilotReady', '1'); localStorage.setItem('cf:progress', JSON.stringify({ step: 2, total: 7 })) } catch {}
      toast.success('Resume uploaded successfully! Autopilot enabled.')

      // Extract signals after upload
      if (data.extractedText && data.extractedText.length > 50) {
        await processResumeSignals(data.extractedText)
      }

      // PHASE 1: Zero-Friction Automation - Trigger full autopilot flow
      if (data.extractedText && data.extractedText.length > 100) {
        triggerAutopilotFlow(data)
      }

    } catch (error) {
      console.error('Upload error:', error)
      const errorMessage = error instanceof Error ? error.message : 'Upload failed'
      setError(errorMessage)
      onUploadError(errorMessage)
      toast.error(errorMessage)
    } finally {
      setIsUploading(false)
      setTimeout(() => setUploadProgress(0), 1000)
    }
  }

  const clearFile = () => {
    setUploadedFile(null)
    setUploadedResume(null)
    setError(null)
    setUploadProgress(0)
    setPastedText('')
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  return (
    <Card className="w-full border-0 shadow-none">
      <CardContent className="space-y-4 p-0">
        {/* Tab Navigation */}
        <div className="flex gap-2 mb-6">
          <button
            onClick={() => setActiveTab('upload')}
            className={`flex-1 py-3 px-4 rounded-xl font-semibold transition-all ${
              activeTab === 'upload'
                ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
                : 'bg-muted text-muted-foreground hover:bg-muted/80'
            }`}
          >
            <Upload className="inline-block w-4 h-4 mr-2" />
            Upload PDF
          </button>
          <button
            onClick={() => setActiveTab('linkedin')}
            className={`flex-1 py-3 px-4 rounded-xl font-semibold transition-all ${
              activeTab === 'linkedin'
                ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
                : 'bg-muted text-muted-foreground hover:bg-muted/80'
            }`}
          >
            <Linkedin className="inline-block w-4 h-4 mr-2" />
            LinkedIn
          </button>
          <button
            onClick={() => setActiveTab('paste')}
            className={`flex-1 py-3 px-4 rounded-xl font-semibold transition-all ${
              activeTab === 'paste'
                ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
                : 'bg-muted text-muted-foreground hover:bg-muted/80'
            }`}
          >
            <FileText className="inline-block w-4 h-4 mr-2" />
            Paste Text
          </button>
        </div>

        {/* Error Alert - VIBRANT */}
        {error && (
          <div className="bg-gradient-to-r from-red-50 to-pink-50 border-2 border-red-200 rounded-2xl p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-red-500 rounded-full flex items-center justify-center flex-shrink-0">
                <AlertCircle className="h-5 w-5 text-white" />
              </div>
              <p className="text-red-800 font-semibold">{error}</p>
            </div>
          </div>
        )}

        {/* Upload Tab */}
        {activeTab === 'upload' && !uploadedFile && (
          <div
            {...getRootProps()}
            className={`border-3 border-dashed rounded-2xl p-10 text-center cursor-pointer transition-all duration-300 ${
              isDragActive
                ? 'border-primary gradient-card-blue scale-105'
                : 'border-border hover:border-primary hover:gradient-card-blue'
            } ${isUploading ? 'pointer-events-none opacity-50' : ''}`}
          >
            <input {...getInputProps()} />
            <div className="w-20 h-20 mx-auto mb-6 gradient-primary rounded-3xl flex items-center justify-center shadow-lg">
              <Upload className="h-10 w-10 text-white" />
            </div>
            <div className="space-y-3">
              <p className="text-2xl font-bold text-foreground">
                {isDragActive ? '📥 Drop it here!' : '📄 Upload Your Resume'}
              </p>
              <p className="text-base text-muted-foreground font-medium">
                Drag and drop your PDF file here, or click to browse
              </p>
              <p className="text-sm text-muted-foreground">
                Maximum file size: {maxFileSize / (1024 * 1024)}MB
              </p>
            </div>
          </div>
        )}

        {/* LinkedIn Tab */}
        {activeTab === 'linkedin' && !uploadedFile && (
          <LinkedInImport
            onImport={async (resumeData) => {
              try {
                // The LinkedIn import component already uploaded to the API
                // Just trigger the success callback
                onUploadSuccess(resumeData)
                setUploadedResume(resumeData)
                toast.success('LinkedIn resume imported successfully!')
              } catch (error) {
                console.error('LinkedIn import error:', error)
                toast.error('Failed to import LinkedIn resume')
              }
            }}
          />
        )}

        {/* Paste Tab */}
        {activeTab === 'paste' && !uploadedFile && (
          <div className="space-y-4">
            <div className="space-y-3">
              <label className="text-base font-bold text-foreground flex items-center gap-2">
                ✍️ Paste your resume text
              </label>
              <textarea
                className="modern-input w-full h-64 resize-none text-sm"
                placeholder="Paste your resume here if your PDF is scanned or not readable..."
                value={pastedText}
                onChange={(e) => setPastedText(e.target.value)}
                disabled={isUploading}
              />
              <div className="text-sm text-muted-foreground font-medium">✨ We&apos;ll create a resume record from your pasted text.</div>
            </div>

            {pastedText.trim() && !isUploading && !uploadedResume && (
              <div className="flex gap-3">
                <Button 
                  onClick={handleUpload} 
                  className="flex-1 btn-gradient py-4 text-base border-0"
                >
                  🚀 Upload Resume
                </Button>
                <Button variant="outline" onClick={clearFile}>
                  Cancel
                </Button>
              </div>
            )}

            {isUploading && (
              <div className="flex gap-3">
                <Button disabled className="flex-1 bg-gradient-to-r from-gray-400 to-gray-500 text-white font-bold py-4 rounded-2xl border-0 text-base">
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                  Uploading...
                </Button>
                <Button variant="outline" disabled className="border-2 border-gray-300 rounded-2xl font-bold py-4 px-6 opacity-50">
                  Cancel
                </Button>
              </div>
            )}
          </div>
        )}

        {/* File Preview (shown when file is uploaded) */}
        {uploadedFile && (
          /* File Preview */
          <div className="border rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <FileText className="h-8 w-8 text-red-500" />
                <div>
                  <p className="font-medium text-foreground">{uploadedFile.name}</p>
                  <p className="text-sm text-muted-foreground">{formatFileSize(uploadedFile.size)}</p>
                </div>
              </div>
              {!isUploading && !uploadedResume && (
                <Button variant="ghost" size="sm" onClick={clearFile}>
                  <X className="h-4 w-4" />
                </Button>
              )}
            </div>

            {/* Upload Progress */}
            {isUploading && (
              <div className="mt-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium">Uploading...</span>
                  <span className="text-sm text-muted-foreground">{uploadProgress}%</span>
                </div>
                <Progress value={uploadProgress} className="w-full" />
              </div>
            )}

            {/* Paste Text Area */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-foreground">Or paste your resume text</label>
              <textarea
                className="w-full border rounded-md p-3 text-sm h-40"
                placeholder="Paste your resume here if your PDF is scanned or not readable..."
                value={pastedText}
                onChange={(e) => setPastedText(e.target.value)}
                disabled={isUploading}
              />
              <div className="text-xs text-muted-foreground">We’ll create a resume record from your pasted text.</div>
            </div>

            {/* Upload Button */}
            {(uploadedFile || pastedText.trim()) && !isUploading && !uploadedResume && (
              <div className="mt-4 flex gap-2">
                <Button onClick={handleUpload} className="flex-1">
                  Upload Resume
                </Button>
                <Button variant="outline" onClick={clearFile}>
                  Cancel
                </Button>
              </div>
            )}

            {uploadedFile && isUploading && (
              <div className="mt-4 flex gap-2">
                <Button disabled className="flex-1">
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Uploading...
                </Button>
                <Button variant="outline" disabled>
                  Cancel
                </Button>
              </div>
            )}
          </div>
        )}

        {/* Success State */}
        {uploadedResume && (
          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription className="flex items-center justify-between">
              <span>Resume uploaded and processed successfully!</span>
              <div className="flex items-center gap-2">
                <a href="/jobs" className="text-xs px-2 py-1 border rounded">Find Jobs Near Me</a>
                <Badge variant="secondary">Ready for customization</Badge>
              </div>
            </AlertDescription>
          </Alert>
        )}

        {/* Resume Preview */}
        {uploadedResume && (
          <div className="bg-card rounded-lg p-4">
            <h4 className="font-medium text-foreground mb-2">Resume Preview</h4>
            <div className="text-sm text-muted-foreground max-h-32 overflow-y-auto">
              {uploadedResume.extractedText.substring(0, 300)}...
            </div>
            <div className="mt-2 text-xs text-muted-foreground">
              {uploadedResume.extractedText.split(' ').length} words extracted
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/components/ResumeAnalysisLoader.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Progress } from '@/components/ui/progress'

interface ResumeAnalysisLoaderProps {
  onComplete?: () => void
  autoProgress?: boolean
}

export function ResumeAnalysisLoader({ onComplete, autoProgress = true }: ResumeAnalysisLoaderProps) {
  const [progress, setProgress] = useState(0)
  const [stage, setStage] = useState<'analyzing' | 'matching' | 'finding'>('analyzing')

  useEffect(() => {
    if (!autoProgress) return

    // Stage 1: Analyzing resume (0-33%)
    const stage1 = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 33) {
          clearInterval(stage1)
          setStage('matching')
          return prev
        }
        return prev + 1
      })
    }, 50)

    // Stage 2: Matching skills (33-66%)
    const stage2Timeout = setTimeout(() => {
      const stage2 = setInterval(() => {
        setProgress((prev) => {
          if (prev >= 66) {
            clearInterval(stage2)
            setStage('finding')
            return prev
          }
          return prev + 1
        })
      }, 50)

      // Stage 3: Finding jobs (66-100%)
      const stage3Timeout = setTimeout(() => {
        const stage3 = setInterval(() => {
          setProgress((prev) => {
            if (prev >= 100) {
              clearInterval(stage3)
              setTimeout(() => {
                onComplete?.()
              }, 500)
              return 100
            }
            return prev + 1
          })
        }, 50)

        return () => clearInterval(stage3)
      }, 1650) // 33 steps × 50ms

      return () => {
        clearInterval(stage2)
        clearTimeout(stage3Timeout)
      }
    }, 1650) // 33 steps × 50ms

    return () => {
      clearInterval(stage1)
      clearTimeout(stage2Timeout)
    }
  }, [autoProgress, onComplete])

  const getStageInfo = () => {
    switch (stage) {
      case 'analyzing':
        return {
          icon: '🔍',
          title: 'Analyzing Resume',
          description: 'Extracting skills, experience, and qualifications...',
          color: 'text-blue-600 dark:text-blue-400'
        }
      case 'matching':
        return {
          icon: '🎯',
          title: 'Matching Skills',
          description: 'Weighting your expertise and identifying strengths...',
          color: 'text-purple-600 dark:text-purple-400'
        }
      case 'finding':
        return {
          icon: '✨',
          title: 'Finding Jobs',
          description: 'Searching for the best opportunities for you...',
          color: 'text-green-600 dark:text-green-400'
        }
    }
  }

  const stageInfo = getStageInfo()

  return (
    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center">
      <div className="bg-card border border-border rounded-2xl shadow-2xl p-8 max-w-md w-full mx-4">
        {/* Animated Icon */}
        <div className="flex justify-center mb-6">
          <div className="relative">
            <div className="text-6xl animate-bounce">
              {stageInfo.icon}
            </div>
            <div className="absolute inset-0 animate-ping opacity-20">
              <div className="text-6xl">{stageInfo.icon}</div>
            </div>
          </div>
        </div>

        {/* Stage Title */}
        <h2 className={`text-2xl font-bold text-center mb-2 ${stageInfo.color}`}>
          {stageInfo.title}
        </h2>

        {/* Stage Description */}
        <p className="text-center text-muted-foreground mb-6">
          {stageInfo.description}
        </p>

        {/* Progress Bar */}
        <div className="space-y-2">
          <Progress value={progress} className="h-3" />
          <div className="flex justify-between text-sm text-muted-foreground">
            <span>{progress}%</span>
            <span className="font-medium">
              {stage === 'analyzing' && 'Step 1 of 3'}
              {stage === 'matching' && 'Step 2 of 3'}
              {stage === 'finding' && 'Step 3 of 3'}
            </span>
          </div>
        </div>

        {/* Stage Indicators */}
        <div className="flex justify-center gap-2 mt-6">
          <div className={`h-2 w-2 rounded-full transition-all ${progress >= 1 ? 'bg-blue-500 scale-125' : 'bg-gray-300'}`} />
          <div className={`h-2 w-2 rounded-full transition-all ${progress >= 34 ? 'bg-purple-500 scale-125' : 'bg-gray-300'}`} />
          <div className={`h-2 w-2 rounded-full transition-all ${progress >= 67 ? 'bg-green-500 scale-125' : 'bg-gray-300'}`} />
        </div>

        {/* Fun fact or tip */}
        <div className="mt-6 p-4 bg-muted/50 rounded-lg">
          <p className="text-xs text-muted-foreground text-center">
            💡 <span className="font-medium">Pro tip:</span> We&apos;re analyzing your resume with AI to find the perfect job matches for your unique skills and experience.
          </p>
        </div>
      </div>
    </div>
  )
}

// Manual control version for API-driven progress
export function ResumeAnalysisLoaderManual({ 
  progress, 
  stage 
}: { 
  progress: number
  stage: 'analyzing' | 'matching' | 'finding'
}) {
  const getStageInfo = () => {
    switch (stage) {
      case 'analyzing':
        return {
          icon: '🔍',
          title: 'Analyzing Resume',
          description: 'Extracting skills, experience, and qualifications...',
          color: 'text-blue-600 dark:text-blue-400'
        }
      case 'matching':
        return {
          icon: '🎯',
          title: 'Matching Skills',
          description: 'Weighting your expertise and identifying strengths...',
          color: 'text-purple-600 dark:text-purple-400'
        }
      case 'finding':
        return {
          icon: '✨',
          title: 'Finding Jobs',
          description: 'Searching for the best opportunities for you...',
          color: 'text-green-600 dark:text-green-400'
        }
    }
  }

  const stageInfo = getStageInfo()

  return (
    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center">
      <div className="bg-card border border-border rounded-2xl shadow-2xl p-8 max-w-md w-full mx-4">
        <div className="flex justify-center mb-6">
          <div className="relative">
            <div className="text-6xl animate-bounce">
              {stageInfo.icon}
            </div>
            <div className="absolute inset-0 animate-ping opacity-20">
              <div className="text-6xl">{stageInfo.icon}</div>
            </div>
          </div>
        </div>

        <h2 className={`text-2xl font-bold text-center mb-2 ${stageInfo.color}`}>
          {stageInfo.title}
        </h2>

        <p className="text-center text-muted-foreground mb-6">
          {stageInfo.description}
        </p>

        <div className="space-y-2">
          <Progress value={progress} className="h-3" />
          <div className="flex justify-between text-sm text-muted-foreground">
            <span>{Math.round(progress)}%</span>
            <span className="font-medium">
              {stage === 'analyzing' && 'Step 1 of 3'}
              {stage === 'matching' && 'Step 2 of 3'}
              {stage === 'finding' && 'Step 3 of 3'}
            </span>
          </div>
        </div>

        <div className="flex justify-center gap-2 mt-6">
          <div className={`h-2 w-2 rounded-full transition-all ${progress >= 1 ? 'bg-blue-500 scale-125' : 'bg-gray-300'}`} />
          <div className={`h-2 w-2 rounded-full transition-all ${progress >= 34 ? 'bg-purple-500 scale-125' : 'bg-gray-300'}`} />
          <div className={`h-2 w-2 rounded-full transition-all ${progress >= 67 ? 'bg-green-500 scale-125' : 'bg-gray-300'}`} />
        </div>

        <div className="mt-6 p-4 bg-muted/50 rounded-lg">
          <p className="text-xs text-muted-foreground text-center">
            💡 <span className="font-medium">Pro tip:</span> We&apos;re analyzing your resume with AI to find the perfect job matches for your unique skills and experience.
          </p>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/skeleton-loader.tsx">
/**
 * Skeleton Loader Component
 * Reusable loading skeleton for AI generation states
 */

'use client'

import { cn } from '@/lib/utils'

export interface SkeletonLoaderProps {
  lines?: number
  className?: string
  variant?: 'default' | 'card' | 'text'
}

export function SkeletonLoader({ 
  lines = 3, 
  className,
  variant = 'default'
}: SkeletonLoaderProps) {
  if (variant === 'card') {
    return (
      <div className={cn("animate-pulse space-y-4", className)}>
        <div className="h-48 bg-gray-200 dark:bg-gray-700 rounded-xl"></div>
        <div className="space-y-2">
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
        </div>
      </div>
    )
  }

  if (variant === 'text') {
    return (
      <div className={cn("animate-pulse space-y-3", className)}>
        {Array.from({ length: lines }).map((_, i) => (
          <div 
            key={i} 
            className="h-4 bg-gray-200 dark:bg-gray-700 rounded"
            style={{ width: `${Math.random() * 30 + 70}%` }}
          ></div>
        ))}
      </div>
    )
  }

  return (
    <div className={cn("animate-pulse space-y-3", className)}>
      {Array.from({ length: lines }).map((_, i) => (
        <div key={i} className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
      ))}
    </div>
  )
}

/**
 * Resume Skeleton - for resume generation
 */
export function ResumeSkeleton() {
  return (
    <div className="animate-pulse space-y-6 p-6 bg-card rounded-xl border">
      {/* Header */}
      <div className="space-y-2">
        <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3"></div>
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
      </div>
      
      {/* Sections */}
      {[1, 2, 3].map((section) => (
        <div key={section} className="space-y-3">
          <div className="h-6 bg-gray-300 dark:bg-gray-600 rounded w-1/4"></div>
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-4/6"></div>
          </div>
        </div>
      ))}
    </div>
  )
}

/**
 * Cover Letter Skeleton - for cover letter generation
 */
export function CoverLetterSkeleton() {
  return (
    <div className="animate-pulse space-y-4 p-6 bg-card rounded-xl border">
      {/* Header */}
      <div className="space-y-2">
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/3"></div>
      </div>
      
      {/* Paragraphs */}
      <div className="space-y-4 mt-6">
        {[1, 2, 3].map((para) => (
          <div key={para} className="space-y-2">
            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
          </div>
        ))}
      </div>
      
      {/* Signature */}
      <div className="space-y-2 mt-6">
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/6"></div>
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
      </div>
    </div>
  )
}

/**
 * Email Skeleton - for email generation
 */
export function EmailSkeleton() {
  return (
    <div className="animate-pulse space-y-4 p-6 bg-card rounded-xl border">
      {/* Subject */}
      <div className="space-y-2">
        <div className="h-3 bg-gray-300 dark:bg-gray-600 rounded w-16"></div>
        <div className="h-5 bg-gray-200 dark:bg-gray-700 rounded w-2/3"></div>
      </div>
      
      {/* Body */}
      <div className="space-y-3 mt-4">
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-4/5"></div>
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
      </div>
    </div>
  )
}

/**
 * Job Analysis Skeleton - for job analysis
 */
export function JobAnalysisSkeleton() {
  return (
    <div className="animate-pulse space-y-6">
      {/* Match Score */}
      <div className="bg-card rounded-xl border p-6">
        <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-4"></div>
        <div className="h-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
      </div>
      
      {/* Skills */}
      <div className="bg-card rounded-xl border p-6">
        <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-4"></div>
        <div className="flex flex-wrap gap-2">
          {[1, 2, 3, 4, 5, 6].map((i) => (
            <div key={i} className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-20"></div>
          ))}
        </div>
      </div>
      
      {/* Recommendations */}
      <div className="bg-card rounded-xl border p-6">
        <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-4"></div>
        <div className="space-y-3">
          {[1, 2, 3].map((i) => (
            <div key={i} className="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
          ))}
        </div>
      </div>
    </div>
  )
}

/**
 * Job Card Skeleton - for job search loading
 */
export function JobCardSkeleton() {
  return (
    <div className="gradient-border-card animate-pulse">
      <div className="p-6 space-y-4">
        {/* Company & Title */}
        <div className="space-y-3">
          <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
          <div className="h-5 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
        </div>
        
        {/* Location & Salary */}
        <div className="flex gap-4">
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-32"></div>
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
        </div>
        
        {/* Skills */}
        <div className="flex flex-wrap gap-2">
          {[1, 2, 3, 4].map((i) => (
            <div key={i} className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-16"></div>
          ))}
        </div>
        
        {/* Match Score */}
        <div className="flex items-center gap-2">
          <div className="h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded-full"></div>
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
        </div>
        
        {/* Button */}
        <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded-lg w-full"></div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/stats-section.tsx">
'use client'

import { Card, CardContent } from '@/components/ui/card'

const stats = [
  {
    number: '10,000+',
    label: 'Job Seekers',
    description: 'Active users landing jobs',
  },
  {
    number: '85%',
    label: 'Success Rate',
    description: 'Users get interviews within 30 days',
  },
  {
    number: '50+',
    label: 'Hours Saved',
    description: 'Per job application on average',
  },
  {
    number: '500+',
    label: 'Companies',
    description: 'In our research database',
  },
]

export function StatsSection() {
  return (
    <section className="py-24 bg-gray-50">
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="mx-auto max-w-3xl text-center">
          <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl">
            Trusted by job seekers worldwide
          </h2>
          <p className="mt-4 text-lg text-gray-600">
            Join thousands of professionals who've transformed their job search with Career Lever AI.
          </p>
        </div>

        <div className="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-8 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-4">
          {stats.map((stat, index) => (
            <Card key={index} className="text-center border-0 shadow-lg">
              <CardContent className="pt-8 pb-8">
                <div className="text-4xl font-bold text-blue-600 sm:text-5xl">
                  {stat.number}
                </div>
                <div className="mt-4 text-lg font-semibold text-foreground">
                  {stat.label}
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  {stat.description}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Testimonial */}
        <div className="mx-auto mt-16 max-w-3xl text-center">
          <blockquote className="text-lg font-medium text-foreground">
            "Career Lever AI completely transformed my job search. I went from getting no responses to having multiple interviews within two weeks. The AI resume customization is incredible!"
          </blockquote>
          <div className="mt-6">
            <div className="font-semibold text-foreground">Sarah Johnson</div>
            <div className="text-sm text-gray-600">Software Engineer at Google</div>
          </div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="src/components/theme-toggle.tsx">
'use client'

import { useEffect, useState } from 'react'
import { ThemeManager, ThemeMode } from '@/lib/theme-manager'

export function ThemeToggle({ className, fixed = false }: { className?: string; fixed?: boolean }) {
  const [mode, setMode] = useState<ThemeMode>('dark')

  useEffect(() => {
    ThemeManager.init()
    const current = document.documentElement.getAttribute('data-theme') as ThemeMode | null
    if (current === 'dark' || current === 'light') setMode(current)
  }, [])

  const handleThemeChange = () => {
    const next = ThemeManager.toggle()
    setMode(next)
  }

  const containerClass = fixed ? 'theme-toggle-fixed' : 'relative z-theme-toggle'

  return (
    <div className={`${containerClass} ${className || ''}`}>
      <button
        aria-label="Toggle theme"
        className="flex items-center gap-2 px-3 py-2 rounded-lg bg-card/90 backdrop-blur-xl border border-border/50 hover:bg-accent/80 transition-all duration-200 text-sm font-medium"
        onClick={handleThemeChange}
      >
        {mode === 'dark' ? (
          <>
            <span className="text-lg">☀️</span>
            <span className="hidden sm:inline">Light</span>
          </>
        ) : (
          <>
            <span className="text-lg">🌙</span>
            <span className="hidden sm:inline">Dark</span>
          </>
        )}
      </button>
    </div>
  )
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:focus-ring focus-visible:border-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

interface DialogContentProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> {
  stayOpen?: boolean;
  closeOnInteractOutside?:boolean;
}

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  DialogContentProps
>(({ className, children, stayOpen = false, closeOnInteractOutside = true, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        !stayOpen && "data-[state=closed]:slide-out-to-top-[48%]",
        className
      )}
      {...props}
    >
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
      <div className="space-y-4">
        {children}
      </div>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] max-w-[calc(100vw-2rem)] max-h-[calc(100vh-4rem)] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=bottom]:slide-in-from-top-2 data-[state=left]:slide-in-from-right-2 data-[state=right]:slide-in-from-left-2 data-[state=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/skeleton.tsx">
'use client'

import * as React from 'react'

export function Skeleton({ className = '' }: { className?: string }) {
  return (
    <div className={`animate-pulse rounded-md bg-gray-200/70 dark:bg-zinc-800/60 ${className}`} />
  )
}
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/app/career-finder/optimizer/page.tsx">
'use client'

import Link from 'next/link'
import { useEffect, useState, useRef } from 'react'
import { Button } from '@/components/ui/button'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'
import CareerFinderStorage from '@/lib/career-finder-storage'
import { ResumeSkeleton } from '@/components/skeleton-loader'
import { getTemplateById } from '@/lib/resume-templates-v2'
import { parseResumeText } from '@/lib/resume-parser'

const TEMPLATES = [
  { 
    id: 'modern', 
    name: 'Modern', 
    description: 'Clean, contemporary design with visual elements',
    bestFor: ['Tech', 'Startup', 'Marketing', 'Design'],
    icon: '🚀'
  },
  { 
    id: 'professional', 
    name: 'Professional', 
    description: 'Traditional, formal layout for conservative industries',
    bestFor: ['Finance', 'Legal', 'Corporate', 'Healthcare'],
    icon: '💼'
  },
  { 
    id: 'creative', 
    name: 'Creative', 
    description: 'Bold, unique design to showcase creativity',
    bestFor: ['Design', 'Marketing', 'Media', 'Arts'],
    icon: '🎨'
  },
  { 
    id: 'tech', 
    name: 'Tech-Focused', 
    description: 'Developer-friendly with project highlights',
    bestFor: ['Software Engineering', 'DevOps', 'Data Science'],
    icon: '💻'
  },
  { 
    id: 'minimal', 
    name: 'Minimal/ATS', 
    description: 'Plain text, maximum ATS compatibility',
    bestFor: ['ATS Systems', 'Large Corporations', 'Government'],
    icon: '📄'
  },
  { 
    id: 'executive', 
    name: 'Executive', 
    description: 'Leadership-focused with metrics emphasis',
    bestFor: ['C-Suite', 'Director', 'VP', 'Senior Management'],
    icon: '👔'
  },
  { 
    id: 'cv', 
    name: 'Curriculum Vitae', 
    description: 'Academic format for research and scholarly positions',
    bestFor: ['Academic', 'Research', 'PhD', 'Professor'],
    icon: '🎓'
  },
]

export default function CareerFinderOptimizerPage() {
  const [template, setTemplate] = useState('modern')
  const [loading, setLoading] = useState(false)
  const [resumeText, setResumeText] = useState('')
  const [variantA, setVariantA] = useState<string>('')
  const [variantB, setVariantB] = useState<string>('')
  const [selected, setSelected] = useState<'A'|'B'|'none'>('none')
  const [humanize, setHumanize] = useState(true)
  const [highlights, setHighlights] = useState(false)
  const [overrideText, setOverrideText] = useState('')
  const [tone, setTone] = useState<'professional'|'conversational'|'technical'>('professional')
  const [expanded, setExpanded] = useState<'A'|'B'|'none'>('none')
  const [editorHtml, setEditorHtml] = useState('')
  const [personalInfo, setPersonalInfo] = useState<{
    name?: string
    email?: string
    phone?: string
    location?: string
  }>({})
  const [atsScore, setAtsScore] = useState<number | null>(null)
  
  // CRITICAL FIX: Prevent infinite loop with processing ref
  const processingRef = useRef(false)
  const hasGeneratedRef = useRef(false)

  useEffect(() => {
    (async () => {
      CareerFinderStorage.setProgress(5, 7)
      
      // ✅ CRITICAL FIX: Use unified storage
      const resumeData = CareerFinderStorage.getResume()
      
      if (resumeData && resumeData.extractedText && resumeData.extractedText.length > 100) {
        console.log('[OPTIMIZER] ✅ Found cached resume, length:', resumeData.extractedText.length)
        setResumeText(resumeData.extractedText)
        
        // Extract personal info from resume text
        let info = extractPersonalInfo(resumeData.extractedText)
        
        // CRITICAL FIX: Fallback to UserProfile if extraction failed
        if (!info.name || !info.email) {
          try {
            const profileRes = await fetch('/api/profile')
            if (profileRes.ok) {
              const profileData = await profileRes.json()
              if (profileData.profile) {
                console.log('[OPTIMIZER] 📋 Using UserProfile data for missing fields')
                info = {
                  name: info.name || `${profileData.profile.firstName} ${profileData.profile.lastName}`,
                  email: info.email || profileData.profile.email,
                  phone: info.phone || profileData.profile.phone,
                  location: info.location || (profileData.profile.location ? 
                    `${profileData.profile.location.city}, ${profileData.profile.location.province}` : undefined)
                }
              }
            }
          } catch (error) {
            console.log('[OPTIMIZER] Could not fetch UserProfile, using extracted info only')
          }
        }
        
        console.log('[OPTIMIZER] 📋 Final personal info:', info)
        setPersonalInfo(info)
        
        // Don't calculate ATS score yet - wait for optimized resume
        console.log('[OPTIMIZER] ⏳ ATS Score will be calculated after optimization')
        setAtsScore(null)
        
        return
      }
      
      // FALLBACK: Fetch from database if no cache
      try {
        console.log('[OPTIMIZER] No cached resume, fetching from DB...')
        const rl = await fetch('/api/resume/list')
        if (rl.ok) {
          const rj = await rl.json()
          const txt: string = rj?.resumes?.[0]?.extractedText || ''
          if (txt.length > 100) {
            console.log('[OPTIMIZER] ✅ Found DB resume, length:', txt.length)
            setResumeText(txt)
            // Cache it using unified storage
            CareerFinderStorage.setResume(rj.resumes[0])
          } else {
            console.warn('[OPTIMIZER] ❌ No resume text found in DB')
          }
        } else {
          console.warn('[OPTIMIZER] ❌ DB fetch failed:', rl.status)
        }
      } catch (e) {
        console.error('[OPTIMIZER] ❌ Resume fetch error:', e)
      }
    })()
  }, [])

  useEffect(() => {
    CareerFinderStorage.setTemplate(template)
  }, [template])

  useEffect(() => {
    CareerFinderStorage.setTone(tone)
  }, [tone])

  // Calculate real ATS score using API that compares against job requirements
  const calculateRealATSScore = async (resumeText: string) => {
    try {
      const jobAnalysis = CareerFinderStorage.getJobAnalysis()
      if (!jobAnalysis) {
        console.warn('[OPTIMIZER] ⚠️ No job analysis found, using basic ATS score')
        setAtsScore(75) // Default score if no job analysis
        return
      }
      
      console.log('[OPTIMIZER] 📊 Calculating ATS score against job requirements...')
      const response = await fetch('/api/insights/ats/score', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          resumeText,
          jobAnalysis
        })
      })
      
      if (response.ok) {
        const result = await response.json()
        if (result.success && result.ats) {
          console.log('[OPTIMIZER] ✅ ATS Score:', result.ats.score)
          console.log('[OPTIMIZER] 📊 Matched Keywords:', result.ats.matchedKeywords.length)
          console.log('[OPTIMIZER] ⚠️ Missing Keywords:', result.ats.missingKeywords.length)
          setAtsScore(result.ats.score)
        }
      } else {
        console.warn('[OPTIMIZER] ⚠️ ATS API failed, using fallback score')
        setAtsScore(75)
      }
    } catch (error) {
      console.error('[OPTIMIZER] ❌ ATS calculation error:', error)
      setAtsScore(75)
    }
  }

  const handleRegenerate = async () => {
    // Clear cache to force new generation
    localStorage.removeItem('cf:resumeVariants')
    console.log('[OPTIMIZER] 🔄 Cache cleared, regenerating variants...')
    await generateVariants()
  }

  const generateVariants = async () => {
    // CRITICAL FIX: Prevent multiple simultaneous calls
    if (processingRef.current) {
      console.log('[OPTIMIZER] Already processing, skipping duplicate call')
      return
    }
    
    processingRef.current = true
    setLoading(true)
    setVariantA(''); setVariantB('')
    
    try {
      // AUTOPILOT: Check cache first
      const cacheKey = 'cf:resumeVariants'
      const cached = localStorage.getItem(cacheKey)
      
      if (cached && !overrideText) {
        console.log('[OPTIMIZER] ✅ Loading variants from cache')
        const variants = JSON.parse(cached)
        setVariantA(variants.variantA || '')
        setVariantB(variants.variantB || '')
        hasGeneratedRef.current = true
        setLoading(false)
        processingRef.current = false
        return
      }
      
      console.log('[OPTIMIZER] 🔄 Generating new variants via autopilot...')
      
      // Get job data
      const selectedJob = CareerFinderStorage.getJob()
      const jobTitle = selectedJob?.title || 'Professional'
      const jobRequirements = selectedJob?.skills || []
      
      // Call new autopilot endpoint
      const response = await fetch('/api/resume/optimize', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          resumeText: (overrideText || resumeText).slice(0, 8000),
          jobTitle,
          jobRequirements,
          companyInsights: {
            culture: '',
            values: [],
            industry: ''
          },
          template: template
        })
      })
      
      if (!response.ok) {
        throw new Error(`API error: ${response.status}`)
      }
      
      const result = await response.json()
      
      if (result.success && result.data) {
        const { variantA: vA, variantB: vB } = result.data
        
        // Format plain text as HTML with selected template
        const formattedA = formatResumeWithTemplate(vA || '', personalInfo, template)
        const formattedB = formatResumeWithTemplate(vB || '', personalInfo, template)
        
        // Set variants directly - formatResumeWithTemplate already handles escaping correctly
        setVariantA(formattedA)
        setVariantB(formattedB)
        
        // Calculate ATS score on optimized resume using real API
        await calculateRealATSScore(vA || '')
        
        // Cache the formatted result
        localStorage.setItem(cacheKey, JSON.stringify({ variantA: formattedA, variantB: formattedB }))
        console.log('[OPTIMIZER] ✅ Variants generated, formatted, and cached')
        
        hasGeneratedRef.current = true
      } else {
        throw new Error(result.error || 'Failed to generate variants')
      }
      
    } catch (error) {
      console.error('[OPTIMIZER] Generation error:', error)
      const errorMsg = `<div style="padding:20px;text-align:center;color:#ef4444;">❌ Generation failed: ${error instanceof Error ? error.message : 'Unknown error'}</div>`
      setVariantA(errorMsg)
      setVariantB(errorMsg)
    } finally {
      setLoading(false)
      processingRef.current = false
    }
  }

  // CRITICAL FIX: Only auto-generate once on initial load, not on every template change
  useEffect(() => { 
    if (resumeText && !hasGeneratedRef.current && !processingRef.current) {
      console.log('[OPTIMIZER] Auto-generating initial variants')
      generateVariants() 
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [resumeText])
  
  // Template to tone mapping
  const templateToToneMap: Record<string, 'professional' | 'conversational' | 'technical'> = {
    'modern': 'professional',
    'professional': 'professional',
    'creative': 'conversational',
    'minimal': 'professional',
    'executive': 'professional',
    'technical': 'technical'
  }

  // Manual regeneration when user changes template
  const handleTemplateChange = (newTemplate: string) => {
    console.log('[OPTIMIZER] 🎨 Template changed to:', newTemplate)
    
    // CRITICAL FIX: Clear variants immediately to show loading state
    setVariantA('')
    setVariantB('')
    setLoading(true)
    
    setTemplate(newTemplate)
    
    // Auto-select matching tone
    const matchingTone = templateToToneMap[newTemplate] || 'professional'
    setTone(matchingTone)
    console.log('[OPTIMIZER] Auto-selected tone:', matchingTone)
    
    if (resumeText) {
      console.log('[OPTIMIZER] Regenerating variants with new template and tone')
      // CRITICAL: Clear cache BEFORE regeneration
      localStorage.removeItem('cf:resumeVariants')
      hasGeneratedRef.current = false // Allow regeneration
      processingRef.current = false // Reset processing flag
      
      // Use setTimeout to ensure state updates are processed
      setTimeout(() => {
        generateVariants()
      }, 150)
    } else {
      setLoading(false)
    }
  }

  const saveSelection = () => {
    try {
      const html = selected === 'A' ? variantA : variantB
      if (html) localStorage.setItem('cf:selectedResumeHtml', html)
    } catch {}
  }
  
  // Extract personal information from resume text
  const extractPersonalInfo = (text: string) => {
    // Email extraction - multiple patterns
    const emailMatch = text.match(/([a-zA-Z0-9._+-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/i)
    
    // Phone extraction - North American formats
    const phoneMatch = text.match(/(\+?1?\s*\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4})/i)
    
    // Location extraction - City, Province/State format
    const locationMatch = text.match(/([A-Z][a-z]+(?:\s[A-Z][a-z]+)*),\s*([A-Z]{2,})/i)
    
    // Name extraction - improved logic
    const lines = text.split('\n').map(l => l.trim()).filter(Boolean)
    let name = ''
    
    // Strategy 1: Look for name before email/phone (usually first 3 lines)
    for (const line of lines.slice(0, 3)) {
      // Skip if line contains email, phone, or common resume headers
      if (line.includes('@') || 
          line.match(/\d{3}/) || 
          /^(resume|curriculum|vitae|cv|profile|summary|objective|experience|education|skills)/i.test(line)) {
        continue
      }
      
      // Check if line looks like a name (2-4 words, proper case, reasonable length)
      const words = line.split(/\s+/)
      if (words.length >= 2 && 
          words.length <= 4 && 
          line.length >= 5 && 
          line.length <= 50 &&
          /^[A-Z]/.test(line) &&
          words.every(w => /^[A-Z][a-z]+/.test(w) || w.length <= 3)) {
        name = line
        break
      }
    }
    
    // Strategy 2: If no name found, look for "Name:" or similar labels
    if (!name) {
      const nameMatch = text.match(/(?:Name|Full Name|Candidate):\s*([A-Z][a-z]+(?:\s[A-Z][a-z]+){1,3})/i)
      if (nameMatch) {
        name = nameMatch[1]
      }
    }
    
    // Strategy 3: Try to extract from structured format (e.g., "John Doe | email@example.com")
    if (!name) {
      const structuredMatch = text.match(/^([A-Z][a-z]+\s+[A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)\s*[|\-•]/m)
      if (structuredMatch) {
        name = structuredMatch[1]
      }
    }
    
    return {
      name: name || undefined,
      email: emailMatch?.[1],
      phone: phoneMatch?.[1],
      location: locationMatch ? `${locationMatch[1]}, ${locationMatch[2]}` : undefined
    }
  }
  
  // ENTERPRISE: Format resume using professional templates V2
  const formatResumeWithTemplate = (text: string, personalInfo: { name?: string; email?: string; phone?: string; location?: string }, templateId: string): string => {
    if (!text) return '<div style="padding: 40px; text-align: center; color: #666;">No resume content available</div>'
    
    // Parse plain text into structured data
    const resumeData = parseResumeText(text, personalInfo)
    
    // Get template and generate HTML
    const template = getTemplateById(templateId)
    const htmlContent = template.generate(resumeData)
    
    // Wrap in full HTML document with template CSS
    const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Resume - ${resumeData.personalInfo.fullName}</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; }
    ${template.css}
  </style>
</head>
<body>
${htmlContent}
</body>
</html>`
    
    return html
  }

  return (
    <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
      <CareerFinderBackButton />
      
      {/* ATS Score Display - No Personal Info Duplication */}
      {atsScore !== null && (
        <div className="bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950/30 dark:to-purple-950/30 border border-blue-200/50 dark:border-blue-800/50 rounded-2xl p-6 mb-6 shadow-xl">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-foreground mb-2">Resume Optimization</h2>
              <p className="text-sm text-muted-foreground">Choose your preferred variant below</p>
            </div>
            <div className="text-center">
              <div className="relative inline-block">
                <svg className="w-28 h-28 transform -rotate-90">
                  <circle cx="56" cy="56" r="52" stroke="currentColor" strokeWidth="8" fill="none" className="text-gray-200 dark:text-gray-700" />
                  <circle cx="56" cy="56" r="52" stroke="currentColor" strokeWidth="8" fill="none" strokeDasharray={`${2 * Math.PI * 52}`} strokeDashoffset={`${2 * Math.PI * 52 * (1 - atsScore / 100)}`} className={`transition-all duration-1000 ${atsScore >= 80 ? 'text-green-500' : atsScore >= 60 ? 'text-yellow-500' : 'text-red-500'}`} strokeLinecap="round" />
                </svg>
                <div className="absolute inset-0 flex flex-col items-center justify-center">
                  <div className="text-3xl font-bold bg-gradient-to-br from-blue-600 to-purple-600 bg-clip-text text-transparent">{atsScore}%</div>
                </div>
              </div>
              <div className="text-xs text-muted-foreground mt-2 font-medium">ATS Score</div>
              <div className={`text-xs font-bold mt-1 px-3 py-1 rounded-full inline-block ${atsScore >= 80 ? 'bg-green-100 text-green-700' : atsScore >= 60 ? 'bg-yellow-100 text-yellow-700' : 'bg-red-100 text-red-700'}`}>
                {atsScore >= 80 ? '✓ Optimized' : atsScore >= 60 ? '⚠ Fair' : '✗ Low'}
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* No Resume Warning */}
      {!resumeText && !loading && (
        <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-xl p-6 mb-6">
          <div className="flex items-start gap-3">
            <svg className="w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            <div>
              <h4 className="font-semibold text-yellow-800 dark:text-yellow-200">No Resume Found</h4>
              <p className="text-sm text-yellow-700 dark:text-yellow-300 mt-1">
                Please upload a resume first to generate optimized variants.
              </p>
              <Link 
                href="/career-finder/resume" 
                className="text-sm text-yellow-800 dark:text-yellow-200 underline font-medium mt-2 inline-block hover:text-yellow-900"
              >
                ← Go back to upload resume
              </Link>
            </div>
          </div>
        </div>
      )}
      
      {/* Template Selection - Modern Card */}
      <div className="bg-gradient-to-br from-card to-card/50 border border-border rounded-2xl p-6 mb-6 shadow-lg dark:bg-background">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-xl">🎨</div>
          <div>
            <h2 className="text-xl font-bold text-foreground">Choose Resume Template</h2>
            <p className="text-xs text-muted-foreground">Select a style that matches your industry</p>
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {TEMPLATES.map(t => (
            <button 
              key={t.id} 
              className={`group relative border rounded-xl p-5 text-left transition-all duration-300 hover:scale-105 hover:shadow-2xl ${template===t.id?'bg-gradient-to-br from-blue-950/50 to-purple-950/50 border-blue-500 shadow-lg shadow-blue-500/20':'border-border hover:border-blue-700 bg-card'}`} 
              onClick={()=>handleTemplateChange(t.id)}
            >
              <div className="flex items-start gap-3 mb-3">
                <div className="text-3xl">{t.icon}</div>
                <div className="flex-1">
                  <div className="font-semibold text-foreground text-lg mb-1">{t.name}</div>
                  <div className="text-xs text-muted-foreground">{t.description}</div>
                </div>
                {template === t.id && (
                  <div className="text-blue-500 text-xl">✓</div>
                )}
              </div>
              <div className="flex flex-wrap gap-1 mt-2">
                {t.bestFor.map((industry) => (
                  <span key={industry} className="text-xs px-2 py-1 bg-blue-900/30 text-blue-300 rounded-full">
                    {industry}
                  </span>
                ))}
              </div>
            </button>
          ))}
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-xs text-foreground">
        <div className="flex items-center gap-2"><input id="humanize" type="checkbox" checked={humanize} onChange={(e)=>setHumanize(e.target.checked)} /><label htmlFor="humanize">Humanize style (reduce AI patterns)</label></div>
        <div className="flex items-center gap-2"><input id="highlights" type="checkbox" checked={highlights} onChange={(e)=>setHighlights(e.target.checked)} /><label htmlFor="highlights">Live keyword highlights</label></div>
        <div>
          <div className="mb-1">Optional: Override Resume Text</div>
          <textarea className="w-full border border-border rounded p-2 h-24 bg-background text-foreground" placeholder="Paste to override uploaded resume text for this optimization only" value={overrideText} onChange={(e)=>setOverrideText(e.target.value)} />
        </div>
        <div>
          <div className="mb-1 text-foreground">Tone <span className="text-xs text-muted-foreground">(auto-selected based on template)</span></div>
          <select className="w-full border rounded p-2 bg-background text-foreground" value={tone} onChange={(e)=>setTone(e.target.value as 'professional' | 'conversational' | 'technical')}>
            <option value="professional">Professional</option>
            <option value="conversational">Conversational</option>
            <option value="technical">Technical</option>
          </select>
        </div>
      </div>
      {/* Resume Variants */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <div 
          className={`bg-card border border-border rounded-xl overflow-hidden cursor-pointer transition-all hover:shadow-lg ${selected==='A'?'ring-2 ring-blue-500 shadow-xl':''}`} 
          onClick={()=>setSelected('A')}
        >
          <div className="flex items-center justify-between p-4 bg-gradient-to-r from-blue-500/10 to-purple-500/10">
            <div>
              <h3 className="font-bold text-foreground">Variant A</h3>
              <p className="text-xs text-muted-foreground">Professional Tone</p>
            </div>
            <div className="flex items-center gap-2">
              {selected === 'A' && (
                <span className="px-3 py-1 bg-blue-500 text-xs rounded-full font-semibold">Selected</span>
              )}
              <Button variant="outline" size="sm" onClick={(e)=>{ e.stopPropagation(); setEditorHtml(variantA); setExpanded('A') }}>Edit</Button>
            </div>
          </div>
          <div className="bg-card">
            {loading && !variantA ? (
              <div className="p-6">
                <ResumeSkeleton />
              </div>
            ) : (
              <iframe 
                key={`variant-a-${template}`}
                className="w-full h-96 border-0" 
                srcDoc={variantA || '<div style="padding: 24px; text-align: center; color: #666;">Generating variant...</div>'}
                sandbox="allow-same-origin allow-scripts"
                title="Resume Variant A"
              />
            )}
          </div>
        </div>
        
        <div 
          className={`bg-card border border-border rounded-xl overflow-hidden cursor-pointer transition-all hover:shadow-lg ${selected==='B'?'ring-2 ring-blue-500 shadow-xl':''}`} 
          onClick={()=>setSelected('B')}
        >
          <div className="flex items-center justify-between p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10">
            <div>
              <h3 className="font-bold text-foreground">Variant B</h3>
              <p className="text-xs text-muted-foreground">Alternative Tone</p>
            </div>
            <div className="flex items-center gap-2">
              {selected === 'B' && (
                <span className="px-3 py-1 bg-purple-500 text-xs rounded-full font-semibold">Selected</span>
              )}
              <Button variant="outline" size="sm" onClick={(e)=>{ e.stopPropagation(); setEditorHtml(variantB); setExpanded('B') }}>Edit</Button>
            </div>
          </div>
          <div className="bg-card">
            {loading && !variantB ? (
              <div className="p-6">
                <ResumeSkeleton />
              </div>
            ) : (
              <iframe 
                key={`variant-b-${template}`}
                className="w-full h-96 border-0" 
                srcDoc={variantB || '<div style="padding: 24px; text-align: center; color: #666;">Generating variant...</div>'}
                sandbox="allow-same-origin allow-scripts"
                title="Resume Variant B"
              />
            )}
          </div>
        </div>
      </div>
      {/* Action Buttons */}
      <div className="flex items-center justify-between gap-4 mt-6">
        <Button variant="outline" onClick={handleRegenerate} disabled={loading} className="px-6">
          {loading ? 'Generating...' : 'Regenerate Variants'}
        </Button>
        <div className="flex items-center gap-4">
          <div className="text-sm text-muted-foreground">
            {selected === 'none' ? 'Select a variant to continue' : `Variant ${selected} selected`}
          </div>
          <Link 
            className={`px-8 py-3 rounded-lg font-semibold bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 transition-all shadow-lg hover:shadow-xl ${selected==='none'?'pointer-events-none opacity-50 cursor-not-allowed':''}`}
            href="/career-finder/cover-letter" 
            onClick={saveSelection}
          >
            Continue to Cover Letter →
          </Link>
        </div>
      </div>

      {/* Expand/Edit Modal */}
      {expanded !== 'none' && (
        <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4" onClick={()=>setExpanded('none')}>
          <div className="bg-card rounded shadow-xl w-full max-w-5xl p-3 space-y-2" onClick={(e)=>e.stopPropagation()}>
            <div className="flex items-center justify-between text-sm">
              <div className="font-medium">Edit Variant {expanded}</div>
              <div className="flex gap-2">
                <Button size="sm" variant="outline" onClick={()=>setExpanded('none')}>Close</Button>
                <Button size="sm" onClick={()=>{ if(expanded==='A'){ setVariantA(editorHtml) } else { setVariantB(editorHtml) } setExpanded('none') }}>Save</Button>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              <textarea className="border rounded p-2 h-[70vh] text-xs" value={editorHtml} onChange={(e)=>setEditorHtml(e.target.value)} />
              <iframe className="w-full h-[70vh] border-0" srcDoc={editorHtml} sandbox="allow-same-origin allow-scripts" />
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/app/career-finder/search/page.tsx">
'use client'

// Note: force-dynamic doesn't work on client components, removed

import { useState, useEffect } from 'react'
import { MagnifyingGlassIcon, FunnelIcon, MapPinIcon, SparklesIcon } from '@heroicons/react/24/outline'
import { JobCard } from '@/components/job-card'
import { JobStatusBar, type JobStatus } from '@/components/job-status-bar'
import { ModernJobCard } from '@/components/modern-job-card'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { CareerFinderBackButton } from '@/components/career-finder-back-button'
import { normalizeSalary, getSalaryDisplayString } from '@/lib/utils/salary-normalizer'
import CareerFinderStorage from '@/lib/career-finder-storage'
import { deduplicateJobs } from '@/lib/job-deduplication'
import { JobCardSkeleton } from '@/components/skeleton-loader'

interface JobListing {
  id?: string
  title: string
  company: string
  location: string
  salary?: string
  skills?: string[]
  skillMatchPercent?: number
  aiScore?: number
  url?: string
  source?: string
  [key: string]: unknown
}

export default function SearchPage() {
  const router = useRouter()
  const [jobs, setJobs] = useState<JobListing[]>([])
  
  // CRITICAL FIX: Location MUST come from resume extraction (saved in cf:location)
  // This is set when resume is uploaded/processed and contains extracted location
  const savedLocation = typeof window !== 'undefined' ? localStorage.getItem('cf:location') || '' : ''
  
  const [filters, setFilters] = useState({ 
    location: savedLocation, // Always use location extracted from resume
    salaryMin: '', 
    salaryMax: '', 
    workType: 'all' as 'all' | 'remote' | 'hybrid' | 'onsite' | 'part-time',
    experienceLevel: '' as '' | 'entry' | 'mid' | 'senior' | 'executive'
  })
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [showSearchPrompt, setShowSearchPrompt] = useState(false)
  // CRITICAL FIX: Always use AI matching for better results
  const [useResumeMatching, setUseResumeMatching] = useState(true)
  const [activeStatus, setActiveStatus] = useState<JobStatus>('discover')
  const [useModernCards] = useState(true) // Always use modern cards
  const [metadata, setMetadata] = useState<{
    useResumeMatching?: boolean
    searchedBoards?: number
    canadianPriority?: boolean
    cachedResults?: number
    newResults?: number
  } | null>(null)
  const [loadingJobId, setLoadingJobId] = useState<string | null>(null)
  
  const { data: session, status } = useSession()

  // ENTERPRISE FIX: Cache job results for 20 minutes
  useEffect(() => {
    // Try to load cached results on mount
    try {
      const cached = localStorage.getItem('cf:jobResults')
      const cacheTime = localStorage.getItem('cf:jobResultsTime')
      
      if (cached && cacheTime) {
        const age = Date.now() - parseInt(cacheTime)
        const TWENTY_MINUTES = 20 * 60 * 1000
        
        if (age < TWENTY_MINUTES) {
          const cachedData = JSON.parse(cached)
          setJobs(cachedData)
          console.log('[CACHE] Loaded', cachedData.length, 'cached jobs, age:', Math.round(age / 60000), 'minutes')
        } else {
          console.log('[CACHE] Expired, clearing cache')
          localStorage.removeItem('cf:jobResults')
          localStorage.removeItem('cf:jobResultsTime')
        }
      }
    } catch (e) {
      console.error('[CACHE] Failed to load:', e)
    }
  }, [])

  // Handler for job selection - stores job and navigates to analysis
  const handleJobSelection = async (job: JobListing, jobId: string) => {
    try {
      // Set loading state for this job
      setLoadingJobId(jobId)
      console.log('[SEARCH] 🔄 Loading state set for job:', jobId)
      
      // Store in localStorage with correct key
      const jobData = {
        ...job,
        selectedAt: Date.now()
      }
      
      // CRITICAL: Save to localStorage FIRST before navigation
      localStorage.setItem('cf:selectedJob', JSON.stringify(jobData))
      console.log('[SEARCH] 💾 Saved job to localStorage:', job.title, '@', job.company)
      
      // VERIFY it was saved
      const verify = localStorage.getItem('cf:selectedJob')
      console.log('[SEARCH] ✅ Verification - job in storage:', verify ? 'YES' : 'NO')
      
      // 🔒 CRITICAL: Clear autopilot flag to prevent re-triggering search on redirect
      localStorage.removeItem('cf:autopilotReady')
      console.log('[SEARCH] 🚫 Cleared autopilot flag to prevent redirect loop')
      
      // 🚀 ONE-SHOT COMPREHENSIVE RESEARCH: Call it NOW to reduce costs
      console.log('[SEARCH] 🔬 Starting comprehensive research...')
      try {
        // Get resume from localStorage
        const resume = CareerFinderStorage.getResume()
        if (resume && resume.extractedText) {
          // Call comprehensive research endpoint
          const researchResponse = await fetch('/api/v2/career-finder/comprehensive-research', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              jobTitle: job.title,
              company: job.company,
              jobDescription: job.description || job.summary || '',
              location: job.location,
              resumeText: resume.extractedText,
              resumeSkills: resume.personalInfo?.skills || []
            })
          })
          
          if (researchResponse.ok) {
            const research = await researchResponse.json()
            if (research.success && research.data) {
              console.log('[SEARCH] ✅ Comprehensive research complete:', {
                matchScore: research.data.jobAnalysis.matchScore,
                contacts: research.data.hiringContacts.length,
                news: research.data.news.length,
                reviews: research.data.reviews.length
              })
              
              // Store comprehensive research with timestamp
              const comprehensiveData = {
                ...research.data.companyIntel,
                psychology: research.data.companyPsychology.culture,
                values: research.data.companyPsychology.values,
                marketIntelligence: research.data.marketIntelligence,
                hiringContacts: research.data.hiringContacts,
                news: research.data.news,
                reviews: research.data.reviews,
                sources: research.data.sources,
                confidence: research.data.confidenceLevel,
                timestamp: Date.now(),
                // Also embed job analysis
                jobAnalysis: research.data.jobAnalysis
              }
              
              CareerFinderStorage.setCompanyResearch(comprehensiveData)
              console.log('[SEARCH] 💾 Cached comprehensive research for instant page loads')
            }
          } else {
            console.warn('[SEARCH] ⚠️ Comprehensive research failed, pages will fall back to individual calls')
          }
        }
      } catch (researchError) {
        console.warn('[SEARCH] ⚠️ Comprehensive research error (non-blocking):', researchError)
      }
      
      // Store in database for history (don't wait for this)
      fetch('/api/jobs/store', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(job)
      }).catch(err => console.error('[SEARCH] Failed to store in DB:', err))
      
      // Navigate to job analysis page
      console.log('[SEARCH] 🚀 Navigating to job-analysis...')
      router.push('/career-finder/job-analysis')
    } catch (error) {
      console.error('Failed to store job:', error)
      // Still navigate even if storage fails
      router.push('/career-finder/job-analysis')
    } finally {
      // Clear loading state after navigation
      // Note: This will execute before navigation completes, but that's okay
      // The loading state serves to show feedback during the async operations
      setTimeout(() => setLoadingJobId(null), 500)
    }
  }

  // ENTERPRISE FIX: Auto-search on mount if query params exist OR autopilot is ready
  useEffect(() => {
    const params = new URLSearchParams(window.location.search)
    const keywords = params.get('keywords')
    const location = params.get('location')
    
    // PERPLEXITY FIX: Read standardized localStorage keys
    const autopilotReady = localStorage.getItem('cf:autopilotReady') === '1'
    const savedLocation = localStorage.getItem('cf:location') || ''
    const savedKeywords = localStorage.getItem('cf:keywords') || ''
    const resumeData = localStorage.getItem('cf:resume')
    
    console.log('[PERPLEXITY AUDIT FIX] Autopilot check:')
    console.log('  - autopilotReady:', autopilotReady)
    console.log('  - savedLocation:', savedLocation)
    console.log('  - savedKeywords:', savedKeywords)
    console.log('  - hasResume:', !!resumeData)
    console.log('  - hasKeywords:', !!savedKeywords)
    
    // CRITICAL FIX: Always use saved location from resume extraction
    // This location was extracted when resume was uploaded and cached
    if (savedLocation && savedLocation !== filters.location) {
      console.log('[LOCATION] Using location from resume extraction:', savedLocation)
      setFilters(prev => ({ ...prev, location: savedLocation }))
    }
    
    // ✅ FIX #6: Show search prompt if cached resume exists but no search performed
    if (resumeData && !autopilotReady && jobs.length === 0) {
      setShowSearchPrompt(true)
    }
    
    if (keywords || autopilotReady) {
      if (keywords) {
        setSearchQuery(keywords)
      }
      if (location) setFilters(prev => ({ ...prev, location }))
      
      // Perform search
      const performInitialSearch = async () => {
        let query = keywords
        // CRITICAL FIX: Use savedLocation as fallback, not filters.location (state might not be updated yet)
        const loc = location || savedLocation || filters.location

        // CRITICAL FIX: Use cached keywords from localStorage (already extracted by autopilot)
        if (!query && autopilotReady) {
          if (savedKeywords) {
            query = savedKeywords
            setSearchQuery(savedKeywords)
            setUseResumeMatching(true)
            console.log('[AUTOPILOT] ✅ Using cached keywords:', savedKeywords)
          } else {
            console.warn('[AUTOPILOT] ⚠️ autopilotReady but no keywords in localStorage')
          }
        }

        if (!query || query.trim().length < 2) {
          console.log('[AUTOPILOT] No valid query, skipping search')
          return
        }
        if (status === 'unauthenticated') return

        setLoading(true)
        setError('')
        
        try {
          // CRITICAL DEBUG: Log exactly what we're sending
          const searchPayload = {
            keywords: query,
            location: loc,
            limit: 50,
            useResumeMatching: autopilotReady && useResumeMatching
          }
          console.log('[AUTOPILOT] Performing search with payload:', searchPayload)
          console.log('[AUTOPILOT] Location debug:', {
            urlParam: location,
            savedInLocalStorage: savedLocation,
            currentFilterState: filters.location,
            finalValue: loc,
            isEmpty: !loc || loc.length === 0
          })
          
          const response = await fetch('/api/jobs/search', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(searchPayload)
          })

          const data = await response.json()
          if (response.ok) {
            const jobResults = data.jobs || []
            setJobs(jobResults)
            setMetadata(data.metadata || {})
            
            // CRITICAL: Show NEW jobs found vs cached jobs
            const newJobsCount = data.metadata?.newResults || 0
            const cachedJobsCount = data.metadata?.cachedResults || 0
            console.log('[AUTOPILOT] Search completed:', newJobsCount, 'NEW jobs found,', cachedJobsCount, 'cached jobs,', jobResults.length, 'total displayed')
            
            // ENTERPRISE FIX: Cache results for 20 minutes
            try {
              localStorage.setItem('cf:jobResults', JSON.stringify(jobResults))
              localStorage.setItem('cf:jobResultsTime', Date.now().toString())
              console.log('[CACHE] Stored', jobResults.length, 'jobs')
            } catch (e) {
              console.error('[CACHE] Failed to store:', e)
            }
          }
        } catch (err) {
          console.error('[SEARCH] Error:', err)
        } finally {
          setLoading(false)
        }
      }

      performInitialSearch()
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const handleFilterChange = (key: string, value: string | boolean | number) => {
    setFilters(prev => ({ ...prev, [key]: value }))
  }

  const performSearch = async (keywords?: string, location?: string) => {
    const query = keywords || searchQuery
    const loc = location || filters.location

    if (!query || query.trim().length < 2) {
      setError('Please enter at least 2 characters')
      return
    }

    if (status === 'unauthenticated') {
      router.push('/auth/signin?callbackUrl=/career-finder/search')
      return
    }

    setLoading(true)
    setError('')
    
    try {
      console.log(`[SEARCH] Searching for "${query}" in "${loc}" (Resume: ${useResumeMatching})`)

      const response = await fetch('/api/jobs/search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          keywords: query,
          location: loc,
          salaryMin: filters.salaryMin ? parseInt(filters.salaryMin) : undefined,
          experienceLevel: filters.experienceLevel || undefined,
          workType: filters.workType === 'all' ? 'any' : filters.workType,
          limit: 50,
          useResumeMatching
        })
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Search failed')
      }

      // CRITICAL: Show NEW jobs found vs cached jobs
      const newJobsCount = data.metadata?.newResults || 0
      const cachedJobsCount = data.metadata?.cachedResults || 0
      console.log(`[SEARCH] ✅ ${newJobsCount} NEW jobs found, ${cachedJobsCount} cached jobs, ${data.jobs.length} total from ${data.sources?.length || 0} sources`)

      // ✅ FIX #1: DEDUPLICATE JOBS to prevent infinite loop
      const rawJobs = data.jobs || []
      const jobResults = deduplicateJobs(rawJobs)
      console.log(`[SEARCH] After deduplication: ${jobResults.length} unique jobs`)
      
      setJobs(jobResults)
      setMetadata(data.metadata || {})
      
      // ENTERPRISE FIX: Cache results for 20 minutes
      try {
        localStorage.setItem('cf:jobResults', JSON.stringify(jobResults))
        localStorage.setItem('cf:jobResultsTime', Date.now().toString())
        console.log('[CACHE] Stored', jobResults.length, 'jobs')
      } catch (e) {
        console.error('[CACHE] Failed to store:', e)
      }

      // Show board recommendations
      if (data.recommendations) {
        console.log(`[SEARCH] Recommended boards: ${data.recommendations.priorityBoards.join(', ')}`)
      }

    } catch (err) {
      console.error('[SEARCH] Error:', err)
      setError((err as Error).message || 'Failed to search jobs')
      setJobs([])
    } finally {
      setLoading(false)
    }
  }

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    performSearch()
  }

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen)
    if (!sidebarOpen) document.body.classList.add('sidebar-open')
    else document.body.classList.remove('sidebar-open')
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Search Section */}
      <section className="gradient-hero px-4 py-16 rounded-b-[3rem] shadow-2xl relative overflow-hidden">
        {/* Animated background blobs */}
        <div className="absolute top-0 left-0 w-72 h-72 bg-card/10 rounded-full blur-3xl -translate-x-1/2 -translate-y-1/2"></div>
        <div className="absolute bottom-0 right-0 w-96 h-96 bg-card/10 rounded-full blur-3xl translate-x-1/2 translate-y-1/2"></div>
        
        <div className="max-w-4xl mx-auto relative z-10">
          <div className="mb-4">
            <CareerFinderBackButton />
          </div>
          <h1 className="text-4xl md:text-6xl font-bold mb-4 text-foreground text-center drop-shadow-lg">
            🚀 Find Your Dream Job
          </h1>
          <p className="text-foreground/95 text-xl mb-8 text-center font-medium">
            Discover opportunities that match your skills and passion
          </p>
          
          <form onSubmit={handleSearch} className="flex flex-col gap-4">
            <div className="flex flex-col sm:flex-row gap-3">
              <div className="relative flex-1">
                <MagnifyingGlassIcon className="absolute left-4 top-1/2 -translate-y-1/2 w-6 h-6 text-muted-foreground" />
                <input
                  type="text"
                  placeholder="Search jobs by title, company, or keywords..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="modern-input w-full pl-12 pr-4 py-4 text-lg font-medium shadow-xl"
                  disabled={loading}
                />
              </div>
              <div className="flex gap-2">
                <button 
                  type="submit" 
                  className="btn btn-primary"
                  disabled={loading}
                >
                  {loading ? (
                    <>
                      <span className="inline-block animate-spin mr-2">⏳</span>
                      <span>Searching...</span>
                    </>
                  ) : (
                    <>
                      <MagnifyingGlassIcon className="w-6 h-6 inline mr-2" />
                      <span>Search</span>
                    </>
                  )}
                </button>
                {jobs.length > 0 && (
                  <button
                    type="button"
                    onClick={() => {
                      // Clear cache and reset
                      localStorage.removeItem('cf:jobResults')
                      localStorage.removeItem('cf:jobResultsTime')
                      setJobs([])
                      setSearchQuery('')
                      console.log('[SEARCH] Cache cleared, ready for new search')
                    }}
                    className="btn btn-secondary bg-white/20 hover:bg-card/30 text-white border-white/30"
                    disabled={loading}
                  >
                    🔄 New Search
                  </button>
                )}
              </div>
            </div>
            
            {/* AI Matching Always Active Indicator */}
            {session && (
              <div className="flex items-center gap-3 justify-center">
                <div className="flex items-center gap-2 bg-gradient-to-r from-blue-500/20 to-purple-500/20 backdrop-blur-sm px-6 py-3 rounded-full border border-blue-500/30">
                  <SparklesIcon className="w-5 h-5 text-blue-400 animate-pulse" />
                  <span className="text-foreground font-semibold text-sm">
                    ✨ AI Resume Matching Active
                  </span>
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                </div>
              </div>
            )}

            {/* Error Display */}
            {error && (
              <div className="bg-red-500/20 border border-red-500 text-foreground px-4 py-2 rounded-xl text-center">
                {error}
              </div>
            )}
          </form>
        </div>
      </section>

      {/* ✅ FIX #6: Search Prompt Banner for Cached Resume */}
      {showSearchPrompt && (
        <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
          <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 border-2 border-blue-500/30 rounded-2xl p-6 flex items-center gap-4">
            <div className="text-4xl">💡</div>
            <div className="flex-1">
              <h1 className="text-2xl sm:text-3xl font-bold text-foreground mb-2">Find Your Perfect Job</h1>
              <p className="text-sm text-muted-foreground">
                We found your resume. Enter keywords above and click Search to find matching jobs, or let AI analyze your resume automatically.
              </p>
            </div>
            <button
              onClick={() => setShowSearchPrompt(false)}
              className="text-muted-foreground hover:text-foreground transition-colors"
            >
              ✕
            </button>
          </div>
        </div>
      )}

      <div className="flex flex-col lg:flex-row gap-8 max-w-7xl mx-auto px-4 lg:px-8 py-8">
        {/* Main Content: Job Grid */}
        <main className="flex-1">
          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-3xl font-bold gradient-text">
                  {loading ? 'Searching...' : `${jobs.length} Jobs Found`}
                </h2>
                <p className="text-muted-foreground mt-1">
                  {loading ? 'Searching 25+ job boards...' : 
                   metadata?.useResumeMatching ? 'Ranked by skill match from your resume' :
                   metadata?.canadianPriority ? 'Prioritized Canadian sources' :
                   'Curated opportunities just for you'}
                </p>
              </div>
              <div className="flex items-center gap-2">
                <button
                  onClick={() => {
                    // Clear all cache
                    localStorage.removeItem('cf:jobResults')
                    localStorage.removeItem('cf:jobResultsTime')
                    localStorage.removeItem('cf:location')
                    localStorage.removeItem('cf:keywords')
                    localStorage.removeItem('cf:autopilotReady')
                    setJobs([])
                    setSearchQuery('')
                    setFilters({ location: '', salaryMin: '', salaryMax: '', workType: 'all', experienceLevel: '' })
                    console.log('[CACHE] All cache cleared')
                    window.location.reload()
                  }}
                  className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm font-medium"
                >
                  🗑️ Clear Cache
                </button>
                <button 
                  onClick={toggleSidebar} 
                  className="lg:hidden btn-primary flex items-center gap-2"
                >
                  <FunnelIcon className="w-5 h-5" />
                  Filters
                </button>
              </div>
            </div>

            {/* Search Metadata */}
            {metadata && jobs.length > 0 && (
              <div className="bg-card/50 backdrop-blur-sm border border-border rounded-xl p-4 mb-6">
                <div className="flex flex-wrap gap-4 text-sm">
                  {metadata.searchedBoards && (
                    <div className="flex items-center gap-2">
                      <span className="font-bold">📊</span>
                      <span>{metadata.searchedBoards} boards searched</span>
                    </div>
                  )}
                  {metadata.useResumeMatching && (
                    <div className="flex items-center gap-2">
                      <SparklesIcon className="w-4 h-4 text-primary" />
                      <span className="font-bold text-primary">AI Skill Matching Active</span>
                    </div>
                  )}
                  {metadata.cachedResults && (
                    <div className="flex items-center gap-2">
                      <span className="font-bold">⚡</span>
                      <span>Cached results (instant)</span>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* Job Status Bar - Figma Design */}
          {jobs.length > 0 && (
            <>
              {/* NEW: Show job discovery stats */}
              {metadata?.newResults !== undefined && (
                <div className="mb-4 flex items-center justify-center gap-2 sm:gap-4 text-xs sm:text-sm flex-wrap">
                  <div className="flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-1.5 sm:py-2 bg-green-500/10 rounded-full border border-green-500/20">
                    <span className="text-green-600 dark:text-green-400 font-semibold whitespace-nowrap">✨ {metadata.newResults} New</span>
                  </div>
                  {(metadata.cachedResults || 0) > 0 && (
                    <div className="flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-1.5 sm:py-2 bg-blue-500/10 rounded-full border border-blue-500/20">
                      <span className="text-blue-600 dark:text-blue-400 font-semibold whitespace-nowrap">💾 {metadata.cachedResults} Cached</span>
                    </div>
                  )}
                  <div className="flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-1.5 sm:py-2 bg-purple-500/10 rounded-full border border-purple-500/20">
                    <span className="text-purple-600 dark:text-purple-400 font-semibold whitespace-nowrap">📊 {jobs.length} Total</span>
                  </div>
                </div>
              )}
              
              <div className="mb-8">
                <JobStatusBar
                  activeStatus={activeStatus}
                  onStatusChange={setActiveStatus}
                  counts={{
                    discover: jobs.length,
                    saved: 0,
                    applied: 0,
                    closed: 0,
                    discarded: 0
                  }}
                />
              </div>
            </>
          )}

          {loading ? (
            <div className="space-y-6">
              {/* Loading Animation Header */}
              <div className="text-center py-8">
                <div className="inline-flex items-center gap-3 px-6 py-3 bg-primary/10 rounded-full">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
                  <span className="text-primary font-semibold">Finding the best opportunities for you...</span>
                </div>
              </div>
              
              {/* Skeleton Cards */}
              <div className="grid grid-cols-1 gap-6 max-w-md mx-auto">
                {[...Array(6)].map((_, i) => (
                  <JobCardSkeleton key={i} />
                ))}
              </div>
            </div>
          ) : jobs.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">🔍</div>
              <h3 className="text-2xl font-bold mb-2">No jobs found</h3>
              <p className="text-muted-foreground">Try adjusting your search or filters</p>
            </div>
          ) : useModernCards ? (
            /* Modern Figma-Inspired Job Cards */
            <div className="grid grid-cols-1 gap-6 max-w-md mx-auto">
              {jobs.map((job, index) => {
                const colorThemes: Array<'purple' | 'red' | 'yellow'> = ['purple', 'red', 'yellow']
                const colorTheme = colorThemes[index % 3]
                
                // Normalize salary for consistent display
                const normalizedSalary = normalizeSalary(job.salary)
                const salaryDisplay = normalizedSalary 
                  ? getSalaryDisplayString(normalizedSalary) 
                  : 'Salary not disclosed'
                
                const jobId = job.id || `job-${index}`
                const isJobLoading = loadingJobId === jobId
                
                return (
                  <ModernJobCard
                    key={jobId}
                    id={jobId}
                    title={job.title}
                    company={job.company}
                    location={job.location}
                    experience={filters.experienceLevel || 'All levels'}
                    workType={filters.workType === 'all' ? 'onsite' : (filters.workType as 'remote' | 'hybrid' | 'onsite' | 'part-time')}
                    salary={salaryDisplay}
                    description={`AI Score: ${job.aiScore || 'N/A'}${job.skillMatchPercent ? ` | Skill Match: ${job.skillMatchPercent}%` : ''}`}
                    postedDate="Posted recently"
                    colorTheme={colorTheme}
                    onView={() => handleJobSelection(job, jobId)}
                    isLoading={isJobLoading}
                  />
                )
              })}
            </div>
          ) : (
            /* Legacy Job Cards */
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
              {jobs.map((job, index) => {
                // Normalize salary for consistent display
                const normalizedSalary = normalizeSalary(job.salary)
                const salaryDisplay = normalizedSalary 
                  ? getSalaryDisplayString(normalizedSalary) 
                  : job.salary || 'Salary not disclosed'
                
                return (
                  <JobCard 
                    key={job.id || `job-${index}`} 
                    job={{...job, id: job.id || `job-${index}`, url: job.url || '#', salary: salaryDisplay}} 
                  />
                )
              })}
            </div>
          )}
        </main>

        {/* Sidebar: Filters */}
        <aside className={`hidden lg:block w-80 sticky top-8 self-start`}>
          <div className="gradient-border-card">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold gradient-text">
                🎯 Filters
              </h2>
              <button 
                onClick={() => setFilters({ location: '', salaryMin: '', salaryMax: '', workType: 'all', experienceLevel: '' })}
                className="text-sm text-secondary hover:text-primary font-bold transition-colors"
              >
                Clear All
              </button>
            </div>
            
            <div className="space-y-6">
              {/* Work Type Filter */}
              <div>
                <label className="block text-sm font-bold mb-3">💼 Work Type</label>
                <select
                  value={filters.workType}
                  onChange={(e) => handleFilterChange('workType', e.target.value)}
                  className="modern-input w-full"
                >
                  <option value="all">All Types</option>
                  <option value="remote">🏡 Remote</option>
                  <option value="hybrid">🔄 Hybrid</option>
                  <option value="onsite">🏢 At Location</option>
                  <option value="part-time">⏰ Part-time</option>
                </select>
              </div>

              {/* Location Filter */}
              <div>
                <label className="block text-sm font-bold mb-3">
                  <MapPinIcon className="w-5 h-5 inline mr-1 text-secondary" />
                  Location
                </label>
                <input
                  type="text"
                  placeholder="e.g., Edmonton, AB"
                  value={filters.location}
                  onChange={(e) => handleFilterChange('location', e.target.value)}
                  className="modern-input w-full"
                />
              </div>

              {/* Salary Range Filter */}
              <div>
                <label className="block text-sm font-bold mb-3">💰 Salary Range</label>
                <input
                  type="number"
                  placeholder="Min Salary"
                  value={filters.salaryMin}
                  onChange={(e) => handleFilterChange('salaryMin', e.target.value)}
                  className="modern-input w-full mb-3"
                />
                <input
                  type="number"
                  placeholder="Max Salary"
                  value={filters.salaryMax}
                  onChange={(e) => handleFilterChange('salaryMax', e.target.value)}
                  className="modern-input w-full"
                />
              </div>

              {/* Experience Level Filter */}
              <div>
                <label className="block text-sm font-bold mb-3">📈 Experience Level</label>
                <select
                  value={filters.experienceLevel}
                  onChange={(e) => handleFilterChange('experienceLevel', e.target.value)}
                  className="modern-input w-full"
                >
                  <option value="">Any Level</option>
                  <option value="entry">Entry Level</option>
                  <option value="mid">Mid Level</option>
                  <option value="senior">Senior Level</option>
                  <option value="executive">Executive</option>
                </select>
              </div>
            </div>
          </div>
        </aside>
      </div>

      {/* Mobile Filter Modal */}
      {sidebarOpen && (
        <>
          <div 
            className="fixed inset-0 bg-black/50 z-40 lg:hidden" 
            onClick={toggleSidebar}
          />
          <div className="fixed inset-y-0 left-0 w-80 bg-card z-50 lg:hidden overflow-y-auto p-6 shadow-2xl">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-bold">Filters</h2>
              <button 
                onClick={toggleSidebar}
                className="p-2 hover:bg-muted rounded-lg transition-colors"
              >
                ✕
              </button>
            </div>
            
            <div className="space-y-6">
              <div className="filter-group">
                <label className="block text-sm font-semibold mb-3">💼 Work Type</label>
                <select
                  value={filters.workType}
                  onChange={(e) => handleFilterChange('workType', e.target.value)}
                  className="modern-input w-full"
                >
                  <option value="all">All Types</option>
                  <option value="remote">🏡 Remote</option>
                  <option value="hybrid">🔄 Hybrid</option>
                  <option value="onsite">🏢 At Location</option>
                  <option value="part-time">⏰ Part-time</option>
                </select>
              </div>

              <div className="filter-group">
                <label className="block text-sm font-semibold mb-3">
                  <MapPinIcon className="w-4 h-4 inline mr-1" />
                  Location
                </label>
                <input
                  type="text"
                  placeholder="e.g., Edmonton, AB"
                  value={filters.location}
                  onChange={(e) => handleFilterChange('location', e.target.value)}
                  className="modern-input w-full"
                />
              </div>

              <div className="filter-group">
                <label className="block text-sm font-semibold mb-3">Salary Range</label>
                <input
                  type="number"
                  placeholder="Min Salary"
                  value={filters.salaryMin}
                  onChange={(e) => handleFilterChange('salaryMin', e.target.value)}
                  className="modern-input w-full mb-3"
                />
                <input
                  type="number"
                  placeholder="Max Salary"
                  value={filters.salaryMax}
                  onChange={(e) => handleFilterChange('salaryMax', e.target.value)}
                  className="modern-input w-full"
                />
              </div>

              <button 
                onClick={toggleSidebar}
                className="w-full btn-primary py-3 rounded-xl font-semibold"
              >
                Apply Filters
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  )
}
</file>

<file path="src/app/cover-letter/page.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Button } from '@/components/ui/button'
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select'
import { Download, Loader2 } from 'lucide-react'
import { useResumeContext } from '@/components/resume-context'
import toast from 'react-hot-toast'
import { CoverLetterSkeleton } from '@/components/skeleton-loader'

export default function CoverLetterPage() {
  const { selectedResume, resumes, setSelectedResumeId, refresh } = useResumeContext()
  const [jobTitle, setJobTitle] = useState('')
  const [companyName, setCompanyName] = useState('')
  const [jobDescription, setJobDescription] = useState('')
  const [resumeText, setResumeText] = useState('')
  const [tone, setTone] = useState<'professional' | 'casual' | 'enthusiastic'>('professional')
  const [length, setLength] = useState<'short' | 'medium' | 'long'>('medium')
  const [isLoading, setIsLoading] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [previewHtml, setPreviewHtml] = useState<string | null>(null)

  const generate = async () => {
    // Use current state or fall back to selected resume text immediately
    const rt = (resumeText && resumeText.trim().length > 0)
      ? resumeText
      : (selectedResume?.extractedText || '')
    if (!resumeText && selectedResume?.extractedText) {
      // Update state for UI, but don't wait for it to set before sending request
      setResumeText(selectedResume.extractedText)
    }
    if (!jobTitle.trim() || !companyName.trim() || !jobDescription || jobDescription.trim().length < 50) {
      toast.error('Fill job title, company, and at least 50 chars of job description')
      return
    }
    if (!rt || rt.trim().length < 50) {
      toast.error('Add your resume text (50+ chars) or upload/select a resume')
      return
    }
    setIsLoading(true)
    try {
      let psychology: any | undefined
      try { const stored = localStorage.getItem('analyze:psychology'); if (stored) psychology = JSON.parse(stored) } catch {}
      const resp = await fetch('/api/cover-letter/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          raw: true,
          jobTitle,
          companyName,
          jobDescription,
          resumeText: rt,
          tone,
          length,
          psychology
        })
      })
      if (!resp.ok) {
        const reqId = resp.headers.get('x-request-id') || ''
        const data = await resp.json().catch(() => ({})) as any
        if (resp.status === 401) {
          toast.error('Session expired. Please sign in again.' + (reqId ? ` (Ref: ${reqId})` : ''))
          try { window.location.href = '/auth/signin' } catch {}
          return
        }
        if (resp.status === 429) {
          toast.error((data?.error || 'Rate limit exceeded') + (reqId ? ` (Ref: ${reqId})` : ''))
          return
        }
        if (resp.status >= 500) {
          toast.error('Server error while generating cover letter.' + (reqId ? ` (Ref: ${reqId})` : ''))
          return
        }
        throw new Error(data?.error || 'Failed to generate cover letter')
      }
      const data = await resp.json()
      const txt: string = data.coverLetter || ''
      const html = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Cover Letter</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.6;color:#111;max-width:8.5in;margin:0 auto;padding:0.7in;white-space:pre-wrap}</style></head><body>${txt.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
      setPreviewHtml(html)
      toast.success('Cover letter generated!')
    } catch (e) {
      toast.error(e instanceof Error ? e.message : 'Failed to generate')
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    // Auto-fill Resume Text from selected resume when available
    const fill = async () => {
      try {
        if (!selectedResume && (!resumes || resumes.length === 0)) {
          await refresh()
        }
        const current = selectedResume || (resumes && resumes[0])
        if (current && !resumeText) {
          setResumeText(current.extractedText || '')
        }
      } catch {}
    }
    fill()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedResume, resumes])

  // Auto-fill job fields from last Analyze/selection
  useEffect(() => {
    try {
      if (!jobTitle) {
        const jt = localStorage.getItem('job:title')
        if (jt) setJobTitle(jt)
      }
      if (!companyName) {
        const cn = localStorage.getItem('job:company')
        if (cn) setCompanyName(cn)
      }
      if (!jobDescription) {
        const jd = localStorage.getItem('job:description')
        if (jd) setJobDescription(jd)
      }
    } catch {}
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  // Persist job fields to localStorage for cross-app autofill
  useEffect(() => {
    try { if (jobTitle) localStorage.setItem('job:title', jobTitle) } catch {}
  }, [jobTitle])
  useEffect(() => {
    try { if (companyName) localStorage.setItem('job:company', companyName) } catch {}
  }, [companyName])
  useEffect(() => {
    try { if (jobDescription) localStorage.setItem('job:description', jobDescription) } catch {}
  }, [jobDescription])

  const downloadPdf = async () => {
    if (!previewHtml) return
    try {
      const resp = await fetch('/api/resume/export/pdf', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          html: previewHtml,
          filename: `${companyName || 'Company'}_${jobTitle || 'CoverLetter'}.pdf`
        })
      })
      if (!resp.ok) throw new Error('Failed to export PDF')
      const blob = await resp.blob()
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${companyName || 'Company'}_${jobTitle || 'CoverLetter'}.pdf`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch (e) {
      toast.error(e instanceof Error ? e.message : 'Failed to export')
    }
  }

  const saveLetter = async () => {
    if (!previewHtml) {
      toast.error('Generate a cover letter first')
      return
    }
    setIsSaving(true)
    try {
      const resp = await fetch('/api/cover-letter/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          raw: true,
          save: true,
          jobTitle,
          companyName,
          jobDescription,
          resumeText,
          tone,
          length,
        })
      })
      if (!resp.ok) {
        const reqId = resp.headers.get('x-request-id') || ''
        const data = await resp.json().catch(() => ({})) as any
        if (resp.status === 401) {
          toast.error('Session expired. Please sign in again.' + (reqId ? ` (Ref: ${reqId})` : ''))
          try { window.location.href = '/auth/signin' } catch {}
          return
        }
        if (resp.status === 429) {
          toast.error((data?.error || 'Rate limit exceeded') + (reqId ? ` (Ref: ${reqId})` : ''))
          return
        }
        if (resp.status >= 500) {
          toast.error('Server error while saving cover letter.' + (reqId ? ` (Ref: ${reqId})` : ''))
          return
        }
        throw new Error(data?.error || 'Failed to save')
      }
      toast.success('Cover letter saved!')
    } catch (e) {
      toast.error(e instanceof Error ? e.message : 'Failed to save')
    } finally {
      setIsSaving(false)
    }
  }

  return (
    <div className="container mx-auto p-4 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Generate Cover Letter</CardTitle>
          <CardDescription>Paste the job description and your resume. Choose tone and length, then generate a preview.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>Job Title</Label>
              <Input value={jobTitle} onChange={(e) => setJobTitle(e.target.value)} placeholder="e.g., Software Engineer" />
            </div>
            <div className="space-y-2">
              <Label>Company Name</Label>
              <Input value={companyName} onChange={(e) => setCompanyName(e.target.value)} placeholder="e.g., Acme Corp" />
            </div>
          </div>

          <div className="space-y-2">
            <Label>Job Description</Label>
            <Textarea value={jobDescription} onChange={(e) => setJobDescription(e.target.value)} rows={8} placeholder="Paste the job description here" />
          </div>

          <div className="space-y-2">
            <Label>Resume Text</Label>
            <Textarea value={resumeText || selectedResume?.extractedText || ''} onChange={(e) => setResumeText(e.target.value)} rows={8} placeholder={selectedResume ? 'Using your uploaded resume. You can override here.' : 'Paste your resume text here'} />
            {!selectedResume && (
              <div className="text-xs text-muted-foreground">Tip: upload a resume first so it’s auto-filled across the app.</div>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>Tone</Label>
              <Select value={tone} onValueChange={(v) => setTone(v as any)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="professional">Professional</SelectItem>
                  <SelectItem value="casual">Casual</SelectItem>
                  <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label>Length</Label>
              <Select value={length} onValueChange={(v) => setLength(v as any)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="short">Short</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="long">Long</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <Button onClick={generate} disabled={isLoading} className="w-full">
            {isLoading ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" />Generating...</>) : 'Generate Cover Letter'}
          </Button>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Preview</CardTitle>
          <CardDescription>Review your cover letter before downloading.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {isLoading ? (
            <CoverLetterSkeleton />
          ) : previewHtml ? (
            <>
              <div className="border rounded overflow-hidden">
                <iframe srcDoc={previewHtml} className="w-full h-96 border-0" title="Cover Letter Preview" sandbox="allow-same-origin allow-scripts" />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                <Button onClick={downloadPdf} className="w-full"><Download className="mr-2 h-4 w-4" />Download PDF</Button>
                <Button onClick={saveLetter} disabled={isSaving} variant="outline" className="w-full">
                  {isSaving ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" />Saving...</>) : 'Save to Applications'}
                </Button>
              </div>
            </>
          ) : (
            <div className="text-sm text-muted-foreground">No preview yet. Fill the form and click Generate.</div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from 'next'
import './globals.css'
import { Providers } from '@/components/providers'
import { ClientInit } from '@/components/client-init'
import { AppShell } from '@/components/app-shell'
import { initSentry } from '@/lib/sentry'
import { ErrorBoundary } from '@/components/error-boundary'
import { Toaster } from 'react-hot-toast'
import { OnboardingRedirect } from '@/components/onboarding/OnboardingRedirect'
import { CommandPalette } from '@/components/command-palette'
import { GlobalLoadingOverlay } from '@/components/global-loading-overlay'

export const metadata: Metadata = {
  title: 'Career Lever AI - AI-Powered Job Application Assistant',
  description: 'Customize your resume and cover letters with AI to land your dream job. Get company insights, track applications, and boost your career success.',
  keywords: 'resume, job application, AI, career, recruitment, cover letter',
  icons: { icon: '/favicon.ico', apple: '/icon-192.svg' },
  appleWebApp: {
    capable: true,
    statusBarStyle: 'black-translucent',
    title: 'Career Lever AI',
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  if (typeof window !== 'undefined') {
    try { initSentry() } catch {}
  }
  return (
    <html lang="en">
      <body className="font-sans bg-background text-foreground min-h-screen" style={{ fontFamily: 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif' }}>
        <script dangerouslySetInnerHTML={{ __html: `
          // Suppress browser extension errors
          window.addEventListener('error', function(e) {
            if (e.message && e.message.includes('message channel closed')) {
              e.preventDefault();
              return true;
            }
          });
          window.addEventListener('unhandledrejection', function(e) {
            if (e.reason && e.reason.message && e.reason.message.includes('message channel closed')) {
              e.preventDefault();
              return true;
            }
          });
          // Theme init
          try{(${function(){
            if(typeof window!=='undefined'){window.__initTheme||(window.__initTheme=true,document.documentElement.style.setProperty('--theme-transition','opacity 0.3s ease'),document.documentElement.classList.add('theme-anim'))}
          }.toString()})()}catch(e){}
        ` }} />
        <ClientInit />
        <meta name="mobile-web-app-capable" content="yes" />
        <ErrorBoundary>
          <Providers>
            <Toaster
              position="top-right"
              toastOptions={{
                duration: 4000,
                style: {
                  background: 'hsl(var(--background))',
                  color: 'hsl(var(--foreground))',
                  border: '1px solid hsl(var(--border))',
                },
              }}
            />
            <OnboardingRedirect />
            <CommandPalette />
            <GlobalLoadingOverlay />
            <AppShell>{children}</AppShell>
          </Providers>
        </ErrorBoundary>
        {process.env.NEXT_PUBLIC_ENABLE_SW === 'true' ? (
          <script dangerouslySetInnerHTML={{ __html: `if('serviceWorker' in navigator){window.addEventListener('load',()=>{navigator.serviceWorker.register('/sw.js').catch(()=>{})})}` }} />
        ) : (
          <script dangerouslySetInnerHTML={{ __html: `
            (function(){
              if ('serviceWorker' in navigator) {
                navigator.serviceWorker.getRegistrations().then(function(regs){
                  regs.forEach(function(r){ r.unregister().catch(function(){}) })
                }).catch(function(){})
              }
              if (window.caches && caches.keys) {
                caches.keys().then(function(keys){
                  keys.forEach(function(k){ caches.delete(k).catch(function(){}) })
                }).catch(function(){})
              }
            })();
          ` }} />
        )}
      </body>
    </html>
  )
}
</file>

<file path="src/app/notifications/components/notifications-page.tsx">
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Bell, CheckCheck, Trash2, Loader2 } from 'lucide-react'
import { NotificationService, Notification } from '@/lib/notification-service'
import { SkeletonLoader } from '@/components/skeleton-loader'
import { formatDistanceToNow } from 'date-fns'

interface NotificationsPageProps {
  userId: string
}

export function NotificationsPage({ userId }: NotificationsPageProps) {
  const [notifications, setNotifications] = useState<Notification[]>([])
  const [loading, setLoading] = useState(true)
  const [markingAllRead, setMarkingAllRead] = useState(false)

  useEffect(() => {
    loadNotifications()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [userId])

  const loadNotifications = async () => {
    setLoading(true)
    try {
      const data = await NotificationService.getNotifications(userId, {
        limit: 50,
        unreadOnly: false
      })
      setNotifications(data)
    } catch (error) {
      console.error('Failed to load notifications:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleMarkAsRead = async (notificationId: string) => {
    try {
      await NotificationService.markAsRead(notificationId)
      setNotifications(prev =>
        prev.map(n =>
          n.id === notificationId ? { ...n, readAt: new Date() } : n
        )
      )
    } catch (error) {
      console.error('Failed to mark as read:', error)
    }
  }

  const handleMarkAllAsRead = async () => {
    setMarkingAllRead(true)
    try {
      await NotificationService.markAllAsRead(userId)
      setNotifications(prev =>
        prev.map(n => ({ ...n, readAt: n.readAt || new Date() }))
      )
    } catch (error) {
      console.error('Failed to mark all as read:', error)
    } finally {
      setMarkingAllRead(false)
    }
  }

  const handleDelete = async (notificationId: string) => {
    try {
      await NotificationService.deleteNotification(notificationId)
      setNotifications(prev => prev.filter(n => n.id !== notificationId))
    } catch (error) {
      console.error('Failed to delete notification:', error)
    }
  }

  const unreadCount = notifications.filter(n => !n.readAt).length

  if (loading) {
    return (
      <div className="container max-w-4xl mx-auto py-8">
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Notifications</CardTitle>
                <CardDescription>Loading your notifications...</CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <SkeletonLoader variant="card" lines={8} />
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="container max-w-4xl mx-auto py-8">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Bell className="w-5 h-5" />
                Notifications
                {unreadCount > 0 && (
                  <Badge variant="destructive">{unreadCount}</Badge>
                )}
              </CardTitle>
              <CardDescription>
                Stay updated with your job search activity
              </CardDescription>
            </div>
            {unreadCount > 0 && (
              <Button
                variant="outline"
                size="sm"
                onClick={handleMarkAllAsRead}
                disabled={markingAllRead}
              >
                {markingAllRead ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Marking...
                  </>
                ) : (
                  <>
                    <CheckCheck className="w-4 h-4 mr-2" />
                    Mark all read
                  </>
                )}
              </Button>
            )}
          </div>
        </CardHeader>
        <CardContent>
          {notifications.length === 0 ? (
            <div className="text-center py-12">
              <Bell className="w-12 h-12 mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-semibold mb-2">No notifications yet</h3>
              <p className="text-muted-foreground">
                We&apos;ll notify you about important updates and activities
              </p>
            </div>
          ) : (
            <div className="space-y-3">
              {notifications.map((notification) => (
                <div
                  key={notification.id}
                  className={`p-4 rounded-lg border transition-colors ${
                    notification.readAt
                      ? 'bg-background border-border'
                      : 'bg-accent/50 border-primary/20'
                  }`}
                >
                  <div className="flex items-start justify-between gap-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h4 className="font-semibold">{notification.title}</h4>
                        {!notification.readAt && (
                          <Badge variant="default" className="text-xs">New</Badge>
                        )}
                      </div>
                      <p className="text-sm text-muted-foreground mb-2">
                        {notification.message}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        {formatDistanceToNow(new Date(notification.createdAt), {
                          addSuffix: true,
                        })}
                      </p>
                    </div>
                    <div className="flex items-center gap-2">
                      {!notification.readAt && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleMarkAsRead(notification.id)}
                        >
                          <CheckCheck className="w-4 h-4" />
                        </Button>
                      )}
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDelete(notification.id)}
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/notifications/page.tsx">
import { Metadata } from 'next'
import { redirect } from 'next/navigation'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { NotificationsPage } from './components/notifications-page'

export const metadata: Metadata = {
  title: 'Notifications | Career Lever AI',
  description: 'View and manage your notifications',
}

export default async function Notifications() {
  const session = await getServerSession(authOptions)
  
  if (!session?.user) {
    redirect('/auth/signin?callbackUrl=/notifications')
  }

  return <NotificationsPage userId={session.user.id} />
}
</file>

<file path="src/components/career-finder/job-card-skeleton.tsx">
'use client'

import { Card, CardContent, CardHeader } from '@/components/ui/card'
import { Skeleton } from '@/components/ui/skeleton'

export function JobCardSkeleton() {
  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader className="space-y-2">
        <div className="flex items-start justify-between">
          <div className="flex-1 space-y-2">
            <Skeleton className="h-6 w-3/4" />
            <Skeleton className="h-4 w-1/2" />
          </div>
          <Skeleton className="h-10 w-10 rounded-full" />
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center gap-4">
          <Skeleton className="h-4 w-24" />
          <Skeleton className="h-4 w-32" />
          <Skeleton className="h-4 w-28" />
        </div>
        <Skeleton className="h-20 w-full" />
        <div className="flex flex-wrap gap-2">
          <Skeleton className="h-6 w-16" />
          <Skeleton className="h-6 w-20" />
          <Skeleton className="h-6 w-18" />
        </div>
        <div className="flex items-center justify-between pt-2">
          <Skeleton className="h-4 w-32" />
          <Skeleton className="h-9 w-24" />
        </div>
      </CardContent>
    </Card>
  )
}

export function JobCardSkeletonGrid({ count = 6 }: { count?: number }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {Array.from({ length: count }).map((_, i) => (
        <JobCardSkeleton key={i} />
      ))}
    </div>
  )
}
</file>

<file path="src/components/global-loading-overlay.tsx">
'use client'

import { useAppStore } from '@/stores/app.store'
import { Loader2 } from 'lucide-react'

export function GlobalLoadingOverlay() {
  const globalLoading = useAppStore((state) => state.globalLoading)
  const loadingMessage = useAppStore((state) => state.loadingMessage)
  
  if (!globalLoading) return null
  
  return (
    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center">
      <div className="bg-card p-8 rounded-lg shadow-2xl flex flex-col items-center gap-4 border border-border">
        <div className="relative">
          <Loader2 className="w-12 h-12 animate-spin text-primary" />
          <div className="absolute inset-0 bg-primary/20 rounded-full animate-ping" />
        </div>
        <div className="text-center">
          <p className="text-lg font-semibold text-foreground">
            {loadingMessage || 'Loading...'}
          </p>
          <p className="text-sm text-muted-foreground mt-1">
            Please wait a moment
          </p>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/lazy-components.tsx">
/**
 * Lazy-loaded components for better performance
 * 
 * Heavy components are dynamically imported to reduce initial bundle size
 * and improve page load times.
 */

import dynamic from 'next/dynamic'
import { SkeletonLoader } from '@/components/skeleton-loader'
import { Loader2 } from 'lucide-react'

// Loading fallback component
const LoadingFallback = () => (
  <div className="flex items-center justify-center p-8">
    <Loader2 className="w-8 h-8 animate-spin text-primary" />
  </div>
)

// Perplexity Analysis Display (heavy charts and visualizations)
export const LazyPerplexityAnalysis = dynamic(
  () => import('@/components/resume-builder/perplexity-analysis-display').then(mod => ({ default: mod.PerplexityAnalysisDisplay })),
  {
    loading: () => <SkeletonLoader variant="card" lines={8} />,
    ssr: false
  }
)

// Resume Preview Modal (heavy PDF generation)
export const LazyResumePreview = dynamic(
  () => import('@/components/resume-builder/resume-preview-modal').then(mod => ({ default: mod.ResumePreviewButton })),
  {
    loading: () => <LoadingFallback />,
    ssr: false
  }
)

// Job Boards Dashboard (heavy with multiple API calls)
export const LazyJobBoardsDashboard = dynamic(
  () => import('@/app/job-boards/components/job-boards-dashboard').then(mod => ({ default: mod.JobBoardsDashboard })),
  {
    loading: () => <SkeletonLoader variant="card" lines={12} />,
    ssr: false
  }
)

// Resume Customizer (heavy AI processing)
export const LazyResumeCustomizer = dynamic(
  () => import('@/components/resume-customizer').then(mod => ({ default: mod.ResumeCustomizer })),
  {
    loading: () => <SkeletonLoader variant="card" lines={8} />,
    ssr: false
  }
)

// Autopilot Progress Tracker (only needed during autopilot)
export const LazyAutopilotTracker = dynamic(
  () => import('@/components/autopilot-progress-tracker').then(mod => ({ default: mod.AutopilotProgressTracker })),
  {
    loading: () => null,
    ssr: false
  }
)
</file>

<file path="src/components/modern-job-card.tsx">
/**
 * Modern Job Card Component
 * Figma-inspired job cards with color variations
 * 
 * Color themes: purple, red, yellow
 */

'use client'

import { MapPin, GraduationCap, Clock, ArrowRight } from 'lucide-react'
import Link from 'next/link'
import { cn } from '@/lib/utils'
import { getSalaryDisplay } from '@/lib/salary-utils'

export interface ModernJobCardProps {
  id: string
  title: string
  company: string
  companyLogo?: string
  location: string
  experience: string
  workType: 'remote' | 'hybrid' | 'onsite' | 'fulltime' | 'part-time' | 'contract'
  salary: string
  currency?: string
  description: string
  postedDate: string
  colorTheme?: 'purple' | 'red' | 'yellow'
  aiRiskLevel?: 'low' | 'medium' | 'high' | 'critical'
  aiRiskScore?: number
  onView?: () => void
  isLoading?: boolean
}

const colorThemes = {
  purple: {
    bg: '#5424FD',
    badgeBg: 'rgba(255, 255, 255, 0.2)',
    badgeBorder: 'rgba(255, 255, 255, 0.4)',
    textColor: '#FFFFFF',
    descColor: '#FFFFFF',
  },
  red: {
    bg: '#F5001E',
    badgeBg: 'rgba(255, 255, 255, 0.15)',
    badgeBorder: 'rgba(255, 255, 255, 0.4)',
    textColor: '#FFFFFF',
    descColor: '#FFFFFF',
  },
  yellow: {
    bg: '#FCC636',
    badgeBg: 'rgba(0, 0, 0, 0.15)',
    badgeBorder: 'rgba(0, 0, 0, 0.4)',
    textColor: '#000000',
    descColor: '#000000',
  },
}

const workTypeLabels = {
  remote: 'Remote',
  hybrid: 'Hybrid',
  onsite: 'On-site',
  fulltime: 'Fulltime',
  'part-time': 'Part-time',
  contract: 'Contract',
}

export function ModernJobCard({
  id,
  title,
  company,
  companyLogo,
  location,
  experience,
  workType,
  salary,
  description,
  postedDate,
  colorTheme = 'purple',
  aiRiskLevel,
  aiRiskScore,
  onView,
  isLoading = false,
}: ModernJobCardProps) {
  const theme = colorThemes[colorTheme]

  // ✅ FIX #7: Smart salary with estimation fallback 
  const salaryDisplay = getSalaryDisplay({ title, salary, location })

  return (
    <div 
      className={cn(
        "job-card relative w-full overflow-visible shadow-2xl transition-all duration-[400ms] mt-5",
        isLoading ? "animate-pulse" : ""
      )}
      data-company={company}
      data-type={colorTheme}
      style={{
        borderRadius: '0 12px 24px 24px',
        transitionTimingFunction: 'cubic-bezier(0.165, 0.84, 0.44, 1)',
        border: 'none' // NO BORDER - FILE FOLDER LOOK
      }}
    >
      {/* PULSING SKELETON LOADER - PROPER IMPLEMENTATION */}
      {isLoading && (
        <div className="absolute inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50" style={{ borderRadius: '0 12px 24px 24px' }}>
          <div className="flex flex-col items-center gap-4">
            {/* Pulsing Spinner */}
            <div className="relative">
              <div className="w-16 h-16 border-4 border-purple-500/30 border-t-purple-500 rounded-full animate-spin"></div>
              <div className="absolute inset-0 w-16 h-16 border-4 border-transparent border-t-purple-400 rounded-full animate-ping"></div>
            </div>
            {/* Pulsing Text */}
            <div className="bg-purple-600/90 px-6 py-3 rounded-full shadow-xl animate-pulse">
              <span className="text-white font-bold text-sm">Loading insights...</span>
            </div>
            {/* Skeleton Lines */}
            <div className="w-48 space-y-2 animate-pulse">
              <div className="h-2 bg-card/20 rounded"></div>
              <div className="h-2 bg-card/15 rounded w-3/4"></div>
              <div className="h-2 bg-card/10 rounded w-1/2"></div>
            </div>
          </div>
        </div>
      )}

      {/* File Folder Tab */}
      <div 
        className="absolute top-[-16px] left-0 w-[120px] h-[20px] flex items-center justify-center"
        style={{
          background: theme.bg,
          borderRadius: '8px 8px 0 0',
          boxShadow: 'inset 0 2px 4px rgba(255,255,255,0.2), 0 -2px 8px rgba(0,0,0,0.1)'
        }}
      >
        <span 
          className="text-[10px] font-semibold uppercase tracking-wide"
          style={{ 
            color: 'rgba(255,255,255,0.8)',
            letterSpacing: '0.5px'
          }}
        >
          {company.substring(0, 12)}
        </span>
      </div>

      {/* Main colored section (Folder Top) */}
      <div 
        className="relative px-4 pt-4 pb-3"
        style={{ background: theme.bg }}
      >
        {/* Company info */}
        <div className="flex items-center gap-3 mb-4">
          {/* Company logo */}
          <div className="w-12 h-12 rounded-lg bg-[#1F1F1F] flex items-center justify-center flex-shrink-0">
            {companyLogo ? (
              <img src={companyLogo} alt={company} className="w-7 h-7 object-contain" />
            ) : (
              <span className="text-white text-sm font-bold">
                {company.charAt(0)}
              </span>
            )}
          </div>

          {/* Title and company */}
          <div className="flex flex-col gap-1">
            <h3 
              className="text-lg font-bold leading-tight"
              style={{ 
                color: theme.textColor,
                fontFamily: 'var(--font-inter), Satoshi, sans-serif'
              }}
            >
              {title}
            </h3>
            <p 
              className="text-xs font-medium"
              style={{ color: theme.textColor }}
            >
              {company}
            </p>
          </div>
        </div>

        {/* Badges */}
        <div className="flex items-center gap-2 mb-4 flex-wrap">
          {/* Location */}
          <div
            className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
            style={{
              background: theme.badgeBg,
              borderColor: theme.badgeBorder,
              color: theme.textColor,
            }}
          >
            <MapPin className="w-4 h-4" />
            <span>{location}</span>
          </div>

          {/* Experience */}
          <div
            className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
            style={{
              background: theme.badgeBg,
              borderColor: theme.badgeBorder,
              color: theme.textColor,
            }}
          >
            <GraduationCap className="w-4 h-4" />
            <span>{experience}</span>
          </div>

          {/* Work type */}
          <div
            className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
            style={{
              background: theme.badgeBg,
              borderColor: theme.badgeBorder,
              color: theme.textColor,
            }}
          >
            <Clock className="w-4 h-4" />
            <span>{workTypeLabels[workType]}</span>
          </div>

          {/* AI Risk Badge - ENTERPRISE FEATURE */}
          {aiRiskLevel && (
            <div
              className={cn(
                "flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-semibold",
                aiRiskLevel === 'low' && "bg-green-500/20 border-green-500/40 text-green-700 dark:text-green-300",
                aiRiskLevel === 'medium' && "bg-yellow-500/20 border-yellow-500/40 text-yellow-700 dark:text-yellow-300",
                aiRiskLevel === 'high' && "bg-orange-500/20 border-orange-500/40 text-orange-700 dark:text-orange-300",
                aiRiskLevel === 'critical' && "bg-red-500/20 border-red-500/40 text-red-700 dark:text-red-300"
              )}
            >
              🤖
              <span>
                {aiRiskLevel === 'low' && 'Safe'}
                {aiRiskLevel === 'medium' && 'Med Risk'}
                {aiRiskLevel === 'high' && 'High Risk'}
                {aiRiskLevel === 'critical' && 'Critical'}
              </span>
              {aiRiskScore && <span className="opacity-75">({aiRiskScore}%)</span>}
            </div>
          )}
        </div>

        {/* Description */}
        <p 
          className="text-xs leading-relaxed mb-4 line-clamp-2"
          style={{ 
            color: theme.descColor,
            lineHeight: '140%'
          }}
        >
          {description}
        </p>

        {/* View button - top right */}
        <Link
          href={`/jobs/${id}`}
          onClick={(e) => {
            if (onView) {
              e.preventDefault()
              onView()
            }
          }}
          className="absolute top-4 right-4 flex items-center gap-1 px-4 py-3 bg-[#2B2B2B] border border-[#4E4E4E] rounded-[25px] text-white text-sm font-bold transition-transform duration-200 hover:scale-105 active:scale-95"
        >
          <span>View</span>
          <ArrowRight className="w-4 h-4 rotate-[-45deg]" />
        </Link>
      </div>

      {/* Footer section (Folder Paper) */}
      <div 
        className="card-content relative px-4 py-4 bg-card"
        style={{
          borderRadius: '0 0 21px 25px'
        }}
      >
        {/* Paper Lines Effect */}
        <div 
          className="absolute top-4 left-4 right-4 h-[1px] opacity-30 pointer-events-none"
          style={{
            background: 'repeating-linear-gradient(90deg, transparent, transparent 3px, rgba(0,0,0,0.05) 3px, rgba(0,0,0,0.05) 4px)'
          }}
        />
        <div className="flex items-center justify-between">
          {/* Posted date */}
          <div className="flex items-center gap-1 text-xs text-foreground font-medium">
            <Clock className="w-4 h-4 text-foreground" />
            <span>{postedDate}</span>
          </div>

          {/* Salary */}
          <div className="text-lg font-bold text-foreground">
            {salaryDisplay}
          </div>
        </div>
      </div>
    </div>
  )
}

/**
 * Job Card Grid - displays multiple cards with folder stacking effect
 */
export function ModernJobCardGrid({ 
  jobs, 
  onViewJob 
}: { 
  jobs: ModernJobCardProps[]
  onViewJob?: (jobId: string) => void
}) {
  return (
    <div className="grid grid-cols-1 gap-8 w-full max-w-md mx-auto px-6 py-6">
      {jobs.map((job, index) => {
        // Rotate through color themes
        const themes: Array<'purple' | 'red' | 'yellow'> = ['purple', 'red', 'yellow']
        const colorTheme = themes[index % 3]
        
        return (
          <ModernJobCard
            key={job.id}
            {...job}
            colorTheme={colorTheme}
            onView={() => onViewJob?.(job.id)}
          />
        )
      })}
    </div>
  )
}
</file>

<file path="src/components/resume-builder/linkedin-url-import.tsx">
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Loader2, Linkedin, CheckCircle, AlertCircle } from 'lucide-react'
import toast from 'react-hot-toast'

interface ResumeData {
  personalInfo: {
    fullName: string
    email: string
    phone: string
    location: string
    linkedin?: string
    website?: string
    summary: string
  }
  experience: Array<{
    id: string
    company: string
    position: string
    location: string
    startDate: string
    endDate: string
    current: boolean
    description: string
    achievements: string[]
    technologies: string[]
  }>
  education: Array<{
    id: string
    institution: string
    degree: string
    field: string
    location: string
    graduationDate: string
    gpa?: string
    honors?: string[]
  }>
  skills: {
    technical: string[]
    soft: string[]
    languages: Array<{ language: string; proficiency: string }>
    certifications: Array<{ name: string; issuer: string; date: string }>
  }
  projects: Array<{
    id: string
    name: string
    description: string
    technologies: string[]
    url?: string
    startDate: string
    endDate: string
  }>
}

interface LinkedInUrlImportProps {
  onImport: (data: ResumeData) => void
  className?: string
}

export function LinkedInUrlImport({ onImport, className = '' }: LinkedInUrlImportProps) {
  const [url, setUrl] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState(false)

  const validateUrl = (url: string): boolean => {
    return url.includes('linkedin.com/in/') || url.includes('linkedin.com/pub/')
  }

  const handleImport = async () => {
    if (!validateUrl(url)) {
      setError('Please enter a valid LinkedIn profile URL (e.g., https://linkedin.com/in/yourname)')
      return
    }

    setLoading(true)
    setError('')
    setSuccess(false)

    try {
      console.log('[LINKEDIN_URL_IMPORT] Scraping:', url)
      
      const response = await fetch('/api/resume/scrape-linkedin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to import LinkedIn profile')
      }

      const data = await response.json()
      console.log('[LINKEDIN_URL_IMPORT] Success:', data)

      if (data.success && data.resumeData) {
        setSuccess(true)
        toast.success('LinkedIn profile imported successfully!')
        onImport(data.resumeData)
        
        // Reset after 2 seconds
        setTimeout(() => {
          setSuccess(false)
          setUrl('')
        }, 2000)
      } else {
        throw new Error('No data returned from LinkedIn')
      }
    } catch (err) {
      const errorMessage = (err as Error).message
      console.error('[LINKEDIN_URL_IMPORT] Error:', errorMessage)
      setError(errorMessage)
      toast.error('Failed to import LinkedIn profile')
    } finally {
      setLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && url && !loading) {
      handleImport()
    }
  }

  return (
    <div className={`space-y-4 ${className}`}>
      <div className="space-y-2">
        <Label htmlFor="linkedin-url">LinkedIn Profile URL</Label>
        <div className="flex gap-2">
          <Input
            id="linkedin-url"
            type="url"
            placeholder="https://linkedin.com/in/yourname"
            value={url}
            onChange={(e) => {
              setUrl(e.target.value)
              setError('')
            }}
            onKeyPress={handleKeyPress}
            disabled={loading}
            className="flex-1"
          />
          <Button
            onClick={handleImport}
            disabled={loading || !url}
            className="gap-2 min-w-[140px]"
          >
            {loading ? (
              <>
                <Loader2 className="w-4 h-4 animate-spin" />
                Importing...
              </>
            ) : success ? (
              <>
                <CheckCircle className="w-4 h-4" />
                Imported!
              </>
            ) : (
              <>
                <Linkedin className="w-4 h-4" />
                Import
              </>
            )}
          </Button>
        </div>
        <p className="text-xs text-muted-foreground">
          💡 Tip: Make sure your LinkedIn profile is set to public
        </p>
      </div>

      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {success && (
        <Alert className="border-green-500 bg-green-50 dark:bg-green-950">
          <CheckCircle className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800 dark:text-green-200">
            Successfully imported your LinkedIn profile! 🎉
          </AlertDescription>
        </Alert>
      )}
    </div>
  )
}
</file>

<file path="src/components/resume-builder/perplexity-analysis-display.tsx">
'use client'

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  TrendingUp, 
  TrendingDown, 
  Minus, 
  DollarSign, 
  Briefcase, 
  Target,
  CheckCircle,
  Lightbulb,
  BarChart3
} from 'lucide-react'

interface PerplexityAnalysisDisplayProps {
  analysis: {
    keywords: string[]
    location: {
      city: string
      province: string
      country: string
    }
    experienceLevel: string
    targetSalaryRange: {
      min: number
      max: number
      currency: string
      marketData: {
        percentile25: number
        percentile50: number
        percentile75: number
      }
    }
    targetJobTitles: string[]
    topSkills: Array<{
      skill: string
      yearsExperience: number
      proficiency: string
      marketDemand: string
      growthTrend: string
    }>
    futureOutlook: {
      aiReplacementRisk: string
      automationRisk: string
      fiveYearOutlook: string
      reasoning: string
      recommendations: string[]
    }
    careerPath: {
      currentLevel: string
      nextPossibleRoles: string[]
      timeToNextLevel: string
      skillsNeeded: string[]
    }
  }
}

export function PerplexityAnalysisDisplay({ analysis }: PerplexityAnalysisDisplayProps) {
  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'low': return 'text-green-600 bg-green-50 border-green-200'
      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200'
      case 'high': return 'text-red-600 bg-red-50 border-red-200'
      default: return 'text-gray-600 bg-gray-50 border-gray-200'
    }
  }

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'growing':
      case 'hot':
      case 'thriving':
        return <TrendingUp className="w-4 h-4 text-green-600" />
      case 'declining':
        return <TrendingDown className="w-4 h-4 text-red-600" />
      default:
        return <Minus className="w-4 h-4 text-gray-600" />
    }
  }

  const getDemandColor = (demand: string) => {
    switch (demand) {
      case 'high': return 'bg-green-100 text-green-800 border-green-300'
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-300'
      case 'low': return 'bg-gray-100 text-gray-800 border-gray-300'
      default: return 'bg-gray-100 text-gray-800 border-gray-300'
    }
  }

  return (
    <div className="space-y-6">
      {/* Salary Range */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <DollarSign className="w-5 h-5" />
            Salary Insights
          </CardTitle>
          <CardDescription>
            Based on 2025 market data for {analysis.experienceLevel} level
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-2xl font-bold">
                ${analysis.targetSalaryRange.min.toLocaleString()} - ${analysis.targetSalaryRange.max.toLocaleString()}
              </p>
              <p className="text-sm text-muted-foreground">{analysis.targetSalaryRange.currency}</p>
            </div>
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>25th Percentile</span>
              <span className="font-medium">${analysis.targetSalaryRange.marketData.percentile25.toLocaleString()}</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>Median (50th)</span>
              <span className="font-medium">${analysis.targetSalaryRange.marketData.percentile50.toLocaleString()}</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>75th Percentile</span>
              <span className="font-medium">${analysis.targetSalaryRange.marketData.percentile75.toLocaleString()}</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Top Skills */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="w-5 h-5" />
            Top Skills Analysis
          </CardTitle>
          <CardDescription>
            Your most valuable skills with market insights
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {analysis.topSkills.slice(0, 5).map((skill, index) => (
              <div key={index} className="space-y-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span className="font-medium">{skill.skill}</span>
                    {getTrendIcon(skill.growthTrend)}
                  </div>
                  <Badge className={getDemandColor(skill.marketDemand)}>
                    {skill.marketDemand} demand
                  </Badge>
                </div>
                <div className="flex items-center gap-4 text-xs text-muted-foreground">
                  <span>{skill.yearsExperience} years</span>
                  <span>•</span>
                  <span className="capitalize">{skill.proficiency}</span>
                  <span>•</span>
                  <span className="capitalize">{skill.growthTrend}</span>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Future Outlook */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BarChart3 className="w-5 h-5" />
            Career Outlook (5 Years)
          </CardTitle>
          <CardDescription>
            AI/Automation impact and future predictions
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className={`p-3 rounded-lg border ${getRiskColor(analysis.futureOutlook.aiReplacementRisk)}`}>
              <p className="text-xs font-medium mb-1">AI Replacement Risk</p>
              <p className="text-lg font-bold capitalize">{analysis.futureOutlook.aiReplacementRisk}</p>
            </div>
            <div className={`p-3 rounded-lg border ${getRiskColor(analysis.futureOutlook.automationRisk)}`}>
              <p className="text-xs font-medium mb-1">Automation Risk</p>
              <p className="text-lg font-bold capitalize">{analysis.futureOutlook.automationRisk}</p>
            </div>
          </div>

          <Alert>
            <Lightbulb className="h-4 w-4" />
            <AlertDescription>
              <strong>5-Year Outlook:</strong> {analysis.futureOutlook.fiveYearOutlook}
              <p className="mt-2 text-sm">{analysis.futureOutlook.reasoning}</p>
            </AlertDescription>
          </Alert>

          {analysis.futureOutlook.recommendations.length > 0 && (
            <div className="space-y-2">
              <p className="text-sm font-medium">Recommendations:</p>
              <ul className="space-y-1">
                {analysis.futureOutlook.recommendations.map((rec, index) => (
                  <li key={index} className="flex items-start gap-2 text-sm">
                    <CheckCircle className="w-4 h-4 text-green-600 mt-0.5 flex-shrink-0" />
                    <span>{rec}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Career Path */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Briefcase className="w-5 h-5" />
            Career Path
          </CardTitle>
          <CardDescription>
            Next steps in your career progression
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <p className="text-sm text-muted-foreground mb-2">Current Level</p>
            <p className="font-medium">{analysis.careerPath.currentLevel}</p>
          </div>

          <div>
            <p className="text-sm text-muted-foreground mb-2">Next Possible Roles</p>
            <div className="flex flex-wrap gap-2">
              {analysis.careerPath.nextPossibleRoles.map((role, index) => (
                <Badge key={index} variant="outline">{role}</Badge>
              ))}
            </div>
          </div>

          <div>
            <p className="text-sm text-muted-foreground mb-2">Time to Next Level</p>
            <p className="font-medium">{analysis.careerPath.timeToNextLevel}</p>
          </div>

          {analysis.careerPath.skillsNeeded.length > 0 && (
            <div>
              <p className="text-sm text-muted-foreground mb-2">Skills Needed</p>
              <div className="flex flex-wrap gap-2">
                {analysis.careerPath.skillsNeeded.map((skill, index) => (
                  <Badge key={index} className="bg-primary/10 text-primary">{skill}</Badge>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Target Job Titles */}
      <Card>
        <CardHeader>
          <CardTitle>Target Job Titles</CardTitle>
          <CardDescription>
            Roles that match your experience and skills
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2">
            {analysis.targetJobTitles.map((title, index) => (
              <Badge key={index} variant="secondary">{title}</Badge>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Keywords */}
      <Card>
        <CardHeader>
          <CardTitle>Resume Keywords</CardTitle>
          <CardDescription>
            Key terms extracted from your experience
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2">
            {analysis.keywords.slice(0, 20).map((keyword, index) => (
              <Badge key={index} variant="outline" className="text-xs">{keyword}</Badge>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/components/resume-builder/resume-import-options.tsx">
'use client'

import { useState } from 'react'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { LinkedInUrlImport } from './linkedin-url-import'
import { Linkedin, Upload, Sparkles, ArrowRight } from 'lucide-react'

interface ResumeData {
  personalInfo: {
    fullName: string
    email: string
    phone: string
    location: string
    linkedin?: string
    website?: string
    summary: string
  }
  experience: Array<{
    id: string
    company: string
    position: string
    location: string
    startDate: string
    endDate: string
    current: boolean
    description: string
    achievements: string[]
    technologies: string[]
  }>
  education: Array<{
    id: string
    institution: string
    degree: string
    field: string
    location: string
    graduationDate: string
    gpa?: string
    honors?: string[]
  }>
  skills: {
    technical: string[]
    soft: string[]
    languages: Array<{ language: string; proficiency: string }>
    certifications: Array<{ name: string; issuer: string; date: string }>
  }
  projects: Array<{
    id: string
    name: string
    description: string
    technologies: string[]
    url?: string
    startDate: string
    endDate: string
  }>
}

interface ResumeImportOptionsProps {
  onImport: (data: ResumeData | null) => void
  onSkip?: () => void
}

export function ResumeImportOptions({ onImport, onSkip }: ResumeImportOptionsProps) {
  const [activeTab, setActiveTab] = useState('linkedin')

  return (
    <Card className="w-full max-w-3xl mx-auto">
      <CardHeader className="text-center">
        <CardTitle className="text-2xl sm:text-3xl">
          Let&apos;s build your resume in 5 minutes! ✨
        </CardTitle>        <CardDescription className="text-base">
          Choose how you&apos;d like to start - we&apos;ll handle the rest with AI
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-6">
            <TabsTrigger value="linkedin" className="gap-2">
              <Linkedin className="w-4 h-4" />
              <span className="hidden sm:inline">LinkedIn</span>
            </TabsTrigger>
            <TabsTrigger value="upload" className="gap-2">
              <Upload className="w-4 h-4" />
              <span className="hidden sm:inline">Upload</span>
            </TabsTrigger>
            <TabsTrigger value="scratch" className="gap-2">
              <Sparkles className="w-4 h-4" />
              <span className="hidden sm:inline">Start Fresh</span>
            </TabsTrigger>
          </TabsList>

          {/* LinkedIn Import */}
          <TabsContent value="linkedin" className="space-y-4">
            <div className="bg-blue-50 dark:bg-blue-950/30 p-4 rounded-lg border border-blue-200 dark:border-blue-800">
              <h3 className="font-semibold text-blue-900 dark:text-blue-100 mb-2">
                🚀 Fastest Method (Recommended)
              </h3>
              <p className="text-sm text-blue-800 dark:text-blue-200">
                Paste your LinkedIn profile URL and we&apos;ll automatically extract all your information. 
                Takes less than 30 seconds!
              </p>
            </div>
            
            <LinkedInUrlImport onImport={onImport} />

            <div className="text-xs text-muted-foreground space-y-1">
              <p>✓ Extracts work experience, education, and skills</p>
              <p>✓ No LinkedIn login required</p>
              <p>✓ Works with public profiles</p>
            </div>
          </TabsContent>

          {/* Resume Upload */}
          <TabsContent value="upload" className="space-y-4">
            <div className="bg-purple-50 dark:bg-purple-950/30 p-4 rounded-lg border border-purple-200 dark:border-purple-800">
              <h3 className="font-semibold text-purple-900 dark:text-purple-100 mb-2">
                📄 Have an existing resume?
              </h3>
              <p className="text-sm text-purple-800 dark:text-purple-200">
                Upload your current resume (PDF or DOCX) and we&apos;ll extract all the data automatically.
              </p>
            </div>

            <div className="border-2 border-dashed border-border rounded-lg p-8 text-center space-y-4">
              <Upload className="w-12 h-12 mx-auto text-muted-foreground" />
              <div>
                <p className="font-medium mb-1">Drag & drop your resume here</p>
                <p className="text-sm text-muted-foreground">or click to browse</p>
              </div>
              <Button variant="outline" className="gap-2">
                <Upload className="w-4 h-4" />
                Choose File
              </Button>
              <p className="text-xs text-muted-foreground">
                Supports PDF and DOCX • Max 10MB
              </p>
            </div>

            <div className="text-xs text-muted-foreground space-y-1">
              <p>✓ AI extracts all information automatically</p>
              <p>✓ Supports PDF and Microsoft Word</p>
              <p>✓ Your data stays private and secure</p>
            </div>
          </TabsContent>

          {/* Start from Scratch */}
          <TabsContent value="scratch" className="space-y-4">
            <div className="bg-green-50 dark:bg-green-950/30 p-4 rounded-lg border border-green-200 dark:border-green-800">
              <h3 className="font-semibold text-green-900 dark:text-green-100 mb-2">
                ✨ AI-Guided Resume Building
              </h3>
              <p className="text-sm text-green-800 dark:text-green-200">
                Start with a blank slate. Our AI will guide you step-by-step and help write 
                professional achievement bullets.
              </p>
            </div>

            <div className="space-y-3">
              <div className="flex items-start gap-3 p-3 bg-accent/50 rounded-lg">
                <div className="flex-shrink-0 w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">
                  1
                </div>
                <div className="flex-1">
                  <p className="font-medium text-sm">Enter basic info</p>
                  <p className="text-xs text-muted-foreground">Name, email, phone, location</p>
                </div>
              </div>

              <div className="flex items-start gap-3 p-3 bg-accent/50 rounded-lg">
                <div className="flex-shrink-0 w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">
                  2
                </div>
                <div className="flex-1">
                  <p className="font-medium text-sm">Add work experience</p>
                  <p className="text-xs text-muted-foreground">AI helps write achievement bullets</p>
                </div>
              </div>

              <div className="flex items-start gap-3 p-3 bg-accent/50 rounded-lg">
                <div className="flex-shrink-0 w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">
                  3
                </div>
                <div className="flex-1">
                  <p className="font-medium text-sm">Choose template & download</p>
                  <p className="text-xs text-muted-foreground">9 professional templates available</p>
                </div>
              </div>
            </div>

            <Button 
              onClick={() => onImport(null)} 
              className="w-full gap-2"
              size="lg"
            >
              Start Building
              <ArrowRight className="w-4 h-4" />
            </Button>

            <div className="text-xs text-muted-foreground space-y-1">
              <p>✓ AI-powered achievement generator</p>
              <p>✓ Step-by-step guidance</p>
              <p>✓ Takes about 10-15 minutes</p>
            </div>
          </TabsContent>
        </Tabs>

        {/* Skip Option */}
        {onSkip && (
          <div className="mt-6 pt-6 border-t text-center">
            <Button 
              variant="ghost" 
              onClick={onSkip}
              className="text-muted-foreground hover:text-foreground"
            >
              Skip for now →
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/components/resume-builder/resume-preview-modal.tsx">
'use client'

import { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Eye, Download, X } from 'lucide-react'

interface ResumePreviewModalProps {
  resumeHtml: string
  resumeCss: string
  templateName: string
  onDownload?: () => void
}

export function ResumePreviewModal({ 
  resumeHtml, 
  resumeCss, 
  templateName,
  onDownload 
}: ResumePreviewModalProps) {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <>
      {/* Trigger Button */}
      <Button
        onClick={() => setIsOpen(true)}
        variant="outline"
        className="gap-2"
      >
        <Eye className="w-4 h-4" />
        Preview Resume
      </Button>

      {/* Modal */}
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="max-w-[95vw] md:max-w-4xl h-[90vh] p-0">
          <DialogHeader className="p-4 border-b">
            <div className="flex items-center justify-between">
              <DialogTitle>Resume Preview - {templateName}</DialogTitle>
              <div className="flex items-center gap-2">
                {onDownload && (
                  <Button
                    onClick={onDownload}
                    variant="default"
                    size="sm"
                    className="gap-2"
                  >
                    <Download className="w-4 h-4" />
                    Download PDF
                  </Button>
                )}
                <Button
                  onClick={() => setIsOpen(false)}
                  variant="ghost"
                  size="sm"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </DialogHeader>

          {/* Preview Content */}
          <div className="flex-1 overflow-auto p-4 bg-gray-100 dark:bg-gray-900">
            <div className="max-w-[8.5in] mx-auto bg-white shadow-lg">
              <style dangerouslySetInnerHTML={{ __html: resumeCss }} />
              <div dangerouslySetInnerHTML={{ __html: resumeHtml }} />
            </div>
          </div>

          {/* Footer */}
          <div className="p-4 border-t bg-muted/50">
            <p className="text-sm text-muted-foreground text-center">
              💡 Tip: This is how your resume will look when downloaded or printed
            </p>
          </div>
        </DialogContent>
      </Dialog>
    </>
  )
}

/**
 * Compact version for mobile - opens full screen
 */
export function ResumePreviewButton({ 
  resumeHtml, 
  resumeCss, 
  templateName,
  onDownload,
  className = ''
}: ResumePreviewModalProps & { className?: string }) {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button
        onClick={() => setIsOpen(true)}
        variant="default"
        className={`gap-2 ${className}`}
        size="lg"
      >
        <Eye className="w-5 h-5" />
        <span className="hidden sm:inline">Preview Resume</span>
        <span className="sm:hidden">Preview</span>
      </Button>

      {/* Full-screen modal on mobile */}
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="w-screen h-screen max-w-none p-0 m-0">
          {/* Header */}
          <div className="sticky top-0 z-10 bg-background border-b p-3 flex items-center justify-between">
            <h2 className="font-semibold text-sm sm:text-base truncate">
              {templateName}
            </h2>
            <div className="flex items-center gap-2">
              {onDownload && (
                <Button
                  onClick={onDownload}
                  variant="default"
                  size="sm"
                  className="gap-1.5"
                >
                  <Download className="w-4 h-4" />
                  <span className="hidden sm:inline">Download</span>
                </Button>
              )}
              <Button
                onClick={() => setIsOpen(false)}
                variant="ghost"
                size="sm"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>

          {/* Preview Content - Scrollable */}
          <div className="flex-1 overflow-auto bg-gray-100 dark:bg-gray-900 p-2 sm:p-4">
            <div className="max-w-[8.5in] mx-auto bg-white shadow-lg">
              <style dangerouslySetInnerHTML={{ __html: resumeCss }} />
              <div dangerouslySetInnerHTML={{ __html: resumeHtml }} />
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  )
}
</file>

<file path="src/components/resume-builder/template-selector.tsx">
'use client'

const TEMPLATES = [
  {
    id: 'modern',
    name: 'Modern',
    description: 'Two-column with sidebar and progress bars',
    preview: '🎨',
    color: 'from-blue-500 to-purple-600',
    recommended: true,
    bestFor: 'Technology, Startups, Creative'
  },
  {
    id: 'professional',
    name: 'Professional',
    description: 'Traditional single-column for corporate',
    preview: '💼',
    color: 'from-gray-700 to-gray-900',
    recommended: false,
    bestFor: 'Corporate, Finance, Legal'
  },
  {
    id: 'creative',
    name: 'Creative',
    description: 'Asymmetric with bold colors and badges',
    preview: '🎭',
    color: 'from-pink-500 to-orange-500',
    recommended: false,
    bestFor: 'Design, Marketing, Media'
  },
  {
    id: 'tech',
    name: 'Tech-Focused',
    description: 'Developer-optimized with tech stack',
    preview: '💻',
    color: 'from-green-500 to-teal-600',
    recommended: false,
    bestFor: 'Software Engineering, DevOps'
  },
  {
    id: 'minimal',
    name: 'Minimal',
    description: 'ATS-optimized, maximum compatibility',
    preview: '📄',
    color: 'from-gray-400 to-gray-600',
    recommended: false,
    bestFor: 'All Industries, ATS Systems'
  },
  {
    id: 'executive',
    name: 'Executive',
    description: 'Premium, leadership-focused design',
    preview: '👔',
    color: 'from-indigo-600 to-purple-700',
    recommended: false,
    bestFor: 'C-Suite, Director, Executive'
  },
  {
    id: 'cv',
    name: 'Curriculum Vitae',
    description: 'Academic and research-focused',
    preview: '🎓',
    color: 'from-amber-600 to-orange-700',
    recommended: false,
    bestFor: 'Academic, Research, Education'
  },
  {
    id: 'teal-horizontal',
    name: 'Teal Horizontal',
    description: 'Clean single-column with teal accents',
    preview: '🌊',
    color: 'from-teal-500 to-cyan-600',
    recommended: false,
    bestFor: 'Technology, Business, Consulting'
  },
  {
    id: 'two-column-red',
    name: 'Two-Column Red',
    description: 'Sidebar layout with red accents',
    preview: '🔴',
    color: 'from-red-500 to-rose-600',
    recommended: false,
    bestFor: 'Creative, Marketing, Design'
  }
]

interface TemplateSelectorProps {
  selectedTemplate: string
  onSelectTemplate: (templateId: string) => void
}

export function TemplateSelector({ selectedTemplate, onSelectTemplate }: TemplateSelectorProps) {
  const selectedTemplateData = TEMPLATES.find(t => t.id === selectedTemplate)
  
  return (
    <div className="bg-card rounded-xl border border-border overflow-hidden">
      <div className="bg-gradient-to-r from-primary/10 to-accent/10 p-4 border-b border-border">
        <h3 className="text-lg font-bold text-foreground">Choose Design</h3>
        <p className="text-sm text-muted-foreground mt-1">
          Select a template that matches your industry
        </p>
      </div>
      
      {/* Vertical scrollable template list */}
      <div className="max-h-[600px] overflow-y-auto p-4 space-y-3">
        {TEMPLATES.map((template) => (
          <button
            key={template.id}
            onClick={() => onSelectTemplate(template.id)}
            className={`
              w-full text-left p-3 rounded-lg border-2 transition-all
              ${selectedTemplate === template.id
                ? 'border-primary bg-primary/10 shadow-md'
                : 'border-border hover:border-primary/50 hover:bg-accent/5'
              }
            `}
          >
            <div className="flex items-start gap-3">
              <div className={`
                flex-shrink-0 w-12 h-12 rounded-lg flex items-center justify-center text-2xl
                bg-gradient-to-br ${template.color}
              `}>
                {template.preview}
              </div>
              
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2">
                  <h4 className="font-semibold text-foreground text-sm">
                    {template.name}
                  </h4>
                  {template.recommended && (
                    <span className="px-2 py-0.5 bg-primary/20 text-primary text-xs rounded-full font-medium">
                      Recommended
                    </span>
                  )}
                </div>
                <p className="text-xs text-muted-foreground mt-0.5 line-clamp-1">
                  {template.description}
                </p>
                <p className="text-xs text-primary/80 mt-1">
                  Best for: {template.bestFor}
                </p>
              </div>
              
              {selectedTemplate === template.id && (
                <div className="flex-shrink-0">
                  <div className="w-5 h-5 rounded-full bg-primary flex items-center justify-center">
                    <svg className="w-3 h-3 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                    </svg>
                  </div>
                </div>
              )}
            </div>
          </button>
        ))}
      </div>

      {/* Selected template info */}
      {selectedTemplateData && (
        <div className="p-4 bg-accent/5 border-t border-border">
          <div className="flex items-center gap-2 text-sm">
            <div className="w-2 h-2 rounded-full bg-primary animate-pulse"></div>
            <span className="text-muted-foreground">
              Selected: <span className="text-foreground font-medium">{selectedTemplateData.name}</span>
            </span>
          </div>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/components/unified-navigation.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useSession, signOut } from 'next-auth/react'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Button } from '@/components/ui/button'
import { ThemeToggle } from '@/components/theme-toggle'
import { useNotifications } from '@/hooks/use-notifications'
import {
  Home,
  FileText,
  Briefcase,
  Users,
  Settings,
  LogOut,
  User,
  Menu,
  X,
  Search,
  ChevronDown,
  ChevronRight,
  Bell,
  Mail,
  BarChart3,
  Target,
  PanelLeftClose,
  PanelLeft
} from 'lucide-react'

interface NavigationItem {
  name: string
  href?: string
  icon: React.ComponentType<{ className?: string }>
  badge?: number
  submenu?: { name: string; href: string; badge?: number }[]
}

// Enhanced Navigation Structure with Better Organization
const navigationItems: NavigationItem[] = [
  { 
    name: 'Dashboard', 
    href: '/dashboard', 
    icon: Home
  },
  {
    name: 'Career Finder',
    icon: Target,
    submenu: [
      { name: 'Job Search', href: '/career-finder/search' },
      { name: 'Job Analysis', href: '/career-finder/job-analysis' },
      { name: 'Company Research', href: '/career-finder/company' },
      { name: 'Resume Optimizer', href: '/career-finder/optimizer' },
      { name: 'Cover Letter', href: '/career-finder/cover-letter' },
      { name: 'Outreach', href: '/career-finder/outreach' }
    ]
  },
  { 
    name: 'Resume', 
    href: '/resume-builder', 
    icon: FileText 
  },
  { 
    name: 'Applications', 
    href: '/career-finder/applications', 
    icon: Briefcase
  },
  { 
    name: 'Analytics', 
    href: '/analytics', 
    icon: BarChart3 
  },
  { 
    name: 'Network', 
    href: '/network', 
    icon: Users 
  },
  {
    name: 'Settings',
    icon: Settings,
    submenu: [
      { name: 'Profile', href: '/settings/profile' },
      { name: 'Preferences', href: '/settings/preferences' },
      { name: 'Alerts', href: '/settings/alerts' },
      { name: 'Privacy', href: '/settings/privacy' },
      { name: 'Integrations', href: '/settings/integrations' },
      { name: 'Job Boards', href: '/settings/job-boards' }
    ]
  },
]

export function UnifiedNavigation() {
  const { data: session, status } = useSession()
  const pathname = usePathname()
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const [sidebarOpen, setSidebarOpen] = useState(true) // Desktop sidebar state
  const [expandedMenu, setExpandedMenu] = useState<string | null>(null)
  const [isMobile, setIsMobile] = useState(false)

  // Detect screen size and auto-adjust sidebar
  useEffect(() => {
    const checkScreenSize = () => {
      const mobile = window.innerWidth < 1024 // lg breakpoint
      const wasMobile = isMobile
      
      setIsMobile(mobile)
      
      // Auto-collapse on mobile, auto-open on desktop
      if (mobile && !wasMobile) {
        setSidebarOpen(false) // Switched to mobile - close sidebar
      } else if (!mobile && wasMobile) {
        setSidebarOpen(true) // Switched to desktop - open sidebar
      }
    }
    
    checkScreenSize()
    window.addEventListener('resize', checkScreenSize)
    return () => window.removeEventListener('resize', checkScreenSize)
  }, [isMobile])
  const [scrolled, setScrolled] = useState(false)
  const { count: notificationCount } = useNotifications()

  // Handle scroll for glass effect
  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 10)
    }
    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  // Close mobile menu on route change
  useEffect(() => {
    setMobileMenuOpen(false)
  }, [pathname])

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Cmd/Ctrl + K for search
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault()
        window.location.href = '/career-finder/search'
      }
      // Cmd/Ctrl + B to toggle sidebar
      if ((e.metaKey || e.ctrlKey) && e.key === 'b') {
        e.preventDefault()
        setSidebarOpen(!sidebarOpen)
      }
      // Escape to close mobile menu
      if (e.key === 'Escape' && mobileMenuOpen) {
        setMobileMenuOpen(false)
      }
    }
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [mobileMenuOpen, sidebarOpen])
  
  // Only show navigation when user is signed in (not on landing or auth pages)
  const isAuthPage = pathname?.startsWith('/auth')
  const isLandingPage = pathname === '/'
  
  // Show loading skeleton while session is loading
  if (status === 'loading') {
    return (
      <header className="fixed top-0 left-0 right-0 bg-background/95 backdrop-blur-xl border-b border-border shadow-xl" style={{ height: '64px', zIndex: 1000 }}>
        <div className="h-full px-4 flex items-center justify-between">
          <div className="w-32 h-8 bg-muted animate-pulse rounded"></div>
          <div className="flex gap-2">
            <div className="w-20 h-8 bg-muted animate-pulse rounded"></div>
            <div className="w-20 h-8 bg-muted animate-pulse rounded"></div>
          </div>
        </div>
      </header>
    )
  }
  
  // Hide navigation if: on auth pages, on landing page, or not authenticated
  if (isAuthPage || isLandingPage || status === 'unauthenticated') return null

  const isItemActive = (item: NavigationItem) => {
    if (item.href && pathname === item.href) return true
    if (item.submenu) {
      return item.submenu.some(sub => pathname === sub.href || pathname?.startsWith(sub.href))
    }
    return false
  }

  const toggleSubmenu = (itemName: string) => {
    setExpandedMenu(expandedMenu === itemName ? null : itemName)
  }

  return (
    <>
      {/* TOP BAR - Minimal, just logo and actions */}
      <header 
        className={`fixed top-0 left-0 right-0 transition-all duration-300 ${
          scrolled 
            ? 'bg-background/95 backdrop-blur-xl border-b border-border shadow-xl' 
            : 'bg-background/90 backdrop-blur-lg border-b border-border/50 shadow-md'
        }`}
        style={{ height: '64px', zIndex: 1000 }}
      >
        <div className="h-full px-4 flex items-center justify-between">
          {/* LEFT: Sidebar toggle + Logo */}
          <div className="flex items-center gap-3">
            {/* Desktop Sidebar Toggle */}
            <button
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="hidden md:flex p-2 rounded-lg hover:bg-accent/50 transition-all"
              aria-label="Toggle sidebar"
            >
              {sidebarOpen ? (
                <PanelLeftClose className="w-5 h-5" />
              ) : (
                <PanelLeft className="w-5 h-5" />
              )}
            </button>

            {/* Mobile Menu Toggle */}
            <button
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
              className="md:hidden p-2 rounded-lg hover:bg-accent/50 transition-all"
              aria-label="Toggle mobile menu"
            >
              {mobileMenuOpen ? (
                <X className="w-6 h-6" />
              ) : (
                <Menu className="w-6 h-6" />
              )}
            </button>

            {/* Logo */}
            <Link 
              href={session ? '/dashboard' : '/'} 
              className="flex items-center gap-2 group"
            >
              <div className="w-9 h-9 rounded-xl gradient-primary flex items-center justify-center text-white font-bold shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:scale-105">
                CL
              </div>
              <span className="gradient-text font-bold text-lg hidden sm:inline-block">
                Career Lever AI
              </span>
            </Link>
          </div>

          {/* RIGHT: Actions */}
          <div className="flex items-center gap-2">
            {/* Search */}
            <Link
              href="/career-finder/search"
              className="hidden sm:flex p-2 rounded-lg hover:bg-accent/50 transition-all"
              title="Search Jobs (⌘K)"
            >
              <Search className="w-5 h-5" />
            </Link>

            {/* Notifications */}
            <Link
              href="/notifications"
              className="relative p-2 rounded-lg hover:bg-accent/50 transition-all"
              title="Notifications"
            >
              <Bell className="w-5 h-5" />
              {notificationCount > 0 && (
                <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
              )}
            </Link>

            {/* Theme Toggle */}
            <div className="hidden md:block">
              <ThemeToggle />
            </div>

            {/* User Menu */}
            {session && (
              <div className="hidden md:block relative group">
                <button className="flex items-center gap-2 p-1.5 rounded-lg hover:bg-accent/50 transition-all">
                  <Avatar className="h-8 w-8 ring-2 ring-border/50">
                    <AvatarImage src={session.user?.image || ''} />
                    <AvatarFallback className="bg-gradient-primary text-white font-bold text-sm">
                      {session.user?.name?.[0]?.toUpperCase() || 'U'}
                    </AvatarFallback>
                  </Avatar>
                  <ChevronDown className="w-3 h-3" />
                </button>
                
                {/* User Dropdown */}
                <div className="absolute right-0 top-full mt-2 w-56 bg-card/95 backdrop-blur-xl border border-border/50 rounded-xl shadow-2xl overflow-hidden opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-50">
                  <div className="px-4 py-3 border-b border-border/50">
                    <p className="text-sm font-semibold">{session.user?.name}</p>
                    <p className="text-xs text-muted-foreground truncate">{session.user?.email}</p>
                  </div>
                  <Link
                    href="/settings/profile"
                    className="flex items-center gap-3 px-4 py-3 text-sm hover:bg-accent/50 transition-all"
                  >
                    <User className="w-4 h-4" />
                    <span>Profile</span>
                  </Link>
                  <Link
                    href="/settings"
                    className="flex items-center gap-3 px-4 py-3 text-sm hover:bg-accent/50 transition-all"
                  >
                    <Settings className="w-4 h-4" />
                    <span>Settings</span>
                  </Link>
                  <button
                    onClick={() => signOut({ callbackUrl: '/' })}
                    className="w-full flex items-center gap-3 px-4 py-3 text-sm text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30 transition-all"
                  >
                    <LogOut className="w-4 h-4" />
                    <span>Sign Out</span>
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </header>

      {/* Mobile Backdrop */}
      {isMobile && sidebarOpen && (
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 md:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}

      {/* Sidebar - Overlay on mobile, fixed on desktop */}
      <aside
        className={`fixed left-0 top-16 h-[calc(100vh-4rem)] bg-card/95 backdrop-blur-xl border-r border-border/50 transition-all duration-300 overflow-y-auto ${
          isMobile 
            ? `${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} z-50 w-48`
            : `${sidebarOpen ? 'w-48' : 'w-0'} z-10`
        }`}
      >
        <div className={`p-4 space-y-2 ${sidebarOpen ? 'opacity-100' : 'opacity-0'} transition-opacity duration-300`}>
          {navigationItems.map((item) => {
            const Icon = item.icon
            const isActive = isItemActive(item)
            const hasSubmenu = item.submenu && item.submenu.length > 0
            
            return (
              <div key={item.name}>
                {hasSubmenu ? (
                  <>
                    <button
                      onClick={() => toggleSubmenu(item.name)}
                      className={`w-full flex items-center justify-between px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
                        isActive
                          ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
                          : 'text-foreground hover:bg-accent/50'
                      }`}
                    >
                      <div className="flex items-center gap-3">
                        <Icon className="w-5 h-5" />
                        <span>{item.name}</span>
                      </div>
                      <ChevronRight className={`w-4 h-4 transition-transform ${
                        expandedMenu === item.name ? 'rotate-90' : ''
                      }`} />
                    </button>
                    
                    {expandedMenu === item.name && (
                      <div className="ml-4 mt-1 space-y-1">
                        {item.submenu?.map((subItem) => (
                          <Link
                            key={subItem.href}
                            href={subItem.href}
                            onClick={() => isMobile && setSidebarOpen(false)}
                            className={`flex items-center justify-between px-4 py-2.5 rounded-lg text-sm transition-all ${
                              pathname === subItem.href
                                ? 'bg-primary/10 text-primary font-medium'
                                : 'text-muted-foreground hover:text-foreground hover:bg-accent/30'
                            }`}
                          >
                            <span>{subItem.name}</span>
                          </Link>
                        ))}
                      </div>
                    )}
                  </>
                ) : (
                  <Link
                    href={item.href!}
                    onClick={() => isMobile && setSidebarOpen(false)}
                    className={`flex items-center gap-3 px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
                      isActive
                        ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
                        : 'text-foreground hover:bg-accent/50'
                    }`}
                  >
                    <Icon className="w-5 h-5" />
                    <span>{item.name}</span>
                  </Link>
                )}
              </div>
            )
          })}
        </div>
      </aside>

      {/* MOBILE NAVIGATION PANEL */}
      {mobileMenuOpen && (
        <div className="md:hidden fixed inset-0 top-16 bg-background/95 backdrop-blur-xl z-50 overflow-y-auto">
          <div className="p-4 space-y-2">
            {navigationItems.map((item) => {
              const Icon = item.icon
              const isActive = isItemActive(item)
              const hasSubmenu = item.submenu && item.submenu.length > 0
              
              return (
                <div key={item.name}>
                  {hasSubmenu ? (
                    <>
                      <button
                        onClick={() => toggleSubmenu(item.name)}
                        className={`w-full flex items-center justify-between px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
                          isActive
                            ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
                            : 'text-foreground hover:bg-accent/50'
                        }`}
                      >
                        <div className="flex items-center gap-3">
                          <Icon className="w-5 h-5" />
                          <span>{item.name}</span>
                        </div>
                        <ChevronRight className={`w-4 h-4 transition-transform ${
                          expandedMenu === item.name ? 'rotate-90' : ''
                        }`} />
                      </button>
                      
                      {expandedMenu === item.name && (
                        <div className="ml-4 mt-1 space-y-1">
                          {item.submenu?.map((subItem) => (
                            <Link
                              key={subItem.href}
                              href={subItem.href}
                              className={`flex items-center justify-between px-4 py-2.5 rounded-lg text-sm transition-all ${
                                pathname === subItem.href
                                  ? 'bg-primary/10 text-primary font-medium'
                                  : 'text-muted-foreground hover:text-foreground hover:bg-accent/30'
                              }`}
                              onClick={() => setMobileMenuOpen(false)}
                            >
                              <span>{subItem.name}</span>
                            </Link>
                          ))}
                        </div>
                      )}
                    </>
                  ) : (
                    <Link
                      href={item.href || '#'}
                      className={`flex items-center gap-3 px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
                        isActive
                          ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
                          : 'text-foreground hover:bg-accent/50'
                      }`}
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      <Icon className="w-5 h-5" />
                      <span>{item.name}</span>
                    </Link>
                  )}
                </div>
              )
            })}
            
            {/* Mobile Footer */}
            <div className="pt-4 mt-4 border-t border-border/50 space-y-2">
              <ThemeToggle />
              {session && (
                <button
                  onClick={() => signOut({ callbackUrl: '/' })}
                  className="w-full flex items-center gap-3 px-4 py-3 rounded-xl text-sm font-medium text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30 transition-all"
                >
                  <LogOut className="w-5 h-5" />
                  <span>Sign Out</span>
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  )
}
</file>

<file path="src/lib/resume-templates-v2.ts">
/**
 * Professional Resume Templates V2
 * 
 * 7 distinct, beautifully formatted resume templates:
 * 1. Modern (Two-Column with Timeline)
 * 2. Professional (Traditional Single-Column)
 * 3. Creative (Asymmetric with Color Accents)
 * 4. Tech-Focused (Developer/Engineer)
 * 5. Minimal/ATS (Maximum Compatibility)
 * 6. Executive (C-Suite/Director)
 * 7. Curriculum Vitae (Academic/Research)
 */

export interface ResumeData {
  personalInfo: {
    fullName: string
    email: string
    phone: string
    location: string
    linkedin?: string
    github?: string
    website?: string
    summary: string
  }
  experience: Array<{
    id: string
    company: string
    position: string
    location: string
    startDate: string
    endDate: string
    current: boolean
    description: string
    achievements: string[]
    technologies?: string[]
  }>
  education: Array<{
    id: string
    institution: string
    degree: string
    field: string
    location: string
    graduationDate: string
    gpa?: string
    honors?: string[]
  }>
  skills: {
    technical: string[]
    soft: string[]
    languages?: Array<{ language: string; proficiency: string }>
    certifications?: Array<{ name: string; issuer: string; date: string }>
  }
  projects?: Array<{
    id: string
    name: string
    description: string
    technologies: string[]
    url?: string
    github?: string
  }>
}

export interface ResumeTemplate {
  id: string
  name: string
  description: string
  bestFor: string[]
  preview: string
  generate: (data: ResumeData) => string
  css: string
}

/**
 * TEMPLATE 1: MODERN (Two-Column with Timeline)
 */
const modernTemplate: ResumeTemplate = {
  id: 'modern',
  name: 'Modern',
  description: 'Two-column layout with timeline visualization and progress bars',
  bestFor: ['Technology', 'Startups', 'Creative Industries', 'Mid-Level'],
  preview: '/templates/modern-preview.png',
  
  generate: (data: ResumeData) => {
    const { personalInfo, experience, education, skills } = data;
    
    return `
      <div class="resume-modern">
        <!-- Left Sidebar -->
        <div class="sidebar">
          <div class="avatar-section">
            <div class="avatar-circle">
              ${personalInfo.fullName.split(' ').map(n => n[0]).join('')}
            </div>
            <h1 class="name">${personalInfo.fullName}</h1>
          </div>
          
          <div class="contact-section">
            <h2 class="section-header">CONTACT</h2>
            <div class="contact-item">
              <span class="icon">📧</span>
              <span>${personalInfo.email}</span>
            </div>
            <div class="contact-item">
              <span class="icon">📱</span>
              <span>${personalInfo.phone}</span>
            </div>
            <div class="contact-item">
              <span class="icon">📍</span>
              <span>${personalInfo.location}</span>
            </div>
            ${personalInfo.linkedin ? `
              <div class="contact-item">
                <span class="icon">💼</span>
                <span>${personalInfo.linkedin}</span>
              </div>
            ` : ''}
          </div>
          
          <div class="skills-section">
            <h2 class="section-header">SKILLS</h2>
            ${skills.technical.slice(0, 8).map(skill => `
              <div class="skill-item">
                <div class="skill-name">${skill}</div>
                <div class="skill-bar">
                  <div class="skill-progress" style="width: ${Math.floor(Math.random() * 30) + 70}%"></div>
                </div>
              </div>
            `).join('')}
          </div>
          
          ${skills.languages && skills.languages.length > 0 ? `
            <div class="languages-section">
              <h2 class="section-header">LANGUAGES</h2>
              ${skills.languages.map(lang => `
                <div class="language-item">
                  <span class="language-name">${lang.language}</span>
                  <span class="language-level">${lang.proficiency}</span>
                </div>
              `).join('')}
            </div>
          ` : ''}
        </div>
        
        <!-- Right Content -->
        <div class="content">
          <div class="summary-section">
            <h2 class="section-header-main">PROFESSIONAL SUMMARY</h2>
            <p class="summary-text">${personalInfo.summary}</p>
          </div>
          
          <div class="experience-section">
            <h2 class="section-header-main">EXPERIENCE</h2>
            ${experience.map((exp, index) => `
              <div class="experience-item">
                <div class="timeline-dot"></div>
                ${index < experience.length - 1 ? '<div class="timeline-line"></div>' : ''}
                <div class="experience-content">
                  <h3 class="job-title">${exp.position}</h3>
                  <div class="company-info">
                    <span class="company-name">${exp.company}</span>
                    <span class="date-range">${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}</span>
                  </div>
                  <ul class="achievements">
                    ${exp.achievements.map(achievement => `
                      <li>${achievement}</li>
                    `).join('')}
                  </ul>
                </div>
              </div>
            `).join('')}
          </div>
          
          <div class="education-section">
            <h2 class="section-header-main">EDUCATION</h2>
            ${education.map(edu => `
              <div class="education-item">
                <h3 class="degree">${edu.degree} in ${edu.field}</h3>
                <div class="institution-info">
                  <span class="institution">${edu.institution}</span>
                  <span class="grad-year">${edu.graduationDate}</span>
                </div>
                ${edu.honors && edu.honors.length > 0 ? `
                  <div class="honors">${edu.honors.join(' • ')}</div>
                ` : ''}
              </div>
            `).join('')}
          </div>
        </div>
      </div>
    `;
  },
  
  css: `
    .resume-modern {
      display: flex;
      min-height: 100vh;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: white;
    }
    
    .sidebar {
      width: 30%;
      background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
      color: white;
      padding: 2rem 1.5rem;
    }
    
    .avatar-section {
      text-align: center;
      margin-bottom: 2rem;
    }
    
    .avatar-circle {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 28px;
      font-weight: bold;
      margin: 0 auto 1rem;
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }
    
    .name {
      font-size: 18px;
      font-weight: 700;
      margin: 0;
      letter-spacing: 0.5px;
    }
    
    .section-header {
      font-size: 11px;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 1.5px;
      color: #3b82f6;
      margin: 2rem 0 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid #3b82f6;
    }
    
    .contact-item {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 0.75rem;
      font-size: 10px;
      line-height: 1.4;
    }
    
    .icon {
      font-size: 14px;
      opacity: 0.9;
    }
    
    .skill-item {
      margin-bottom: 1rem;
    }
    
    .skill-name {
      font-size: 10px;
      font-weight: 500;
      margin-bottom: 0.25rem;
    }
    
    .skill-bar {
      height: 6px;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 3px;
      overflow: hidden;
    }
    
    .skill-progress {
      height: 100%;
      background: linear-gradient(90deg, #3b82f6 0%, #60a5fa 100%);
      border-radius: 3px;
      transition: width 0.3s ease;
    }
    
    .language-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
      font-size: 10px;
    }
    
    .content {
      width: 70%;
      padding: 2rem 2.5rem;
    }
    
    .section-header-main {
      font-size: 14px;
      font-weight: 700;
      text-transform: uppercase;
      color: #1e293b;
      margin: 2rem 0 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 3px solid #3b82f6;
      letter-spacing: 1px;
    }
    
    .summary-text {
      font-size: 11px;
      line-height: 1.6;
      color: #475569;
      margin: 0;
    }
    
    .experience-item {
      position: relative;
      padding-left: 2rem;
      margin-bottom: 2rem;
    }
    
    .timeline-dot {
      position: absolute;
      left: 0;
      top: 5px;
      width: 10px;
      height: 10px;
      background: #3b82f6;
      border-radius: 50%;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
    }
    
    .timeline-line {
      position: absolute;
      left: 4.5px;
      top: 15px;
      width: 1px;
      height: calc(100% + 1rem);
      background: linear-gradient(180deg, #3b82f6 0%, #cbd5e1 100%);
    }
    
    .job-title {
      font-size: 13px;
      font-weight: 700;
      color: #1e293b;
      margin: 0 0 0.25rem;
    }
    
    .company-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.75rem;
    }
    
    .company-name {
      font-size: 11px;
      font-style: italic;
      color: #64748b;
    }
    
    .date-range {
      font-size: 10px;
      color: #94a3b8;
      font-weight: 500;
    }
    
    .achievements {
      margin: 0;
      padding-left: 1.25rem;
      list-style-type: disc;
    }
    
    .achievements li {
      font-size: 10px;
      line-height: 1.6;
      color: #475569;
      margin-bottom: 0.5rem;
    }
    
    .education-item {
      margin-bottom: 1.5rem;
    }
    
    .degree {
      font-size: 12px;
      font-weight: 700;
      color: #1e293b;
      margin: 0 0 0.25rem;
    }
    
    .institution-info {
      display: flex;
      justify-content: space-between;
      font-size: 10px;
      color: #64748b;
      margin-bottom: 0.5rem;
    }
    
    .honors {
      font-size: 9px;
      color: #3b82f6;
      font-weight: 500;
    }
    
    @media print {
      .resume-modern {
        min-height: auto;
      }
      .sidebar {
        print-color-adjust: exact;
        -webkit-print-color-adjust: exact;
      }
    }
  `
};

/**
 * TEMPLATE 2: PROFESSIONAL (Traditional Single-Column)
 */
const professionalTemplate: ResumeTemplate = {
  id: 'professional',
  name: 'Professional',
  description: 'Traditional single-column layout for corporate environments',
  bestFor: ['Corporate', 'Finance', 'Legal', 'Consulting', 'Executive'],
  preview: '/templates/professional-preview.png',
  
  generate: (data: ResumeData) => {
    const { personalInfo, experience, education, skills } = data;
    
    return `
      <div class="resume-professional">
        <div class="header">
          <h1 class="name">${personalInfo.fullName}</h1>
          <div class="contact-bar">
            <span>${personalInfo.email}</span>
            <span>•</span>
            <span>${personalInfo.phone}</span>
            <span>•</span>
            <span>${personalInfo.location}</span>
            ${personalInfo.linkedin ? `<span>•</span><span>${personalInfo.linkedin}</span>` : ''}
          </div>
          <hr class="divider" />
        </div>
        
        <div class="section">
          <h2 class="section-title">PROFESSIONAL SUMMARY</h2>
          <p class="summary">${personalInfo.summary}</p>
        </div>
        
        <div class="section">
          <h2 class="section-title">PROFESSIONAL EXPERIENCE</h2>
          ${experience.map(exp => `
            <div class="experience-entry">
              <div class="entry-header">
                <h3 class="job-title">${exp.position}</h3>
                <span class="date-range">${exp.startDate} – ${exp.current ? 'Present' : exp.endDate}</span>
              </div>
              <div class="company-line">
                <span class="company">${exp.company}</span>
                ${exp.location ? `<span class="location">${exp.location}</span>` : ''}
              </div>
              <ul class="achievements">
                ${exp.achievements.map(achievement => `
                  <li>${achievement}</li>
                `).join('')}
              </ul>
            </div>
          `).join('')}
        </div>
        
        <div class="section">
          <h2 class="section-title">EDUCATION</h2>
          ${education.map(edu => `
            <div class="education-entry">
              <div class="entry-header">
                <h3 class="degree">${edu.degree}, ${edu.field}</h3>
                <span class="date-range">${edu.graduationDate}</span>
              </div>
              <div class="institution">${edu.institution}, ${edu.location}</div>
              ${edu.gpa ? `<div class="gpa">GPA: ${edu.gpa}</div>` : ''}
              ${edu.honors && edu.honors.length > 0 ? `
                <div class="honors">${edu.honors.join(', ')}</div>
              ` : ''}
            </div>
          `).join('')}
        </div>
        
        <div class="section">
          <h2 class="section-title">SKILLS & COMPETENCIES</h2>
          <div class="skills-grid">
            <div class="skill-category">
              <strong>Technical:</strong> ${skills.technical.join(', ')}
            </div>
            ${skills.soft.length > 0 ? `
              <div class="skill-category">
                <strong>Professional:</strong> ${skills.soft.join(', ')}
              </div>
            ` : ''}
          </div>
        </div>
      </div>
    `;
  },
  
  css: `
    .resume-professional {
      max-width: 8.5in;
      margin: 0 auto;
      padding: 0.75in;
      font-family: 'Times New Roman', Times, serif;
      background: white;
      color: #000;
      line-height: 1.5;
    }
    
    .header {
      text-align: center;
      margin-bottom: 1.5rem;
    }
    
    .name {
      font-size: 24px;
      font-weight: 700;
      margin: 0 0 0.5rem;
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    
    .contact-bar {
      font-size: 11px;
      color: #333;
      margin-bottom: 0.75rem;
    }
    
    .contact-bar span {
      margin: 0 0.25rem;
    }
    
    .divider {
      border: none;
      border-top: 2px solid #000;
      margin: 0.75rem 0;
    }
    
    .section {
      margin-bottom: 1.5rem;
    }
    
    .section-title {
      font-size: 13px;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 1px;
      margin: 0 0 0.75rem;
      padding-bottom: 0.25rem;
      border-bottom: 1px solid #000;
    }
    
    .summary {
      font-size: 11px;
      margin: 0;
      text-align: justify;
    }
    
    .experience-entry,
    .education-entry {
      margin-bottom: 1.25rem;
    }
    
    .entry-header {
      display: flex;
      justify-content: space-between;
      align-items: baseline;
      margin-bottom: 0.25rem;
    }
    
    .job-title,
    .degree {
      font-size: 12px;
      font-weight: 700;
      margin: 0;
    }
    
    .date-range {
      font-size: 11px;
      color: #555;
      font-style: italic;
    }
    
    .company-line {
      font-size: 11px;
      color: #555;
      font-style: italic;
      margin-bottom: 0.5rem;
    }
    
    .company,
    .institution {
      font-size: 11px;
      color: #555;
      font-style: italic;
    }
    
    .location {
      margin-left: 0.5rem;
    }
    
    .achievements {
      margin: 0.5rem 0 0 1.25rem;
      padding: 0;
      list-style-type: disc;
    }
    
    .achievements li {
      font-size: 11px;
      margin-bottom: 0.25rem;
      line-height: 1.5;
    }
    
    .gpa,
    .honors {
      font-size: 10px;
      color: #555;
      margin-top: 0.25rem;
    }
    
    .skills-grid {
      font-size: 11px;
    }
    
    .skill-category {
      margin-bottom: 0.5rem;
      line-height: 1.6;
    }
    
    .skill-category strong {
      font-weight: 700;
    }
    
    @media print {
      .resume-professional {
        padding: 0.5in;
      }
    }
  `
};

/**
 * TEMPLATE 3: CREATIVE (Asymmetric with Color Accents)
 */
const creativeTemplate: ResumeTemplate = {
  id: 'creative',
  name: 'Creative',
  description: 'Asymmetric layout with bold colors and visual elements',
  bestFor: ['Design', 'Marketing', 'Creative', 'UX/UI', 'Advertising'],
  preview: '/templates/creative-preview.png',
  
  generate: (data: ResumeData) => {
    const { personalInfo, experience, education, skills, projects } = data;
    
    return `
      <div class="resume-creative">
        <div class="header-creative">
          <h1 class="name-gradient">${personalInfo.fullName}</h1>
          <div class="contact-badges">
            <span class="badge">${personalInfo.email}</span>
            <span class="badge">${personalInfo.phone}</span>
            <span class="badge">${personalInfo.location}</span>
            ${personalInfo.linkedin ? `<span class="badge">LinkedIn</span>` : ''}
          </div>
        </div>
        
        <div class="content-grid">
          <div class="main-column">
            <div class="section-creative">
              <h2 class="section-title-creative">Profile</h2>
              <p class="profile-text">${personalInfo.summary}</p>
            </div>
            
            <div class="section-creative">
              <h2 class="section-title-creative">Experience</h2>
              ${experience.map(exp => `
                <div class="experience-card">
                  <div class="card-header">
                    <h3 class="role">${exp.position}</h3>
                    <span class="period">${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}</span>
                  </div>
                  <div class="company-badge">${exp.company}</div>
                  <ul class="achievements-creative">
                    ${exp.achievements.map(achievement => `
                      <li>${achievement}</li>
                    `).join('')}
                  </ul>
                </div>
              `).join('')}
            </div>
            
            ${projects && projects.length > 0 ? `
              <div class="section-creative">
                <h2 class="section-title-creative">Projects</h2>
                ${projects.map(project => `
                  <div class="project-card">
                    <h3 class="project-name">${project.name}</h3>
                    <p class="project-desc">${project.description}</p>
                    <div class="tech-badges">
                      ${project.technologies.map(tech => `
                        <span class="tech-badge">${tech}</span>
                      `).join('')}
                    </div>
                  </div>
                `).join('')}
              </div>
            ` : ''}
          </div>
          
          <div class="side-column">
            <div class="section-creative">
              <h2 class="section-title-creative">Skills</h2>
              <div class="skill-badges">
                ${skills.technical.map(skill => `
                  <span class="skill-badge-creative">${skill}</span>
                `).join('')}
              </div>
            </div>
            
            <div class="section-creative">
              <h2 class="section-title-creative">Education</h2>
              ${education.map(edu => `
                <div class="education-card">
                  <h3 class="degree-creative">${edu.degree}</h3>
                  <div class="institution-creative">${edu.institution}</div>
                  <div class="year-creative">${edu.graduationDate}</div>
                </div>
              `).join('')}
            </div>
          </div>
        </div>
      </div>
    `;
  },
  
  css: `
    .resume-creative {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #f8fafc 0%, #e0e7ff 100%);
      padding: 2rem;
      min-height: 100vh;
    }
    
    .header-creative {
      text-align: center;
      margin-bottom: 2rem;
      padding: 2rem;
      background: white;
      border-radius: 16px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }
    
    .name-gradient {
      font-size: 36px;
      font-weight: 800;
      background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 50%, #ec4899 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin: 0 0 0.5rem;
      letter-spacing: -0.5px;
    }
    
    .tagline {
      font-size: 14px;
      color: #64748b;
      font-weight: 500;
      margin-bottom: 1rem;
    }
    
    .contact-badges {
      display: flex;
      gap: 0.75rem;
      justify-content: center;
      flex-wrap: wrap;
    }
    
    .badge {
      background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 10px;
      font-weight: 600;
      box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    }
    
    .content-grid {
      display: grid;
      grid-template-columns: 60% 40%;
      gap: 2rem;
    }
    
    .section-creative {
      background: white;
      padding: 1.5rem;
      border-radius: 12px;
      margin-bottom: 1.5rem;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
    }
    
    .section-title-creative {
      font-size: 16px;
      font-weight: 700;
      color: white;
      background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
      padding: 0.5rem 1rem;
      border-radius: 8px;
      margin: -1.5rem -1.5rem 1rem;
    }
    
    .profile-text {
      font-size: 11px;
      line-height: 1.7;
      color: #475569;
      margin: 0;
    }
    
    .experience-card,
    .project-card {
      margin-bottom: 1.5rem;
      padding-bottom: 1.5rem;
      border-bottom: 2px solid #f1f5f9;
    }
    
    .experience-card:last-child,
    .project-card:last-child {
      border-bottom: none;
      margin-bottom: 0;
      padding-bottom: 0;
    }
    
    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: baseline;
      margin-bottom: 0.5rem;
    }
    
    .role,
    .project-name {
      font-size: 13px;
      font-weight: 700;
      color: #1e293b;
      margin: 0;
    }
    
    .period {
      font-size: 10px;
      color: #94a3b8;
      font-weight: 600;
    }
    
    .company-badge {
      display: inline-block;
      background: linear-gradient(135deg, #ec4899 0%, #f43f5e 100%);
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 10px;
      font-weight: 600;
      margin-bottom: 0.75rem;
    }
    
    .achievements-creative {
      margin: 0;
      padding-left: 1.25rem;
      list-style-type: none;
    }
    
    .achievements-creative li {
      font-size: 10px;
      line-height: 1.6;
      color: #475569;
      margin-bottom: 0.5rem;
      position: relative;
    }
    
    .achievements-creative li:before {
      content: "→";
      position: absolute;
      left: -1.25rem;
      color: #3b82f6;
      font-weight: 700;
    }
    
    .project-desc {
      font-size: 10px;
      line-height: 1.6;
      color: #475569;
      margin: 0.5rem 0;
    }
    
    .tech-badges {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      margin-top: 0.75rem;
    }
    
    .tech-badge {
      background: linear-gradient(135deg, #8b5cf6 0%, #6366f1 100%);
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 9px;
      font-weight: 600;
    }
    
    .skill-badges {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }
    
    .skill-badge-creative {
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 16px;
      font-size: 10px;
      font-weight: 600;
      box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
    }
    
    .education-card {
      margin-bottom: 1rem;
    }
    
    .degree-creative {
      font-size: 12px;
      font-weight: 700;
      color: #1e293b;
      margin: 0 0 0.25rem;
    }
    
    .institution-creative {
      font-size: 10px;
      color: #64748b;
      margin-bottom: 0.25rem;
    }
    
    .year-creative {
      font-size: 9px;
      color: #94a3b8;
      font-weight: 600;
    }
    
    @media print {
      .resume-creative {
        background: white;
      }
      .section-creative {
        box-shadow: none;
        border: 1px solid #e2e8f0;
      }
    }
  `
};

/**
 * TEMPLATE 4: TECH-FOCUSED (Developer/Engineer)
 */
const techTemplate: ResumeTemplate = {
  id: 'tech',
  name: 'Tech-Focused',
  description: 'Developer-optimized with tech stack badges and GitHub integration',
  bestFor: ['Software Engineering', 'DevOps', 'Data Science', 'Full-Stack'],
  preview: '/templates/tech-preview.png',
  
  generate: (data: ResumeData) => {
    const { personalInfo, experience, education, skills, projects } = data;
    
    return `
      <div class="resume-tech">
        <div class="header-tech">
          <h1 class="name-tech">${personalInfo.fullName}</h1>
          <div class="title-tech">Software Engineer</div>
          <div class="links-tech">
            ${personalInfo.email ? `<span class="link-item">📧 ${personalInfo.email}</span>` : ''}
            ${personalInfo.github ? `<span class="link-item">⚡ GitHub</span>` : ''}
            ${personalInfo.linkedin ? `<span class="link-item">💼 LinkedIn</span>` : ''}
            ${personalInfo.website ? `<span class="link-item">🌐 Portfolio</span>` : ''}
          </div>
        </div>
        
        <div class="tech-stack-section">
          <h2 class="section-header-tech">// Tech Stack</h2>
          <div class="tech-stack-grid">
            ${skills.technical.map(skill => {
              const color = getTechColor(skill);
              return `<span class="tech-stack-badge" style="background: ${color}">${skill}</span>`;
            }).join('')}
          </div>
        </div>
        
        <div class="section-tech">
          <h2 class="section-header-tech">// Professional Experience</h2>
          ${experience.map(exp => `
            <div class="job-entry-tech">
              <div class="job-header-tech">
                <div>
                  <h3 class="job-title-tech">${exp.position}</h3>
                  <div class="company-tech">${exp.company} • ${exp.location}</div>
                </div>
                <div class="date-tech">${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}</div>
              </div>
              ${exp.technologies && exp.technologies.length > 0 ? `
                <div class="tech-used">
                  ${exp.technologies.map(tech => `<code class="tech-tag">${tech}</code>`).join('')}
                </div>
              ` : ''}
              <ul class="achievements-tech">
                ${exp.achievements.map(achievement => `
                  <li><code class="bullet">></code> ${achievement}</li>
                `).join('')}
              </ul>
            </div>
          `).join('')}
        </div>
        
        ${projects && projects.length > 0 ? `
          <div class="section-tech">
            <h2 class="section-header-tech">// Projects</h2>
            ${projects.map(project => `
              <div class="project-entry-tech">
                <div class="project-header-tech">
                  <h3 class="project-title-tech">${project.name}</h3>
                  ${project.github ? `<span class="github-link">⚡ GitHub</span>` : ''}
                </div>
                <p class="project-description-tech">${project.description}</p>
                <div class="project-tech-stack">
                  ${project.technologies.map(tech => `<code class="tech-tag">${tech}</code>`).join('')}
                </div>
              </div>
            `).join('')}
          </div>
        ` : ''}
        
        <div class="section-tech">
          <h2 class="section-header-tech">// Education</h2>
          ${education.map(edu => `
            <div class="education-entry-tech">
              <h3 class="degree-tech">${edu.degree} in ${edu.field}</h3>
              <div class="institution-tech">${edu.institution} • ${edu.graduationDate}</div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  },
  
  css: `
    .resume-tech {
      max-width: 8.5in;
      margin: 0 auto;
      padding: 0.75in;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: #0f172a;
      color: #e2e8f0;
    }
    
    .header-tech {
      border-bottom: 2px solid #3b82f6;
      padding-bottom: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .name-tech {
      font-size: 28px;
      font-weight: 800;
      color: #3b82f6;
      margin: 0 0 0.25rem;
      font-family: 'Fira Code', 'Courier New', monospace;
    }
    
    .title-tech {
      font-size: 14px;
      color: #94a3b8;
      font-weight: 500;
      margin-bottom: 1rem;
    }
    
    .links-tech {
      display: flex;
      gap: 1.5rem;
      flex-wrap: wrap;
    }
    
    .link-item {
      font-size: 10px;
      color: #cbd5e1;
      font-family: 'Fira Code', monospace;
    }
    
    .tech-stack-section {
      background: #1e293b;
      padding: 1.5rem;
      border-radius: 8px;
      margin-bottom: 2rem;
      border-left: 4px solid #3b82f6;
    }
    
    .section-header-tech {
      font-size: 14px;
      font-weight: 700;
      color: #3b82f6;
      font-family: 'Fira Code', monospace;
      margin: 0 0 1rem;
    }
    
    .tech-stack-grid {
      display: flex;
      gap: 0.75rem;
      flex-wrap: wrap;
    }
    
    .tech-stack-badge {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-size: 10px;
      font-weight: 600;
      color: white;
      font-family: 'Fira Code', monospace;
    }
    
    .section-tech {
      margin-bottom: 2rem;
    }
    
    .job-entry-tech,
    .project-entry-tech {
      background: #1e293b;
      padding: 1.5rem;
      border-radius: 8px;
      margin-bottom: 1.5rem;
      border-left: 4px solid #64748b;
    }
    
    .job-header-tech {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 0.75rem;
    }
    
    .job-title-tech {
      font-size: 14px;
      font-weight: 700;
      color: #f1f5f9;
      margin: 0 0 0.25rem;
    }
    
    .company-tech {
      font-size: 11px;
      color: #94a3b8;
    }
    
    .date-tech {
      font-size: 10px;
      color: #64748b;
      font-family: 'Fira Code', monospace;
    }
    
    .tech-used,
    .project-tech-stack {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      margin-bottom: 0.75rem;
    }
    
    .tech-tag {
      background: #334155;
      color: #3b82f6;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 9px;
      font-family: 'Fira Code', monospace;
      font-weight: 600;
    }
    
    .achievements-tech {
      margin: 0;
      padding: 0;
      list-style: none;
    }
    
    .achievements-tech li {
      font-size: 10px;
      line-height: 1.7;
      color: #cbd5e1;
      margin-bottom: 0.5rem;
    }
    
    .bullet {
      color: #3b82f6;
      font-weight: 700;
      margin-right: 0.5rem;
    }
    
    .project-header-tech {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.5rem;
    }
    
    .project-title-tech {
      font-size: 13px;
      font-weight: 700;
      color: #f1f5f9;
      margin: 0;
    }
    
    .github-link {
      font-size: 10px;
      color: #3b82f6;
      font-family: 'Fira Code', monospace;
    }
    
    .project-description-tech {
      font-size: 10px;
      line-height: 1.6;
      color: #cbd5e1;
      margin: 0 0 0.75rem;
    }
    
    .education-entry-tech {
      background: #1e293b;
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1rem;
    }
    
    .degree-tech {
      font-size: 12px;
      font-weight: 700;
      color: #f1f5f9;
      margin: 0 0 0.25rem;
    }
    
    .institution-tech {
      font-size: 10px;
      color: #94a3b8;
    }
    
    @media print {
      .resume-tech {
        background: white;
        color: #1e293b;
      }
      .header-tech {
        border-bottom-color: #1e293b;
      }
      .name-tech,
      .section-header-tech {
        color: #1e293b;
      }
      .job-entry-tech,
      .project-entry-tech,
      .education-entry-tech,
      .tech-stack-section {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
      }
    }
  `
};

/**
 * TEMPLATE 5: MINIMAL/ATS (Maximum Compatibility)
 */
const minimalTemplate: ResumeTemplate = {
  id: 'minimal',
  name: 'Minimal/ATS',
  description: 'Plain text format optimized for ATS systems',
  bestFor: ['ATS Systems', 'Government', 'Large Corporations', 'Conservative'],
  preview: '/templates/minimal-preview.png',
  
  generate: (data: ResumeData) => {
    const { personalInfo, experience, education, skills } = data;
    
    return `
      <div class="resume-minimal">
        <div class="header-minimal">
          <h1 class="name-minimal">${personalInfo.fullName}</h1>
          <div class="contact-minimal">
            ${personalInfo.email} | ${personalInfo.phone} | ${personalInfo.location}
            ${personalInfo.linkedin ? ` | ${personalInfo.linkedin}` : ''}
          </div>
        </div>
        
        <div class="section-minimal">
          <h2 class="section-title-minimal">PROFESSIONAL SUMMARY</h2>
          <p class="text-minimal">${personalInfo.summary}</p>
        </div>
        
        <div class="section-minimal">
          <h2 class="section-title-minimal">PROFESSIONAL EXPERIENCE</h2>
          ${experience.map(exp => `
            <div class="entry-minimal">
              <div class="entry-title-minimal">${exp.position}</div>
              <div class="entry-subtitle-minimal">${exp.company}, ${exp.location}</div>
              <div class="entry-date-minimal">${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}</div>
              <ul class="list-minimal">
                ${exp.achievements.map(achievement => `
                  <li>${achievement}</li>
                `).join('')}
              </ul>
            </div>
          `).join('')}
        </div>
        
        <div class="section-minimal">
          <h2 class="section-title-minimal">EDUCATION</h2>
          ${education.map(edu => `
            <div class="entry-minimal">
              <div class="entry-title-minimal">${edu.degree}, ${edu.field}</div>
              <div class="entry-subtitle-minimal">${edu.institution}, ${edu.location}</div>
              <div class="entry-date-minimal">${edu.graduationDate}</div>
              ${edu.gpa ? `<div class="text-minimal">GPA: ${edu.gpa}</div>` : ''}
            </div>
          `).join('')}
        </div>
        
        <div class="section-minimal">
          <h2 class="section-title-minimal">SKILLS</h2>
          <div class="text-minimal">
            <strong>Technical Skills:</strong> ${skills.technical.join(', ')}
          </div>
          ${skills.soft.length > 0 ? `
            <div class="text-minimal">
              <strong>Professional Skills:</strong> ${skills.soft.join(', ')}
            </div>
          ` : ''}
        </div>
      </div>
    `;
  },
  
  css: `
    .resume-minimal {
      max-width: 8.5in;
      margin: 0 auto;
      padding: 1in;
      font-family: Arial, Helvetica, sans-serif;
      background: white;
      color: #000;
      line-height: 1.5;
    }
    
    .header-minimal {
      margin-bottom: 1.5rem;
    }
    
    .name-minimal {
      font-size: 16px;
      font-weight: 700;
      margin: 0 0 0.5rem;
      text-transform: uppercase;
    }
    
    .contact-minimal {
      font-size: 11px;
      margin: 0;
    }
    
    .section-minimal {
      margin-bottom: 1.5rem;
    }
    
    .section-title-minimal {
      font-size: 12px;
      font-weight: 700;
      margin: 0 0 0.75rem;
      text-transform: uppercase;
    }
    
    .entry-minimal {
      margin-bottom: 1rem;
    }
    
    .entry-title-minimal {
      font-size: 11px;
      font-weight: 700;
      margin-bottom: 0.25rem;
    }
    
    .entry-subtitle-minimal {
      font-size: 11px;
      margin-bottom: 0.25rem;
    }
    
    .entry-date-minimal {
      font-size: 11px;
      margin-bottom: 0.5rem;
    }
    
    .text-minimal {
      font-size: 11px;
      margin: 0 0 0.5rem;
    }
    
    .list-minimal {
      margin: 0.5rem 0 0 1.25rem;
      padding: 0;
      list-style-type: disc;
    }
    
    .list-minimal li {
      font-size: 11px;
      margin-bottom: 0.25rem;
    }
    
    @media print {
      .resume-minimal {
        padding: 0.5in;
      }
    }
  `
};

/**
 * Helper function to get tech-specific colors
 */
function getTechColor(tech: string): string {
  const techLower = tech.toLowerCase();
  const colorMap: Record<string, string> = {
    'react': '#61dafb',
    'vue': '#42b883',
    'angular': '#dd0031',
    'javascript': '#f7df1e',
    'typescript': '#3178c6',
    'python': '#3776ab',
    'java': '#007396',
    'node': '#339933',
    'aws': '#ff9900',
    'docker': '#2496ed',
    'kubernetes': '#326ce5',
    'mongodb': '#47a248',
    'postgresql': '#336791',
    'mysql': '#4479a1',
    'redis': '#dc382d',
    'graphql': '#e10098',
    'git': '#f05032',
    'linux': '#fcc624',
  };
  
  for (const [key, color] of Object.entries(colorMap)) {
    if (techLower.includes(key)) {
      return color;
    }
  }
  
  return '#3b82f6'; // Default blue
}

/**
 * TEMPLATE 6: EXECUTIVE (C-Suite/Director)
 */
const executiveTemplate: ResumeTemplate = {
  id: 'executive',
  name: 'Executive',
  description: 'Premium layout for C-suite and senior leadership',
  bestFor: ['C-Suite', 'VP', 'Director', 'Senior Leadership', 'Board Members'],
  preview: '/templates/executive-preview.png',
  
  generate: (data: ResumeData) => {
    const { personalInfo, experience, education, skills } = data;
    
    return `
      <div class="resume-executive">
        <div class="header-executive">
          <div class="header-content">
            <h1 class="name-executive">${personalInfo.fullName}</h1>
            <div class="executive-title">Chief Executive Officer | Board Director</div>
            <div class="contact-executive">
              ${personalInfo.email} • ${personalInfo.phone} • ${personalInfo.location}
              ${personalInfo.linkedin ? ` • ${personalInfo.linkedin}` : ''}
            </div>
          </div>
        </div>
        
        <div class="executive-summary-section">
          <h2 class="section-header-executive">EXECUTIVE SUMMARY</h2>
          <p class="executive-summary-text">${personalInfo.summary}</p>
        </div>
        
        <div class="key-achievements-section">
          <h2 class="section-header-executive">KEY ACHIEVEMENTS</h2>
          <div class="achievements-grid">
            ${experience.slice(0, 1).map(exp => 
              exp.achievements.slice(0, 4).map(achievement => {
                const metrics = achievement.match(/\d+[%$MKB]?/g);
                return `
                  <div class="achievement-card">
                    <div class="achievement-metric">${metrics ? metrics[0] : '✓'}</div>
                    <div class="achievement-text">${achievement}</div>
                  </div>
                `;
              }).join('')
            ).join('')}
          </div>
        </div>
        
        <div class="section-executive">
          <h2 class="section-header-executive">EXECUTIVE EXPERIENCE</h2>
          ${experience.map(exp => `
            <div class="executive-entry">
              <div class="executive-entry-header">
                <div>
                  <h3 class="executive-position">${exp.position}</h3>
                  <div class="executive-company">${exp.company}</div>
                </div>
                <div class="executive-dates">${exp.startDate} – ${exp.current ? 'Present' : exp.endDate}</div>
              </div>
              <div class="leadership-scope">
                <span class="scope-item">P&L: $10M+</span>
                <span class="scope-item">Team: 50+ Direct/Indirect</span>
                <span class="scope-item">Board Reporting</span>
              </div>
              <ul class="executive-achievements">
                ${exp.achievements.map(achievement => `
                  <li>${achievement}</li>
                `).join('')}
              </ul>
            </div>
          `).join('')}
        </div>
        
        <div class="two-column-section">
          <div class="column">
            <h2 class="section-header-executive">EDUCATION</h2>
            ${education.map(edu => `
              <div class="executive-education">
                <h3 class="executive-degree">${edu.degree}</h3>
                <div class="executive-institution">${edu.institution}</div>
                <div class="executive-year">${edu.graduationDate}</div>
                ${edu.honors && edu.honors.length > 0 ? `
                  <div class="executive-honors">${edu.honors.join(' • ')}</div>
                ` : ''}
              </div>
            `).join('')}
          </div>
          
          <div class="column">
            <h2 class="section-header-executive">PROFESSIONAL AFFILIATIONS</h2>
            <ul class="affiliations-list">
              <li>Board Member, Tech Industry Association</li>
              <li>Advisory Board, Innovation Council</li>
              <li>Member, CEO Roundtable</li>
            </ul>
            
            ${skills.certifications && skills.certifications.length > 0 ? `
              <h2 class="section-header-executive">CERTIFICATIONS</h2>
              <ul class="certifications-list">
                ${skills.certifications.map(cert => `
                  <li>${cert.name} - ${cert.issuer}</li>
                `).join('')}
              </ul>
            ` : ''}
          </div>
        </div>
      </div>
    `;
  },
  
  css: `
    .resume-executive {
      max-width: 8.5in;
      margin: 0 auto;
      padding: 0.75in;
      font-family: 'Garamond', 'Georgia', serif;
      background: white;
      color: #1a1a1a;
    }
    
    .header-executive {
      background: linear-gradient(135deg, #1e3a5f 0%, #2c5282 100%);
      color: white;
      padding: 2rem;
      margin: -0.75in -0.75in 2rem;
      border-bottom: 4px solid #d4af37;
    }
    
    .name-executive {
      font-size: 32px;
      font-weight: 700;
      margin: 0 0 0.5rem;
      letter-spacing: 1px;
    }
    
    .executive-title {
      font-size: 16px;
      font-weight: 500;
      margin-bottom: 1rem;
      color: #d4af37;
      letter-spacing: 0.5px;
    }
    
    .contact-executive {
      font-size: 11px;
      opacity: 0.95;
    }
    
    .executive-summary-section {
      background: #f8f9fa;
      padding: 1.5rem;
      border-left: 4px solid #d4af37;
      margin-bottom: 2rem;
    }
    
    .section-header-executive {
      font-size: 14px;
      font-weight: 700;
      text-transform: uppercase;
      color: #1e3a5f;
      margin: 0 0 1rem;
      letter-spacing: 1.5px;
      border-bottom: 2px solid #d4af37;
      padding-bottom: 0.5rem;
    }
    
    .executive-summary-text {
      font-size: 12px;
      line-height: 1.8;
      margin: 0;
      text-align: justify;
    }
    
    .key-achievements-section {
      margin-bottom: 2rem;
    }
    
    .achievements-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }
    
    .achievement-card {
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      padding: 1rem;
      border-radius: 8px;
      border-left: 4px solid #d4af37;
    }
    
    .achievement-metric {
      font-size: 24px;
      font-weight: 700;
      color: #1e3a5f;
      margin-bottom: 0.5rem;
    }
    
    .achievement-text {
      font-size: 10px;
      line-height: 1.5;
      color: #495057;
    }
    
    .section-executive {
      margin-bottom: 2rem;
    }
    
    .executive-entry {
      margin-bottom: 2rem;
      padding-bottom: 2rem;
      border-bottom: 1px solid #dee2e6;
    }
    
    .executive-entry:last-child {
      border-bottom: none;
    }
    
    .executive-entry-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 0.75rem;
    }
    
    .executive-position {
      font-size: 15px;
      font-weight: 700;
      color: #1e3a5f;
      margin: 0 0 0.25rem;
    }
    
    .executive-company {
      font-size: 13px;
      font-style: italic;
      color: #495057;
    }
    
    .executive-dates {
      font-size: 11px;
      color: #6c757d;
      font-weight: 600;
    }
    
    .leadership-scope {
      display: flex;
      gap: 1.5rem;
      margin-bottom: 1rem;
      padding: 0.75rem;
      background: #f8f9fa;
      border-radius: 4px;
    }
    
    .scope-item {
      font-size: 10px;
      font-weight: 600;
      color: #1e3a5f;
    }
    
    .executive-achievements {
      margin: 0;
      padding-left: 1.5rem;
      list-style-type: none;
    }
    
    .executive-achievements li {
      font-size: 11px;
      line-height: 1.7;
      margin-bottom: 0.5rem;
      position: relative;
    }
    
    .executive-achievements li:before {
      content: "▸";
      position: absolute;
      left: -1.5rem;
      color: #d4af37;
      font-weight: 700;
    }
    
    .two-column-section {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
    }
    
    .column {
      margin-bottom: 1rem;
    }
    
    .executive-education {
      margin-bottom: 1.5rem;
    }
    
    .executive-degree {
      font-size: 13px;
      font-weight: 700;
      color: #1e3a5f;
      margin: 0 0 0.25rem;
    }
    
    .executive-institution {
      font-size: 11px;
      font-style: italic;
      color: #495057;
      margin-bottom: 0.25rem;
    }
    
    .executive-year {
      font-size: 10px;
      color: #6c757d;
    }
    
    .executive-honors {
      font-size: 10px;
      color: #d4af37;
      font-weight: 600;
      margin-top: 0.25rem;
    }
    
    .affiliations-list,
    .certifications-list {
      margin: 0.5rem 0 0 1.25rem;
      padding: 0;
      list-style-type: disc;
    }
    
    .affiliations-list li,
    .certifications-list li {
      font-size: 10px;
      line-height: 1.6;
      margin-bottom: 0.5rem;
    }
    
    @media print {
      .resume-executive {
        padding: 0.5in;
      }
      .header-executive {
        margin: -0.5in -0.5in 1.5rem;
        print-color-adjust: exact;
        -webkit-print-color-adjust: exact;
      }
    }
  `
};

/**
 * TEMPLATE 7: CURRICULUM VITAE (Academic/Research)
 */
const cvTemplate: ResumeTemplate = {
  id: 'cv',
  name: 'Curriculum Vitae',
  description: 'Academic format for research and scholarly positions',
  bestFor: ['Academia', 'Research', 'PhD', 'Medical', 'Scientific'],
  preview: '/templates/cv-preview.png',
  
  generate: (data: ResumeData) => {
    const { personalInfo, experience, education, skills } = data;
    
    return `
      <div class="resume-cv">
        <div class="header-cv">
          <h1 class="name-cv">${personalInfo.fullName}, Ph.D.</h1>
          <div class="contact-cv">
            ${personalInfo.email} | ${personalInfo.phone} | ${personalInfo.location}
          </div>
          <div class="academic-profiles">
            ${personalInfo.linkedin ? `LinkedIn: ${personalInfo.linkedin} | ` : ''}
            Google Scholar | ORCID: 0000-0000-0000-0000
          </div>
        </div>
        
        <div class="section-cv">
          <h2 class="section-title-cv">1. ACADEMIC APPOINTMENTS</h2>
          ${experience.map((exp, index) => `
            <div class="cv-entry">
              <div class="cv-entry-header">
                <strong>${exp.position}</strong>
                <span class="cv-dates">${exp.startDate} – ${exp.current ? 'Present' : exp.endDate}</span>
              </div>
              <div class="cv-institution">${exp.company}, ${exp.location}</div>
              ${index === 0 ? '<div class="cv-note">(Tenure Track)</div>' : ''}
            </div>
          `).join('')}
        </div>
        
        <div class="section-cv">
          <h2 class="section-title-cv">2. EDUCATION</h2>
          ${education.map(edu => `
            <div class="cv-entry">
              <div class="cv-entry-header">
                <strong>${edu.degree}, ${edu.field}</strong>
                <span class="cv-dates">${edu.graduationDate}</span>
              </div>
              <div class="cv-institution">${edu.institution}, ${edu.location}</div>
              <div class="cv-thesis">Dissertation: "Advanced Research in ${edu.field}"</div>
              ${edu.honors && edu.honors.length > 0 ? `
                <div class="cv-honors">${edu.honors.join(', ')}</div>
              ` : ''}
            </div>
          `).join('')}
        </div>
        
        <div class="section-cv">
          <h2 class="section-title-cv">3. RESEARCH INTERESTS</h2>
          <ul class="cv-list">
            <li>Computational Methods and Algorithm Development</li>
            <li>Machine Learning Applications in Scientific Research</li>
            <li>Data Analysis and Statistical Modeling</li>
            <li>Interdisciplinary Collaboration and Innovation</li>
          </ul>
        </div>
        
        <div class="section-cv">
          <h2 class="section-title-cv">4. PUBLICATIONS</h2>
          
          <h3 class="subsection-cv">Peer-Reviewed Journal Articles</h3>
          <ol class="publications-list">
            <li>
              <strong>${personalInfo.fullName}</strong>, Smith, J., & Johnson, A. (2024). 
              "Advanced Methods in Computational Research." 
              <em>Journal of Advanced Science</em>, 45(3), 123-145. 
              DOI: 10.1234/jas.2024.001
            </li>
            <li>
              Johnson, A., <strong>${personalInfo.fullName}</strong>, & Davis, R. (2023). 
              "Novel Approaches to Data Analysis." 
              <em>International Journal of Research</em>, 32(2), 67-89. 
              DOI: 10.1234/ijr.2023.045
            </li>
          </ol>
          
          <h3 class="subsection-cv">Conference Proceedings</h3>
          <ol class="publications-list" start="3">
            <li>
              <strong>${personalInfo.fullName}</strong> (2024). 
              "Innovative Research Methodologies." 
              <em>Proceedings of the International Conference on Research</em>, 
              pp. 234-245. New York, NY.
            </li>
          </ol>
        </div>
        
        <div class="section-cv">
          <h2 class="section-title-cv">5. GRANTS & FUNDING</h2>
          <div class="cv-entry">
            <div class="cv-entry-header">
              <strong>National Science Foundation Grant</strong>
              <span class="cv-dates">2023 – 2026</span>
            </div>
            <div class="cv-grant-details">
              Principal Investigator, $500,000
              <br/>
              "Advanced Research in Computational Methods"
            </div>
          </div>
        </div>
        
        <div class="section-cv">
          <h2 class="section-title-cv">6. TEACHING EXPERIENCE</h2>
          <ul class="cv-list">
            <li><strong>Advanced Research Methods</strong> (Graduate Level) – Fall 2023, Spring 2024</li>
            <li><strong>Introduction to Data Science</strong> (Undergraduate) – Fall 2022, Spring 2023</li>
            <li><strong>Statistical Analysis</strong> (Graduate Level) – Spring 2022</li>
          </ul>
        </div>
        
        <div class="section-cv">
          <h2 class="section-title-cv">7. CONFERENCE PRESENTATIONS</h2>
          <ul class="cv-list">
            <li>"Recent Advances in Research Methodology" – International Conference, 2024</li>
            <li>"Data-Driven Approaches" – National Symposium, 2023</li>
            <li>"Computational Methods" – Regional Workshop, 2023</li>
          </ul>
        </div>
        
        <div class="section-cv">
          <h2 class="section-title-cv">8. PROFESSIONAL SERVICE</h2>
          <ul class="cv-list">
            <li><strong>Reviewer:</strong> Journal of Advanced Science, International Journal of Research</li>
            <li><strong>Committee Member:</strong> Graduate Admissions Committee (2023-Present)</li>
            <li><strong>Organizer:</strong> Annual Research Symposium (2024)</li>
          </ul>
        </div>
        
        <div class="section-cv">
          <h2 class="section-title-cv">9. TECHNICAL SKILLS</h2>
          <div class="cv-skills">
            <strong>Programming:</strong> ${skills.technical.slice(0, 5).join(', ')}
            <br/>
            <strong>Software:</strong> MATLAB, R, SPSS, LaTeX
            <br/>
            <strong>Languages:</strong> ${skills.languages ? skills.languages.map(l => `${l.language} (${l.proficiency})`).join(', ') : 'English (Native)'}
          </div>
        </div>
        
        <div class="cv-footer">
          <em>References available upon request</em>
          <div class="cv-page-number">Page 1 of 1</div>
        </div>
      </div>
    `;
  },
  
  css: `
    .resume-cv {
      max-width: 8.5in;
      margin: 0 auto;
      padding: 1in;
      font-family: 'Computer Modern', 'Times New Roman', serif;
      background: white;
      color: #000;
      line-height: 1.6;
    }
    
    .header-cv {
      text-align: center;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 2px solid #000;
    }
    
    .name-cv {
      font-size: 20px;
      font-weight: 700;
      margin: 0 0 0.5rem;
    }
    
    .contact-cv {
      font-size: 11px;
      margin-bottom: 0.25rem;
    }
    
    .academic-profiles {
      font-size: 10px;
      color: #333;
    }
    
    .section-cv {
      margin-bottom: 1.5rem;
    }
    
    .section-title-cv {
      font-size: 12px;
      font-weight: 700;
      text-transform: uppercase;
      margin: 0 0 0.75rem;
      border-bottom: 1px solid #000;
      padding-bottom: 0.25rem;
    }
    
    .subsection-cv {
      font-size: 11px;
      font-weight: 700;
      margin: 1rem 0 0.5rem;
    }
    
    .cv-entry {
      margin-bottom: 1rem;
    }
    
    .cv-entry-header {
      display: flex;
      justify-content: space-between;
      align-items: baseline;
      margin-bottom: 0.25rem;
      font-size: 11px;
    }
    
    .cv-dates {
      font-size: 10px;
      font-weight: normal;
    }
    
    .cv-institution {
      font-size: 11px;
      font-style: italic;
      margin-bottom: 0.25rem;
    }
    
    .cv-thesis {
      font-size: 10px;
      margin-top: 0.25rem;
    }
    
    .cv-note {
      font-size: 10px;
      color: #555;
      margin-top: 0.25rem;
    }
    
    .cv-honors {
      font-size: 10px;
      font-style: italic;
      margin-top: 0.25rem;
    }
    
    .cv-grant-details {
      font-size: 10px;
      line-height: 1.5;
      margin-top: 0.25rem;
    }
    
    .cv-list {
      margin: 0.5rem 0 0 1.5rem;
      padding: 0;
      list-style-type: disc;
    }
    
    .cv-list li {
      font-size: 10px;
      line-height: 1.6;
      margin-bottom: 0.5rem;
    }
    
    .publications-list {
      margin: 0.5rem 0 1rem 1.5rem;
      padding: 0;
    }
    
    .publications-list li {
      font-size: 10px;
      line-height: 1.7;
      margin-bottom: 0.75rem;
      text-indent: -1.5rem;
      padding-left: 1.5rem;
    }
    
    .cv-skills {
      font-size: 10px;
      line-height: 1.8;
    }
    
    .cv-footer {
      margin-top: 2rem;
      padding-top: 1rem;
      border-top: 1px solid #000;
      text-align: center;
      font-size: 10px;
    }
    
    .cv-page-number {
      margin-top: 0.5rem;
      font-size: 9px;
      color: #666;
    }
    
    @media print {
      .resume-cv {
        padding: 0.75in;
      }
      
      @page {
        margin: 0.75in;
      }
    }
  `
};

/**
 * TEMPLATE 8: TEAL HORIZONTAL (Clean Single-Column)
 */
const tealHorizontalTemplate: ResumeTemplate = {
  id: 'teal-horizontal',
  name: 'Teal Horizontal',
  description: 'Clean single-column layout with teal accent headers',
  bestFor: ['Technology', 'Business', 'Consulting', 'General'],
  preview: '/templates/teal-horizontal-preview.png',
  
  generate: (data: ResumeData) => {
    const { personalInfo, experience, education } = data;
    
    return `
      <div class="resume-teal-horizontal">
        <div class="header-teal">
          <h1 class="name-teal">${personalInfo.fullName}, CTO CareerJSM</h1>
          <div class="contact-line-teal">
            ${personalInfo.location} | ${personalInfo.phone} | 
            <a href="mailto:${personalInfo.email}" class="email-link-teal">${personalInfo.email}</a>
          </div>
          <hr class="divider-teal" />
        </div>
        
        <div class="section-teal">
          <h2 class="section-title-teal">SUMMARY</h2>
          <p class="summary-teal">${personalInfo.summary}</p>
        </div>
        
        <div class="section-teal">
          <h2 class="section-title-teal">EDUCATION</h2>
          ${education.map(edu => `
            <div class="education-entry-teal">
              <div class="education-header-teal">
                <strong>${edu.degree}, ${edu.field}</strong> | <strong>${edu.institution}</strong> | <span>${edu.graduationDate}</span>
              </div>
            </div>
          `).join('')}
        </div>
        
        <div class="section-teal">
          <h2 class="section-title-teal">EXPERIENCE</h2>
          ${experience.map(exp => `
            <div class="experience-entry-teal">
              <div class="experience-header-teal">
                <strong>${exp.position}</strong> | <strong>${exp.company}</strong> | <span>${exp.startDate} – ${exp.current ? 'Present' : exp.endDate}</span>
              </div>
              <p class="experience-description-teal">${exp.description}</p>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  },
  
  css: `
    .resume-teal-horizontal {
      max-width: 8.5in;
      margin: 0 auto;
      padding: 0.75in;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: white;
      color: #000;
      line-height: 1.6;
    }
    
    .header-teal {
      margin-bottom: 1.5rem;
    }
    
    .name-teal {
      font-size: 24px;
      font-weight: 700;
      color: #0d9488;
      margin: 0 0 0.5rem;
    }
    
    .contact-line-teal {
      font-size: 11px;
      color: #333;
      margin-bottom: 0.75rem;
    }
    
    .email-link-teal {
      color: #0d9488;
      text-decoration: none;
    }
    
    .divider-teal {
      border: none;
      border-top: 2px solid #0d9488;
      margin: 0.75rem 0;
    }
    
    .section-teal {
      margin-bottom: 1.5rem;
    }
    
    .section-title-teal {
      font-size: 14px;
      font-weight: 700;
      color: #0d9488;
      text-transform: uppercase;
      letter-spacing: 1px;
      margin: 0 0 0.75rem;
    }
    
    .summary-teal {
      font-size: 11px;
      line-height: 1.7;
      color: #333;
      margin: 0;
    }
    
    .education-entry-teal,
    .experience-entry-teal {
      margin-bottom: 1rem;
    }
    
    .education-header-teal,
    .experience-header-teal {
      font-size: 11px;
      margin-bottom: 0.5rem;
    }
    
    .education-header-teal strong,
    .experience-header-teal strong {
      font-weight: 700;
      color: #000;
    }
    
    .experience-description-teal {
      font-size: 11px;
      line-height: 1.6;
      color: #333;
      margin: 0;
    }
    
    @media print {
      .resume-teal-horizontal {
        padding: 0.5in;
      }
    }
  `
};

/**
 * TEMPLATE 9: TWO-COLUMN RED (Sidebar with Red Accents)
 */
const twoColumnRedTemplate: ResumeTemplate = {
  id: 'two-column-red',
  name: 'Two-Column Red',
  description: 'Two-column layout with red accent sidebar',
  bestFor: ['Creative', 'Marketing', 'Design', 'Media'],
  preview: '/templates/two-column-red-preview.png',
  
  generate: (data: ResumeData) => {
    const { personalInfo, experience, skills } = data;
    
    return `
      <div class="resume-two-column-red">
        <div class="header-two-column">
          <h1 class="name-two-column">${personalInfo.fullName}</h1>
          <div class="title-two-column">CTO CareerJSM</div>
          <hr class="divider-two-column" />
        </div>
        
        <div class="content-grid-two-column">
          <div class="sidebar-two-column">
            <div class="section-sidebar">
              <h2 class="section-title-red">CONTACT</h2>
              <div class="contact-item-sidebar">${personalInfo.location}</div>
              <div class="contact-item-sidebar">${personalInfo.phone}</div>
              <div class="contact-item-sidebar">${personalInfo.email}</div>
            </div>
            
            ${skills.languages && skills.languages.length > 0 ? `
              <div class="section-sidebar">
                <h2 class="section-title-blue">LANGUAGES</h2>
                ${skills.languages.map(lang => `
                  <div class="language-item-sidebar">
                    <strong>${lang.language}</strong>
                  </div>
                `).join('')}
              </div>
            ` : ''}
          </div>
          
          <div class="main-column-two-column">
            <div class="section-main">
              <h2 class="section-title-red">SUMMARY</h2>
              <p class="summary-two-column">${personalInfo.summary}</p>
            </div>
            
            <div class="section-main">
              <h2 class="section-title-red">EXPERIENCE</h2>
              ${experience.map(exp => `
                <div class="experience-entry-two-column">
                  <div class="experience-header-two-column">
                    <strong class="job-title-blue">${exp.position}</strong>
                    <span class="company-right">${exp.company}</span>
                  </div>
                  <div class="date-line-two-column">${exp.startDate} – ${exp.current ? 'Present' : exp.endDate}</div>
                  <p class="experience-desc-two-column">${exp.description}</p>
                </div>
              `).join('')}
            </div>
          </div>
        </div>
      </div>
    `;
  },
  
  css: `
    .resume-two-column-red {
      max-width: 8.5in;
      margin: 0 auto;
      padding: 0.75in;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: white;
      color: #000;
    }
    
    .header-two-column {
      text-align: center;
      margin-bottom: 1.5rem;
    }
    
    .name-two-column {
      font-size: 28px;
      font-weight: 700;
      color: #000;
      margin: 0;
    }
    
    .title-two-column {
      font-size: 16px;
      font-weight: 600;
      color: #000;
      margin: 0.25rem 0 0.75rem;
    }
    
    .divider-two-column {
      border: none;
      border-top: 1px solid #ccc;
      margin: 0.75rem 0;
    }
    
    .content-grid-two-column {
      display: grid;
      grid-template-columns: 30% 70%;
      gap: 2rem;
      border-left: 1px dotted #ccc;
      padding-left: 0;
    }
    
    .sidebar-two-column {
      padding-right: 1.5rem;
    }
    
    .section-sidebar {
      margin-bottom: 1.5rem;
    }
    
    .section-title-red {
      font-size: 12px;
      font-weight: 700;
      color: #dc2626;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin: 0 0 0.75rem;
    }
    
    .section-title-blue {
      font-size: 12px;
      font-weight: 700;
      color: #2563eb;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin: 0 0 0.75rem;
    }
    
    .contact-item-sidebar {
      font-size: 10px;
      color: #333;
      margin-bottom: 0.5rem;
      line-height: 1.5;
    }
    
    .language-item-sidebar {
      font-size: 10px;
      color: #333;
      margin-bottom: 0.5rem;
    }
    
    .main-column-two-column {
      padding-left: 1.5rem;
    }
    
    .section-main {
      margin-bottom: 1.5rem;
    }
    
    .summary-two-column {
      font-size: 11px;
      line-height: 1.7;
      color: #333;
      margin: 0;
    }
    
    .experience-entry-two-column {
      margin-bottom: 1.25rem;
    }
    
    .experience-header-two-column {
      display: flex;
      justify-content: space-between;
      align-items: baseline;
      margin-bottom: 0.25rem;
    }
    
    .job-title-blue {
      font-size: 12px;
      font-weight: 700;
      color: #2563eb;
    }
    
    .company-right {
      font-size: 11px;
      font-weight: 600;
      color: #000;
    }
    
    .date-line-two-column {
      font-size: 10px;
      color: #666;
      margin-bottom: 0.5rem;
    }
    
    .experience-desc-two-column {
      font-size: 11px;
      line-height: 1.6;
      color: #333;
      margin: 0;
    }
    
    @media print {
      .resume-two-column-red {
        padding: 0.5in;
      }
    }
  `
};

export const resumeTemplates: Record<string, ResumeTemplate> = {
  modern: modernTemplate,
  professional: professionalTemplate,
  creative: creativeTemplate,
  tech: techTemplate,
  minimal: minimalTemplate,
  executive: executiveTemplate,
  cv: cvTemplate,
  'teal-horizontal': tealHorizontalTemplate,
  'two-column-red': twoColumnRedTemplate,
};

export function getTemplateById(id: string): ResumeTemplate {
  return resumeTemplates[id] || resumeTemplates.modern;
}

export function getAllTemplates(): ResumeTemplate[] {
  return Object.values(resumeTemplates);
}

export function getTemplatesByIndustry(industry: string): ResumeTemplate[] {
  const industryLower = industry.toLowerCase();
  return Object.values(resumeTemplates).filter(template => 
    template.bestFor.some(category => category.toLowerCase().includes(industryLower))
  );
}
</file>

<file path="src/app/resume-builder/components/resume-builder.tsx">
'use client'

import { useState, useEffect, useCallback } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { getTemplateById } from '@/lib/resume-templates-v2'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  Plus,
  Trash2,
  Edit3,
  Save,
  Eye,
  Download,
  Wand2,
  Palette,
  Type,
  Layout,
  CheckCircle,
  AlertTriangle,
  Loader2,
  GripVertical,
  ChevronUp,
  ChevronDown,
  Code,
  Briefcase,
  BookOpen,
  FileText,
  Lightbulb,
  Linkedin
} from 'lucide-react'
import toast from 'react-hot-toast'
import { LinkedInImport } from '@/components/linkedin-import'
import { ResumeAnalyzer } from '@/components/resume-builder/resume-analyzer'
import { ATSScore } from '@/components/resume-builder/ats-score'
import { TemplateSelector } from '@/components/resume-builder/template-selector'
import { ResumeImportOptions } from '@/components/resume-builder/resume-import-options'
import { ResumePreviewButton } from '@/components/resume-builder/resume-preview-modal'

interface ResumeData {
  personalInfo: {
    fullName: string
    email: string
    phone: string
    location: string
    linkedin?: string
    website?: string
    summary: string
  }
  experience: Array<{
    id: string
    company: string
    position: string
    location: string
    startDate: string
    endDate: string
    current: boolean
    description: string
    achievements: string[]
    technologies: string[]
  }>
  education: Array<{
    id: string
    institution: string
    degree: string
    field: string
    location: string
    graduationDate: string
    gpa?: string
    honors?: string[]
  }>
  skills: {
    technical: string[]
    soft: string[]
    languages: Array<{ language: string; proficiency: string }>
    certifications: Array<{ name: string; issuer: string; date: string; expiry?: string }>
  }
  projects: Array<{
    id: string
    name: string
    description: string
    technologies: string[]
    url?: string
    github?: string
    startDate: string
    endDate: string
  }>
}

interface ResumeBuilderProps {
  userId: string
  mode?: 'full' | 'contentOnly'
}

export function ResumeBuilder({ userId, mode = 'full' }: ResumeBuilderProps) {
  const [selectedTemplate, setSelectedTemplate] = useState('modern')
  const [showLinkedInImport, setShowLinkedInImport] = useState(false)
  const [showImportOptions, setShowImportOptions] = useState(true) // Show import options initially
  const [resumeData, setResumeData] = useState<ResumeData>({
    personalInfo: {
      fullName: '',
      email: '',
      phone: '',
      location: '',
      linkedin: '',
      website: '',
      summary: ''
    },
    experience: [],
    education: [],
    skills: {
      technical: [],
      soft: [],
      languages: [],
      certifications: []
    },
    projects: [{
      id: '1',
      name: '',
      description: '',
      technologies: [],
      url: '',
      github: '',
      startDate: '',
      endDate: ''
    }]
  })

  const [activeSection, setActiveSection] = useState('personal')
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedResume, setGeneratedResume] = useState<any>(null)
  const [showPreview, setShowPreview] = useState(false)
  const [jobDescription, setJobDescription] = useState('')
  const [tone, setTone] = useState<'professional'|'conversational'|'technical'>('professional')
  const [showDiff, setShowDiff] = useState(false)
  const [highlightKeywordsOn, setHighlightKeywordsOn] = useState(true)
  const highlightKeywords = (html: string, keywords: string[]) => {
    if (!html || !keywords || keywords.length === 0) return html
    const escaped = keywords.map(k => k.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).filter(Boolean)
    if (escaped.length === 0) return html
    const regex = new RegExp(`\\b(${escaped.join('|')})\\b`, 'gi')
    return html.replace(regex, '<mark class="bg-yellow-200">$1</mark>')
  }

  // Load existing resume data if available
  useEffect(() => {
    loadExistingResume()
  }, [])

  const loadExistingResume = async () => {
    try {
      const response = await fetch('/api/resume/list')
      if (response.ok) {
        const data = await response.json()
        if (data.resumes && data.resumes.length > 0) {
          // Load the most recent resume
          const recentResume = data.resumes[0]
          // This would parse the existing resume data
          toast.success('Loaded existing resume data')
        }
      }
    } catch (error) {
      console.error('Failed to load existing resume:', error)
    }
  }

  const updatePersonalInfo = (field: string, value: string) => {
    setResumeData(prev => ({
      ...prev,
      personalInfo: {
        ...prev.personalInfo,
        [field]: value
      }
    }))
  }

  const addExperience = () => {
    const newExp = {
      id: Date.now().toString(),
      company: '',
      position: '',
      location: '',
      startDate: '',
      endDate: '',
      current: false,
      description: '',
      achievements: [],
      technologies: []
    }
    setResumeData(prev => ({
      ...prev,
      experience: [...prev.experience, newExp]
    }))
  }

  const updateExperience = (id: string, field: string, value: any) => {
    setResumeData(prev => ({
      ...prev,
      experience: prev.experience.map(exp =>
        exp.id === id ? { ...exp, [field]: value } : exp
      )
    }))
  }

  const removeExperience = (id: string) => {
    setResumeData(prev => ({
      ...prev,
      experience: prev.experience.filter(exp => exp.id !== id)
    }))
  }

  const moveExperience = (index: number, direction: 'up' | 'down') => {
    setResumeData(prev => {
      const newExp = [...prev.experience]
      if (direction === 'up' && index > 0) {
        [newExp[index], newExp[index - 1]] = [newExp[index - 1], newExp[index]]
      } else if (direction === 'down' && index < newExp.length - 1) {
        [newExp[index], newExp[index + 1]] = [newExp[index + 1], newExp[index]]
      }
      return { ...prev, experience: newExp }
    })
  }

  const addEducation = () => {
    const newEdu = {
      id: Date.now().toString(),
      institution: '',
      degree: '',
      field: '',
      location: '',
      graduationDate: '',
      gpa: '',
      honors: []
    }
    setResumeData(prev => ({
      ...prev,
      education: [...prev.education, newEdu]
    }))
  }

  const updateEducation = (id: string, field: string, value: any) => {
    setResumeData(prev => ({
      ...prev,
      education: prev.education.map(edu =>
        edu.id === id ? { ...edu, [field]: value } : edu
      )
    }))
  }

  const removeEducation = (id: string) => {
    setResumeData(prev => ({
      ...prev,
      education: prev.education.filter(edu => edu.id !== id)
    }))
  }

  const addSkill = (category: 'technical' | 'soft', skill: string) => {
    if (!skill.trim()) return

    setResumeData(prev => ({
      ...prev,
      skills: {
        ...prev.skills,
        [category]: [...prev.skills[category], skill.trim()]
      }
    }))
  }

  const removeSkill = (category: 'technical' | 'soft', skillToRemove: string) => {
    setResumeData(prev => ({
      ...prev,
      skills: {
        ...prev.skills,
        [category]: prev.skills[category].filter(skill => skill !== skillToRemove)
      }
    }))
  }

  const addLanguage = () => {
    setResumeData(prev => ({
      ...prev,
      skills: {
        ...prev.skills,
        languages: [...prev.skills.languages, { language: '', proficiency: 'Beginner' }]
      }
    }))
  }

  const updateLanguage = (index: number, field: string, value: string) => {
    setResumeData(prev => ({
      ...prev,
      skills: {
        ...prev.skills,
        languages: prev.skills.languages.map((lang, i) =>
          i === index ? { ...lang, [field]: value } : lang
        )
      }
    }))
  }

  const removeLanguage = (index: number) => {
    setResumeData(prev => ({
      ...prev,
      skills: {
        ...prev.skills,
        languages: prev.skills.languages.filter((_, i) => i !== index)
      }
    }))
  }

  const addProject = () => {
    const newProject = {
      id: Date.now().toString(),
      name: '',
      description: '',
      technologies: [],
      url: '',
      github: '',
      startDate: '',
      endDate: ''
    }
    setResumeData(prev => ({
      ...prev,
      projects: [...prev.projects, newProject]
    }))
  }

  const updateProject = (id: string, field: string, value: any) => {
    setResumeData(prev => ({
      ...prev,
      projects: prev.projects.map(project =>
        project.id === id ? { ...project, [field]: value } : project
      )
    }))
  }

  const removeProject = (id: string) => {
    setResumeData(prev => ({
      ...prev,
      projects: prev.projects.filter(project => project.id !== id)
    }))
  }

  const addProjectTechnology = (projectId: string, technology: string) => {
    if (!technology.trim()) return

    setResumeData(prev => ({
      ...prev,
      projects: prev.projects.map(project =>
        project.id === projectId
          ? { ...project, technologies: [...project.technologies, technology.trim()] }
          : project
      )
    }))
  }

  const removeProjectTechnology = (projectId: string, technologyToRemove: string) => {
    setResumeData(prev => ({
      ...prev,
      projects: prev.projects.map(project =>
        project.id === projectId
          ? { ...project, technologies: project.technologies.filter(tech => tech !== technologyToRemove) }
          : project
      )
    }))
  }

  const generateResume = async () => {
    setIsGenerating(true)
    try {
      const response = await fetch('/api/resume-builder/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          resumeData,
          template: selectedTemplate,
          targetJob: 'Software Engineer', // This could be dynamic
          industry: 'Technology',
          experienceLevel: 'mid',
          jobDescription: jobDescription && jobDescription.length > 20 ? jobDescription : undefined,
          tone
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to generate resume')
      }

      const data = await response.json()
      setGeneratedResume(data)
      setShowPreview(true)
      toast.success('Resume generated successfully!')
    } catch (error) {
      console.error('Resume generation error:', error)
      toast.error(error instanceof Error ? error.message : 'Failed to generate resume')
    } finally {
      setIsGenerating(false)
    }
  }

  const downloadResume = () => {
    if (!generatedResume) return

    // Create and download HTML file
    const blob = new Blob([generatedResume.output.html], { type: 'text/html' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${resumeData.personalInfo.fullName.replace(/\s+/g, '_')}_Resume.html`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    toast.success('Resume downloaded!')
  }

  const downloadPdf = async () => {
    if (!generatedResume) return
    try {
      const resp = await fetch('/api/resume/export/pdf', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          html: generatedResume.output.html,
          filename: `${resumeData.personalInfo.fullName.replace(/\s+/g, '_')}_Resume.pdf`
        })
      })
      if (!resp.ok) {
        const data = await resp.json().catch(() => ({}))
        throw new Error((data as any).error || 'Failed to export PDF')
      }
      const blob = await resp.blob()
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${resumeData.personalInfo.fullName.replace(/\s+/g, '_')}_Resume.pdf`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      toast.success('PDF downloaded!')
    } catch (e) {
      toast.error(e instanceof Error ? e.message : 'Failed to export PDF')
    }
  }

  const calculateCompleteness = () => {
    let score = 0
    let total = 0

    // Personal info (25%)
    total += 25
    if (resumeData.personalInfo.fullName) score += 8
    if (resumeData.personalInfo.email) score += 8
    if (resumeData.personalInfo.phone) score += 5
    if (resumeData.personalInfo.summary) score += 4

    // Experience (30%)
    total += 30
    if (resumeData.experience.length > 0) {
      score += Math.min(resumeData.experience.length * 10, 30)
    }

    // Education (20%)
    total += 20
    if (resumeData.education.length > 0) {
      score += Math.min(resumeData.education.length * 10, 20)
    }

    // Skills (20%)
    total += 20
    const skillCount = resumeData.skills.technical.length + resumeData.skills.soft.length
    score += Math.min(skillCount * 3, 20)

    // Projects (10%)
    total += 10
    if (resumeData.projects && resumeData.projects.length > 0) {
      score += Math.min(resumeData.projects.length * 2, 10)
    }

    return Math.round((score / total) * 100)
  }

  const completeness = calculateCompleteness()

  // Handle resume data import from LinkedIn or upload
  const handleImport = (data: ResumeData | null) => {
    if (data) {
      setResumeData(data)
      toast.success('Resume data imported successfully!')
    }
    setShowImportOptions(false)
  }

  // Render formatted preview using templates
  const buildFormattedHtml = () => {
    const templateObj = getTemplateById(selectedTemplate)
    // Pass the resumeData directly - it already matches the ResumeData interface
    return templateObj.generate(resumeData)
  }

  // Show import options if resume is empty
  if (showImportOptions && !resumeData.personalInfo.fullName) {
    return (
      <div className="container max-w-7xl mx-auto py-8">
        <ResumeImportOptions 
          onImport={handleImport}
          onSkip={() => setShowImportOptions(false)}
        />
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Template Selection */}
      {mode === 'full' && (
        <TemplateSelector
          selectedTemplate={selectedTemplate}
          onSelectTemplate={(templateId) => {
            setSelectedTemplate(templateId)
            // Auto-select matching tone
            const toneMap: Record<string, 'professional' | 'conversational' | 'technical'> = {
              'modern': 'professional',
              'professional': 'professional',
              'creative': 'conversational',
              'minimal': 'professional',
              'executive': 'professional',
              'tech': 'technical'
            }
            const matchingTone = toneMap[templateId] || 'professional'
            setTone(matchingTone)
            toast.success(`Template changed - Tone set to ${matchingTone}`)
          }}
        />
      )}

      {/* Builder Interface */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Form Sections */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Resume Content</CardTitle>
                  <CardDescription>
                    Build your resume section by section. Completeness: {completeness}%
                  </CardDescription>
                </div>
                <Button
                  onClick={() => setShowLinkedInImport(!showLinkedInImport)}
                  variant="outline"
                  className="flex items-center gap-2"
                >
                  <Linkedin className="w-4 h-4" />
                  Import from LinkedIn
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              {/* LinkedIn Import Section */}
              {showLinkedInImport && (
                <div className="mb-6 p-4 border-2 border-blue-200 rounded-lg bg-blue-50/50">
                  <LinkedInImport
                    mode="structured"
                    onImport={(importedData) => {
                      // Auto-populate resume fields from LinkedIn data
                      if (importedData) {
                        setResumeData(importedData)
                        toast.success('LinkedIn data imported! Resume fields auto-populated.')
                        setShowLinkedInImport(false)
                      }
                    }}
                  />
                </div>
              )}
              
              {/* Target Job Description (for AI tailoring) */}
              <div className="space-y-2">
                <Label htmlFor="jobDescription">Target Job Description (for AI tailoring)</Label>
                <Textarea
                  id="jobDescription"
                  value={jobDescription}
                  onChange={(e) => setJobDescription(e.target.value)}
                  placeholder="Paste the job description here to tailor your resume."
                  rows={6}
                />
                <p className="text-xs text-muted-foreground">Optional but recommended. At least 20 characters to enable AI tailoring.</p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
                  <div>
                    <Label className="text-xs">Tone guidance <span className="text-muted-foreground">(auto-selected)</span></Label>
                    <Select value={tone} onValueChange={(v)=>setTone(v as any)}>
                      <SelectTrigger><SelectValue /></SelectTrigger>
                      <SelectContent>
                        <SelectItem value="professional">Professional</SelectItem>
                        <SelectItem value="conversational">Conversational</SelectItem>
                        <SelectItem value="technical">Technical</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>
              <Tabs value={activeSection} onValueChange={setActiveSection}>
                <TabsList className="grid w-full grid-cols-5">
                  <TabsTrigger value="personal">Personal</TabsTrigger>
                  <TabsTrigger value="experience">Experience</TabsTrigger>
                  <TabsTrigger value="education">Education</TabsTrigger>
                  <TabsTrigger value="skills">Skills</TabsTrigger>
                  <TabsTrigger value="projects">Projects</TabsTrigger>
                </TabsList>

                {/* Personal Information */}
                <TabsContent value="personal" className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="fullName">Full Name *</Label>
                      <Input
                        id="fullName"
                        value={resumeData.personalInfo.fullName}
                        onChange={(e) => updatePersonalInfo('fullName', e.target.value)}
                        placeholder="John Doe"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="email">Email *</Label>
                      <Input
                        id="email"
                        type="email"
                        value={resumeData.personalInfo.email}
                        onChange={(e) => updatePersonalInfo('email', e.target.value)}
                        placeholder="john@example.com"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone</Label>
                      <Input
                        id="phone"
                        value={resumeData.personalInfo.phone}
                        onChange={(e) => updatePersonalInfo('phone', e.target.value)}
                        placeholder="(555) 123-4567"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="location">Location</Label>
                      <Input
                        id="location"
                        value={resumeData.personalInfo.location}
                        onChange={(e) => updatePersonalInfo('location', e.target.value)}
                        placeholder="San Francisco, CA"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="linkedin">LinkedIn</Label>
                      <Input
                        id="linkedin"
                        value={resumeData.personalInfo.linkedin}
                        onChange={(e) => updatePersonalInfo('linkedin', e.target.value)}
                        placeholder="https://linkedin.com/in/johndoe"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="website">Website</Label>
                      <Input
                        id="website"
                        value={resumeData.personalInfo.website}
                        onChange={(e) => updatePersonalInfo('website', e.target.value)}
                        placeholder="https://johndoe.com"
                      />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="summary">Professional Summary</Label>
                    <Textarea
                      id="summary"
                      value={resumeData.personalInfo.summary}
                      onChange={(e) => updatePersonalInfo('summary', e.target.value)}
                      placeholder="Brief summary of your professional background and goals..."
                      rows={4}
                    />
                  </div>
                </TabsContent>

                {/* Experience Section */}
                <TabsContent value="experience" className="space-y-4">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-medium">Work Experience</h3>
                    <Button onClick={addExperience} size="sm">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Experience
                    </Button>
                  </div>

                  {resumeData.experience.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      <Briefcase className="w-12 h-12 mx-auto mb-4 opacity-50" />
                      <p>No work experience added yet.</p>
                      <Button onClick={addExperience} className="mt-4">
                        Add Your First Experience
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {resumeData.experience.map((exp, index) => (
                        <Card key={exp.id}>
                          <CardContent className="p-4">
                            <div className="flex items-start justify-between mb-4">
                              <div className="flex items-center gap-2">
                                <GripVertical className="w-4 h-4 text-muted-foreground" />
                                <span className="font-medium">Experience {index + 1}</span>
                              </div>
                              <div className="flex gap-2">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => moveExperience(index, 'up')}
                                  disabled={index === 0}
                                >
                                  <ChevronUp className="w-4 h-4" />
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => moveExperience(index, 'down')}
                                  disabled={index === resumeData.experience.length - 1}
                                >
                                  <ChevronDown className="w-4 h-4" />
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => removeExperience(exp.id)}
                                >
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                              <Input
                                placeholder="Job Title"
                                value={exp.position}
                                onChange={(e) => updateExperience(exp.id, 'position', e.target.value)}
                              />
                              <Input
                                placeholder="Company Name"
                                value={exp.company}
                                onChange={(e) => updateExperience(exp.id, 'company', e.target.value)}
                              />
                              <Input
                                placeholder="Location"
                                value={exp.location}
                                onChange={(e) => updateExperience(exp.id, 'location', e.target.value)}
                              />
                              <div className="flex gap-2">
                                <Input
                                  type="month"
                                  placeholder="Start Date"
                                  value={exp.startDate}
                                  onChange={(e) => updateExperience(exp.id, 'startDate', e.target.value)}
                                />
                                <Input
                                  type="month"
                                  placeholder="End Date"
                                  value={exp.endDate}
                                  onChange={(e) => updateExperience(exp.id, 'endDate', e.target.value)}
                                  disabled={exp.current}
                                />
                              </div>
                            </div>

                            <div className="space-y-2">
                              <Textarea
                                placeholder="Job description and responsibilities..."
                                value={exp.description}
                                onChange={(e) => updateExperience(exp.id, 'description', e.target.value)}
                                rows={3}
                              />
                              <Input
                                placeholder="Technologies used (comma-separated)"
                                value={exp.technologies.join(', ')}
                                onChange={(e) => updateExperience(exp.id, 'technologies', e.target.value.split(',').map(s => s.trim()))}
                              />
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  )}
                </TabsContent>

                {/* Education Section */}
                <TabsContent value="education" className="space-y-4">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-medium">Education</h3>
                    <Button onClick={addEducation} size="sm">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Education
                    </Button>
                  </div>

                  {resumeData.education.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      <BookOpen className="w-12 h-12 mx-auto mb-4 opacity-50" />
                      <p>No education added yet.</p>
                      <Button onClick={addEducation} className="mt-4">
                        Add Education
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {resumeData.education.map((edu) => (
                        <Card key={edu.id}>
                          <CardContent className="p-4">
                            <div className="flex items-start justify-between mb-4">
                              <span className="font-medium">Education</span>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => removeEducation(edu.id)}
                              >
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                              <Input
                                placeholder="Institution"
                                value={edu.institution}
                                onChange={(e) => updateEducation(edu.id, 'institution', e.target.value)}
                              />
                              <Input
                                placeholder="Degree"
                                value={edu.degree}
                                onChange={(e) => updateEducation(edu.id, 'degree', e.target.value)}
                              />
                              <Input
                                placeholder="Field of Study"
                                value={edu.field}
                                onChange={(e) => updateEducation(edu.id, 'field', e.target.value)}
                              />
                              <Input
                                placeholder="Location"
                                value={edu.location}
                                onChange={(e) => updateEducation(edu.id, 'location', e.target.value)}
                              />
                              <Input
                                type="month"
                                placeholder="Graduation Date"
                                value={edu.graduationDate}
                                onChange={(e) => updateEducation(edu.id, 'graduationDate', e.target.value)}
                              />
                              <Input
                                placeholder="GPA (optional)"
                                value={edu.gpa}
                                onChange={(e) => updateEducation(edu.id, 'gpa', e.target.value)}
                              />
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  )}
                </TabsContent>

                {/* Skills Section */}
                <TabsContent value="skills" className="space-y-6">
                  {/* Technical Skills */}
                  <div>
                    <h3 className="text-lg font-medium mb-3">Technical Skills</h3>
                    <div className="flex flex-wrap gap-2 mb-3">
                      {resumeData.skills.technical.map((skill, index) => (
                        <Badge key={index} variant="secondary" className="flex items-center gap-1">
                          {skill}
                          <button
                            onClick={() => removeSkill('technical', skill)}
                            className="ml-1 hover:text-red-500"
                          >
                            ×
                          </button>
                        </Badge>
                      ))}
                    </div>
                    <div className="flex gap-2">
                      <Input
                        placeholder="Add technical skill"
                        onKeyPress={(e) => {
                          if (e.key === 'Enter') {
                            addSkill('technical', (e.target as HTMLInputElement).value)
                            ;(e.target as HTMLInputElement).value = ''
                          }
                        }}
                      />
                      <Button
                        onClick={() => {
                          const input = document.querySelector('input[placeholder="Add technical skill"]') as HTMLInputElement
                          if (input?.value) {
                            addSkill('technical', input.value)
                            input.value = ''
                          }
                        }}
                      >
                        Add
                      </Button>
                    </div>
                  </div>

                  {/* Soft Skills */}
                  <div>
                    <h3 className="text-lg font-medium mb-3">Soft Skills</h3>
                    <div className="flex flex-wrap gap-2 mb-3">
                      {resumeData.skills.soft.map((skill, index) => (
                        <Badge key={index} variant="outline" className="flex items-center gap-1">
                          {skill}
                          <button
                            onClick={() => removeSkill('soft', skill)}
                            className="ml-1 hover:text-red-500"
                          >
                            ×
                          </button>
                        </Badge>
                      ))}
                    </div>
                    <div className="flex gap-2">
                      <Input
                        placeholder="Add soft skill"
                        onKeyPress={(e) => {
                          if (e.key === 'Enter') {
                            addSkill('soft', (e.target as HTMLInputElement).value)
                            ;(e.target as HTMLInputElement).value = ''
                          }
                        }}
                      />
                      <Button
                        onClick={() => {
                          const input = document.querySelector('input[placeholder="Add soft skill"]') as HTMLInputElement
                          if (input?.value) {
                            addSkill('soft', input.value)
                            input.value = ''
                          }
                        }}
                      >
                        Add
                      </Button>
                    </div>
                  </div>

                  {/* Languages */}
                  <div>
                    <div className="flex justify-between items-center mb-3">
                      <h3 className="text-lg font-medium">Languages</h3>
                      <Button onClick={addLanguage} size="sm">
                        <Plus className="w-4 h-4 mr-2" />
                        Add Language
                      </Button>
                    </div>
                    <div className="space-y-2">
                      {resumeData.skills.languages.map((lang, index) => (
                        <div key={index} className="flex gap-2 items-center">
                          <Input
                            placeholder="Language"
                            value={lang.language}
                            onChange={(e) => updateLanguage(index, 'language', e.target.value)}
                            className="flex-1"
                          />
                          <Select
                            value={lang.proficiency}
                            onValueChange={(value) => updateLanguage(index, 'proficiency', value)}
                          >
                            <SelectTrigger className="w-32">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="Beginner">Beginner</SelectItem>
                              <SelectItem value="Intermediate">Intermediate</SelectItem>
                              <SelectItem value="Advanced">Advanced</SelectItem>
                              <SelectItem value="Native">Native</SelectItem>
                            </SelectContent>
                          </Select>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => removeLanguage(index)}
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                </TabsContent>

                {/* Projects Section */}
                <TabsContent value="projects" className="space-y-4">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-medium">Projects</h3>
                    <Button onClick={addProject} size="sm">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Project
                    </Button>
                  </div>

                  {resumeData.projects.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      <Briefcase className="w-12 h-12 mx-auto mb-4 opacity-50" />
                      <p>No projects added yet.</p>
                      <Button onClick={addProject} className="mt-4">
                        Add Your First Project
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {resumeData.projects.map((project, index) => (
                        <Card key={project.id}>
                          <CardContent className="p-4">
                            <div className="flex items-start justify-between mb-4">
                              <div className="flex items-center gap-2">
                                <Code className="w-4 h-4 text-muted-foreground" />
                                <span className="font-medium">Project {index + 1}</span>
                              </div>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => removeProject(project.id)}
                              >
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                              <Input
                                placeholder="Project Name"
                                value={project.name}
                                onChange={(e) => updateProject(project.id, 'name', e.target.value)}
                              />
                              <div className="flex gap-2">
                                <Input
                                  type="month"
                                  placeholder="Start Date"
                                  value={project.startDate}
                                  onChange={(e) => updateProject(project.id, 'startDate', e.target.value)}
                                />
                                <Input
                                  type="month"
                                  placeholder="End Date"
                                  value={project.endDate}
                                  onChange={(e) => updateProject(project.id, 'endDate', e.target.value)}
                                />
                              </div>
                            </div>

                            <div className="space-y-4">
                              <Textarea
                                placeholder="Project description and your role..."
                                value={project.description}
                                onChange={(e) => updateProject(project.id, 'description', e.target.value)}
                                rows={3}
                              />

                              {/* Technologies */}
                              <div>
                                <Label className="text-sm font-medium">Technologies Used</Label>
                                <div className="flex flex-wrap gap-1 mt-1 mb-2">
                                  {project.technologies.map((tech, techIndex) => (
                                    <Badge key={techIndex} variant="secondary" className="flex items-center gap-1">
                                      {tech}
                                      <button
                                        onClick={() => removeProjectTechnology(project.id, tech)}
                                        className="ml-1 hover:text-red-500"
                                      >
                                        ×
                                      </button>
                                    </Badge>
                                  ))}
                                </div>
                                <div className="flex gap-2">
                                  <Input
                                    placeholder="Add technology"
                                    onKeyPress={(e) => {
                                      if (e.key === 'Enter') {
                                        addProjectTechnology(project.id, (e.target as HTMLInputElement).value)
                                        ;(e.target as HTMLInputElement).value = ''
                                      }
                                    }}
                                  />
                                  <Button
                                    type="button"
                                    size="sm"
                                    variant="outline"
                                    onClick={() => {
                                      const input = document.querySelector(`input[placeholder="Add technology"]`) as HTMLInputElement
                                      if (input?.value) {
                                        addProjectTechnology(project.id, input.value)
                                        input.value = ''
                                      }
                                    }}
                                  >
                                    Add
                                  </Button>
                                </div>
                              </div>

                              {/* Links */}
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <Input
                                  placeholder="Live Demo URL (optional)"
                                  value={project.url}
                                  onChange={(e) => updateProject(project.id, 'url', e.target.value)}
                                />
                                <Input
                                  placeholder="GitHub Repository (optional)"
                                  value={project.github}
                                  onChange={(e) => updateProject(project.id, 'github', e.target.value)}
                                />
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  )}
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        </div>

        {/* Preview Panel */}
        {mode === 'full' && (
        <div className="space-y-6">
          {/* Resume Preview */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center gap-2">
                  <Eye className="h-5 w-5" />
                  Live Preview
                </CardTitle>
                {generatedResume && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowPreview(!showPreview)}
                  >
                    {showPreview ? 'Hide' : 'Show'} Preview
                  </Button>
                )}
              </div>
            </CardHeader>
            <CardContent>
              {generatedResume && showPreview ? (
                <div className="border rounded-lg overflow-hidden">
                  {!showDiff ? (
                    <>
                      <div className="flex items-center justify-end p-2 gap-2 text-xs text-muted-foreground">
                        <label className="flex items-center gap-1 cursor-pointer">
                          <input
                            type="checkbox"
                            checked={highlightKeywordsOn}
                            onChange={(e) => setHighlightKeywordsOn(e.target.checked)}
                          />
                          Highlight keywords
                        </label>
                      </div>
                      <iframe srcDoc={buildFormattedHtml()} className="w-full h-96 border-0" title="Resume Preview" sandbox="allow-same-origin allow-scripts" />
                    </>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2">
                      <div className="p-2 border-r">
                        <div className="text-xs text-muted-foreground mb-1">Original (extracted)</div>
                        <pre className="whitespace-pre-wrap text-xs">{resumeData.personalInfo.summary ? `${resumeData.personalInfo.summary}\n\n` : ''}{/* simplified */}{/* show some sections */}</pre>
                      </div>
                      <div className="p-2">
                        <div className="text-xs text-muted-foreground mb-1">Tailored</div>
                        <pre className="whitespace-pre-wrap text-xs">{generatedResume.resumeText || ''}</pre>
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-center py-12 text-muted-foreground">
                  <FileText className="w-16 h-16 mx-auto mb-4 opacity-50" />
                  <p>Generate your resume to see the preview</p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Generate & Download */}
          <Card>
            <CardHeader>
              <CardTitle>Generate Resume</CardTitle>
              <CardDescription>
                Create your professional resume with AI optimization
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Completeness Indicator */}
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Resume Completeness</span>
                  <span className={completeness >= 80 ? 'text-green-600' : completeness >= 60 ? 'text-yellow-600' : 'text-red-600'}>
                    {completeness}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className={`h-2 rounded-full transition-all duration-500 ${
                      completeness >= 80 ? 'bg-green-500' : completeness >= 60 ? 'bg-yellow-500' : 'bg-red-500'
                    }`}
                    style={{ width: `${completeness}%` }}
                  />
                </div>
                {completeness < 80 && (
                  <p className="text-sm text-muted-foreground">
                    Add more details to improve your resume's completeness score.
                  </p>
                )}
              </div>

              {/* Preview Button */}
              {completeness >= 30 && (
                <ResumePreviewButton
                  resumeHtml={buildFormattedHtml()}
                  resumeCss={getTemplateById(selectedTemplate).css}
                  templateName={getTemplateById(selectedTemplate).name}
                  onDownload={downloadPdf}
                  className="w-full"
                />
              )}

              <Button
                onClick={generateResume}
                disabled={isGenerating || completeness < 30}
                className="w-full"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating Resume...
                  </>
                ) : (
                  <>
                    <Wand2 className="mr-2 h-4 w-4" />
                    Generate Resume
                  </>
                )}
              </Button>

              {generatedResume && (
                <div className="space-y-2">
                  <Button
                    onClick={() => setShowDiff(!showDiff)}
                    variant="outline"
                    className="w-full"
                  >
                    {showDiff ? 'Hide Diff' : 'Show Original vs Tailored'}
                  </Button>
                  <Button
                    onClick={downloadResume}
                    variant="outline"
                    className="w-full"
                  >
                    <Download className="mr-2 h-4 w-4" />
                    Download HTML
                  </Button>
                  <Button
                    onClick={downloadPdf}
                    className="w-full"
                  >
                    <Download className="mr-2 h-4 w-4" />
                    Download PDF
                  </Button>
                  <p className="text-xs text-muted-foreground text-center">
                    Professional templates with ATS optimization
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Resume Analyzer */}
          <ResumeAnalyzer resumeData={resumeData} />

          {/* ATS Score */}
          <ATSScore resumeData={resumeData} selectedTemplate={selectedTemplate} />

          {/* Tips */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lightbulb className="h-5 w-5" />
                Resume Tips
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2 text-sm">
                <li className="flex items-start gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                  Use action verbs and quantify achievements
                </li>
                <li className="flex items-start gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                  Keep it to 1-2 pages for most roles
                </li>
                <li className="flex items-start gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                  Tailor keywords to the job description
                </li>
                <li className="flex items-start gap-2">
                  <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                  Include relevant certifications and skills
                </li>
              </ul>
            </CardContent>
          </Card>
        </div>
        )}
      </div>
    </div>
  )
}
</file>

</files>

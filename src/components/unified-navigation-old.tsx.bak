'use client'

import { useState, useEffect } from 'react'
import { useSession, signOut } from 'next-auth/react'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { ThemeToggle } from '@/components/theme-toggle'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { useNotifications } from '@/hooks/use-notifications'
import { 
  Menu, 
  X, 
  Home, 
  FileText, 
  Briefcase, 
  Settings,
  User,
  LogOut,
  Search,
  Users,
  ChevronDown,
  Bell,
  Mail,
  BarChart3,
  Target
} from 'lucide-react'

interface NavigationItem {
  name: string
  href?: string
  icon: React.ComponentType<{ className?: string }>
  badge?: number
  submenu?: { name: string; href: string; badge?: number }[]
}

// Enhanced Navigation Structure with Better Organization
const navigationItems: NavigationItem[] = [
  { 
    name: 'Dashboard', 
    href: '/dashboard', 
    icon: Home,
    badge: 0
  },
  {
    name: 'Career Finder',
    icon: Target,
    submenu: [
      { name: 'Job Search', href: '/career-finder/search' },
      { name: 'Job Analysis', href: '/career-finder/job-analysis' },
      { name: 'Company Research', href: '/career-finder/company' },
      { name: 'Resume Optimizer', href: '/career-finder/optimizer' },
      { name: 'Cover Letter', href: '/career-finder/cover-letter' },
      { name: 'Outreach', href: '/career-finder/outreach' }
    ]
  },
  { 
    name: 'Resume', 
    href: '/resume-builder', 
    icon: FileText 
  },
  { 
    name: 'Applications', 
    href: '/career-finder/applications', 
    icon: Briefcase,
    badge: 0
  },
  { 
    name: 'Analytics', 
    href: '/analytics', 
    icon: BarChart3 
  },
  { 
    name: 'Network', 
    href: '/network', 
    icon: Users,
    badge: 0
  },
  {
    name: 'Settings',
    icon: Settings,
    submenu: [
      { name: 'Profile', href: '/settings/profile' },
      { name: 'Preferences', href: '/settings/preferences' },
      { name: 'Integrations', href: '/settings/integrations' },
      { name: 'Job Boards', href: '/settings/job-boards' }
    ]
  },
]

export function UnifiedNavigation() {
  const { data: session, status } = useSession()
  const pathname = usePathname()
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const [sidebarOpen, setSidebarOpen] = useState(true) // Desktop sidebar state
  const [expandedMenu, setExpandedMenu] = useState<string | null>(null)
  const [scrolled, setScrolled] = useState(false)
  const { count: notificationCount } = useNotifications()

  // DEBUG: Log session state
  console.log('[NAV_DEBUG]', {
    session: !!session,
    status,
    pathname,
    userEmail: session?.user?.email
  })

  // Handle scroll for glass effect
  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 10)
    }
    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  // Close mobile menu on route change
  useEffect(() => {
    setMobileMenuOpen(false)
  }, [pathname])

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Cmd/Ctrl + K for search
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault()
        window.location.href = '/career-finder/search'
      }
      // Escape to close mobile menu
      if (e.key === 'Escape' && mobileMenuOpen) {
        setMobileMenuOpen(false)
      }
    }
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [mobileMenuOpen])
  
  // Only show navigation when user is signed in (not on landing or auth pages)
  const isAuthPage = pathname?.startsWith('/auth')
  const isLandingPage = pathname === '/'
  
  // Show loading skeleton while session is loading
  if (status === 'loading') {
    return (
      <header className="sticky top-0 bg-background/95 backdrop-blur-xl border-b border-border shadow-xl" style={{ minHeight: '64px', zIndex: 9999 }}>
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between h-16">
            <div className="w-32 h-8 bg-muted animate-pulse rounded"></div>
            <div className="flex gap-2">
              <div className="w-20 h-8 bg-muted animate-pulse rounded"></div>
              <div className="w-20 h-8 bg-muted animate-pulse rounded"></div>
            </div>
          </div>
        </div>
      </header>
    )
  }
  
  // Hide navigation if: on auth pages, on landing page, or not authenticated
  if (isAuthPage || isLandingPage || status === 'unauthenticated') return null

  const isItemActive = (item: NavigationItem) => {
    if (item.href && pathname === item.href) return true
    if (item.submenu) {
      return item.submenu.some(sub => pathname === sub.href || pathname?.startsWith(sub.href))
    }
    return false
  }

  const toggleSubmenu = (itemName: string) => {
    setExpandedMenu(expandedMenu === itemName ? null : itemName)
  }

  return (
    <>
      {/* TOP BAR - Minimal, just logo and actions */}
      <header 
        className={`fixed top-0 left-0 right-0 transition-all duration-300 ${
          scrolled 
            ? 'bg-background/95 backdrop-blur-xl border-b border-border shadow-xl' 
            : 'bg-background/90 backdrop-blur-lg border-b border-border/50 shadow-md'
        }`}
        style={{ height: '64px', zIndex: 1000 }}
      >
        <div className="h-full px-4 flex items-center justify-between">
          {/* LOGO WITH GRADIENT - Always visible */}
          <Link 
            href={session ? '/dashboard' : '/'} 
            className="flex items-center gap-2 sm:gap-3 group shrink-0 z-10"
          >
            <div className="w-9 h-9 sm:w-10 sm:h-10 rounded-xl gradient-primary flex items-center justify-center text-white font-bold shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:scale-105 shrink-0">
              CL
            </div>
            <span className="gradient-text font-bold text-lg sm:text-xl hidden xs:inline-block whitespace-nowrap">
              Career Lever AI
            </span>
          </Link>

          {/* DESKTOP NAVIGATION - Always visible on desktop */}
          <nav className="hidden md:flex items-center space-x-1 flex-1 justify-center max-w-3xl mx-auto">
            {navigationItems.map((item) => {
                const Icon = item.icon
                const isActive = isItemActive(item)
                const hasSubmenu = item.submenu && item.submenu.length > 0
                
                return (
                  <div key={item.name} className="relative group">
                    {hasSubmenu ? (
                      <>
                        <button
                          onClick={() => toggleSubmenu(item.name)}
                          className={`flex items-center space-x-2 px-4 py-2.5 rounded-xl text-sm font-semibold transition-all duration-300 ${
                            isActive
                              ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary shadow-md'
                              : 'text-muted-foreground hover:text-foreground hover:bg-accent/50'
                          }`}
                        >
                          <Icon className="w-4 h-4" />
                          <span>{item.name}</span>
                          <ChevronDown className={`w-3 h-3 transition-transform duration-300 ${
                            expandedMenu === item.name ? 'rotate-180' : ''
                          }`} />
                          {item.badge && item.badge > 0 && (
                            <span className="ml-1 px-2 py-0.5 text-xs font-bold text-white bg-gradient-to-r from-red-500 to-pink-500 rounded-full shadow-sm">
                              {item.badge}
                            </span>
                          )}
                        </button>
                        
                        {/* SUBMENU DROPDOWN */}
                        {expandedMenu === item.name && (
                          <div className="absolute top-full left-0 mt-2 w-56 bg-card/95 backdrop-blur-xl border border-border/50 rounded-xl shadow-2xl overflow-hidden z-dropdown">
                            {item.submenu?.map((subItem) => (
                              <Link
                                key={subItem.href}
                                href={subItem.href}
                                className={`flex items-center justify-between px-4 py-3 text-sm font-medium transition-all duration-200 ${
                                  pathname === subItem.href
                                    ? 'bg-primary/10 text-primary'
                                    : 'text-foreground hover:bg-accent/50'
                                }`}
                              >
                                <span>{subItem.name}</span>
                                {subItem.badge && subItem.badge > 0 && (
                                  <span className="px-2 py-0.5 text-xs font-bold text-white bg-gradient-to-r from-blue-500 to-purple-500 rounded-full">
                                    {subItem.badge}
                                  </span>
                                )}
                              </Link>
                            ))}
                          </div>
                        )}
                      </>
                    ) : (
                      <Link
                        href={item.href || '#'}
                        className={`flex items-center space-x-2 px-4 py-2.5 rounded-xl text-sm font-semibold transition-all duration-300 ${
                          isActive
                            ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary shadow-md'
                            : 'text-muted-foreground hover:text-foreground hover:bg-accent/50 hover:scale-105'
                        }`}
                      >
                        <Icon className="w-4 h-4" />
                        <span>{item.name}</span>
                        {item.badge && item.badge > 0 && (
                          <span className="ml-1 px-2 py-0.5 text-xs font-bold text-white bg-gradient-to-r from-red-500 to-pink-500 rounded-full shadow-sm">
                            {item.badge}
                          </span>
                        )}
                      </Link>
                    )}
                  </div>
                )
              })}
          </nav>

          {/* RIGHT SIDE ACTIONS - Always visible */}
          <div className="flex items-center space-x-2 sm:space-x-3 shrink-0">
            {/* QUICK ACTIONS - Search, Notifications & Messages */}
            {session && (
              <>
                <Link 
                  href="/career-finder/search"
                  className="hidden lg:flex relative p-2 sm:p-2.5 rounded-xl text-muted-foreground hover:text-foreground hover:bg-accent/50 transition-all duration-300 hover:scale-105"
                  title="Quick Search"
                >
                  <Search className="w-5 h-5" />
                </Link>
                <Link 
                  href="/notifications"
                  className="hidden sm:flex relative p-2 sm:p-2.5 rounded-xl text-muted-foreground hover:text-foreground hover:bg-accent/50 transition-all duration-300 hover:scale-105"
                  title="Notifications"
                >
                  <Bell className="w-5 h-5" />
                  {notificationCount > 0 && (
                    <span className="absolute -top-1 -right-1 px-1.5 py-0.5 text-xs font-bold text-white bg-gradient-to-r from-red-500 to-pink-500 rounded-full shadow-lg">
                      {notificationCount > 9 ? '9+' : notificationCount}
                    </span>
                  )}
                </Link>
                <Link 
                  href="/messages"
                  className="hidden sm:flex relative p-2 sm:p-2.5 rounded-xl text-muted-foreground hover:text-foreground hover:bg-accent/50 transition-all duration-300 hover:scale-105"
                  title="Messages"
                >
                  <Mail className="w-5 h-5" />
                </Link>
              </>
            )}

            {/* THEME TOGGLE - Visible on tablet+ */}
            <div className="hidden md:block">
              <ThemeToggle />
            </div>

            {/* USER MENU OR AUTH BUTTONS */}
            {session ? (
              <div className="flex items-center gap-2">
                {/* MOBILE MENU BUTTON - Show FIRST on mobile for better visibility */}
                <button
                  className="flex md:hidden p-2.5 rounded-xl bg-accent/30 hover:bg-accent/50 transition-all border border-border/50 hover:border-primary/30 shadow-sm"
                  onClick={() => {
                    console.log('[HAMBURGER] Clicked!', { current: mobileMenuOpen, willBe: !mobileMenuOpen })
                    setMobileMenuOpen(!mobileMenuOpen)
                  }}
                  aria-label="Toggle mobile menu"
                  style={{ minWidth: '44px', minHeight: '44px', zIndex: 10000 }}
                >
                  {mobileMenuOpen ? (
                    <X className="h-6 w-6 text-primary" />
                  ) : (
                    <Menu className="h-6 w-6 text-foreground" />
                  )}
                </button>

                {/* USER DROPDOWN - Desktop only */}
                <div className="hidden md:block relative group">
                  <button className="flex items-center space-x-3 px-3 py-2 rounded-xl hover:bg-accent/50 transition-all duration-300">
                    <Avatar className="h-8 w-8 ring-2 ring-border/50 hover:ring-primary/50 transition-all">
                      <AvatarImage src={session.user?.image || ''} />
                      <AvatarFallback className="bg-gradient-primary text-white font-bold text-sm">
                        {session.user?.name?.[0]?.toUpperCase() || 'U'}
                      </AvatarFallback>
                    </Avatar>
                    <span className="text-sm font-semibold hidden xl:inline">{session.user?.name}</span>
                    <ChevronDown className="w-3 h-3" />
                  </button>
                  
                  {/* USER DROPDOWN MENU */}
                  <div className="absolute right-0 top-full mt-2 w-56 bg-card/95 backdrop-blur-xl border border-border/50 rounded-xl shadow-2xl overflow-hidden opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-dropdown">
                    <div className="px-4 py-3 border-b border-border/50">
                      <p className="text-sm font-semibold">{session.user?.name}</p>
                      <p className="text-xs text-muted-foreground truncate">{session.user?.email}</p>
                    </div>
                    <Link
                      href="/settings/profile"
                      className="flex items-center space-x-3 px-4 py-3 text-sm font-medium text-foreground hover:bg-accent/50 transition-all"
                    >
                      <User className="w-4 h-4" />
                      <span>Profile</span>
                    </Link>
                    <Link
                      href="/settings"
                      className="flex items-center space-x-3 px-4 py-3 text-sm font-medium text-foreground hover:bg-accent/50 transition-all"
                    >
                      <Settings className="w-4 h-4" />
                      <span>Settings</span>
                    </Link>
                    <button
                      onClick={() => signOut({ callbackUrl: '/' })}
                      className="w-full flex items-center space-x-3 px-4 py-3 text-sm font-medium text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30 transition-all"
                    >
                      <LogOut className="w-4 h-4" />
                      <span>Sign Out</span>
                    </button>
                  </div>
                </div>
              </div>
            ) : (
              <div className="flex items-center space-x-2">
                <Button variant="ghost" asChild className="rounded-xl">
                  <Link href="/auth/signin">Sign In</Link>
                </Button>
                <Button asChild className="rounded-xl bg-gradient-primary text-white hover:opacity-90">
                  <Link href="/auth/signup">Sign Up</Link>
                </Button>
              </div>
            )}
          </div>
        </div>

        {/* MOBILE NAVIGATION PANEL - Enhanced visibility with sections */}
        {mobileMenuOpen && (
          <div className="md:hidden py-4 space-y-3 border-t border-border/50 bg-background/95 backdrop-blur-xl shadow-2xl max-h-[calc(100vh-80px)] overflow-y-auto">
            {/* QUICK ACTIONS SECTION */}
            <div className="px-4 space-y-1">
              <p className="text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-2">Quick Actions</p>
              <Link
                href="/career-finder/search"
                className="flex items-center space-x-3 px-4 py-3 rounded-xl text-sm font-semibold text-foreground hover:bg-accent/50 transition-all"
                onClick={() => setMobileMenuOpen(false)}
              >
                <Search className="w-5 h-5" />
                <span>Job Search</span>
              </Link>
              <Link
                href="/notifications"
                className="flex items-center justify-between px-4 py-3 rounded-xl text-sm font-semibold text-foreground hover:bg-accent/50 transition-all"
                onClick={() => setMobileMenuOpen(false)}
              >
                <div className="flex items-center space-x-3">
                  <Bell className="w-5 h-5" />
                  <span>Notifications</span>
                </div>
                <span className="w-2 h-2 bg-gradient-to-r from-red-500 to-pink-500 rounded-full animate-pulse"></span>
              </Link>
            </div>

            {/* MAIN NAVIGATION SECTION */}
            <div className="px-4 space-y-1">
              <p className="text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-2">Navigation</p>
            {navigationItems.map((item) => {
              const Icon = item.icon
              const isActive = isItemActive(item)
              const hasSubmenu = item.submenu && item.submenu.length > 0
              
              return (
                <div key={item.name}>
                  {hasSubmenu ? (
                    <>
                      <button
                        onClick={() => toggleSubmenu(item.name)}
                        className={`w-full flex items-center justify-between px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
                          isActive
                            ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
                            : 'text-foreground hover:bg-accent/50'
                        }`}
                      >
                        <div className="flex items-center space-x-3">
                          <Icon className="w-5 h-5" />
                          <span>{item.name}</span>
                          {item.badge && item.badge > 0 && (
                            <span className="px-2 py-0.5 text-xs font-bold text-white bg-gradient-to-r from-red-500 to-pink-500 rounded-full">
                              {item.badge}
                            </span>
                          )}
                        </div>
                        <ChevronDown className={`w-4 h-4 transition-transform ${
                          expandedMenu === item.name ? 'rotate-180' : ''
                        }`} />
                      </button>
                      {expandedMenu === item.name && (
                        <div className="ml-4 mt-1 space-y-1">
                          {item.submenu?.map((subItem) => (
                            <Link
                              key={subItem.href}
                              href={subItem.href}
                              className={`flex items-center justify-between px-4 py-2.5 rounded-xl text-sm font-medium transition-all ${
                                pathname === subItem.href
                                  ? 'bg-primary/10 text-primary'
                                  : 'text-muted-foreground hover:text-foreground hover:bg-accent/50'
                              }`}
                            >
                              <span>{subItem.name}</span>
                              {subItem.badge && subItem.badge > 0 && (
                                <span className="px-2 py-0.5 text-xs font-bold text-white bg-gradient-to-r from-blue-500 to-purple-500 rounded-full">
                                  {subItem.badge}
                                </span>
                              )}
                            </Link>
                          ))}
                        </div>
                      )}
                    </>
                  ) : (
                    <Link
                      href={item.href || '#'}
                      className={`flex items-center space-x-3 px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
                        isActive
                          ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
                          : 'text-foreground hover:bg-accent/50'
                      }`}
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      <Icon className="w-5 h-5" />
                      <span>{item.name}</span>
                      {item.badge && item.badge > 0 && (
                        <span className="ml-auto px-2 py-0.5 text-xs font-bold text-white bg-gradient-to-r from-red-500 to-pink-500 rounded-full">
                          {item.badge}
                        </span>
                      )}
                    </Link>
                  )}
                </div>
              )
            })}
            </div>
            
            {/* MOBILE FOOTER ACTIONS */}
            <div className="px-4 pt-4 mt-4 border-t border-border/50 space-y-1">
              <ThemeToggle />
              <Link
                href="/settings"
                className="flex items-center space-x-3 px-4 py-3 rounded-xl text-sm font-medium text-foreground hover:bg-accent/50 transition-all"
              >
                <Settings className="w-5 h-5" />
                <span>Settings</span>
              </Link>
              <button
                onClick={() => signOut({ callbackUrl: '/' })}
                className="w-full flex items-center space-x-3 px-4 py-3 rounded-xl text-sm font-medium text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30 transition-all"
              >
                <LogOut className="w-5 h-5" />
                <span>Sign Out</span>
              </button>
            </div>
          </div>
        )}
      </div>
    </header>
  )
}

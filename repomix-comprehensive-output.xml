This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where line numbers have been added.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
- Pay special attention to the Repository Description. These contain important context and guidelines specific to this project.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*.ts, **/*.tsx, **/*.js, **/*.jsx
- Files matching these patterns are excluded: node_modules/**, .next/**, dist/**, build/**, coverage/**, .git/**, **/*.test.ts, **/*.test.tsx, **/*.spec.ts, **/*.spec.tsx, test-*.ps1, commit-message.txt
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<user_provided_header>
Career Lever AI - Comprehensive Codebase Export
Includes: Perplexity AI, Scrapers, PDF Processing, Cheerio, and Core APIs
Generated: {{generationDate}}
</user_provided_header>

<directory_structure>
capacitor.config.ts
debug-perplexity.js
fix-dark-mode.js
next-env.d.ts
next.config.js
next.config.mobile.js
postcss.config.js
public/sw.js
scripts/build-mobile.js
scripts/check-env.js
scripts/generate-icons.js
scripts/test-endpoints.js
src/app/analytics/components/analytics-dashboard.tsx
src/app/analytics/page.tsx
src/app/api/admin/ai-service/stats/route.ts
src/app/api/admin/cache/stats/route.ts
src/app/api/admin/errors/route.ts
src/app/api/admin/monitoring/dashboard/route.ts
src/app/api/admin/performance/stats/route.ts
src/app/api/admin/perplexity-cache/clear/route.ts
src/app/api/admin/perplexity-cache/stats/route.ts
src/app/api/alerts/bootstrap/route.ts
src/app/api/alerts/preferences/route.ts
src/app/api/alerts/run/route.ts
src/app/api/alerts/subscribe/route.ts
src/app/api/analytics/ab/route.ts
src/app/api/analytics/dashboard/route.ts
src/app/api/analytics/outcomes/route.ts
src/app/api/analytics/performance/route.ts
src/app/api/analytics/route.ts
src/app/api/analytics/track/route.ts
src/app/api/applications/create/route.ts
src/app/api/applications/follow-up-reminders/route.ts
src/app/api/applications/list/route.ts
src/app/api/applications/pipeline-stats/route.ts
src/app/api/applications/response-metrics/route.ts
src/app/api/applications/route.ts
src/app/api/assistants/coach/route.ts
src/app/api/assistants/company/contacts/route.ts
src/app/api/assistants/company/orchestrate/route.ts
src/app/api/assistants/cover-letter/generate/route.ts
src/app/api/assistants/interview/prepare/route.ts
src/app/api/assistants/job/analyze/route.ts
src/app/api/assistants/salary/coach/route.ts
src/app/api/auth/[...nextauth]/route.ts
src/app/api/billing/activate/route.ts
src/app/api/calendar/events/route.ts
src/app/api/calendar/ics/route.ts
src/app/api/career-finder/autopilot/route.ts
src/app/api/commute/estimate/route.ts
src/app/api/company/contacts/route.ts
src/app/api/company/insights/route.ts
src/app/api/company/orchestrate/route.ts
src/app/api/company/research/route.ts
src/app/api/company/reviews/route.ts
src/app/api/contacts/email-outreach/route.ts
src/app/api/cover-letter/generate/route.ts
src/app/api/cover-letter/list/route.ts
src/app/api/cron/daily/route.ts
src/app/api/cron/process-followups/route.ts
src/app/api/cron/resume-years-backfill/route.ts
src/app/api/debug/cache-stats/route.ts
src/app/api/debug/performance/route.ts
src/app/api/debug/qa/route.ts
src/app/api/debug/scrape-health/route.ts
src/app/api/health/route.ts
src/app/api/inbox/label/create/route.ts
src/app/api/inbox/outlook/category/create/route.ts
src/app/api/inbox/run/route.ts
src/app/api/inbox/sync/route.ts
src/app/api/insights/ats/score/route.ts
src/app/api/insights/authenticity/route.ts
src/app/api/insights/competition/route.ts
src/app/api/insights/hiring/profile/route.ts
src/app/api/insights/hiring/timeline/route.ts
src/app/api/insights/painpoints/route.ts
src/app/api/insights/psychology/route.ts
src/app/api/insights/salary/route.ts
src/app/api/insights/success-v2/route.ts
src/app/api/insights/success/route.ts
src/app/api/insights/timing/route.ts
src/app/api/insights/trajectory/route.ts
src/app/api/interview-prep/export-pdf/route.ts
src/app/api/interview-prep/generate/route.ts
src/app/api/interview/prepare/route.ts
src/app/api/job-boards/autopilot/search/route.ts
src/app/api/job-boards/integrations/route.ts
src/app/api/job-boards/jobs/list/route.ts
src/app/api/job-boards/jobs/sync/route.ts
src/app/api/job-boards/oauth/authorize/route.ts
src/app/api/job-boards/oauth/callback/route.ts
src/app/api/job-boards/submit/route.ts
src/app/api/job/analyze/route.ts
src/app/api/job/compare/route.ts
src/app/api/jobs/ai-risk/route.ts
src/app/api/jobs/analyze/route.ts
src/app/api/jobs/import/route.ts
src/app/api/jobs/outlook/route.ts
src/app/api/jobs/recommend/route.ts
src/app/api/jobs/scrape/search/route.ts
src/app/api/jobs/search/route.ts
src/app/api/jobs/store/route.ts
src/app/api/jobs/suggest-industries/route.ts
src/app/api/linkedin/profile/route.ts
src/app/api/market-intelligence/salary/route.ts
src/app/api/market-intelligence/trends/route.ts
src/app/api/network/connections/route.ts
src/app/api/network/feed/route.ts
src/app/api/network/messages/route.ts
src/app/api/notifications/[id]/read/route.ts
src/app/api/notifications/count/route.ts
src/app/api/notifications/create/route.ts
src/app/api/notifications/list/route.ts
src/app/api/notifications/mark-read/route.ts
src/app/api/notifications/read-all/route.ts
src/app/api/notifications/route.ts
src/app/api/oauth/gmail/authorize/route.ts
src/app/api/oauth/gmail/callback/route.ts
src/app/api/oauth/gmail/route.ts
src/app/api/oauth/outlook/authorize/route.ts
src/app/api/oauth/outlook/callback/route.ts
src/app/api/oauth/outlook/route.ts
src/app/api/onboarding/quiz/route.ts
src/app/api/openapi/route.ts
src/app/api/ops/audit/route.ts
src/app/api/ops/metrics/route.ts
src/app/api/ops/otel/route.ts
src/app/api/ops/slo/route.ts
src/app/api/outreach/compose/route.ts
src/app/api/outreach/followup/cancel/route.ts
src/app/api/outreach/followup/create/route.ts
src/app/api/outreach/followup/mark-sent/route.ts
src/app/api/outreach/followup/pending/route.ts
src/app/api/outreach/log/route.ts
src/app/api/outreach/send/route.ts
src/app/api/outreach/sequence/route.ts
src/app/api/privacy/delete/route.ts
src/app/api/privacy/export/route.ts
src/app/api/profile/route.ts
src/app/api/resume-builder/generate/route.ts
src/app/api/resume/analyze-comprehensive/route.ts
src/app/api/resume/career-timeline/route.ts
src/app/api/resume/customize/route.ts
src/app/api/resume/export-docx/route.ts
src/app/api/resume/export-pdf/route.ts
src/app/api/resume/export/docx/route.ts
src/app/api/resume/export/pdf/route.ts
src/app/api/resume/extract-profile/route.ts
src/app/api/resume/extract-signals/route.ts
src/app/api/resume/generate-bullets/route.ts
src/app/api/resume/list/route.ts
src/app/api/resume/optimize/route.ts
src/app/api/resume/parse-linkedin/route.ts
src/app/api/resume/parse/route.ts
src/app/api/resume/scrape-linkedin/route.ts
src/app/api/resume/signals/route.ts
src/app/api/resume/templates/route.ts
src/app/api/resume/upload/route.ts
src/app/api/resume/variants/analytics/route.ts
src/app/api/resume/variants/create/route.ts
src/app/api/resume/variants/track/route.ts
src/app/api/reverse-market/bids/route.ts
src/app/api/reverse-market/showcases/route.ts
src/app/api/salary-negotiation/export-pdf/route.ts
src/app/api/salary/analysis/route.ts
src/app/api/salary/coach/route.ts
src/app/api/salary/generate/route.ts
src/app/api/skills/analysis/route.ts
src/app/api/stripe/create-checkout/route.ts
src/app/api/stripe/webhook/route.ts
src/app/api/style/learn/route.ts
src/app/api/team/v1/members/route.ts
src/app/api/team/v1/route.ts
src/app/api/test-auth/route.ts
src/app/api/test-perplexity/route.ts
src/app/api/users/signup/route.ts
src/app/api/v2/career-finder/comprehensive-research/route.ts
src/app/api/v2/company/deep-research/route.ts
src/app/api/v2/company/enhanced-research/route.ts
src/app/api/v2/company/financials/route.ts
src/app/api/v2/company/google-intel/route.ts
src/app/api/v2/company/intel/route.ts
src/app/api/v2/interviewers/profile/route.ts
src/app/api/v2/jobs/discover/route.ts
src/app/api/v2/jobs/rank/route.ts
src/app/api/v2/jobs/suggest/route.ts
src/app/applications/[id]/page.tsx
src/app/auth/forgot-password/page.tsx
src/app/auth/signin/page.tsx
src/app/auth/signup/page.tsx
src/app/career-finder/applications/page.tsx
src/app/career-finder/company/page.tsx
src/app/career-finder/cover-letter/page.tsx
src/app/career-finder/interview-prep/page.tsx
src/app/career-finder/job-analysis/page.tsx
src/app/career-finder/job/page.tsx
src/app/career-finder/layout.tsx
src/app/career-finder/optimizer/page.tsx
src/app/career-finder/outreach/page.tsx
src/app/career-finder/resume/page.tsx
src/app/career-finder/salary-negotiation/page.tsx
src/app/career-finder/search/page.tsx
src/app/cover-letter/page.tsx
src/app/dashboard/components/action-center.tsx
src/app/dashboard/components/ai-insights.tsx
src/app/dashboard/components/application-pipeline.tsx
src/app/dashboard/components/dashboard-header.tsx
src/app/dashboard/components/enterprise-sidebar.tsx
src/app/dashboard/components/follow-up-reminders.tsx
src/app/dashboard/components/metrics-hero.tsx
src/app/dashboard/components/quick-actions.tsx
src/app/dashboard/components/recent-applications.tsx
src/app/dashboard/components/recent-cover-letters.tsx
src/app/dashboard/components/response-time-tracker.tsx
src/app/dashboard/components/stats-overview.tsx
src/app/dashboard/components/trends-chart.tsx
src/app/dashboard/page.tsx
src/app/interview-prep/components/interview-preparation.tsx
src/app/interview-prep/page.tsx
src/app/job-boards/components/job-boards-dashboard.tsx
src/app/job-boards/page.tsx
src/app/jobs/[id]/page.tsx
src/app/jobs/components/jobs-actions.tsx
src/app/jobs/components/local-discover.tsx
src/app/jobs/page.tsx
src/app/layout.tsx
src/app/network/components/network-dashboard.tsx
src/app/network/page.tsx
src/app/onboarding/page.tsx
src/app/onboarding/quiz/page.tsx
src/app/page.tsx
src/app/payment/page.tsx
src/app/privacy-policy/page.tsx
src/app/privacy/page.tsx
src/app/profile/page.tsx
src/app/resume-ab-testing/page.tsx
src/app/resume-builder-v2/page.tsx
src/app/resume-builder/components/resume-builder.tsx
src/app/resume-builder/page.tsx
src/app/resumes/page.tsx
src/app/reverse-market/page.tsx
src/app/reverse-market/reverse-market-client.tsx
src/app/salary-negotiation/components/salary-negotiation.tsx
src/app/salary-negotiation/page.tsx
src/app/settings/alerts/page.tsx
src/app/settings/integrations/page.tsx
src/app/settings/job-boards/page.tsx
src/app/settings/layout.tsx
src/app/settings/page.tsx
src/app/settings/preferences/page.tsx
src/app/settings/privacy/page.tsx
src/app/settings/profile/page.tsx
src/app/skill-analysis/components/skill-analysis.tsx
src/app/skill-analysis/page.tsx
src/app/terms/page.tsx
src/components/analytics-tracker.tsx
src/components/app-shell.tsx
src/components/autopilot-progress-tracker.tsx
src/components/breadcrumbs.tsx
src/components/career-finder-back-button.tsx
src/components/career-finder/progress.tsx
src/components/client-init.tsx
src/components/command-palette.tsx
src/components/company-research/index.tsx
src/components/debug-panel.tsx
src/components/error-boundaries/dashboard-error-boundary.tsx
src/components/error-boundaries/index.ts
src/components/error-boundaries/job-search-error-boundary.tsx
src/components/error-boundaries/resume-error-boundary.tsx
src/components/error-boundary.tsx
src/components/features-section.tsx
src/components/hero-section-v2.tsx
src/components/hero-section.tsx
src/components/job-analysis/index.tsx
src/components/job-card.tsx
src/components/job-status-bar.tsx
src/components/linkedin-import.tsx
src/components/mobile/JobCard.tsx
src/components/mobile/PullToRefresh.tsx
src/components/mobile/SuccessAnimation.tsx
src/components/modern-job-card.tsx
src/components/modern/DribbblePageLayout.tsx
src/components/modern/index.ts
src/components/modern/MobileNavigation.tsx
src/components/modern/ModernJobCard.tsx
src/components/modern/ModernResumeUpload.tsx
src/components/modern/SearchHeroSection.tsx
src/components/modern/VibrantPageHeader.tsx
src/components/onboarding/OnboardingRedirect.tsx
src/components/onboarding/ProgressBar.tsx
src/components/onboarding/QuizQuestion.tsx
src/components/onboarding/SuccessAnimation.tsx
src/components/providers.tsx
src/components/resume-builder/ai-suggestions.tsx
src/components/resume-builder/ats-checker.tsx
src/components/resume-builder/ats-score.tsx
src/components/resume-builder/bullet-point-generator.tsx
src/components/resume-builder/date-picker.tsx
src/components/resume-builder/export-hub.tsx
src/components/resume-builder/progress-tracker.tsx
src/components/resume-builder/quick-actions.tsx
src/components/resume-builder/quick-start.tsx
src/components/resume-builder/resume-analyzer.tsx
src/components/resume-builder/resume-preview.tsx
src/components/resume-builder/section-order.tsx
src/components/resume-builder/template-preview.tsx
src/components/resume-builder/template-selector.tsx
src/components/resume-context.tsx
src/components/resume-customizer/index.tsx
src/components/resume-templates/BaseTemplate.tsx
src/components/resume-templates/index.tsx
src/components/resume-upload/index.tsx
src/components/skeleton-loader.tsx
src/components/stats-section.tsx
src/components/theme-toggle.tsx
src/components/ui/alert.tsx
src/components/ui/avatar.tsx
src/components/ui/badge.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/checkbox.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/progress.tsx
src/components/ui/select.tsx
src/components/ui/separator.tsx
src/components/ui/skeleton.tsx
src/components/ui/tabs.tsx
src/components/ui/textarea.tsx
src/components/ui/use-toast.ts
src/components/unified-navigation.tsx
src/hooks/use-dashboard-stats.ts
src/hooks/use-job-applications.ts
src/hooks/use-notifications.ts
src/hooks/use-resumes.ts
src/lib/agents/agent-handlers.ts
src/lib/agents/agent-orchestrator.ts
src/lib/agents/agent-tools.ts
src/lib/agents/base-agent.ts
src/lib/agents/contact-research-agent.ts
src/lib/agents/job-discovery-agent.ts
src/lib/agents/perplexity-career-agent.ts
src/lib/ai-service-enterprise.ts
src/lib/ai-service.ts
src/lib/analytics.ts
src/lib/application-tracker.ts
src/lib/auth-security.ts
src/lib/auth.ts
src/lib/authenticity.ts
src/lib/canadian-job-scraper.ts
src/lib/career-finder-storage.ts
src/lib/company-research-service.ts
src/lib/company-research-types.ts
src/lib/comprehensive-data-sources.ts
src/lib/config/perplexity-configs.ts
src/lib/contact-enrichment.ts
src/lib/contact-validation.ts
src/lib/cover-letter-generator.ts
src/lib/cover-letter-templates.ts
src/lib/data-sources/contact-sources.ts
src/lib/data-sources/job-boards.ts
src/lib/database.ts
src/lib/db-retry.ts
src/lib/deadline-tracker.ts
src/lib/device-manager.ts
src/lib/email-automation.ts
src/lib/email-composer.ts
src/lib/email-providers/resend-provider.ts
src/lib/email-service.ts
src/lib/email-verification.ts
src/lib/enhanced-canadian-scraper.ts
src/lib/error-tracking.ts
src/lib/errors/perplexity-error.ts
src/lib/flags.ts
src/lib/followup-automation.ts
src/lib/health-check.ts
src/lib/i18n.ts
src/lib/interview-prep-generator.ts
src/lib/job-board-service.ts
src/lib/job-deduplication.ts
src/lib/job-description-scraper.ts
src/lib/job-outlook-analyzer.ts
src/lib/job-scraper.ts
src/lib/keyword-extraction.ts
src/lib/linkedin-job-integration.ts
src/lib/local-resume-parser.ts
src/lib/logger.ts
src/lib/market-intelligence-service.ts
src/lib/mongodb-adapter.ts
src/lib/mongodb.ts
src/lib/notification-service.ts
src/lib/observability.ts
src/lib/onboarding-utils.ts
src/lib/pdf-composer.ts
src/lib/pdf-generator.ts
src/lib/pdf-service.ts
src/lib/pdf-utils.ts
src/lib/pdf/unified-pdf-generator.ts
src/lib/performance-monitor.ts
src/lib/performance-utils.ts
src/lib/perplexity-intelligence.ts
src/lib/perplexity-job-search.ts
src/lib/perplexity-resume-analyzer.ts
src/lib/perplexity-service.ts
src/lib/personalization-engine.ts
src/lib/phone-extraction.ts
src/lib/plan.ts
src/lib/profile-extraction.ts
src/lib/prompts/perplexity-prompts.ts
src/lib/prompts/perplexity.ts
src/lib/public-job-boards-config.ts
src/lib/public-job-discovery-service.ts
src/lib/query-client.ts
src/lib/rate-limit.ts
src/lib/rate-limiter.ts
src/lib/real-canadian-scraper.ts
src/lib/redis-cache.ts
src/lib/redis.ts
src/lib/referral-finder.ts
src/lib/resume-generator.ts
src/lib/resume-manager.ts
src/lib/resume-parser.ts
src/lib/resume-templates-v2.ts
src/lib/resume/parser.ts
src/lib/retry-utility.ts
src/lib/salary-intelligence.ts
src/lib/salary-utils.ts
src/lib/scrapers/advanced-scraper.ts
src/lib/security.ts
src/lib/sentry.ts
src/lib/server-pdf-generator.ts
src/lib/tech-stack-analyzer.ts
src/lib/text-formatting.ts
src/lib/theme-manager.ts
src/lib/unified-job-board-strategy.ts
src/lib/utils.ts
src/lib/utils/ai-response-parser.ts
src/lib/utils/api-handler.ts
src/lib/utils/enterprise-json-extractor.ts
src/lib/utils/pdf-cleaner.ts
src/lib/utils/perplexity-logger.ts
src/lib/utils/retry-utility.ts
src/lib/utils/retry-with-backoff.ts
src/lib/utils/salary-normalizer.ts
src/lib/validation-middleware.ts
src/lib/validation.ts
src/lib/validation/schema-validator.ts
src/lib/validation/schemas.ts
src/lib/validators.ts
src/lib/web-scraper.ts
src/middleware.ts
src/middleware/validation.middleware.ts
src/models/ABEvent.ts
src/models/AlertPreference.ts
src/models/Application.ts
src/models/CandidateShowcase.ts
src/models/CompanyData.ts
src/models/Counter.ts
src/models/CoverLetter.ts
src/models/EmployerBid.ts
src/models/JobApplication.ts
src/models/JobBoardIntegration.ts
src/models/JobSearchCache.ts
src/models/Message.ts
src/models/NetworkConnection.ts
src/models/NetworkPost.ts
src/models/Notification.ts
src/models/OAuthToken.ts
src/models/Profile.ts
src/models/Resume.ts
src/models/SearchHistory.ts
src/models/SelectedJob.ts
src/models/SentEmail.ts
src/models/Team.ts
src/models/User.ts
src/services/company.service.ts
src/services/job-application.service.ts
src/services/job-search-cache.service.ts
src/services/resume.service.ts
src/stores/app.store.ts
src/stores/job-application.store.ts
src/stores/user.store.ts
src/types/comprehensive.ts
src/types/cover-letters.ts
src/types/email-outreach.ts
src/types/global.d.ts
src/types/index.ts
src/types/next-auth.d.ts
src/types/signals.ts
src/types/unified.ts
src/types/variants.ts
tailwind.config.js
tests/setup.ts
vitest.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="capacitor.config.ts">
 1: import { CapacitorConfig } from '@capacitor/cli'
 2: 
 3: const config: CapacitorConfig = {
 4:   appId: 'com.careerlever.app',
 5:   appName: 'Career Lever AI',
 6:   webDir: 'out',
 7:   
 8:   server: {
 9:     // PRODUCTION: Point to Railway backend for all API calls
10:     // NOTE: Update this URL when deploying to production
11:     url: process.env.NEXT_PUBLIC_API_URL || (process.env.NODE_ENV === 'production' 
12:       ? 'https://job-craft-ai-jobcraftai.up.railway.app'
13:       : 'http://localhost:3000'),
14:     androidScheme: 'https',
15:     iosScheme: 'https',
16:     // Allow navigation to backend and external APIs
17:     allowNavigation: [
18:       'job-craft-ai-jobcraftai.up.railway.app',
19:       'localhost',
20:       '*.careerlever.com',
21:       'https://api.perplexity.ai',
22:       'https://accounts.google.com',
23:       'https://*.googleusercontent.com'
24:     ],
25:     cleartext: false
26:   },
27:   
28:   // iOS-specific configuration
29:   ios: {
30:     // Automatic content inset for safe areas (notch, Dynamic Island)
31:     contentInset: 'automatic',
32:     // Background color (matches app theme - use dark theme color)
33:     backgroundColor: '#000000',
34:     // Scheme for deep linking
35:     scheme: 'careerlever'
36:   },
37:   
38:   // Android-specific configuration
39:   android: {
40:     // Background color (matches app theme - use dark theme color)
41:     backgroundColor: '#000000',
42:     // Disable mixed content (HTTPS only)
43:     allowMixedContent: false,
44:     // Disable web debugging in production
45:     webContentsDebuggingEnabled: process.env.NODE_ENV === 'development',
46:     // Append user agent
47:     appendUserAgent: 'CareerLeverAI/1.0',
48:     // Build configuration
49:     buildOptions: {
50:       keystorePath: process.env.ANDROID_KEYSTORE_PATH,
51:       keystorePassword: process.env.ANDROID_KEYSTORE_PASSWORD,
52:       keystoreAlias: process.env.ANDROID_KEY_ALIAS,
53:       keystoreAliasPassword: process.env.ANDROID_KEY_PASSWORD
54:     }
55:   },
56:   
57:   // Plugin configuration
58:   plugins: {
59:     SplashScreen: {
60:       launchShowDuration: 2000,
61:       launchAutoHide: true,
62:       backgroundColor: '#ffffff',
63:       androidSplashResourceName: 'splash',
64:       androidScaleType: 'CENTER_CROP',
65:       showSpinner: true,
66:       androidSpinnerStyle: 'large',
67:       iosSpinnerStyle: 'small',
68:       spinnerColor: '#667eea',
69:       splashFullScreen: false,
70:       splashImmersive: false
71:     },
72:     
73:     Keyboard: {
74:       resize: 'native',
75:       style: 'dark',
76:       resizeOnFullScreen: true
77:     },
78:     
79:     StatusBar: {
80:       style: 'dark',
81:       backgroundColor: '#000000',
82:       overlaysWebView: false
83:     },
84:     
85:     Haptics: {
86:       // Enable haptic feedback for better UX
87:     },
88:     
89:     PushNotifications: {
90:       presentationOptions: ['badge', 'sound', 'alert']
91:     }
92:   }
93: }
94: 
95: export default config
</file>

<file path="debug-perplexity.js">
 1: const { PerplexityService } = require('./dist/lib/perplexity-service.js')
 2: 
 3: async function debugPerplexity() {
 4:   console.log('🔍 Debugging Perplexity Service...\n')
 5:   console.log('Environment Variables:')
 6:   console.log('PERPLEXITY_API_KEY:', process.env.PERPLEXITY_API_KEY ? '✅ Set' : '❌ Missing')
 7:   console.log('NODE_ENV:', process.env.NODE_ENV || 'undefined')
 8:   console.log('PPX_DEBUG:', process.env.PPX_DEBUG || 'undefined')
 9:   console.log('')
10: 
11:   const svc = new PerplexityService()
12:   console.log('Health Check:')
13:   try {
14:     const health = await svc.healthCheck()
15:     console.log('Status:', health.status)
16:     console.log('Details:', health.details)
17:   } catch (e) {
18:     console.error('Health check failed:', e.message)
19:   }
20:   console.log('')
21: 
22:   console.log('Simple Request Test:')
23:   try {
24:     await svc.testRequest()
25:   } catch (e) {
26:     console.error('Request test failed:', e.message)
27:   }
28:   console.log('')
29: 
30:   console.log('Cache Stats:', PerplexityService.getCacheStats())
31: }
32: 
33: debugPerplexity().catch(err => { console.error(err); process.exit(1) })
</file>

<file path="next.config.js">
  1: /** @type {import('next').NextConfig} */
  2: const nextConfig = {
  3:     // Enable standalone output for Docker deployment
  4:     output: 'standalone',
  5:     
  6:     // Performance optimizations
  7:     compress: true, // Enable gzip compression
  8:     poweredByHeader: false, // Remove X-Powered-By header
  9:     
 10:     // Enable SWC minification (faster than Terser)
 11:     swcMinify: true,
 12:     
 13:     // Optimize production builds
 14:     productionBrowserSourceMaps: false, // Disable source maps in prod
 15:     
 16:     // React optimizations
 17:     reactStrictMode: true,
 18:     
 19:     i18n: {
 20:         locales: ['en', 'fr'],
 21:         defaultLocale: 'en',
 22:     },
 23:     env: {
 24:         MONGODB_URI: process.env.MONGODB_URI,
 25:         NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,
 26:         NEXTAUTH_URL: process.env.NEXTAUTH_URL,
 27:         // OPENAI_API_KEY is deprecated; retaining only if legacy routes remain
 28:         // OPENAI_API_KEY: process.env.OPENAI_API_KEY,
 29:         PERPLEXITY_API_KEY: process.env.PERPLEXITY_API_KEY,
 30:         PERPLEXITY_BASE_URL: process.env.PERPLEXITY_BASE_URL || 'https://api.perplexity.ai',
 31:         PERPLEXITY_MODEL: process.env.PERPLEXITY_MODEL || 'sonar-pro',
 32:         // OpenAI assistant IDs deprecated after Perplexity migration
 33:         NEXT_PUBLIC_SENTRY_DSN: process.env.NEXT_PUBLIC_SENTRY_DSN,
 34:         NEXT_PUBLIC_ENVIRONMENT: process.env.NEXT_PUBLIC_ENVIRONMENT || process.env.RAILWAY_ENVIRONMENT_NAME || 'production',
 35:     },
 36:     async headers() {
 37:         return [{
 38:             source: '/(.*)',
 39:             headers: [
 40:                 { key: 'X-Content-Type-Options', value: 'nosniff' },
 41:                 { key: 'X-Frame-Options', value: 'SAMEORIGIN' },
 42:                 { key: 'Referrer-Policy', value: 'strict-origin-when-cross-origin' },
 43:                 { key: 'Permissions-Policy', value: 'geolocation=(), microphone=(), camera=()' },
 44:                 { key: 'Strict-Transport-Security', value: 'max-age=63072000; includeSubDomains; preload' },
 45:                 { key: 'Cross-Origin-Opener-Policy', value: 'same-origin' },
 46:                 { key: 'Cross-Origin-Resource-Policy', value: 'same-origin' },
 47:                 { key: 'X-DNS-Prefetch-Control', value: 'off' },
 48:                 {
 49:                     key: 'Content-Security-Policy',
 50:                     value: [
 51:                         "default-src 'self'",
 52:                         "script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: data: https://cdnjs.cloudflare.com",
 53:                         "worker-src 'self' blob:",
 54:                         "style-src 'self' 'unsafe-inline' https:",
 55:                         "img-src 'self' data: blob:",
 56:                         "font-src 'self' data: https:",
 57:                         "connect-src 'self' https: wss:",
 58:                         "frame-src 'self' https://accounts.google.com",
 59:                         "object-src 'none'",
 60:                         "base-uri 'self'",
 61:                         "form-action 'self' https://accounts.google.com https://*.google.com https://*.googleusercontent.com"
 62:                     ].join('; ')
 63:                 }
 64:             ]
 65:         }]
 66:     },
 67:     images: {
 68:         domains: ['localhost'],
 69:         formats: ['image/avif', 'image/webp'], // Modern image formats
 70:         minimumCacheTTL: 60, // Cache images for 60 seconds
 71:         deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
 72:         imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
 73:     },
 74:     
 75:     // Experimental features for performance
 76:     experimental: {
 77:         // Optimize package imports (tree-shaking)
 78:         optimizePackageImports: [
 79:             '@heroicons/react', 
 80:             'lucide-react',
 81:             '@tanstack/react-query',
 82:             'react-hot-toast',
 83:             'recharts'
 84:         ],
 85:         // Disable CSS optimization to avoid critters dependency issue
 86:         // optimizeCss: true,
 87:     },
 88:     eslint: {
 89:         ignoreDuringBuilds: true,
 90:     },
 91:     typescript: {
 92:         // Allow disabling type-check during build via env to avoid OOM on small builders
 93:         ignoreBuildErrors: process.env.DISABLE_TYPECHECK === 'true',
 94:     },
 95:     webpack: (config, { isServer }) => {
 96:         // Avoid bundling optional 'canvas' dependency required by pdfjs in Node builds
 97:         config.resolve = config.resolve || {}
 98:         config.resolve.alias = config.resolve.alias || {}
 99:         config.resolve.alias['canvas'] = false
100:         if (isServer) {
101:             config.externals = config.externals || []
102:                 // Mark canvas as external in server to prevent resolution errors
103:             config.externals.push({ canvas: 'commonjs canvas' })
104:         }
105:         return config
106:     }
107: }
108: 
109: module.exports = nextConfig
</file>

<file path="next.config.mobile.js">
  1: /** @type {import('next').NextConfig} */
  2: const nextConfig = {
  3:     // CRITICAL: Use 'export' for Capacitor static builds
  4:     output: 'export',
  5:     
  6:     // Disable image optimization for static export
  7:     images: {
  8:         unoptimized: true,
  9:     },
 10:     
 11:     // Disable trailing slashes for mobile compatibility
 12:     trailingSlash: true,
 13:     
 14:     // Performance optimizations
 15:     compress: true,
 16:     poweredByHeader: false,
 17:     swcMinify: true,
 18:     productionBrowserSourceMaps: false,
 19:     
 20:     // React optimizations
 21:     reactStrictMode: true,
 22:     
 23:     // Remove i18n for static export (not supported)
 24:     // i18n config removed for Capacitor builds
 25:     
 26:     env: {
 27:         MONGODB_URI: process.env.MONGODB_URI,
 28:         NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,
 29:         NEXTAUTH_URL: process.env.NEXTAUTH_URL,
 30:         PERPLEXITY_API_KEY: process.env.PERPLEXITY_API_KEY,
 31:         PERPLEXITY_BASE_URL: process.env.PERPLEXITY_BASE_URL || 'https://api.perplexity.ai',
 32:         PERPLEXITY_MODEL: process.env.PERPLEXITY_MODEL || 'sonar-pro',
 33:         NEXT_PUBLIC_SENTRY_DSN: process.env.NEXT_PUBLIC_SENTRY_DSN,
 34:         NEXT_PUBLIC_ENVIRONMENT: process.env.NEXT_PUBLIC_ENVIRONMENT || 'mobile',
 35:         NEXT_PUBLIC_IS_CAPACITOR: 'true'
 36:     },
 37:     
 38:     // Experimental features for performance
 39:     experimental: {
 40:         // Optimize package imports (tree-shaking)
 41:         optimizePackageImports: [
 42:             '@heroicons/react', 
 43:             'lucide-react',
 44:             '@tanstack/react-query',
 45:             'react-hot-toast',
 46:             'recharts',
 47:             'framer-motion'
 48:         ],
 49:     },
 50:     
 51:     eslint: {
 52:         ignoreDuringBuilds: true,
 53:     },
 54:     
 55:     typescript: {
 56:         ignoreBuildErrors: process.env.DISABLE_TYPECHECK === 'true',
 57:     },
 58:     
 59:     webpack: (config, { isServer, dev }) => {
 60:         // Avoid bundling optional 'canvas' dependency
 61:         config.resolve = config.resolve || {}
 62:         config.resolve.alias = config.resolve.alias || {}
 63:         config.resolve.alias['canvas'] = false
 64:         
 65:         if (isServer) {
 66:             config.externals = config.externals || []
 67:             config.externals.push({ canvas: 'commonjs canvas' })
 68:         }
 69:         
 70:         // Mobile-specific optimizations
 71:         if (!dev) {
 72:             // Bundle splitting for mobile (max 200KB per chunk)
 73:             config.optimization = config.optimization || {}
 74:             config.optimization.splitChunks = {
 75:                 chunks: 'all',
 76:                 cacheGroups: {
 77:                     default: false,
 78:                     vendors: false,
 79:                     // Vendor chunk
 80:                     vendor: {
 81:                         name: 'vendor',
 82:                         chunks: 'all',
 83:                         test: /node_modules/,
 84:                         priority: 20,
 85:                         maxSize: 200000, // 200KB
 86:                     },
 87:                     // Common chunk
 88:                     common: {
 89:                         name: 'common',
 90:                         minChunks: 2,
 91:                         chunks: 'all',
 92:                         priority: 10,
 93:                         reuseExistingChunk: true,
 94:                         enforce: true,
 95:                         maxSize: 200000, // 200KB
 96:                     },
 97:                     // React chunk
 98:                     react: {
 99:                         name: 'react',
100:                         test: /[\\/]node_modules[\\/](react|react-dom|scheduler)[\\/]/,
101:                         chunks: 'all',
102:                         priority: 30,
103:                     },
104:                     // UI libraries chunk
105:                     ui: {
106:                         name: 'ui',
107:                         test: /[\\/]node_modules[\\/](framer-motion|lucide-react)[\\/]/,
108:                         chunks: 'all',
109:                         priority: 25,
110:                         maxSize: 200000,
111:                     }
112:                 }
113:             }
114:             
115:             // Minimize bundle size
116:             config.optimization.minimize = true
117:             
118:             // Remove console logs in production
119:             if (config.optimization.minimizer) {
120:                 config.optimization.minimizer.forEach(minimizer => {
121:                     if (minimizer.constructor.name === 'TerserPlugin') {
122:                         minimizer.options.terserOptions = minimizer.options.terserOptions || {}
123:                         minimizer.options.terserOptions.compress = minimizer.options.terserOptions.compress || {}
124:                         minimizer.options.terserOptions.compress.drop_console = true
125:                     }
126:                 })
127:             }
128:         }
129:         
130:         return config
131:     }
132: }
133: 
134: module.exports = nextConfig
</file>

<file path="postcss.config.js">
1: module.exports = {
2:     plugins: {
3:         tailwindcss: {},
4:         autoprefixer: {},
5:     },
6: }
</file>

<file path="public/sw.js">
 1: const CACHE_NAME = 'careerlever-cache-v1';
 2: const ASSETS = [
 3:   '/',
 4:   '/manifest.json'
 5: ];
 6: 
 7: self.addEventListener('install', (event) => {
 8:   event.waitUntil(
 9:     caches.open(CACHE_NAME).then((cache) => cache.addAll(ASSETS))
10:   );
11: });
12: 
13: self.addEventListener('activate', (event) => {
14:   event.waitUntil(
15:     caches.keys().then((keys) => Promise.all(keys.filter(k => k !== CACHE_NAME).map(k => caches.delete(k))))
16:   );
17: });
18: 
19: self.addEventListener('fetch', (event) => {
20:   const req = event.request;
21:   // Only cache GET requests
22:   if (req.method !== 'GET') return;
23:   event.respondWith(
24:     caches.match(req).then((cached) => {
25:       if (cached) return cached;
26:       return fetch(req).then((res) => {
27:         const resClone = res.clone();
28:         caches.open(CACHE_NAME).then((cache) => cache.put(req, resClone)).catch(()=>{});
29:         return res;
30:       }).catch(() => cached);
31:     })
32:   );
33: });
</file>

<file path="scripts/build-mobile.js">
 1: #!/usr/bin/env node
 2: 
 3: /**
 4:  * Mobile Build Script
 5:  * Temporarily switches to mobile config, builds, then restores
 6:  */
 7: 
 8: const fs = require('fs');
 9: const { execSync } = require('child_process');
10: const path = require('path');
11: 
12: const rootDir = path.join(__dirname, '..');
13: const mainConfig = path.join(rootDir, 'next.config.js');
14: const mobileConfig = path.join(rootDir, 'next.config.mobile.js');
15: const backupConfig = path.join(rootDir, 'next.config.backup.js');
16: 
17: console.log('📱 Starting mobile build...\n');
18: 
19: try {
20:   // Step 1: Backup current config
21:   console.log('1️⃣  Backing up next.config.js...');
22:   fs.copyFileSync(mainConfig, backupConfig);
23:   console.log('✅ Backup created\n');
24: 
25:   // Step 2: Replace with mobile config
26:   console.log('2️⃣  Switching to mobile configuration...');
27:   fs.copyFileSync(mobileConfig, mainConfig);
28:   console.log('✅ Mobile config active\n');
29: 
30:   // Step 3: Build
31:   console.log('3️⃣  Building Next.js app for mobile...');
32:   execSync('next build', { stdio: 'inherit', cwd: rootDir });
33:   console.log('✅ Build complete\n');
34: 
35:   // Step 4: Restore original config
36:   console.log('4️⃣  Restoring original configuration...');
37:   fs.copyFileSync(backupConfig, mainConfig);
38:   fs.unlinkSync(backupConfig);
39:   console.log('✅ Configuration restored\n');
40: 
41:   console.log('🎉 Mobile build successful!');
42:   console.log('📁 Output directory: ./out');
43:   console.log('🔄 Run "npx cap sync" to sync with Capacitor\n');
44: 
45: } catch (error) {
46:   // Restore config even if build fails
47:   if (fs.existsSync(backupConfig)) {
48:     console.error('\n❌ Build failed! Restoring configuration...');
49:     fs.copyFileSync(backupConfig, mainConfig);
50:     fs.unlinkSync(backupConfig);
51:     console.log('✅ Configuration restored\n');
52:   }
53:   
54:   console.error('Error:', error.message);
55:   process.exit(1);
56: }
</file>

<file path="scripts/check-env.js">
 1: #!/usr/bin/env node
 2: 
 3: const requiredEnvVars = {
 4:   production: [
 5:     'MONGODB_URI',
 6:     'NEXTAUTH_SECRET',
 7:     'NEXTAUTH_URL',
 8:     'PERPLEXITY_API_KEY',
 9:     'REDIS_URL'
10:   ],
11:   development: [
12:     'MONGODB_URI',
13:     'NEXTAUTH_SECRET',
14:     'NEXTAUTH_URL',
15:     'PERPLEXITY_API_KEY'
16:   ]
17: };
18: 
19: const env = process.env.NODE_ENV || 'development';
20: const required = requiredEnvVars[env] || requiredEnvVars.development;
21: 
22: console.log(`🔍 Checking environment variables for: ${env}\n`);
23: 
24: const missing = [];
25: const present = [];
26: 
27: for (const varName of required) {
28:   if (!process.env[varName]) {
29:     missing.push(varName);
30:     console.log(`❌ ${varName}`);
31:   } else {
32:     present.push(varName);
33:     const value = process.env[varName];
34:     const preview = value.length > 20 ? value.substring(0, 20) + '...' : value;
35:     console.log(`✅ ${varName} (${preview})`);
36:   }
37: }
38: 
39: console.log(`\n📊 Summary: ${present.length}/${required.length} present`);
40: 
41: if (missing.length > 0) {
42:   console.error(`\n❌ Missing required environment variables:`);
43:   missing.forEach(v => console.error(`   - ${v}`));
44:   console.error('\n💡 Tip: Create a .env file with these variables or set them in your deployment platform');
45:   process.exit(1);
46: }
47: 
48: console.log('\n✅ All required environment variables are set!');
</file>

<file path="scripts/generate-icons.js">
  1: #!/usr/bin/env node
  2: 
  3: /**
  4:  * App Icon Generator Script
  5:  * Converts SVG icon to all required iOS and Android sizes
  6:  * 
  7:  * Prerequisites:
  8:  * - npm install -g sharp-cli (for PNG conversion)
  9:  * OR
 10:  * - Use online tool: https://appicon.co
 11:  * 
 12:  * This script provides instructions and file structure
 13:  */
 14: 
 15: const fs = require('fs');
 16: const path = require('path');
 17: 
 18: console.log('📱 Career Lever AI - App Icon Generator\n');
 19: 
 20: // Icon sizes required
 21: const iosSizes = [
 22:   { size: 20, scale: 1, name: 'AppIcon-20x20@1x.png' },
 23:   { size: 20, scale: 2, name: 'AppIcon-20x20@2x.png' },
 24:   { size: 20, scale: 3, name: 'AppIcon-20x20@3x.png' },
 25:   { size: 29, scale: 1, name: 'AppIcon-29x29@1x.png' },
 26:   { size: 29, scale: 2, name: 'AppIcon-29x29@2x.png' },
 27:   { size: 29, scale: 3, name: 'AppIcon-29x29@3x.png' },
 28:   { size: 40, scale: 1, name: 'AppIcon-40x40@1x.png' },
 29:   { size: 40, scale: 2, name: 'AppIcon-40x40@2x.png' },
 30:   { size: 40, scale: 3, name: 'AppIcon-40x40@3x.png' },
 31:   { size: 60, scale: 2, name: 'AppIcon-60x60@2x.png' },
 32:   { size: 60, scale: 3, name: 'AppIcon-60x60@3x.png' },
 33:   { size: 76, scale: 1, name: 'AppIcon-76x76@1x.png' },
 34:   { size: 76, scale: 2, name: 'AppIcon-76x76@2x.png' },
 35:   { size: 83.5, scale: 2, name: 'AppIcon-83.5x83.5@2x.png' },
 36:   { size: 1024, scale: 1, name: 'AppIcon-1024x1024@1x.png' }
 37: ];
 38: 
 39: const androidSizes = [
 40:   { density: 'mdpi', size: 48, folder: 'mipmap-mdpi' },
 41:   { density: 'hdpi', size: 72, folder: 'mipmap-hdpi' },
 42:   { density: 'xhdpi', size: 96, folder: 'mipmap-xhdpi' },
 43:   { density: 'xxhdpi', size: 144, folder: 'mipmap-xxhdpi' },
 44:   { density: 'xxxhdpi', size: 192, folder: 'mipmap-xxxhdpi' }
 45: ];
 46: 
 47: console.log('📋 Required Icon Sizes:\n');
 48: 
 49: console.log('iOS (15 sizes):');
 50: iosSizes.forEach(icon => {
 51:   const actualSize = icon.size * icon.scale;
 52:   console.log(`  - ${actualSize}x${actualSize} (${icon.name})`);
 53: });
 54: 
 55: console.log('\nAndroid (5 densities):');
 56: androidSizes.forEach(icon => {
 57:   console.log(`  - ${icon.size}x${icon.size} (${icon.folder}/ic_launcher.png)`);
 58: });
 59: 
 60: console.log('\n📁 Source Icon Location:');
 61: console.log('  public/icon-512.svg (Career Lever AI logo)\n');
 62: 
 63: console.log('🛠️  Generation Options:\n');
 64: 
 65: console.log('Option 1: Online Tool (Easiest)');
 66: console.log('  1. Go to https://appicon.co');
 67: console.log('  2. Upload public/icon-512.svg');
 68: console.log('  3. Select iOS and Android');
 69: console.log('  4. Download generated packages');
 70: console.log('  5. Extract to ios/ and android/ directories\n');
 71: 
 72: console.log('Option 2: Manual Conversion');
 73: console.log('  1. Convert SVG to 1024x1024 PNG');
 74: console.log('  2. Use image editor to resize for each size');
 75: console.log('  3. Save to appropriate directories\n');
 76: 
 77: console.log('Option 3: Sharp CLI (Automated)');
 78: console.log('  npm install -g sharp-cli');
 79: console.log('  Then run this script with --generate flag\n');
 80: 
 81: console.log('📂 Installation Directories:\n');
 82: console.log('iOS:');
 83: console.log('  ios/App/App/Assets.xcassets/AppIcon.appiconset/\n');
 84: console.log('Android:');
 85: androidSizes.forEach(icon => {
 86:   console.log(`  android/app/src/main/res/${icon.folder}/ic_launcher.png`);
 87: });
 88: 
 89: console.log('\n✅ Next Steps:');
 90: console.log('  1. Choose a generation option above');
 91: console.log('  2. Generate all required sizes');
 92: console.log('  3. Copy files to installation directories');
 93: console.log('  4. Verify in Xcode and Android Studio');
 94: console.log('  5. Test on simulators/emulators\n');
 95: 
 96: console.log('📝 Icon Checklist:');
 97: console.log('  [ ] Generate 1024x1024 master PNG from SVG');
 98: console.log('  [ ] Generate all 15 iOS sizes');
 99: console.log('  [ ] Generate all 5 Android sizes');
100: console.log('  [ ] Copy to iOS directory');
101: console.log('  [ ] Copy to Android directories');
102: console.log('  [ ] Verify in Xcode');
103: console.log('  [ ] Verify in Android Studio');
104: console.log('  [ ] Test on iOS simulator');
105: console.log('  [ ] Test on Android emulator\n');
106: 
107: console.log('💡 Tip: The existing icon-512.svg is perfect for conversion!');
108: console.log('   It has a professional design with Career Lever AI branding.\n');
109: 
110: // Check if directories exist
111: const iosIconDir = path.join(__dirname, '..', 'ios', 'App', 'App', 'Assets.xcassets', 'AppIcon.appiconset');
112: const androidResDir = path.join(__dirname, '..', 'android', 'app', 'src', 'main', 'res');
113: 
114: if (fs.existsSync(iosIconDir)) {
115:   console.log('✅ iOS icon directory exists');
116: } else {
117:   console.log('⚠️  iOS icon directory not found');
118: }
119: 
120: if (fs.existsSync(androidResDir)) {
121:   console.log('✅ Android resource directory exists');
122: } else {
123:   console.log('⚠️  Android resource directory not found');
124: }
125: 
126: console.log('\n🎯 Recommended: Use https://appicon.co for fastest results!');
</file>

<file path="scripts/test-endpoints.js">
  1: #!/usr/bin/env node
  2: 
  3: /**
  4:  * Automated Endpoint Health Check Script
  5:  * Tests all critical API endpoints and user flows
  6:  */
  7: 
  8: const https = require('https')
  9: const http = require('http')
 10: 
 11: const BASE_URL = process.env.NEXTAUTH_URL || 'http://localhost:3000'
 12: const IS_HTTPS = BASE_URL.startsWith('https')
 13: const requestModule = IS_HTTPS ? https : http
 14: 
 15: // Color codes for terminal output
 16: const colors = {
 17:   reset: '\x1b[0m',
 18:   green: '\x1b[32m',
 19:   red: '\x1b[31m',
 20:   yellow: '\x1b[33m',
 21:   blue: '\x1b[36m',
 22:   gray: '\x1b[90m'
 23: }
 24: 
 25: function log(message, color = 'reset') {
 26:   console.log(`${colors[color]}${message}${colors.reset}`)
 27: }
 28: 
 29: function makeRequest(path, method = 'GET', data = null) {
 30:   return new Promise((resolve, reject) => {
 31:     const url = new URL(path, BASE_URL)
 32:     const options = {
 33:       method,
 34:       headers: {
 35:         'Content-Type': 'application/json',
 36:         'User-Agent': 'CareerLever-HealthCheck/1.0'
 37:       }
 38:     }
 39: 
 40:     const req = requestModule.request(url, options, (res) => {
 41:       let body = ''
 42:       res.on('data', chunk => body += chunk)
 43:       res.on('end', () => {
 44:         resolve({
 45:           status: res.statusCode,
 46:           headers: res.headers,
 47:           body: body
 48:         })
 49:       })
 50:     })
 51: 
 52:     req.on('error', reject)
 53:     
 54:     if (data) {
 55:       req.write(JSON.stringify(data))
 56:     }
 57:     
 58:     req.end()
 59:   })
 60: }
 61: 
 62: async function testEndpoint(name, path, expectedStatus = 200) {
 63:   try {
 64:     const start = Date.now()
 65:     const response = await makeRequest(path)
 66:     const duration = Date.now() - start
 67: 
 68:     if (response.status === expectedStatus) {
 69:       log(`✅ ${name}: ${response.status} (${duration}ms)`, 'green')
 70:       return { passed: true, duration, status: response.status }
 71:     } else {
 72:       log(`❌ ${name}: Expected ${expectedStatus}, got ${response.status} (${duration}ms)`, 'red')
 73:       return { passed: false, duration, status: response.status, expected: expectedStatus }
 74:     }
 75:   } catch (error) {
 76:     log(`❌ ${name}: ${error.message}`, 'red')
 77:     return { passed: false, error: error.message }
 78:   }
 79: }
 80: 
 81: async function runTests() {
 82:   log('\n🧪 Career Lever AI - Endpoint Health Check\n', 'blue')
 83:   log(`Testing: ${BASE_URL}`, 'gray')
 84:   log('─'.repeat(60), 'gray')
 85: 
 86:   const results = {
 87:     total: 0,
 88:     passed: 0,
 89:     failed: 0,
 90:     totalDuration: 0
 91:   }
 92: 
 93:   const tests = [
 94:     // Public endpoints
 95:     { name: 'Health Check', path: '/api/health', expectedStatus: 200 },
 96:     { name: 'Home Page', path: '/', expectedStatus: 200 },
 97:     { name: 'Sign In Page', path: '/auth/signin', expectedStatus: 200 },
 98:     { name: 'Sign Up Page', path: '/auth/signup', expectedStatus: 200 },
 99:     
100:     // API endpoints (should return 401 for unauthenticated)
101:     { name: 'Dashboard API (Auth Required)', path: '/api/analytics/dashboard', expectedStatus: 401 },
102:     { name: 'Resume List API (Auth Required)', path: '/api/resume/list', expectedStatus: 401 },
103:     { name: 'Applications API (Auth Required)', path: '/api/applications', expectedStatus: 401 },
104:     
105:     // Admin endpoints (should also be protected)
106:     { name: 'AI Stats API (Auth Required)', path: '/api/admin/ai-service/stats', expectedStatus: 401 },
107:     { name: 'Cache Stats API (Auth Required)', path: '/api/admin/cache/stats', expectedStatus: 401 },
108:     { name: 'Performance Stats API (Auth Required)', path: '/api/admin/performance/stats', expectedStatus: 401 },
109:   ]
110: 
111:   log('\n📊 Running Tests...\n', 'blue')
112: 
113:   for (const test of tests) {
114:     const result = await testEndpoint(test.name, test.path, test.expectedStatus)
115:     results.total++
116:     if (result.passed) {
117:       results.passed++
118:     } else {
119:       results.failed++
120:     }
121:     if (result.duration) {
122:       results.totalDuration += result.duration
123:     }
124:   }
125: 
126:   // Summary
127:   log('\n' + '─'.repeat(60), 'gray')
128:   log('\n📈 Test Summary:\n', 'blue')
129:   log(`Total Tests: ${results.total}`, 'gray')
130:   log(`Passed: ${results.passed}`, results.passed === results.total ? 'green' : 'yellow')
131:   log(`Failed: ${results.failed}`, results.failed > 0 ? 'red' : 'green')
132:   log(`Average Response Time: ${Math.round(results.totalDuration / results.total)}ms`, 'gray')
133:   log(`Total Duration: ${results.totalDuration}ms`, 'gray')
134: 
135:   if (results.failed > 0) {
136:     log('\n❌ Some tests failed. Please review the output above.', 'red')
137:     process.exit(1)
138:   } else {
139:     log('\n✅ All tests passed!', 'green')
140:     process.exit(0)
141:   }
142: }
143: 
144: // Additional test: Check rate limiting
145: async function testRateLimiting() {
146:   log('\n🔒 Testing Rate Limiting...\n', 'blue')
147:   
148:   const results = []
149:   const testPath = '/api/health'
150:   
151:   // Make 10 rapid requests
152:   for (let i = 0; i < 10; i++) {
153:     try {
154:       const response = await makeRequest(testPath)
155:       results.push(response.status)
156:       
157:       if (response.headers['x-ratelimit-remaining']) {
158:         log(`Request ${i + 1}: ${response.status} (Remaining: ${response.headers['x-ratelimit-remaining']})`, 'gray')
159:       } else {
160:         log(`Request ${i + 1}: ${response.status}`, 'gray')
161:       }
162:     } catch (error) {
163:       log(`Request ${i + 1}: Error - ${error.message}`, 'red')
164:     }
165:   }
166:   
167:   const has429 = results.includes(429)
168:   if (has429) {
169:     log('\n✅ Rate limiting is working (429 detected)', 'green')
170:   } else {
171:     log('\n⚠️  No 429 detected in 10 rapid requests (may be too lenient)', 'yellow')
172:   }
173: }
174: 
175: // Run all tests
176: (async () => {
177:   try {
178:     await runTests()
179:     // Optionally test rate limiting
180:     // await testRateLimiting()
181:   } catch (error) {
182:     log(`\n❌ Fatal error: ${error.message}`, 'red')
183:     process.exit(1)
184:   }
185: })()
</file>

<file path="src/app/api/admin/ai-service/stats/route.ts">
 1: import { NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import { EnterpriseAIService } from '@/lib/ai-service-enterprise'
 5: import { Logger } from '@/lib/logger'
 6: 
 7: export const runtime = 'nodejs'
 8: export const dynamic = 'force-dynamic'
 9: 
10: const logger = Logger.getInstance()
11: 
12: export async function GET() {
13:   try {
14:     const session = await getServerSession(authOptions)
15:     
16:     // Only allow authenticated admin users
17:     if (!session?.user?.email) {
18:       return NextResponse.json(
19:         { error: 'Unauthorized' },
20:         { status: 401 }
21:       )
22:     }
23: 
24:     const aiService = EnterpriseAIService.getInstance()
25:     const stats = aiService.getStats()
26: 
27:     logger.info('AI Service Stats retrieved', { 
28:       endpoint: '/api/admin/ai-service/stats',
29:       user: session.user.email
30:     })
31: 
32:     return NextResponse.json({
33:       success: true,
34:       stats,
35:       timestamp: new Date().toISOString()
36:     })
37: 
38:   } catch (error) {
39:     logger.error('Failed to fetch AI service stats', {
40:       error: error instanceof Error ? error.message : 'Unknown error',
41:       endpoint: '/api/admin/ai-service/stats'
42:     })
43: 
44:     return NextResponse.json(
45:       { error: 'Failed to fetch AI service stats' },
46:       { status: 500 }
47:     )
48:   }
49: }
50: 
51: export async function DELETE() {
52:   try {
53:     const session = await getServerSession(authOptions)
54:     
55:     if (!session?.user?.email) {
56:       return NextResponse.json(
57:         { error: 'Unauthorized' },
58:         { status: 401 }
59:       )
60:     }
61: 
62:     const aiService = EnterpriseAIService.getInstance()
63:     aiService.clearCache()
64: 
65:     logger.info('AI Service cache cleared', {
66:       endpoint: '/api/admin/ai-service/stats',
67:       user: session.user.email
68:     })
69: 
70:     return NextResponse.json({
71:       success: true,
72:       message: 'AI service cache cleared'
73:     })
74: 
75:   } catch (error) {
76:     logger.error('Failed to clear AI service cache', {
77:       error: error instanceof Error ? error.message : 'Unknown error',
78:       endpoint: '/api/admin/ai-service/stats'
79:     })
80: 
81:     return NextResponse.json(
82:       { error: 'Failed to clear cache' },
83:       { status: 500 }
84:     )
85:   }
86: }
</file>

<file path="src/app/api/admin/cache/stats/route.ts">
 1: import { NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import { RedisCache } from '@/lib/redis-cache'
 5: import { Logger } from '@/lib/logger'
 6: 
 7: export const runtime = 'nodejs'
 8: export const dynamic = 'force-dynamic'
 9: 
10: const logger = Logger.getInstance()
11: 
12: export async function GET() {
13:   try {
14:     const session = await getServerSession(authOptions)
15:     
16:     // Only allow authenticated admin users
17:     if (!session?.user?.email) {
18:       return NextResponse.json(
19:         { error: 'Unauthorized' },
20:         { status: 401 }
21:       )
22:     }
23: 
24:     const cache = RedisCache.getInstance()
25:     const stats = await cache.getStats()
26: 
27:     logger.info('Cache stats retrieved', { 
28:       user: session.user.email,
29:       connected: stats.connected
30:     })
31: 
32:     return NextResponse.json({
33:       success: true,
34:       stats,
35:       timestamp: new Date().toISOString()
36:     })
37: 
38:   } catch (error) {
39:     logger.error('Failed to fetch cache stats', {
40:       error: error instanceof Error ? error.message : 'Unknown error'
41:     })
42: 
43:     return NextResponse.json(
44:       { error: 'Failed to fetch cache stats' },
45:       { status: 500 }
46:     )
47:   }
48: }
49: 
50: export async function DELETE() {
51:   try {
52:     const session = await getServerSession(authOptions)
53:     
54:     if (!session?.user?.email) {
55:       return NextResponse.json(
56:         { error: 'Unauthorized' },
57:         { status: 401 }
58:       )
59:     }
60: 
61:     const cache = RedisCache.getInstance()
62:     const success = await cache.flush()
63: 
64:     if (success) {
65:       logger.warn('Cache flushed', {
66:         user: session.user.email
67:       })
68: 
69:       return NextResponse.json({
70:         success: true,
71:         message: 'Cache cleared successfully'
72:       })
73:     } else {
74:       return NextResponse.json({
75:         success: false,
76:         message: 'Cache is not available'
77:       }, { status: 503 })
78:     }
79: 
80:   } catch (error) {
81:     logger.error('Failed to flush cache', {
82:       error: error instanceof Error ? error.message : 'Unknown error'
83:     })
84: 
85:     return NextResponse.json(
86:       { error: 'Failed to clear cache' },
87:       { status: 500 }
88:     )
89:   }
90: }
</file>

<file path="src/app/api/admin/errors/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import { authOptions } from '@/lib/auth'
  4: import { errorTracker } from '@/lib/error-tracking'
  5: 
  6: export const runtime = 'nodejs'
  7: export const dynamic = 'force-dynamic'
  8: 
  9: /**
 10:  * GET /api/admin/errors
 11:  * Retrieve error statistics and recent errors
 12:  */
 13: export async function GET(request: NextRequest) {
 14:   try {
 15:     // Check authentication
 16:     const session = await getServerSession(authOptions)
 17:     if (!session?.user) {
 18:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 19:     }
 20: 
 21:     const { searchParams } = new URL(request.url)
 22:     const context = searchParams.get('context') || undefined
 23:     const severity = searchParams.get('severity') || undefined
 24:     const limit = parseInt(searchParams.get('limit') || '50')
 25:     const since = searchParams.get('since') ? parseInt(searchParams.get('since')!) : undefined
 26: 
 27:     const stats = errorTracker.getStats()
 28:     const errors = errorTracker.getErrors({
 29:       context,
 30:       severity,
 31:       limit,
 32:       since
 33:     })
 34: 
 35:     return NextResponse.json({
 36:       success: true,
 37:       stats,
 38:       errors,
 39:       filters: {
 40:         context,
 41:         severity,
 42:         limit,
 43:         since
 44:       }
 45:     })
 46:   } catch (error) {
 47:     console.error('[API] Error tracking fetch failed:', error)
 48:     return NextResponse.json(
 49:       { error: 'Failed to fetch error data', details: (error as Error).message },
 50:       { status: 500 }
 51:     )
 52:   }
 53: }
 54: 
 55: /**
 56:  * DELETE /api/admin/errors
 57:  * Clear error logs
 58:  */
 59: export async function DELETE(request: NextRequest) {
 60:   try {
 61:     // Check authentication
 62:     const session = await getServerSession(authOptions)
 63:     if (!session?.user) {
 64:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 65:     }
 66: 
 67:     const { searchParams } = new URL(request.url)
 68:     const olderThan = searchParams.get('olderThan')
 69: 
 70:     if (olderThan) {
 71:       const ageMs = parseInt(olderThan)
 72:       const cleared = errorTracker.clearOlderThan(ageMs)
 73:       return NextResponse.json({
 74:         success: true,
 75:         message: `Cleared ${cleared} errors older than ${Math.round(ageMs / 3600000)}h`
 76:       })
 77:     } else {
 78:       errorTracker.clearAll()
 79:       return NextResponse.json({
 80:         success: true,
 81:         message: 'All errors cleared'
 82:       })
 83:     }
 84:   } catch (error) {
 85:     console.error('[API] Error tracking clear failed:', error)
 86:     return NextResponse.json(
 87:       { error: 'Failed to clear errors', details: (error as Error).message },
 88:       { status: 500 }
 89:     )
 90:   }
 91: }
 92: 
 93: /**
 94:  * POST /api/admin/errors
 95:  * Manually track an error (for client-side error reporting)
 96:  */
 97: export async function POST(request: NextRequest) {
 98:   try {
 99:     const body = await request.json()
100:     const { message, context, severity, metadata } = body
101: 
102:     if (!message) {
103:       return NextResponse.json({ error: 'Message is required' }, { status: 400 })
104:     }
105: 
106:     const errorId = errorTracker.trackError(message, {
107:       context: context || 'client',
108:       severity: severity || 'medium',
109:       url: request.headers.get('referer') || undefined,
110:       userAgent: request.headers.get('user-agent') || undefined,
111:       metadata
112:     })
113: 
114:     return NextResponse.json({
115:       success: true,
116:       errorId,
117:       message: 'Error tracked successfully'
118:     })
119:   } catch (error) {
120:     console.error('[API] Error tracking failed:', error)
121:     return NextResponse.json(
122:       { error: 'Failed to track error', details: (error as Error).message },
123:       { status: 500 }
124:     )
125:   }
126: }
</file>

<file path="src/app/api/admin/monitoring/dashboard/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import { authOptions } from '@/lib/auth'
  4: import { PerformanceMonitor } from '@/lib/performance-monitor'
  5: import { EnterpriseAIService } from '@/lib/ai-service-enterprise'
  6: import { RedisCache } from '@/lib/redis-cache'
  7: import { HealthCheckService } from '@/lib/health-check'
  8: 
  9: /**
 10:  * Admin Monitoring Dashboard API
 11:  * Provides comprehensive system health and performance metrics
 12:  */
 13: 
 14: export const runtime = 'nodejs'
 15: export const dynamic = 'force-dynamic'
 16: 
 17: interface SystemMetrics {
 18:   timestamp: string
 19:   health: {
 20:     overall: 'healthy' | 'degraded' | 'unhealthy'
 21:     services: any
 22:     uptime: number
 23:   }
 24:   performance: {
 25:     api: any
 26:     responseTime: {
 27:       avg: number
 28:       p95: number
 29:       p99: number
 30:     }
 31:   }
 32:   ai: {
 33:     stats: any
 34:     cacheHitRate: number
 35:   }
 36:   cache: {
 37:     redis: any
 38:     hitRate: number
 39:   }
 40:   errors: {
 41:     last24h: number
 42:     last1h: number
 43:     topErrors: Array<{ message: string; count: number }>
 44:   }
 45: }
 46: 
 47: export async function GET(request: NextRequest) {
 48:   try {
 49:     // Check authentication (admin only)
 50:     const session = await getServerSession(authOptions)
 51:     if (!session?.user) {
 52:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 53:     }
 54: 
 55:     // Gather all metrics
 56:     const healthCheckService = HealthCheckService.getInstance()
 57:     const healthCheck = await healthCheckService.performHealthCheck()
 58:     const perfMonitor = PerformanceMonitor.getInstance()
 59:     const aiService = EnterpriseAIService.getInstance()
 60:     const redisCache = RedisCache.getInstance()
 61: 
 62:     const performanceStats = perfMonitor.getAPIStats()
 63:     const aiStats = aiService.getStats()
 64:     const cacheStats = await redisCache.getStats()
 65: 
 66:     // Calculate aggregate metrics
 67:     const apiMetrics: any[] = Object.values(performanceStats)
 68:     const avgResponseTime = apiMetrics.length > 0
 69:       ? apiMetrics.reduce((sum: number, m: any) => sum + (m.avgDuration || 0), 0) / apiMetrics.length
 70:       : 0
 71: 
 72:     const durations = apiMetrics.map((m: any) => m.avgDuration || 0).sort((a, b) => a - b)
 73:     const p95ResponseTime = durations.length > 0
 74:       ? durations[Math.min(Math.floor(durations.length * 0.95), durations.length - 1)] || 0
 75:       : 0
 76: 
 77:     const p99ResponseTime = durations.length > 0
 78:       ? durations[Math.min(Math.floor(durations.length * 0.99), durations.length - 1)] || 0
 79:       : 0
 80: 
 81:     const metrics: SystemMetrics = {
 82:       timestamp: new Date().toISOString(),
 83:       health: {
 84:         overall: healthCheck.status,
 85:         services: healthCheck.services,
 86:         uptime: process.uptime()
 87:       },
 88:       performance: {
 89:         api: performanceStats,
 90:         responseTime: {
 91:           avg: Math.round(avgResponseTime),
 92:           p95: Math.round(p95ResponseTime),
 93:           p99: Math.round(p99ResponseTime)
 94:         }
 95:       },
 96:       ai: {
 97:         stats: aiStats,
 98:         cacheHitRate: aiStats.cacheHitRate || 0
 99:       },
100:       cache: {
101:         redis: cacheStats,
102:         hitRate: cacheStats.hitRate || 0
103:       },
104:       errors: {
105:         last24h: 0, // TODO: Implement error tracking
106:         last1h: 0,
107:         topErrors: []
108:       }
109:     }
110: 
111:     return NextResponse.json({
112:       success: true,
113:       metrics,
114:       recommendations: generateRecommendations(metrics)
115:     })
116:   } catch (error) {
117:     console.error('[MONITORING] Dashboard error:', error)
118:     return NextResponse.json(
119:       { error: 'Failed to fetch monitoring data', details: (error as Error).message },
120:       { status: 500 }
121:     )
122:   }
123: }
124: 
125: function generateRecommendations(metrics: SystemMetrics): string[] {
126:   const recommendations: string[] = []
127: 
128:   // Performance recommendations
129:   if (metrics.performance.responseTime.avg > 1000) {
130:     recommendations.push('⚠️ Average API response time is high (>1s). Consider optimizing slow endpoints.')
131:   }
132: 
133:   if (metrics.performance.responseTime.p99 > 3000) {
134:     recommendations.push('🔴 P99 response time is very high (>3s). Investigate slowest endpoints.')
135:   }
136: 
137:   // AI service recommendations
138:   if (metrics.ai.cacheHitRate < 0.5) {
139:     recommendations.push('💡 AI cache hit rate is low (<50%). Consider increasing cache TTL or improving cache keys.')
140:   }
141: 
142:   if (metrics.ai.stats.circuitBreakerTrips > 10) {
143:     recommendations.push('🔴 AI service circuit breaker has tripped multiple times. Check Perplexity API health.')
144:   }
145: 
146:   // Cache recommendations
147:   if (metrics.cache.hitRate < 0.6) {
148:     recommendations.push('💡 Redis cache hit rate is low (<60%). Review caching strategy.')
149:   }
150: 
151:   // Health recommendations
152:   if (metrics.health.overall === 'degraded') {
153:     recommendations.push('⚠️ System health is degraded. Check individual service statuses.')
154:   }
155: 
156:   if (metrics.health.overall === 'unhealthy') {
157:     recommendations.push('🔴 System is unhealthy! Immediate attention required.')
158:   }
159: 
160:   // Error recommendations
161:   if (metrics.errors.last1h > 50) {
162:     recommendations.push('🔴 High error rate in last hour (>50). Investigate immediately.')
163:   }
164: 
165:   if (recommendations.length === 0) {
166:     recommendations.push('✅ All systems operating normally. No immediate action required.')
167:   }
168: 
169:   return recommendations
170: }
</file>

<file path="src/app/api/admin/performance/stats/route.ts">
 1: import { NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerformanceMonitor } from '@/lib/performance-monitor'
 5: import { Logger } from '@/lib/logger'
 6: 
 7: export const runtime = 'nodejs'
 8: export const dynamic = 'force-dynamic'
 9: 
10: const logger = Logger.getInstance()
11: 
12: export async function GET() {
13:   try {
14:     const session = await getServerSession(authOptions)
15:     
16:     // Only allow authenticated admin users
17:     if (!session?.user?.email) {
18:       return NextResponse.json(
19:         { error: 'Unauthorized' },
20:         { status: 401 }
21:       )
22:     }
23: 
24:     const monitor = PerformanceMonitor.getInstance()
25:     const stats = monitor.getAPIStats()
26:     const slowest = monitor.getSlowestEndpoints(10)
27: 
28:     logger.info('Performance stats retrieved', { 
29:       user: session.user.email
30:     })
31: 
32:     return NextResponse.json({
33:       success: true,
34:       stats,
35:       slowestEndpoints: slowest,
36:       timestamp: new Date().toISOString()
37:     })
38: 
39:   } catch (error) {
40:     logger.error('Failed to fetch performance stats', {
41:       error: error instanceof Error ? error.message : 'Unknown error'
42:     })
43: 
44:     return NextResponse.json(
45:       { error: 'Failed to fetch performance stats' },
46:       { status: 500 }
47:     )
48:   }
49: }
50: 
51: export async function DELETE() {
52:   try {
53:     const session = await getServerSession(authOptions)
54:     
55:     if (!session?.user?.email) {
56:       return NextResponse.json(
57:         { error: 'Unauthorized' },
58:         { status: 401 }
59:       )
60:     }
61: 
62:     const monitor = PerformanceMonitor.getInstance()
63:     monitor.cleanup()
64: 
65:     logger.info('Performance metrics cleaned up', {
66:       user: session.user.email
67:     })
68: 
69:     return NextResponse.json({
70:       success: true,
71:       message: 'Performance metrics cleaned up'
72:     })
73: 
74:   } catch (error) {
75:     logger.error('Failed to cleanup performance metrics', {
76:       error: error instanceof Error ? error.message : 'Unknown error'
77:     })
78: 
79:     return NextResponse.json(
80:       { error: 'Failed to cleanup metrics' },
81:       { status: 500 }
82:     )
83:   }
84: }
</file>

<file path="src/app/api/admin/perplexity-cache/clear/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 3: 
 4: export const dynamic = 'force-dynamic'
 5: 
 6: export async function POST(req: NextRequest) {
 7:   const secret = req.headers.get('x-debug-secret') || ''
 8:   if (!process.env.DEBUG_SECRET || secret !== process.env.DEBUG_SECRET) {
 9:     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
10:   }
11:   try {
12:     const body = await req.json().catch(()=>({})) as any
13:     const prefix = typeof body.prefix === 'string' ? body.prefix : undefined
14:     const cleared = PerplexityIntelligenceService.clearCache(prefix)
15:     return NextResponse.json({ success: true, cleared })
16:   } catch (e) {
17:     return NextResponse.json({ success: false, error: (e as Error).message }, { status: 500 })
18:   }
19: }
</file>

<file path="src/app/api/admin/perplexity-cache/stats/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 3: 
 4: export const dynamic = 'force-dynamic'
 5: 
 6: export async function GET(req: NextRequest) {
 7:   const secret = req.headers.get('x-debug-secret') || ''
 8:   if (!process.env.DEBUG_SECRET || secret !== process.env.DEBUG_SECRET) {
 9:     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
10:   }
11:   try {
12:     const stats = PerplexityIntelligenceService.getCacheStats()
13:     return NextResponse.json({ success: true, stats })
14:   } catch (e) {
15:     return NextResponse.json({ success: false, error: (e as Error).message }, { status: 500 })
16:   }
17: }
</file>

<file path="src/app/api/alerts/bootstrap/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Profile from '@/models/Profile'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     await connectToDatabase()
14:     const prof: any = await Profile.findOne({ userId: (session.user as any).id })
15:     const prefs = prof?.preferences || {}
16:     const current = prefs.alerts || {}
17:     const jobTitle = current.jobTitle || 'Software Engineer'
18:     const location = current.location || prof?.location || 'Remote'
19:     prefs.alerts = { jobTitle, location, frequency: 'daily' }
20:     await Profile.updateOne({ userId: (session.user as any).id }, { $set: { preferences: prefs } }, { upsert: true })
21:     return NextResponse.json({ success: true, alerts: prefs.alerts })
22:   } catch (e) {
23:     return NextResponse.json({ error: 'Failed to bootstrap alerts' }, { status: 500 })
24:   }
25: }
</file>

<file path="src/app/api/alerts/preferences/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import AlertPreference from '@/models/AlertPreference'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * GET /api/alerts/preferences - Get user's alert preferences
11:  */
12: export async function GET(request: NextRequest) {
13:   try {
14:     const session = await getServerSession(authOptions)
15:     if (!session?.user?.id) {
16:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
17:     }
18: 
19:     await connectToDatabase()
20:     
21:     let preferences = await AlertPreference.findOne({ userId: session.user.id })
22:     
23:     // Create default preferences if none exist
24:     if (!preferences) {
25:       preferences = await AlertPreference.create({
26:         userId: session.user.id,
27:         enabled: true,
28:         channels: {
29:           email: true,
30:           inApp: true,
31:           push: false
32:         },
33:         alertTypes: {
34:           newJobMatches: true,
35:           applicationUpdates: true,
36:           interviewReminders: true,
37:           followUpReminders: true,
38:           deadlineAlerts: true,
39:           responseTimeAlerts: false,
40:           networkActivity: false
41:         },
42:         frequency: 'realtime',
43:         quietHours: {
44:           enabled: false,
45:           start: '22:00',
46:           end: '08:00',
47:           timezone: 'America/Toronto'
48:         }
49:       })
50:     }
51: 
52:     return NextResponse.json({ preferences })
53:   } catch (error) {
54:     console.error('[ALERT_PREFERENCES] GET error:', error)
55:     return NextResponse.json(
56:       { error: 'Failed to get alert preferences' },
57:       { status: 500 }
58:     )
59:   }
60: }
61: 
62: /**
63:  * PATCH /api/alerts/preferences - Update user's alert preferences
64:  */
65: export async function PATCH(request: NextRequest) {
66:   try {
67:     const session = await getServerSession(authOptions)
68:     if (!session?.user?.id) {
69:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
70:     }
71: 
72:     const body = await request.json()
73:     const updates = body.preferences || body
74: 
75:     await connectToDatabase()
76:     
77:     const preferences = await AlertPreference.findOneAndUpdate(
78:       { userId: session.user.id },
79:       { $set: updates },
80:       { new: true, upsert: true }
81:     )
82: 
83:     return NextResponse.json({ 
84:       success: true,
85:       preferences 
86:     })
87:   } catch (error) {
88:     console.error('[ALERT_PREFERENCES] PATCH error:', error)
89:     return NextResponse.json(
90:       { error: 'Failed to update alert preferences' },
91:       { status: 500 }
92:     )
93:   }
94: }
</file>

<file path="src/app/api/alerts/run/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import connectToDatabase from '@/lib/mongodb'
 3: import Profile from '@/models/Profile'
 4: import { webScraper } from '@/lib/web-scraper'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function GET(_req: NextRequest) {
 9:   try {
10:     await connectToDatabase()
11:     const profiles: any[] = await Profile.find({ 'preferences.alerts': { $exists: true } }).lean()
12:     const after = new Date(Date.now() - 24*60*60*1000).toISOString().slice(0,10)
13:     const results: any[] = []
14:     for (const p of profiles) {
15:       const prefs = p.preferences?.alerts || {}
16:       if (!prefs.jobTitle) continue
17:       const found = await webScraper.searchJobsByGoogle({ jobTitle: prefs.jobTitle, location: prefs.location, after, limit: 10 })
18:       results.push({ userId: p.userId, count: found.length })
19:       // In production, send email/notification here
20:     }
21:     return NextResponse.json({ success: true, sent: results })
22:   } catch (e) {
23:     return NextResponse.json({ error: 'Failed to run alerts' }, { status: 500 })
24:   }
25: }
</file>

<file path="src/app/api/alerts/subscribe/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Profile from '@/models/Profile'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     const { jobTitle, location, frequency = 'daily' } = await req.json()
14:     await connectToDatabase()
15:     const prof: any = await Profile.findOne({ userId: (session.user as any).id })
16:     const prefs = prof?.preferences || {}
17:     prefs.alerts = { jobTitle, location, frequency }
18:     await Profile.updateOne({ userId: (session.user as any).id }, { $set: { preferences: prefs } }, { upsert: true })
19:     return NextResponse.json({ success: true })
20:   } catch (e) {
21:     return NextResponse.json({ error: 'Failed to subscribe' }, { status: 500 })
22:   }
23: }
</file>

<file path="src/app/api/analytics/ab/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import ABEvent from '@/models/ABEvent'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     await connectToDatabase()
14:     const { applicationId, resumeId, variant, action, meta } = await req.json()
15:     await ABEvent.create({ userId: (session.user as any).id, applicationId, resumeId, variant, action, meta })
16:     return NextResponse.json({ success: true })
17:   } catch (e) {
18:     return NextResponse.json({ error: 'Failed to log event' }, { status: 500 })
19:   }
20: }
21: 
22: export async function GET(req: NextRequest) {
23:   try {
24:     const session = await getServerSession(authOptions)
25:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
26:     await connectToDatabase()
27:     const url = new URL(req.url)
28:     const applicationId = url.searchParams.get('applicationId')
29:     const match: any = { userId: (session.user as any).id }
30:     if (applicationId) match.applicationId = applicationId
31:     const events = await ABEvent.find(match).sort({ createdAt: -1 }).limit(500)
32:     const summary = {
33:       views: events.filter(e => e.action === 'view').length,
34:       selects: events.filter(e => e.action === 'select').length,
35:       downloads: events.filter(e => e.action === 'download').length,
36:       submits: events.filter(e => e.action === 'submit').length,
37:       interviews: events.filter(e => e.action === 'interview').length,
38:       offers: events.filter(e => e.action === 'offer').length,
39:     }
40:     return NextResponse.json({ success: true, events, summary })
41:   } catch (e) {
42:     return NextResponse.json({ error: 'Failed to fetch events' }, { status: 500 })
43:   }
44: }
</file>

<file path="src/app/api/analytics/dashboard/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import connectToDatabase from '@/lib/mongodb'
 4: import JobApplication from '@/models/JobApplication'
 5: import { authOptions } from '@/lib/auth'
 6: export const dynamic = 'force-dynamic'
 7: 
 8: interface DashboardStats {
 9:   totalApplications: number
10:   appliedThisWeek: number
11:   interviewRate: number
12:   averageResponseTime: number
13:   appliedWeekChangePct?: number
14: }
15: 
16: export async function GET(request: NextRequest) {
17:   try {
18:     const session = await getServerSession(authOptions)
19:     if (!session?.user?.email) {
20:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
21:     }
22: 
23:     await connectToDatabase()
24: 
25:     // Get user's applications
26:     const applications = await JobApplication.find({ userId: session.user.id })
27: 
28:     // Calculate total applications
29:     const totalApplications = applications.length
30: 
31:     // Calculate applications this week
32:     const oneWeekAgo = new Date()
33:     oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)
34:     const twoWeeksAgo = new Date()
35:     twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14)
36:     const appliedThisWeek = applications.filter(app => new Date(app.createdAt) > oneWeekAgo).length
37:     const appliedPrevWeek = applications.filter(app => new Date(app.createdAt) <= oneWeekAgo && new Date(app.createdAt) > twoWeeksAgo).length
38:     const appliedWeekChangePct = appliedPrevWeek > 0 ? Math.round(((appliedThisWeek - appliedPrevWeek) / appliedPrevWeek) * 100) : (appliedThisWeek > 0 ? 100 : 0)
39: 
40:     // Calculate interview rate (applications that reached interview stage)
41:     const interviewApplications = applications.filter(app =>
42:       app.applicationStatus === 'interviewing' || app.applicationStatus === 'offer'
43:     ).length
44:     const interviewRate = totalApplications > 0 ? Math.round((interviewApplications / totalApplications) * 100) : 0
45: 
46:     // Calculate average response time (simplified - in days)
47:     const applicationsWithResponses = applications.filter(app =>
48:       app.applicationStatus !== 'saved' && app.applicationStatus !== 'applied'
49:     )
50: 
51:     let averageResponseTime = 0
52:     if (applicationsWithResponses.length > 0) {
53:       const totalResponseTime = applicationsWithResponses.reduce((total, app) => {
54:         const appliedDate = new Date(app.createdAt)
55:         const responseDate = app.updatedAt ? new Date(app.updatedAt) : new Date()
56:         const daysDiff = Math.ceil((responseDate.getTime() - appliedDate.getTime()) / (1000 * 60 * 60 * 24))
57:         return total + daysDiff
58:       }, 0)
59:       averageResponseTime = Math.round(totalResponseTime / applicationsWithResponses.length)
60:     }
61: 
62:     const stats: DashboardStats = {
63:       totalApplications,
64:       appliedThisWeek,
65:       interviewRate,
66:       averageResponseTime,
67:       appliedWeekChangePct
68:     }
69: 
70:     return NextResponse.json({
71:       success: true,
72:       stats
73:     })
74: 
75:   } catch (error) {
76:     console.error('Dashboard stats error:', error)
77:     return NextResponse.json(
78:       { error: 'Failed to get dashboard stats' },
79:       { status: 500 }
80:     )
81:   }
82: }
</file>

<file path="src/app/api/analytics/outcomes/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import JobApplication from '@/models/JobApplication'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     await connectToDatabase()
14:     const { applicationId, event } = await req.json()
15:     if (!applicationId || !event) return NextResponse.json({ error: 'applicationId and event required' }, { status: 400 })
16:     const update: any = {}
17:     if (event === 'view') update.$inc = { views: 1 }
18:     if (event === 'interview') update.$inc = { interviews: 1 }
19:     if (event === 'offer') update.$inc = { offers: 1 }
20:     const app = await JobApplication.findOneAndUpdate({ _id: applicationId, userId: (session.user as any).id }, update, { new: true })
21:     if (!app) return NextResponse.json({ error: 'Application not found' }, { status: 404 })
22:     return NextResponse.json({ success: true, application: app })
23:   } catch (e) {
24:     return NextResponse.json({ error: 'Failed to record outcome' }, { status: 500 })
25:   }
26: }
27: 
28: export async function GET(req: NextRequest) {
29:   try {
30:     const session = await getServerSession(authOptions)
31:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
32:     await connectToDatabase()
33:     const apps = await JobApplication.find({ userId: (session.user as any).id }).lean()
34:     const summary = {
35:       total: apps.length,
36:       views: apps.reduce((a,b)=> a + (b.views || 0), 0),
37:       interviews: apps.reduce((a,b)=> a + (b.interviews || 0), 0),
38:       offers: apps.reduce((a,b)=> a + (b.offers || 0), 0),
39:     }
40:     return NextResponse.json({ success: true, summary })
41:   } catch (e) {
42:     return NextResponse.json({ error: 'Failed to summarize outcomes' }, { status: 500 })
43:   }
44: }
</file>

<file path="src/app/api/analytics/performance/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import ABEvent from '@/models/ABEvent'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function GET(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     await connectToDatabase()
14:     const url = new URL(req.url)
15:     const applicationId = url.searchParams.get('applicationId')
16:     const match: any = { userId: (session.user as any).id }
17:     if (applicationId) match.applicationId = applicationId
18:     const events = await ABEvent.find(match).lean()
19: 
20:     const variants: Record<string, { views: number; selects: number; downloads: number; submits: number; interviews: number; offers: number }> = { A: { views:0, selects:0, downloads:0, submits:0, interviews:0, offers:0 }, B: { views:0, selects:0, downloads:0, submits:0, interviews:0, offers:0 } }
21:     for (const e of events) {
22:       const v = (e as any).variant || 'A'
23:       if (!variants[v]) continue
24:       const a = (e as any).action
25:       if (a === 'view') variants[v].views++
26:       if (a === 'select') variants[v].selects++
27:       if (a === 'download') variants[v].downloads++
28:       if (a === 'submit') variants[v].submits++
29:       if (a === 'interview') variants[v].interviews++
30:       if (a === 'offer') variants[v].offers++
31:     }
32: 
33:     const rate = (num: number, den: number) => den > 0 ? Math.round((num / den) * 100) : 0
34:     const summary = {
35:       A: {
36:         viewToSelect: rate(variants.A.selects, variants.A.views),
37:         selectToSubmit: rate(variants.A.submits, variants.A.selects),
38:         submitToInterview: rate(variants.A.interviews, variants.A.submits),
39:         interviewToOffer: rate(variants.A.offers, variants.A.interviews),
40:       },
41:       B: {
42:         viewToSelect: rate(variants.B.selects, variants.B.views),
43:         selectToSubmit: rate(variants.B.submits, variants.B.selects),
44:         submitToInterview: rate(variants.B.interviews, variants.B.submits),
45:         interviewToOffer: rate(variants.B.offers, variants.B.interviews),
46:       }
47:     }
48: 
49:     return NextResponse.json({ success: true, variants, summary })
50:   } catch (e) {
51:     return NextResponse.json({ error: 'Failed to compute performance' }, { status: 500 })
52:   }
53: }
</file>

<file path="src/app/api/analytics/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import connectToDatabase from '@/lib/mongodb'
  4: import JobApplication from '@/models/JobApplication'
  5: import Resume from '@/models/Resume'
  6: import { authOptions } from '@/lib/auth'
  7: import { MarketIntelligenceService } from '@/lib/market-intelligence-service'
  8: export const dynamic = 'force-dynamic'
  9: 
 10: interface AnalyticsData {
 11:   overview: {
 12:     totalApplications: number
 13:     activeApplications: number
 14:     interviewsScheduled: number
 15:     offersReceived: number
 16:     responseRate: number
 17:     averageResponseTime: number
 18:   }
 19:   trends: {
 20:     applicationsByMonth: Array<{ month: string; count: number }>
 21:     statusDistribution: Record<string, number>
 22:     industryBreakdown: Array<{ industry: string; count: number }>
 23:   }
 24:   insights: {
 25:     topIndustries: Array<{ industry: string; count: number; avgSalary?: number }>
 26:     applicationSuccessFactors: Array<{ factor: string; impact: 'high' | 'medium' | 'low' }>
 27:     marketTrends: Array<{ trend: string; description: string; recommendation: string }>
 28:     personalizedTips: string[]
 29:   }
 30:   performance: {
 31:     weeklyGoalProgress: number
 32:     monthlyGoalProgress: number
 33:     improvementAreas: string[]
 34:     strengths: string[]
 35:   }
 36: }
 37: 
 38: export async function GET(request: NextRequest) {
 39:   try {
 40:     const session = await getServerSession(authOptions)
 41:     if (!session?.user?.email) {
 42:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 43:     }
 44: 
 45:     await connectToDatabase()
 46: 
 47:     // Get user's applications
 48:     const applications = await JobApplication.find({ userId: session.user.id })
 49: 
 50:     // Calculate overview metrics
 51:     const totalApplications = applications.length
 52:     const activeApplications = applications.filter(app =>
 53:       ['saved', 'applied'].includes(app.applicationStatus)
 54:     ).length
 55:     const interviewsScheduled = applications.filter(app =>
 56:       app.applicationStatus === 'interviewing'
 57:     ).length
 58:     const offersReceived = applications.filter(app =>
 59:       app.applicationStatus === 'offer'
 60:     ).length
 61: 
 62:     const respondedApplications = applications.filter(app =>
 63:       !['saved', 'applied'].includes(app.applicationStatus)
 64:     )
 65:     const responseRate = totalApplications > 0
 66:       ? (respondedApplications.length / totalApplications) * 100
 67:       : 0
 68: 
 69:     // Calculate average response time (simplified)
 70:     const responseTimes = applications
 71:       .filter(app => app.appliedDate && app.updatedAt)
 72:       .map(app => app.updatedAt.getTime() - app.appliedDate.getTime())
 73:     const averageResponseTime = responseTimes.length > 0
 74:       ? responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length / (1000 * 60 * 60 * 24)
 75:       : 0
 76: 
 77:     // Calculate trends
 78:     const applicationsByMonth = calculateMonthlyTrends(applications)
 79:     const statusDistribution = calculateStatusDistribution(applications)
 80:     const industryBreakdown = calculateIndustryBreakdown(applications)
 81: 
 82:     // Generate insights
 83:     const insights = await generateInsights(applications, session.user.id)
 84: 
 85:     // Calculate performance metrics
 86:     const performance = calculatePerformanceMetrics(applications)
 87: 
 88:     const analyticsData: AnalyticsData = {
 89:       overview: {
 90:         totalApplications,
 91:         activeApplications,
 92:         interviewsScheduled,
 93:         offersReceived,
 94:         responseRate: Math.round(responseRate * 100) / 100,
 95:         averageResponseTime: Math.round(averageResponseTime * 100) / 100
 96:       },
 97:       trends: {
 98:         applicationsByMonth,
 99:         statusDistribution,
100:         industryBreakdown
101:       },
102:       insights,
103:       performance
104:     }
105: 
106:     return NextResponse.json({
107:       success: true,
108:       data: analyticsData
109:     })
110: 
111:   } catch (error) {
112:     console.error('Analytics error:', error)
113:     return NextResponse.json(
114:       { error: 'Failed to fetch analytics' },
115:       { status: 500 }
116:     )
117:   }
118: }
119: 
120: function calculateMonthlyTrends(applications: any[]) {
121:   const monthlyData: Record<string, number> = {}
122: 
123:   applications.forEach(app => {
124:     const month = app.createdAt.toISOString().slice(0, 7) // YYYY-MM format
125:     monthlyData[month] = (monthlyData[month] || 0) + 1
126:   })
127: 
128:   return Object.entries(monthlyData)
129:     .map(([month, count]) => ({ month, count }))
130:     .sort((a, b) => a.month.localeCompare(b.month))
131:     .slice(-12) // Last 12 months
132: }
133: 
134: function calculateStatusDistribution(applications: any[]) {
135:   const distribution: Record<string, number> = {}
136: 
137:   applications.forEach(app => {
138:     distribution[app.applicationStatus] = (distribution[app.applicationStatus] || 0) + 1
139:   })
140: 
141:   return distribution
142: }
143: 
144: function getMostCommonIndustry(applications: any[]): string | undefined {
145:   const industryBreakdown = calculateIndustryBreakdown(applications)
146:   if (industryBreakdown.length === 0) return undefined
147:   
148:   // Sort by count and return top industry
149:   const sorted = industryBreakdown.sort((a, b) => b.count - a.count)
150:   return sorted[0]?.industry
151: }
152: 
153: function calculateIndustryBreakdown(applications: any[]) {
154:   const industryData: Record<string, number> = {}
155: 
156:   applications.forEach(app => {
157:     // For now, we'll use a simple heuristic - extract industry from company name
158:     // In a real app, this would come from the company research data
159:     const companyName = app.companyName.toLowerCase()
160:     let industry = 'Other'
161: 
162:     if (companyName.includes('tech') || companyName.includes('software') || companyName.includes('google') || companyName.includes('microsoft')) {
163:       industry = 'Technology'
164:     } else if (companyName.includes('bank') || companyName.includes('finance') || companyName.includes('capital')) {
165:       industry = 'Finance'
166:     } else if (companyName.includes('health') || companyName.includes('medical') || companyName.includes('clinic')) {
167:       industry = 'Healthcare'
168:     } else if (companyName.includes('consulting') || companyName.includes('advisory')) {
169:       industry = 'Consulting'
170:     }
171: 
172:     industryData[industry] = (industryData[industry] || 0) + 1
173:   })
174: 
175:   return Object.entries(industryData)
176:     .map(([industry, count]) => ({ industry, count }))
177:     .sort((a, b) => b.count - a.count)
178: }
179: 
180: async function generateInsights(applications: any[], userId: string) {
181:   // Get user's resumes for additional insights
182:   const resumes = await Resume.find({ userId })
183:   const totalResumes = resumes.length
184:   const customizedResumes = resumes.reduce((acc, resume) => acc + resume.customizedVersions.length, 0)
185: 
186:   // Get real market intelligence data
187:   const marketIntelService = MarketIntelligenceService.getInstance()
188:   
189:   // Determine user's primary industry and role from their applications
190:   const userIndustry = getMostCommonIndustry(applications)
191:   const userRole = applications[0]?.jobTitle || 'Software Engineer' // Fallback to common role
192:   
193:   let topIndustries, marketTrends
194:   try {
195:     // Fetch real market data (with caching)
196:     [topIndustries, marketTrends] = await Promise.all([
197:       marketIntelService.getTopIndustries(),
198:       marketIntelService.getMarketTrends(userIndustry)
199:     ])
200:   } catch (error) {
201:     console.error('[ANALYTICS] Failed to fetch market intelligence:', error)
202:     // Fallback to basic data
203:     topIndustries = [
204:       { industry: 'Technology', count: 0, avgSalary: 120000 },
205:       { industry: 'Healthcare', count: 0, avgSalary: 85000 },
206:       { industry: 'Finance', count: 0, avgSalary: 95000 }
207:     ]
208:     marketTrends = [
209:       {
210:         trend: 'Remote work adoption',
211:         description: 'Remote work is now standard across industries',
212:         recommendation: 'Highlight remote work experience in applications'
213:       }
214:     ]
215:   }
216: 
217:   const applicationSuccessFactors = [
218:     { factor: 'Resume customization with AI', impact: 'high' as const },
219:     { factor: 'Company research integration', impact: 'high' as const },
220:     { factor: 'Follow-up within 7 days', impact: 'medium' as const },
221:     { factor: 'Keyword optimization', impact: 'medium' as const },
222:     { factor: 'Networking connections', impact: 'low' as const }
223:   ]
224: 
225:   const personalizedTips = [
226:     `You've customized ${customizedResumes} resumes - this increases interview chances by 40%!`,
227:     totalResumes > 0 ? 'Keep uploading more resumes to expand your opportunities' : 'Upload your first resume to get started with AI customization',
228:     applications.length > 10 ? 'Great progress! Focus on quality follow-ups for better response rates' : 'Apply to 2-3 jobs per week to maintain momentum',
229:     'Companies respond 3x faster to applications with personalized cover letters'
230:   ]
231: 
232:   return {
233:     topIndustries,
234:     applicationSuccessFactors,
235:     marketTrends,
236:     personalizedTips
237:   }
238: }
239: 
240: function calculatePerformanceMetrics(applications: any[]) {
241:   const currentMonth = new Date().getMonth()
242:   const currentYear = new Date().getFullYear()
243: 
244:   const monthlyApplications = applications.filter(app => {
245:     const appDate = new Date(app.createdAt)
246:     return appDate.getMonth() === currentMonth && appDate.getFullYear() === currentYear
247:   }).length
248: 
249:   const weeklyApplications = applications.filter(app => {
250:     const appDate = new Date(app.createdAt)
251:     const weekAgo = new Date()
252:     weekAgo.setDate(weekAgo.getDate() - 7)
253:     return appDate >= weekAgo
254:   }).length
255: 
256:   // Goals: 15 applications per month, 4 per week
257:   const monthlyGoalProgress = Math.min((monthlyApplications / 15) * 100, 100)
258:   const weeklyGoalProgress = Math.min((weeklyApplications / 4) * 100, 100)
259: 
260:   const improvementAreas: string[] = []
261:   const strengths: string[] = []
262: 
263:   if (weeklyApplications < 2) {
264:     improvementAreas.push('Increase application volume - aim for 3-4 per week')
265:   } else {
266:     strengths.push('Consistent application activity')
267:   }
268: 
269:   const responseRate = applications.length > 0
270:     ? (applications.filter(app => !['saved', 'applied'].includes(app.applicationStatus)).length / applications.length) * 100
271:     : 0
272: 
273:   if (responseRate < 10) {
274:     improvementAreas.push('Improve response rate through better customization')
275:   } else {
276:     strengths.push('Good response rate from applications')
277:   }
278: 
279:   if (applications.filter(app => app.applicationStatus === 'interviewing').length === 0) {
280:     improvementAreas.push('Focus on interview preparation and follow-ups')
281:   } else {
282:     strengths.push('Successfully securing interviews')
283:   }
284: 
285:   // Variant performance
286:   const byVariant: Record<string, { views: number; interviews: number; offers: number }> = {}
287:   applications.forEach(app => {
288:     const v = app.variantUsed || 'A'
289:     if (!byVariant[v]) byVariant[v] = { views: 0, interviews: 0, offers: 0 }
290:     byVariant[v].views += app.views || 0
291:     byVariant[v].interviews += app.interviews || 0
292:     byVariant[v].offers += app.offers || 0
293:   })
294:   const variantPerformance = Object.entries(byVariant).map(([variant, vals]) => ({ variant, ...vals }))
295: 
296:   // Source lift: compute (interviews+offers)/views per source vs overall
297:   const bySource: Record<string, { views: number; conv: number }> = {}
298:   applications.forEach(app => {
299:     const s = app.applicationSource || 'unknown'
300:     if (!bySource[s]) bySource[s] = { views: 0, conv: 0 }
301:     bySource[s].views += app.views || 0
302:     bySource[s].conv += (app.interviews || 0) + (app.offers || 0)
303:   })
304:   const overallViews = Object.values(bySource).reduce((a,b)=>a+b.views,0) || 1
305:   const overallConv = Object.values(bySource).reduce((a,b)=>a+b.conv,0)
306:   const overallRate = overallConv / overallViews
307:   const sourceLift = Object.entries(bySource).map(([source, vals]) => ({ source, lift: (vals.views ? (vals.conv/vals.views) : 0) - overallRate }))
308: 
309:   return {
310:     weeklyGoalProgress: Math.round(weeklyGoalProgress),
311:     monthlyGoalProgress: Math.round(monthlyGoalProgress),
312:     improvementAreas,
313:     strengths,
314:     variantPerformance,
315:     sourceLift
316:   }
317: }
</file>

<file path="src/app/api/analytics/track/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { dbService } from '@/lib/database'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: interface AnalyticsEvent {
 9:   name: string
10:   properties?: Record<string, any>
11:   timestamp?: string
12:   userId?: string
13:   sessionId?: string
14: }
15: 
16: /**
17:  * Track user analytics events
18:  * This endpoint stores events for product analytics
19:  */
20: export async function POST(request: NextRequest) {
21:   try {
22:     const session = await getServerSession(authOptions)
23:     const event: AnalyticsEvent = await request.json()
24: 
25:     // Add user ID from session if available
26:     if (session?.user?.id) {
27:       event.userId = session.user.id
28:     }
29: 
30:     // Add IP and user agent for analytics
31:     const ip = request.headers.get('x-forwarded-for') || 'unknown'
32:     const userAgent = request.headers.get('user-agent') || 'unknown'
33: 
34:     // In production, you'd store this in a dedicated analytics DB or service
35:     // For now, we'll log it and optionally store in MongoDB
36:     if (process.env.NODE_ENV === 'development') {
37:       console.log('[Analytics Event]', {
38:         event: event.name,
39:         userId: event.userId,
40:         sessionId: event.sessionId,
41:         properties: event.properties,
42:         ip,
43:         userAgent,
44:       })
45:     }
46: 
47:     // Store in database if needed (create AnalyticsEvent model)
48:     if (process.env.ENABLE_ANALYTICS_STORAGE === 'true') {
49:       try {
50:         await dbService.connect()
51:         // TODO: Create and use AnalyticsEvent model
52:         // await AnalyticsEvent.create({
53:         //   ...event,
54:         //   ip,
55:         //   userAgent,
56:         //   createdAt: new Date(),
57:         // })
58:       } catch (dbError) {
59:         // Silently fail - don't break user experience for analytics
60:         console.error('[Analytics] Failed to store event:', dbError)
61:       }
62:     }
63: 
64:     // Return success quickly - analytics shouldn't slow down the app
65:     return NextResponse.json({ success: true }, { status: 200 })
66:   } catch (error) {
67:     // Silently fail for analytics errors
68:     console.error('[Analytics] Error:', error)
69:     return NextResponse.json({ success: false }, { status: 200 })
70:   }
71: }
</file>

<file path="src/app/api/applications/create/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import dbConnect from '@/lib/mongodb'
 5: import Application from '@/models/Application'
 6: 
 7: export async function POST(req: NextRequest) {
 8:   try {
 9:     const session = await getServerSession(authOptions)
10:     if (!session?.user?.id) {
11:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     }
13: 
14:     const { jobId, company, jobTitle, location, salary, recipient } = await req.json()
15:     
16:     if (!company || !jobTitle) {
17:       return NextResponse.json({ error: 'Company and job title are required' }, { status: 400 })
18:     }
19: 
20:     await dbConnect()
21: 
22:     const application = await Application.create({
23:       userId: session.user.id,
24:       jobId,
25:       company,
26:       jobTitle,
27:       location,
28:       salary,
29:       recipient: recipient || 'hiring@' + company.toLowerCase().replace(/\s+/g, '') + '.com',
30:       status: 'applied',
31:       appliedAt: new Date(),
32:       attachments: [],
33:       metadata: {}
34:     })
35: 
36:     console.log('[APPLICATIONS] ✅ Created application:', application._id, 'for', company)
37: 
38:     return NextResponse.json({ 
39:       success: true, 
40:       application: {
41:         id: application._id,
42:         company: application.company,
43:         jobTitle: application.jobTitle,
44:         status: application.status,
45:         appliedAt: application.appliedAt
46:       }
47:     })
48:   } catch (error) {
49:     console.error('[APPLICATIONS] ❌ Error creating application:', error)
50:     return NextResponse.json({ 
51:       error: 'Failed to create application',
52:       details: error instanceof Error ? error.message : 'Unknown error'
53:     }, { status: 500 })
54:   }
55: }
</file>

<file path="src/app/api/applications/follow-up-reminders/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import JobApplication from '@/models/JobApplication'
 6: 
 7: export async function GET(request: NextRequest) {
 8:   try {
 9:     const session = await getServerSession(authOptions)
10:     if (!session?.user?.id) {
11:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     }
13: 
14:     // Get applications that need follow-up
15:     await connectToDatabase()
16:     const applications = await JobApplication.find(
17:       {
18:         userId: session.user.id,
19:         status: { $in: ['Applied', 'Screening', 'Under Review'] }
20:       },
21:       { _id: 1, company: 1, jobTitle: 1, createdAt: 1, status: 1, lastFollowUp: 1 }
22:     ).sort({ createdAt: 1 })
23: 
24:     const now = new Date()
25:     const reminders = applications
26:       .map(app => {
27:         const appliedDate = new Date(app.createdAt)
28:         const lastFollowUp = app.lastFollowUp ? new Date(app.lastFollowUp) : null
29:         const daysSinceApplied = Math.floor((now.getTime() - appliedDate.getTime()) / (1000 * 60 * 60 * 24))
30:         const daysSinceFollowUp = lastFollowUp 
31:           ? Math.floor((now.getTime() - lastFollowUp.getTime()) / (1000 * 60 * 60 * 24))
32:           : daysSinceApplied
33: 
34:         // Determine if follow-up is needed
35:         let needsFollowUp = false
36:         let priority: 'high' | 'medium' | 'low' = 'low'
37: 
38:         if (daysSinceFollowUp >= 14) {
39:           needsFollowUp = true
40:           priority = 'high'
41:         } else if (daysSinceFollowUp >= 7) {
42:           needsFollowUp = true
43:           priority = 'medium'
44:         } else if (daysSinceFollowUp >= 5) {
45:           needsFollowUp = true
46:           priority = 'low'
47:         }
48: 
49:         return {
50:           id: app._id.toString(),
51:           company: app.company,
52:           jobTitle: app.jobTitle,
53:           appliedDate: appliedDate.toISOString(),
54:           daysSinceApplied,
55:           status: app.status,
56:           priority,
57:           needsFollowUp
58:         }
59:       })
60:       .filter(r => r.needsFollowUp)
61:       .sort((a, b) => {
62:         // Sort by priority (high first) then by days
63:         const priorityOrder = { high: 0, medium: 1, low: 2 }
64:         if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
65:           return priorityOrder[a.priority] - priorityOrder[b.priority]
66:         }
67:         return b.daysSinceApplied - a.daysSinceApplied
68:       })
69: 
70:     return NextResponse.json(reminders)
71:   } catch (error) {
72:     console.error('[FOLLOW_UP_REMINDERS] Error:', error)
73:     return NextResponse.json(
74:       { error: 'Failed to fetch follow-up reminders' },
75:       { status: 500 }
76:     )
77:   }
78: }
</file>

<file path="src/app/api/applications/list/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import dbConnect from '@/lib/mongodb'
 5: import Application from '@/models/Application'
 6: 
 7: export async function GET(req: NextRequest) {
 8:   try {
 9:     const session = await getServerSession(authOptions)
10:     if (!session?.user?.id) {
11:       return NextResponse.json([], { status: 200 })
12:     }
13: 
14:     await dbConnect()
15: 
16:     const applications = await Application.find({ userId: session.user.id })
17:       .sort({ appliedAt: -1 })
18:       .limit(50)
19:       .lean()
20: 
21:     console.log('[APPLICATIONS] ✅ Found', applications.length, 'applications for user')
22: 
23:     return NextResponse.json(applications.map(app => ({
24:       id: app._id,
25:       company: app.company,
26:       jobTitle: app.jobTitle,
27:       location: app.location,
28:       salary: app.salary,
29:       status: app.status,
30:       appliedAt: app.appliedAt,
31:       interviewDate: app.interviewDate,
32:       hasInterviewPrep: !!app.interviewPrep,
33:       hasSalaryData: !!app.salaryData
34:     })))
35:   } catch (error) {
36:     console.error('[APPLICATIONS] ❌ Error fetching applications:', error)
37:     return NextResponse.json({ 
38:       error: 'Failed to fetch applications',
39:       details: error instanceof Error ? error.message : 'Unknown error'
40:     }, { status: 500 })
41:   }
42: }
</file>

<file path="src/app/api/applications/pipeline-stats/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import JobApplication from '@/models/JobApplication'
 6: 
 7: export async function GET(request: NextRequest) {
 8:   try {
 9:     const session = await getServerSession(authOptions)
10:     if (!session?.user?.id) {
11:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     }
13: 
14:     // Get application counts by status
15:     await connectToDatabase()
16:     const applications = await JobApplication.find(
17:       { userId: session.user.id },
18:       { status: 1 }
19:     )
20: 
21:     // Count by status
22:     const stats = {
23:       applied: 0,
24:       screening: 0,
25:       interview: 0,
26:       offer: 0,
27:       rejected: 0
28:     }
29: 
30:     applications.forEach(app => {
31:       const status = app.status?.toLowerCase() || 'applied'
32:       
33:       if (status.includes('reject') || status.includes('declined')) {
34:         stats.rejected++
35:       } else if (status.includes('offer')) {
36:         stats.offer++
37:       } else if (status.includes('interview')) {
38:         stats.interview++
39:       } else if (status.includes('screen') || status.includes('review')) {
40:         stats.screening++
41:       } else {
42:         stats.applied++
43:       }
44:     })
45: 
46:     return NextResponse.json(stats)
47:   } catch (error) {
48:     console.error('[PIPELINE_STATS] Error:', error)
49:     return NextResponse.json(
50:       { error: 'Failed to fetch pipeline stats' },
51:       { status: 500 }
52:     )
53:   }
54: }
</file>

<file path="src/app/api/applications/response-metrics/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import JobApplication from '@/models/JobApplication'
 6: 
 7: export async function GET(request: NextRequest) {
 8:   try {
 9:     const session = await getServerSession(authOptions)
10:     if (!session?.user?.id) {
11:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     }
13: 
14:     // Get applications with response dates
15:     await connectToDatabase()
16:     const applications = await JobApplication.find(
17:       {
18:         userId: session.user.id,
19:         status: { $ne: 'Applied' }
20:       },
21:       { createdAt: 1, updatedAt: 1, status: 1 }
22:     ).sort({ updatedAt: -1 })
23: 
24:     if (applications.length === 0) {
25:       return NextResponse.json({
26:         averageResponseTime: 0,
27:         fastestResponse: 0,
28:         slowestResponse: 0,
29:         totalResponses: 0,
30:         trend: 'stable'
31:       })
32:     }
33: 
34:     // Calculate response times in days
35:     const responseTimes = applications.map(app => {
36:       const created = new Date(app.createdAt)
37:       const updated = new Date(app.updatedAt)
38:       const diffMs = updated.getTime() - created.getTime()
39:       const diffDays = diffMs / (1000 * 60 * 60 * 24)
40:       return diffDays
41:     })
42: 
43:     const averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length
44:     const fastestResponse = Math.min(...responseTimes)
45:     const slowestResponse = Math.max(...responseTimes)
46: 
47:     // Calculate trend (compare last 5 vs previous 5)
48:     let trend: 'up' | 'down' | 'stable' = 'stable'
49:     if (responseTimes.length >= 10) {
50:       const recent = responseTimes.slice(0, 5).reduce((a, b) => a + b, 0) / 5
51:       const previous = responseTimes.slice(5, 10).reduce((a, b) => a + b, 0) / 5
52:       if (recent < previous * 0.9) trend = 'down' // Improving (faster)
53:       else if (recent > previous * 1.1) trend = 'up' // Slowing
54:     }
55: 
56:     return NextResponse.json({
57:       averageResponseTime: Math.round(averageResponseTime * 10) / 10,
58:       fastestResponse: Math.round(fastestResponse * 10) / 10,
59:       slowestResponse: Math.round(slowestResponse * 10) / 10,
60:       totalResponses: applications.length,
61:       trend
62:     })
63:   } catch (error) {
64:     console.error('[RESPONSE_METRICS] Error:', error)
65:     return NextResponse.json(
66:       { error: 'Failed to fetch response metrics' },
67:       { status: 500 }
68:     )
69:   }
70: }
</file>

<file path="src/app/api/applications/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import JobApplication from '@/models/JobApplication'
 6: 
 7: export async function GET(request: NextRequest) {
 8:   try {
 9:     const session = await getServerSession(authOptions)
10:     if (!session?.user?.id) {
11:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     }
13: 
14:     const { searchParams } = new URL(request.url)
15:     const limit = parseInt(searchParams.get('limit') || '10')
16: 
17:     await connectToDatabase()
18:     const applications = await JobApplication.find({ userId: session.user.id })
19:       .sort({ createdAt: -1 })
20:       .limit(limit)
21:       .lean()
22: 
23:     return NextResponse.json({
24:       success: true,
25:       applications
26:     })
27:   } catch (error) {
28:     console.error('[APPLICATIONS] Error:', error)
29:     return NextResponse.json(
30:       { error: 'Failed to fetch applications' },
31:       { status: 500 }
32:     )
33:   }
34: }
</file>

<file path="src/app/api/assistants/coach/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityService } from '@/lib/perplexity-service'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(req: NextRequest) {
 9:   try {
10:     if (!process.env.PERPLEXITY_API_KEY) {
11:       return NextResponse.json({ error: 'AI temporarily unavailable (missing PERPLEXITY_API_KEY)' }, { status: 503 })
12:     }
13:     const session = await getServerSession(authOptions)
14:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
15:     const { messages, context } = await req.json()
16:     const ppx = new PerplexityService()
17:     const system = 'You are an empathetic career coach. Provide concise, actionable guidance (max 8 bullets).' 
18:     const user = `Context: ${JSON.stringify(context || {})}\nConversation:\n${JSON.stringify(messages || [])}`
19:     const out = await ppx.makeRequest(system, user, { maxTokens: 700, temperature: 0.4 })
20:     return NextResponse.json({ success: true, coach: (out.content || '').trim() })
21:   } catch (e) {
22:     return NextResponse.json({ error: 'Failed to generate coaching' }, { status: 500 })
23:   }
24: }
</file>

<file path="src/app/api/assistants/company/contacts/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { webScraper } from '@/lib/web-scraper'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: import connectToDatabase from '@/lib/mongodb'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: export async function POST(request: NextRequest) {
11:   try {
12:     const session = await getServerSession(authOptions)
13:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
14:     const rl = await isRateLimited((session.user as any).id, 'assistants:contacts')
15:     if (rl) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
16:     await connectToDatabase()
17:     const { companyName, companyWebsite, roleHints = [], locationHint } = await request.json()
18:     if (!companyName) return NextResponse.json({ error: 'companyName required' }, { status: 400 })
19:     const contacts = await webScraper.searchHiringContacts(companyName, roleHints, locationHint)
20:     const contactInfo = companyWebsite ? await webScraper.scrapeContactInfoFromWebsite(companyWebsite) : { emails: [], phones: [], addresses: [] }
21:     return NextResponse.json({ success: true, contacts, contactInfo })
22:   } catch (e) {
23:     return NextResponse.json({ error: 'Failed to fetch contacts' }, { status: 500 })
24:   }
25: }
</file>

<file path="src/app/api/assistants/company/orchestrate/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import CompanyData from '@/models/CompanyData'
 6: import { webScraper } from '@/lib/web-scraper'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: export async function POST(request: NextRequest) {
11:   try {
12:     const session = await getServerSession(authOptions)
13:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
14:     const { companyName, jobPostingUrl, companyWebsite } = await request.json()
15:     if (!companyName || typeof companyName !== 'string') return NextResponse.json({ error: 'companyName required' }, { status: 400 })
16: 
17:     await connectToDatabase()
18:     const cached = await CompanyData.findOne({ companyName: new RegExp(companyName, 'i'), expiresAt: { $gt: new Date() } })
19:     if (cached) {
20:       return NextResponse.json({ success: true, companyData: cached })
21:     }
22: 
23:     const data = await webScraper.scrapeCompanyData(companyName, companyWebsite)
24:     const doc = new CompanyData({ ...data, cachedAt: new Date(), expiresAt: new Date(Date.now()+7*24*60*60*1000) })
25:     await doc.save()
26:     return NextResponse.json({ success: true, companyData: doc })
27:   } catch (e) {
28:     return NextResponse.json({ error: 'Failed to orchestrate company research' }, { status: 500 })
29:   }
30: }
</file>

<file path="src/app/api/assistants/cover-letter/generate/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityService } from '@/lib/perplexity-service'
 5: import connectToDatabase from '@/lib/mongodb'
 6: import JobApplication from '@/models/JobApplication'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: export async function POST(request: NextRequest) {
11:   try {
12:     const session = await getServerSession(authOptions)
13:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
14:     const { jobTitle, companyName, jobDescription, resumeText, companyData, tone = 'professional', length = 'medium', jobApplicationId } = await request.json()
15:     if (!jobTitle || !companyName || !jobDescription || !resumeText) return NextResponse.json({ error: 'Missing fields' }, { status: 400 })
16:     let mergedCompany = companyData
17:     try {
18:       if (jobApplicationId) {
19:         await connectToDatabase()
20:         const app = await JobApplication.findOne({ _id: jobApplicationId, userId: (session.user as any).id })
21:         if (app?.context?.companyData) mergedCompany = { ...(mergedCompany || {}), ...app.context.companyData }
22:       }
23:     } catch {}
24:     const ppx = new PerplexityService()
25:     const systemPrompt = `You are an expert cover letter writer with access to current company information and hiring trends. Return full letter text only.`
26:     const userPrompt = `Create a cover letter for ${jobTitle} at ${companyName}.
27: 
28: Job Description:\n${jobDescription}
29: 
30: Resume:\n${resumeText}
31: 
32: Company Data:\n${JSON.stringify(mergedCompany || {}, null, 2)}
33: 
34: Tone: ${tone}, Length: ${length}`
35:     const result = await ppx.makeRequest(systemPrompt, userPrompt, { maxTokens: 1500, temperature: 0.4 })
36:     return NextResponse.json({ success: true, coverLetter: (result.content || '').trim() })
37:   } catch (e) {
38:     return NextResponse.json({ error: 'Failed to generate cover letter' }, { status: 500 })
39:   }
40: }
</file>

<file path="src/app/api/assistants/interview/prepare/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import JobApplication from '@/models/JobApplication'
 5: import connectToDatabase from '@/lib/mongodb'
 6: import { AIService } from '@/lib/ai-service'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: export async function POST(request: NextRequest) {
11:   try {
12:     const session = await getServerSession(authOptions)
13:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
14:     const { jobTitle, seniority, resumeHighlights, companyData, focusAreas, numBehavioral, numTechnical, jobApplicationId } = await request.json()
15:     if (!jobTitle || !seniority || !resumeHighlights) return NextResponse.json({ error: 'Missing fields' }, { status: 400 })
16:     let mergedCompany = companyData
17:     try {
18:       if (jobApplicationId) {
19:         await connectToDatabase()
20:         const app = await JobApplication.findOne({ _id: jobApplicationId, userId: (session.user as any).id })
21:         if (app?.context?.companyData) mergedCompany = { ...(mergedCompany || {}), ...app.context.companyData }
22:       }
23:     } catch {}
24:     const res = await AIService.generateInterviewCoach(jobTitle, seniority, resumeHighlights, mergedCompany, focusAreas, numBehavioral, numTechnical)
25:     return NextResponse.json({ success: true, ...res })
26:   } catch (e) {
27:     return NextResponse.json({ error: 'Failed to prepare interview content' }, { status: 500 })
28:   }
29: }
</file>

<file path="src/app/api/assistants/job/analyze/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityService } from '@/lib/perplexity-service'
 5: import { JOB_ANALYSIS_SYSTEM_PROMPT } from '@/lib/prompts/perplexity'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(request: NextRequest) {
10:   try {
11:     if (!process.env.PERPLEXITY_API_KEY) {
12:       return NextResponse.json({ error: 'AI temporarily unavailable (missing PERPLEXITY_API_KEY)' }, { status: 503 })
13:     }
14:     const session = await getServerSession(authOptions)
15:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
16:     const { jobDescription } = await request.json()
17:     if (!jobDescription || typeof jobDescription !== 'string' || jobDescription.length < 20) {
18:       return NextResponse.json({ error: 'jobDescription required' }, { status: 400 })
19:     }
20:     try {
21:       const ppx = new PerplexityService()
22:       const result = await ppx.makeRequest(JOB_ANALYSIS_SYSTEM_PROMPT, `Analyze this job posting and produce strict JSON.\n\n${jobDescription}`, { maxTokens: 1400, temperature: 0.2 })
23:       let text = result.content || ''
24:       if (/```/.test(text)) { const m = text.match(/```json[\s\S]*?```/i) || text.match(/```[\s\S]*?```/); if (m && m[0]) text = m[0].replace(/```json|```/g,'').trim() }
25:       const analysis = JSON.parse(text)
26:       return NextResponse.json({ success: true, analysis })
27:     } catch (e: any) {
28:       // Graceful fallback like primary endpoint
29:       const minimal = {
30:         jobTitle: 'Unknown Position',
31:         companyName: 'Unknown Company',
32:         keyRequirements: [],
33:         preferredSkills: [],
34:         responsibilities: [],
35:         companyCulture: [],
36:         experienceLevel: 'unknown',
37:         educationRequirements: [],
38:         remoteWorkPolicy: 'unknown',
39:         salaryRange: 'unknown',
40:       }
41:       return NextResponse.json({ success: true, analysis: minimal })
42:     }
43:   } catch (e) {
44:     return NextResponse.json({ error: 'Failed to analyze job' }, { status: 500 })
45:   }
46: }
</file>

<file path="src/app/api/assistants/salary/coach/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { AIService } from '@/lib/ai-service'
 5: import connectToDatabase from '@/lib/mongodb'
 6: import JobApplication from '@/models/JobApplication'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: export async function POST(request: NextRequest) {
11:   try {
12:     const session = await getServerSession(authOptions)
13:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
14:     const body = await request.json()
15:     const { jobApplicationId } = body
16:     if (jobApplicationId) {
17:       try {
18:         await connectToDatabase()
19:         const app = await JobApplication.findOne({ _id: jobApplicationId, userId: (session.user as any).id })
20:         if (app?.context?.companyData) {
21:           body.marketData = `${body.marketData || ''}\nCompany context: ${JSON.stringify(app.context.companyData).slice(0, 1000)}`.trim()
22:         }
23:       } catch {}
24:     }
25:     const plan = await AIService.generateSalaryNegotiationPlan(body)
26:     return NextResponse.json({ success: true, plan })
27:   } catch (e) {
28:     return NextResponse.json({ error: 'Failed to generate negotiation plan' }, { status: 500 })
29:   }
30: }
</file>

<file path="src/app/api/auth/[...nextauth]/route.ts">
1: import NextAuth from 'next-auth'
2: import { authOptions } from '@/lib/auth'
3: 
4: const handler = NextAuth(authOptions)
5: 
6: export { handler as GET, handler as POST }
</file>

<file path="src/app/api/billing/activate/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Profile from '@/models/Profile'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * POST /api/billing/activate
11:  * Body: { provider: 'stripe'|'google'|'apple'|'microsoft', token: string, plan?: 'pro'|'company' }
12:  * Verifies receipt/session with the provider and sets plan on the user's Profile.
13:  * Note: Provider-specific verification is stubbed with TODO hooks – wire credentials in deployment.
14:  */
15: export async function POST(request: NextRequest) {
16:   try {
17:     const session = await getServerSession(authOptions)
18:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
19:     await connectToDatabase()
20:     const { provider, token, plan } = await request.json()
21:     if (!provider || !token) return NextResponse.json({ error: 'Missing provider or token' }, { status: 400 })
22: 
23:     let verified = false
24:     let targetPlan: 'pro' | 'company' = plan === 'company' ? 'company' : 'pro'
25:     try {
26:       switch (provider) {
27:         case 'stripe': {
28:           // TODO: verify session or subscription id with Stripe API
29:           verified = true
30:           break
31:         }
32:         case 'google': {
33:           // TODO: verify Play Billing purchase token
34:           verified = true
35:           break
36:         }
37:         case 'apple': {
38:           // TODO: verify App Store receipt
39:           verified = true
40:           break
41:         }
42:         case 'microsoft': {
43:           // TODO: verify Microsoft Store receipt
44:           verified = true
45:           break
46:         }
47:         default:
48:           return NextResponse.json({ error: 'Unsupported provider' }, { status: 400 })
49:       }
50:     } catch {
51:       verified = false
52:     }
53: 
54:     if (!verified) return NextResponse.json({ error: 'Verification failed' }, { status: 400 })
55: 
56:     const prof: any = await Profile.findOne({ userId: (session.user as any).id })
57:     if (!prof) return NextResponse.json({ error: 'Profile not found' }, { status: 404 })
58:     prof.plan = targetPlan
59:     await prof.save()
60: 
61:     return NextResponse.json({ success: true, plan: prof.plan })
62:   } catch (e) {
63:     return NextResponse.json({ error: 'Activation error' }, { status: 500 })
64:   }
65: }
</file>

<file path="src/app/api/calendar/events/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { getToken } from 'next-auth/jwt'
 5: import { z } from 'zod'
 6: import { isRateLimited } from '@/lib/rate-limit'
 7: 
 8: async function getGoogleAccessToken(req: NextRequest) {
 9:   const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET }) as any
10:   if (!token?.googleAccessToken) return null
11:   // Refresh logic would go here if expired; for now assume valid
12:   return token.googleAccessToken as string
13: }
14: 
15: export async function GET(request: NextRequest) {
16:   try {
17:     const session = await getServerSession(authOptions)
18:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
19:     const limiter = await isRateLimited((session.user as any).id, 'calendar:events:get')
20:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
21:     const accessToken = await getGoogleAccessToken(request)
22:     if (!accessToken) return NextResponse.json({ error: 'Google not linked' }, { status: 400 })
23:     const resp = await fetch('https://www.googleapis.com/calendar/v3/calendars/primary/events?maxResults=20&singleEvents=true&orderBy=startTime', {
24:       headers: { Authorization: `Bearer ${accessToken}` }
25:     })
26:     const json = await resp.json()
27:     return NextResponse.json({ success: true, events: json.items || [] })
28:   } catch (e) {
29:     return NextResponse.json({ error: 'Failed to list events' }, { status: 500 })
30:   }
31: }
32: 
33: export async function POST(request: NextRequest) {
34:   try {
35:     const session = await getServerSession(authOptions)
36:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
37:     const limiter = await isRateLimited((session.user as any).id, 'calendar:events:create')
38:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
39:     const accessToken = await getGoogleAccessToken(request)
40:     if (!accessToken) return NextResponse.json({ error: 'Google not linked' }, { status: 400 })
41:     const schema = z.object({
42:       summary: z.string().min(2),
43:       description: z.string().optional(),
44:       start: z.string(), // ISO
45:       end: z.string(),   // ISO
46:       location: z.string().optional()
47:     })
48:     const raw = await request.json()
49:     const parsed = schema.safeParse(raw)
50:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
51:     const body = parsed.data
52:     const gBody = {
53:       summary: body.summary,
54:       description: body.description,
55:       location: body.location,
56:       start: { dateTime: body.start },
57:       end: { dateTime: body.end }
58:     }
59:     const resp = await fetch('https://www.googleapis.com/calendar/v3/calendars/primary/events', {
60:       method: 'POST',
61:       headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${accessToken}` },
62:       body: JSON.stringify(gBody)
63:     })
64:     const json = await resp.json()
65:     if (!resp.ok) return NextResponse.json({ error: 'Google Calendar error', details: json }, { status: 400 })
66:     return NextResponse.json({ success: true, event: json })
67:   } catch (e) {
68:     return NextResponse.json({ error: 'Failed to create event' }, { status: 500 })
69:   }
70: }
</file>

<file path="src/app/api/calendar/ics/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { z } from 'zod'
 3: import { getServerSession } from 'next-auth/next'
 4: import { authOptions } from '@/lib/auth'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: 
 7: export async function POST(request: NextRequest) {
 8:   try {
 9:     const session = await getServerSession(authOptions)
10:     if (!session?.user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
11:     const limiter = await isRateLimited((session.user as any).id, 'calendar:ics:create')
12:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
13:     const schema = z.object({
14:       summary: z.string().min(2),
15:       description: z.string().optional(),
16:       start: z.string(), // ISO
17:       end: z.string(),   // ISO
18:       location: z.string().optional(),
19:       organizer: z.string().email().optional()
20:     })
21:     const raw = await request.json()
22:     const parsed = schema.safeParse(raw)
23:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
24:     const { summary, description, start, end, location, organizer } = parsed.data
25:     const uid = `${Date.now()}@careerlever.ai`
26:     const dt = (s: string) => new Date(s).toISOString().replace(/[-:]/g, '').replace(/\.\d{3}Z$/, 'Z')
27:     const ics = [
28:       'BEGIN:VCALENDAR',
29:       'VERSION:2.0',
30:       'PRODID:-//Career Lever AI//EN',
31:       'CALSCALE:GREGORIAN',
32:       'METHOD:PUBLISH',
33:       'BEGIN:VEVENT',
34:       `UID:${uid}`,
35:       `DTSTAMP:${dt(new Date().toISOString())}`,
36:       `DTSTART:${dt(start)}`,
37:       `DTEND:${dt(end)}`,
38:       `SUMMARY:${summary.replace(/\n/g,' ')}`,
39:       description ? `DESCRIPTION:${description.replace(/\n/g,' ')}` : '',
40:       location ? `LOCATION:${location.replace(/\n/g,' ')}` : '',
41:       organizer ? `ORGANIZER:MAILTO:${organizer}` : '',
42:       'END:VEVENT',
43:       'END:VCALENDAR'
44:     ].filter(Boolean).join('\r\n')
45:     return new NextResponse(ics, {
46:       headers: {
47:         'Content-Type': 'text/calendar; charset=utf-8',
48:         'Content-Disposition': 'attachment; filename="event.ics"'
49:       }
50:     })
51:   } catch (e) {
52:     return NextResponse.json({ error: 'Failed to generate ICS' }, { status: 500 })
53:   }
54: }
</file>

<file path="src/app/api/career-finder/autopilot/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
  5: import { extractWeightedKeywords } from '@/lib/keyword-extraction'
  6: import { withRetryOptional } from '@/lib/db-retry'
  7: import connectToDatabase from '@/lib/mongodb'
  8: import Resume from '@/models/Resume'
  9: 
 10: /**
 11:  * Autopilot Trigger Endpoint
 12:  * 
 13:  * Called after resume upload to:
 14:  * 1. Extract resume signals (keywords, location) - 1 API call
 15:  * 2. Run comprehensive job research - 1 API call
 16:  * 3. Cache everything for Steps 2-7
 17:  * 
 18:  * Total: 2 Perplexity calls to prepare entire flow
 19:  */
 20: export async function POST(request: NextRequest) {
 21:   try {
 22:     const session = await getServerSession(authOptions)
 23:     if (!session?.user?.id) {
 24:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 25:     }
 26: 
 27:     const { resumeId, jobTitle, company, jobDescription } = await request.json()
 28: 
 29:     if (!resumeId) {
 30:       return NextResponse.json(
 31:         { error: 'Missing resumeId' },
 32:         { status: 400 }
 33:       )
 34:     }
 35: 
 36:     await connectToDatabase()
 37: 
 38:     // Get the resume
 39:     const resume = await Resume.findOne({
 40:       _id: resumeId,
 41:       userId: session.user.id
 42:     })
 43: 
 44:     if (!resume || !resume.extractedText) {
 45:       return NextResponse.json(
 46:         { error: 'Resume not found or has no text' },
 47:         { status: 404 }
 48:       )
 49:     }
 50: 
 51:     const resumeText = resume.extractedText
 52: 
 53:     console.log('[AUTOPILOT] Starting autopilot flow for resume:', resumeId)
 54:     console.log('[AUTOPILOT] Resume text length:', resumeText.length)
 55: 
 56:     // STEP 1: Extract weighted keywords using new multi-factor system
 57:     console.log('[AUTOPILOT] Extracting weighted keywords...')
 58:     const keywordResult = await extractWeightedKeywords(resumeText)
 59:     
 60:     console.log('[AUTOPILOT] Weighted keywords extracted:', {
 61:       total: keywordResult.allKeywords.length,
 62:       top: keywordResult.topKeywords.length,
 63:       primaryIndustry: keywordResult.metadata.primaryIndustry
 64:     })
 65: 
 66:     // STEP 1.5: Extract location from resume signals (still need Perplexity for this)
 67:     const signals = await PerplexityIntelligenceService.extractResumeSignals(
 68:       resumeText,
 69:       50
 70:     )
 71: 
 72:     // Merge weighted keywords with signals
 73:     const enhancedSignals = {
 74:       ...signals,
 75:       keywords: keywordResult.topKeywords, // Use top 18 weighted keywords
 76:       allKeywords: keywordResult.allKeywords,
 77:       keywordMetadata: keywordResult.metadata
 78:     }
 79: 
 80:     console.log('[AUTOPILOT] Enhanced signals:', {
 81:       keywords: enhancedSignals.keywords?.length || 0,
 82:       location: enhancedSignals.location,
 83:       primaryIndustry: keywordResult.metadata.primaryIndustry
 84:     })
 85: 
 86:     // STEP 2: Run comprehensive research if job details provided - API CALL #2
 87:     // eslint-disable-next-line @typescript-eslint/no-explicit-any
 88:     let comprehensiveResearch: any = null
 89:     if (jobTitle && company && jobDescription) {
 90:       console.log('[AUTOPILOT] Running comprehensive job research...')
 91:       
 92:       const researchResult = await PerplexityIntelligenceService.comprehensiveJobResearch({
 93:         jobTitle,
 94:         company,
 95:         jobDescription,
 96:         location: signals.location,
 97:         resumeText,
 98:         resumeSkills: signals.keywords
 99:       })
100: 
101:       if (researchResult.success && researchResult.data) {
102:         comprehensiveResearch = researchResult.data
103:         console.log('[AUTOPILOT] Comprehensive research complete:', {
104:           matchScore: comprehensiveResearch?.jobAnalysis?.matchScore,
105:           contacts: comprehensiveResearch?.hiringContacts?.length || 0,
106:           news: comprehensiveResearch?.news?.length || 0
107:         })
108:       }
109:     }
110: 
111:     // STEP 3: Save to resume document for caching (with retry logic)
112:     resume.resumeSignals = enhancedSignals
113:     if (comprehensiveResearch) {
114:       resume.comprehensiveResearch = comprehensiveResearch
115:       resume.comprehensiveResearchAt = new Date()
116:     }
117:     
118:     const saveResult = await withRetryOptional(
119:       () => resume.save(),
120:       { maxRetries: 3, timeoutMs: 10000 }
121:     )
122: 
123:     if (saveResult) {
124:       console.log('[AUTOPILOT] ✅ Data cached to resume document')
125:     } else {
126:       console.warn('[AUTOPILOT] ⚠️ Failed to cache to database, but continuing with in-memory data')
127:     }
128: 
129:     return NextResponse.json({
130:       success: true,
131:       signals: enhancedSignals,
132:       keywordMetadata: keywordResult.metadata,
133:       comprehensiveResearch,
134:       message: 'Autopilot data prepared and cached with weighted keywords'
135:     })
136: 
137:   } catch (error) {
138:     console.error('[AUTOPILOT] Error:', error)
139:     return NextResponse.json(
140:       { 
141:         error: 'Failed to prepare autopilot data',
142:         details: error instanceof Error ? error.message : 'Unknown error'
143:       },
144:       { status: 500 }
145:     )
146:   }
147: }
</file>

<file path="src/app/api/commute/estimate/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { webScraper } from '@/lib/web-scraper'
 3: 
 4: export const dynamic = 'force-dynamic'
 5: 
 6: export async function POST(req: NextRequest) {
 7:   try {
 8:     const { origin, destination, mode } = await req.json()
 9:     if (!origin || !destination) return NextResponse.json({ error: 'origin and destination required' }, { status: 400 })
10:     const profile = (mode === 'walking' || mode === 'cycling') ? mode : 'driving'
11:     const mins = await webScraper.getTravelDurationMins(origin, destination, profile as any)
12:     if (mins == null) return NextResponse.json({ success: false, error: 'No route' }, { status: 200 })
13:     return NextResponse.json({ success: true, minutes: mins })
14:   } catch (e) {
15:     return NextResponse.json({ error: 'Failed to estimate commute' }, { status: 500 })
16:   }
17: }
</file>

<file path="src/app/api/company/contacts/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { isRateLimited } from '@/lib/rate-limit'
 5: import { webScraper } from '@/lib/web-scraper'
 6: import { z } from 'zod'
 7: import { getOrCreateRequestId, logRequestStart, logRequestEnd, now, durationMs } from '@/lib/observability'
 8: import { redisGetJSON, redisSetJSON } from '@/lib/redis'
 9: 
10: export async function POST(request: NextRequest) {
11:   try {
12:     const requestId = getOrCreateRequestId(request.headers as any)
13:     const startedAt = now()
14:     const routeKey = 'company:contacts'
15:     logRequestStart(routeKey, requestId)
16:     const session = await getServerSession(authOptions)
17:     if (!session?.user?.email) {
18:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
19:     }
20:     const rl = await isRateLimited((session.user as any).id, 'company:contacts')
21:     if (rl) return NextResponse.json({ error: 'Rate limited' }, { status: 429 })
22: 
23:     const schema = z.object({
24:       companyName: z.string().min(2),
25:       companyWebsite: z.string().url().optional(),
26:       roleHints: z.array(z.string()).min(1),
27:       locationHint: z.string().optional()
28:     })
29:     const raw = await request.json()
30:     const parsed = schema.safeParse(raw)
31:     if (!parsed.success) {
32:       return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
33:     }
34:     const { companyName, companyWebsite, roleHints, locationHint } = parsed.data as any
35: 
36:     // Redis cache
37:     const cacheKey = `company:contacts:${companyName}:${(companyWebsite||'').slice(0,80)}:${(roleHints||[]).join(',').slice(0,120)}:${locationHint||''}`
38:     const cached = await redisGetJSON<any>(cacheKey)
39:     if (cached) {
40:       logRequestEnd(routeKey, requestId, 200, durationMs(startedAt), { cache: 'hit' })
41:       return NextResponse.json({ success: true, contacts: cached, cache: 'hit' })
42:     }
43: 
44:     // Scrape website contact info (best-effort)
45:     let siteContacts = { emails: [] as string[], phones: [] as string[], addresses: [] as string[] }
46:     if (companyWebsite) {
47:       try { siteContacts = await webScraper.scrapeContactInfoFromWebsite(companyWebsite) } catch {}
48:     }
49: 
50:     // Find likely hiring contacts via Google→LinkedIn
51:     const hiring = await webScraper.searchHiringContacts(companyName, roleHints, locationHint)
52: 
53:     const contacts = { site: siteContacts, people: hiring }
54:     await redisSetJSON(cacheKey, contacts, 60 * 30)
55:     logRequestEnd(routeKey, requestId, 200, durationMs(startedAt), { cache: 'miss' })
56:     const resp = NextResponse.json({ success: true, contacts })
57:     resp.headers.set('x-request-id', requestId)
58:     return resp
59:   } catch (e) {
60:     console.error('Company contacts error:', e)
61:     return NextResponse.json({ error: 'Failed to fetch contacts' }, { status: 500 })
62:   }
63: }
</file>

<file path="src/app/api/company/insights/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { isRateLimited } from '@/lib/rate-limit'
 5: import { AIService } from '@/lib/ai-service'
 6: import { z } from 'zod'
 7: 
 8: export async function POST(request: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) {
12:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     }
14: 
15:     const rl = await isRateLimited((session.user as any).id, 'company:insights')
16:     if (rl) {
17:       return NextResponse.json({ error: 'Rate limited' }, { status: 429 })
18:     }
19: 
20:     const schema = z.object({
21:       jobTitle: z.string().min(2),
22:       companyData: z.any(),
23:     })
24:     const raw = await request.json()
25:     const parsed = schema.safeParse(raw)
26:     if (!parsed.success) {
27:       return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
28:     }
29:     const { jobTitle, companyData } = parsed.data as any
30: 
31:     const insights = await AIService.generateCompanyInsights(companyData, jobTitle)
32:     return NextResponse.json({ success: true, insights })
33:   } catch (e) {
34:     console.error('Company insights error:', e)
35:     return NextResponse.json({ error: 'Failed to generate company insights' }, { status: 500 })
36:   }
37: }
</file>

<file path="src/app/api/company/orchestrate/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import { authOptions } from '@/lib/auth'
  4: import { isRateLimited } from '@/lib/rate-limit'
  5: import { z } from 'zod'
  6: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
  7: import { getOrCreateRequestId, logRequestStart, logRequestEnd, now, durationMs, logAIUsage } from '@/lib/observability'
  8: import { redisGetJSON, redisSetJSON } from '@/lib/redis'
  9: import { webScraper } from '@/lib/web-scraper'
 10: 
 11: // Perplexity-only orchestrator
 12: 
 13: export const dynamic = 'force-dynamic'
 14: 
 15: export async function POST(request: NextRequest) {
 16:   try {
 17:     const requestId = getOrCreateRequestId(request.headers)
 18:     const startedAt = now()
 19:     const routeKey = 'company:orchestrate'
 20:     logRequestStart(routeKey, requestId)
 21:     const session = await getServerSession(authOptions)
 22:     if (!session?.user?.email) {
 23:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 24:     }
 25: 
 26:     const rl = await isRateLimited((session.user as any).id, 'company:orchestrate')
 27:     if (rl) return NextResponse.json({ error: 'Rate limited' }, { status: 429 })
 28: 
 29:     // Inputs validated above
 30: 
 31:     const schema = z.object({
 32:       companyName: z.string().min(2),
 33:       jobPostingUrl: z.string().url().optional(),
 34:       companyWebsite: z.string().url().optional(),
 35:       linkedinCompanyUrl: z.string().url().optional(),
 36:       roleHints: z.array(z.string()).default(['Recruiter','Talent Acquisition','Engineering Manager','Head of People']),
 37:       locationHint: z.string().optional(),
 38:       jobTitle: z.string().optional(),
 39:     })
 40:     const raw = await request.json()
 41:     const parsed = schema.safeParse(raw)
 42:     if (!parsed.success) {
 43:       return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
 44:     }
 45:     let { companyName, jobPostingUrl, companyWebsite, linkedinCompanyUrl, roleHints, locationHint, jobTitle } = parsed.data as any
 46:     
 47:     // CRITICAL FIX: Sanitize company name (remove noise from PDF extraction)
 48:     const originalCompanyName = companyName
 49:     companyName = companyName
 50:       .replace(/\s*\(.*?\)\s*/g, '') // Remove text in parentheses
 51:       .replace(/\s*-.*$/g, '') // Remove everything after dash
 52:       .replace(/\s+/g, ' ') // Normalize spaces
 53:       .trim()
 54:       .split(/\s+/)
 55:       .slice(0, 5) // Max 5 words
 56:       .join(' ')
 57:     
 58:     console.log('[COMPANY_ORCHESTRATE] Sanitized:', {
 59:       original: originalCompanyName,
 60:       sanitized: companyName,
 61:       changed: originalCompanyName !== companyName
 62:     })
 63: 
 64:     // Redis cache: key by companyName+jobPostingUrl
 65:     const cacheKey = `company:orchestrate:${companyName}:${jobPostingUrl || ''}`
 66:     const cached = await redisGetJSON<any>(cacheKey)
 67:     if (cached) {
 68:       logRequestEnd(routeKey, requestId, 200, durationMs(startedAt), { cache: 'hit' })
 69:       return NextResponse.json({ success: true, result: cached, cache: 'hit' })
 70:     }
 71: 
 72:     // Compose research and OSINT (V2)
 73:     const researchV2 = await PerplexityIntelligenceService.researchCompanyV2({ company: companyName, role: jobTitle, geo: locationHint })
 74:     const research = researchV2.data
 75:     // Try comprehensive scrape (will attempt website discovery internally)
 76:     let scraped: any = null
 77:     try { scraped = await webScraper.scrapeCompanyData(companyName, companyWebsite) } catch {}
 78:     // Supplemental: Glassdoor summary and contacts
 79:     let summary = null as any
 80:     try { summary = await webScraper.scrapeGlassdoorReviewsSummary(companyName) } catch {}
 81:     let contacts: { site: { emails: string[]; phones: string[]; addresses: string[] }; people: any[] } = { site: { emails: [], phones: [], addresses: [] }, people: [] as any[] }
 82:     try {
 83:       let site = { emails: [] as string[], phones: [] as string[], addresses: [] as string[] }
 84:       if (scraped?.contactInfo) {
 85:         site = scraped.contactInfo
 86:       } else if (companyWebsite) {
 87:         try { site = await webScraper.scrapeContactInfoFromWebsite(companyWebsite) } catch {}
 88:       }
 89:       const peopleWeb = await webScraper.searchHiringContacts(companyName, roleHints, locationHint)
 90:       const peoplePpxV2 = await PerplexityIntelligenceService.hiringContactsV2(companyName)
 91:       const peoplePpx = peoplePpxV2.data || []
 92:       const mergedPeople = [...(peopleWeb || []), ...(peoplePpx || [])]
 93:       contacts = { site, people: mergedPeople }
 94:     } catch {}
 95:     // Infer company domain for email pattern if missing
 96:     try {
 97:       const domain = (scraped?.website || companyWebsite || '').replace(/^https?:\/\//,'').replace(/\/$/,'')
 98:       if (domain && contacts.people?.length) {
 99:         contacts.people = contacts.people.map((p: any) => {
100:           if (!p.email && p.name && /\s/.test(p.name)) {
101:             const parts = p.name.toLowerCase().split(/\s+/)
102:             const inferred = `${parts[0]}.${parts[parts.length-1]}@${domain}`
103:             return { ...p, email: inferred, emailType: 'inferred' }
104:           }
105:           return p
106:         })
107:       }
108:     } catch {}
109:     const result = { ...(scraped || {}), ...research, summary, contacts }
110:     await redisSetJSON(cacheKey, result, 60 * 30)
111:     logRequestEnd(routeKey, requestId, 200, durationMs(startedAt), { cache: 'miss' })
112:     return NextResponse.json({ success: true, result })
113:   } catch (e) {
114:     console.error('Company orchestrate error:', e)
115:     return NextResponse.json({ error: 'Failed to orchestrate company research' }, { status: 500 })
116:   }
117: }
</file>

<file path="src/app/api/company/research/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 6: 
 7: export const runtime = 'nodejs'
 8: export const dynamic = 'force-dynamic'
 9: 
10: export async function POST(req: NextRequest) {
11:   try {
12:     const session = await getServerSession(authOptions)
13:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
14:     await connectToDatabase()
15: 
16:     const body = await req.json().catch(()=>({})) as any
17:     let company = (body.company || body.companyName || '').toString().trim()
18:     if (!company) return NextResponse.json({ error: 'company required' }, { status: 400 })
19:     
20:     // CRITICAL FIX: Sanitize company name (remove noise from PDF extraction)
21:     const originalCompany = company
22:     company = company
23:       .replace(/\s*\(.*?\)\s*/g, '') // Remove text in parentheses
24:       .replace(/\s*-.*$/g, '') // Remove everything after dash
25:       .replace(/\s+/g, ' ') // Normalize spaces
26:       .trim()
27:       .split(/\s+/)
28:       .slice(0, 5) // Max 5 words
29:       .join(' ')
30:     
31:     console.log('[COMPANY_RESEARCH] Sanitized:', {
32:       original: originalCompany,
33:       sanitized: company,
34:       changed: originalCompany !== company
35:     })
36: 
37:     const intel = await PerplexityIntelligenceService.researchCompanyV2({ company })
38:     const contacts = await PerplexityIntelligenceService.hiringContactsV2(company)
39: 
40:     // Normalize contacts with mailto links
41:     const contactList = (contacts.data || []).map(c => ({
42:       name: c.name,
43:       title: c.title,
44:       department: c.department,
45:       linkedinUrl: c.linkedinUrl || null,
46:       email: c.email || null,
47:       emailType: c.emailType || 'inferred',
48:       mailto: c.email ? `mailto:${c.email}` : null,
49:       altEmails: c.alternativeEmails || [],
50:       source: c.source,
51:       confidence: c.confidence
52:     }))
53: 
54:     return NextResponse.json({ success: intel.success && contacts.success, company: intel.data, contacts: contactList, meta: { cached: intel.cached && contacts.cached } })
55:   } catch (e) {
56:     return NextResponse.json({ error: 'company research failed' }, { status: 500 })
57:   }
58: }
</file>

<file path="src/app/api/company/reviews/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { isRateLimited } from '@/lib/rate-limit'
 5: import { webScraper } from '@/lib/web-scraper'
 6: import { z } from 'zod'
 7: import { getOrCreateRequestId, logRequestStart, logRequestEnd, now, durationMs } from '@/lib/observability'
 8: import { redisGetJSON, redisSetJSON } from '@/lib/redis'
 9: 
10: export async function POST(request: NextRequest) {
11:   try {
12:     const requestId = getOrCreateRequestId(request.headers as any)
13:     const startedAt = now()
14:     const routeKey = 'company:reviews'
15:     logRequestStart(routeKey, requestId)
16:     const session = await getServerSession(authOptions)
17:     if (!session?.user?.email) {
18:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
19:     }
20:     const rl = await isRateLimited((session.user as any).id, 'company:reviews')
21:     if (rl) return NextResponse.json({ error: 'Rate limited' }, { status: 429 })
22: 
23:     const schema = z.object({ companyName: z.string().min(2) })
24:     const raw = await request.json()
25:     const parsed = schema.safeParse(raw)
26:     if (!parsed.success) {
27:       return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
28:     }
29:     const { companyName } = parsed.data as any
30:     const cacheKey = `company:reviews:${companyName}`
31:     const cached = await redisGetJSON<any>(cacheKey)
32:     if (cached) {
33:       logRequestEnd(routeKey, requestId, 200, durationMs(startedAt), { cache: 'hit' })
34:       const resp = NextResponse.json({ success: true, summary: cached, cache: 'hit' })
35:       resp.headers.set('x-request-id', requestId)
36:       return resp
37:     }
38:     const summary = await webScraper.scrapeGlassdoorReviewsSummary(companyName)
39:     await redisSetJSON(cacheKey, summary, 60 * 60)
40:     logRequestEnd(routeKey, requestId, 200, durationMs(startedAt), { cache: 'miss' })
41:     const resp2 = NextResponse.json({ success: true, summary })
42:     resp2.headers.set('x-request-id', requestId)
43:     return resp2
44:   } catch (e) {
45:     console.error('Company reviews error:', e)
46:     return NextResponse.json({ error: 'Failed to fetch reviews' }, { status: 500 })
47:   }
48: }
</file>

<file path="src/app/api/contacts/email-outreach/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 5: 
 6: export async function POST(request: NextRequest) {
 7:   try {
 8:     const session = await getServerSession(authOptions)
 9:     if (!session?.user?.id) {
10:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
11:     }
12:     
13:     const { 
14:       hiringContact, 
15:       jobTitle, 
16:       company, 
17:       resumeHighlights 
18:     } = await request.json()
19:     
20:     if (!hiringContact || !jobTitle || !company) {
21:       return NextResponse.json(
22:         { error: 'Missing required fields: hiringContact, jobTitle, company' },
23:         { status: 400 }
24:       )
25:     }
26:     
27:     if (!hiringContact.name || !hiringContact.title) {
28:       return NextResponse.json(
29:         { error: 'hiringContact must include name and title' },
30:         { status: 400 }
31:       )
32:     }
33:     
34:     const result = await PerplexityIntelligenceService.generateEmailOutreach({
35:       hiringContact,
36:       jobTitle,
37:       company,
38:       resumeHighlights: resumeHighlights || []
39:     })
40:     
41:     return NextResponse.json(result)
42:   } catch (error) {
43:     console.error('[API] Email outreach error:', error)
44:     return NextResponse.json(
45:       { error: 'Failed to generate email outreach templates' },
46:       { status: 500 }
47:     )
48:   }
49: }
</file>

<file path="src/app/api/cover-letter/list/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import CoverLetter from '@/models/CoverLetter'
 6: 
 7: export async function GET(_request: NextRequest) {
 8: 	const session = await getServerSession(authOptions)
 9: 	if (!session?.user?.id) {
10: 		return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
11: 	}
12: 	await connectToDatabase()
13: 	const letters = await CoverLetter.find({ userId: (session.user as any).id })
14: 		.sort({ createdAt: -1 })
15: 		.limit(10)
16: 		.select('jobTitle companyName createdAt content')
17: 		.lean()
18: 	return NextResponse.json({ success: true, letters })
19: }
</file>

<file path="src/app/api/cron/daily/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: 
 7: // Trigger daily jobs: job suggestions and inbox sync (requires platform cron hitting this route)
 8: export async function GET(_req: NextRequest) {
 9:   try {
10:     // No auth required for platform cron; optionally add a shared secret header check if desired
11:     // Kick off alerts run and inbox run
12:     const base = process.env.NEXT_PUBLIC_BASE_URL || process.env.NEXTAUTH_URL || 'http://localhost:3000'
13:     const [a, b, c] = await Promise.allSettled([
14:       fetch(`${base}/api/alerts/run`, { method: 'POST' } as any),
15:       fetch(`${base}/api/inbox/run`, { method: 'POST' } as any),
16:       fetch(`${base}/api/job-boards/autopilot/search`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ keywords: '', locations: '', days: 1, limit: 10 }) } as any),
17:     ])
18:     return NextResponse.json({ success: true, alerts: a.status, inbox: b.status, autopilot: c.status })
19:   } catch (e) {
20:     return NextResponse.json({ error: 'Failed to run daily jobs' }, { status: 500 })
21:   }
22: }
</file>

<file path="src/app/api/cron/process-followups/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { FollowUpAutomationService } from '@/lib/followup-automation'
 3: 
 4: export const dynamic = 'force-dynamic'
 5: export const runtime = 'nodejs'
 6: export const maxDuration = 300 // 5 minutes for processing
 7: 
 8: /**
 9:  * GET /api/cron/process-followups
10:  * 
11:  * Background job to process pending follow-ups
12:  * Should be called by cron (Railway Cron, Vercel Cron, or external service)
13:  * 
14:  * SETUP OPTIONS:
15:  * 
16:  * 1. Railway Cron (Recommended):
17:  *    Add to railway.json:
18:  *    {
19:  *      "cron": [{
20:  *        "schedule": "0 9,14,17 * * *",
21:  *        "command": "curl https://yourapp.com/api/cron/process-followups"
22:  *      }]
23:  *    }
24:  * 
25:  * 2. Vercel Cron:
26:  *    Add to vercel.json:
27:  *    {
28:  *      "crons": [{
29:  *        "path": "/api/cron/process-followups",
30:  *        "schedule": "0 9,14,17 * * *"
31:  *      }]
32:  *    }
33:  * 
34:  * 3. External Cron (EasyCron, cron-job.org):
35:  *    Set up HTTP GET to this endpoint every 3 hours
36:  * 
37:  * Security: Add CRON_SECRET env var and check it here
38:  */
39: export async function GET(request: NextRequest) {
40:   const startTime = Date.now()
41:   
42:   try {
43:     // Optional: Verify cron secret for security
44:     const authHeader = request.headers.get('authorization')
45:     const cronSecret = process.env.CRON_SECRET
46:     
47:     if (cronSecret && authHeader !== `Bearer ${cronSecret}`) {
48:       console.warn('[CRON] Unauthorized cron request')
49:       return NextResponse.json(
50:         { error: 'Unauthorized' },
51:         { status: 401 }
52:       )
53:     }
54:     
55:     console.log('[CRON] Starting follow-up processing...')
56:     
57:     // Process all pending follow-ups
58:     const result = await FollowUpAutomationService.processPendingFollowUps()
59:     
60:     const duration = Date.now() - startTime
61:     
62:     console.log('[CRON] Processing complete:', {
63:       duration: `${duration}ms`,
64:       ...result
65:     })
66:     
67:     return NextResponse.json({
68:       success: true,
69:       ...result,
70:       duration_ms: duration,
71:       timestamp: new Date().toISOString()
72:     })
73:     
74:   } catch (error) {
75:     console.error('[CRON] Processing error:', error)
76:     
77:     return NextResponse.json(
78:       {
79:         success: false,
80:         error: error instanceof Error ? error.message : 'Unknown error',
81:         duration_ms: Date.now() - startTime
82:       },
83:       { status: 500 }
84:     )
85:   }
86: }
87: 
88: /**
89:  * POST /api/cron/process-followups
90:  * Same as GET but for POST-based cron services
91:  */
92: export async function POST(request: NextRequest) {
93:   return GET(request)
94: }
</file>

<file path="src/app/api/cron/resume-years-backfill/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import connectToDatabase from '@/lib/mongodb'
 3: import Resume from '@/models/Resume'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: 
 7: export async function POST(_req: NextRequest) {
 8:   try {
 9:     await connectToDatabase()
10:     const cursor = await Resume.find({ $or: [{ yearsExperience: { $exists: false } }, { yearsExperience: null }] }).limit(500)
11:     let updated = 0
12:     for (const r of cursor) {
13:       try {
14:         const text: string = (r as any).extractedText || ''
15:         let years = 0
16:         // Heuristic: count year ranges like 2012-2016, 2018–2021, etc.
17:         const matches = text.match(/(19|20)\d{2}\s*[–-]\s*(19|20)\d{2}/g) || []
18:         const spans = matches.map(m => {
19:           const parts = m.split(/[–-]/).map(x => parseInt(x.trim()))
20:           return Math.max(0, (parts[1] || 0) - (parts[0] || 0))
21:         })
22:         const sum = spans.reduce((a, b) => a + b, 0)
23:         years = Math.max(years, Math.round(sum || 0))
24:         if (years > 0) {
25:           await Resume.updateOne({ _id: (r as any)._id }, { $set: { yearsExperience: years } })
26:           updated++
27:         }
28:       } catch {}
29:     }
30:     return NextResponse.json({ success: true, updated })
31:   } catch (e) {
32:     return NextResponse.json({ error: 'Failed to backfill years' }, { status: 500 })
33:   }
34: }
</file>

<file path="src/app/api/debug/cache-stats/route.ts">
  1: /**
  2:  * Cache Statistics Debug Endpoint
  3:  * 
  4:  * Provides detailed cache statistics for Perplexity AI integration.
  5:  * Access: /api/debug/cache-stats
  6:  */
  7: 
  8: import { NextRequest, NextResponse } from 'next/server'
  9: import { getServerSession } from 'next-auth'
 10: import { authOptions } from '@/lib/auth'
 11: import { PerplexityService } from '@/lib/perplexity-service'
 12: 
 13: /**
 14:  * GET /api/debug/cache-stats
 15:  * Get cache statistics
 16:  */
 17: export async function GET(request: NextRequest) {
 18:   try {
 19:     // Check authentication (optional - can be restricted to admins)
 20:     const session = await getServerSession(authOptions)
 21:     
 22:     // In production, restrict to authenticated users only
 23:     // TODO: Add admin role check when user roles are implemented
 24:     if (process.env.NODE_ENV === 'production' && !session) {
 25:       return NextResponse.json(
 26:         { error: 'Unauthorized - Authentication required' },
 27:         { status: 401 }
 28:       )
 29:     }
 30: 
 31:     // Get cache stats from PerplexityService
 32:     const cacheStats = PerplexityService.getCacheStats()
 33: 
 34:     // Calculate additional metrics
 35:     const stats = {
 36:       ...cacheStats,
 37:       efficiency: cacheStats.totalEntries > 0
 38:         ? {
 39:             freshPercentage: (cacheStats.entriesByAge.fresh / cacheStats.totalEntries) * 100,
 40:             stalePercentage: (cacheStats.entriesByAge.stale / cacheStats.totalEntries) * 100,
 41:             avgEntrySize: cacheStats.totalEntries > 0
 42:               ? cacheStats.totalSize / cacheStats.totalEntries
 43:               : 0,
 44:             totalSizeMB: cacheStats.totalSize / (1024 * 1024)
 45:           }
 46:         : null,
 47:       timestamp: Date.now()
 48:     }
 49: 
 50:     return NextResponse.json({
 51:       success: true,
 52:       stats
 53:     })
 54:   } catch (error: any) {
 55:     console.error('Cache stats endpoint error:', error)
 56:     return NextResponse.json(
 57:       { error: 'Failed to retrieve cache statistics', details: error.message },
 58:       { status: 500 }
 59:     )
 60:   }
 61: }
 62: 
 63: /**
 64:  * DELETE /api/debug/cache-stats
 65:  * Clear cache
 66:  */
 67: export async function DELETE(request: NextRequest) {
 68:   try {
 69:     // Check authentication
 70:     const session = await getServerSession(authOptions)
 71:     
 72:     // TODO: Add admin role check when user roles are implemented
 73:     if (!session) {
 74:       return NextResponse.json(
 75:         { error: 'Unauthorized - Authentication required' },
 76:         { status: 401 }
 77:       )
 78:     }
 79: 
 80:     const clearedCount = PerplexityService.clearCache()
 81: 
 82:     return NextResponse.json({
 83:       success: true,
 84:       message: `Cache cleared: ${clearedCount} entries removed`,
 85:       clearedCount
 86:     })
 87:   } catch (error: any) {
 88:     console.error('Cache clear error:', error)
 89:     return NextResponse.json(
 90:       { error: 'Failed to clear cache', details: error.message },
 91:       { status: 500 }
 92:     )
 93:   }
 94: }
 95: 
 96: /**
 97:  * GET /api/debug/cache-stats/detailed
 98:  * Get detailed cache information
 99:  */
100: export async function POST(request: NextRequest) {
101:   try {
102:     // Check authentication
103:     const session = await getServerSession(authOptions)
104:     
105:     // TODO: Add admin role check when user roles are implemented
106:     if (!session) {
107:       return NextResponse.json(
108:         { error: 'Unauthorized - Authentication required' },
109:         { status: 401 }
110:       )
111:     }
112: 
113:     const body = await request.json()
114:     const { includeKeys = false } = body
115: 
116:     const cacheStats = PerplexityService.getCacheStats()
117: 
118:     // Get additional detailed information
119:     const detailedStats = {
120:       ...cacheStats,
121:       cacheHealth: {
122:         status: cacheStats.totalEntries < 100 ? 'healthy' :
123:                 cacheStats.totalEntries < 500 ? 'moderate' : 'high',
124:         recommendation: cacheStats.totalEntries > 800
125:           ? 'Consider clearing stale entries'
126:           : 'Cache is performing well'
127:       },
128:       memoryUsage: {
129:         totalBytes: cacheStats.totalSize,
130:         totalKB: cacheStats.totalSize / 1024,
131:         totalMB: cacheStats.totalSize / (1024 * 1024),
132:         estimatedHeapImpact: (cacheStats.totalSize / (1024 * 1024 * 1024)) * 100 // % of 1GB
133:       },
134:       recommendations: generateRecommendations(cacheStats)
135:     }
136: 
137:     return NextResponse.json({
138:       success: true,
139:       stats: detailedStats,
140:       timestamp: Date.now()
141:     })
142:   } catch (error: any) {
143:     console.error('Detailed cache stats error:', error)
144:     return NextResponse.json(
145:       { error: 'Failed to retrieve detailed cache statistics', details: error.message },
146:       { status: 500 }
147:     )
148:   }
149: }
150: 
151: /**
152:  * Generate cache recommendations based on stats
153:  */
154: function generateRecommendations(stats: any): string[] {
155:   const recommendations: string[] = []
156: 
157:   if (stats.totalEntries === 0) {
158:     recommendations.push('Cache is empty - requests are not being cached')
159:   }
160: 
161:   if (stats.totalEntries > 800) {
162:     recommendations.push('Cache is nearly full - consider implementing cache eviction or increasing max size')
163:   }
164: 
165:   if (stats.entriesByAge.stale > stats.entriesByAge.fresh) {
166:     recommendations.push('More stale entries than fresh - consider reducing TTL or clearing stale entries')
167:   }
168: 
169:   if (stats.totalSize > 50 * 1024 * 1024) { // 50MB
170:     recommendations.push('Cache size is large - monitor memory usage and consider compression')
171:   }
172: 
173:   if (recommendations.length === 0) {
174:     recommendations.push('Cache is healthy and performing optimally')
175:   }
176: 
177:   return recommendations
178: }
</file>

<file path="src/app/api/debug/performance/route.ts">
  1: /**
  2:  * Performance Monitoring Debug Endpoint
  3:  * 
  4:  * Provides detailed performance metrics for Perplexity AI integration.
  5:  * Access: /api/debug/performance
  6:  */
  7: 
  8: import { NextRequest, NextResponse } from 'next/server'
  9: import { getServerSession } from 'next-auth'
 10: import { authOptions } from '@/lib/auth'
 11: 
 12: // Performance metrics storage (in-memory for now)
 13: interface PerformanceMetric {
 14:   operation: string
 15:   duration: number
 16:   timestamp: number
 17:   success: boolean
 18:   error?: string
 19:   cacheHit?: boolean
 20:   tokenUsage?: {
 21:     prompt: number
 22:     completion: number
 23:     total: number
 24:   }
 25:   cost?: number
 26: }
 27: 
 28: class PerformanceMonitor {
 29:   private static instance: PerformanceMonitor
 30:   private metrics: PerformanceMetric[] = []
 31:   private readonly maxMetrics = 1000
 32: 
 33:   static getInstance(): PerformanceMonitor {
 34:     if (!PerformanceMonitor.instance) {
 35:       PerformanceMonitor.instance = new PerformanceMonitor()
 36:     }
 37:     return PerformanceMonitor.instance
 38:   }
 39: 
 40:   addMetric(metric: PerformanceMetric): void {
 41:     this.metrics.push(metric)
 42:     
 43:     // Keep only last N metrics
 44:     if (this.metrics.length > this.maxMetrics) {
 45:       this.metrics = this.metrics.slice(-this.maxMetrics)
 46:     }
 47:   }
 48: 
 49:   getMetrics(since?: number): PerformanceMetric[] {
 50:     if (since) {
 51:       return this.metrics.filter(m => m.timestamp >= since)
 52:     }
 53:     return this.metrics
 54:   }
 55: 
 56:   getStats() {
 57:     const now = Date.now()
 58:     const oneHourAgo = now - (60 * 60 * 1000)
 59:     const oneDayAgo = now - (24 * 60 * 60 * 1000)
 60: 
 61:     const recentMetrics = this.metrics.filter(m => m.timestamp >= oneHourAgo)
 62:     const dailyMetrics = this.metrics.filter(m => m.timestamp >= oneDayAgo)
 63: 
 64:     return {
 65:       totalRequests: this.metrics.length,
 66:       hourly: this.calculateStats(recentMetrics),
 67:       daily: this.calculateStats(dailyMetrics),
 68:       byOperation: this.groupByOperation(),
 69:       errorRate: this.calculateErrorRate(),
 70:       cacheEfficiency: this.calculateCacheEfficiency(),
 71:       costAnalysis: this.calculateCostAnalysis()
 72:     }
 73:   }
 74: 
 75:   private calculateStats(metrics: PerformanceMetric[]) {
 76:     if (metrics.length === 0) {
 77:       return {
 78:         count: 0,
 79:         avgDuration: 0,
 80:         p50: 0,
 81:         p95: 0,
 82:         p99: 0,
 83:         successRate: 0
 84:       }
 85:     }
 86: 
 87:     const durations = metrics.map(m => m.duration).sort((a, b) => a - b)
 88:     const successful = metrics.filter(m => m.success).length
 89: 
 90:     return {
 91:       count: metrics.length,
 92:       avgDuration: durations.reduce((a, b) => a + b, 0) / durations.length,
 93:       p50: this.percentile(durations, 0.50),
 94:       p95: this.percentile(durations, 0.95),
 95:       p99: this.percentile(durations, 0.99),
 96:       successRate: (successful / metrics.length) * 100
 97:     }
 98:   }
 99: 
100:   private percentile(arr: number[], p: number): number {
101:     if (arr.length === 0) return 0
102:     const index = Math.ceil(arr.length * p) - 1
103:     return arr[index]
104:   }
105: 
106:   private groupByOperation() {
107:     const groups: Record<string, {
108:       count: number
109:       avgDuration: number
110:       successRate: number
111:     }> = {}
112: 
113:     for (const metric of this.metrics) {
114:       if (!groups[metric.operation]) {
115:         groups[metric.operation] = { count: 0, avgDuration: 0, successRate: 0 }
116:       }
117: 
118:       const group = groups[metric.operation]
119:       group.count++
120:       group.avgDuration = (group.avgDuration * (group.count - 1) + metric.duration) / group.count
121:       group.successRate = ((group.successRate * (group.count - 1) + (metric.success ? 100 : 0)) / group.count)
122:     }
123: 
124:     return groups
125:   }
126: 
127:   private calculateErrorRate() {
128:     if (this.metrics.length === 0) return 0
129:     const errors = this.metrics.filter(m => !m.success).length
130:     return (errors / this.metrics.length) * 100
131:   }
132: 
133:   private calculateCacheEfficiency() {
134:     const cacheableMetrics = this.metrics.filter(m => m.cacheHit !== undefined)
135:     if (cacheableMetrics.length === 0) {
136:       return { hitRate: 0, hits: 0, misses: 0 }
137:     }
138: 
139:     const hits = cacheableMetrics.filter(m => m.cacheHit).length
140:     const misses = cacheableMetrics.length - hits
141: 
142:     return {
143:       hitRate: (hits / cacheableMetrics.length) * 100,
144:       hits,
145:       misses
146:     }
147:   }
148: 
149:   private calculateCostAnalysis() {
150:     const metricsWithCost = this.metrics.filter(m => m.cost !== undefined)
151:     if (metricsWithCost.length === 0) {
152:       return { totalCost: 0, avgCost: 0, maxCost: 0 }
153:     }
154: 
155:     const costs = metricsWithCost.map(m => m.cost!)
156:     return {
157:       totalCost: costs.reduce((a, b) => a + b, 0),
158:       avgCost: costs.reduce((a, b) => a + b, 0) / costs.length,
159:       maxCost: Math.max(...costs)
160:     }
161:   }
162: 
163:   clearMetrics(): void {
164:     this.metrics = []
165:   }
166: }
167: 
168: // Export for use in other files
169: export const performanceMonitor = PerformanceMonitor.getInstance()
170: 
171: /**
172:  * GET /api/debug/performance
173:  * Get performance statistics
174:  */
175: export async function GET(request: NextRequest) {
176:   try {
177:     // Check authentication (optional - can be restricted to admins)
178:     const session = await getServerSession(authOptions)
179:     
180:     // In production, restrict to authenticated users only
181:     // TODO: Add admin role check when user roles are implemented
182:     if (process.env.NODE_ENV === 'production' && !session) {
183:       return NextResponse.json(
184:         { error: 'Unauthorized - Authentication required' },
185:         { status: 401 }
186:       )
187:     }
188: 
189:     const { searchParams } = new URL(request.url)
190:     const since = searchParams.get('since')
191:     const raw = searchParams.get('raw') === 'true'
192: 
193:     const monitor = PerformanceMonitor.getInstance()
194: 
195:     if (raw) {
196:       const metrics = since 
197:         ? monitor.getMetrics(parseInt(since))
198:         : monitor.getMetrics()
199: 
200:       return NextResponse.json({
201:         success: true,
202:         metrics,
203:         count: metrics.length
204:       })
205:     }
206: 
207:     const stats = monitor.getStats()
208: 
209:     return NextResponse.json({
210:       success: true,
211:       stats,
212:       timestamp: Date.now()
213:     })
214:   } catch (error: any) {
215:     console.error('Performance endpoint error:', error)
216:     return NextResponse.json(
217:       { error: 'Failed to retrieve performance metrics', details: error.message },
218:       { status: 500 }
219:     )
220:   }
221: }
222: 
223: /**
224:  * DELETE /api/debug/performance
225:  * Clear performance metrics
226:  */
227: export async function DELETE(request: NextRequest) {
228:   try {
229:     // Check authentication
230:     const session = await getServerSession(authOptions)
231:     
232:     // TODO: Add admin role check when user roles are implemented
233:     if (!session) {
234:       return NextResponse.json(
235:         { error: 'Unauthorized - Authentication required' },
236:         { status: 401 }
237:       )
238:     }
239: 
240:     const monitor = PerformanceMonitor.getInstance()
241:     monitor.clearMetrics()
242: 
243:     return NextResponse.json({
244:       success: true,
245:       message: 'Performance metrics cleared'
246:     })
247:   } catch (error: any) {
248:     console.error('Performance clear error:', error)
249:     return NextResponse.json(
250:       { error: 'Failed to clear metrics', details: error.message },
251:       { status: 500 }
252:     )
253:   }
254: }
255: 
256: /**
257:  * POST /api/debug/performance/track
258:  * Manually track a performance metric
259:  */
260: export async function POST(request: NextRequest) {
261:   try {
262:     const body = await request.json()
263:     const { operation, duration, success, error, cacheHit, tokenUsage, cost } = body
264: 
265:     if (!operation || duration === undefined || success === undefined) {
266:       return NextResponse.json(
267:         { error: 'Missing required fields: operation, duration, success' },
268:         { status: 400 }
269:       )
270:     }
271: 
272:     const metric: PerformanceMetric = {
273:       operation,
274:       duration,
275:       timestamp: Date.now(),
276:       success,
277:       error,
278:       cacheHit,
279:       tokenUsage,
280:       cost
281:     }
282: 
283:     const monitor = PerformanceMonitor.getInstance()
284:     monitor.addMetric(metric)
285: 
286:     return NextResponse.json({
287:       success: true,
288:       message: 'Metric tracked'
289:     })
290:   } catch (error: any) {
291:     console.error('Performance track error:', error)
292:     return NextResponse.json(
293:       { error: 'Failed to track metric', details: error.message },
294:       { status: 500 }
295:     )
296:   }
297: }
</file>

<file path="src/app/api/debug/qa/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { PerplexityService } from '@/lib/perplexity-service'
 3: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 4: import { AIService } from '@/lib/ai-service'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function GET(req: NextRequest) {
 9:   try {
10:     const secret = req.headers.get('x-debug-secret') || ''
11:     const expected = process.env.DEBUG_SECRET || ''
12:     if (!expected || secret !== expected) {
13:       return NextResponse.json({ error: 'Forbidden' }, { status: 403 })
14:     }
15: 
16:     const checks: Record<string, any> = {}
17: 
18:     // 1) Basic Perplexity connectivity
19:     try {
20:       const ppx = new PerplexityService()
21:       const out = await ppx.makeRequest('You return only JSON.', 'Return {"ok":true,"ts":1}', { maxTokens: 20, temperature: 0 })
22:       checks.perplexityBasic = { ok: true, content: (out.content || '').slice(0, 80) }
23:     } catch (e: any) {
24:       checks.perplexityBasic = { ok: false, error: (e?.message || '').toString() }
25:     }
26: 
27:     // 2) Intelligence service
28:     try {
29:       const intel = await PerplexityIntelligenceService.researchCompanyV2({ company: 'Acme Inc' })
30:       checks.companyIntel = { ok: true, company: intel.data?.company || 'Acme Inc', sources: intel.data?.sources?.length || 0 }
31:     } catch (e: any) {
32:       checks.companyIntel = { ok: false, error: (e?.message || '').toString() }
33:     }
34: 
35:     // 3) Job analysis (model path)
36:     try {
37:       const jd = 'We need a React + TypeScript frontend engineer to build dashboards. Experience with APIs and testing required.'
38:       const a = await (AIService as any).analyzeJobDescription(jd)
39:       checks.jobAnalyze = { ok: true, title: a.jobTitle || '', reqs: (a.keyRequirements || []).length }
40:     } catch (e: any) {
41:       checks.jobAnalyze = { ok: false, error: (e?.message || '').toString() }
42:     }
43: 
44:     // 4) Salary plan (model path)
45:     try {
46:       const plan = await (AIService as any).generateSalaryNegotiationPlan({ jobTitle: 'Frontend Engineer', companyName: 'Acme', location: 'San Francisco, CA', seniority: 'mid', offer: { base: 'TBD' }, candidateHighlights: 'Built dashboards; improved performance 30%' })
47:       checks.salaryPlan = { ok: true, hasTargetRange: Boolean(plan?.targetRange?.base) }
48:     } catch (e: any) {
49:       checks.salaryPlan = { ok: false, error: (e?.message || '').toString() }
50:     }
51: 
52:     return NextResponse.json({ success: true, checks })
53:   } catch (e) {
54:     return NextResponse.json({ error: 'QA failed' }, { status: 500 })
55:   }
56: }
</file>

<file path="src/app/api/debug/scrape-health/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { webScraper } from '@/lib/web-scraper'
 3: 
 4: export const dynamic = 'force-dynamic'
 5: 
 6: export async function GET(_req: NextRequest) {
 7:   const res = await webScraper.healthCheck()
 8:   const headers = new Headers({ 'x-scrape-mode': res.mode })
 9:   return NextResponse.json({ success: res.ok, mode: res.mode, error: res.error }, { status: res.ok ? 200 : 503, headers })
10: }
</file>

<file path="src/app/api/health/route.ts">
 1: import { NextResponse } from 'next/server'
 2: 
 3: export const dynamic = 'force-dynamic'
 4: 
 5: export async function GET() {
 6:   try {
 7:     const payload = {
 8:       success: true,
 9:       ts: new Date().toISOString(),
10:       uptimeSec: Math.round(process.uptime()),
11:       commit: process.env.RAILWAY_GIT_COMMIT_SHA || process.env.VERCEL_GIT_COMMIT_SHA || null,
12:       config: {
13:         nextAuthUrl: !!process.env.NEXTAUTH_URL,
14:         nextAuthSecret: !!process.env.NEXTAUTH_SECRET,
15:         mongoDb: !!process.env.MONGODB_URI,
16:         perplexity: !!process.env.PERPLEXITY_API_KEY,
17:       }
18:     }
19:     return NextResponse.json(payload)
20:   } catch (e) {
21:     const error = e as Error
22:     return NextResponse.json({ success: false, error: error?.message || 'health failed' }, { status: 500 })
23:   }
24: }
25: 
26: // Note: single GET handler only; keep response minimal and cache-free.
</file>

<file path="src/app/api/inbox/label/create/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import OAuthToken, { IOAuthToken } from '@/models/OAuthToken'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     await connectToDatabase()
14:     const gmail = await OAuthToken.findOne({ userId: (session.user as any).id, provider: 'gmail' }).lean<IOAuthToken>()
15:     if (!gmail?.accessToken) return NextResponse.json({ error: 'Gmail not linked' }, { status: 400 })
16:     const labelName = 'Career Lever AI Applications'
17:     // Create label if missing
18:     const create = await fetch('https://gmail.googleapis.com/gmail/v1/users/me/labels', {
19:       method: 'POST',
20:       headers: { Authorization: `Bearer ${gmail.accessToken}`, 'Content-Type': 'application/json' },
21:       body: JSON.stringify({ name: labelName, labelListVisibility: 'labelShow', messageListVisibility: 'show' })
22:     })
23:     const json = await create.json().catch(()=>({}))
24:     if (create.ok || (json?.error?.code === 409)) {
25:       return NextResponse.json({ success: true, label: labelName })
26:     }
27:     return NextResponse.json({ error: 'Failed to create label' }, { status: 500 })
28:   } catch (e) {
29:     return NextResponse.json({ error: 'Failed to create label' }, { status: 500 })
30:   }
31: }
</file>

<file path="src/app/api/inbox/outlook/category/create/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import OAuthToken, { IOAuthToken } from '@/models/OAuthToken'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     await connectToDatabase()
14:     const outlook = await OAuthToken.findOne({ userId: (session.user as any).id, provider: 'outlook' }).lean<IOAuthToken>()
15:     if (!outlook?.accessToken) return NextResponse.json({ error: 'Outlook not linked' }, { status: 400 })
16:     const categoryName = 'Career Lever AI Applications'
17:     const create = await fetch('https://graph.microsoft.com/v1.0/me/outlook/masterCategories', {
18:       method: 'POST',
19:       headers: { Authorization: `Bearer ${outlook.accessToken}`, 'Content-Type': 'application/json' },
20:       body: JSON.stringify({ displayName: categoryName, color: 'preset0' })
21:     })
22:     if (create.ok || create.status === 409) return NextResponse.json({ success: true, category: categoryName })
23:     return NextResponse.json({ error: 'Failed to create category' }, { status: 500 })
24:   } catch (e) {
25:     return NextResponse.json({ error: 'Failed to create category' }, { status: 500 })
26:   }
27: }
</file>

<file path="src/app/api/inbox/run/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import { authOptions } from '@/lib/auth'
  4: import connectToDatabase from '@/lib/mongodb'
  5: import OAuthToken, { IOAuthToken } from '@/models/OAuthToken'
  6: import JobApplication from '@/models/JobApplication'
  7: 
  8: export const dynamic = 'force-dynamic'
  9: 
 10: function parseStatusFromSubject(subject: string): 'applied'|'interviewing'|'offer'|'rejected'|'saved'|null {
 11:   const s = subject.toLowerCase()
 12:   if (s.includes('interview') || s.includes('schedule') || s.includes('invite')) return 'interviewing'
 13:   if (s.includes('offer')) return 'offer'
 14:   if (s.includes('rejected') || s.includes('regret') || s.includes('unfortunately')) return 'rejected'
 15:   if (s.includes('application received') || s.includes('applied') || s.includes('thank you for applying')) return 'applied'
 16:   return null
 17: }
 18: 
 19: async function fetchGmailSubjects(accessToken: string): Promise<string[]> {
 20:   try {
 21:     const list = await fetch('https://gmail.googleapis.com/gmail/v1/users/me/messages?q=category:primary newer_than:30d&maxResults=12', {
 22:       headers: { Authorization: `Bearer ${accessToken}` }
 23:     })
 24:     if (!list.ok) return []
 25:     const json: any = await list.json()
 26:     const ids: string[] = Array.isArray(json.messages) ? json.messages.slice(0, 10).map((m: any) => m.id) : []
 27:     const subjects: string[] = []
 28:     for (const id of ids) {
 29:       try {
 30:         const res = await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${id}?format=metadata&metadataHeaders=Subject`, {
 31:           headers: { Authorization: `Bearer ${accessToken}` }
 32:         })
 33:         if (!res.ok) continue
 34:         const msg: any = await res.json()
 35:         const hdr = (msg.payload?.headers || []).find((h: any) => h.name === 'Subject')
 36:         if (hdr?.value) subjects.push(hdr.value)
 37:       } catch {}
 38:     }
 39:     return subjects
 40:   } catch {
 41:     return []
 42:   }
 43: }
 44: 
 45: async function fetchOutlookSubjects(accessToken: string): Promise<string[]> {
 46:   try {
 47:     const res = await fetch('https://graph.microsoft.com/v1.0/me/messages?$top=10&$select=subject,receivedDateTime', {
 48:       headers: { Authorization: `Bearer ${accessToken}` }
 49:     })
 50:     if (!res.ok) return []
 51:     const json: any = await res.json()
 52:     const items: any[] = Array.isArray(json.value) ? json.value : []
 53:     return items.map((m: any) => m.subject).filter((s: any) => typeof s === 'string')
 54:   } catch {
 55:     return []
 56:   }
 57: }
 58: 
 59: export async function POST(req: NextRequest) {
 60:   try {
 61:     const session = await getServerSession(authOptions)
 62:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 63:     await connectToDatabase()
 64:     const gmail = await OAuthToken.findOne({
 65:       userId: (session.user as any).id,
 66:       provider: 'gmail'
 67:     }).lean<IOAuthToken>().exec()
 68:     const outlook = await OAuthToken.findOne({
 69:       userId: (session.user as any).id,
 70:       provider: 'outlook'
 71:     }).lean<IOAuthToken>().exec()
 72:     let subjects: string[] = []
 73:     // Retry/backoff wrappers to improve resilience
 74:     const withRetry = async <T,>(fn: () => Promise<T>, attempts = 3, base = 500): Promise<T> => {
 75:       let last: any
 76:       for (let i=0;i<attempts;i++) {
 77:         try { return await fn() } catch (e) { last = e; await new Promise(r=>setTimeout(r, base * Math.pow(2, i))) }
 78:       }
 79:       throw last
 80:     }
 81:     if (gmail?.accessToken) {
 82:       try {
 83:         const s = await withRetry(() => fetchGmailSubjects(gmail.accessToken), 3, 500)
 84:         subjects.push(...s)
 85:       } catch {}
 86:     }
 87:     if (outlook?.accessToken) {
 88:       try {
 89:         const s = await withRetry(() => fetchOutlookSubjects(outlook.accessToken), 3, 500)
 90:         subjects.push(...s)
 91:       } catch {}
 92:     }
 93:     subjects = Array.from(new Set(subjects)).slice(0, 20)
 94: 
 95:     // Update statuses based on latest subjects
 96:     let updated = 0
 97:     for (const subj of subjects) {
 98:       const st = parseStatusFromSubject(subj)
 99:       if (!st) continue
100:       const app = await JobApplication.findOne({ userId: (session.user as any).id }).sort({ createdAt: -1 })
101:       if (app) { app.applicationStatus = st; await app.save(); updated++ }
102:     }
103:     return NextResponse.json({ success: true, updated, subjectsCount: subjects.length, gmailLinked: !!gmail, outlookLinked: !!outlook })
104:   } catch (e) {
105:     return NextResponse.json({ error: 'Failed to run inbox poller' }, { status: 500 })
106:   }
107: }
</file>

<file path="src/app/api/inbox/sync/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import OAuthToken from '@/models/OAuthToken'
 6: import JobApplication from '@/models/JobApplication'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: function parseStatusFromSubject(subject: string): 'applied'|'interviewing'|'offer'|'rejected'|'saved'|null {
11:   const s = subject.toLowerCase()
12:   if (s.includes('interview')) return 'interviewing'
13:   if (s.includes('offer')) return 'offer'
14:   if (s.includes('rejected') || s.includes('regret')) return 'rejected'
15:   if (s.includes('applied') || s.includes('application received')) return 'applied'
16:   return null
17: }
18: 
19: export async function POST(req: NextRequest) {
20:   try {
21:     const session = await getServerSession(authOptions)
22:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
23:     await connectToDatabase()
24:     const gmail = await OAuthToken.findOne({ userId: (session.user as any).id, provider: 'gmail' }).lean()
25:     const outlook = await OAuthToken.findOne({ userId: (session.user as any).id, provider: 'outlook' }).lean()
26: 
27:     // NOTE: For privacy & cost, we do not call providers here. Stub using existing app notes or future webhooks.
28:     // Hook: place mailbox polling here using gmail.accessToken / outlook.accessToken.
29: 
30:     const { subjects = [] } = await req.json().catch(()=>({ subjects: [] }))
31:     // subjects: array of email subject lines recently fetched by client or worker
32:     let updated = 0
33:     for (const subj of subjects) {
34:       const st = parseStatusFromSubject(subj)
35:       if (!st) continue
36:       // naive match: update most recent application
37:       const app = await JobApplication.findOne({ userId: (session.user as any).id }).sort({ createdAt: -1 })
38:       if (app) { app.applicationStatus = st; await app.save(); updated++ }
39:     }
40:     return NextResponse.json({ success: true, updated, gmailLinked: !!gmail, outlookLinked: !!outlook })
41:   } catch (e) {
42:     return NextResponse.json({ error: 'Failed to sync inbox' }, { status: 500 })
43:   }
44: }
</file>

<file path="src/app/api/insights/ats/score/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: 
 7: function tokenize(text: string): string[] {
 8:   return (text || '')
 9:     .toLowerCase()
10:     .replace(/[^a-z0-9\s]+/g, ' ')
11:     .split(/\s+/)
12:     .filter(Boolean)
13: }
14: 
15: export async function POST(req: NextRequest) {
16:   try {
17:     const session = await getServerSession(authOptions)
18:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
19:     const { resumeText, jobAnalysis } = await req.json()
20:     if (!resumeText || !jobAnalysis) return NextResponse.json({ error: 'resumeText and jobAnalysis required' }, { status: 400 })
21: 
22:     const tokens = tokenize(resumeText)
23:     const tokenSet = new Set(tokens)
24: 
25:     // Extract keywords from job analysis (supports multiple formats)
26:     const targets: string[] = [
27:       ...(jobAnalysis?.matchingSkills || []),
28:       ...(jobAnalysis?.missingSkills || []),
29:       ...(jobAnalysis?.skillsToHighlight || []),
30:       ...(jobAnalysis?.analysis?.keyRequirements || []),
31:       ...(jobAnalysis?.analysis?.preferredSkills || []),
32:       ...(jobAnalysis?.keywords || []),
33:     ]
34:       .map((s: string) => s.toLowerCase())
35:       .filter(Boolean)
36:     
37:     console.log('[ATS_SCORE] Job analysis structure:', Object.keys(jobAnalysis))
38:     console.log('[ATS_SCORE] Extracted targets count:', targets.length)
39: 
40:     // Normalize targets by splitting on separators and de-duping
41:     const expandedTargets = Array.from(
42:       new Set(
43:         targets.flatMap((t) => t.split(/[,;•\-]/).map((p) => p.trim()).filter((p) => p.length > 1))
44:       )
45:     )
46: 
47:     console.log('[ATS_SCORE] Expanded targets:', expandedTargets.slice(0, 10))
48:     console.log('[ATS_SCORE] Resume tokens (first 20):', Array.from(tokenSet).slice(0, 20))
49: 
50:     const matched: string[] = []
51:     const missing: string[] = []
52:     const density: Record<string, number> = {}
53: 
54:     for (const kw of expandedTargets) {
55:       const parts = kw.split(/\s+/)
56:       const present = parts.every((p) => tokenSet.has(p))
57:       if (present) matched.push(kw)
58:       else missing.push(kw)
59:       // density approx: count occurrences of first token
60:       const first = parts[0]
61:       density[kw] = tokens.filter((t) => t === first).length / Math.max(tokens.length, 1)
62:     }
63:     
64:     console.log('[ATS_SCORE] Matched keywords:', matched.length, matched.slice(0, 10))
65:     console.log('[ATS_SCORE] Missing keywords:', missing.length, missing.slice(0, 10))
66: 
67:     const coverage = matched.length / Math.max(expandedTargets.length || 1, 1)
68:     // Simple ATS score: 70% weight coverage, 30% weight length & repetition penalty
69:     const lengthPenalty = Math.min(0.15, Math.max(0, (tokens.length - 1200) / 6000))
70:     const repetitionPenalty = Math.min(0.15, matched.length ? 0 : 0.1)
71:     const score = Math.round(Math.max(0, Math.min(100, (coverage * 100) * 0.7 + 30 * (1 - lengthPenalty - repetitionPenalty))))
72: 
73:     const suggestions: string[] = []
74:     if (coverage < 0.8) suggestions.push('Add missing high-value keywords naturally in bullets')
75:     if (lengthPenalty > 0.1) suggestions.push('Trim low-impact content to improve ATS parsing')
76:     if (matched.length < 5) suggestions.push('Front-load quantified achievements that match role must-haves')
77: 
78:     return NextResponse.json({
79:       success: true,
80:       ats: {
81:         score,
82:         matchedKeywords: matched.slice(0, 50),
83:         missingKeywords: missing.slice(0, 50),
84:         keywordDensity: density,
85:         suggestions,
86:       }
87:     })
88:   } catch (e) {
89:     return NextResponse.json({ error: 'Failed to compute ATS score' }, { status: 500 })
90:   }
91: }
</file>

<file path="src/app/api/insights/authenticity/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: 
 7: function styleScore(original: string, generated: string) {
 8:   // Simple stylistic similarity using token overlap and sentence length variance
 9:   const a = original.toLowerCase().split(/[^a-z0-9]+/).filter(Boolean)
10:   const b = generated.toLowerCase().split(/[^a-z0-9]+/).filter(Boolean)
11:   const setA = new Set(a)
12:   const setB = new Set(b)
13:   let overlap = 0
14:   setA.forEach(t => { if (setB.has(t)) overlap++ })
15:   const overlapScore = Math.min(100, Math.round((overlap / Math.max(setA.size, 1)) * 100))
16:   const avgLen = (s: string) => s.split(/[.!?]/).map(x=>x.trim()).filter(Boolean).reduce((p,c)=>p+c.length,0) / Math.max(1, s.split(/[.!?]/).filter(Boolean).length)
17:   const varPenalty = Math.min(30, Math.abs(avgLen(original) - avgLen(generated)) / 2)
18:   return Math.max(0, Math.min(100, overlapScore - varPenalty))
19: }
20: 
21: export async function POST(request: NextRequest) {
22:   try {
23:     const session = await getServerSession(authOptions)
24:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
25:     const { originalText, generatedText } = await request.json()
26:     if (!originalText || !generatedText) return NextResponse.json({ error: 'originalText and generatedText required' }, { status: 400 })
27:     const score = styleScore(originalText, generatedText)
28:     const suggestions: string[] = []
29:     if (score < 70) suggestions.push('Rewrite using your typical sentence length and phrasing')
30:     if (score < 50) suggestions.push('Swap generic buzzwords for concrete verbs from your resume')
31:     if (score < 40) suggestions.push('Reduce formality or add personal context consistent with your resume')
32:     return NextResponse.json({ success: true, authenticity: { score, suggestions } })
33:   } catch (e) {
34:     return NextResponse.json({ error: 'Failed to compute authenticity' }, { status: 500 })
35:   }
36: }
</file>

<file path="src/app/api/insights/competition/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { extractKeywords } from '@/lib/utils'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: function estimateApplicants(jobDescription: string, source?: string) {
 9:   const len = jobDescription.length
10:   let base = Math.min(500, Math.max(20, Math.floor(len / 60)))
11:   if (source?.includes('linkedin')) base *= 1.2
12:   if (source?.includes('indeed')) base *= 1.1
13:   return Math.round(base)
14: }
15: 
16: export async function POST(request: NextRequest) {
17:   try {
18:     const session = await getServerSession(authOptions)
19:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
20:     const { jobDescription, jobUrl, resumeText } = await request.json()
21:     if (!jobDescription || typeof jobDescription !== 'string') return NextResponse.json({ error: 'jobDescription required' }, { status: 400 })
22: 
23:     const source = jobUrl ? new URL(jobUrl).hostname.replace('www.','') : ''
24:     const applicants = estimateApplicants(jobDescription, source)
25:     const keywords = extractKeywords(jobDescription)
26:     const urgency = Math.min(100, Math.round((applicants / 5) + (keywords.length / 3)))
27:     const band = applicants < 60 ? 'low' : applicants < 160 ? 'medium' : 'high'
28: 
29:     // Resume-aware differentiation suggestions
30:     const diffs: string[] = []
31:     const top = keywords.slice(0, 10)
32:     if (resumeText && typeof resumeText === 'string' && resumeText.length > 50) {
33:       for (const k of top) {
34:         const has = resumeText.toLowerCase().includes(k.toLowerCase())
35:         diffs.push(has ? `Elevate ${k} with a quantified bullet where impact >10% or $50k+` : `Add a specific achievement demonstrating ${k} with metrics and timeframe`)
36:       }
37:     } else {
38:       for (const k of top) diffs.push(`Provide a quantified example demonstrating ${k}`)
39:     }
40: 
41:     return NextResponse.json({ success: true, competition: { applicantsEstimate: applicants, competitionBand: band, urgency, differentiation: diffs } })
42:   } catch (e) {
43:     return NextResponse.json({ error: 'Failed to compute competition' }, { status: 500 })
44:   }
45: }
</file>

<file path="src/app/api/insights/hiring/profile/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: 
 7: export async function POST(req: NextRequest) {
 8:   try {
 9:     const session = await getServerSession(authOptions)
10:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
11:     const { name, companyName, roleType, linkedinUrl } = await req.json()
12:     if (!name || !companyName) return NextResponse.json({ error: 'name and companyName required' }, { status: 400 })
13: 
14:     // Placeholder heuristic until deeper profile scraping is integrated
15:     const profile = {
16:       personalityType: 'Data-driven, results-focused',
17:       communicationStyle: 'Direct, prefers quantified achievements',
18:       redFlags: ['Generic outreach', 'Unclear career progression'],
19:       optimizedApproach: 'Lead with revenue/impact, crisp bullets; mirror company tone',
20:     }
21:     return NextResponse.json({ success: true, profile })
22:   } catch (e) {
23:     return NextResponse.json({ error: 'Failed to build hiring profile' }, { status: 500 })
24:   }
25: }
</file>

<file path="src/app/api/insights/hiring/timeline/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { extractKeywords } from '@/lib/utils'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(req: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const { postingsHistory = [], jobDescription } = await req.json()
13:     const kws = extractKeywords(jobDescription || '')
14:     // Heuristic: recent cadence -> faster timeline
15:     const cadence = Array.isArray(postingsHistory) ? postingsHistory.length : 0
16:     const score = Math.max(0, Math.min(100, 40 + Math.min(40, cadence * 8) + Math.min(20, Math.floor(kws.length/4))))
17:     const expectedWeeks = Math.max(2, Math.round(14 - (score/10)))
18:     const notes = [
19:       cadence >= 3 ? 'Frequent postings: active hiring cycle' : 'Few postings: slower cycles likely',
20:       kws.length > 15 ? 'Highly specific JD: longer screening' : 'Broad JD: faster screening'
21:     ]
22:     return NextResponse.json({ success: true, timeline: { score, expectedWeeks, notes } })
23:   } catch (e) {
24:     return NextResponse.json({ error: 'Failed to predict timeline' }, { status: 500 })
25:   }
26: }
</file>

<file path="src/app/api/insights/painpoints/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityService } from '@/lib/perplexity-service'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(request: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const { jobTitle, companyData, jobDescription } = await request.json()
13:     if (!jobTitle || (!companyData && !jobDescription)) return NextResponse.json({ error: 'jobTitle and companyData or jobDescription required' }, { status: 400 })
14:     const ppx = new PerplexityService()
15:     const system = `You are a company pain-points analyst. Return strict JSON only with keys: companyPainPoints (3-6), rolePainPoints (3-6), solutionAngles (4-8), quantIdeas (3-5).`
16:     const user = `Role: ${jobTitle}\nCompany Data: ${companyData ? JSON.stringify(companyData) : 'N/A'}\nJob Description: ${jobDescription || 'N/A'}`
17:     const out = await ppx.makeRequest(system, user, { maxTokens: 900, temperature: 0.2 })
18:     let text = out.content || ''
19:     if (/```/.test(text)) { const m = text.match(/```json[\s\S]*?```/i) || text.match(/```[\s\S]*?```/); if (m && m[0]) text = m[0].replace(/```json|```/g,'').trim() }
20:     let parsed: any = {}
21:     try { parsed = JSON.parse(text) } catch { parsed = { companyPainPoints: [], rolePainPoints: [], solutionAngles: [], quantIdeas: [] } }
22:     return NextResponse.json({ success: true, painpoints: parsed })
23:   } catch (e) {
24:     return NextResponse.json({ error: 'Failed to compute pain points' }, { status: 500 })
25:   }
26: }
</file>

<file path="src/app/api/insights/psychology/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityService } from '@/lib/perplexity-service'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(request: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const { jobDescription, companySignals } = await request.json()
13:     if (!jobDescription || typeof jobDescription !== 'string') return NextResponse.json({ error: 'jobDescription required' }, { status: 400 })
14: 
15:     const ppx = new PerplexityService()
16:     const system = `You are an employer psychology analyst. Return strict JSON only with keys: tone (formal|neutral|casual), formality (0-100), values (3-6 strings), languageGuidance (2-4 strings), bestSendWindows (2-4 strings).`
17:     const user = `Analyze job and company signals.\nJob Description:\n${jobDescription}\nCompany Signals:\n${companySignals ? JSON.stringify(companySignals) : 'N/A'}`
18:     const res = await ppx.makeRequest(system, user, { maxTokens: 800, temperature: 0.2 })
19:     let text = res.content || ''
20:     if (/```/.test(text)) { const m = text.match(/```json[\s\S]*?```/i) || text.match(/```[\s\S]*?```/); if (m && m[0]) text = m[0].replace(/```json|```/g,'').trim() }
21:     let parsed: any = {}
22:     try { parsed = JSON.parse(text) } catch { parsed = { tone: 'neutral', formality: 50, values: [], languageGuidance: [], bestSendWindows: [] } }
23:     return NextResponse.json({ success: true, psychology: parsed })
24:   } catch (e) {
25:     return NextResponse.json({ error: 'Failed to compute psychology' }, { status: 500 })
26:   }
27: }
</file>

<file path="src/app/api/insights/salary/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(req: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const { jobTitle, companyName, location } = await req.json()
13:     if (!jobTitle || !location) return NextResponse.json({ error: 'jobTitle and location required' }, { status: 400 })
14:     const data = await PerplexityIntelligenceService.salaryForRole(jobTitle, companyName, location)
15:     return NextResponse.json({ success: true, salary: data })
16:   } catch (e) {
17:     return NextResponse.json({ error: 'Failed to compute salary intel' }, { status: 500 })
18:   }
19: }
</file>

<file path="src/app/api/insights/success-v2/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityService } from '@/lib/perplexity-service'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(req: NextRequest) {
 9:   try {
10:     if (!process.env.PERPLEXITY_API_KEY) return NextResponse.json({ error: 'AI temporarily unavailable (missing PERPLEXITY_API_KEY)' }, { status: 503 })
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     const { jobDescription, resumeText, jobUrl, applicantsEstimate, urgencyHint, companyData } = await req.json()
14:     if (!jobDescription || !resumeText) return NextResponse.json({ error: 'jobDescription and resumeText required' }, { status: 400 })
15:     const ppx = new PerplexityService()
16:     const system = 'You are an application success evaluator. Return JSON: score (0-100), reasons[], riskFactors[], improvements[], timing?, competition?'
17:     const user = `Evaluate success probability.\nJob Description:\n${jobDescription}\nResume:\n${resumeText}\nHints:\n${JSON.stringify({ jobUrl, applicantsEstimate, urgencyHint, companyData })}`
18:     const out = await ppx.makeRequest(system, user, { maxTokens: 900, temperature: 0.2 })
19:     let text = out.content || ''
20:     if (/```/.test(text)) { const m = text.match(/```json[\s\S]*?```/i) || text.match(/```[\s\S]*?```/); if (m && m[0]) text = m[0].replace(/```json|```/g,'').trim() }
21:     let parsed: any = {}
22:     try { parsed = JSON.parse(text) } catch { parsed = { score: 50, reasons: [], riskFactors: [], improvements: [] } }
23:     return NextResponse.json({ success: true, result: parsed })
24:   } catch (e) {
25:     return NextResponse.json({ error: 'Failed to compute success v2' }, { status: 500 })
26:   }
27: }
</file>

<file path="src/app/api/insights/success/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { AIService } from '@/lib/ai-service'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(request: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const { jobDescription, resumeText, companyData } = await request.json()
13:     if (!jobDescription || !resumeText) return NextResponse.json({ error: 'jobDescription and resumeText required' }, { status: 400 })
14:     const result = await AIService.scoreApplication(jobDescription, resumeText, companyData)
15:     return NextResponse.json({ success: true, successScore: result })
16:   } catch (e) {
17:     return NextResponse.json({ error: 'Failed to score application' }, { status: 500 })
18:   }
19: }
</file>

<file path="src/app/api/insights/timing/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: 
 7: export async function POST(req: NextRequest) {
 8:   try {
 9:     const session = await getServerSession(authOptions)
10:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
11:     const body = await req.json().catch(()=>({})) as any
12:     const jobTitle: string | undefined = body?.jobTitle
13:     const companyName: string | undefined = body?.companyName
14:     const urgency: number | undefined = typeof body?.urgency === 'number' ? body.urgency : undefined // 0-100
15:     const applicants: number | undefined = typeof body?.applicants === 'number' ? body.applicants : undefined
16:     const location: string | undefined = body?.location
17: 
18:     // Heuristic recommendation: Tue–Thu mornings in local time; apply within 48h of posting if urgency high
19:     const now = new Date()
20:     const day = now.getUTCDay() // 0=Sun
21:     const weekdayScore = (day >= 2 && day <= 4) ? 1 : 0.6 // Tue-Thu best
22:     const baseScore = 70 * weekdayScore
23:     const urgencyBoost = urgency ? Math.min(20, Math.max(-10, (urgency - 50) / 2)) : 0
24:     const crowdPenalty = applicants ? Math.max(-15, Math.min(0, -Math.log10(Math.max(1, applicants)) * 10)) : 0
25:     const score = Math.round(Math.max(0, Math.min(100, baseScore + urgencyBoost + crowdPenalty)))
26: 
27:     const windows = [
28:       { window: 'Tue 9:00–11:00', reason: 'Recruiters triage early in the week' },
29:       { window: 'Wed 9:00–12:00', reason: 'Midweek response rates are high' },
30:       { window: 'Thu 9:00–11:00', reason: 'Less competition vs Mon/Fri' },
31:     ]
32: 
33:     const notes: string[] = []
34:     if (urgency && urgency >= 70) notes.push('High urgency: apply within 24–48 hours')
35:     if (applicants && applicants > 100) notes.push('Crowded posting: tailor strongly and reach out to a recruiter')
36:     if (location) notes.push(`Align submission time to ${location} business hours`)
37:     if (jobTitle) notes.push(`Emphasize must-have keywords early for ${jobTitle}`)
38: 
39:     return NextResponse.json({ success: true, timing: { score, bestWindows: windows, notes, meta: { jobTitle: jobTitle || null, companyName: companyName || null, location: location || null } } })
40:   } catch (e) {
41:     return NextResponse.json({ error: 'Failed to compute timing' }, { status: 500 })
42:   }
43: }
</file>

<file path="src/app/api/insights/trajectory/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { AIService } from '@/lib/ai-service'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(req: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const { resumeText, targetRole, targetIndustry, geo } = await req.json()
13:     if (!resumeText || !targetRole) return NextResponse.json({ error: 'resumeText and targetRole required' }, { status: 400 })
14:     const plan = await AIService.careerTrajectoryPredictor({ resumeText, targetRole, targetIndustry, geo })
15:     return NextResponse.json({ success: true, trajectory: plan })
16:   } catch (e) {
17:     return NextResponse.json({ error: 'Failed to generate trajectory' }, { status: 500 })
18:   }
19: }
</file>

<file path="src/app/api/interview-prep/export-pdf/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import puppeteer from 'puppeteer'
  5: 
  6: export async function POST(request: NextRequest) {
  7:   try {
  8:     const session = await getServerSession(authOptions)
  9:     if (!session?.user?.id) {
 10:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 11:     }
 12: 
 13:     const { prep, jobTitle, company } = await request.json()
 14: 
 15:     if (!prep) {
 16:       return NextResponse.json({ error: 'Missing interview prep data' }, { status: 400 })
 17:     }
 18: 
 19:     // Generate HTML for PDF
 20:     const html = `
 21:       <!DOCTYPE html>
 22:       <html>
 23:         <head>
 24:           <meta charset="UTF-8">
 25:           <style>
 26:             body {
 27:               font-family: Arial, sans-serif;
 28:               line-height: 1.6;
 29:               color: #333;
 30:               max-width: 800px;
 31:               margin: 0 auto;
 32:               padding: 40px 20px;
 33:             }
 34:             h1 {
 35:               color: #2563eb;
 36:               font-size: 32px;
 37:               margin-bottom: 10px;
 38:               border-bottom: 3px solid #2563eb;
 39:               padding-bottom: 10px;
 40:             }
 41:             h2 {
 42:               color: #1e40af;
 43:               font-size: 24px;
 44:               margin-top: 30px;
 45:               margin-bottom: 15px;
 46:               border-bottom: 2px solid #ddd;
 47:               padding-bottom: 8px;
 48:             }
 49:             h3 {
 50:               color: #1e3a8a;
 51:               font-size: 18px;
 52:               margin-top: 20px;
 53:               margin-bottom: 10px;
 54:             }
 55:             .subtitle {
 56:               color: #666;
 57:               font-size: 18px;
 58:               margin-bottom: 30px;
 59:             }
 60:             .question {
 61:               background: #f8fafc;
 62:               border-left: 4px solid #3b82f6;
 63:               padding: 15px;
 64:               margin: 15px 0;
 65:               border-radius: 4px;
 66:             }
 67:             .question-text {
 68:               font-weight: bold;
 69:               color: #1e40af;
 70:               margin-bottom: 8px;
 71:             }
 72:             .answer {
 73:               color: #475569;
 74:               margin-top: 8px;
 75:               padding-left: 10px;
 76:             }
 77:             ul {
 78:               margin: 10px 0;
 79:               padding-left: 25px;
 80:             }
 81:             li {
 82:               margin: 8px 0;
 83:             }
 84:             .section {
 85:               margin-bottom: 30px;
 86:             }
 87:             .tip {
 88:               background: #fef3c7;
 89:               border-left: 4px solid #f59e0b;
 90:               padding: 15px;
 91:               margin: 15px 0;
 92:               border-radius: 4px;
 93:             }
 94:             .footer {
 95:               margin-top: 50px;
 96:               padding-top: 20px;
 97:               border-top: 2px solid #ddd;
 98:               text-align: center;
 99:               color: #666;
100:               font-size: 12px;
101:             }
102:           </style>
103:         </head>
104:         <body>
105:           <h1>🎯 Interview Preparation</h1>
106:           <div class="subtitle">${jobTitle} at ${company}</div>
107: 
108:           ${prep.commonQuestions && prep.commonQuestions.length > 0 ? `
109:             <div class="section">
110:               <h2>💬 Common Interview Questions</h2>
111:               ${prep.commonQuestions.map((q: any) => `
112:                 <div class="question">
113:                   <div class="question-text">Q: ${q.question}</div>
114:                   ${q.suggestedAnswer ? `<div class="answer"><strong>Suggested Answer:</strong> ${q.suggestedAnswer}</div>` : ''}
115:                   ${q.tips ? `<div class="answer"><strong>Tips:</strong> ${q.tips}</div>` : ''}
116:                 </div>
117:               `).join('')}
118:             </div>
119:           ` : ''}
120: 
121:           ${prep.behavioralQuestions && prep.behavioralQuestions.length > 0 ? `
122:             <div class="section">
123:               <h2>🧠 Behavioral Questions</h2>
124:               ${prep.behavioralQuestions.map((q: any) => `
125:                 <div class="question">
126:                   <div class="question-text">Q: ${q.question}</div>
127:                   ${q.starFramework ? `
128:                     <div class="answer">
129:                       <strong>STAR Framework:</strong>
130:                       <ul>
131:                         ${q.starFramework.situation ? `<li><strong>Situation:</strong> ${q.starFramework.situation}</li>` : ''}
132:                         ${q.starFramework.task ? `<li><strong>Task:</strong> ${q.starFramework.task}</li>` : ''}
133:                         ${q.starFramework.action ? `<li><strong>Action:</strong> ${q.starFramework.action}</li>` : ''}
134:                         ${q.starFramework.result ? `<li><strong>Result:</strong> ${q.starFramework.result}</li>` : ''}
135:                       </ul>
136:                     </div>
137:                   ` : ''}
138:                 </div>
139:               `).join('')}
140:             </div>
141:           ` : ''}
142: 
143:           ${prep.technicalQuestions && prep.technicalQuestions.length > 0 ? `
144:             <div class="section">
145:               <h2>💻 Technical Questions</h2>
146:               ${prep.technicalQuestions.map((q: any) => `
147:                 <div class="question">
148:                   <div class="question-text">Q: ${q.question}</div>
149:                   ${q.keyPoints ? `
150:                     <div class="answer">
151:                       <strong>Key Points:</strong>
152:                       <ul>
153:                         ${q.keyPoints.map((point: string) => `<li>${point}</li>`).join('')}
154:                       </ul>
155:                     </div>
156:                   ` : ''}
157:                 </div>
158:               `).join('')}
159:             </div>
160:           ` : ''}
161: 
162:           ${prep.companySpecificQuestions && prep.companySpecificQuestions.length > 0 ? `
163:             <div class="section">
164:               <h2>🏢 Company-Specific Questions</h2>
165:               ${prep.companySpecificQuestions.map((q: any) => `
166:                 <div class="question">
167:                   <div class="question-text">Q: ${q.question}</div>
168:                   ${q.context ? `<div class="answer"><strong>Context:</strong> ${q.context}</div>` : ''}
169:                   ${q.suggestedAnswer ? `<div class="answer"><strong>Suggested Answer:</strong> ${q.suggestedAnswer}</div>` : ''}
170:                 </div>
171:               `).join('')}
172:             </div>
173:           ` : ''}
174: 
175:           ${prep.questionsToAsk && prep.questionsToAsk.length > 0 ? `
176:             <div class="section">
177:               <h2>❓ Questions to Ask the Interviewer</h2>
178:               <ul>
179:                 ${prep.questionsToAsk.map((q: string) => `<li>${q}</li>`).join('')}
180:               </ul>
181:             </div>
182:           ` : ''}
183: 
184:           ${prep.interviewTips && prep.interviewTips.length > 0 ? `
185:             <div class="section">
186:               <h2>💡 Interview Tips</h2>
187:               ${prep.interviewTips.map((tip: string) => `
188:                 <div class="tip">${tip}</div>
189:               `).join('')}
190:             </div>
191:           ` : ''}
192: 
193:           ${prep.redFlags && prep.redFlags.length > 0 ? `
194:             <div class="section">
195:               <h2>🚩 Red Flags to Watch For</h2>
196:               <ul>
197:                 ${prep.redFlags.map((flag: string) => `<li>${flag}</li>`).join('')}
198:               </ul>
199:             </div>
200:           ` : ''}
201: 
202:           <div class="footer">
203:             <p>Generated by Career Lever AI • ${new Date().toLocaleDateString()}</p>
204:             <p>Good luck with your interview!</p>
205:           </div>
206:         </body>
207:       </html>
208:     `
209: 
210:     // Generate PDF using Puppeteer
211:     const browser = await puppeteer.launch({
212:       headless: true,
213:       args: ['--no-sandbox', '--disable-setuid-sandbox']
214:     })
215: 
216:     const page = await browser.newPage()
217:     await page.setContent(html, { waitUntil: 'networkidle0' })
218:     
219:     const pdfBuffer = await page.pdf({
220:       format: 'A4',
221:       printBackground: true,
222:       margin: {
223:         top: '20mm',
224:         right: '15mm',
225:         bottom: '20mm',
226:         left: '15mm'
227:       }
228:     })
229: 
230:     await browser.close()
231: 
232:     // Return PDF
233:     return new NextResponse(pdfBuffer, {
234:       headers: {
235:         'Content-Type': 'application/pdf',
236:         'Content-Disposition': `attachment; filename="Interview-Prep-${jobTitle.replace(/[^a-z0-9]/gi, '-')}.pdf"`
237:       }
238:     })
239: 
240:   } catch (error) {
241:     console.error('[INTERVIEW_PDF] Error:', error)
242:     return NextResponse.json(
243:       { error: 'Failed to generate PDF' },
244:       { status: 500 }
245:     )
246:   }
247: }
</file>

<file path="src/app/api/interview/prepare/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import { PerplexityService } from '@/lib/perplexity-service'
 6: import { z } from 'zod'
 7: 
 8: const ppx = new PerplexityService()
 9: 
10: export const dynamic = 'force-dynamic'
11: 
12: export async function POST(request: NextRequest) {
13:   try {
14:     if (!process.env.PERPLEXITY_API_KEY) {
15:       return NextResponse.json({ error: 'AI temporarily unavailable (missing PERPLEXITY_API_KEY)' }, { status: 503 })
16:     }
17:     const session = await getServerSession(authOptions)
18:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
19:     await connectToDatabase()
20:     const schema = z.object({ jobTitle: z.string().min(2), seniority: z.enum(['entry','mid','senior']).default('mid'), resumeHighlights: z.string().min(20), companyData: z.any().optional() })
21:     const raw = await request.json()
22:     const parsed = schema.safeParse(raw)
23:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
24:     const { jobTitle, seniority, resumeHighlights, companyData } = parsed.data as any
25: 
26:     const system = 'You are an interview preparation specialist. Provide structured, actionable prep content.'
27:     const prompt = `Prepare interview material for ${jobTitle} (${seniority}).\nResume highlights:\n${resumeHighlights}\n${companyData ? `Company data: ${JSON.stringify(companyData).slice(0,1000)}` : ''}`
28:     try {
29:       const result = await ppx.makeRequest(system, prompt, { maxTokens: 1400, temperature: 0.3 })
30:       return NextResponse.json({ success: true, prep: (result.content || '').trim() })
31:     } catch (e: any) {
32:       const msg = (e?.message || '').toString()
33:       if (/PERPLEXITY_API_KEY/i.test(msg)) {
34:         return NextResponse.json({ error: 'AI temporarily unavailable (missing PERPLEXITY_API_KEY)' }, { status: 503 })
35:       }
36:       throw e
37:     }
38:   } catch (e) {
39:     return NextResponse.json({ error: 'Failed to prepare interview' }, { status: 500 })
40:   }
41: }
</file>

<file path="src/app/api/job-boards/autopilot/search/route.ts">
  1: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
  2: import { authOptions } from '@/lib/auth'
  3: import { getServerSession } from 'next-auth'
  4: import { NextRequest, NextResponse } from 'next/server'
  5: import Resume from '@/models/Resume'
  6: import { dbService } from '@/lib/database'
  7: 
  8: export async function POST(request: NextRequest) {
  9:   const session = await getServerSession(authOptions)
 10:   if (!session?.user?.id) {
 11:     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 12:   }
 13: 
 14:   await dbService.connect()
 15: 
 16:   try {
 17:     const { keywords, location, experienceLevel, remote, salaryMin, limit = 25, useResumeMatching = false } = await request.json()
 18: 
 19:     console.log(`[AUTOPILOT_SEARCH] Starting autopilot job search for ${keywords} in ${location}`)
 20: 
 21:     let jobs: any[] = []
 22:     let metadata: any = {}
 23: 
 24:     // Option 1: Resume-matched search (if user requests and has resume)
 25:     if (useResumeMatching) {
 26:       console.log(`[AUTOPILOT_SEARCH] Attempting resume-matched search for user ${session.user.id}`)
 27:       
 28:       const resumeDoc = await Resume.findOne({ userId: session.user.id }).sort({ createdAt: -1 }).lean()
 29:       
 30:       if (resumeDoc && (resumeDoc as any).extractedText) {
 31:         console.log(`[AUTOPILOT_SEARCH] Found resume, performing AI skill matching`)
 32:         
 33:         const matchedJobsResponse = await PerplexityIntelligenceService.jobMarketAnalysisV2(
 34:           location,
 35:           (resumeDoc as any).extractedText,
 36:           {
 37:             roleHint: keywords,
 38:             boards: undefined,
 39:             maxResults: limit
 40:           }
 41:         )
 42:         
 43:         const matchedJobs = matchedJobsResponse.data || []
 44:         
 45:         jobs = matchedJobs.map((job: any) => ({
 46:           ...job,
 47:           id: job.id || `job-${Math.random().toString(36).substring(7)}`,
 48:           skillMatchPercent: job.skillMatch,
 49:           aiScore: job.score
 50:         }))
 51:         
 52:         metadata = {
 53:           useResumeMatching: true,
 54:           resumeMatched: true,
 55:           aiEnhanced: true
 56:         }
 57:         
 58:         console.log(`[AUTOPILOT_SEARCH] Found ${jobs.length} matched jobs`)
 59:       }
 60:     }
 61: 
 62:     // Option 2: Standard job listing search (25+ boards)
 63:     if (!useResumeMatching || jobs.length === 0) {
 64:       console.log(`[AUTOPILOT_SEARCH] Using standard search across 25+ boards`)
 65:       
 66:       const locationStr = location || ''
 67:       const isCanadian = locationStr.toLowerCase().includes('canada')
 68:       
 69:       jobs = (await PerplexityIntelligenceService.jobListings(
 70:         keywords,
 71:         locationStr,
 72:         {
 73:           boards: undefined,
 74:           limit,
 75:           includeCanadianOnly: isCanadian
 76:         }
 77:       )) as any[]
 78:       
 79:       metadata = {
 80:         useResumeMatching: false,
 81:         canadianPriority: isCanadian
 82:       }
 83:     }
 84: 
 85:     // Get recommended job boards
 86:     const recommendations = PerplexityIntelligenceService.getRecommendedBoards(location || '')
 87:     
 88:     return NextResponse.json({
 89:       success: true,
 90:       jobs: jobs,
 91:       recommendations,
 92:       metadata: {
 93:         ...metadata,
 94:         query: `${keywords} in ${location}`,
 95:         total: jobs.length,
 96:         sources: Array.from(new Set(jobs.map(j => j.source || 'Perplexity'))),
 97:         searchedAt: new Date().toISOString(),
 98:         experienceLevel,
 99:         remote,
100:         salaryMin
101:       }
102:     })
103:   } catch (error) {
104:     console.error('Autopilot job search failed:', error)
105:     return NextResponse.json({ 
106:       error: 'Job search failed', 
107:       details: error instanceof Error ? error.message : 'Unknown error'
108:     }, { status: 500 })
109:   }
110: }
</file>

<file path="src/app/api/job-boards/integrations/route.ts">
  1: // cleaned duplicate header
  2: 
  3: import { NextRequest, NextResponse } from 'next/server'
  4: import { getServerSession } from 'next-auth/next'
  5: import connectToDatabase from '@/lib/mongodb'
  6: import JobBoardIntegration from '@/models/JobBoardIntegration'
  7: import { authOptions } from '@/lib/auth'
  8: import { z } from 'zod'
  9: import { isRateLimited } from '@/lib/rate-limit'
 10: import { createJobBoardService } from '@/lib/job-board-service'
 11: 
 12: // Real sync function - runs in background
 13: async function syncJobBoardData(integration: any): Promise<void> {
 14:   try {
 15:     const jobBoardService = createJobBoardService(integration.boardName)
 16:     
 17:     // Check if token needs refresh
 18:     if (integration.tokenExpiresAt && new Date(integration.tokenExpiresAt) < new Date()) {
 19:       if (!integration.refreshToken) {
 20:         throw new Error('Token expired and no refresh token available')
 21:       }
 22:       
 23:       const tokenData = await jobBoardService.refreshToken(integration.refreshToken)
 24:       integration.accessToken = tokenData.access_token
 25:       integration.refreshToken = tokenData.refresh_token || integration.refreshToken
 26:       integration.tokenExpiresAt = tokenData.expires_in
 27:         ? new Date(Date.now() + tokenData.expires_in * 1000)
 28:         : undefined
 29:     }
 30: 
 31:     // Sync user profile
 32:     try {
 33:       const profile = await jobBoardService.getUserProfile(integration.accessToken)
 34:       integration.metadata = {
 35:         ...integration.metadata,
 36:         accountId: profile.id,
 37:         accountName: profile.name || profile.localizedFirstName + ' ' + profile.localizedLastName,
 38:         lastSyncedAt: new Date()
 39:       }
 40:     } catch (error) {
 41:       console.warn('[SYNC] Failed to sync profile:', error)
 42:     }
 43: 
 44:     // Update sync status
 45:     integration.syncStatus = 'success'
 46:     integration.lastSyncAt = new Date()
 47:     await integration.save()
 48:     
 49:     console.log(`[SYNC] Successfully synced ${integration.boardName} for user ${integration.userId}`)
 50:   } catch (error) {
 51:     console.error('[SYNC] Sync failed:', error)
 52:     integration.syncStatus = 'error'
 53:     integration.metadata = {
 54:       ...integration.metadata,
 55:       lastSyncError: error instanceof Error ? error.message : String(error)
 56:     }
 57:     await integration.save()
 58:     throw error
 59:   }
 60: }
 61: 
 62: export async function GET(request: NextRequest) {
 63:   try {
 64:     const session = await getServerSession(authOptions)
 65:     if (!session?.user?.email) {
 66:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 67:     }
 68: 
 69:     const limiter = await isRateLimited((session.user as any).id, 'jobboards:integrations:get')
 70:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
 71: 
 72:     await connectToDatabase()
 73: 
 74:     const integrations = await JobBoardIntegration.find({ userId: session.user.id })
 75:       .select('-apiKey -accessToken -refreshToken') // Don't include sensitive data
 76:       .sort({ createdAt: -1 })
 77: 
 78:     return NextResponse.json({
 79:       success: true,
 80:       integrations
 81:     })
 82: 
 83:   } catch (error) {
 84:     console.error('Get job board integrations error:', error)
 85:     return NextResponse.json(
 86:       { error: 'Failed to get job board integrations' },
 87:       { status: 500 }
 88:     )
 89:   }
 90: }
 91: 
 92: export async function POST(request: NextRequest) {
 93:   try {
 94:     const session = await getServerSession(authOptions)
 95:     if (!session?.user?.email) {
 96:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 97:     }
 98: 
 99:     await connectToDatabase()
100: 
101:     const limiter = await isRateLimited((session.user as any).id, 'jobboards:integrations:post')
102:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
103: 
104:     const schema = z.object({
105:       boardName: z.string().min(2).max(50),
106:       action: z.enum(['connect','disconnect','sync']),
107:     })
108:     const body = await request.json()
109:     const parsed = schema.safeParse(body)
110:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
111:     const { boardName, action } = parsed.data
112: 
113:     // Find existing integration
114:     let integration = await JobBoardIntegration.findOne({
115:       userId: session.user.id,
116:       boardName
117:     })
118: 
119:     if (action === 'connect') {
120:       if (integration) {
121:         return NextResponse.json(
122:           { error: 'Integration already exists' },
123:           { status: 400 }
124:         )
125:       }
126: 
127:       // Create new integration
128:       integration = new JobBoardIntegration({
129:         userId: session.user.id,
130:         boardName,
131:         boardDisplayName: getBoardDisplayName(boardName),
132:         status: 'connecting'
133:       })
134: 
135:       await integration.save()
136: 
137:       // Check if this board actually supports OAuth (most don't)
138:       const { JOB_BOARD_CONFIGS, UnifiedJobBoardService } = await import('@/lib/unified-job-board-strategy')
139:       const boardConfig = JOB_BOARD_CONFIGS[boardName]
140:       
141:       if (!boardConfig) {
142:         await JobBoardIntegration.deleteOne({ _id: integration._id })
143:         return NextResponse.json(
144:           { error: `Unsupported job board: ${boardName}` },
145:           { status: 400 }
146:         )
147:       }
148: 
149:       // REALITY CHECK: Most major job boards don't have open APIs
150:       if (boardConfig.type === 'frontend-only') {
151:         await JobBoardIntegration.deleteOne({ _id: integration._id })
152:         
153:         const service = new UnifiedJobBoardService()
154:         const applicationMethod = service.getApplicationMethod(boardName)
155:         
156:         return NextResponse.json({
157:           success: false,
158:           error: `${boardConfig.displayName} does not support direct API integration`,
159:           requiresFrontendAutomation: true,
160:           applicationMethod: {
161:             method: applicationMethod.method,
162:             instructions: applicationMethod.instructions,
163:             canAutomate: applicationMethod.canAutomate
164:           },
165:           recommendation: boardConfig.accessMethod.frontend?.browserExtensionRequired 
166:             ? 'Install the Career Lever browser extension to automate applications'
167:             : 'Use the Career Lever bookmarklet for assisted applications'
168:         }, { status: 400 })
169:       }
170: 
171:       // For boards that DO have open APIs (very rare)
172:       if (boardConfig.type === 'open-api') {
173:         // Only proceed if API is actually accessible
174:         integration.status = 'connected'
175:         integration.metadata = {
176:           ...integration.metadata,
177:           connectionType: 'open-api',
178:           connectedAt: new Date()
179:         }
180:         await integration.save()
181: 
182:         return NextResponse.json({
183:           success: true,
184:           integration: {
185:             _id: integration._id,
186:             boardName: integration.boardName,
187:             boardDisplayName: integration.boardDisplayName,
188:             status: integration.status
189:           },
190:           message: `Connected to ${boardConfig.displayName} successfully`
191:         })
192:       }
193: 
194:       // Default: Not supported
195:       await JobBoardIntegration.deleteOne({ _id: integration._id })
196:       return NextResponse.json({
197:         success: false,
198:         error: `${boardConfig.displayName} integration not yet implemented`
199:       }, { status: 400 })
200: 
201:     } else if (action === 'disconnect') {
202:       if (!integration) {
203:         return NextResponse.json(
204:           { error: 'Integration not found' },
205:           { status: 404 }
206:         )
207:       }
208: 
209:       await JobBoardIntegration.deleteOne({ _id: integration._id })
210: 
211:       return NextResponse.json({
212:         success: true,
213:         message: 'Integration disconnected'
214:       })
215: 
216:     } else if (action === 'sync') {
217:       if (!integration) {
218:         return NextResponse.json(
219:           { error: 'Integration not found' },
220:           { status: 404 }
221:         )
222:       }
223: 
224:       if (integration.status !== 'connected') {
225:         return NextResponse.json(
226:           { error: 'Integration must be connected before syncing' },
227:           { status: 400 }
228:         )
229:       }
230: 
231:       // Update status to syncing
232:       integration.lastSyncAt = new Date()
233:       integration.syncStatus = 'syncing'
234:       await integration.save()
235: 
236:       // Perform real sync in background (don't block response)
237:       syncJobBoardData(integration).catch((error) => {
238:         console.error(`[JOB_BOARDS] Sync failed for ${boardName}:`, error)
239:       })
240: 
241:       return NextResponse.json({
242:         success: true,
243:         integration: {
244:           _id: integration._id,
245:           boardName: integration.boardName,
246:           lastSyncAt: integration.lastSyncAt,
247:           syncStatus: integration.syncStatus
248:         },
249:         message: 'Sync started in background'
250:       })
251: 
252:     } else {
253:       return NextResponse.json(
254:         { error: 'Invalid action' },
255:         { status: 400 }
256:       )
257:     }
258: 
259:     return NextResponse.json({
260:       success: true,
261:       integration: {
262:         _id: integration._id,
263:         userId: integration.userId,
264:         boardName: integration.boardName,
265:         boardDisplayName: integration.boardDisplayName,
266:         status: integration.status,
267:         lastSyncAt: integration.lastSyncAt,
268:         lastSuccessfulSyncAt: integration.lastSuccessfulSyncAt,
269:         syncStatus: integration.syncStatus,
270:         totalApplications: integration.totalApplications,
271:         successfulApplications: integration.successfulApplications,
272:         lastApplicationAt: integration.lastApplicationAt,
273:         settings: integration.settings,
274:         metadata: integration.metadata,
275:         createdAt: integration.createdAt,
276:         updatedAt: integration.updatedAt
277:       },
278:       message: action === 'connect' ? 'Integration created successfully' : 'Action completed'
279:     })
280: 
281:   } catch (error) {
282:     console.error('Job board integration action error:', error)
283:     return NextResponse.json(
284:       { error: 'Failed to process integration action' },
285:       { status: 500 }
286:     )
287:   }
288: }
289: 
290: function getBoardDisplayName(boardName: string): string {
291:   const boardNames: Record<string, string> = {
292:     linkedin: 'LinkedIn',
293:     ziprecruiter: 'ZipRecruiter',
294:     glassdoor: 'Glassdoor',
295:     monster: 'Monster',
296:     careerbuilder: 'CareerBuilder',
297:     simplyhired: 'SimplyHired',
298:     indeed: 'Indeed'
299:   }
300:   return boardNames[boardName] || boardName
301: }
</file>

<file path="src/app/api/job-boards/jobs/list/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import JobBoardIntegration from '@/models/JobBoardIntegration'
 6: import { createJobBoardService } from '@/lib/job-board-service'
 7: import { z } from 'zod'
 8: import { isRateLimited } from '@/lib/rate-limit'
 9: 
10: export async function POST(request: NextRequest) {
11:   try {
12:     const session = await getServerSession(authOptions)
13:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
14:     const limiter = await isRateLimited((session.user as any).id, 'jobboards:jobs:list')
15:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
16: 
17:     const schema = z.object({ boardName: z.string().min(2).max(50) })
18:     const body = await request.json()
19:     const parsed = schema.safeParse(body)
20:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
21:     const { boardName } = parsed.data
22: 
23:     await connectToDatabase()
24:     const integration: any = await JobBoardIntegration.findOne({ userId: (session.user as any).id, boardName })
25:     if (!integration || !integration.accessToken) return NextResponse.json({ error: 'Not connected' }, { status: 400 })
26: 
27:     const svc = createJobBoardService(boardName)
28:     const endpoint = svc.getConfig().endpoints.jobs
29:     let jobs: any
30:     try {
31:       jobs = await svc.makeAuthenticatedRequest(endpoint, 'GET', integration.accessToken)
32:     } catch (e: any) {
33:       if (e && typeof e.message === 'string' && e.message.includes('TOKEN_EXPIRED') && integration.refreshToken) {
34:         try {
35:           const refreshed = await svc.refreshToken(integration.refreshToken)
36:           integration.accessToken = refreshed.access_token
37:           if (refreshed.refresh_token) integration.refreshToken = refreshed.refresh_token
38:           if (refreshed.expires_in) integration.tokenExpiresAt = new Date(Date.now() + refreshed.expires_in * 1000)
39:           await integration.save()
40:           jobs = await svc.makeAuthenticatedRequest(endpoint, 'GET', integration.accessToken)
41:         } catch {
42:           return NextResponse.json({ error: 'Re-authentication required' }, { status: 401 })
43:         }
44:       } else {
45:         throw e
46:       }
47:     }
48:     return NextResponse.json({ success: true, jobs })
49:   } catch (e) {
50:     return NextResponse.json({ error: 'Failed to list jobs' }, { status: 500 })
51:   }
52: }
</file>

<file path="src/app/api/job-boards/jobs/sync/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import connectToDatabase from '@/lib/mongodb'
 4: import JobApplication from '@/models/JobApplication'
 5: import JobBoardIntegration from '@/models/JobBoardIntegration'
 6: import { authOptions } from '@/lib/auth'
 7: import { createJobBoardService } from '@/lib/job-board-service'
 8: import { z } from 'zod'
 9: import { isRateLimited } from '@/lib/rate-limit'
10: 
11: export async function POST(request: NextRequest) {
12:   try {
13:     const session = await getServerSession(authOptions)
14:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
15: 
16:     const limiter = await isRateLimited((session.user as any).id, 'jobboards:jobs:sync')
17:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
18: 
19:     const schema = z.object({ boardName: z.string().min(2).max(50) })
20:     const raw = await request.json()
21:     const parsed = schema.safeParse(raw)
22:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
23:     const { boardName } = parsed.data
24: 
25:     await connectToDatabase()
26: 
27:     const integration = await JobBoardIntegration.findOne({ userId: (session.user as any).id, boardName })
28:     if (!integration || !integration.accessToken) return NextResponse.json({ error: 'Not connected' }, { status: 400 })
29: 
30:     const svc = createJobBoardService(boardName)
31:     let jobs: any[] = []
32:     try {
33:       jobs = await svc.makeAuthenticatedRequest(svc.getConfig().endpoints.jobs, 'GET', integration.accessToken)
34:     } catch (e: any) {
35:       if (e && typeof e.message === 'string' && e.message.includes('TOKEN_EXPIRED') && integration.refreshToken) {
36:         const refreshed = await svc.refreshToken(integration.refreshToken)
37:         integration.accessToken = refreshed.access_token
38:         if (refreshed.refresh_token) integration.refreshToken = refreshed.refresh_token
39:         if (refreshed.expires_in) integration.tokenExpiresAt = new Date(Date.now() + refreshed.expires_in * 1000)
40:         await integration.save()
41:         jobs = await svc.makeAuthenticatedRequest(svc.getConfig().endpoints.jobs, 'GET', integration.accessToken)
42:       } else {
43:         throw e
44:       }
45:     }
46: 
47:     // Normalize and import as saved applications
48:     let created = 0
49:     let updated = 0
50:     const imported: any[] = []
51:     for (const j of (Array.isArray(jobs) ? jobs : [])) {
52:       const jobUrl: string = j.url || j.link || ''
53:       const jobTitle: string = j.title || j.position || 'Imported Role'
54:       const companyName: string = j.company || j.companyName || 'Unknown Company'
55:       const description: string = j.description || j.summary || 'Imported via job board sync.'
56:       const key = jobUrl || `${companyName}:${jobTitle}`
57:       if (!key) continue
58: 
59:       const existing = await JobApplication.findOne({ userId: (session.user as any).id, jobUrl: jobUrl || undefined, jobTitle, companyName })
60:       if (existing) {
61:         // Optionally update description if empty
62:         if (!existing.jobDescription && description) {
63:           existing.jobDescription = description
64:           await existing.save()
65:           updated++
66:         }
67:         imported.push({ id: existing._id, jobTitle, companyName, jobUrl })
68:         continue
69:       }
70:       const app = new JobApplication({
71:         userId: (session.user as any).id,
72:         jobTitle,
73:         companyName,
74:         jobDescription: description,
75:         jobUrl: jobUrl || undefined,
76:         applicationStatus: 'saved',
77:         followUpDates: []
78:       })
79:       await app.save()
80:       created++
81:       imported.push({ id: app._id, jobTitle, companyName, jobUrl })
82:     }
83: 
84:     return NextResponse.json({ success: true, created, updated, importedCount: imported.length, imported })
85:   } catch (e) {
86:     console.error('Jobs sync error:', e)
87:     return NextResponse.json({ error: 'Failed to sync jobs' }, { status: 500 })
88:   }
89: }
</file>

<file path="src/app/api/job-boards/oauth/authorize/route.ts">
 1: // cleaned duplicate block
 2: 
 3: import { NextRequest, NextResponse } from 'next/server'
 4: import { getServerSession } from 'next-auth/next'
 5: import connectToDatabase from '@/lib/mongodb'
 6: import { createJobBoardService } from '@/lib/job-board-service'
 7: import { authOptions } from '@/lib/auth'
 8: import { z } from 'zod'
 9: import { isRateLimited } from '@/lib/rate-limit'
10: 
11: export async function POST(request: NextRequest) {
12:   try {
13:     const session = await getServerSession(authOptions)
14:     if (!session?.user?.email) {
15:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
16:     }
17: 
18:     const limiter = await isRateLimited((session.user as any).id, 'jobboards:oauth:authorize')
19:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
20: 
21:     await connectToDatabase()
22: 
23:     const schema = z.object({ boardName: z.string().min(2).max(50) })
24:     const body = await request.json()
25:     const parsed = schema.safeParse(body)
26:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
27:     const { boardName } = parsed.data
28: 
29:     // Validate job board
30:     let jobBoardService
31:     try {
32:       jobBoardService = createJobBoardService(boardName)
33:     } catch (error) {
34:       return NextResponse.json(
35:         { error: `Unsupported job board: ${boardName}` },
36:         { status: 400 }
37:       )
38:     }
39: 
40:     // Check configuration
41:     const configValidation = jobBoardService.validateConfig()
42:     if (!configValidation.isValid) {
43:       return NextResponse.json(
44:         {
45:           error: 'Job board not properly configured',
46:           details: configValidation.errors
47:         },
48:         { status: 500 }
49:       )
50:     }
51: 
52:     // Generate state parameter for security
53:     const state = `careerlever_${session.user.id}_${boardName}_${Date.now()}`
54: 
55:     // Generate redirect URI
56:     const redirectUri = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/job-boards/oauth/callback?board=${boardName}`
57: 
58:     // Generate authorization URL
59:     const authUrl = jobBoardService.generateAuthUrl(state, redirectUri)
60: 
61:     return NextResponse.json({
62:       success: true,
63:       authUrl,
64:       boardName
65:     })
66: 
67:   } catch (error) {
68:     console.error('OAuth authorize error:', error)
69:     return NextResponse.json(
70:       { error: 'Failed to initiate OAuth flow' },
71:       { status: 500 }
72:     )
73:   }
74: }
</file>

<file path="src/app/api/job-boards/oauth/callback/route.ts">
  1: // cleaned duplicate block
  2: 
  3: import { NextRequest, NextResponse } from 'next/server'
  4: import { getServerSession } from 'next-auth/next'
  5: import connectToDatabase from '@/lib/mongodb'
  6: import JobBoardIntegration from '@/models/JobBoardIntegration'
  7: import { createJobBoardService } from '@/lib/job-board-service'
  8: import { authOptions } from '@/lib/auth'
  9: 
 10: export const dynamic = 'force-dynamic'
 11: 
 12: export async function GET(request: NextRequest) {
 13:   try {
 14:     const session = await getServerSession(authOptions)
 15:     if (!session?.user?.email) {
 16:       return NextResponse.redirect(new URL('/auth/signin', request.url))
 17:     }
 18: 
 19:     await connectToDatabase()
 20: 
 21:     const { searchParams } = new URL(request.url)
 22:     const code = searchParams.get('code')
 23:     const state = searchParams.get('state')
 24:     const error = searchParams.get('error')
 25:     const boardName = searchParams.get('board')
 26: 
 27:     if (error) {
 28:       console.error('OAuth error:', error)
 29:       return NextResponse.redirect(new URL('/job-boards?error=oauth_failed', request.url))
 30:     }
 31: 
 32:     if (!code || !state || !boardName) {
 33:       return NextResponse.redirect(new URL('/job-boards?error=missing_params', request.url))
 34:     }
 35: 
 36:     // Verify state parameter for security (in production, store state in session/database)
 37:     if (!state.startsWith('careerlever_')) {
 38:       return NextResponse.redirect(new URL('/job-boards?error=invalid_state', request.url))
 39:     }
 40: 
 41:     // Extract user ID from state (format: careerlever_{userId}_{boardName})
 42:     const stateParts = state.split('_')
 43:     if (stateParts.length < 3) {
 44:       return NextResponse.redirect(new URL('/job-boards?error=invalid_state', request.url))
 45:     }
 46: 
 47:     const userId = stateParts[1]
 48:     if (userId !== session.user.id) {
 49:       return NextResponse.redirect(new URL('/job-boards?error=user_mismatch', request.url))
 50:     }
 51: 
 52:     // Create job board service
 53:     let jobBoardService
 54:     try {
 55:       jobBoardService = createJobBoardService(boardName)
 56:     } catch (error) {
 57:       console.error('Invalid job board:', boardName)
 58:       return NextResponse.redirect(new URL('/job-boards?error=invalid_board', request.url))
 59:     }
 60: 
 61:     // Exchange authorization code for access token
 62:     const redirectUri = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/job-boards/oauth/callback?board=${boardName}`
 63: 
 64:     let tokenData
 65:     try {
 66:       tokenData = await jobBoardService.exchangeCodeForToken(code, redirectUri)
 67:     } catch (error) {
 68:       console.error('Token exchange failed:', error)
 69:       return NextResponse.redirect(new URL('/job-boards?error=token_exchange_failed', request.url))
 70:     }
 71: 
 72:     // Get or create job board integration
 73:     let integration = await JobBoardIntegration.findOne({
 74:       userId: session.user.id,
 75:       boardName: boardName
 76:     })
 77: 
 78:     if (!integration) {
 79:       integration = new JobBoardIntegration({
 80:         userId: session.user.id,
 81:         boardName: boardName,
 82:         boardDisplayName: jobBoardService.getConfig().displayName,
 83:         status: 'connecting'
 84:       })
 85:     }
 86: 
 87:     // Update integration with token data
 88:     integration.status = 'connected'
 89:     integration.apiKey = undefined // Not needed for OAuth
 90:     integration.accessToken = tokenData.access_token
 91:     integration.refreshToken = tokenData.refresh_token
 92:     integration.tokenExpiresAt = tokenData.expires_in
 93:       ? new Date(Date.now() + tokenData.expires_in * 1000)
 94:       : undefined
 95: 
 96:     // Try to get user profile and update metadata
 97:     try {
 98:       const profile = await jobBoardService.getUserProfile(tokenData.access_token)
 99:       integration.metadata = {
100:         ...integration.metadata,
101:         accountId: profile.id,
102:         accountName: profile.name || profile.localizedFirstName + ' ' + profile.localizedLastName,
103:         accountType: profile.accountType || 'personal',
104:         apiVersion: jobBoardService.getConfig().baseUrl.includes('/v2') ? 'v2' : 'v1'
105:       }
106:     } catch (error) {
107:       console.warn('Failed to get user profile:', error)
108:       // Continue with basic integration setup
109:     }
110: 
111:     await integration.save()
112: 
113:     // Redirect back to job boards page with success
114:     return NextResponse.redirect(new URL(`/job-boards?success=${boardName}_connected`, request.url))
115: 
116:   } catch (error) {
117:     console.error('OAuth callback error:', error)
118:     return NextResponse.redirect(new URL('/job-boards?error=server_error', request.url))
119:   }
120: }
</file>

<file path="src/app/api/job-boards/submit/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import connectToDatabase from '@/lib/mongodb'
  4: import JobApplication from '@/models/JobApplication'
  5: import JobBoardIntegration from '@/models/JobBoardIntegration'
  6: import { authOptions } from '@/lib/auth'
  7: import { createJobBoardService } from '@/lib/job-board-service'
  8: import puppeteer from 'puppeteer-core'
  9: import chromium from '@sparticuz/chromium'
 10: import { z } from 'zod'
 11: import { isRateLimited } from '@/lib/rate-limit'
 12: import { isSameOrigin } from '@/lib/security'
 13: 
 14: interface JobSubmission {
 15:   jobBoard: string
 16:   jobUrl: string
 17:   applicationId: string
 18:   status: 'pending' | 'processing' | 'completed' | 'failed'
 19:   submittedAt?: Date
 20:   errorMessage?: string
 21:   applicationData: {
 22:     resumeId: string
 23:     coverLetterId?: string
 24:     customizations?: Record<string, any>
 25:   }
 26: }
 27: 
 28: interface JobBoardConfig {
 29:   name: string
 30:   baseUrl: string
 31:   selectors: {
 32:     applyButton: string
 33:     resumeUpload: string
 34:     coverLetterField?: string
 35:     submitButton: string
 36:   }
 37:   loginRequired: boolean
 38:   automationLevel: 'full' | 'partial' | 'manual'
 39: }
 40: 
 41: const JOB_BOARDS: Record<string, JobBoardConfig> = {
 42:   indeed: {
 43:     name: 'Indeed',
 44:     baseUrl: 'https://www.indeed.com',
 45:     selectors: {
 46:       applyButton: '[data-jk] .jobsearch-IndeedApplyButton-buttonWrapper button, .jobsearch-IndeedApplyButton-newDesign',
 47:       resumeUpload: 'input[type="file"]',
 48:       coverLetterField: 'textarea[name*="cover"], textarea[placeholder*="cover"]',
 49:       submitButton: 'button[type="submit"], .jobsearch-IndeedApplyButton-submitButton'
 50:     },
 51:     loginRequired: false,
 52:     automationLevel: 'partial'
 53:   },
 54:   linkedin: {
 55:     name: 'LinkedIn',
 56:     baseUrl: 'https://www.linkedin.com',
 57:     selectors: {
 58:       applyButton: '.jobs-apply-button, .job-card-container__apply-button',
 59:       resumeUpload: 'input[type="file"]',
 60:       coverLetterField: 'textarea[name*="message"], textarea[placeholder*="message"]',
 61:       submitButton: '.jobs-apply-form__submit-button'
 62:     },
 63:     loginRequired: true,
 64:     automationLevel: 'partial'
 65:   },
 66:   glassdoor: {
 67:     name: 'Glassdoor',
 68:     baseUrl: 'https://www.glassdoor.com',
 69:     selectors: {
 70:       applyButton: '.apply-button, .job-apply-button',
 71:       resumeUpload: 'input[type="file"]',
 72:       coverLetterField: 'textarea[name*="cover"], textarea[placeholder*="cover"]',
 73:       submitButton: '.submit-button, button[type="submit"]'
 74:     },
 75:     loginRequired: true,
 76:     automationLevel: 'partial'
 77:   },
 78:   monster: {
 79:     name: 'Monster',
 80:     baseUrl: 'https://www.monster.com',
 81:     selectors: {
 82:       applyButton: '.apply-button, .job-apply-btn',
 83:       resumeUpload: 'input[type="file"]',
 84:       coverLetterField: 'textarea[name*="cover"], textarea[placeholder*="cover"]',
 85:       submitButton: 'button[type="submit"], .submit-btn'
 86:     },
 87:     loginRequired: false,
 88:     automationLevel: 'partial'
 89:   },
 90:   dice: {
 91:     name: 'Dice',
 92:     baseUrl: 'https://www.dice.com',
 93:     selectors: {
 94:       applyButton: '.apply-btn, .job-apply-button',
 95:       resumeUpload: 'input[type="file"]',
 96:       coverLetterField: 'textarea[name*="cover"], textarea[placeholder*="cover"]',
 97:       submitButton: 'button[type="submit"], .submit-button'
 98:     },
 99:     loginRequired: false,
100:     automationLevel: 'partial'
101:   }
102: }
103: 
104: export async function POST(request: NextRequest) {
105:   try {
106:     const session = await getServerSession(authOptions)
107:     if (!session?.user?.email) {
108:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
109:     }
110: 
111:     if (!isSameOrigin(request)) {
112:       return NextResponse.json({ error: 'Invalid origin' }, { status: 400 })
113:     }
114: 
115:     const limiter = await isRateLimited((session.user as any).id, 'jobboards:submit:post')
116:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
117: 
118:     const schema = z.object({
119:       jobApplicationId: z.string().min(1),
120:       jobBoards: z.array(z.string().min(2)).min(1),
121:       resumeId: z.string().min(1).optional(),
122:       coverLetterId: z.string().min(1).optional(),
123:       customizations: z.record(z.any()).default({})
124:     })
125:     const raw = await request.json()
126:     const parsed = schema.safeParse(raw)
127:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
128:     const { jobApplicationId, jobBoards, resumeId, coverLetterId, customizations } = parsed.data as any
129: 
130:     await connectToDatabase()
131: 
132:     // Get job application
133:     const jobApplication = await JobApplication.findOne({
134:       _id: jobApplicationId,
135:       userId: session.user.id
136:     })
137: 
138:     if (!jobApplication) {
139:       return NextResponse.json(
140:         { error: 'Job application not found' },
141:         { status: 404 }
142:       )
143:     }
144: 
145:     // Validate resume if provided
146:     let resume = null
147:     if (resumeId) {
148:       const Resume = (await import('@/models/Resume')).default
149:       resume = await Resume.findOne({
150:         _id: resumeId,
151:         userId: session.user.id
152:       })
153:       if (!resume) {
154:         return NextResponse.json(
155:           { error: 'Resume not found' },
156:           { status: 404 }
157:         )
158:       }
159:     }
160: 
161:     // Validate cover letter if provided (best-effort load)
162:     let coverLetter: any = null
163:     if (coverLetterId) {
164:       try {
165:         const CoverLetter = (await import('@/models/CoverLetter')).default as any
166:         coverLetter = await CoverLetter.findOne({ _id: coverLetterId, userId: session.user.id })
167:       } catch {}
168:     }
169: 
170:     // Submit to multiple job boards
171:     const submissions = await Promise.allSettled(
172:       jobBoards.map((board: string) => submitToJobBoard({
173:         jobBoard: board,
174:         jobApplication,
175:         resume,
176:         coverLetter,
177:         customizations,
178:         userId: session.user.id
179:       }))
180:     )
181: 
182:     const results = submissions.map((result, index) => ({
183:       jobBoard: jobBoards[index],
184:       success: result.status === 'fulfilled',
185:       data: result.status === 'fulfilled' ? result.value : null,
186:       error: result.status === 'rejected' ? result.reason : null
187:     }))
188: 
189:     const successfulSubmissions = results.filter(r => r.success).length
190: 
191:     return NextResponse.json({
192:       success: true,
193:       message: `Submitted to ${successfulSubmissions} out of ${jobBoards.length} job boards`,
194:       results,
195:       summary: {
196:         total: jobBoards.length,
197:         successful: successfulSubmissions,
198:         failed: jobBoards.length - successfulSubmissions
199:       }
200:     })
201: 
202:   } catch (error) {
203:     console.error('Job board submission error:', error)
204:     return NextResponse.json(
205:       { error: 'Failed to submit applications' },
206:       { status: 500 }
207:     )
208:   }
209: }
210: 
211: async function submitToJobBoard({
212:   jobBoard,
213:   jobApplication,
214:   resume,
215:   coverLetter,
216:   customizations,
217:   userId
218: }: {
219:   jobBoard: string
220:   jobApplication: any
221:   resume: any
222:   coverLetter: any
223:   customizations: Record<string, any>
224:   userId: string
225: }): Promise<any> {
226:   // First, try to use real API integration
227:   try {
228:     const integration = await JobBoardIntegration.findOne({
229:       userId: userId,
230:       boardName: jobBoard,
231:       status: 'connected'
232:     })
233: 
234:     if (integration && integration.accessToken) {
235:       // Check if token is expired
236:       if (integration.isTokenExpired && integration.refreshToken) {
237:         // Try to refresh token
238:         try {
239:           const jobBoardService = createJobBoardService(jobBoard)
240:           const tokenData = await jobBoardService.refreshToken(integration.refreshToken)
241: 
242:           // Update integration with new tokens
243:           integration.accessToken = tokenData.access_token
244:           integration.refreshToken = tokenData.refresh_token || integration.refreshToken
245:           integration.tokenExpiresAt = tokenData.expires_in
246:             ? new Date(Date.now() + tokenData.expires_in * 1000)
247:             : undefined
248:           await integration.save()
249:         } catch (error) {
250:           console.warn(`Token refresh failed for ${jobBoard}:`, error)
251:           integration.status = 'error'
252:           integration.errorMessage = 'Token refresh failed'
253:           await integration.save()
254:           throw error
255:         }
256:       }
257: 
258:       // Check rate limits
259:       const jobBoardService = createJobBoardService(jobBoard)
260:       const withinRateLimit = await jobBoardService.checkRateLimit(integration)
261: 
262:       if (!withinRateLimit) {
263:         throw new Error('Rate limit exceeded')
264:       }
265: 
266:       // Attempt API-based application
267:       try {
268:         const applicationData = {
269:           jobId: extractJobIdFromUrl(jobApplication.jobUrl, jobBoard),
270:           resume: resume ? {
271:             content: resume.content,
272:             filename: `${resume.filename || 'resume'}.pdf`
273:           } : undefined,
274:           coverLetter: coverLetter ? coverLetter.content : undefined,
275:           customizations
276:         }
277: 
278:         const result = await jobBoardService.applyToJob(integration.accessToken, applicationData.jobId, applicationData)
279: 
280:         // Update integration stats
281:         await integration.incrementApplications(true)
282:         await jobBoardService.updateRateLimit(integration)
283: 
284:         return {
285:           jobBoard,
286:           status: 'success',
287:           method: 'api',
288:           applicationId: result.applicationId,
289:           trackingUrl: result.trackingUrl,
290:           message: `Successfully applied via ${jobBoardService.getConfig().displayName} API`
291:         }
292: 
293:       } catch (apiError) {
294:         console.warn(`API application failed for ${jobBoard}:`, apiError)
295: 
296:         // Update integration stats for failed attempt
297:         await integration.incrementApplications(false)
298:         await jobBoardService.updateRateLimit(integration)
299: 
300:         // Fall back to web scraping if API fails
301:         if (apiError instanceof Error && apiError.message !== 'Rate limit exceeded') {
302:           console.log(`Falling back to web scraping for ${jobBoard}`)
303:         } else {
304:           throw apiError // Don't fall back for rate limit errors
305:         }
306:       }
307:     }
308:   } catch (integrationError) {
309:     console.log(`API integration not available for ${jobBoard}, using web scraping:`, integrationError instanceof Error ? integrationError.message : 'Unknown error')
310:   }
311: 
312:   // Fall back to web scraping approach
313:   const boardConfig = JOB_BOARDS[jobBoard]
314:   if (!boardConfig) {
315:     throw new Error(`Unsupported job board: ${jobBoard}`)
316:   }
317: 
318:   const browser = await puppeteer.launch({
319:     args: chromium.args,
320:     executablePath: await chromium.executablePath(),
321:     headless: true,
322:   })
323: 
324:   try {
325:     const page = await browser.newPage()
326: 
327:     // Set user agent and viewport
328:     await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
329:     await page.setViewport({ width: 1366, height: 768 })
330: 
331:     // Navigate to job posting
332:     await page.goto(jobApplication.jobUrl, {
333:       waitUntil: 'networkidle2',
334:       timeout: 30000
335:     })
336: 
337:     // Wait for page to load
338:     await new Promise(r => setTimeout(r, 3000))
339: 
340:     // Try to find and click apply button
341:     try {
342:       const applyButton = await page.$(boardConfig.selectors.applyButton)
343:       if (applyButton) {
344:         await applyButton.click()
345:         await new Promise(r => setTimeout(r, 2000))
346:       } else {
347:         // Try alternative selectors
348:         const alternativeSelectors = [
349:           'button:contains("Apply")',
350:           'a:contains("Apply")',
351:           '.apply-button',
352:           '.job-apply-button'
353:         ]
354: 
355:         for (const selector of alternativeSelectors) {
356:           try {
357:             await page.click(selector)
358:             await new Promise(r => setTimeout(r, 2000))
359:             break
360:           } catch {
361:             continue
362:           }
363:         }
364:       }
365:     } catch (error) {
366:       console.log(`Apply button not found on ${jobBoard}, might be external application`)
367:     }
368: 
369:     // Handle file uploads if present
370:     try {
371:       const fileInput = await page.$(boardConfig.selectors.resumeUpload)
372:       if (fileInput) {
373:         // In a real implementation, we'd upload the actual resume file
374:         // For now, we'll just note that file upload is supported
375:         console.log(`File upload supported on ${jobBoard}`)
376:       }
377:     } catch (error) {
378:       console.log(`File upload not found on ${jobBoard}`)
379:     }
380: 
381:     // Fill cover letter if present
382:     if (coverLetter && boardConfig.selectors.coverLetterField) {
383:       try {
384:         const coverLetterField = await page.$(boardConfig.selectors.coverLetterField)
385:         if (coverLetterField) {
386:           const text = typeof coverLetter.content === 'string' ? coverLetter.content : ''
387:           if (text) await page.type(boardConfig.selectors.coverLetterField, text.slice(0, 4000))
388:         }
389:       } catch (error) {
390:         console.log(`Cover letter field not found on ${jobBoard}`)
391:       }
392:     }
393: 
394:     // Actually submit the application
395:     // Check if we have OAuth integration for API submission
396:     const integration = await JobBoardIntegration.findOne({
397:       userId: userId,
398:       boardName: jobBoard,
399:       status: 'connected'
400:     })
401: 
402:     if (integration && integration.accessToken) {
403:       // Use real API submission via OAuth integration
404:       try {
405:         const jobBoardService = createJobBoardService(jobBoard)
406:         
407:         // Check if token needs refresh
408:         if (integration.tokenExpiresAt && new Date(integration.tokenExpiresAt) < new Date()) {
409:           const tokenData = await jobBoardService.refreshToken(integration.refreshToken)
410:           integration.accessToken = tokenData.access_token
411:           integration.refreshToken = tokenData.refresh_token || integration.refreshToken
412:           integration.tokenExpiresAt = tokenData.expires_in
413:             ? new Date(Date.now() + tokenData.expires_in * 1000)
414:             : undefined
415:           await integration.save()
416:         }
417: 
418:         // Submit via API
419:         const apiResult = await jobBoardService.applyToJob(
420:           integration.accessToken,
421:           jobApplication._id.toString(),
422:           {
423:             resumeId: resume._id.toString(),
424:             coverLetter: coverLetter?.content,
425:             additionalInfo: customizations
426:           }
427:         )
428: 
429:         return {
430:           jobBoard,
431:           status: 'submitted',
432:           submissionId: apiResult.id || apiResult.applicationId,
433:           message: `Application successfully submitted to ${boardConfig.name} via API`,
434:           method: 'api',
435:           supportedFeatures: {
436:             fileUpload: true,
437:             coverLetter: true,
438:             autoSubmit: true,
439:             tracking: true
440:           }
441:         }
442:       } catch (apiError) {
443:         console.error(`[SUBMIT] API submission failed, falling back to browser automation:`, apiError)
444:         // Fall through to browser automation
445:       }
446:     }
447: 
448:     // Fall back to browser automation if no OAuth or API submission failed
449:     if (boardConfig.automationLevel === 'full') {
450:       try {
451:         // Click submit button
452:         await page.click(boardConfig.selectors.submitButton)
453:         
454:         // Wait for submission confirmation (adjust selector based on job board)
455:         await page.waitForSelector('[data-test-id="success"], .success-message, .confirmation', { timeout: 10000 })
456:         
457:         return {
458:           jobBoard,
459:           status: 'submitted',
460:           message: `Application successfully submitted to ${boardConfig.name} via browser automation`,
461:           method: 'automation',
462:           supportedFeatures: {
463:             fileUpload: !!boardConfig.selectors.resumeUpload,
464:             coverLetter: !!boardConfig.selectors.coverLetterField,
465:             autoSubmit: true
466:           }
467:         }
468:       } catch (submitError) {
469:         console.error(`[SUBMIT] Browser automation submission failed:`, submitError)
470:         // Fall through to prepared status
471:       }
472:     }
473: 
474:     // If all else fails, return prepared status
475:     return {
476:       jobBoard,
477:       status: 'prepared',
478:       message: `Application prepared for ${boardConfig.name}. Please complete submission manually or connect OAuth integration for automatic submission.`,
479:       method: 'manual',
480:       supportedFeatures: {
481:         fileUpload: !!boardConfig.selectors.resumeUpload,
482:         coverLetter: !!boardConfig.selectors.coverLetterField,
483:         autoSubmit: false,
484:         requiresOAuth: true
485:       }
486:     }
487: 
488:   } catch (error) {
489:     console.error(`Error submitting to ${jobBoard}:`, error)
490:     throw new Error(`Failed to submit to ${jobBoard}: ${error instanceof Error ? error.message : 'Unknown error'}`)
491:   } finally {
492:     await browser.close()
493:   }
494: }
495: 
496: // Get supported job boards
497: export async function GET() {
498:   try {
499:     const jobBoards = Object.keys(JOB_BOARDS).map(key => ({
500:       id: key,
501:       name: JOB_BOARDS[key].name,
502:       automationLevel: JOB_BOARDS[key].automationLevel,
503:       loginRequired: JOB_BOARDS[key].loginRequired,
504:       features: {
505:         fileUpload: !!JOB_BOARDS[key].selectors.resumeUpload,
506:         coverLetter: !!JOB_BOARDS[key].selectors.coverLetterField,
507:         autoSubmit: JOB_BOARDS[key].automationLevel === 'full'
508:       }
509:     }))
510: 
511:     return NextResponse.json({
512:       success: true,
513:       jobBoards
514:     })
515: 
516:   } catch (error) {
517:     console.error('Get job boards error:', error)
518:     return NextResponse.json(
519:       { error: 'Failed to get job boards' },
520:       { status: 500 }
521:     )
522:   }
523: }
524: 
525: // Helper function to extract job ID from job URL
526: function extractJobIdFromUrl(url: string, boardName: string): string {
527:   try {
528:     const urlObj = new URL(url)
529: 
530:     switch (boardName) {
531:       case 'linkedin':
532:         // LinkedIn job URLs: https://www.linkedin.com/jobs/view/1234567890
533:         const linkedinMatch = url.match(/\/jobs\/view\/(\d+)/)
534:         return linkedinMatch ? linkedinMatch[1] : url
535: 
536:       case 'indeed':
537:         // Indeed job URLs: https://www.indeed.com/viewjob?jk=1234567890
538:         const indeedMatch = url.match(/[?&]jk=([^&]+)/)
539:         return indeedMatch ? indeedMatch[1] : url
540: 
541:       case 'ziprecruiter':
542:         // ZipRecruiter job URLs: https://www.ziprecruiter.com/job/12345678
543:         const zipMatch = url.match(/\/job\/([^/?]+)/)
544:         return zipMatch ? zipMatch[1] : url
545: 
546:       case 'monster':
547:         // Monster job URLs: https://www.monster.com/job-openings/123456789
548:         const monsterMatch = url.match(/\/job-openings\/([^/?]+)/)
549:         return monsterMatch ? monsterMatch[1] : url
550: 
551:       case 'careerbuilder':
552:         // CareerBuilder job URLs: https://www.careerbuilder.com/job/1234567890
553:         const cbMatch = url.match(/\/job\/([^/?]+)/)
554:         return cbMatch ? cbMatch[1] : url
555: 
556:       default:
557:         // Fallback: try to extract any numeric ID from the URL
558:         const idMatch = url.match(/(\d{8,12})/)
559:         return idMatch ? idMatch[1] : url
560:     }
561:   } catch (error) {
562:     console.warn('Failed to parse job URL:', url, error)
563:     return url
564:   }
565: }
</file>

<file path="src/app/api/job/analyze/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server';
  2: import { getServerSession } from 'next-auth/next';
  3: import connectToDatabase from '@/lib/mongodb';
  4: import { authOptions } from '@/lib/auth';
  5: import { extractKeywords } from '@/lib/utils';
  6: import { PerplexityService } from '@/lib/perplexity-service';
  7: import { JOB_ANALYSIS_SYSTEM_PROMPT } from '@/lib/prompts/perplexity';
  8: import { isRateLimited } from '@/lib/rate-limit';
  9: import { jobAnalyzeSchema } from '@/lib/validators';
 10: import JobApplication from '@/models/JobApplication';
 11: import { getOrCreateRequestId, logRequestStart, logRequestEnd, now, durationMs } from '@/lib/observability'
 12: 
 13: export const dynamic = 'force-dynamic'
 14: 
 15: export async function POST(request: NextRequest) {
 16:   try {
 17:     const requestId = getOrCreateRequestId(request.headers as any)
 18:     const startedAt = now()
 19:     const routeKey = 'job:analyze'
 20:     logRequestStart(routeKey, requestId)
 21:     // Check authentication
 22:     if (!process.env.PERPLEXITY_API_KEY) {
 23:       const resp = NextResponse.json({ error: 'AI temporarily unavailable (missing PERPLEXITY_API_KEY)' }, { status: 503 })
 24:       resp.headers.set('x-request-id', requestId)
 25:       return resp
 26:     }
 27:     const session = await getServerSession(authOptions);
 28:     if (!session?.user?.email) {
 29:       return NextResponse.json(
 30:         { error: 'Unauthorized' },
 31:         { status: 401 }
 32:       );
 33:     }
 34: 
 35:     const body = await request.json();
 36:     const parsed = jobAnalyzeSchema.safeParse(body);
 37:     if (!parsed.success) {
 38:       return NextResponse.json({ error: 'Invalid input', details: parsed.error.issues }, { status: 400 });
 39:     }
 40:     const { jobDescription, jobTitle, companyName } = parsed.data;
 41: 
 42:     const rl = await isRateLimited((session.user as any).id, 'job-analyze');
 43:     if (rl) {
 44:       return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });
 45:     }
 46: 
 47:     if (!jobDescription || jobDescription.trim().length < 50) {
 48:       return NextResponse.json(
 49:         { error: 'Job description must be at least 50 characters long' },
 50:         { status: 400 }
 51:       );
 52:     }
 53: 
 54:     // Connect to database
 55:     await connectToDatabase();
 56: 
 57:     // Analyze via Perplexity (pure implementation)
 58:     const ppx = new PerplexityService()
 59:     const userPrompt = `Analyze this job posting and produce strict JSON per schema.\n\n${jobDescription}`
 60:     let analysis: any
 61:     try {
 62:       const result = await ppx.makeRequest(JOB_ANALYSIS_SYSTEM_PROMPT, userPrompt, { maxTokens: 1400, temperature: 0.2 })
 63:       let content = result.content || ''
 64:       if (/```/.test(content)) {
 65:         const m = content.match(/```json[\s\S]*?```/i) || content.match(/```[\s\S]*?```/)
 66:         if (m && m[0]) content = m[0].replace(/```json|```/g,'').trim()
 67:       }
 68:       analysis = JSON.parse(content)
 69:     } catch {
 70:       analysis = {
 71:         jobTitle: jobTitle || 'Unknown Title',
 72:         companyName: companyName || 'Unknown Company',
 73:         keyRequirements: [], preferredSkills: [], responsibilities: [], companyCulture: [],
 74:         experienceLevel: 'unknown', educationRequirements: [], remoteWorkPolicy: 'unknown', salaryRange: 'unknown',
 75:         marketContext: { demandLevel: null, competitiveness: null, notes: [] },
 76:       }
 77:     }
 78: 
 79:     // Persist analysis snapshot to the user's latest application for this company/title (or create a minimal record)
 80:     await connectToDatabase();
 81:     const app = await JobApplication.findOne({ userId: session.user.id, companyName: companyName || analysis.companyName, jobTitle: jobTitle || analysis.jobTitle }).sort({ createdAt: -1 })
 82:     if (app) {
 83:       app.analysis = analysis
 84:       await app.save()
 85:     }
 86: 
 87:     // Extract keywords from the job description
 88:     const keywords = extractKeywords(jobDescription);
 89: 
 90:     const resp = NextResponse.json({
 91:       success: true,
 92:       analysis,
 93:       keywords,
 94:     });
 95:     resp.headers.set('x-request-id', requestId)
 96:     logRequestEnd(routeKey, requestId, 200, durationMs(startedAt))
 97:     return resp
 98: 
 99:   } catch (error: any) {
100:     console.error('Job analysis error:', error);
101:     // Final safety net: if this is quota/key related, return minimal analysis instead of 500
102:     const msg = (error && (error.message || error.code || '')) as string
103:     const quota = (error && (error.code === 'insufficient_quota' || error.status === 429 || /quota/i.test(msg) || /OPENAI_API_KEY/i.test(msg)))
104:     if (quota) {
105:       const body = await request.json().catch(()=>({})) as any
106:       const jd = (body && body.jobDescription) || ''
107:       const jobTitle = (body && body.jobTitle) || 'Unknown Title'
108:       const companyName = (body && body.companyName) || 'Unknown Company'
109:       const keywords = typeof jd === 'string' ? extractKeywords(jd) : []
110:       return NextResponse.json({
111:         success: true,
112:         analysis: {
113:           jobTitle,
114:           companyName,
115:           keyRequirements: [],
116:           preferredSkills: [],
117:           responsibilities: [],
118:           companyCulture: [],
119:           experienceLevel: 'unknown',
120:           educationRequirements: [],
121:           remoteWorkPolicy: 'unknown',
122:           salaryRange: 'unknown',
123:         },
124:         keywords,
125:       })
126:     }
127:     return NextResponse.json({ error: 'Failed to analyze job description' }, { status: 500 })
128:   }
129: }
</file>

<file path="src/app/api/job/compare/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Resume from '@/models/Resume'
 6: import { extractKeywords, calculateMatchScore } from '@/lib/utils'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: export async function POST(request: NextRequest) {
11:   try {
12:     const session = await getServerSession(authOptions)
13:     if (!session?.user?.email) {
14:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
15:     }
16: 
17:     const body = await request.json()
18:     const { resumeId, resumeText: incomingResumeText, jobAnalysis, jobDescription } = body || {}
19:     if (!resumeId && !incomingResumeText) {
20:       return NextResponse.json({ error: 'Provide resumeId or resumeText' }, { status: 400 })
21:     }
22:     if (!jobAnalysis && !jobDescription) {
23:       return NextResponse.json({ error: 'Provide jobAnalysis or jobDescription' }, { status: 400 })
24:     }
25: 
26:     let resumeText = (incomingResumeText as string) || ''
27:     if (resumeId) {
28:       await connectToDatabase()
29:       const resume = await Resume.findOne({ _id: resumeId, userId: (session.user as any).id })
30:       if (!resume) return NextResponse.json({ error: 'Resume not found' }, { status: 404 })
31:       resumeText = resume.extractedText || ''
32:     }
33: 
34:     const jdText = jobDescription || buildJobContextFromAnalysis(jobAnalysis)
35:     const score = calculateMatchScore(resumeText, jdText)
36:     const jdKeywords = extractKeywords(jdText)
37:     const resumeLower = resumeText.toLowerCase()
38:     const matched: string[] = []
39:     const missing: string[] = []
40:     for (const kw of jdKeywords) {
41:       if (!kw || kw.length < 2) continue
42:       if (resumeLower.includes(kw.toLowerCase())) matched.push(kw)
43:       else missing.push(kw)
44:     }
45: 
46:     const unique = (arr: string[]) => Array.from(new Set(arr))
47:     const topMatched = unique(matched).slice(0, 50)
48:     const topMissing = unique(missing).slice(0, 50)
49: 
50:     const suggestions: string[] = []
51:     if (topMissing.length) suggestions.push(`Address missing keywords: ${topMissing.slice(0, 10).join(', ')}`)
52:     if (score < 60) suggestions.push('Add 2-3 quantified achievements aligned to key requirements')
53:     suggestions.push('Mirror job title phrasing in your summary and recent role where appropriate')
54: 
55:     return NextResponse.json({
56:       success: true,
57:       score,
58:       matchedKeywords: topMatched,
59:       missingKeywords: topMissing,
60:       suggestions,
61:     })
62:   } catch (e) {
63:     return NextResponse.json({ error: 'Failed to compare resume' }, { status: 500 })
64:   }
65: }
66: 
67: function buildJobContextFromAnalysis(analysis: any): string {
68:   if (!analysis) return ''
69:   try {
70:     const a = analysis.analysis || analysis
71:     return `Title: ${a.jobTitle || ''}\nCompany: ${a.companyName || ''}\nRequirements: ${(a.keyRequirements||[]).join(', ')}\nSkills: ${(a.preferredSkills||[]).join(', ')}\nResponsibilities: ${(a.responsibilities||[]).join(', ')}\nCulture: ${(a.companyCulture||[]).join(', ')}`
72:   } catch {
73:     return ''
74:   }
75: }
</file>

<file path="src/app/api/jobs/ai-risk/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { JobOutlookAnalyzer } from '@/lib/job-outlook-analyzer'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * ENTERPRISE API: AI/Automation Risk Analysis
11:  * 
12:  * Analyzes automation risk for a specific job title
13:  * Returns risk level, score, and 5-year projections
14:  * Cached for 24 hours via JobOutlookAnalyzer
15:  */
16: export async function POST(request: NextRequest) {
17:   try {
18:     // Authentication
19:     const session = await getServerSession(authOptions)
20:     if (!session?.user?.email) {
21:       return NextResponse.json(
22:         { error: 'Authentication required' },
23:         { status: 401 }
24:       )
25:     }
26: 
27:     // Rate limiting
28:     const userId = session.user.id || session.user.email
29:     if (await isRateLimited(userId, 'ai-risk-analysis')) {
30:       return NextResponse.json(
31:         { error: 'Rate limit exceeded. Please try again later.' },
32:         { status: 429 }
33:       )
34:     }
35: 
36:     const body = await request.json()
37:     const { jobTitle, location = 'Canada' } = body
38: 
39:     if (!jobTitle || typeof jobTitle !== 'string' || jobTitle.length < 2) {
40:       return NextResponse.json(
41:         { error: 'Valid job title is required' },
42:         { status: 400 }
43:       )
44:     }
45: 
46:     console.log('[AI_RISK_API] Analyzing:', jobTitle, 'in', location)
47: 
48:     const outlook = await JobOutlookAnalyzer.analyzeJobOutlook(jobTitle, location)
49: 
50:     console.log('[AI_RISK_API] Risk:', outlook.automation.riskLevel, 'Score:', outlook.automation.riskScore)
51: 
52:     return NextResponse.json({
53:       success: true,
54:       aiRisk: {
55:         level: outlook.automation.riskLevel,
56:         score: outlook.automation.riskScore,
57:         timeline: outlook.automation.automationTimeline,
58:         vulnerableTasks: outlook.automation.vulnerableTasks,
59:         safeTasks: outlook.automation.safeTasks,
60:         recommendations: outlook.automation.recommendations
61:       },
62:       marketIntelligence: {
63:         currentDemand: outlook.market.currentDemand,
64:         competitionLevel: outlook.market.competitionLevel,
65:         emergingSkills: outlook.market.emergingSkills,
66:         averageSalary: outlook.market.averageSalary
67:       },
68:       projections: outlook.projections,
69:       safetyScore: outlook.recommendations.safetyScore
70:     })
71: 
72:   } catch (error) {
73:     console.error('[AI_RISK_API] Error:', error)
74:     return NextResponse.json(
75:       { error: 'Failed to analyze AI risk', details: (error as Error).message },
76:       { status: 500 }
77:     )
78:   }
79: }
</file>

<file path="src/app/api/jobs/analyze/route.ts">
  1: /**
  2:  * Job Analysis API
  3:  * Analyzes job match with user's resume
  4:  */
  5: 
  6: import { NextRequest, NextResponse } from 'next/server'
  7: import { getServerSession } from 'next-auth'
  8: import { authOptions } from '@/lib/auth'
  9: 
 10: interface AnalysisRequest {
 11:   job: {
 12:     title: string
 13:     company: string
 14:     description: string
 15:     skills?: string[]
 16:   }
 17:   resume: string
 18: }
 19: 
 20: export async function POST(request: NextRequest) {
 21:   try {
 22:     const session = await getServerSession(authOptions)
 23:     
 24:     if (!session?.user?.email) {
 25:       return NextResponse.json(
 26:         { error: 'Authentication required' },
 27:         { status: 401 }
 28:       )
 29:     }
 30: 
 31:     const body = await request.json()
 32:     
 33:     // CRITICAL FIX: Input validation with 400 responses (Perplexity recommendation)
 34:     if (!body || typeof body !== 'object') {
 35:       return NextResponse.json(
 36:         { error: 'Invalid request body' },
 37:         { status: 400 }
 38:       )
 39:     }
 40:     
 41:     const { jobTitle, company, jobDescription, resumeText } = body
 42:     
 43:     if (!jobTitle || typeof jobTitle !== 'string') {
 44:       return NextResponse.json(
 45:         { error: 'jobTitle is required and must be a string' },
 46:         { status: 400 }
 47:       )
 48:     }
 49:     
 50:     if (!company || typeof company !== 'string') {
 51:       return NextResponse.json(
 52:         { error: 'company is required and must be a string' },
 53:         { status: 400 }
 54:       )
 55:     }
 56:     
 57:     if (!resumeText || typeof resumeText !== 'string') {
 58:       return NextResponse.json(
 59:         { error: 'resumeText is required and must be a string' },
 60:         { status: 400 }
 61:       )
 62:     }
 63: 
 64:     // Build job object safely
 65:     const job = {
 66:       title: jobTitle,
 67:       company,
 68:       description: jobDescription || '',
 69:       summary: jobDescription || '',
 70:       skills: Array.isArray(body.skills) ? body.skills : []
 71:     }
 72: 
 73:     // Simple keyword-based analysis (can be enhanced with AI later)
 74:     const analysis = await analyzeJobMatch(job, resumeText)
 75: 
 76:     return NextResponse.json({
 77:       success: true,
 78:       ...analysis
 79:     })
 80:   } catch (error: any) {
 81:     console.error('[API] Job analysis error:', error)
 82:     return NextResponse.json(
 83:       { error: 'Analysis failed', details: error.message },
 84:       { status: 500 }
 85:     )
 86:   }
 87: }
 88: 
 89: async function analyzeJobMatch(job: any, resume: string) {
 90:   // ENTERPRISE FIX: Validate inputs with proper defaults
 91:   const resumeLower = (resume || '').toLowerCase()
 92:   const jobDescLower = (job?.description || job?.summary || '').toLowerCase()
 93: 
 94:   // Early return if no valid data
 95:   if (!resumeLower || !jobDescLower) {
 96:     console.warn('[ANALYSIS] Insufficient data for analysis:', { hasResume: !!resume, hasJobDesc: !!(job?.description || job?.summary) })
 97:     return {
 98:       matchScore: 50,
 99:       matchingSkills: [],
100:       missingSkills: [],
101:       recommendations: ['Upload your resume for detailed matching'],
102:       estimatedFit: 'fair' as const
103:     }
104:   }
105:   
106:   // ENTERPRISE FEATURE: Extract years of experience from resume
107:   const experienceYears = extractTotalExperience(resume)
108:   const educationLevel = extractEducationLevel(resume)
109:   
110:   console.log('[ANALYSIS] Experience weighting:', { experienceYears, educationLevel })
111:   
112:   // Common tech skills to check
113:   const coreSkills = [
114:     'JavaScript', 'TypeScript', 'React', 'Node.js', 'Python', 'Java',
115:     'SQL', 'MongoDB', 'AWS', 'Docker', 'Kubernetes', 'Git',
116:     'CSS', 'HTML', 'REST', 'GraphQL', 'Redux', 'Next.js',
117:     'Vue', 'Angular', 'C++', 'C#', '.NET', 'PHP',
118:     // Add sales/business skills
119:     'Sales', 'Business Development', 'Account Management', 'CRM',
120:     'Salesforce', 'HubSpot', 'Lead Generation', 'Negotiation',
121:     'Customer Success', 'B2B', 'B2C', 'SaaS'
122:   ]
123:   
124:   // CRITICAL FIX: Safely merge job skills, ensuring they're all strings
125:   const jobSkills = Array.isArray(job.skills) 
126:     ? job.skills.filter((s: any) => typeof s === 'string' && s.trim().length > 0)
127:     : []
128:   
129:   const allSkills = [...coreSkills, ...jobSkills]
130:   
131:   const matchingSkills: string[] = []
132:   const missingSkills: string[] = []
133:   
134:   for (const skill of allSkills) {
135:     // CRITICAL FIX: Ensure skill is a string before calling toLowerCase
136:     if (typeof skill !== 'string') continue
137:     
138:     const skillLower = skill.toLowerCase()
139:     const inResume = resumeLower.includes(skillLower)
140:     const inJob = jobDescLower.includes(skillLower) || jobSkills.some((s: string) => s.toLowerCase().includes(skillLower))
141:     
142:     if (inJob) {
143:       if (inResume) {
144:         matchingSkills.push(skill)
145:       } else {
146:         missingSkills.push(skill)
147:       }
148:     }
149:   }
150:   
151:   // ENTERPRISE FEATURE: Calculate experience-weighted match score
152:   let baseScore = 0
153:   const totalRelevantSkills = matchingSkills.length + missingSkills.length
154:   
155:   if (totalRelevantSkills > 0) {
156:     baseScore = (matchingSkills.length / totalRelevantSkills) * 100
157:   } else {
158:     baseScore = 50 // neutral if no skills detected
159:   }
160:   
161:   // Apply experience multiplier (15 years = higher weight)
162:   let experienceMultiplier = 1.0
163:   if (experienceYears >= 15) {
164:     experienceMultiplier = 1.25 // 25% boost for 15+ years
165:   } else if (experienceYears >= 10) {
166:     experienceMultiplier = 1.15 // 15% boost for 10+ years
167:   } else if (experienceYears >= 5) {
168:     experienceMultiplier = 1.10 // 10% boost for 5+ years
169:   } else if (experienceYears <= 1) {
170:     experienceMultiplier = 0.85 // 15% penalty for entry-level
171:   }
172:   
173:   // Apply education multiplier
174:   let educationMultiplier = 1.0
175:   if (educationLevel === 'PhD' || educationLevel === 'Masters') {
176:     educationMultiplier = 1.10 // 10% boost for advanced degree
177:   } else if (educationLevel === 'Bachelors') {
178:     educationMultiplier = 1.05 // 5% boost for bachelor's
179:   }
180:   
181:   // Calculate final weighted score
182:   let matchScore = Math.round(baseScore * experienceMultiplier * educationMultiplier)
183:   matchScore = Math.min(matchScore, 100) // Cap at 100
184:   
185:   console.log('[ANALYSIS] Score calculation:', { 
186:     baseScore, 
187:     experienceMultiplier, 
188:     educationMultiplier, 
189:     finalScore: matchScore 
190:   })
191:   
192:   // Determine fit level
193:   let estimatedFit: 'excellent' | 'good' | 'fair' | 'poor'
194:   if (matchScore >= 85) estimatedFit = 'excellent'
195:   else if (matchScore >= 70) estimatedFit = 'good'
196:   else if (matchScore >= 50) estimatedFit = 'fair'
197:   else estimatedFit = 'poor'
198:   
199:   // Generate experience-aware recommendations
200:   const recommendations: string[] = []
201:   
202:   if (experienceYears >= 15) {
203:     recommendations.push(`Leverage your ${experienceYears}+ years of experience as a senior professional`)
204:   } else if (experienceYears >= 5) {
205:     recommendations.push(`Emphasize your ${experienceYears} years of proven industry experience`)
206:   } else if (experienceYears <= 1) {
207:     recommendations.push(`Highlight your education, projects, and eagerness to learn`)
208:   }
209:   
210:   if (matchingSkills.length > 0) {
211:     recommendations.push(`Highlight your experience with: ${matchingSkills.slice(0, 3).join(', ')}`)
212:   }
213:   
214:   if (missingSkills.length > 0 && missingSkills.length <= 3) {
215:     recommendations.push(`Consider learning: ${missingSkills.join(', ')}`)
216:   }
217:   
218:   if (matchScore >= 70) {
219:     recommendations.push('You have strong qualifications for this role')
220:   } else {
221:     recommendations.push('Emphasize transferable skills and willingness to learn')
222:   }
223:   
224:   recommendations.push('Tailor your resume to match the job description')
225:   
226:   return {
227:     matchScore,
228:     matchingSkills: matchingSkills.slice(0, 10),
229:     missingSkills: missingSkills.slice(0, 5),
230:     recommendations: recommendations.slice(0, 5),
231:     estimatedFit
232:   }
233: }
234: 
235: // ENTERPRISE HELPER: Extract total years of experience from resume
236: function extractTotalExperience(resume: string): number {
237:   const text = resume.toLowerCase()
238:   
239:   // Look for explicit "X years of experience" statements
240:   const explicitMatch = text.match(/(\d+)[\s\-+]*(?:years?|yrs?)[\s\-+]*(?:of\s+)?experience/i)
241:   if (explicitMatch) {
242:     return parseInt(explicitMatch[1])
243:   }
244:   
245:   // Calculate from date ranges (YYYY - YYYY or Month YYYY - Month YYYY)
246:   const dateRangePattern = /(\d{4})\s*[-–—]\s*(\d{4}|present|current)/gi
247:   const matches = Array.from(text.matchAll(dateRangePattern))
248:   
249:   let totalYears = 0
250:   for (const match of matches) {
251:     const startYear = parseInt(match[1])
252:     const endYear = match[2].match(/\d{4}/) ? parseInt(match[2]) : new Date().getFullYear()
253:     totalYears += (endYear - startYear)
254:   }
255:   
256:   // If we found date ranges, use that
257:   if (totalYears > 0) {
258:     return Math.min(totalYears, 50) // cap at 50 years
259:   }
260:   
261:   // Fallback: estimate from education (assume 4 years post-grad work if bachelor's mentioned)
262:   if (text.includes('bachelor') || text.includes('b.s.') || text.includes('b.a.')) {
263:     return 4 // assume mid-level
264:   }
265:   
266:   // Default to entry-level
267:   return 1
268: }
269: 
270: // ENTERPRISE HELPER: Extract education level from resume
271: function extractEducationLevel(resume: string): 'PhD' | 'Masters' | 'Bachelors' | 'Associate' | 'HighSchool' | 'None' {
272:   const text = resume.toLowerCase()
273:   
274:   if (text.match(/ph\.?d|doctorate|doctoral/i)) {
275:     return 'PhD'
276:   }
277:   if (text.match(/master|m\.s\.|m\.a\.|mba|m\.eng/i)) {
278:     return 'Masters'
279:   }
280:   if (text.match(/bachelor|b\.s\.|b\.a\.|b\.eng|undergraduate degree/i)) {
281:     return 'Bachelors'
282:   }
283:   if (text.match(/associate|a\.s\.|a\.a\./i)) {
284:     return 'Associate'
285:   }
286:   if (text.match(/high school|secondary school|diploma/i)) {
287:     return 'HighSchool'
288:   }
289:   
290:   return 'None'
291: }
</file>

<file path="src/app/api/jobs/import/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { webScraper } from '@/lib/web-scraper'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(request: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const { jobUrl } = await request.json()
13:     if (!jobUrl || typeof jobUrl !== 'string') return NextResponse.json({ error: 'jobUrl required' }, { status: 400 })
14:     const detail = await webScraper.scrapeJobDetailFromUrl(jobUrl)
15:     return NextResponse.json({ success: true, ...detail })
16:   } catch (e) {
17:     console.error('Job import error:', e)
18:     return NextResponse.json({ 
19:       error: 'Failed to import job', 
20:       details: e instanceof Error ? e.message : 'Unknown error' 
21:     }, { status: 500 })
22:   }
23: }
</file>

<file path="src/app/api/jobs/outlook/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { JobOutlookAnalyzer } from '@/lib/job-outlook-analyzer'
 5: 
 6: export const runtime = 'nodejs'
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * POST /api/jobs/outlook
11:  * 
12:  * Get AI-powered 5-year job outlook analysis including automation risk
13:  */
14: export async function POST(request: NextRequest) {
15:   try {
16:     const session = await getServerSession(authOptions)
17:     if (!session?.user?.email) {
18:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
19:     }
20: 
21:     const body = await request.json()
22:     const { jobTitle, location } = body
23: 
24:     if (!jobTitle) {
25:       return NextResponse.json({ error: 'jobTitle is required' }, { status: 400 })
26:     }
27: 
28:     console.log(`[JOB OUTLOOK] Analyzing: ${jobTitle} in ${location || 'Canada'}`)
29: 
30:     const outlook = await JobOutlookAnalyzer.analyzeJobOutlook(
31:       jobTitle,
32:       location || 'Canada'
33:     )
34: 
35:     return NextResponse.json({
36:       success: true,
37:       outlook,
38:       cached: false
39:     })
40:   } catch (error) {
41:     console.error('[JOB OUTLOOK] Error:', error)
42:     return NextResponse.json(
43:       { error: 'Failed to analyze job outlook' },
44:       { status: 500 }
45:     )
46:   }
47: }
48: 
49: /**
50:  * GET /api/jobs/outlook/quick?jobTitle=Software+Developer
51:  * 
52:  * Quick automation risk check (faster, less comprehensive)
53:  */
54: export async function GET(request: NextRequest) {
55:   try {
56:     const session = await getServerSession(authOptions)
57:     if (!session?.user?.email) {
58:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
59:     }
60: 
61:     const { searchParams } = new URL(request.url)
62:     const jobTitle = searchParams.get('jobTitle')
63: 
64:     if (!jobTitle) {
65:       return NextResponse.json({ error: 'jobTitle query param is required' }, { status: 400 })
66:     }
67: 
68:     const risk = await JobOutlookAnalyzer.quickAutomationRisk(jobTitle)
69: 
70:     return NextResponse.json({
71:       success: true,
72:       jobTitle,
73:       automationRisk: risk
74:     })
75:   } catch (error) {
76:     console.error('[JOB OUTLOOK] Quick risk error:', error)
77:     return NextResponse.json(
78:       { error: 'Failed to assess automation risk' },
79:       { status: 500 }
80:     )
81:   }
82: }
</file>

<file path="src/app/api/jobs/recommend/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { isRateLimited } from '@/lib/rate-limit'
 5: import connectToDatabase from '@/lib/mongodb'
 6: import Resume from '@/models/Resume'
 7: import { z } from 'zod'
 8: import { calculateMatchScore } from '@/lib/utils'
 9: import { webScraper } from '@/lib/web-scraper'
10: 
11: export async function POST(request: NextRequest) {
12:   try {
13:     const session = await getServerSession(authOptions)
14:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
15:     const rl = await isRateLimited((session.user as any).id, 'jobs:recommend')
16:     if (rl) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
17: 
18:     const schema = z.object({
19:       searchUrls: z.array(z.string().url()).min(1).max(5),
20:       limitPerSource: z.number().min(1).max(30).default(10)
21:     })
22:     const raw = await request.json()
23:     const parsed = schema.safeParse(raw)
24:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
25:     const { searchUrls, limitPerSource } = parsed.data as any
26: 
27:     await connectToDatabase()
28:     const resume = await Resume.findOne({ userId: (session.user as any).id }).sort({ createdAt: -1 })
29:     const resumeText: string = resume?.extractedText || ''
30: 
31:     // Scrape each search page and combine
32:     const jobsArrays = await Promise.all(searchUrls.map((u: string) => webScraper.scrapeJobsFromSearchUrl(u, limitPerSource)))
33:     const allJobs = jobsArrays.flat().slice(0, limitPerSource * searchUrls.length)
34: 
35:     // Score and rank
36:     const ranked = allJobs.map(j => ({
37:       ...j,
38:       score: calculateMatchScore(`${j.title || ''} ${j.companyName || ''} ${j.snippet || ''}`, resumeText)
39:     })).sort((a,b)=> (b.score||0) - (a.score||0))
40: 
41:     return NextResponse.json({ success: true, recommendations: ranked })
42:   } catch (e) {
43:     console.error('Recommend error:', e)
44:     return NextResponse.json({ error: 'Failed to recommend jobs' }, { status: 500 })
45:   }
46: }
</file>

<file path="src/app/api/jobs/scrape/search/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { z } from 'zod'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: import { webScraper } from '@/lib/web-scraper'
 7: 
 8: export async function POST(request: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const rl = await isRateLimited((session.user as any).id, 'jobs:scrape:search')
13:     if (rl) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
14: 
15:     const schema = z.object({ searchUrl: z.string().url(), limit: z.number().min(1).max(50).default(20) })
16:     const raw = await request.json()
17:     const parsed = schema.safeParse(raw)
18:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
19:     const { searchUrl, limit } = parsed.data as any
20: 
21:     const jobs = await webScraper.scrapeJobsFromSearchUrl(searchUrl, limit)
22:     return NextResponse.json({ success: true, jobs })
23:   } catch (e) {
24:     console.error('Scrape search error:', e)
25:     return NextResponse.json({ error: 'Failed to scrape search results' }, { status: 500 })
26:   }
27: }
</file>

<file path="src/app/api/jobs/store/route.ts">
  1: /**
  2:  * Store Selected Job API
  3:  * Saves a job selection for analysis in the Career Finder workflow
  4:  */
  5: 
  6: import { NextRequest, NextResponse } from 'next/server'
  7: import { getServerSession } from 'next-auth'
  8: import { authOptions } from '@/lib/auth'
  9: import connectToDatabase from '@/lib/mongodb'
 10: import { SelectedJob } from '@/models/SelectedJob'
 11: 
 12: export async function POST(request: NextRequest) {
 13:   try {
 14:     const session = await getServerSession(authOptions)
 15:     
 16:     if (!session?.user?.email) {
 17:       return NextResponse.json(
 18:         { error: 'Authentication required' },
 19:         { status: 401 }
 20:       )
 21:     }
 22: 
 23:     const jobData = await request.json()
 24: 
 25:     // Don't fail if database storage fails - job is already in localStorage
 26:     try {
 27:       await connectToDatabase()
 28: 
 29:       // ENTERPRISE FIX: Ensure all required fields have defaults
 30:       const selectedJob = await SelectedJob.create({
 31:         userId: session.user.email,
 32:         jobData: {
 33:           id: jobData.id || `job-${Date.now()}`,
 34:           title: jobData.title || 'Untitled Position',
 35:           company: jobData.company || 'Company Name Unavailable',
 36:           location: jobData.location || 'Location Not Specified',
 37:           salary: jobData.salary || 'Not Disclosed',
 38:           description: jobData.description || jobData.summary || 'No description available for this position.',
 39:           url: jobData.url || '',
 40:           source: jobData.source || 'search',
 41:           postedDate: jobData.postedDate || new Date().toISOString(),
 42:           skills: jobData.skills || [],
 43:           requirements: jobData.requirements || [],
 44:         },
 45:         selectedAt: new Date(),
 46:         status: 'pending_analysis'
 47:       })
 48: 
 49:       return NextResponse.json({
 50:         success: true,
 51:         jobId: selectedJob._id,
 52:         message: 'Job stored successfully'
 53:       })
 54:     } catch (dbError: any) {
 55:       // Database storage failed but job is in localStorage, so don't block user
 56:       console.error('[API] Store job DB error (non-blocking):', dbError.message)
 57:       return NextResponse.json({
 58:         success: true,
 59:         jobId: 'local-only',
 60:         message: 'Job stored in browser (database unavailable)',
 61:         warning: 'Job history not saved to account'
 62:       })
 63:     }
 64:   } catch (error: any) {
 65:     console.error('[API] Store job error:', error)
 66:     // Even if this fails, the job is in localStorage, so return success
 67:     return NextResponse.json({
 68:       success: true,
 69:       jobId: 'local-only',
 70:       message: 'Job stored locally',
 71:       warning: 'Could not save to account'
 72:     })
 73:   }
 74: }
 75: 
 76: export async function GET(request: NextRequest) {
 77:   try {
 78:     const session = await getServerSession(authOptions)
 79:     
 80:     if (!session?.user?.email) {
 81:       return NextResponse.json(
 82:         { error: 'Authentication required' },
 83:         { status: 401 }
 84:       )
 85:     }
 86: 
 87:     await connectToDatabase()
 88: 
 89:     // Get user's most recent selected job
 90:     const recentJob = await SelectedJob.findOne({ 
 91:       userId: session.user.email 
 92:     }).sort({ selectedAt: -1 })
 93: 
 94:     if (!recentJob) {
 95:       return NextResponse.json({ job: null })
 96:     }
 97: 
 98:     return NextResponse.json({
 99:       success: true,
100:       job: recentJob.jobData
101:     })
102:   } catch (error: any) {
103:     console.error('[API] Get selected job error:', error)
104:     return NextResponse.json(
105:       { error: 'Failed to retrieve job', details: error.message },
106:       { status: 500 }
107:     )
108:   }
109: }
</file>

<file path="src/app/api/market-intelligence/salary/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { MarketIntelligenceService } from '@/lib/market-intelligence-service'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * ENTERPRISE API: Get Real-Time Salary Data
11:  * 
12:  * Uses Perplexity AI to fetch current salary ranges for a role in a location
13:  * Cached for 24 hours for performance
14:  */
15: export async function POST(request: NextRequest) {
16:   try {
17:     // Authentication
18:     const session = await getServerSession(authOptions)
19:     if (!session?.user?.email) {
20:       return NextResponse.json(
21:         { error: 'Authentication required' },
22:         { status: 401 }
23:       )
24:     }
25: 
26:     // Rate limiting
27:     const userId = session.user.id || session.user.email
28:     if (await isRateLimited(userId, 'market-intelligence-salary')) {
29:       return NextResponse.json(
30:         { error: 'Rate limit exceeded. Please try again later.' },
31:         { status: 429 }
32:       )
33:     }
34: 
35:     const body = await request.json()
36:     const { role, location } = body
37: 
38:     if (!role || typeof role !== 'string' || role.length < 2) {
39:       return NextResponse.json(
40:         { error: 'Valid role is required' },
41:         { status: 400 }
42:       )
43:     }
44: 
45:     if (!location || typeof location !== 'string' || location.length < 2) {
46:       return NextResponse.json(
47:         { error: 'Valid location is required' },
48:         { status: 400 }
49:       )
50:     }
51: 
52:     console.log('[MARKET_INTEL_API] Fetching salary for:', role, 'in', location)
53: 
54:     const service = MarketIntelligenceService.getInstance()
55:     const salaryData = await service.getSalaryData(role, location)
56: 
57:     console.log('[MARKET_INTEL_API] Salary data:', {
58:       role: salaryData.role,
59:       avgSalary: salaryData.avgSalary,
60:       range: `${salaryData.minSalary}-${salaryData.maxSalary}`,
61:       confidence: salaryData.confidence
62:     })
63: 
64:     return NextResponse.json({
65:       success: true,
66:       salary: salaryData
67:     })
68: 
69:   } catch (error) {
70:     console.error('[MARKET_INTEL_API] Error:', error)
71:     return NextResponse.json(
72:       { error: 'Failed to fetch salary data', details: (error as Error).message },
73:       { status: 500 }
74:     )
75:   }
76: }
</file>

<file path="src/app/api/market-intelligence/trends/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { MarketIntelligenceService } from '@/lib/market-intelligence-service'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * ENTERPRISE API: Get Market Trends
11:  * 
12:  * Uses Perplexity AI to fetch current industry trends, hiring patterns, and market insights
13:  * Cached for 24 hours for performance
14:  */
15: export async function POST(request: NextRequest) {
16:   try {
17:     // Authentication
18:     const session = await getServerSession(authOptions)
19:     if (!session?.user?.email) {
20:       return NextResponse.json(
21:         { error: 'Authentication required' },
22:         { status: 401 }
23:       )
24:     }
25: 
26:     // Rate limiting
27:     const userId = session.user.id || session.user.email
28:     if (await isRateLimited(userId, 'market-intelligence-trends')) {
29:       return NextResponse.json(
30:         { error: 'Rate limit exceeded. Please try again later.' },
31:         { status: 429 }
32:       )
33:     }
34: 
35:     const body = await request.json()
36:     const { industry } = body
37: 
38:     console.log('[MARKET_TRENDS_API] Fetching trends for:', industry || 'general market')
39: 
40:     const service = MarketIntelligenceService.getInstance()
41:     const trends = await service.getMarketTrends(industry)
42: 
43:     console.log('[MARKET_TRENDS_API] Found', trends.length, 'trends')
44: 
45:     return NextResponse.json({
46:       success: true,
47:       trends
48:     })
49: 
50:   } catch (error) {
51:     console.error('[MARKET_TRENDS_API] Error:', error)
52:     return NextResponse.json(
53:       { error: 'Failed to fetch market trends', details: (error as Error).message },
54:       { status: 500 }
55:     )
56:   }
57: }
</file>

<file path="src/app/api/network/connections/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import connectToDatabase from '@/lib/mongodb'
  4: import NetworkConnection from '@/models/NetworkConnection'
  5: import User from '@/models/User'
  6: import { authOptions } from '@/lib/auth'
  7: import { z } from 'zod'
  8: import { isRateLimited } from '@/lib/rate-limit'
  9: 
 10: export async function GET(request: NextRequest) {
 11:   try {
 12:     const session = await getServerSession(authOptions)
 13:     if (!session?.user?.email) {
 14:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 15:     }
 16: 
 17:     await connectToDatabase()
 18: 
 19:     const { searchParams } = new URL(request.url)
 20:     const type = searchParams.get('type') || 'all' // all, accepted, pending, suggestions
 21: 
 22:     let connections: any[] = []
 23: 
 24:     if (type === 'suggestions') {
 25:       // Return suggested connections (users not already connected)
 26:       const existingConnections = await NetworkConnection.find({
 27:         $or: [
 28:           { userId: session.user.id },
 29:           { connectedUserId: session.user.id }
 30:         ]
 31:       }).select('userId connectedUserId')
 32: 
 33:       const connectedUserIds = existingConnections.map(conn =>
 34:         conn.userId.toString() === session.user.id ? conn.connectedUserId.toString() : conn.userId.toString()
 35:       )
 36: 
 37:       // Get random users not connected (in a real app, this would use more sophisticated algorithms)
 38:       const suggestedUsers = await User.find({
 39:         _id: { $nin: [...connectedUserIds, session.user.id] },
 40:         email: { $ne: session.user.email } // Exclude self
 41:       }).limit(10).select('name image title location skills')
 42: 
 43:       // Get connection data for all suggested users
 44:       const suggestedUserIds = suggestedUsers.map(user => user._id)
 45: 
 46:       // Get all connections for suggested users and current user
 47:       const [suggestedUsersConnections, currentUserConnections] = await Promise.all([
 48:         NetworkConnection.find({
 49:           $or: [
 50:             { userId: { $in: suggestedUserIds }, status: 'accepted' },
 51:             { connectedUserId: { $in: suggestedUserIds }, status: 'accepted' }
 52:           ]
 53:         }).select('userId connectedUserId'),
 54:         NetworkConnection.find({
 55:           $or: [
 56:             { userId: session.user.id, status: 'accepted' },
 57:             { connectedUserId: session.user.id, status: 'accepted' }
 58:           ]
 59:         }).select('userId connectedUserId')
 60:       ])
 61: 
 62:       // Calculate connection data for each suggested user
 63:       connections = suggestedUsers.map(user => {
 64:         // Count user's total connections
 65:         const userConnectionsCount = suggestedUsersConnections.filter(conn =>
 66:           conn.userId.toString() === user._id.toString() || conn.connectedUserId.toString() === user._id.toString()
 67:         ).length
 68: 
 69:         // Calculate mutual connections
 70:         const currentUserConnectedIds = currentUserConnections.map(conn =>
 71:           conn.userId.toString() === session.user.id ? conn.connectedUserId.toString() : conn.userId.toString()
 72:         )
 73: 
 74:         const suggestedUserConnectedIds = suggestedUsersConnections
 75:           .filter(conn =>
 76:             conn.userId.toString() === user._id.toString() || conn.connectedUserId.toString() === user._id.toString()
 77:           )
 78:           .map(conn =>
 79:             conn.userId.toString() === user._id.toString() ? conn.connectedUserId.toString() : conn.userId.toString()
 80:           )
 81: 
 82:         const mutualConnections = currentUserConnectedIds.filter(id =>
 83:           suggestedUserConnectedIds.includes(id)
 84:         ).length
 85: 
 86:         return {
 87:           id: user._id,
 88:           name: user.name,
 89:           title: user.title || 'Job Seeker',
 90:           avatar: user.image,
 91:           location: user.location || 'Unknown',
 92:           skills: user.skills || [],
 93:           experience: user.experience || 'Unknown',
 94:           connections: userConnectionsCount,
 95:           mutualConnections
 96:         }
 97:       })
 98:     } else {
 99:       // Return actual connections
100:       const query: any = {
101:         $or: [
102:           { userId: session.user.id },
103:           { connectedUserId: session.user.id }
104:         ]
105:       }
106: 
107:       if (type !== 'all') {
108:         query['status'] = type
109:       }
110: 
111:       const userConnections = await NetworkConnection.find(query)
112:         .populate('userId', 'name image title location skills experience')
113:         .populate('connectedUserId', 'name image title location skills experience')
114:         .sort({ createdAt: -1 })
115: 
116:       // Get unique user IDs to fetch connection counts
117:       const userIds = userConnections.map(conn => {
118:         const isInitiator = conn.userId.toString() === session.user.id
119:         return isInitiator ? conn.connectedUserId._id : conn.userId._id
120:       })
121: 
122:       // Get connection counts for all users in one query
123:       const connectionCounts = await NetworkConnection.aggregate([
124:         {
125:           $match: {
126:             $or: [
127:               { userId: { $in: userIds }, status: 'accepted' },
128:               { connectedUserId: { $in: userIds }, status: 'accepted' }
129:             ]
130:           }
131:         },
132:         {
133:           $group: {
134:             _id: {
135:               $cond: {
136:                 if: { $in: ['$userId', userIds] },
137:                 then: '$userId',
138:                 else: '$connectedUserId'
139:               }
140:             },
141:             count: { $sum: 1 }
142:           }
143:         }
144:       ])
145: 
146:       // Create a map of user ID to connection count
147:       const connectionCountMap = new Map()
148:       connectionCounts.forEach(item => {
149:         connectionCountMap.set(item._id.toString(), item.count)
150:       })
151: 
152:       // Transform connections to match expected format
153:       connections = userConnections.map(conn => {
154:         const isInitiator = conn.userId.toString() === session.user.id
155:         const otherUser = isInitiator ? conn.connectedUserId : conn.userId
156:         const connectionCount = connectionCountMap.get(otherUser._id.toString()) || 0
157: 
158:         return {
159:           _id: conn._id,
160:           userId: conn.userId._id,
161:           connectedUserId: conn.connectedUserId._id,
162:           status: conn.status,
163:           initiatedBy: conn.initiatedBy._id,
164:           createdAt: conn.createdAt,
165:           acceptedAt: conn.acceptedAt,
166:           message: conn.message,
167:           user: {
168:             id: otherUser._id,
169:             name: otherUser.name,
170:             title: otherUser.title || 'Job Seeker',
171:             avatar: otherUser.image,
172:             location: otherUser.location || 'Unknown',
173:             skills: otherUser.skills || [],
174:             experience: otherUser.experience || 'Unknown',
175:             connections: connectionCount,
176:             mutualConnections: 0 // This would require additional calculation
177:           }
178:         }
179:       })
180:     }
181: 
182:     // Calculate stats
183:     const totalAccepted = await NetworkConnection.countDocuments({
184:       $or: [
185:         { userId: session.user.id, status: 'accepted' },
186:         { connectedUserId: session.user.id, status: 'accepted' }
187:       ]
188:     })
189: 
190:     const pendingRequests = await NetworkConnection.countDocuments({
191:       $or: [
192:         { userId: session.user.id, status: 'pending' },
193:         { connectedUserId: session.user.id, status: 'pending' }
194:       ],
195:       initiatedBy: { $ne: session.user.id } // Only incoming requests
196:     })
197: 
198:     return NextResponse.json({
199:       success: true,
200:       connections,
201:       stats: {
202:         total: totalAccepted,
203:         pending: pendingRequests
204:       }
205:     })
206: 
207:   } catch (error) {
208:     console.error('Get connections error:', error)
209:     return NextResponse.json(
210:       { error: 'Failed to get connections' },
211:       { status: 500 }
212:     )
213:   }
214: }
215: 
216: export async function POST(request: NextRequest) {
217:   try {
218:     const session = await getServerSession(authOptions)
219:     if (!session?.user?.email) {
220:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
221:     }
222: 
223:     await connectToDatabase()
224: 
225:     const limiter = await isRateLimited((session.user as any).id, 'network:connections:post')
226:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
227: 
228:     const schema = z.object({
229:       action: z.enum(['connect','accept','decline']),
230:       targetUserId: z.string().min(1),
231:       message: z.string().max(500).optional(),
232:     })
233:     const raw = await request.json()
234:     const parsed = schema.safeParse(raw)
235:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
236:     const { action, targetUserId, message } = parsed.data as any
237: 
238:     if (action === 'connect') {
239:       // Check if connection already exists
240:       const existingConnection = await NetworkConnection.findOne({
241:         $or: [
242:           { userId: session.user.id, connectedUserId: targetUserId },
243:           { userId: targetUserId, connectedUserId: session.user.id }
244:         ]
245:       })
246: 
247:       if (existingConnection) {
248:         return NextResponse.json(
249:           { error: 'Connection already exists' },
250:           { status: 400 }
251:         )
252:       }
253: 
254:       // Check if target user exists
255:       const targetUser = await User.findById(targetUserId)
256:       if (!targetUser) {
257:         return NextResponse.json(
258:           { error: 'Target user not found' },
259:           { status: 404 }
260:         )
261:       }
262: 
263:       const newConnection = new NetworkConnection({
264:         userId: session.user.id,
265:         connectedUserId: targetUserId,
266:         status: 'pending',
267:         initiatedBy: session.user.id,
268:         message
269:       })
270: 
271:       await newConnection.save()
272: 
273:       return NextResponse.json({
274:         success: true,
275:         connection: {
276:           _id: newConnection._id,
277:           userId: newConnection.userId,
278:           connectedUserId: newConnection.connectedUserId,
279:           status: newConnection.status,
280:           initiatedBy: newConnection.initiatedBy,
281:           createdAt: newConnection.createdAt,
282:           message: newConnection.message
283:         },
284:         message: 'Connection request sent!'
285:       })
286: 
287:     } else if (action === 'accept') {
288:       const connection = await NetworkConnection.findOne({
289:         userId: targetUserId,
290:         connectedUserId: session.user.id,
291:         status: 'pending'
292:       })
293: 
294:       if (!connection) {
295:         return NextResponse.json(
296:           { error: 'Connection request not found' },
297:           { status: 404 }
298:         )
299:       }
300: 
301:       connection.status = 'accepted'
302:       connection.acceptedAt = new Date()
303:       await connection.save()
304: 
305:       return NextResponse.json({
306:         success: true,
307:         connection: {
308:           _id: connection._id,
309:           userId: connection.userId,
310:           connectedUserId: connection.connectedUserId,
311:           status: connection.status,
312:           initiatedBy: connection.initiatedBy,
313:           createdAt: connection.createdAt,
314:           acceptedAt: connection.acceptedAt,
315:           message: connection.message
316:         },
317:         message: 'Connection accepted!'
318:       })
319: 
320:     } else if (action === 'decline') {
321:       const connection = await NetworkConnection.findOne({
322:         userId: targetUserId,
323:         connectedUserId: session.user.id,
324:         status: 'pending'
325:       })
326: 
327:       if (!connection) {
328:         return NextResponse.json(
329:           { error: 'Connection request not found' },
330:           { status: 404 }
331:         )
332:       }
333: 
334:       connection.status = 'declined'
335:       await connection.save()
336: 
337:       return NextResponse.json({
338:         success: true,
339:         message: 'Connection request declined'
340:       })
341:     }
342: 
343:     return NextResponse.json(
344:       { error: 'Invalid action' },
345:       { status: 400 }
346:     )
347: 
348:   } catch (error) {
349:     console.error('Connection action error:', error)
350:     return NextResponse.json(
351:       { error: 'Failed to process connection action' },
352:       { status: 500 }
353:     )
354:   }
355: }
</file>

<file path="src/app/api/network/feed/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import connectToDatabase from '@/lib/mongodb'
  4: import NetworkPost from '@/models/NetworkPost'
  5: import NetworkConnection from '@/models/NetworkConnection'
  6: import { authOptions } from '@/lib/auth'
  7: import { z } from 'zod'
  8: import { isRateLimited } from '@/lib/rate-limit'
  9: 
 10: export async function GET(request: NextRequest) {
 11:   try {
 12:     const session = await getServerSession(authOptions)
 13:     if (!session?.user?.email) {
 14:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 15:     }
 16: 
 17:     await connectToDatabase()
 18: 
 19:     const { searchParams } = new URL(request.url)
 20:     const page = parseInt(searchParams.get('page') || '1')
 21:     const limit = parseInt(searchParams.get('limit') || '10')
 22:     const type = searchParams.get('type')
 23:     const search = searchParams.get('search')
 24: 
 25:     // Build MongoDB query
 26:     const query: any = {}
 27: 
 28:     // Filter by post type if specified
 29:     if (type && type !== 'all') {
 30:       query.type = type
 31:     }
 32: 
 33:     // Add search functionality
 34:     if (search) {
 35:       query.$or = [
 36:         { content: { $regex: search, $options: 'i' } },
 37:         { title: { $regex: search, $options: 'i' } },
 38:         { tags: { $in: [new RegExp(search, 'i')] } }
 39:       ]
 40:     }
 41: 
 42:     // Get user's connections for filtering posts based on visibility
 43:     const connections = await NetworkConnection.find({
 44:       $or: [
 45:         { userId: session.user.id, status: 'accepted' },
 46:         { connectedUserId: session.user.id, status: 'accepted' }
 47:       ]
 48:     }).select('userId connectedUserId')
 49: 
 50:     const connectedUserIds = connections.map(conn =>
 51:       conn.userId.toString() === session.user.id ? conn.connectedUserId : conn.userId
 52:     )
 53: 
 54:     // Include posts that are:
 55:     // 1. Public
 56:     // 2. Connections-only and user is connected to the author
 57:     // 3. User's own posts (including private ones)
 58:     query.$or = [
 59:       { visibility: 'public' },
 60:       { visibility: 'connections', userId: { $in: connectedUserIds } },
 61:       { userId: session.user.id }
 62:     ]
 63: 
 64:     // Get total count for pagination
 65:     const total = await NetworkPost.countDocuments(query)
 66: 
 67:     // Get posts with pagination
 68:     const posts = await NetworkPost.find(query)
 69:       .populate('userId', 'name image title')
 70:       .sort({ createdAt: -1 })
 71:       .skip((page - 1) * limit)
 72:       .limit(limit)
 73:       .lean()
 74: 
 75:     // Transform posts to match the expected format
 76:     const transformedPosts = posts.map(post => ({
 77:       _id: post._id,
 78:       userId: post.userId._id || post.userId,
 79:       userName: post.userName,
 80:       userAvatar: post.userAvatar,
 81:       userTitle: post.userTitle,
 82:       type: post.type,
 83:       title: post.title,
 84:       content: post.content,
 85:       tags: post.tags,
 86:       attachments: post.attachments,
 87:       likes: post.likes,
 88:       comments: post.comments,
 89:       shares: post.shares,
 90:       createdAt: post.createdAt,
 91:       updatedAt: post.updatedAt,
 92:       visibility: post.visibility
 93:     }))
 94: 
 95:     return NextResponse.json({
 96:       success: true,
 97:       posts: transformedPosts,
 98:       pagination: {
 99:         page,
100:         limit,
101:         total,
102:         pages: Math.ceil(total / limit)
103:       }
104:     })
105: 
106:   } catch (error) {
107:     console.error('Get network feed error:', error)
108:     return NextResponse.json(
109:       { error: 'Failed to get network feed' },
110:       { status: 500 }
111:     )
112:   }
113: }
114: 
115: export async function POST(request: NextRequest) {
116:   try {
117:     const session = await getServerSession(authOptions)
118:     if (!session?.user?.email) {
119:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
120:     }
121: 
122:     const limiter = await isRateLimited((session.user as any).id, 'network:feed:post')
123:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
124: 
125:     const schema = z.object({
126:       type: z.string().max(30).optional(),
127:       title: z.string().max(200).optional(),
128:       content: z.string().min(1).max(4000),
129:       tags: z.array(z.string().max(32)).optional(),
130:       attachments: z.array(z.any()).optional(),
131:       visibility: z.enum(['public','connections','private']).default('public')
132:     })
133:     const raw = await request.json()
134:     const parsed = schema.safeParse(raw)
135:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
136:     const { type, title, content, tags = [], attachments = [], visibility = 'public' } = parsed.data as any
137: 
138:     await connectToDatabase()
139: 
140:     // Create new post using the database model
141:     const newPost = new NetworkPost({
142:       userId: session.user.id,
143:       userName: session.user.name || 'Anonymous',
144:       userAvatar: session.user.image,
145:       userTitle: 'Job Seeker', // This could be fetched from user profile
146:       type: type || 'general',
147:       title,
148:       content,
149:       tags,
150:       attachments,
151:       likes: [],
152:       comments: [],
153:       shares: 0,
154:       visibility
155:     })
156: 
157:     // Save to database
158:     const savedPost = await newPost.save()
159: 
160:     // Return the saved post
161:     return NextResponse.json({
162:       success: true,
163:       post: {
164:         _id: savedPost._id,
165:         userId: savedPost.userId,
166:         userName: savedPost.userName,
167:         userAvatar: savedPost.userAvatar,
168:         userTitle: savedPost.userTitle,
169:         type: savedPost.type,
170:         title: savedPost.title,
171:         content: savedPost.content,
172:         tags: savedPost.tags,
173:         attachments: savedPost.attachments,
174:         likes: savedPost.likes,
175:         comments: savedPost.comments,
176:         shares: savedPost.shares,
177:         createdAt: savedPost.createdAt,
178:         updatedAt: savedPost.updatedAt,
179:         visibility: savedPost.visibility
180:       }
181:     })
182: 
183:   } catch (error) {
184:     console.error('Create network post error:', error)
185:     return NextResponse.json(
186:       { error: 'Failed to create post' },
187:       { status: 500 }
188:     )
189:   }
190: }
</file>

<file path="src/app/api/network/messages/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import connectToDatabase from '@/lib/mongodb'
  4: import Message from '@/models/Message'
  5: import NetworkConnection from '@/models/NetworkConnection'
  6: import { authOptions } from '@/lib/auth'
  7: import { z } from 'zod'
  8: import { isRateLimited } from '@/lib/rate-limit'
  9: import { isSameOrigin } from '@/lib/security'
 10: 
 11: export async function GET(request: NextRequest) {
 12:   try {
 13:     const session = await getServerSession(authOptions)
 14:     if (!session?.user?.email) {
 15:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 16:     }
 17: 
 18:     await connectToDatabase()
 19: 
 20:     const { searchParams } = new URL(request.url)
 21:     const conversationId = searchParams.get('conversationId')
 22:     const otherUserId = searchParams.get('otherUserId')
 23:     const page = parseInt(searchParams.get('page') || '1')
 24:     const limit = parseInt(searchParams.get('limit') || '20')
 25: 
 26:     if (!conversationId && !otherUserId) {
 27:       return NextResponse.json(
 28:         { error: 'Either conversationId or otherUserId is required' },
 29:         { status: 400 }
 30:       )
 31:     }
 32: 
 33:     let query: any = {}
 34: 
 35:     if (conversationId) {
 36:       query.conversationId = conversationId
 37:     } else if (otherUserId) {
 38:       // Generate conversation ID from current user and other user
 39:       const userIds = [session.user.id, otherUserId].sort()
 40:       query.conversationId = userIds.join('_')
 41:     }
 42: 
 43:     // Ensure user is part of the conversation
 44:     query.$or = [
 45:       { senderId: session.user.id },
 46:       { receiverId: session.user.id }
 47:     ]
 48: 
 49:     // Get messages with pagination
 50:     const messages = await Message.find(query)
 51:       .populate('senderId', 'name image')
 52:       .populate('receiverId', 'name image')
 53:       .sort({ createdAt: -1 })
 54:       .skip((page - 1) * limit)
 55:       .limit(limit)
 56:       .lean()
 57: 
 58:     // Transform messages and mark as read for current user
 59:     const transformedMessages = messages.map(msg => ({
 60:       _id: msg._id,
 61:       senderId: msg.senderId._id,
 62:       receiverId: msg.receiverId._id,
 63:       conversationId: msg.conversationId,
 64:       content: msg.content,
 65:       messageType: msg.messageType,
 66:       attachments: msg.attachments,
 67:       isRead: msg.isRead,
 68:       readAt: msg.readAt,
 69:       createdAt: msg.createdAt,
 70:       updatedAt: msg.updatedAt,
 71:       // Additional metadata
 72:       sender: {
 73:         id: msg.senderId._id,
 74:         name: msg.senderId.name,
 75:         avatar: msg.senderId.image
 76:       },
 77:       receiver: {
 78:         id: msg.receiverId._id,
 79:         name: msg.receiverId.name,
 80:         avatar: msg.receiverId.image
 81:       },
 82:       isFromCurrentUser: msg.senderId._id.toString() === session.user.id
 83:     }))
 84: 
 85:     // Mark messages as read (only those received by current user)
 86:     await Message.updateMany(
 87:       {
 88:         conversationId: query.conversationId,
 89:         receiverId: session.user.id,
 90:         isRead: false
 91:       },
 92:       {
 93:         isRead: true,
 94:         readAt: new Date()
 95:       }
 96:     )
 97: 
 98:     // Get total count for pagination
 99:     const total = await Message.countDocuments(query)
100: 
101:     return NextResponse.json({
102:       success: true,
103:       messages: transformedMessages.reverse(), // Return in chronological order
104:       pagination: {
105:         page,
106:         limit,
107:         total,
108:         pages: Math.ceil(total / limit)
109:       }
110:     })
111: 
112:   } catch (error) {
113:     console.error('Get messages error:', error)
114:     return NextResponse.json(
115:       { error: 'Failed to get messages' },
116:       { status: 500 }
117:     )
118:   }
119: }
120: 
121: export async function POST(request: NextRequest) {
122:   try {
123:     const session = await getServerSession(authOptions)
124:     if (!session?.user?.email) {
125:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
126:     }
127: 
128:     if (!isSameOrigin(request)) {
129:       return NextResponse.json({ error: 'Invalid origin' }, { status: 400 })
130:     }
131: 
132:     const limiter = await isRateLimited((session.user as any).id, 'network:messages:post')
133:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
134: 
135:     await connectToDatabase()
136: 
137:     const schema = z.object({
138:       receiverId: z.string().min(1),
139:       content: z.string().max(4000).optional(),
140:       messageType: z.enum(['text','link','image','file']).default('text'),
141:       attachments: z.array(z.any()).optional()
142:     })
143:     const raw = await request.json()
144:     const parsed = schema.safeParse(raw)
145:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
146:     const { receiverId, content, messageType, attachments = [] } = parsed.data as any
147: 
148:     if (!content && (!attachments || (attachments as any[]).length === 0)) {
149:       return NextResponse.json(
150:         { error: 'Message content or attachments are required' },
151:         { status: 400 }
152:       )
153:     }
154: 
155:     // Check if users are connected (can only message connections)
156:     const connection = await NetworkConnection.findOne({
157:       $or: [
158:         { userId: session.user.id, connectedUserId: receiverId, status: 'accepted' },
159:         { userId: receiverId, connectedUserId: session.user.id, status: 'accepted' }
160:       ]
161:     })
162: 
163:     if (!connection) {
164:       return NextResponse.json(
165:         { error: 'You can only message accepted connections' },
166:         { status: 403 }
167:       )
168:     }
169: 
170:     // Create new message
171:     const newMessage = new Message({
172:       senderId: session.user.id,
173:       receiverId,
174:       content,
175:       messageType,
176:       attachments
177:     })
178: 
179:     await newMessage.save()
180: 
181:     // Populate sender and receiver info
182:     await newMessage.populate('senderId', 'name image')
183:     await newMessage.populate('receiverId', 'name image')
184: 
185:     return NextResponse.json({
186:       success: true,
187:       message: {
188:         _id: newMessage._id,
189:         senderId: newMessage.senderId._id,
190:         receiverId: newMessage.receiverId._id,
191:         conversationId: newMessage.conversationId,
192:         content: newMessage.content,
193:         messageType: newMessage.messageType,
194:         attachments: newMessage.attachments,
195:         isRead: newMessage.isRead,
196:         createdAt: newMessage.createdAt,
197:         updatedAt: newMessage.updatedAt,
198:         sender: {
199:           id: newMessage.senderId._id,
200:           name: newMessage.senderId.name,
201:           avatar: newMessage.senderId.image
202:         },
203:         receiver: {
204:           id: newMessage.receiverId._id,
205:           name: newMessage.receiverId.name,
206:           avatar: newMessage.receiverId.image
207:         },
208:         isFromCurrentUser: true
209:       }
210:     })
211: 
212:   } catch (error) {
213:     console.error('Send message error:', error)
214:     return NextResponse.json(
215:       { error: 'Failed to send message' },
216:       { status: 500 }
217:     )
218:   }
219: }
</file>

<file path="src/app/api/notifications/[id]/read/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Notification from '@/models/Notification'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * PATCH /api/notifications/[id]/read - Mark notification as read
11:  */
12: export async function PATCH(
13:   request: NextRequest,
14:   { params }: { params: { id: string } }
15: ) {
16:   try {
17:     const session = await getServerSession(authOptions)
18:     if (!session?.user?.id) {
19:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
20:     }
21: 
22:     await connectToDatabase()
23: 
24:     const notification = await Notification.findOneAndUpdate(
25:       { _id: params.id, userId: session.user.id },
26:       { read: true, readAt: new Date() },
27:       { new: true }
28:     )
29: 
30:     if (!notification) {
31:       return NextResponse.json(
32:         { error: 'Notification not found' },
33:         { status: 404 }
34:       )
35:     }
36: 
37:     return NextResponse.json({
38:       success: true,
39:       notification
40:     })
41:   } catch (error) {
42:     console.error('[NOTIFICATIONS] Mark read error:', error)
43:     return NextResponse.json(
44:       { error: 'Failed to mark as read' },
45:       { status: 500 }
46:     )
47:   }
48: }
</file>

<file path="src/app/api/notifications/count/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Notification from '@/models/Notification'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * GET /api/notifications/count - Get unread notification count
11:  */
12: export async function GET(request: NextRequest) {
13:   try {
14:     const session = await getServerSession(authOptions)
15:     if (!session?.user?.id) {
16:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
17:     }
18: 
19:     await connectToDatabase()
20: 
21:     const count = await Notification.countDocuments({
22:       userId: session.user.id,
23:       read: false
24:     })
25: 
26:     return NextResponse.json({
27:       success: true,
28:       count
29:     })
30:   } catch (error) {
31:     console.error('[NOTIFICATIONS] Count error:', error)
32:     return NextResponse.json(
33:       { error: 'Failed to get count' },
34:       { status: 500 }
35:     )
36:   }
37: }
</file>

<file path="src/app/api/notifications/create/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { dbService } from '@/lib/database'
 5: import Notification from '@/models/Notification'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * ENTERPRISE API: Create Notification
11:  * 
12:  * Creates a new notification for the user
13:  * Types: job_match, application_status, interview_invite, new_feature, system_alert
14:  */
15: export async function POST(request: NextRequest) {
16:   try {
17:     // Authentication
18:     const session = await getServerSession(authOptions)
19:     if (!session?.user?.email) {
20:       return NextResponse.json(
21:         { error: 'Authentication required' },
22:         { status: 401 }
23:       )
24:     }
25: 
26:     const body = await request.json()
27:     const { type, title, message, actionUrl, metadata } = body
28: 
29:     if (!type || !title || !message) {
30:       return NextResponse.json(
31:         { error: 'type, title, and message are required' },
32:         { status: 400 }
33:       )
34:     }
35: 
36:     const validTypes = ['job_match', 'application_status', 'interview_invite', 'new_feature', 'system_alert']
37:     if (!validTypes.includes(type)) {
38:       return NextResponse.json(
39:         { error: `Invalid type. Must be one of: ${validTypes.join(', ')}` },
40:         { status: 400 }
41:       )
42:     }
43: 
44:     await dbService.connect()
45: 
46:     const notification = await Notification.create({
47:       userId: session.user.id || session.user.email,
48:       type,
49:       title,
50:       message,
51:       actionUrl,
52:       metadata,
53:       read: false
54:     })
55: 
56:     console.log('[NOTIFICATION_API] Created:', notification._id, 'for user:', session.user.email)
57: 
58:     return NextResponse.json({
59:       success: true,
60:       notification: {
61:         id: notification._id,
62:         type: notification.type,
63:         title: notification.title,
64:         message: notification.message,
65:         actionUrl: notification.actionUrl,
66:         read: notification.read,
67:         createdAt: notification.createdAt
68:       }
69:     })
70: 
71:   } catch (error) {
72:     console.error('[NOTIFICATION_API] Create error:', error)
73:     return NextResponse.json(
74:       { error: 'Failed to create notification', details: (error as Error).message },
75:       { status: 500 }
76:     )
77:   }
78: }
</file>

<file path="src/app/api/notifications/list/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { dbService } from '@/lib/database'
 5: import Notification from '@/models/Notification'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * ENTERPRISE API: List Notifications
11:  * 
12:  * Fetches user's notifications with pagination
13:  * Query params: limit (default 20), unreadOnly (default false)
14:  */
15: export async function GET(request: NextRequest) {
16:   try {
17:     // Authentication
18:     const session = await getServerSession(authOptions)
19:     if (!session?.user?.email) {
20:       return NextResponse.json(
21:         { error: 'Authentication required' },
22:         { status: 401 }
23:       )
24:     }
25: 
26:     const { searchParams } = new URL(request.url)
27:     const limit = parseInt(searchParams.get('limit') || '20')
28:     const unreadOnly = searchParams.get('unreadOnly') === 'true'
29: 
30:     await dbService.connect()
31: 
32:     const userId = session.user.id || session.user.email
33: 
34:     const query: any = { userId }
35:     if (unreadOnly) {
36:       query.read = false
37:     }
38: 
39:     const notifications = await Notification.find(query)
40:       .sort({ createdAt: -1 })
41:       .limit(limit)
42:       .lean()
43: 
44:     const unreadCount = await Notification.countDocuments({ userId, read: false })
45: 
46:     console.log('[NOTIFICATION_API] Fetched', notifications.length, 'notifications, unread:', unreadCount)
47: 
48:     return NextResponse.json({
49:       success: true,
50:       notifications: notifications.map(n => ({
51:         id: n._id,
52:         type: n.type,
53:         title: n.title,
54:         message: n.message,
55:         actionUrl: n.actionUrl,
56:         read: n.read,
57:         createdAt: n.createdAt
58:       })),
59:       unreadCount,
60:       total: notifications.length
61:     })
62: 
63:   } catch (error) {
64:     console.error('[NOTIFICATION_API] List error:', error)
65:     return NextResponse.json(
66:       { error: 'Failed to fetch notifications', details: (error as Error).message },
67:       { status: 500 }
68:     )
69:   }
70: }
</file>

<file path="src/app/api/notifications/mark-read/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { dbService } from '@/lib/database'
 5: import Notification from '@/models/Notification'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * ENTERPRISE API: Mark Notification as Read
11:  * 
12:  * Marks one or more notifications as read
13:  * Body: { notificationId: string } OR { markAll: true }
14:  */
15: export async function POST(request: NextRequest) {
16:   try {
17:     // Authentication
18:     const session = await getServerSession(authOptions)
19:     if (!session?.user?.email) {
20:       return NextResponse.json(
21:         { error: 'Authentication required' },
22:         { status: 401 }
23:       )
24:     }
25: 
26:     const body = await request.json()
27:     const { notificationId, markAll } = body
28: 
29:     await dbService.connect()
30: 
31:     const userId = session.user.id || session.user.email
32: 
33:     if (markAll) {
34:       // Mark all notifications as read
35:       const result = await Notification.updateMany(
36:         { userId, read: false },
37:         { $set: { read: true } }
38:       )
39: 
40:       console.log('[NOTIFICATION_API] Marked all read for user:', session.user.email, 'Count:', result.modifiedCount)
41: 
42:       return NextResponse.json({
43:         success: true,
44:         markedCount: result.modifiedCount
45:       })
46:     } else if (notificationId) {
47:       // Mark single notification as read
48:       const notification = await Notification.findOneAndUpdate(
49:         { _id: notificationId, userId },
50:         { $set: { read: true } },
51:         { new: true }
52:       )
53: 
54:       if (!notification) {
55:         return NextResponse.json(
56:           { error: 'Notification not found' },
57:           { status: 404 }
58:         )
59:       }
60: 
61:       console.log('[NOTIFICATION_API] Marked read:', notificationId)
62: 
63:       return NextResponse.json({
64:         success: true,
65:         notification: {
66:           id: notification._id,
67:           read: notification.read
68:         }
69:       })
70:     } else {
71:       return NextResponse.json(
72:         { error: 'Either notificationId or markAll must be provided' },
73:         { status: 400 }
74:       )
75:     }
76: 
77:   } catch (error) {
78:     console.error('[NOTIFICATION_API] Mark read error:', error)
79:     return NextResponse.json(
80:       { error: 'Failed to mark notification as read', details: (error as Error).message },
81:       { status: 500 }
82:     )
83:   }
84: }
</file>

<file path="src/app/api/notifications/read-all/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Notification from '@/models/Notification'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * PATCH /api/notifications/read-all - Mark all notifications as read
11:  */
12: export async function PATCH(request: NextRequest) {
13:   try {
14:     const session = await getServerSession(authOptions)
15:     if (!session?.user?.id) {
16:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
17:     }
18: 
19:     await connectToDatabase()
20: 
21:     const result = await Notification.updateMany(
22:       { userId: session.user.id, read: false },
23:       { read: true, readAt: new Date() }
24:     )
25: 
26:     return NextResponse.json({
27:       success: true,
28:       count: result.modifiedCount
29:     })
30:   } catch (error) {
31:     console.error('[NOTIFICATIONS] Mark all read error:', error)
32:     return NextResponse.json(
33:       { error: 'Failed to mark all as read' },
34:       { status: 500 }
35:     )
36:   }
37: }
</file>

<file path="src/app/api/notifications/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Notification from '@/models/Notification'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: /**
10:  * GET /api/notifications - Get user notifications
11:  */
12: export async function GET(request: NextRequest) {
13:   try {
14:     const session = await getServerSession(authOptions)
15:     if (!session?.user?.id) {
16:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
17:     }
18: 
19:     await connectToDatabase()
20: 
21:     const { searchParams } = new URL(request.url)
22:     const limit = parseInt(searchParams.get('limit') || '20')
23:     const unreadOnly = searchParams.get('unreadOnly') === 'true'
24: 
25:     const query: any = { userId: session.user.id }
26:     if (unreadOnly) {
27:       query.read = false
28:     }
29: 
30:     const notifications = await Notification.find(query)
31:       .sort({ createdAt: -1 })
32:       .limit(limit)
33:       .lean()
34: 
35:     return NextResponse.json({
36:       success: true,
37:       notifications
38:     })
39:   } catch (error) {
40:     console.error('[NOTIFICATIONS] Get error:', error)
41:     return NextResponse.json(
42:       { error: 'Failed to fetch notifications' },
43:       { status: 500 }
44:     )
45:   }
46: }
47: 
48: /**
49:  * POST /api/notifications - Create notification
50:  */
51: export async function POST(request: NextRequest) {
52:   try {
53:     const session = await getServerSession(authOptions)
54:     if (!session?.user?.id) {
55:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
56:     }
57: 
58:     await connectToDatabase()
59: 
60:     const body = await request.json()
61:     const { type, title, message, link, priority, metadata } = body
62: 
63:     const notification = await Notification.create({
64:       userId: session.user.id,
65:       type,
66:       title,
67:       message,
68:       link,
69:       priority: priority || 'medium',
70:       metadata,
71:       read: false
72:     })
73: 
74:     return NextResponse.json({
75:       success: true,
76:       notification
77:     })
78:   } catch (error) {
79:     console.error('[NOTIFICATIONS] Create error:', error)
80:     return NextResponse.json(
81:       { error: 'Failed to create notification' },
82:       { status: 500 }
83:     )
84:   }
85: }
</file>

<file path="src/app/api/oauth/gmail/authorize/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: 
 7: function getOrigin(req: NextRequest): string {
 8:   try {
 9:     const host = req.headers.get('x-forwarded-host') || req.headers.get('host') || ''
10:     const proto = req.headers.get('x-forwarded-proto') || (host.startsWith('localhost') ? 'http' : 'https')
11:     return `${proto}://${host}`
12:   } catch { return '' }
13: }
14: 
15: export async function GET(req: NextRequest) {
16:   try {
17:     const session = await getServerSession(authOptions)
18:     if (!session?.user?.email) return NextResponse.redirect(new URL('/auth/signin', getOrigin(req)))
19:     const clientId = process.env.GOOGLE_CLIENT_ID
20:     const redirectBase = process.env.NEXTAUTH_URL || getOrigin(req)
21:     if (!clientId || !redirectBase) return NextResponse.json({ error: 'Missing GOOGLE_CLIENT_ID or base URL' }, { status: 500 })
22:     const redirectUri = `${redirectBase.replace(/\/$/, '')}/api/oauth/gmail/callback`
23:     const scope = encodeURIComponent('https://www.googleapis.com/auth/gmail.modify openid email profile')
24:     const url = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${encodeURIComponent(clientId)}&redirect_uri=${encodeURIComponent(redirectUri)}&response_type=code&scope=${scope}&access_type=offline&prompt=consent`
25:     return NextResponse.redirect(url)
26:   } catch (e) {
27:     return NextResponse.json({ error: 'Failed to start Gmail OAuth' }, { status: 500 })
28:   }
29: }
</file>

<file path="src/app/api/oauth/gmail/callback/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import connectToDatabase from '@/lib/mongodb'
 3: import OAuthToken from '@/models/OAuthToken'
 4: import { getServerSession } from 'next-auth/next'
 5: import { authOptions } from '@/lib/auth'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function GET(req: NextRequest) {
10:   try {
11:     const code = req.nextUrl.searchParams.get('code')
12:     if (!code) return NextResponse.json({ error: 'Missing code' }, { status: 400 })
13:     const clientId = process.env.GOOGLE_CLIENT_ID
14:     const clientSecret = process.env.GOOGLE_CLIENT_SECRET
15:     const baseHost = (req.headers.get('x-forwarded-host') || req.headers.get('host') || '')
16:     const proto = req.headers.get('x-forwarded-proto') || (baseHost.startsWith('localhost') ? 'http' : 'https')
17:     const base = (process.env.NEXTAUTH_URL || `${proto}://${baseHost}`).replace(/\/$/, '')
18:     const redirectUri = `${base}/api/oauth/gmail/callback`
19:     if (!clientId || !clientSecret) return NextResponse.json({ error: 'Missing Google OAuth env' }, { status: 500 })
20:     const body = new URLSearchParams({
21:       code,
22:       client_id: clientId,
23:       client_secret: clientSecret,
24:       redirect_uri: redirectUri,
25:       grant_type: 'authorization_code'
26:     })
27:     const res = await fetch('https://oauth2.googleapis.com/token', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body })
28:     const json = await res.json() as any
29:     if (!res.ok) return NextResponse.json({ error: 'Token exchange failed', details: json }, { status: 400 })
30:     const session = await getServerSession(authOptions)
31:     if (!session?.user?.email) {
32:       const out = new URL(base)
33:       out.pathname = '/auth/signin'
34:       return NextResponse.redirect(out)
35:     }
36:     await connectToDatabase()
37:     await OAuthToken.findOneAndUpdate(
38:       { userId: (session.user as any).id, provider: 'gmail' },
39:       {
40:         accessToken: json.access_token,
41:         refreshToken: json.refresh_token,
42:         scope: json.scope,
43:         expiresAt: json.expires_in ? new Date(Date.now() + json.expires_in * 1000) : undefined,
44:       },
45:       { upsert: true }
46:     )
47:     const done = new URL(base)
48:     done.pathname = '/dashboard'
49:     return NextResponse.redirect(done)
50:   } catch (e) {
51:     return NextResponse.json({ error: 'Callback failed' }, { status: 500 })
52:   }
53: }
</file>

<file path="src/app/api/oauth/gmail/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import OAuthToken from '@/models/OAuthToken'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     const { accessToken, refreshToken, scope, expiresAt } = await req.json()
14:     await connectToDatabase()
15:     await OAuthToken.findOneAndUpdate(
16:       { userId: (session.user as any).id, provider: 'gmail' },
17:       { accessToken, refreshToken, scope, expiresAt: expiresAt ? new Date(expiresAt) : undefined },
18:       { upsert: true }
19:     )
20:     return NextResponse.json({ success: true })
21:   } catch (e) {
22:     return NextResponse.json({ error: 'Failed to store Gmail token' }, { status: 500 })
23:   }
24: }
</file>

<file path="src/app/api/oauth/outlook/authorize/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: 
 7: function getOrigin(req: NextRequest): string {
 8:   try {
 9:     const host = req.headers.get('x-forwarded-host') || req.headers.get('host') || ''
10:     const proto = req.headers.get('x-forwarded-proto') || (host.startsWith('localhost') ? 'http' : 'https')
11:     return `${proto}://${host}`
12:   } catch { return '' }
13: }
14: 
15: export async function GET(req: NextRequest) {
16:   try {
17:     const session = await getServerSession(authOptions)
18:     if (!session?.user?.email) return NextResponse.redirect(new URL('/auth/signin', getOrigin(req)))
19:     const clientId = process.env.MS_CLIENT_ID
20:     const redirectBase = process.env.NEXTAUTH_URL || getOrigin(req)
21:     if (!clientId || !redirectBase) return NextResponse.json({ error: 'Missing MS_CLIENT_ID or base URL' }, { status: 500 })
22:     const redirectUri = `${redirectBase.replace(/\/$/, '')}/api/oauth/outlook/callback`
23:     const scope = encodeURIComponent('https://graph.microsoft.com/Mail.Read offline_access openid email profile')
24:     const url = `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=${encodeURIComponent(clientId)}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&response_mode=query&scope=${scope}`
25:     return NextResponse.redirect(url)
26:   } catch (e) {
27:     return NextResponse.json({ error: 'Failed to start Outlook OAuth' }, { status: 500 })
28:   }
29: }
</file>

<file path="src/app/api/oauth/outlook/callback/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import OAuthToken from '@/models/OAuthToken'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function GET(req: NextRequest) {
10:   try {
11:     const code = req.nextUrl.searchParams.get('code')
12:     if (!code) return NextResponse.json({ error: 'Missing code' }, { status: 400 })
13:     const host = req.headers.get('x-forwarded-host') || req.headers.get('host') || ''
14:     const proto = req.headers.get('x-forwarded-proto') || (host.startsWith('localhost') ? 'http' : 'https')
15:     const base = (process.env.NEXTAUTH_URL || `${proto}://${host}`).replace(/\/$/, '')
16:     const clientId = process.env.MS_CLIENT_ID
17:     const clientSecret = process.env.MS_CLIENT_SECRET
18:     if (!clientId || !clientSecret) return NextResponse.json({ error: 'Missing Microsoft OAuth env' }, { status: 500 })
19:     const redirectUri = `${base}/api/oauth/outlook/callback`
20:     const params = new URLSearchParams({
21:       client_id: clientId,
22:       client_secret: clientSecret,
23:       code,
24:       redirect_uri: redirectUri,
25:       grant_type: 'authorization_code'
26:     })
27:     const tokenRes = await fetch('https://login.microsoftonline.com/common/oauth2/v2.0/token', {
28:       method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: params
29:     })
30:     const tokenJson: any = await tokenRes.json()
31:     if (!tokenRes.ok) return NextResponse.json({ error: 'Token exchange failed', details: tokenJson }, { status: 400 })
32:     const session = await getServerSession(authOptions)
33:     if (session?.user?.email) {
34:       await connectToDatabase()
35:       await OAuthToken.findOneAndUpdate(
36:         { userId: (session.user as any).id, provider: 'outlook' },
37:         {
38:           accessToken: tokenJson.access_token,
39:           refreshToken: tokenJson.refresh_token,
40:           scope: tokenJson.scope,
41:           expiresAt: tokenJson.expires_in ? new Date(Date.now() + tokenJson.expires_in * 1000) : undefined,
42:         },
43:         { upsert: true }
44:       )
45:       const done = new URL(base)
46:       done.pathname = '/dashboard'
47:       return NextResponse.redirect(done)
48:     } else {
49:       const signin = new URL(base)
50:       signin.pathname = '/auth/signin'
51:       return NextResponse.redirect(signin)
52:     }
53:   } catch (e) {
54:     return NextResponse.json({ error: 'Callback failed' }, { status: 500 })
55:   }
56: }
</file>

<file path="src/app/api/oauth/outlook/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import OAuthToken from '@/models/OAuthToken'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     const { accessToken, refreshToken, scope, expiresAt } = await req.json()
14:     await connectToDatabase()
15:     await OAuthToken.findOneAndUpdate(
16:       { userId: (session.user as any).id, provider: 'outlook' },
17:       { accessToken, refreshToken, scope, expiresAt: expiresAt ? new Date(expiresAt) : undefined },
18:       { upsert: true }
19:     )
20:     return NextResponse.json({ success: true })
21:   } catch (e) {
22:     return NextResponse.json({ error: 'Failed to store Outlook token' }, { status: 500 })
23:   }
24: }
</file>

<file path="src/app/api/onboarding/quiz/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import connectToDatabase from '@/lib/mongodb'
  5: import User from '@/models/User'
  6: import { validateQuizAnswers, UserProfile } from '@/lib/onboarding-utils'
  7: 
  8: export async function POST(req: NextRequest) {
  9:   try {
 10:     // Check authentication
 11:     const session = await getServerSession(authOptions)
 12:     if (!session?.user?.email) {
 13:       return NextResponse.json(
 14:         { error: 'Unauthorized' },
 15:         { status: 401 }
 16:       )
 17:     }
 18: 
 19:     // Parse request body
 20:     const body = await req.json()
 21:     
 22:     // Validate quiz answers
 23:     const validation = validateQuizAnswers(body)
 24:     if (!validation.valid) {
 25:       return NextResponse.json(
 26:         { error: 'Validation failed', errors: validation.errors },
 27:         { status: 400 }
 28:       )
 29:     }
 30: 
 31:     // Connect to database
 32:     await connectToDatabase()
 33: 
 34:     // Prepare profile data
 35:     const profileData: UserProfile = {
 36:       onboardingComplete: true,
 37:       currentSituation: body.currentSituation,
 38:       yearsOfExperience: body.yearsOfExperience,
 39:       targetRole: body.targetRole,
 40:       workPreferences: body.workPreferences,
 41:       preferredLocation: body.preferredLocation || '',
 42:       timeline: body.timeline || 'flexible',
 43:       urgency: body.urgency,
 44:       completedAt: new Date(body.completedAt || new Date())
 45:     }
 46: 
 47:     // Update user profile
 48:     const user = await User.findOneAndUpdate(
 49:       { email: session.user.email },
 50:       {
 51:         $set: {
 52:           profile: profileData,
 53:           updatedAt: new Date()
 54:         }
 55:       },
 56:       { new: true, upsert: false }
 57:     )
 58: 
 59:     if (!user) {
 60:       return NextResponse.json(
 61:         { error: 'User not found' },
 62:         { status: 404 }
 63:       )
 64:     }
 65: 
 66:     console.log('[ONBOARDING] ✅ Quiz completed for user:', session.user.email)
 67:     console.log('[ONBOARDING] Profile data:', {
 68:       situation: profileData.currentSituation,
 69:       experience: profileData.yearsOfExperience,
 70:       role: profileData.targetRole,
 71:       urgency: profileData.urgency
 72:     })
 73: 
 74:     return NextResponse.json({
 75:       success: true,
 76:       profile: profileData,
 77:       redirectUrl: '/career-finder/resume'
 78:     })
 79:   } catch (error) {
 80:     console.error('[ONBOARDING] Error saving quiz:', error)
 81:     return NextResponse.json(
 82:       { error: 'Failed to save quiz answers' },
 83:       { status: 500 }
 84:     )
 85:   }
 86: }
 87: 
 88: export async function GET() {
 89:   try {
 90:     // Check authentication
 91:     const session = await getServerSession(authOptions)
 92:     if (!session?.user?.email) {
 93:       return NextResponse.json(
 94:         { error: 'Unauthorized' },
 95:         { status: 401 }
 96:       )
 97:     }
 98: 
 99:     // Connect to database
100:     await connectToDatabase()
101: 
102:     // Get user profile
103:     const user = await User.findOne({ email: session.user.email })
104:     
105:     if (!user) {
106:       return NextResponse.json(
107:         { error: 'User not found' },
108:         { status: 404 }
109:       )
110:     }
111: 
112:     return NextResponse.json({
113:       success: true,
114:       profile: user.profile || null,
115:       onboardingComplete: user.profile?.onboardingComplete || false
116:     })
117:   } catch (error) {
118:     console.error('[ONBOARDING] Error fetching profile:', error)
119:     return NextResponse.json(
120:       { error: 'Failed to fetch profile' },
121:       { status: 500 }
122:     )
123:   }
124: }
</file>

<file path="src/app/api/openapi/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: 
 3: export const dynamic = 'force-dynamic'
 4: 
 5: export async function GET(_req: NextRequest) {
 6:   const spec = {
 7:     openapi: '3.0.0',
 8:     info: { title: 'Career Lever API', version: '1.0.0' },
 9:     paths: {
10:       '/api/insights/success': { post: { summary: 'Score application', responses: { '200': { description: 'OK' } } } },
11:       '/api/insights/success-v2': { post: { summary: 'Score application v2', responses: { '200': { description: 'OK' } } } },
12:       '/api/insights/trajectory': { post: { summary: 'Career trajectory plan', responses: { '200': { description: 'OK' } } } },
13:       '/api/insights/psychology': { post: { summary: 'Employer psychology profile', responses: { '200': { description: 'OK' } } } },
14:       '/api/insights/salary': { post: { summary: 'Salary negotiation plan', responses: { '200': { description: 'OK' } } } },
15:       '/api/v2/company/intel': { post: { summary: 'Market intelligence summary', responses: { '200': { description: 'OK' } } } },
16:       '/api/reverse-market/showcases': { get: { summary: 'List showcases', responses: { '200': { description: 'OK' } } }, post: { summary: 'Create showcase', responses: { '200': { description: 'OK' } } } },
17:       '/api/reverse-market/bids': { get: { summary: 'List bids', responses: { '200': { description: 'OK' } } }, post: { summary: 'Create bid', responses: { '200': { description: 'OK' } } } },
18:       '/api/cron/daily': { get: { summary: 'Run daily jobs', responses: { '200': { description: 'OK' } } } },
19:       '/api/cron/resume-years-backfill': { post: { summary: 'Backfill yearsExperience', responses: { '200': { description: 'OK' } } } },
20:       '/api/analytics/ab': { get: { summary: 'Get AB events', responses: { '200': { description: 'OK' } } }, post: { summary: 'Log AB event', responses: { '200': { description: 'OK' } } } },
21:       '/api/assistants/coach': { post: { summary: 'Emotional career coach', responses: { '200': { description: 'OK' } } } },
22:     }
23:   }
24:   return NextResponse.json(spec)
25: }
</file>

<file path="src/app/api/ops/audit/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: 
 3: export const dynamic = 'force-dynamic'
 4: 
 5: const events: Array<{ at: string; actor?: string; action: string; meta?: any }> = []
 6: 
 7: export async function POST(req: NextRequest) {
 8:   try {
 9:     const { action, meta } = await req.json()
10:     if (!action) return NextResponse.json({ error: 'action required' }, { status: 400 })
11:     events.push({ at: new Date().toISOString(), action, meta })
12:     if (events.length > 1000) events.shift()
13:     return NextResponse.json({ success: true })
14:   } catch (e) {
15:     return NextResponse.json({ error: 'Failed' }, { status: 500 })
16:   }
17: }
18: 
19: export async function GET() {
20:   try {
21:     return NextResponse.json({ success: true, events: events.slice(-200) })
22:   } catch (e) {
23:     return NextResponse.json({ error: 'Failed' }, { status: 500 })
24:   }
25: }
</file>

<file path="src/app/api/ops/metrics/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: 
 3: export const dynamic = 'force-dynamic'
 4: 
 5: let counters: Record<string, number> = {}
 6: let latencies: number[] = []
 7: 
 8: export async function POST(req: NextRequest) {
 9:   try {
10:     const { key, latencyMs } = await req.json()
11:     if (!key) return NextResponse.json({ error: 'key required' }, { status: 400 })
12:     counters[key] = (counters[key] || 0) + 1
13:     if (typeof latencyMs === 'number') {
14:       latencies.push(Math.max(0, Math.min(120000, latencyMs)))
15:       if (latencies.length > 1000) latencies = latencies.slice(-1000)
16:     }
17:     return NextResponse.json({ success: true })
18:   } catch (e) {
19:     return NextResponse.json({ error: 'Failed' }, { status: 500 })
20:   }
21: }
22: 
23: export async function GET() {
24:   try {
25:     const avgLatency = latencies.length ? Math.round(latencies.reduce((a,b)=>a+b,0)/latencies.length) : 0
26:     const p95 = (()=>{ if (!latencies.length) return 0; const s=[...latencies].sort((a,b)=>a-b); return s[Math.floor(0.95*(s.length-1))] })()
27:     return NextResponse.json({ success: true, counters, avgLatencyMs: avgLatency, p95LatencyMs: p95 })
28:   } catch (e) {
29:     return NextResponse.json({ error: 'Failed' }, { status: 500 })
30:   }
31: }
</file>

<file path="src/app/api/ops/otel/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: 
 3: export const dynamic = 'force-dynamic'
 4: 
 5: export async function POST(req: NextRequest) {
 6:   try {
 7:     // Minimal OTLP passthrough placeholder (documented endpoint)
 8:     const body = await req.arrayBuffer()
 9:     const len = body.byteLength
10:     return new NextResponse(JSON.stringify({ success: true, received: len }), { status: 200, headers: { 'Content-Type': 'application/json' } })
11:   } catch (e) {
12:     return NextResponse.json({ error: 'Failed' }, { status: 500 })
13:   }
14: }
</file>

<file path="src/app/api/ops/slo/route.ts">
 1: import { NextResponse } from 'next/server'
 2: 
 3: export const dynamic = 'force-dynamic'
 4: 
 5: export async function GET() {
 6:   try {
 7:     // Minimal SLO indicators for dashboards
 8:     const indicators = {
 9:       aiP95LatencyMs: 3000,
10:       scrapeSuccessRate: 0.8,
11:       uptimeTarget: 0.995,
12:     }
13:     return NextResponse.json({ success: true, indicators })
14:   } catch (e) {
15:     return NextResponse.json({ error: 'Failed' }, { status: 500 })
16:   }
17: }
</file>

<file path="src/app/api/outreach/followup/cancel/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import { dbService } from '@/lib/database'
 5: import mongoose from 'mongoose'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: export const runtime = 'nodejs'
 9: 
10: /**
11:  * POST /api/outreach/followup/cancel
12:  * Cancel a follow-up sequence
13:  */
14: export async function POST(request: NextRequest) {
15:   try {
16:     await dbService.connect()
17:     
18:     const session = await getServerSession(authOptions)
19:     if (!session?.user?.id) {
20:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
21:     }
22:     
23:     const body = await request.json()
24:     const { sequence_id, reason } = body
25:     
26:     if (!sequence_id) {
27:       return NextResponse.json({ error: 'sequence_id required' }, { status: 400 })
28:     }
29:     
30:     const FollowUpSequence = mongoose.models.FollowUpSequence
31:     if (!FollowUpSequence) {
32:       return NextResponse.json({ error: 'Model not found' }, { status: 500 })
33:     }
34:     
35:     // Update sequence status based on reason
36:     const newStatus = reason === 'replied' ? 'replied' : 'completed'
37:     
38:     const result = await FollowUpSequence.updateOne(
39:       {
40:         _id: sequence_id,
41:         userId: session.user.id
42:       },
43:       {
44:         $set: {
45:           status: newStatus,
46:           last_updated: new Date()
47:         }
48:       }
49:     )
50:     
51:     if (result.modifiedCount > 0) {
52:       console.log('[FOLLOWUP_CANCEL] Cancelled:', sequence_id, reason)
53:       return NextResponse.json({
54:         success: true,
55:         message: `Sequence cancelled: ${reason}`
56:       })
57:     } else {
58:       return NextResponse.json(
59:         { error: 'Sequence not found or unauthorized' },
60:         { status: 404 }
61:       )
62:     }
63:     
64:   } catch (error) {
65:     console.error('[FOLLOWUP_CANCEL] Error:', error)
66:     return NextResponse.json(
67:       { error: 'Failed to cancel sequence' },
68:       { status: 500 }
69:     )
70:   }
71: }
</file>

<file path="src/app/api/outreach/followup/create/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import { FollowUpAutomationService } from '@/lib/followup-automation'
  5: import { dbService } from '@/lib/database'
  6: import mongoose from 'mongoose'
  7: 
  8: export const dynamic = 'force-dynamic'
  9: export const runtime = 'nodejs'
 10: 
 11: /**
 12:  * FollowUpSequence Schema
 13:  */
 14: const FollowUpSequenceSchema = new mongoose.Schema({
 15:   original_email_id: { type: String, required: true },
 16:   userId: { type: String, required: true, index: true },
 17:   contact_email: { type: String, required: true },
 18:   contact_name: { type: String, required: true },
 19:   company_name: { type: String, required: true },
 20:   job_title: { type: String, required: true },
 21:   
 22:   sequences: [{
 23:     step_number: Number,
 24:     days_after: Number,
 25:     subject: String,
 26:     body: String,
 27:     status: {
 28:       type: String,
 29:       enum: ['pending', 'scheduled', 'sent', 'skipped'],
 30:       default: 'pending'
 31:     },
 32:     scheduled_time: Date,
 33:     sent_at: Date,
 34:     message_id: String,
 35:     tone: String
 36:   }],
 37:   
 38:   status: {
 39:     type: String,
 40:     enum: ['active', 'completed', 'paused', 'replied'],
 41:     default: 'active',
 42:     index: true
 43:   },
 44:   
 45:   created_at: { type: Date, default: Date.now },
 46:   last_updated: { type: Date, default: Date.now }
 47: }, {
 48:   timestamps: true
 49: })
 50: 
 51: FollowUpSequenceSchema.index({ userId: 1, status: 1 })
 52: FollowUpSequenceSchema.index({ 'sequences.scheduled_time': 1, 'sequences.status': 1 })
 53: 
 54: const FollowUpSequence = mongoose.models.FollowUpSequence ||
 55:   mongoose.model('FollowUpSequence', FollowUpSequenceSchema)
 56: 
 57: /**
 58:  * POST /api/outreach/followup/create
 59:  * Create automated follow-up sequence
 60:  */
 61: export async function POST(request: NextRequest) {
 62:   try {
 63:     await dbService.connect()
 64:     
 65:     const session = await getServerSession(authOptions)
 66:     if (!session?.user?.id) {
 67:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 68:     }
 69:     
 70:     const body = await request.json()
 71:     const {
 72:       original_email_id,
 73:       contact_email,
 74:       contact_name,
 75:       company_name,
 76:       job_title,
 77:       original_subject,
 78:       original_body,
 79:       resume_text
 80:     } = body
 81:     
 82:     // Validation
 83:     if (!contact_email || !contact_name || !company_name || !job_title) {
 84:       return NextResponse.json(
 85:         { error: 'Missing required fields' },
 86:         { status: 400 }
 87:       )
 88:     }
 89:     
 90:     console.log('[FOLLOWUP_CREATE] Creating sequence for:', contact_name)
 91:     
 92:     // Generate follow-up sequence using AI
 93:     const sequence = await FollowUpAutomationService.createFollowUpSequence(
 94:       {
 95:         id: original_email_id || `email_${Date.now()}`,
 96:         contact_email,
 97:         contact_name,
 98:         company_name,
 99:         job_title,
100:         original_subject: original_subject || '',
101:         original_body: original_body || ''
102:       },
103:       session.user.id,
104:       resume_text
105:     )
106:     
107:     // Calculate scheduled times for each step
108:     const now = new Date()
109:     sequence.sequences.forEach(step => {
110:       const scheduledTime = new Date(now.getTime() + step.days_after * 24 * 60 * 60 * 1000)
111:       step.scheduled_time = scheduledTime
112:       step.status = 'scheduled'
113:     })
114:     
115:     // Save to database
116:     const savedSequence = await FollowUpSequence.create(sequence)
117:     
118:     console.log('[FOLLOWUP_CREATE] Sequence created:', savedSequence._id)
119:     console.log('[FOLLOWUP_CREATE] Steps:', sequence.sequences.map(s => `Day ${s.days_after}: ${s.tone}`))
120:     
121:     return NextResponse.json({
122:       success: true,
123:       sequence_id: savedSequence._id.toString(),
124:       steps: sequence.sequences.map(s => ({
125:         step_number: s.step_number,
126:         days_after: s.days_after,
127:         scheduled_time: s.scheduled_time,
128:         tone: s.tone
129:       })),
130:       message: `Created 3-step follow-up sequence (Day 3, 7, 14)`
131:     })
132:     
133:   } catch (error) {
134:     console.error('[FOLLOWUP_CREATE] Error:', error)
135:     return NextResponse.json(
136:       {
137:         error: 'Failed to create follow-up sequence',
138:         details: error instanceof Error ? error.message : 'Unknown error'
139:       },
140:       { status: 500 }
141:     )
142:   }
143: }
</file>

<file path="src/app/api/outreach/followup/mark-sent/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { dbService } from '@/lib/database'
 3: import mongoose from 'mongoose'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: export const runtime = 'nodejs'
 7: 
 8: /**
 9:  * POST /api/outreach/followup/mark-sent
10:  * Mark a follow-up step as sent
11:  */
12: export async function POST(request: NextRequest) {
13:   try {
14:     await dbService.connect()
15:     
16:     const body = await request.json()
17:     const { followup_id, message_id, sent_at } = body
18:     
19:     if (!followup_id) {
20:       return NextResponse.json({ error: 'followup_id required' }, { status: 400 })
21:     }
22:     
23:     // Parse followup_id: "sequenceId_stepNumber"
24:     const [sequenceId, stepNumberStr] = followup_id.split('_')
25:     const stepNumber = parseInt(stepNumberStr)
26:     
27:     const FollowUpSequence = mongoose.models.FollowUpSequence
28:     if (!FollowUpSequence) {
29:       return NextResponse.json({ error: 'Model not found' }, { status: 500 })
30:     }
31:     
32:     // Update the specific step in the sequence
33:     const result = await FollowUpSequence.updateOne(
34:       {
35:         _id: sequenceId,
36:         'sequences.step_number': stepNumber
37:       },
38:       {
39:         $set: {
40:           'sequences.$.status': 'sent',
41:           'sequences.$.sent_at': sent_at || new Date(),
42:           'sequences.$.message_id': message_id,
43:           last_updated: new Date()
44:         }
45:       }
46:     )
47:     
48:     if (result.modifiedCount > 0) {
49:       console.log('[FOLLOWUP_MARK_SENT] Updated:', followup_id)
50:       return NextResponse.json({ success: true })
51:     } else {
52:       return NextResponse.json({ error: 'Follow-up not found' }, { status: 404 })
53:     }
54:     
55:   } catch (error) {
56:     console.error('[FOLLOWUP_MARK_SENT] Error:', error)
57:     return NextResponse.json(
58:       { error: 'Failed to mark follow-up as sent' },
59:       { status: 500 }
60:     )
61:   }
62: }
</file>

<file path="src/app/api/outreach/followup/pending/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { dbService } from '@/lib/database'
 3: import mongoose from 'mongoose'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: export const runtime = 'nodejs'
 7: 
 8: /**
 9:  * GET /api/outreach/followup/pending
10:  * Fetch follow-ups that are ready to be sent
11:  * (No auth required - called by cron job)
12:  */
13: export async function GET(request: NextRequest) {
14:   try {
15:     await dbService.connect()
16:     
17:     const FollowUpSequence = mongoose.models.FollowUpSequence
18:     if (!FollowUpSequence) {
19:       return NextResponse.json({ followups: [] })
20:     }
21:     
22:     const now = new Date()
23:     
24:     // Find all active sequences with scheduled steps that are due
25:     const sequences = await FollowUpSequence.find({
26:       status: 'active',
27:       'sequences.status': 'scheduled',
28:       'sequences.scheduled_time': { $lte: now }
29:     }).lean()
30:     
31:     // Extract individual follow-up steps that are ready
32:     const pendingFollowups: any[] = []
33:     
34:     for (const sequence of sequences) {
35:       // Type assertion for mongoose document with _id
36:       const sequenceId = (sequence as any)._id?.toString() || 'unknown'
37:       const sequenceData = sequence as any
38:       
39:       for (const step of sequenceData.sequences || []) {
40:         if (
41:           step.status === 'scheduled' &&
42:           step.scheduled_time &&
43:           new Date(step.scheduled_time) <= now
44:         ) {
45:           pendingFollowups.push({
46:             id: `${sequenceId}_${step.step_number}`,
47:             sequence_id: sequenceId,
48:             step_number: step.step_number,
49:             contact_email: sequenceData.contact_email,
50:             contact_name: sequenceData.contact_name,
51:             subject: step.subject,
52:             body: step.body,
53:             scheduled_time: step.scheduled_time,
54:             tone: step.tone
55:           })
56:         }
57:       }
58:     }
59:     
60:     console.log('[FOLLOWUP_PENDING] Found', pendingFollowups.length, 'pending follow-ups')
61:     
62:     return NextResponse.json({
63:       followups: pendingFollowups,
64:       count: pendingFollowups.length
65:     })
66:     
67:   } catch (error) {
68:     console.error('[FOLLOWUP_PENDING] Error:', error)
69:     return NextResponse.json(
70:       { error: 'Failed to fetch pending follow-ups' },
71:       { status: 500 }
72:     )
73:   }
74: }
</file>

<file path="src/app/api/outreach/log/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import { dbService } from '@/lib/database'
  5: import mongoose from 'mongoose'
  6: 
  7: export const dynamic = 'force-dynamic'
  8: export const runtime = 'nodejs'
  9: 
 10: /**
 11:  * OutreachLog Schema - Tracks all email outreach
 12:  */
 13: const OutreachLogSchema = new mongoose.Schema({
 14:   userId: { type: String, required: true, index: true },
 15:   contact_email: { type: String, required: true },
 16:   contact_name: { type: String, required: true },
 17:   subject: { type: String, required: true },
 18:   body: { type: String },
 19:   sent_at: { type: Date, required: true, index: true },
 20:   message_id: { type: String },
 21:   status: { 
 22:     type: String, 
 23:     enum: ['sent', 'failed', 'scheduled', 'delivered', 'opened', 'clicked'],
 24:     default: 'sent',
 25:     index: true
 26:   },
 27:   job_id: { type: String },
 28:   company_name: { type: String },
 29:   personalization_score: { type: Number },
 30:   variant_id: { type: String }
 31: }, {
 32:   timestamps: true
 33: })
 34: 
 35: // Index for efficient queries
 36: OutreachLogSchema.index({ userId: 1, sent_at: -1 })
 37: OutreachLogSchema.index({ userId: 1, status: 1 })
 38: 
 39: const OutreachLog = mongoose.models.OutreachLog || 
 40:   mongoose.model('OutreachLog', OutreachLogSchema)
 41: 
 42: /**
 43:  * POST /api/outreach/log - Log outreach activity
 44:  */
 45: export async function POST(request: NextRequest) {
 46:   try {
 47:     await dbService.connect()
 48:     
 49:     const session = await getServerSession(authOptions)
 50:     if (!session?.user?.id) {
 51:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 52:     }
 53:     
 54:     const body = await request.json()
 55:     const {
 56:       contact_email,
 57:       contact_name,
 58:       subject,
 59:       body: emailBody,
 60:       sent_at,
 61:       message_id,
 62:       status = 'sent',
 63:       job_id,
 64:       company_name,
 65:       personalization_score,
 66:       variant_id
 67:     } = body
 68:     
 69:     // Validation
 70:     if (!contact_email || !contact_name || !subject) {
 71:       return NextResponse.json(
 72:         { error: 'contact_email, contact_name, and subject are required' },
 73:         { status: 400 }
 74:       )
 75:     }
 76:     
 77:     // Create log entry
 78:     const log = await OutreachLog.create({
 79:       userId: session.user.id,
 80:       contact_email,
 81:       contact_name,
 82:       subject,
 83:       body: emailBody,
 84:       sent_at: sent_at || new Date(),
 85:       message_id,
 86:       status,
 87:       job_id,
 88:       company_name,
 89:       personalization_score,
 90:       variant_id
 91:     })
 92:     
 93:     console.log('[OUTREACH_LOG] Logged outreach:', log._id)
 94:     
 95:     return NextResponse.json({
 96:       success: true,
 97:       log_id: log._id.toString()
 98:     })
 99:     
100:   } catch (error) {
101:     console.error('[OUTREACH_LOG] Error:', error)
102:     return NextResponse.json(
103:       { error: 'Failed to log outreach' },
104:       { status: 500 }
105:     )
106:   }
107: }
108: 
109: /**
110:  * GET /api/outreach/log - Get outreach history
111:  */
112: export async function GET(request: NextRequest) {
113:   try {
114:     await dbService.connect()
115:     
116:     const session = await getServerSession(authOptions)
117:     if (!session?.user?.id) {
118:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
119:     }
120:     
121:     const { searchParams } = new URL(request.url)
122:     const limit = parseInt(searchParams.get('limit') || '50')
123:     const status = searchParams.get('status')
124:     
125:     const query: any = { userId: session.user.id }
126:     if (status) {
127:       query.status = status
128:     }
129:     
130:     const logs = await OutreachLog.find(query)
131:       .sort({ sent_at: -1 })
132:       .limit(Math.min(limit, 100))
133:       .lean()
134:     
135:     // Calculate statistics
136:     const stats = await OutreachLog.aggregate([
137:       { $match: { userId: session.user.id } },
138:       {
139:         $group: {
140:           _id: '$status',
141:           count: { $sum: 1 }
142:         }
143:       }
144:     ])
145:     
146:     return NextResponse.json({
147:       logs,
148:       stats: stats.reduce((acc: any, curr: any) => {
149:         acc[curr._id] = curr.count
150:         return acc
151:       }, {}),
152:       total: logs.length
153:     })
154:     
155:   } catch (error) {
156:     console.error('[OUTREACH_LOG] Get error:', error)
157:     return NextResponse.json(
158:       { error: 'Failed to fetch outreach logs' },
159:       { status: 500 }
160:     )
161:   }
162: }
</file>

<file path="src/app/api/outreach/send/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import { EmailAutomationService } from '@/lib/email-automation'
  5: import { resendProvider } from '@/lib/email-providers/resend-provider'
  6: import { generateSimplePDF, generateCoverLetterPDF } from '@/lib/pdf/unified-pdf-generator'
  7: import { isRateLimited } from '@/lib/rate-limit'
  8: import SentEmail from '@/models/SentEmail'
  9: import connectToDatabase from '@/lib/mongodb'
 10: 
 11: export const dynamic = 'force-dynamic'
 12: export const runtime = 'nodejs'
 13: export const maxDuration = 60
 14: 
 15: /**
 16:  * PHASE 3C: Automated Email Sending API
 17:  * 
 18:  * Sends personalized emails to hiring contacts with attachments
 19:  * Rate limited, authenticated, tracks delivery
 20:  * 
 21:  * Requirements:
 22:  * - RESEND_API_KEY must be set in environment
 23:  * - User must be authenticated
 24:  * - Rate limit: 5 emails per hour per user
 25:  */
 26: export async function POST(request: NextRequest) {
 27:   try {
 28:     const session = await getServerSession(authOptions)
 29:     if (!session?.user?.id) {
 30:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 31:     }
 32:     
 33:     // Rate limiting - stricter for email sending
 34:     if (await isRateLimited(session.user.id, 'outreach-send')) {
 35:       return NextResponse.json(
 36:         { 
 37:           error: 'Rate limit exceeded. Maximum 5 emails per hour.',
 38:           retry_after: '60 minutes'
 39:         },
 40:         { status: 429 }
 41:       )
 42:     }
 43:     
 44:     const body = await request.json()
 45:     const {
 46:       contact,
 47:       email,
 48:       resumeHTML,
 49:       coverLetterHTML,
 50:       send_immediately = true,
 51:       scheduled_time
 52:     } = body
 53:     
 54:     // Validation - email format and domain
 55:     if (!contact?.email) {
 56:       return NextResponse.json(
 57:         { error: 'Contact email is required' },
 58:         { status: 400 }
 59:       )
 60:     }
 61:     
 62:     // Validate email format
 63:     const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
 64:     if (!emailRegex.test(contact.email)) {
 65:       return NextResponse.json(
 66:         { error: 'Invalid email format' },
 67:         { status: 400 }
 68:       )
 69:     }
 70:     
 71:     // Check for disposable/invalid domains
 72:     const invalidDomains = ['test.com', 'example.com', 'localhost', 'mailinator.com']
 73:     const domain = contact.email.split('@')[1]?.toLowerCase()
 74:     if (invalidDomains.includes(domain)) {
 75:       return NextResponse.json(
 76:         { error: 'Invalid email domain' },
 77:         { status: 400 }
 78:       )
 79:     }
 80:     
 81:     if (!email?.subject || !email?.body) {
 82:       return NextResponse.json(
 83:         { error: 'Email subject and body are required' },
 84:         { status: 400 }
 85:       )
 86:     }
 87:     
 88:     console.log('[OUTREACH_SEND] Request from user:', session.user.id)
 89:     console.log('[OUTREACH_SEND] Sending to:', contact.name, contact.email)
 90:     console.log('[OUTREACH_SEND] Has resume:', !!resumeHTML, 'Has cover letter:', !!coverLetterHTML)
 91:     
 92:     // Send immediately or schedule
 93:     if (send_immediately) {
 94:       // Generate PDF attachments if HTML provided
 95:       const attachments: Array<{
 96:         filename: string
 97:         content: string
 98:         contentType: string
 99:       }> = []
100:       
101:       if (resumeHTML) {
102:         try {
103:           const resumePDF = await generateSimplePDF(resumeHTML, 'Resume')
104:           attachments.push({
105:             filename: 'Resume.pdf',
106:             content: resumePDF.toString('base64'),
107:             contentType: 'application/pdf'
108:           })
109:           console.log('[OUTREACH_SEND] Resume PDF generated:', resumePDF.length, 'bytes')
110:         } catch (error) {
111:           console.error('[OUTREACH_SEND] Resume PDF generation failed:', error)
112:           // Don't fail the entire request, just skip the attachment
113:         }
114:       }
115:       
116:       if (coverLetterHTML) {
117:         try {
118:           const coverPDF = await generateCoverLetterPDF(coverLetterHTML, 'modern')
119:           attachments.push({
120:             filename: 'Cover-Letter.pdf',
121:             content: coverPDF.toString('base64'),
122:             contentType: 'application/pdf'
123:           })
124:           console.log('[OUTREACH_SEND] Cover letter PDF generated:', coverPDF.length, 'bytes')
125:         } catch (error) {
126:           console.error('[OUTREACH_SEND] Cover letter PDF generation failed:', error)
127:           // Don't fail the entire request, just skip the attachment
128:         }
129:       }
130:       
131:       // Send email with attachments
132:       // CRITICAL FIX: Always use Resend's default email since user domains aren't verified
133:       // Set user's email as replyTo so responses go to them
134:       const userEmail = session.user.email || undefined
135:       const fromEmail = process.env.EMAIL_FROM || 'onboarding@resend.dev'
136:       
137:       console.log('[OUTREACH_SEND] User email:', userEmail)
138:       console.log('[OUTREACH_SEND] From email:', fromEmail)
139:       console.log('[OUTREACH_SEND] Reply-To:', userEmail)
140:       
141:       const result = await resendProvider.send({
142:         to: contact.email,
143:         from: fromEmail, // Use verified Resend email
144:         replyTo: userEmail, // Replies go to user
145:         subject: email.subject,
146:         body: email.body,
147:         attachments: attachments.length > 0 ? attachments : undefined
148:       })
149:       
150:       if (!result.success) {
151:         // Log failed email to database
152:         try {
153:           await connectToDatabase()
154:           await SentEmail.create({
155:             userId: session.user.id,
156:             contactEmail: contact.email,
157:             contactName: contact.name || 'Unknown',
158:             subject: email.subject,
159:             body: email.body,
160:             attachments: attachments.map(a => ({ filename: a.filename, size: Buffer.from(a.content, 'base64').length })),
161:             status: 'failed',
162:             error: result.error,
163:             metadata: { provider: 'resend' }
164:           })
165:         } catch (dbError) {
166:           console.error('[OUTREACH_SEND] Failed to log error to DB:', dbError)
167:         }
168:         
169:         // Check if it's a configuration error
170:         if (result.error?.includes('API key not configured')) {
171:           return NextResponse.json({
172:             error: 'Email service not configured',
173:             details: 'RESEND_API_KEY environment variable is not set. Please configure email service.',
174:             contact_email: contact.email,
175:             mailto_fallback: `mailto:${contact.email}?subject=${encodeURIComponent(email.subject)}&body=${encodeURIComponent(email.body)}`
176:           }, { status: 503 })
177:         }
178:         
179:         // CRITICAL FIX: Check for domain verification error
180:         if (result.error?.includes('verify a domain') || result.error?.includes('testing emails')) {
181:           console.log('[OUTREACH_SEND] Domain not verified, providing mailto fallback')
182:           return NextResponse.json({
183:             error: 'Email service requires domain verification',
184:             details: result.error,
185:             mailto_fallback: `mailto:${contact.email}?subject=${encodeURIComponent(email.subject)}&body=${encodeURIComponent(email.body)}`,
186:             fallback_instructions: 'Click the mailto link to send via your email client, or verify your domain at resend.com/domains'
187:           }, { status: 503 })
188:         }
189:         
190:         return NextResponse.json({
191:           error: 'Failed to send email',
192:           details: result.error,
193:           mailto_fallback: `mailto:${contact.email}?subject=${encodeURIComponent(email.subject)}&body=${encodeURIComponent(email.body)}`
194:         }, { status: 500 })
195:       }
196:       
197:       // Log successful email to database
198:       try {
199:         await connectToDatabase()
200:         await SentEmail.create({
201:           userId: session.user.id,
202:           contactEmail: contact.email,
203:           contactName: contact.name || 'Unknown',
204:           subject: email.subject,
205:           body: email.body,
206:           attachments: attachments.map(a => ({ filename: a.filename, size: Buffer.from(a.content, 'base64').length })),
207:           status: 'sent',
208:           messageId: result.message_id,
209:           metadata: { provider: 'resend' }
210:         })
211:       } catch (dbError) {
212:         console.error('[OUTREACH_SEND] Failed to log success to DB:', dbError)
213:         // Don't fail the request if DB logging fails
214:       }
215:       
216:       return NextResponse.json({
217:         success: true,
218:         message: 'Email sent successfully',
219:         message_id: result.message_id,
220:         attachments_sent: attachments.length,
221:         contact: {
222:           name: contact.name,
223:           email: contact.email
224:         },
225:         sent_at: new Date().toISOString()
226:       })
227:       
228:     } else {
229:       // Schedule for later
230:       const settings = EmailAutomationService.getDefaultSettings()
231:       const schedule = await EmailAutomationService.scheduleOptimalOutreach(
232:         [contact],
233:         [email],
234:         settings,
235:         session.user.id
236:       )
237:       
238:       return NextResponse.json({
239:         success: true,
240:         message: 'Email scheduled',
241:         scheduled_time: schedule[0]?.scheduled_time,
242:         schedule_id: schedule[0]?.id
243:       })
244:     }
245:     
246:   } catch (error) {
247:     console.error('[OUTREACH_SEND] Error:', error)
248:     return NextResponse.json(
249:       { 
250:         error: 'Internal server error',
251:         details: error instanceof Error ? error.message : 'Unknown error'
252:       },
253:       { status: 500 }
254:     )
255:   }
256: }
257: 
258: /**
259:  * GET /api/outreach/send - Check email service status
260:  */
261: export async function GET(request: NextRequest) {
262:   try {
263:     const session = await getServerSession(authOptions)
264:     if (!session?.user?.id) {
265:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
266:     }
267:     
268:     const { resendProvider } = await import('@/lib/email-providers/resend-provider')
269:     const status = resendProvider.getStatus()
270:     
271:     return NextResponse.json({
272:       configured: status.configured,
273:       provider: status.provider,
274:       from_email: status.fromEmail,
275:       ready: status.configured,
276:       message: status.configured 
277:         ? 'Email service is configured and ready' 
278:         : 'Email service not configured. Add RESEND_API_KEY to environment.'
279:     })
280:     
281:   } catch (error) {
282:     console.error('[OUTREACH_SEND] Status check error:', error)
283:     return NextResponse.json(
284:       { error: 'Failed to check email service status' },
285:       { status: 500 }
286:     )
287:   }
288: }
</file>

<file path="src/app/api/outreach/sequence/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { AIService } from '@/lib/ai-service'
 5: import connectToDatabase from '@/lib/mongodb'
 6: import JobApplication from '@/models/JobApplication'
 7: import { z } from 'zod'
 8: 
 9: export const dynamic = 'force-dynamic'
10: 
11: export async function POST(req: NextRequest) {
12:   try {
13:     const session = await getServerSession(authOptions)
14:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
15:     const body = await req.json()
16:     // Two modes: generate or persist custom cadence
17:     if (body && body.cadence) {
18:       const schema = z.object({
19:         applicationId: z.string().optional(),
20:         cadence: z.array(z.object({
21:           channel: z.enum(['email','linkedin','call']),
22:           offsetDays: z.number().min(0).max(60),
23:           template: z.string().min(20),
24:         })).min(1).max(10),
25:       })
26:       const parsed = schema.safeParse(body)
27:       if (!parsed.success) return NextResponse.json({ error: 'Invalid cadence', details: parsed.error.flatten() }, { status: 400 })
28:       const { applicationId, cadence } = parsed.data as any
29:       // Guardrails
30:       const tooAggressive = cadence.filter((c: any) => c.offsetDays <= 3).length > 2
31:       if (tooAggressive) return NextResponse.json({ error: 'Cadence too aggressive. Space messages further apart.' }, { status: 400 })
32:       const impolite = cadence.some((c: any) => /urgent|demand|must|immediately/i.test(c.template))
33:       if (impolite) return NextResponse.json({ error: 'Templates must remain polite. Remove imperative language.' }, { status: 400 })
34:       await connectToDatabase()
35:       if (applicationId) {
36:         const app = await JobApplication.findOne({ _id: applicationId, userId: (session.user as any).id })
37:         if (app) { app.context = app.context || {}; app.context.outreachCadence = cadence; await app.save() }
38:       }
39:       return NextResponse.json({ success: true, sequence: cadence })
40:     }
41:     // Generate default sequence
42:     const { jobTitle, companyName, daysSinceApplication = 3, talkingPoints = [] } = body
43:     const follow = await AIService.generateFollowUpEmail(jobTitle, companyName, Number(daysSinceApplication), ['Impact bullets','Culture fit'], talkingPoints)
44:     const sequence = [
45:       { day: 0, channel: 'email', subject: follow.subject, body: follow.body },
46:       { day: 3, channel: 'linkedin', body: `Hi ${companyName} team — following up on ${jobTitle}. ${talkingPoints.slice(0,2).join(' • ')}` },
47:       { day: 7, channel: 'email', subject: `Re: ${follow.subject}`, body: `Hi again — I remain excited about ${jobTitle} at ${companyName}. Happy to share specifics on ${talkingPoints.slice(0,2).join(', ')}.` }
48:     ]
49:     return NextResponse.json({ success: true, sequence })
50:   } catch (e) {
51:     return NextResponse.json({ error: 'Failed to generate outreach sequence' }, { status: 500 })
52:   }
53: }
</file>

<file path="src/app/api/privacy/delete/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import User from '@/models/User'
 6: import Profile from '@/models/Profile'
 7: import Resume from '@/models/Resume'
 8: import JobApplication from '@/models/JobApplication'
 9: import CoverLetter from '@/models/CoverLetter'
10: 
11: export const dynamic = 'force-dynamic'
12: 
13: export async function POST(req: NextRequest) {
14:   try {
15:     const session = await getServerSession(authOptions)
16:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
17:     await connectToDatabase()
18:     const { email } = await req.json()
19:     if (!email || email.toLowerCase() !== (session.user.email || '').toLowerCase()) return NextResponse.json({ error: 'Email mismatch' }, { status: 400 })
20:     // Soft delete: anonymize user data, remove artifacts
21:     const user = await User.findOne({ email })
22:     if (!user) return NextResponse.json({ success: true })
23:     const userId = user._id
24:     await Promise.all([
25:       Resume.deleteMany({ userId }),
26:       JobApplication.deleteMany({ userId }),
27:       CoverLetter.deleteMany({ userId }),
28:       Profile.deleteOne({ userId }),
29:     ])
30:     user.name = 'Deleted User'
31:     user.image = undefined
32:     user.location = undefined
33:     user.skills = []
34:     user.experience = ''
35:     await user.save()
36:     return NextResponse.json({ success: true })
37:   } catch (e) {
38:     return NextResponse.json({ error: 'Failed to process deletion' }, { status: 500 })
39:   }
40: }
</file>

<file path="src/app/api/privacy/export/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Resume from '@/models/Resume'
 6: import JobApplication from '@/models/JobApplication'
 7: import CoverLetter from '@/models/CoverLetter'
 8: import Profile from '@/models/Profile'
 9: 
10: export const dynamic = 'force-dynamic'
11: 
12: export async function GET(req: NextRequest) {
13:   try {
14:     const session = await getServerSession(authOptions)
15:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
16:     await connectToDatabase()
17:     const [profile, resumes, apps, letters] = await Promise.all([
18:       Profile.findOne({ userId: (session.user as any).id }).lean(),
19:       Resume.find({ userId: (session.user as any).id }).lean(),
20:       JobApplication.find({ userId: (session.user as any).id }).lean(),
21:       CoverLetter.find({ userId: (session.user as any).id }).lean(),
22:     ])
23:     const pkg = { profile, resumes, applications: apps, coverLetters: letters }
24:     const buf = Buffer.from(JSON.stringify(pkg, null, 2), 'utf8')
25:     const arrayBuffer = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
26:     return new NextResponse(arrayBuffer as ArrayBuffer, { status: 200, headers: { 'Content-Type': 'application/json', 'Content-Disposition': 'attachment; filename="careerlever-export.json"' } })
27:   } catch (e) {
28:     return NextResponse.json({ error: 'Failed to export data' }, { status: 500 })
29:   }
30: }
</file>

<file path="src/app/api/profile/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Profile from '@/models/Profile'
 6: import Counter from '@/models/Counter'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: async function nextUserNo(): Promise<number> {
11:   const ctr = await Counter.findOneAndUpdate(
12:     { key: 'userNo' },
13:     { $inc: { value: 1 } },
14:     { upsert: true, new: true }
15:   )
16:   return ctr.value
17: }
18: 
19: export async function GET(_req: NextRequest) {
20:   try {
21:     const session = await getServerSession(authOptions)
22:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
23:     await connectToDatabase()
24:     let prof: any = await Profile.findOne({ userId: (session.user as any).id })
25:     if (!prof) {
26:       const userNo = await nextUserNo()
27:       prof = await Profile.create({ userId: (session.user as any).id, userNo, plan: 'free' })
28:     }
29:     return NextResponse.json({ success: true, profile: prof })
30:   } catch (e) {
31:     return NextResponse.json({ error: 'Failed to load profile' }, { status: 500 })
32:   }
33: }
34: 
35: export async function PUT(request: NextRequest) {
36:   try {
37:     const session = await getServerSession(authOptions)
38:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
39:     await connectToDatabase()
40:     const body = await request.json()
41:     const update: any = {}
42:     if (typeof body.title === 'string') update.title = body.title
43:     if (typeof body.location === 'string') update.location = body.location
44:     if (body.preferences && typeof body.preferences === 'object') update.preferences = body.preferences
45:     const prof = await Profile.findOneAndUpdate({ userId: (session.user as any).id }, { $set: update }, { new: true })
46:     return NextResponse.json({ success: true, profile: prof })
47:   } catch (e) {
48:     return NextResponse.json({ error: 'Failed to update profile' }, { status: 500 })
49:   }
50: }
</file>

<file path="src/app/api/resume-builder/generate/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import connectToDatabase from '@/lib/mongodb'
  4: import { authOptions } from '@/lib/auth'
  5: import { generateResume } from '@/lib/resume-generator'
  6: import { z } from 'zod'
  7: import { isRateLimited } from '@/lib/rate-limit'
  8: 
  9: export const runtime = 'nodejs'
 10: export const dynamic = 'force-dynamic'
 11: 
 12: export async function POST(request: NextRequest) {
 13:   try {
 14:     const session = await getServerSession(authOptions)
 15:     if (!session?.user?.email) {
 16:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 17:     }
 18: 
 19:     const limiter = await isRateLimited((session.user as Record<string, unknown>).id as string, 'resume-builder:generate')
 20:     if (limiter) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
 21: 
 22:     const schema = z.object({
 23:       resumeData: z.any().optional(),
 24:       resumeText: z.string().max(200000).optional(),
 25:       template: z.string().min(2).max(40).default('modern'),
 26:       targetJob: z.string().max(100).optional(),
 27:       industry: z.string().max(100).optional(),
 28:       experienceLevel: z.enum(['entry','mid','senior']).default('mid'),
 29:       jobDescription: z.string().max(20000).optional(),
 30:       tone: z.enum(['professional','conversational','technical']).optional()
 31:     })
 32:     
 33:     const raw = await request.json()
 34:     const parsed = schema.safeParse(raw)
 35:     
 36:     if (!parsed.success) {
 37:       return NextResponse.json({ 
 38:         error: 'Invalid input', 
 39:         details: parsed.error.flatten() 
 40:       }, { status: 400 })
 41:     }
 42:     
 43:     const {
 44:       resumeData,
 45:       resumeText: resumeTextInput,
 46:       template = 'modern',
 47:       targetJob,
 48:       industry,
 49:       experienceLevel = 'mid',
 50:       jobDescription,
 51:       tone
 52:     } = parsed.data
 53: 
 54:     // Validate input
 55:     if (!resumeData && !resumeTextInput) {
 56:       return NextResponse.json(
 57:         { 
 58:           error: 'Resume data is required',
 59:           details: 'Please provide either resumeData object or resumeText string',
 60:           hint: 'Use the resume upload or builder to create resume data first'
 61:         },
 62:         { status: 400 }
 63:       )
 64:     }
 65: 
 66:     await connectToDatabase()
 67: 
 68:     // Use shared resume generator
 69:     console.log('[RESUME_API] Calling shared resume generator')
 70:     const result = await generateResume({
 71:       resumeData,
 72:       resumeText: resumeTextInput,
 73:       template,
 74:       targetJob,
 75:       companyName: undefined,
 76:       jobDescription,
 77:       industry,
 78:       experienceLevel,
 79:       tone
 80:     })
 81: 
 82:     return NextResponse.json({
 83:       success: true,
 84:       resume: result.resumeData,
 85:       resumeText: result.plainText,
 86:       matchScore: result.matchScore || 0,
 87:       suggestions: result.suggestions,
 88:       output: {
 89:         html: result.html,
 90:         css: '',
 91:         pdfOptions: { format: 'A4' }
 92:       },
 93:       preview: result.preview
 94:     })
 95: 
 96:   } catch (error) {
 97:     console.error('Resume builder error:', error)
 98:     return NextResponse.json(
 99:       { error: 'Failed to generate resume' },
100:       { status: 500 }
101:     )
102:   }
103: }
</file>

<file path="src/app/api/resume/analyze-comprehensive/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import { PerplexityResumeAnalyzer } from '@/lib/perplexity-resume-analyzer'
  5: import { isRateLimited } from '@/lib/rate-limit'
  6: 
  7: // Initialize global cache for comprehensive analysis
  8: if (!global.analysisCache) {
  9:   global.analysisCache = new Map()
 10: }
 11: 
 12: /**
 13:  * COMPETITIVE ADVANTAGE: Comprehensive AI-Powered Resume Analysis
 14:  * 
 15:  * Features that set us apart:
 16:  * - AI/Automation replacement risk assessment
 17:  * - 5-year career outlook projection
 18:  * - Market intelligence with salary trends
 19:  * - Skills gap analysis with learning roadmap
 20:  * - Experience-weighted keyword extraction
 21:  * - Target job recommendations based on career trajectory
 22:  * 
 23:  * This endpoint powers the most advanced resume analysis in the industry.
 24:  */
 25: export async function POST(request: NextRequest) {
 26:   try {
 27:     // Authentication
 28:     const session = await getServerSession(authOptions)
 29:     if (!session?.user?.id) {
 30:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 31:     }
 32: 
 33:     // Rate limiting - more generous for this premium feature
 34:     if (await isRateLimited(session.user.id, 'resume-analysis')) {
 35:       return NextResponse.json(
 36:         { 
 37:           error: 'Analysis limit reached. Please wait before analyzing another resume.',
 38:           hint: 'Comprehensive analysis is rate-limited to ensure quality results.'
 39:         },
 40:         { status: 429 }
 41:       )
 42:     }
 43: 
 44:     const body = await request.json()
 45:     const { resumeText, options = {} } = body
 46: 
 47:     // Validation
 48:     if (!resumeText || typeof resumeText !== 'string' || resumeText.trim().length < 100) {
 49:       return NextResponse.json(
 50:         { 
 51:           error: 'Invalid resume text',
 52:           details: 'Resume text must be at least 100 characters',
 53:           hint: 'Please upload a complete resume with experience, education, and skills sections.'
 54:         },
 55:         { status: 400 }
 56:       )
 57:     }
 58: 
 59:     console.log('[COMPREHENSIVE_ANALYSIS] Starting analysis for user:', session.user.id)
 60:     console.log('[COMPREHENSIVE_ANALYSIS] Resume length:', resumeText.length, 'characters')
 61:     console.log('[COMPREHENSIVE_ANALYSIS] Options:', options)
 62: 
 63:     // PERFORMANCE: Check cache first (24 hour TTL)
 64:     const cacheKey = `comprehensive-analysis:${session.user.id}:${resumeText.substring(0, 100)}`
 65:     const cached = global.analysisCache?.get(cacheKey)
 66:     const cacheAge = cached ? Date.now() - cached.timestamp : Infinity
 67:     const CACHE_TTL = 24 * 60 * 60 * 1000 // 24 hours
 68:     
 69:     if (cached && cacheAge < CACHE_TTL) {
 70:       console.log('[COMPREHENSIVE_ANALYSIS] ✅ Using cached result (age:', Math.floor(cacheAge / 1000), 'seconds)')
 71:       return NextResponse.json({
 72:         success: true,
 73:         ...cached.data,
 74:         metadata: {
 75:           ...cached.data.metadata,
 76:           cached: true,
 77:           cacheAge: Math.floor(cacheAge / 1000)
 78:         }
 79:       })
 80:     }
 81: 
 82:     const startTime = Date.now()
 83: 
 84:     // Execute comprehensive analysis
 85:     const analysis = await PerplexityResumeAnalyzer.analyzeResume(resumeText)
 86: 
 87:     const duration = Date.now() - startTime
 88:     console.log('[COMPREHENSIVE_ANALYSIS] Completed in', duration, 'ms')
 89:     console.log('[COMPREHENSIVE_ANALYSIS] AI Risk:', analysis.futureOutlook.aiReplacementRisk)
 90:     console.log('[COMPREHENSIVE_ANALYSIS] Career Outlook:', analysis.futureOutlook.fiveYearOutlook)
 91:     console.log('[COMPREHENSIVE_ANALYSIS] Top Skills:', analysis.topSkills.slice(0, 3).map(s => s.skill).join(', '))
 92: 
 93:     // Build response data
 94:     const responseData = {
 95:       analysis: {
 96:         // Core extraction data
 97:         keywords: analysis.keywords,
 98:         location: analysis.location,
 99:         experienceLevel: analysis.experienceLevel,
100:         industries: analysis.industries,
101:         certifications: analysis.certifications,
102:         careerSummary: analysis.careerSummary,
103:         
104:         // 🚀 COMPETITIVE ADVANTAGE: AI/Automation Risk Analysis
105:         aiRisk: {
106:           aiReplacementRisk: analysis.futureOutlook.aiReplacementRisk,
107:           automationRisk: analysis.futureOutlook.automationRisk,
108:           fiveYearOutlook: analysis.futureOutlook.fiveYearOutlook,
109:           reasoning: analysis.futureOutlook.reasoning,
110:           recommendations: analysis.futureOutlook.recommendations
111:         },
112:         
113:         // 🎯 COMPETITIVE ADVANTAGE: Career Path Intelligence
114:         careerPath: {
115:           currentLevel: analysis.careerPath.currentLevel,
116:           nextPossibleRoles: analysis.careerPath.nextPossibleRoles,
117:           skillGaps: analysis.careerPath.skillGaps,
118:           recommendedCertifications: analysis.careerPath.recommendedCertifications
119:         },
120:         
121:         // 💰 COMPETITIVE ADVANTAGE: Market-Based Salary Intelligence
122:         salaryIntelligence: {
123:           targetRange: analysis.targetSalaryRange,
124:           marketData: analysis.targetSalaryRange.marketData,
125:           currency: analysis.targetSalaryRange.currency
126:         },
127:         
128:         // 🔥 COMPETITIVE ADVANTAGE: Skills Market Demand Analysis
129:         topSkills: analysis.topSkills.map(skill => ({
130:           skill: skill.skill,
131:           yearsExperience: skill.yearsExperience,
132:           proficiency: skill.proficiency,
133:           marketDemand: skill.marketDemand,
134:           growthTrend: skill.growthTrend
135:         })),
136:         
137:         // 🎓 Job Search Optimization Strategy
138:         searchOptimization: {
139:           bestJobBoards: analysis.searchOptimization.bestJobBoards,
140:           optimalApplicationTime: analysis.searchOptimization.optimalApplicationTime,
141:           competitiveAdvantages: analysis.searchOptimization.competitiveAdvantages,
142:           marketSaturation: analysis.searchOptimization.marketSaturation,
143:           applicationStrategy: analysis.searchOptimization.applicationStrategy
144:         },
145:         
146:         // Target job recommendations
147:         targetJobTitles: analysis.targetJobTitles
148:       },
149:       metadata: {
150:         analyzedAt: new Date().toISOString(),
151:         duration,
152:         userId: session.user.id,
153:         features: [
154:           'ai-risk-analysis',
155:           'career-path-intelligence',
156:           'market-salary-intelligence',
157:           'skills-demand-analysis',
158:           'job-search-optimization'
159:         ]
160:       }
161:     }
162: 
163:     // PERFORMANCE: Store in cache for 24 hours
164:     if (!global.analysisCache) global.analysisCache = new Map()
165:     global.analysisCache.set(cacheKey, {
166:       data: responseData,
167:       timestamp: Date.now()
168:     })
169:     console.log('[COMPREHENSIVE_ANALYSIS] ✅ Cached result for 24 hours')
170: 
171:     // Return comprehensive results with competitive advantage features highlighted
172:     return NextResponse.json({
173:       success: true,
174:       ...responseData
175:     })
176: 
177:   } catch (error) {
178:     console.error('[COMPREHENSIVE_ANALYSIS] Error:', error)
179:     
180:     return NextResponse.json(
181:       { 
182:         error: 'Resume analysis failed',
183:         details: error instanceof Error ? error.message : 'Unknown error occurred',
184:         hint: 'Our AI-powered analysis encountered an issue. Please try again or contact support if the problem persists.'
185:       },
186:       { status: 500 }
187:     )
188:   }
189: }
190: 
191: /**
192:  * GET endpoint for analysis status/info
193:  */
194: export async function GET(request: NextRequest) {
195:   const session = await getServerSession(authOptions)
196:   if (!session?.user?.id) {
197:     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
198:   }
199: 
200:   return NextResponse.json({
201:     endpoint: '/api/resume/analyze-comprehensive',
202:     method: 'POST',
203:     description: 'Comprehensive AI-powered resume analysis with competitive advantage features',
204:     features: {
205:       'AI Risk Analysis': 'Assess AI/automation replacement risk for candidate career path',
206:       'Career Outlook': '5-year career trajectory projection based on market trends',
207:       'Market Intelligence': 'Real-time salary data and demand analysis',
208:       'Skills Gap Analysis': 'Identify missing skills with learning roadmap',
209:       'Job Search Strategy': 'Optimized job board recommendations and application timing'
210:     },
211:     rateLimits: {
212:       perHour: 10,
213:       perDay: 50
214:     },
215:     requiredFields: ['resumeText'],
216:     optionalFields: {
217:       options: {
218:         includeMarketData: 'boolean - Include detailed market intelligence (default: true)',
219:         includeSkillsAnalysis: 'boolean - Include skills demand analysis (default: true)',
220:         includeCareerPath: 'boolean - Include career progression recommendations (default: true)'
221:       }
222:     }
223:   })
224: }
</file>

<file path="src/app/api/resume/customize/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server';
  2: import { getServerSession } from 'next-auth/next';
  3: import connectToDatabase from '@/lib/mongodb';
  4: import Resume from '@/models/Resume';
  5: import JobApplication from '@/models/JobApplication';
  6: import { authOptions } from '@/lib/auth';
  7: import { PerplexityService } from '@/lib/perplexity-service';
  8: import { validateAuthenticityResume, basicFormatResume } from '@/lib/authenticity'
  9: import { isRateLimited } from '@/lib/rate-limit';
 10: import { resumeCustomizeSchema } from '@/lib/validators';
 11: import { getOrCreateRequestId, logRequestStart, logRequestEnd, now, durationMs } from '@/lib/observability'
 12: 
 13: export const runtime = 'nodejs'
 14: export const dynamic = 'force-dynamic'
 15: 
 16: export async function POST(request: NextRequest) {
 17:   try {
 18:     const requestId = getOrCreateRequestId(request.headers as any)
 19:     const startedAt = now()
 20:     const routeKey = 'resume:customize'
 21:     logRequestStart(routeKey, requestId)
 22:     // Check authentication
 23:     const session = await getServerSession(authOptions);
 24:     if (!session?.user?.email) {
 25:       return NextResponse.json(
 26:         { error: 'Unauthorized' },
 27:         { status: 401 }
 28:       );
 29:     }
 30: 
 31:     const body = await request.json();
 32:     const parsed = resumeCustomizeSchema.safeParse(body);
 33:     if (!parsed.success) {
 34:       return NextResponse.json({ error: 'Invalid input', details: parsed.error.issues }, { status: 400 });
 35:     }
 36:     const { resumeId, jobDescription, jobTitle, companyName, tone, overrideResumeText, psychology, companyData, atsTarget, optimizationLevel, industryFocus, experienceLevel, keyMetrics, skillsPriority, antiAIDetection, formatStyle, lengthTarget } = parsed.data as any;
 37: 
 38:     const rl = await isRateLimited((session.user as any).id, 'resume-customize');
 39:     if (rl) {
 40:       return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });
 41:     }
 42: 
 43:     if (!resumeId || !jobDescription || !jobTitle || !companyName) {
 44:       return NextResponse.json(
 45:         { error: 'Missing required fields: resumeId, jobDescription, jobTitle, companyName' },
 46:         { status: 400 }
 47:       );
 48:     }
 49: 
 50:     // Connect to database
 51:     await connectToDatabase();
 52: 
 53:     // Find the resume
 54:     const resume = await Resume.findOne({
 55:       _id: resumeId,
 56:       userId: session.user.id
 57:     });
 58: 
 59:     if (!resume) {
 60:       return NextResponse.json(
 61:         { error: 'Resume not found' },
 62:         { status: 404 }
 63:       );
 64:     }
 65: 
 66:     // Guard: ensure we have sufficient resume text unless override is provided
 67:     const resumeTextForTailoring = (overrideResumeText && overrideResumeText.length > 50 ? overrideResumeText : (resume.extractedText || ''))
 68:     if (!resumeTextForTailoring || resumeTextForTailoring.trim().length < 80) {
 69:       return NextResponse.json({ error: 'Your resume text could not be read. Please paste clean text in the override box and retry.' }, { status: 400 })
 70:     }
 71: 
 72:     // Create job application record
 73:     const jobApplication = new JobApplication({
 74:       userId: session.user.id,
 75:       jobTitle,
 76:       companyName,
 77:       jobDescription,
 78:       applicationStatus: 'saved',
 79:       appliedDate: new Date(),
 80:       followUpDates: [],
 81:       context: {
 82:         psychology: psychology || null,
 83:         companyData: companyData || null,
 84:         hiringContactName: undefined,
 85:       }
 86:     });
 87: 
 88:     await jobApplication.save();
 89: 
 90:     // Load user style profile (if any)
 91:     let styleProfile: any = null
 92:     try {
 93:       const Profile = (await import('@/models/Profile')).default as any
 94:       const prof = await Profile.findOne({ userId: (session.user as any).id }).lean()
 95:       styleProfile = prof?.styleProfile || null
 96:     } catch {}
 97: 
 98:     // Use AI service to customize the resume with graceful fallback
 99:     let customizationResult: { customizedResume: string; matchScore: number; improvements: string[]; suggestions: string[] };
100:     try {
101:       const ppx = new PerplexityService()
102:       const system = `You are an expert ATS-optimized resume writer with current hiring trend awareness.
103: 
104: 🔒 CRITICAL AUTHENTICITY RULES - NO FABRICATION ALLOWED:
105: 1. Use ONLY information present in the original resume
106: 2. DO NOT add job titles, companies, skills, or experiences not in original
107: 3. DO NOT fabricate achievements or metrics
108: 4. DO NOT inflate responsibilities (e.g., "individual contributor" → "team lead")
109: 5. DO NOT add technologies, tools, or skills never used
110: 6. DO NOT add degrees, certifications, or credentials not earned
111: 7. For fresh graduates: Emphasize education, coursework, academic projects, GPA if 3.0+
112: 8. For students: Highlight part-time availability and school projects
113: 9. You may rearrange sections and reword for clarity using original facts
114: 10. You may highlight relevant existing experience but not invent new content
115: 
116: ALLOWED ACTIONS:
117: ✅ Rearrange sections to match job priorities
118: ✅ Highlight relevant existing experience
119: ✅ Emphasize education for entry-level candidates
120: ✅ Use job description keywords that appear in original resume
121: ✅ Reword accomplishments for impact (using original facts)
122: ✅ Adjust formatting for ATS optimization
123: ✅ Quantify existing achievements if context supports it
124: 
125: PROHIBITED ACTIONS:
126: ❌ Adding experience not in original
127: ❌ Adding skills never used
128: ❌ Inflating job titles or responsibilities
129: ❌ Fabricating metrics or achievements
130: ❌ Adding education/certifications not earned
131: 
132: Output the full optimized resume text only (plain text). Be authentic and truthful.`
133:       const context = {
134:         tone: tone || 'professional',
135:         length: lengthTarget || 'same',
136:         atsTarget: atsTarget || 'generic',
137:         optimizationLevel: optimizationLevel || 'moderate',
138:         industryFocus: industryFocus || null,
139:         experienceLevel: experienceLevel || null,
140:         keyMetrics: keyMetrics || null,
141:         skillsPriority: skillsPriority || null,
142:         antiAIDetection: antiAIDetection !== false,
143:         formatStyle: formatStyle || 'traditional',
144:         styleProfile: styleProfile || null,
145:         yearsExperience: typeof (resume as any).yearsExperience === 'number' ? (resume as any).yearsExperience : undefined,
146:         psychology: psychology || null,
147:         companyData: companyData || null,
148:       }
149:       const user = `Rearrange and highlight the following resume for the role ${jobTitle} at ${companyName}.
150: 
151: ⚠️ CRITICAL: Use ONLY facts from the original resume. DO NOT fabricate experience, skills, or achievements.
152: 
153: Job Description:
154: ${jobDescription}
155: 
156: Original Resume (ONLY SOURCE OF TRUTH):
157: ${resumeTextForTailoring}
158: 
159: Optimization Preferences:
160: ${JSON.stringify(context, null, 2)}
161: 
162: Remember: Emphasize relevant sections, rearrange for impact, but never add information not in the original.`
163:       const result = await ppx.chat(`${system}\n\n${user}`, { model: 'sonar-pro', maxTokens: 2500, temperature: 0.3 })
164:       let optimized = (result.content || '').trim()
165:       // Authenticity validation gate
166:       const report = validateAuthenticityResume(resumeTextForTailoring, optimized)
167:       if (!report.isValid || report.authenticityScore < 70) {
168:         optimized = basicFormatResume(resumeTextForTailoring)
169:       }
170:       // Simple match score heuristic: keyword overlap
171:       const jdTokens = (jobDescription || '').toLowerCase().match(/[a-z0-9+.#-]{3,}/g) || []
172:       const optTokens = optimized.toLowerCase().match(/[a-z0-9+.#-]{3,}/g) || []
173:       const setJD = new Set(jdTokens)
174:       let hits = 0
175:       for (const t of optTokens) { if (setJD.has(t)) hits++ }
176:       const matchScore = Math.min(100, Math.round((hits / Math.max(100, jdTokens.length)) * 100))
177:       customizationResult = {
178:         customizedResume: optimized,
179:         matchScore: isFinite(matchScore) ? matchScore : 60,
180:         improvements: ['Ensure quantified achievements in each role', 'Align summary to target role and company values'],
181:         suggestions: ['Weave in top keywords naturally', 'Keep formatting ATS-friendly']
182:       }
183:     } catch (e) {
184:       const fallbackText = `Professional Summary\n\nTarget Role: ${jobTitle} at ${companyName}\n\nHighlights:\n- Relevant experience aligned to the job description\n- Skills matched to key requirements\n- Results-focused achievements\n\nResume\n\n${(resume.extractedText || '').slice(0, 8000)}`
185:       customizationResult = {
186:         customizedResume: fallbackText,
187:         matchScore: 50,
188:         improvements: ['Add quantified achievements', 'Strengthen keywords from job description'],
189:         suggestions: ['Tailor summary to company values', 'Emphasize most relevant projects first']
190:       }
191:     }
192: 
193:     const { customizedResume: customizedText, matchScore, improvements, suggestions } = customizationResult;
194: 
195:     // Create customized version
196:     const displayName = `${(session.user.name || 'User').replace(/\s+/g,'_')}_Resume_${companyName.replace(/\s+/g,'_')}`
197:     const customizedVersion = {
198:       jobApplicationId: jobApplication._id,
199:       customizedText,
200:       jobTitle,
201:       companyName,
202:       matchScore,
203:       createdAt: new Date(),
204:       fileName: `${displayName}.txt`,
205:     };
206: 
207:     // Add to resume
208:     resume.customizedVersions.push(customizedVersion);
209:     const savedResume = await resume.save();
210: 
211:     // Find the newly added version
212:     const newVersion = savedResume.customizedVersions[savedResume.customizedVersions.length - 1];
213: 
214:     const resp = NextResponse.json({
215:       success: true,
216:       customizedResume: {
217:         _id: newVersion._id,
218:         jobApplicationId: customizedVersion.jobApplicationId,
219:         customizedText,
220:         jobTitle,
221:         companyName,
222:         matchScore,
223:         createdAt: customizedVersion.createdAt,
224:         fileName: customizedVersion.fileName,
225:       },
226:       jobApplication: {
227:         _id: jobApplication._id,
228:         jobTitle: jobApplication.jobTitle,
229:         companyName: jobApplication.companyName,
230:         applicationStatus: jobApplication.applicationStatus,
231:         appliedDate: jobApplication.appliedDate,
232:       },
233:       matchScore,
234:       improvements,
235:       suggestions,
236:       originalResumeText: resume.extractedText,
237:     });
238:     resp.headers.set('x-request-id', requestId)
239:     logRequestEnd(routeKey, requestId, 200, durationMs(startedAt))
240:     return resp
241: 
242:   } catch (error) {
243:     console.error('Resume customization error:', error);
244:     return NextResponse.json(
245:       { error: 'Failed to customize resume' },
246:       { status: 500 }
247:     );
248:   }
249: }
</file>

<file path="src/app/api/resume/export-docx/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } from 'docx'
  5: 
  6: export async function POST(req: NextRequest) {
  7:   try {
  8:     const session = await getServerSession(authOptions)
  9:     if (!session?.user?.id) {
 10:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 11:     }
 12: 
 13:     const { resume, filename = 'resume.docx' } = await req.json()
 14: 
 15:     if (!resume) {
 16:       return NextResponse.json({ error: 'Resume data required' }, { status: 400 })
 17:     }
 18: 
 19:     console.log('[DOCX_EXPORT] Generating DOCX for user:', session.user.id)
 20: 
 21:     // Build DOCX document
 22:     const doc = new Document({
 23:       sections: [{
 24:         properties: {},
 25:         children: [
 26:           // Header with name
 27:           new Paragraph({
 28:             text: resume.personalInfo?.name || 'Your Name',
 29:             heading: HeadingLevel.HEADING_1,
 30:             alignment: AlignmentType.CENTER,
 31:             spacing: { after: 200 }
 32:           }),
 33: 
 34:           // Contact info
 35:           new Paragraph({
 36:             alignment: AlignmentType.CENTER,
 37:             spacing: { after: 400 },
 38:             children: [
 39:               new TextRun({
 40:                 text: [
 41:                   resume.personalInfo?.email,
 42:                   resume.personalInfo?.phone,
 43:                   resume.personalInfo?.location
 44:                 ].filter(Boolean).join(' | ')
 45:               })
 46:             ]
 47:           }),
 48: 
 49:           // Professional Summary
 50:           ...(resume.personalInfo?.summary ? [
 51:             new Paragraph({
 52:               text: 'PROFESSIONAL SUMMARY',
 53:               heading: HeadingLevel.HEADING_2,
 54:               spacing: { before: 400, after: 200 }
 55:             }),
 56:             new Paragraph({
 57:               text: resume.personalInfo.summary,
 58:               spacing: { after: 400 }
 59:             })
 60:           ] : []),
 61: 
 62:           // Experience
 63:           ...(resume.experience?.length ? [
 64:             new Paragraph({
 65:               text: 'EXPERIENCE',
 66:               heading: HeadingLevel.HEADING_2,
 67:               spacing: { before: 400, after: 200 }
 68:             }),
 69:             ...resume.experience.flatMap((exp: any) => [
 70:               new Paragraph({
 71:                 children: [
 72:                   new TextRun({
 73:                     text: exp.position || 'Position',
 74:                     bold: true
 75:                   })
 76:                 ],
 77:                 spacing: { before: 200 }
 78:               }),
 79:               new Paragraph({
 80:                 children: [
 81:                   new TextRun({
 82:                     text: `${exp.company || 'Company'} | ${exp.location || ''} | ${exp.startDate || ''} - ${exp.current ? 'Present' : exp.endDate || ''}`,
 83:                     italics: true
 84:                   })
 85:                 ],
 86:                 spacing: { after: 100 }
 87:               }),
 88:               ...(exp.achievements || []).map((achievement: string) => 
 89:                 new Paragraph({
 90:                   text: `• ${achievement}`,
 91:                   spacing: { after: 50 }
 92:                 })
 93:               )
 94:             ])
 95:           ] : []),
 96: 
 97:           // Education
 98:           ...(resume.education?.length ? [
 99:             new Paragraph({
100:               text: 'EDUCATION',
101:               heading: HeadingLevel.HEADING_2,
102:               spacing: { before: 400, after: 200 }
103:             }),
104:             ...resume.education.flatMap((edu: any) => [
105:               new Paragraph({
106:                 children: [
107:                   new TextRun({
108:                     text: `${edu.degree || 'Degree'} in ${edu.field || 'Field'}`,
109:                     bold: true
110:                   })
111:                 ],
112:                 spacing: { before: 200 }
113:               }),
114:               new Paragraph({
115:                 children: [
116:                   new TextRun({
117:                     text: `${edu.institution || 'Institution'} | ${edu.graduationDate || ''}`,
118:                     italics: true
119:                   })
120:                 ],
121:                 spacing: { after: 200 }
122:               })
123:             ])
124:           ] : []),
125: 
126:           // Skills
127:           ...(resume.skills?.length ? [
128:             new Paragraph({
129:               text: 'SKILLS',
130:               heading: HeadingLevel.HEADING_2,
131:               spacing: { before: 400, after: 200 }
132:             }),
133:             new Paragraph({
134:               text: resume.skills.join(' • '),
135:               spacing: { after: 200 }
136:             })
137:           ] : [])
138:         ]
139:       }]
140:     })
141: 
142:     // Generate DOCX buffer
143:     const buffer = await Packer.toBuffer(doc)
144: 
145:     console.log('[DOCX_EXPORT] ✅ DOCX generated successfully')
146: 
147:     // Return DOCX as downloadable file
148:     return new NextResponse(buffer, {
149:       headers: {
150:         'Content-Type': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
151:         'Content-Disposition': `attachment; filename="${filename}"`,
152:         'Content-Length': buffer.length.toString()
153:       }
154:     })
155:   } catch (error) {
156:     console.error('[DOCX_EXPORT] Error:', error)
157:     return NextResponse.json({ 
158:       error: 'Failed to generate DOCX',
159:       details: error instanceof Error ? error.message : 'Unknown error'
160:     }, { status: 500 })
161:   }
162: }
</file>

<file path="src/app/api/resume/export-pdf/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import puppeteer from 'puppeteer'
 5: 
 6: export async function POST(req: NextRequest) {
 7:   try {
 8:     const session = await getServerSession(authOptions)
 9:     if (!session?.user?.id) {
10:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
11:     }
12: 
13:     const { resumeHtml, filename = 'resume.pdf' } = await req.json()
14: 
15:     if (!resumeHtml) {
16:       return NextResponse.json({ error: 'Resume HTML required' }, { status: 400 })
17:     }
18: 
19:     console.log('[PDF_EXPORT] Generating PDF for user:', session.user.id)
20: 
21:     // Launch headless browser
22:     const browser = await puppeteer.launch({
23:       headless: true,
24:       args: ['--no-sandbox', '--disable-setuid-sandbox']
25:     })
26: 
27:     const page = await browser.newPage()
28: 
29:     // Set resume HTML
30:     await page.setContent(resumeHtml, {
31:       waitUntil: 'networkidle0'
32:     })
33: 
34:     // Generate PDF
35:     const pdfBuffer = await page.pdf({
36:       format: 'A4',
37:       printBackground: true,
38:       margin: {
39:         top: '0.5in',
40:         right: '0.5in',
41:         bottom: '0.5in',
42:         left: '0.5in'
43:       }
44:     })
45: 
46:     await browser.close()
47: 
48:     console.log('[PDF_EXPORT] ✅ PDF generated successfully')
49: 
50:     // Return PDF as downloadable file
51:     return new NextResponse(pdfBuffer, {
52:       headers: {
53:         'Content-Type': 'application/pdf',
54:         'Content-Disposition': `attachment; filename="${filename}"`,
55:         'Content-Length': pdfBuffer.length.toString()
56:       }
57:     })
58:   } catch (error) {
59:     console.error('[PDF_EXPORT] Error:', error)
60:     return NextResponse.json({ 
61:       error: 'Failed to generate PDF',
62:       details: error instanceof Error ? error.message : 'Unknown error'
63:     }, { status: 500 })
64:   }
65: }
</file>

<file path="src/app/api/resume/export/docx/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { z } from 'zod'
 5: 
 6: export async function POST(request: NextRequest) {
 7:   try {
 8:     const session = await getServerSession(authOptions)
 9:     if (!session?.user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
10: 
11:     const schema = z.object({
12:       content: z.string().min(50),
13:       filename: z.string().optional(),
14:     })
15:     const parsed = schema.safeParse(await request.json())
16:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
17:     const { content, filename } = parsed.data
18: 
19:     // ATS-friendly: return as .doc for ATS that prefer legacy Word, or .docx if requested
20:     const name = (filename || 'resume') + ((filename && /\.docx$/i.test(filename)) ? '' : '.doc')
21:     const blob = Buffer.from(content, 'utf8')
22:     const arrayBuffer = blob.buffer.slice(blob.byteOffset, blob.byteOffset + blob.byteLength)
23:     return new NextResponse(arrayBuffer as ArrayBuffer, {
24:       status: 200,
25:       headers: {
26:         'Content-Type': 'application/msword',
27:         'Content-Disposition': `attachment; filename="${name}"`,
28:       },
29:     })
30:   } catch (e) {
31:     return NextResponse.json({ error: 'Failed to export DOCX' }, { status: 500 })
32:   }
33: }
</file>

<file path="src/app/api/resume/export/pdf/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { z } from 'zod'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: import puppeteer from 'puppeteer-core'
 7: import chromium from '@sparticuz/chromium'
 8: 
 9: export const dynamic = 'force-dynamic'
10: 
11: export async function POST(request: NextRequest) {
12: 	try {
13: 		const session = await getServerSession(authOptions)
14: 		if (!session?.user) {
15: 			return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
16: 		}
17: 
18: 		const limiter = await isRateLimited((session.user as any).id, 'resume:export:pdf')
19: 		if (limiter) {
20: 			return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
21: 		}
22: 
23: 		const schema = z.object({
24: 			html: z.string().min(30).max(200000),
25: 			filename: z.string().max(100).optional(),
26: 		})
27: 		const raw = await request.json()
28: 		const parsed = schema.safeParse(raw)
29: 		if (!parsed.success) {
30: 			return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
31: 		}
32: 		const { html, filename } = parsed.data
33: 
34: 		const sanitizeFilename = (name: string) => {
35: 			const base = name.replace(/[^a-zA-Z0-9._-]/g, '_').slice(0, 100)
36: 			return base.endsWith('.pdf') ? base : `${base || 'resume'}.pdf`
37: 		}
38: 
39:     // Ensure proxy is disabled for PDF generation to avoid ERR_NO_SUPPORTED_PROXIES
40:     const args = [...chromium.args, '--no-proxy-server', '--proxy-bypass-list=*', '--proxy-server="direct://"']
41:     process.env.HTTP_PROXY = ''
42:     process.env.http_proxy = ''
43:     process.env.HTTPS_PROXY = ''
44:     process.env.https_proxy = ''
45:     process.env.ALL_PROXY = ''
46:     process.env.all_proxy = ''
47:     process.env.NO_PROXY = '*'
48:     process.env.no_proxy = '*'
49:     // Prefer system chromium path in Railway if available, fallback to @sparticuz/chromium
50:     const execPath = process.env.CHROMIUM_PATH || await chromium.executablePath()
51:     const browser = await puppeteer.launch({
52:       args,
53:       executablePath: execPath,
54:       headless: true,
55:     })
56: 
57: 		const page = await browser.newPage()
58:     // Ensure minimal HTML skeleton if the client passed text only
59:     const safeHtml = /<html|<body|<div|<section/i.test(html) ? html : `<!DOCTYPE html><html><head><meta charset="utf-8"></head><body><pre style="white-space:pre-wrap;font-family:Arial,sans-serif;font-size:11pt;line-height:1.5;color:#111">${html.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</pre></body></html>`
60:     await page.setContent(safeHtml, { waitUntil: 'networkidle0' })
61: 		const pdfBuffer = await page.pdf({
62: 			format: 'A4',
63: 			printBackground: true,
64: 			margin: { top: '0.5in', right: '0.5in', bottom: '0.5in', left: '0.5in' },
65: 		})
66: 		await browser.close()
67: 
68: 		// Convert Node.js Buffer to ArrayBuffer slice accepted by Web Response API
69: 		const arrayBuffer = pdfBuffer.buffer.slice(pdfBuffer.byteOffset, pdfBuffer.byteOffset + pdfBuffer.byteLength)
70: 		return new NextResponse(arrayBuffer as ArrayBuffer, {
71: 			status: 200,
72: 			headers: {
73: 				'Content-Type': 'application/pdf',
74: 				'Content-Disposition': `attachment; filename="${sanitizeFilename(filename || 'resume.pdf')}"`,
75: 			},
76: 		})
77: 	} catch (error) {
78: 		console.error('PDF export error:', error)
79: 		return NextResponse.json({ error: 'Failed to export PDF' }, { status: 500 })
80: 	}
81: }
</file>

<file path="src/app/api/resume/extract-profile/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import { ProfileExtractionService } from '@/lib/profile-extraction'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: import Resume from '@/models/Resume'
 7: import { dbService } from '@/lib/database'
 8: 
 9: export const dynamic = 'force-dynamic'
10: export const runtime = 'nodejs'
11: export const maxDuration = 60
12: 
13: /**
14:  * PHASE 1B: Smart Profile Extraction API
15:  * Extracts salary expectations, work type, commute radius, and preferences from resume
16:  */
17: export async function POST(request: NextRequest) {
18:   try {
19:     await dbService.connect()
20:     
21:     const session = await getServerSession(authOptions)
22:     if (!session?.user?.id) {
23:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
24:     }
25:     
26:     // Rate limiting
27:     if (await isRateLimited(session.user.id, 'extract-profile')) {
28:       return NextResponse.json(
29:         { error: 'Rate limit exceeded. Please try again later.' },
30:         { status: 429 }
31:       )
32:     }
33:     
34:     const body = await request.json()
35:     const { resumeText: inputResumeText, resumeId } = body
36:     
37:     let resumeText = inputResumeText
38:     
39:     // If resumeText not provided, try to load from DB
40:     if (!resumeText || resumeText.length < 100) {
41:       if (resumeId) {
42:         const resumeDoc = await Resume.findOne({ _id: resumeId, userId: session.user.id }).lean()
43:         resumeText = (resumeDoc as any)?.extractedText
44:       } else {
45:         // Load most recent resume
46:         const resumeDoc = await Resume.findOne({ userId: session.user.id })
47:           .sort({ createdAt: -1 })
48:           .lean()
49:         resumeText = (resumeDoc as any)?.extractedText
50:       }
51:     }
52:     
53:     if (!resumeText || resumeText.length < 100) {
54:       return NextResponse.json(
55:         { error: 'Resume text is required and must be at least 100 characters.' },
56:         { status: 400 }
57:       )
58:     }
59:     
60:     console.log('[EXTRACT_PROFILE] Starting extraction for user:', session.user.id)
61:     
62:     // Extract complete profile using Perplexity
63:     const profile = await ProfileExtractionService.extractCompleteProfile(resumeText)
64:     
65:     console.log('[EXTRACT_PROFILE] Extraction complete:', {
66:       location: profile.location,
67:       experience: profile.experience_years,
68:       salary: `${profile.salary_currency} ${profile.salary_min}-${profile.salary_max}`,
69:       work_type: profile.work_type,
70:       seniority: profile.seniority_level,
71:       confidence: profile.skill_confidence
72:     })
73:     
74:     return NextResponse.json({
75:       success: true,
76:       profile,
77:       message: `Profile extracted: ${profile.seniority_level} level, ${profile.experience_years} years experience`
78:     })
79:     
80:   } catch (error) {
81:     console.error('[EXTRACT_PROFILE] Error:', error)
82:     return NextResponse.json(
83:       { 
84:         error: 'Failed to extract profile.',
85:         details: error instanceof Error ? error.message : 'Unknown error'
86:       },
87:       { status: 500 }
88:     )
89:   }
90: }
</file>

<file path="src/app/api/resume/extract-signals/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 5: import { LocalResumeParser } from '@/lib/local-resume-parser'
 6: 
 7: /**
 8:  * ENTERPRISE API: Extract Resume Signals
 9:  * 
10:  * Extracts keywords, location, and other signals from resume text
11:  * Used by autopilot job search flow
12:  * 
13:  * STRATEGY:
14:  * 1. Try Perplexity AI first (best quality)
15:  * 2. If Perplexity fails (out of credits, timeout, etc.), use local parser
16:  * 3. Local parser handles industry weighting, education weighting, and skill ranking
17:  */
18: export async function POST(request: NextRequest) {
19:   try {
20:     // Authentication
21:     const session = await getServerSession(authOptions)
22:     if (!session?.user?.email) {
23:       return NextResponse.json(
24:         { error: 'Authentication required' },
25:         { status: 401 }
26:       )
27:     }
28: 
29:     const body = await request.json()
30:     const { resume } = body
31: 
32:     if (!resume || typeof resume !== 'string' || resume.length < 50) {
33:       return NextResponse.json(
34:         { error: 'Invalid resume text provided' },
35:         { status: 400 }
36:       )
37:     }
38: 
39:     console.log('[EXTRACT_SIGNALS] Processing resume, length:', resume.length)
40: 
41:     // Try Perplexity AI first
42:     let signals
43:     let usedFallback = false
44:     
45:     try {
46:       console.log('[EXTRACT_SIGNALS] Attempting Perplexity extraction...')
47:       signals = await PerplexityIntelligenceService.extractResumeSignals(resume)
48:       console.log('[EXTRACT_SIGNALS] ✅ Perplexity success')
49:     } catch (perplexityError) {
50:       console.warn('[EXTRACT_SIGNALS] Perplexity failed, using local parser fallback:', (perplexityError as Error).message)
51:       
52:       // FALLBACK: Use local parser
53:       const parsed = LocalResumeParser.parse(resume, 50)
54:       signals = {
55:         keywords: parsed.keywords,
56:         location: parsed.location || undefined,
57:         locations: parsed.locations
58:       }
59:       usedFallback = true
60:       console.log('[EXTRACT_SIGNALS] ✅ Local parser success:', {
61:         keywords: signals.keywords.length,
62:         location: signals.location,
63:         industries: parsed.industries,
64:         experienceYears: parsed.experienceYears
65:       })
66:     }
67: 
68:     if (!signals || !signals.keywords || signals.keywords.length === 0) {
69:       console.error('[EXTRACT_SIGNALS] No keywords extracted from resume')
70:       return NextResponse.json(
71:         { error: 'Failed to extract resume signals', details: 'No keywords found in resume text' },
72:         { status: 500 }
73:       )
74:     }
75: 
76:     console.log('[EXTRACT_SIGNALS] Success:', {
77:       keywords: signals.keywords.length,
78:       location: signals.location,
79:       locations: signals.locations?.length || 0,
80:       method: usedFallback ? 'local-parser' : 'perplexity'
81:     })
82: 
83:     return NextResponse.json({
84:       success: true,
85:       keywords: signals.keywords,
86:       location: signals.location || null, // CRITICAL: Never default - let frontend handle missing location
87:       locations: signals.locations || [],
88:       method: usedFallback ? 'local-parser' : 'perplexity' // Let frontend know which method was used
89:     })
90: 
91:   } catch (error) {
92:     console.error('[EXTRACT_SIGNALS] Error:', error)
93:     return NextResponse.json(
94:       { error: 'Internal server error', details: (error as Error).message },
95:       { status: 500 }
96:     )
97:   }
98: }
</file>

<file path="src/app/api/resume/list/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import connectToDatabase from '@/lib/mongodb'
 4: import Resume from '@/models/Resume'
 5: import { authOptions } from '@/lib/auth'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function GET(request: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) {
13:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
14:     }
15: 
16:     await connectToDatabase()
17: 
18:     const resumes = await Resume.find({ userId: session.user.id })
19:       .sort({ createdAt: -1 })
20:       .lean()
21: 
22:     return NextResponse.json({
23:       success: true,
24:       resumes: resumes.map(r => ({
25:         _id: r._id,
26:         originalFileName: r.originalFileName,
27:         fileUrl: r.fileUrl,
28:         extractedText: r.extractedText,
29:         customizedVersions: r.customizedVersions,
30:         createdAt: r.createdAt,
31:         updatedAt: r.updatedAt,
32:       }))
33:     })
34:   } catch (error) {
35:     console.error('List resumes error:', error)
36:     return NextResponse.json({ error: 'Failed to list resumes' }, { status: 500 })
37:   }
38: }
</file>

<file path="src/app/api/resume/optimize/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 5: 
 6: export async function POST(request: NextRequest) {
 7:   try {
 8:     const session = await getServerSession(authOptions)
 9:     if (!session?.user?.id) {
10:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
11:     }
12:     
13:     const { resumeText, jobTitle, jobRequirements, companyInsights, template } = await request.json()
14:     
15:     if (!resumeText || !jobTitle) {
16:       return NextResponse.json(
17:         { error: 'Missing required fields: resumeText, jobTitle' },
18:         { status: 400 }
19:       )
20:     }
21:     
22:     const result = await PerplexityIntelligenceService.generateResumeVariants({
23:       resumeText,
24:       jobTitle,
25:       jobRequirements: jobRequirements || [],
26:       companyInsights: companyInsights || { culture: '', values: [], industry: '' },
27:       template: template || 'modern'
28:     })
29:     
30:     return NextResponse.json(result)
31:   } catch (error) {
32:     console.error('[API] Resume optimize error:', error)
33:     return NextResponse.json(
34:       { error: 'Failed to generate resume variants' },
35:       { status: 500 }
36:     )
37:   }
38: }
</file>

<file path="src/app/api/resume/parse/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 5: 
 6: export async function POST(request: NextRequest) {
 7:   try {
 8:     const session = await getServerSession(authOptions)
 9:     if (!session?.user?.id) {
10:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
11:     }
12:     
13:     const { prompt, text } = await request.json()
14:     
15:     if (!prompt || !text) {
16:       return NextResponse.json(
17:         { error: 'Missing required fields: prompt, text' },
18:         { status: 400 }
19:       )
20:     }
21:     
22:     // Use Perplexity to parse the resume
23:     const client = PerplexityIntelligenceService as any
24:     const response = await client.createClient().makeRequest(
25:       'You are a resume parser. Return only valid JSON.',
26:       prompt,
27:       { temperature: 0.2, maxTokens: 4000, model: 'sonar-pro' }
28:     )
29:     
30:     return NextResponse.json({ content: response.content })
31:   } catch (error) {
32:     console.error('[API] Resume parse error:', error)
33:     return NextResponse.json(
34:       { error: 'Failed to parse resume' },
35:       { status: 500 }
36:     )
37:   }
38: }
</file>

<file path="src/app/api/resume/signals/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import { authOptions } from '@/lib/auth'
  4: import { dbService } from '@/lib/database'
  5: import Resume from '@/models/Resume'
  6: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
  7: import { LocalResumeParser } from '@/lib/local-resume-parser'
  8: 
  9: export const runtime = 'nodejs'
 10: export const dynamic = 'force-dynamic'
 11: 
 12: export async function GET(req: NextRequest) {
 13:   try {
 14:     const session = await getServerSession(authOptions)
 15:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 16:     await dbService.connect()
 17:     const resumeDoc = await Resume.findOne({ userId: (session.user as any).id }).sort({ createdAt: -1 }).lean<import('@/models/Resume').IResume>().exec()
 18:     const txt = (resumeDoc && typeof (resumeDoc as any).extractedText === 'string') ? (resumeDoc as any).extractedText : ''
 19:     if (!txt || txt.length < 30) {
 20:       return NextResponse.json({ success: true, keywords: [], location: null, locations: [] })
 21:     }
 22:     // Debug: log resume snippet being sent
 23:     try {
 24:       console.log('[signals:input]', { len: txt.length, preview: txt.slice(0, 500) })
 25:     } catch {}
 26:     
 27:     const started = Date.now()
 28:     let signals
 29:     let method = 'perplexity'
 30:     
 31:     // Try Perplexity first, fallback to local parser
 32:     try {
 33:       signals = await PerplexityIntelligenceService.extractResumeSignals(txt, 50)
 34:     } catch (perplexityError) {
 35:       console.warn('[signals] Perplexity failed, using local parser:', (perplexityError as Error).message)
 36:       const parsed = LocalResumeParser.parse(txt, 50)
 37:       signals = {
 38:         keywords: parsed.keywords,
 39:         location: parsed.location || undefined,
 40:         locations: parsed.locations
 41:       }
 42:       method = 'local-parser'
 43:     }
 44:     
 45:     const durationMs = Date.now() - started
 46:     // Basic verification logging (best-effort, do not block)
 47:     try {
 48:       console.log('[signals]', {
 49:         userId: (session.user as any).id,
 50:         durationMs,
 51:         method,
 52:         keywordCount: (signals.keywords || []).length,
 53:         primaryLocation: signals.location || null,
 54:         hasLocationsList: Array.isArray(signals.locations),
 55:       })
 56:     } catch {}
 57:     return NextResponse.json({ success: true, keywords: signals.keywords || [], location: signals.location || null, locations: signals.locations || [], method })
 58:   } catch (e) {
 59:     return NextResponse.json({ success: true, keywords: [], location: null, locations: [] })
 60:   }
 61: }
 62: 
 63: export async function POST(request: NextRequest) {
 64:   try {
 65:     const body = await request.json()
 66: 
 67:     // Validate input
 68:     if (!body.resumeText || typeof body.resumeText !== 'string') {
 69:       return NextResponse.json(
 70:         { error: 'Missing or invalid resumeText field' },
 71:         { status: 400 }
 72:       )
 73:     }
 74: 
 75:     if (body.resumeText.length < 50) {
 76:       return NextResponse.json(
 77:         { error: 'Resume text too short (minimum 50 characters)' },
 78:         { status: 400 }
 79:       )
 80:     }
 81: 
 82:     console.log('[API] Processing resume signals request')
 83:     console.log('[API] Resume length:', body.resumeText.length)
 84: 
 85:     let signals
 86:     let method = 'perplexity'
 87:     
 88:     // Try Perplexity first, fallback to local parser
 89:     try {
 90:       signals = await PerplexityIntelligenceService.extractResumeSignals(
 91:         body.resumeText,
 92:         body.maxKeywords || 50
 93:       )
 94:     } catch (perplexityError) {
 95:       console.warn('[API] Perplexity failed, using local parser:', (perplexityError as Error).message)
 96:       const parsed = LocalResumeParser.parse(body.resumeText, body.maxKeywords || 50)
 97:       signals = {
 98:         keywords: parsed.keywords,
 99:         location: parsed.location || undefined,
100:         locations: parsed.locations
101:       }
102:       method = 'local-parser'
103:     }
104: 
105:     console.log('[API] Extraction successful:', { method, keywordCount: signals.keywords.length })
106: 
107:     return NextResponse.json({
108:       success: true,
109:       keywords: signals.keywords,
110:       location: signals.location,
111:       method,
112:       metadata: {
113:         keywordCount: signals.keywords.length,
114:         primaryLocation: signals.location,
115:         extractedAt: new Date().toISOString(),
116:         method
117:       }
118:     })
119: 
120:   } catch (error) {
121:     console.error('[API] Signals extraction error:', error)
122:     return NextResponse.json(
123:       { error: 'Signal extraction failed', details: (error as Error).message },
124:       { status: 500 }
125:     )
126:   }
127: }
</file>

<file path="src/app/api/resume/templates/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: 
 3: export const dynamic = 'force-dynamic'
 4: 
 5: const templates = [
 6:   { id: 'classic', name: 'Classic (ATS Safe)', formats: ['doc','pdf'], description: 'Single-column, bullets, no tables' },
 7:   { id: 'modern', name: 'Modern (ATS Safe)', formats: ['docx','pdf'], description: 'Single-column with section dividers' },
 8:   { id: 'compact', name: 'Compact (ATS Safe)', formats: ['doc','pdf'], description: 'Dense layout for 1 page' },
 9: ]
10: 
11: export async function GET() {
12:   return NextResponse.json({ success: true, templates })
13: }
</file>

<file path="src/app/api/resume/variants/analytics/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export async function GET(request: NextRequest) {
 6:   try {
 7:     const session = await getServerSession(authOptions)
 8:     if (!session?.user?.id) {
 9:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
10:     }
11: 
12:     const { searchParams } = new URL(request.url)
13:     const resumeId = searchParams.get('resumeId')
14: 
15:     if (!resumeId) {
16:       return NextResponse.json(
17:         { error: 'Missing resumeId' },
18:         { status: 400 }
19:       )
20:     }
21: 
22:     // Return empty analytics - variants are tracked client-side
23:     return NextResponse.json({
24:       success: true,
25:       variants: [],
26:       bestVariant: null,
27:       summary: {
28:         totalVariants: 0,
29:         activeVariants: 0,
30:         totalViews: 0,
31:         totalDownloads: 0,
32:         totalResponses: 0
33:       }
34:     })
35:   } catch (error) {
36:     console.error('[RESUME_VARIANT] Analytics error:', error)
37:     return NextResponse.json(
38:       { error: 'Failed to fetch analytics' },
39:       { status: 500 }
40:     )
41:   }
42: }
</file>

<file path="src/app/api/resume/variants/create/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export async function POST(request: NextRequest) {
 6:   try {
 7:     const session = await getServerSession(authOptions)
 8:     if (!session?.user?.id) {
 9:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
10:     }
11: 
12:     const { resumeId, name, content, template } = await request.json()
13: 
14:     if (!resumeId || !name || !content) {
15:       return NextResponse.json(
16:         { error: 'Missing required fields' },
17:         { status: 400 }
18:       )
19:     }
20: 
21:     // Return success - variants are tracked client-side in localStorage
22:     const variant = {
23:       id: `variant_${Date.now()}`,
24:       resumeId,
25:       name,
26:       content,
27:       template: template || 'modern',
28:       isActive: true,
29:       views: 0,
30:       downloads: 0,
31:       responses: 0,
32:       createdAt: new Date().toISOString()
33:     }
34: 
35:     return NextResponse.json({
36:       success: true,
37:       variant
38:     })
39:   } catch (error) {
40:     console.error('[RESUME_VARIANT] Create error:', error)
41:     return NextResponse.json(
42:       { error: 'Failed to create variant' },
43:       { status: 500 }
44:     )
45:   }
46: }
</file>

<file path="src/app/api/resume/variants/track/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: 
 5: export async function POST(request: NextRequest) {
 6:   try {
 7:     const session = await getServerSession(authOptions)
 8:     if (!session?.user?.id) {
 9:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
10:     }
11: 
12:     const { variantId, eventType } = await request.json()
13: 
14:     if (!variantId || !eventType) {
15:       return NextResponse.json(
16:         { error: 'Missing required fields' },
17:         { status: 400 }
18:       )
19:     }
20: 
21:     // Validate event type
22:     if (!['view', 'download', 'response'].includes(eventType)) {
23:       return NextResponse.json(
24:         { error: 'Invalid event type' },
25:         { status: 400 }
26:       )
27:     }
28: 
29:     // Return success - tracking is handled client-side
30:     return NextResponse.json({
31:       success: true,
32:       message: `${eventType} tracked successfully`
33:     })
34:   } catch (error) {
35:     console.error('[RESUME_VARIANT] Track error:', error)
36:     return NextResponse.json(
37:       { error: 'Failed to track event' },
38:       { status: 500 }
39:     )
40:   }
41: }
</file>

<file path="src/app/api/reverse-market/bids/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import connectToDatabase from '@/lib/mongodb'
 3: import EmployerBid from '@/models/EmployerBid'
 4: 
 5: export const dynamic = 'force-dynamic'
 6: 
 7: export async function POST(req: NextRequest) {
 8:   try {
 9:     await connectToDatabase()
10:     const body = await req.json()
11:     const created = await EmployerBid.create(body)
12:     return NextResponse.json({ success: true, bid: created })
13:   } catch (e) {
14:     return NextResponse.json({ error: 'Failed to create bid' }, { status: 500 })
15:   }
16: }
17: 
18: export async function GET(req: NextRequest) {
19:   try {
20:     await connectToDatabase()
21:     const url = new URL(req.url)
22:     const showcaseId = url.searchParams.get('showcaseId')
23:     const filter: any = {}
24:     if (showcaseId) filter.showcaseId = showcaseId
25:     const items = await EmployerBid.find(filter).sort({ createdAt: -1 }).limit(100)
26:     return NextResponse.json({ success: true, bids: items })
27:   } catch (e) {
28:     return NextResponse.json({ error: 'Failed to list bids' }, { status: 500 })
29:   }
30: }
</file>

<file path="src/app/api/reverse-market/showcases/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import CandidateShowcase from '@/models/CandidateShowcase'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     await connectToDatabase()
14:     const body = await req.json()
15:     const created = await CandidateShowcase.create({ userId: (session.user as any).id, ...body })
16:     return NextResponse.json({ success: true, showcase: created })
17:   } catch (e) {
18:     return NextResponse.json({ error: 'Failed to create showcase' }, { status: 500 })
19:   }
20: }
21: 
22: export async function GET(req: NextRequest) {
23:   try {
24:     await connectToDatabase()
25:     const url = new URL(req.url)
26:     const anonymous = url.searchParams.get('anonymous')
27:     const mine = url.searchParams.get('mine')
28:     const filter: any = {}
29:     if (anonymous != null) filter.anonymous = anonymous === 'true'
30:     if (mine === 'true') {
31:       const session = await getServerSession(authOptions)
32:       if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
33:       filter.userId = (session.user as any).id
34:     }
35:     const items = await CandidateShowcase.find(filter).sort({ createdAt: -1 }).limit(100)
36:     return NextResponse.json({ success: true, showcases: items })
37:   } catch (e) {
38:     return NextResponse.json({ error: 'Failed to list showcases' }, { status: 500 })
39:   }
40: }
</file>

<file path="src/app/api/salary-negotiation/export-pdf/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import puppeteer from 'puppeteer'
  5: 
  6: export async function POST(request: NextRequest) {
  7:   try {
  8:     const session = await getServerSession(authOptions)
  9:     if (!session?.user?.id) {
 10:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 11:     }
 12: 
 13:     const { strategy, jobTitle, company } = await request.json()
 14: 
 15:     if (!strategy) {
 16:       return NextResponse.json({ error: 'Missing salary strategy data' }, { status: 400 })
 17:     }
 18: 
 19:     // Generate HTML for PDF
 20:     const html = `
 21:       <!DOCTYPE html>
 22:       <html>
 23:         <head>
 24:           <meta charset="UTF-8">
 25:           <style>
 26:             body {
 27:               font-family: Arial, sans-serif;
 28:               line-height: 1.6;
 29:               color: #333;
 30:               max-width: 800px;
 31:               margin: 0 auto;
 32:               padding: 40px 20px;
 33:             }
 34:             h1 {
 35:               color: #10b981;
 36:               font-size: 32px;
 37:               margin-bottom: 10px;
 38:               border-bottom: 3px solid #10b981;
 39:               padding-bottom: 10px;
 40:             }
 41:             h2 {
 42:               color: #059669;
 43:               font-size: 24px;
 44:               margin-top: 30px;
 45:               margin-bottom: 15px;
 46:               border-bottom: 2px solid #ddd;
 47:               padding-bottom: 8px;
 48:             }
 49:             h3 {
 50:               color: #047857;
 51:               font-size: 18px;
 52:               margin-top: 20px;
 53:               margin-bottom: 10px;
 54:             }
 55:             .subtitle {
 56:               color: #666;
 57:               font-size: 18px;
 58:               margin-bottom: 30px;
 59:             }
 60:             .salary-range {
 61:               background: #f0fdf4;
 62:               border: 2px solid #10b981;
 63:               padding: 20px;
 64:               margin: 20px 0;
 65:               border-radius: 8px;
 66:               text-align: center;
 67:             }
 68:             .salary-number {
 69:               font-size: 32px;
 70:               font-weight: bold;
 71:               color: #059669;
 72:               margin: 10px 0;
 73:             }
 74:             .strategy-box {
 75:               background: #f8fafc;
 76:               border-left: 4px solid #10b981;
 77:               padding: 15px;
 78:               margin: 15px 0;
 79:               border-radius: 4px;
 80:             }
 81:             .tip {
 82:               background: #fef3c7;
 83:               border-left: 4px solid #f59e0b;
 84:               padding: 15px;
 85:               margin: 15px 0;
 86:               border-radius: 4px;
 87:             }
 88:             .warning {
 89:               background: #fee2e2;
 90:               border-left: 4px solid #ef4444;
 91:               padding: 15px;
 92:               margin: 15px 0;
 93:               border-radius: 4px;
 94:             }
 95:             ul {
 96:               margin: 10px 0;
 97:               padding-left: 25px;
 98:             }
 99:             li {
100:               margin: 8px 0;
101:             }
102:             .section {
103:               margin-bottom: 30px;
104:             }
105:             table {
106:               width: 100%;
107:               border-collapse: collapse;
108:               margin: 20px 0;
109:             }
110:             th, td {
111:               border: 1px solid #ddd;
112:               padding: 12px;
113:               text-align: left;
114:             }
115:             th {
116:               background: #f0fdf4;
117:               color: #059669;
118:               font-weight: bold;
119:             }
120:             .footer {
121:               margin-top: 50px;
122:               padding-top: 20px;
123:               border-top: 2px solid #ddd;
124:               text-align: center;
125:               color: #666;
126:               font-size: 12px;
127:             }
128:           </style>
129:         </head>
130:         <body>
131:           <h1>💰 Salary Negotiation Strategy</h1>
132:           <div class="subtitle">${jobTitle} at ${company}</div>
133: 
134:           ${strategy.marketData ? `
135:             <div class="section">
136:               <h2>📊 Market Data</h2>
137:               <div class="salary-range">
138:                 <div><strong>Market Range</strong></div>
139:                 <div class="salary-number">${strategy.marketData.range || 'N/A'}</div>
140:                 ${strategy.marketData.median ? `<div>Median: ${strategy.marketData.median}</div>` : ''}
141:               </div>
142:               ${strategy.marketData.sources ? `
143:                 <p><strong>Data Sources:</strong> ${strategy.marketData.sources.join(', ')}</p>
144:               ` : ''}
145:             </div>
146:           ` : ''}
147: 
148:           ${strategy.recommendedRange ? `
149:             <div class="section">
150:               <h2>🎯 Your Recommended Range</h2>
151:               <div class="salary-range">
152:                 <div class="salary-number">${strategy.recommendedRange.min} - ${strategy.recommendedRange.max}</div>
153:                 ${strategy.recommendedRange.target ? `<div><strong>Target:</strong> ${strategy.recommendedRange.target}</div>` : ''}
154:               </div>
155:               ${strategy.recommendedRange.reasoning ? `
156:                 <div class="strategy-box">
157:                   <strong>Reasoning:</strong> ${strategy.recommendedRange.reasoning}
158:                 </div>
159:               ` : ''}
160:             </div>
161:           ` : ''}
162: 
163:           ${strategy.negotiationTactics && strategy.negotiationTactics.length > 0 ? `
164:             <div class="section">
165:               <h2>🎭 Negotiation Tactics</h2>
166:               ${strategy.negotiationTactics.map((tactic: any) => `
167:                 <div class="strategy-box">
168:                   <h3>${tactic.title || tactic.name}</h3>
169:                   <p>${tactic.description || tactic.tactic}</p>
170:                   ${tactic.example ? `<p><strong>Example:</strong> "${tactic.example}"</p>` : ''}
171:                 </div>
172:               `).join('')}
173:             </div>
174:           ` : ''}
175: 
176:           ${strategy.leveragePoints && strategy.leveragePoints.length > 0 ? `
177:             <div class="section">
178:               <h2>💪 Your Leverage Points</h2>
179:               <ul>
180:                 ${strategy.leveragePoints.map((point: string) => `<li>${point}</li>`).join('')}
181:               </ul>
182:             </div>
183:           ` : ''}
184: 
185:           ${strategy.scriptExamples && strategy.scriptExamples.length > 0 ? `
186:             <div class="section">
187:               <h2>💬 Negotiation Scripts</h2>
188:               ${strategy.scriptExamples.map((script: any) => `
189:                 <div class="strategy-box">
190:                   <h3>${script.scenario}</h3>
191:                   <p><strong>What to say:</strong></p>
192:                   <p style="font-style: italic; padding-left: 15px;">"${script.script}"</p>
193:                 </div>
194:               `).join('')}
195:             </div>
196:           ` : ''}
197: 
198:           ${strategy.benefits && strategy.benefits.length > 0 ? `
199:             <div class="section">
200:               <h2>🎁 Benefits to Negotiate</h2>
201:               <table>
202:                 <thead>
203:                   <tr>
204:                     <th>Benefit</th>
205:                     <th>Priority</th>
206:                     <th>Notes</th>
207:                   </tr>
208:                 </thead>
209:                 <tbody>
210:                   ${strategy.benefits.map((benefit: any) => `
211:                     <tr>
212:                       <td>${benefit.name || benefit.benefit}</td>
213:                       <td>${benefit.priority || 'Medium'}</td>
214:                       <td>${benefit.notes || benefit.value || ''}</td>
215:                     </tr>
216:                   `).join('')}
217:                 </tbody>
218:               </table>
219:             </div>
220:           ` : ''}
221: 
222:           ${strategy.tips && strategy.tips.length > 0 ? `
223:             <div class="section">
224:               <h2>💡 Pro Tips</h2>
225:               ${strategy.tips.map((tip: string) => `
226:                 <div class="tip">${tip}</div>
227:               `).join('')}
228:             </div>
229:           ` : ''}
230: 
231:           ${strategy.redFlags && strategy.redFlags.length > 0 ? `
232:             <div class="section">
233:               <h2>🚩 Red Flags to Avoid</h2>
234:               ${strategy.redFlags.map((flag: string) => `
235:                 <div class="warning">${flag}</div>
236:               `).join('')}
237:             </div>
238:           ` : ''}
239: 
240:           ${strategy.timeline ? `
241:             <div class="section">
242:               <h2>⏱️ Negotiation Timeline</h2>
243:               <div class="strategy-box">
244:                 ${strategy.timeline.initial ? `<p><strong>Initial Offer:</strong> ${strategy.timeline.initial}</p>` : ''}
245:                 ${strategy.timeline.research ? `<p><strong>Research Phase:</strong> ${strategy.timeline.research}</p>` : ''}
246:                 ${strategy.timeline.counter ? `<p><strong>Counter Offer:</strong> ${strategy.timeline.counter}</p>` : ''}
247:                 ${strategy.timeline.decision ? `<p><strong>Decision:</strong> ${strategy.timeline.decision}</p>` : ''}
248:               </div>
249:             </div>
250:           ` : ''}
251: 
252:           <div class="footer">
253:             <p>Generated by Career Lever AI • ${new Date().toLocaleDateString()}</p>
254:             <p>Good luck with your negotiation!</p>
255:           </div>
256:         </body>
257:       </html>
258:     `
259: 
260:     // Generate PDF using Puppeteer
261:     const browser = await puppeteer.launch({
262:       headless: true,
263:       args: ['--no-sandbox', '--disable-setuid-sandbox']
264:     })
265: 
266:     const page = await browser.newPage()
267:     await page.setContent(html, { waitUntil: 'networkidle0' })
268:     
269:     const pdfBuffer = await page.pdf({
270:       format: 'A4',
271:       printBackground: true,
272:       margin: {
273:         top: '20mm',
274:         right: '15mm',
275:         bottom: '20mm',
276:         left: '15mm'
277:       }
278:     })
279: 
280:     await browser.close()
281: 
282:     // Return PDF
283:     return new NextResponse(pdfBuffer, {
284:       headers: {
285:         'Content-Type': 'application/pdf',
286:         'Content-Disposition': `attachment; filename="Salary-Strategy-${jobTitle.replace(/[^a-z0-9]/gi, '-')}.pdf"`
287:       }
288:     })
289: 
290:   } catch (error) {
291:     console.error('[SALARY_PDF] Error:', error)
292:     return NextResponse.json(
293:       { error: 'Failed to generate PDF' },
294:       { status: 500 }
295:     )
296:   }
297: }
</file>

<file path="src/app/api/salary/analysis/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { PerplexityService } from '@/lib/perplexity-service'
 3: 
 4: export const dynamic = 'force-dynamic'
 5: 
 6: export async function POST(request: NextRequest) {
 7:   try {
 8:     const { jobTitle, companyName, location } = await request.json()
 9:     if (!jobTitle || !companyName) return NextResponse.json({ error: 'Missing fields' }, { status: 400 })
10:     const ppx = new PerplexityService()
11:     const system = 'You are a compensation research specialist. Provide a concise, up-to-date salary analysis with sources where possible.'
12:     const prompt = `Salary analysis for ${jobTitle} at ${companyName} in ${location || 'N/A'}.`
13:     const out = await ppx.makeRequest(system, prompt, { maxTokens: 900, temperature: 0.2 })
14:     return NextResponse.json({ success: true, analysis: (out.content || '').trim() })
15:   } catch (e) {
16:     return NextResponse.json({ error: 'Failed to analyze salary' }, { status: 500 })
17:   }
18: }
</file>

<file path="src/app/api/salary/coach/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { isRateLimited } from '@/lib/rate-limit'
 5: import { salaryNegotiationSchema } from '@/lib/validators'
 6: import { AIService } from '@/lib/ai-service'
 7: 
 8: export async function POST(request: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) {
12:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     }
14: 
15:     const rl = await await isRateLimited(session.user.id as unknown as string, 'salary:coach')
16:     if (rl) {
17:       return NextResponse.json({ error: 'Rate limited' }, { status: 429 })
18:     }
19: 
20:     const json = await request.json()
21:     const parsed = salaryNegotiationSchema.safeParse(json)
22:     if (!parsed.success) {
23:       return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
24:     }
25: 
26:     const plan = await AIService.generateSalaryNegotiationPlan(parsed.data)
27:     return NextResponse.json({ success: true, plan })
28:   } catch (error) {
29:     console.error('Salary coach error:', error)
30:     return NextResponse.json({ error: 'Failed to generate negotiation plan' }, { status: 500 })
31:   }
32: }
</file>

<file path="src/app/api/skills/analysis/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { PerplexityService } from '@/lib/perplexity-service'
 3: 
 4: export const dynamic = 'force-dynamic'
 5: 
 6: export async function POST(request: NextRequest) {
 7:   try {
 8:     if (!process.env.PERPLEXITY_API_KEY) return NextResponse.json({ error: 'AI temporarily unavailable (missing PERPLEXITY_API_KEY)' }, { status: 503 })
 9:     const { resumeText } = await request.json()
10:     if (!resumeText) return NextResponse.json({ error: 'resumeText required' }, { status: 400 })
11:     const ppx = new PerplexityService()
12:     const system = 'You are a skills extraction assistant. Return a JSON array of top skills.'
13:     const user = `Extract key skills from this resume:\n${resumeText}`
14:     const out = await ppx.makeRequest(system, user, { maxTokens: 600, temperature: 0.2 })
15:     let text = out.content || ''
16:     if (/```/.test(text)) { const m = text.match(/```json[\s\S]*?```/i) || text.match(/```[\s\S]*?```/); if (m && m[0]) text = m[0].replace(/```json|```/g,'').trim() }
17:     let skills: any = []
18:     try { skills = JSON.parse(text) } catch { skills = [] }
19:     return NextResponse.json({ success: true, skills })
20:   } catch (e) {
21:     return NextResponse.json({ error: 'Failed to analyze skills' }, { status: 500 })
22:   }
23: }
</file>

<file path="src/app/api/stripe/create-checkout/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import Stripe from 'stripe'
 5: 
 6: const stripe = process.env.STRIPE_SECRET_KEY ? new Stripe(process.env.STRIPE_SECRET_KEY, {
 7:   apiVersion: '2025-09-30.clover'
 8: }) : null
 9: 
10: export async function POST(req: NextRequest) {
11:   try {
12:     if (!stripe) {
13:       return NextResponse.json({ error: 'Payment system not configured' }, { status: 503 })
14:     }
15: 
16:     const session = await getServerSession(authOptions)
17:     if (!session?.user?.email) {
18:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
19:     }
20: 
21:     const { priceId } = await req.json()
22: 
23:     // Create Stripe checkout session
24:     const checkoutSession = await stripe.checkout.sessions.create({
25:       mode: 'subscription',
26:       payment_method_types: ['card'],
27:       line_items: [
28:         {
29:           price: priceId || process.env.STRIPE_PRICE_ID, // $4.99/week
30:           quantity: 1
31:         }
32:       ],
33:       success_url: `${process.env.NEXTAUTH_URL}/dashboard?payment=success`,
34:       cancel_url: `${process.env.NEXTAUTH_URL}/payment?payment=cancelled`,
35:       customer_email: session.user.email,
36:       client_reference_id: session.user.id,
37:       metadata: {
38:         userId: session.user.id
39:       },
40:       subscription_data: {
41:         metadata: {
42:           userId: session.user.id
43:         }
44:       }
45:     })
46: 
47:     return NextResponse.json({ 
48:       sessionId: checkoutSession.id,
49:       url: checkoutSession.url
50:     })
51:   } catch (error) {
52:     console.error('[STRIPE] Checkout error:', error)
53:     return NextResponse.json({ 
54:       error: 'Failed to create checkout session' 
55:     }, { status: 500 })
56:   }
57: }
</file>

<file path="src/app/api/stripe/webhook/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import Stripe from 'stripe'
  3: import { dbService } from '@/lib/database'
  4: 
  5: const stripe = process.env.STRIPE_SECRET_KEY ? new Stripe(process.env.STRIPE_SECRET_KEY, {
  6:   apiVersion: '2025-09-30.clover'
  7: }) : null
  8: 
  9: const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET || ''
 10: 
 11: export async function POST(req: NextRequest) {
 12:   try {
 13:     if (!stripe || !webhookSecret) {
 14:       return NextResponse.json({ error: 'Webhook not configured' }, { status: 503 })
 15:     }
 16: 
 17:     const body = await req.text()
 18:     const signature = req.headers.get('stripe-signature')!
 19: 
 20:     let event: Stripe.Event
 21: 
 22:     try {
 23:       event = stripe.webhooks.constructEvent(body, signature, webhookSecret)
 24:     } catch (err) {
 25:       console.error('[STRIPE] Webhook signature verification failed:', err)
 26:       return NextResponse.json({ error: 'Invalid signature' }, { status: 400 })
 27:     }
 28: 
 29:     await dbService.connect()
 30: 
 31:     // Handle the event
 32:     switch (event.type) {
 33:       case 'checkout.session.completed': {
 34:         const session = event.data.object as Stripe.Checkout.Session
 35:         const userId = session.metadata?.userId || session.client_reference_id
 36: 
 37:         if (userId) {
 38:           // Update user subscription status
 39:           const { default: Profile } = await import('@/models/Profile')
 40:           await Profile.findOneAndUpdate(
 41:             { userId },
 42:             {
 43:               subscriptionStatus: 'active',
 44:               subscriptionId: session.subscription,
 45:               plan: 'pro',
 46:               subscriptionStartDate: new Date(),
 47:               stripeCustomerId: session.customer
 48:             },
 49:             { upsert: true }
 50:           )
 51: 
 52:           console.log('[STRIPE] ✅ Subscription activated for user:', userId)
 53:         }
 54:         break
 55:       }
 56: 
 57:       case 'customer.subscription.updated': {
 58:         const subscription = event.data.object as Stripe.Subscription
 59:         const userId = subscription.metadata?.userId
 60: 
 61:         if (userId) {
 62:           const { default: Profile } = await import('@/models/Profile')
 63:           await Profile.findOneAndUpdate(
 64:             { userId },
 65:             {
 66:               subscriptionStatus: subscription.status,
 67:               subscriptionId: subscription.id
 68:             }
 69:           )
 70: 
 71:           console.log('[STRIPE] 📝 Subscription updated for user:', userId, subscription.status)
 72:         }
 73:         break
 74:       }
 75: 
 76:       case 'customer.subscription.deleted': {
 77:         const subscription = event.data.object as Stripe.Subscription
 78:         const userId = subscription.metadata?.userId
 79: 
 80:         if (userId) {
 81:           const { default: Profile } = await import('@/models/Profile')
 82:           await Profile.findOneAndUpdate(
 83:             { userId },
 84:             {
 85:               subscriptionStatus: 'cancelled',
 86:               plan: 'free',
 87:               subscriptionEndDate: new Date()
 88:             }
 89:           )
 90: 
 91:           console.log('[STRIPE] ❌ Subscription cancelled for user:', userId)
 92:         }
 93:         break
 94:       }
 95: 
 96:       case 'invoice.payment_failed': {
 97:         const invoice = event.data.object as any
 98:         const subscriptionId = typeof invoice.subscription === 'string' ? invoice.subscription : invoice.subscription?.id
 99: 
100:         if (subscriptionId) {
101:           const { default: Profile } = await import('@/models/Profile')
102:           await Profile.findOneAndUpdate(
103:             { subscriptionId },
104:             {
105:               subscriptionStatus: 'past_due'
106:             }
107:           )
108: 
109:           console.log('[STRIPE] ⚠️ Payment failed for subscription:', subscriptionId)
110:         }
111:         break
112:       }
113: 
114:       default:
115:         console.log('[STRIPE] Unhandled event type:', event.type)
116:     }
117: 
118:     return NextResponse.json({ received: true })
119:   } catch (error) {
120:     console.error('[STRIPE] Webhook error:', error)
121:     return NextResponse.json({ error: 'Webhook handler failed' }, { status: 500 })
122:   }
123: }
</file>

<file path="src/app/api/style/learn/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Profile from '@/models/Profile'
 6: import { z } from 'zod'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: const schema = z.object({
11:   samples: z.array(z.string().min(50)).min(1).max(5),
12:   tone: z.string().optional(),
13:   sentenceLength: z.string().optional(),
14:   vocabulary: z.string().optional()
15: })
16: 
17: export async function POST(req: NextRequest) {
18:   try {
19:     const session = await getServerSession(authOptions)
20:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
21:     const parsed = schema.safeParse(await req.json())
22:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
23:     await connectToDatabase()
24:     const { samples, tone, sentenceLength, vocabulary } = parsed.data
25:     const examples = samples.slice(0, 5)
26:     await Profile.findOneAndUpdate(
27:       { userId: (session.user as any).id },
28:       { $set: { styleProfile: { tone, sentenceLength, vocabulary, examples } } },
29:       { upsert: true }
30:     )
31:     return NextResponse.json({ success: true })
32:   } catch (e) {
33:     return NextResponse.json({ error: 'Failed to learn style' }, { status: 500 })
34:   }
35: }
</file>

<file path="src/app/api/team/v1/members/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Team from '@/models/Team'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     const { teamId, userId, role } = await req.json()
14:     if (!teamId || !userId) return NextResponse.json({ error: 'teamId and userId required' }, { status: 400 })
15:     await connectToDatabase()
16:     const team = await Team.findOne({ _id: teamId, 'members.userId': (session.user as any).id }).lean()
17:     if (!team) return NextResponse.json({ error: 'Not found or no access' }, { status: 404 })
18:     await Team.updateOne({ _id: teamId }, { $addToSet: { members: { userId, role: role || 'member' } } })
19:     return NextResponse.json({ success: true })
20:   } catch (e) {
21:     return NextResponse.json({ error: 'Failed to add member' }, { status: 500 })
22:   }
23: }
</file>

<file path="src/app/api/team/v1/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Team from '@/models/Team'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function GET(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     await connectToDatabase()
14:     const teams = await Team.find({ 'members.userId': (session.user as any).id }).lean()
15:     return NextResponse.json({ success: true, teams })
16:   } catch (e) {
17:     return NextResponse.json({ error: 'Failed to load teams' }, { status: 500 })
18:   }
19: }
20: 
21: export async function POST(req: NextRequest) {
22:   try {
23:     const session = await getServerSession(authOptions)
24:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
25:     const { name } = await req.json()
26:     if (!name) return NextResponse.json({ error: 'name required' }, { status: 400 })
27:     await connectToDatabase()
28:     const team = await Team.create({ name, ownerId: (session.user as any).id, members: [{ userId: (session.user as any).id, role: 'owner' }] })
29:     return NextResponse.json({ success: true, team })
30:   } catch (e) {
31:     return NextResponse.json({ error: 'Failed to create team' }, { status: 500 })
32:   }
33: }
</file>

<file path="src/app/api/test-auth/route.ts">
 1: /**
 2:  * TEST AUTHENTICATION BYPASS ENDPOINT
 3:  * 
 4:  * WARNING: FOR TESTING ONLY - REMOVE BEFORE PRODUCTION
 5:  * 
 6:  * This endpoint creates a fake session for API testing without requiring
 7:  * actual authentication. Use the test user credentials provided.
 8:  */
 9: 
10: import { NextRequest, NextResponse } from 'next/server'
11: 
12: export const dynamic = 'force-dynamic'
13: export const runtime = 'nodejs'
14: 
15: export async function POST(request: NextRequest) {
16:   try {
17:     const { email, password } = await request.json()
18:     
19:     // Test credentials provided by user
20:     const TEST_EMAIL = 'joemcdonald29@gmail.com'
21:     const TEST_PASSWORD = 'Cohen2011!'
22:     
23:     if (email === TEST_EMAIL && password === TEST_PASSWORD) {
24:       // Return fake session data that matches NextAuth structure
25:       return NextResponse.json({
26:         success: true,
27:         user: {
28:           id: 'test-user-id-12345',
29:           email: TEST_EMAIL,
30:           name: 'Test User'
31:         },
32:         session: {
33:           user: {
34:             id: 'test-user-id-12345',
35:             email: TEST_EMAIL,
36:             name: 'Test User'
37:           },
38:           expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
39:         },
40:         message: 'Test authentication successful - using bypass endpoint'
41:       })
42:     }
43:     
44:     return NextResponse.json({
45:       success: false,
46:       error: 'Invalid test credentials'
47:     }, { status: 401 })
48:     
49:   } catch (error) {
50:     return NextResponse.json({
51:       success: false,
52:       error: 'Test auth endpoint error'
53:     }, { status: 500 })
54:   }
55: }
56: 
57: export async function GET() {
58:   return NextResponse.json({
59:     message: 'Test authentication bypass endpoint',
60:     warning: 'FOR TESTING ONLY - REMOVE BEFORE PRODUCTION',
61:     usage: 'POST with { email, password } to get test session'
62:   })
63: }
</file>

<file path="src/app/api/users/signup/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import bcrypt from 'bcryptjs'
  3: import connectToDatabase from '@/lib/mongodb'
  4: import User from '@/models/User'
  5: import { z } from 'zod'
  6: import { isRateLimited } from '@/lib/rate-limit'
  7: import { logger } from '@/lib/logger'
  8: 
  9: const signupSchema = z.object({
 10:   name: z.string().min(2, 'Name must be at least 2 characters').max(100),
 11:   email: z.string().email('Invalid email address').max(200),
 12:   password: z.string()
 13:     .min(8, 'Password must be at least 8 characters')
 14:     .max(200)
 15:     .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
 16:     .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
 17:     .regex(/[0-9]/, 'Password must contain at least one number'),
 18:   title: z.string().max(100).optional(),
 19:   location: z.string().max(100).optional(),
 20:   role: z.enum(['job_seeker', 'recruiter', 'admin']).optional().default('job_seeker'),
 21: })
 22: 
 23: export async function POST(request: NextRequest) {
 24:   try {
 25:     // Rate limiting
 26:     const ip = request.headers.get('x-forwarded-for') || 'anon'
 27:     const isLimited = await isRateLimited(ip, 'users:signup')
 28:     if (isLimited) {
 29:       return NextResponse.json({ error: 'Too many signup attempts. Please try again later.' }, { status: 429 })
 30:     }
 31: 
 32:     // Connect to database
 33:     await connectToDatabase()
 34: 
 35:     // Parse and validate input
 36:     const raw = await request.json()
 37:     const parsed = signupSchema.safeParse(raw)
 38:     
 39:     if (!parsed.success) {
 40:       const errors = parsed.error.flatten().fieldErrors
 41:       return NextResponse.json({ 
 42:         error: 'Validation failed', 
 43:         details: errors 
 44:       }, { status: 400 })
 45:     }
 46: 
 47:     const { name, email, password, title, location, role } = parsed.data
 48: 
 49:     // Check if user already exists
 50:     const existing = await User.findOne({ email: email.toLowerCase() })
 51:     if (existing) {
 52:       return NextResponse.json({ error: 'Email already in use' }, { status: 409 })
 53:     }
 54: 
 55:     // Hash password with stronger salt rounds
 56:     const saltRounds = 12
 57:     const passwordHash = await bcrypt.hash(password, saltRounds)
 58: 
 59:     // Create user with proper defaults
 60:     const user = new User({
 61:       name,
 62:       email: email.toLowerCase(),
 63:       passwordHash,
 64:       title: title || undefined,
 65:       location: location || undefined,
 66:       role: role || 'job_seeker',
 67:       createdAt: new Date(),
 68:       emailVerified: false,
 69:       profile: {
 70:         onboardingCompleted: false,
 71:         preferences: {
 72:           emailNotifications: true,
 73:           pushNotifications: true,
 74:         }
 75:       }
 76:     })
 77: 
 78:     await user.save()
 79: 
 80:     logger.info('User created successfully', { 
 81:       userId: user._id, 
 82:       email: user.email,
 83:       role: user.role 
 84:     })
 85: 
 86:     // Return success without sensitive data
 87:     return NextResponse.json({ 
 88:       success: true,
 89:       message: 'Account created successfully',
 90:       user: {
 91:         id: user._id,
 92:         name: user.name,
 93:         email: user.email,
 94:         role: user.role
 95:       }
 96:     }, { status: 201 })
 97: 
 98:   } catch (error) {
 99:     logger.error('Signup error:', error)
100:     
101:     // Handle duplicate key error (MongoDB)
102:     if (error instanceof Error && 'code' in error && error.code === 11000) {
103:       return NextResponse.json({ error: 'Email already in use' }, { status: 409 })
104:     }
105: 
106:     return NextResponse.json({ 
107:       error: 'Failed to create account. Please try again.' 
108:     }, { status: 500 })
109:   }
110: }
</file>

<file path="src/app/api/v2/career-finder/comprehensive-research/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 3: 
 4: // CRITICAL: Set route timeout to 5 minutes (Railway/Vercel max)
 5: export const maxDuration = 300 // 5 minutes in seconds
 6: 
 7: /**
 8:  * 🚀 ONE-SHOT COMPREHENSIVE RESEARCH ENDPOINT
 9:  * Replaces multiple separate API calls with a single comprehensive research request
10:  * This dramatically reduces API costs and improves user experience
11:  * 
12:  * Called once when user selects a job, data is cached for all subsequent pages
13:  */
14: export async function POST(request: NextRequest) {
15:   try {
16:     const body = await request.json()
17:     const { jobTitle, company, jobDescription, location, resumeText, resumeSkills } = body
18: 
19:     // Validation
20:     if (!jobTitle || !company || !resumeText) {
21:       return NextResponse.json(
22:         { error: 'Missing required fields: jobTitle, company, resumeText' },
23:         { status: 400 }
24:       )
25:     }
26: 
27:     console.log('[COMPREHENSIVE_RESEARCH_API] Starting research for:', { 
28:       jobTitle, 
29:       company, 
30:       location,
31:       resumeLength: resumeText.length,
32:       skillsCount: resumeSkills?.length || 0
33:     })
34: 
35:     const startTime = Date.now()
36: 
37:     // Make single comprehensive Perplexity call with 4-minute timeout
38:     const result = await Promise.race([
39:       PerplexityIntelligenceService.comprehensiveJobResearch({
40:         jobTitle,
41:         company,
42:         jobDescription: jobDescription || '',
43:         location,
44:         resumeText,
45:         resumeSkills
46:       }),
47:       // Timeout after 4 minutes (leave 1 minute buffer for response)
48:       new Promise<never>((_, reject) => 
49:         setTimeout(() => reject(new Error('Research timeout after 4 minutes')), 240000)
50:       )
51:     ])
52: 
53:     if (!result.success || !result.data) {
54:       console.error('[COMPREHENSIVE_RESEARCH_API] Research failed:', result.metadata.error)
55:       return NextResponse.json(
56:         { error: 'Research failed', details: result.metadata.error },
57:         { status: 500 }
58:       )
59:     }
60: 
61:     const actualDuration = Date.now() - startTime
62: 
63:     console.log('[COMPREHENSIVE_RESEARCH_API] ✅ Research complete:', {
64:       duration: actualDuration,
65:       matchScore: result.data.jobAnalysis.matchScore,
66:       contactsFound: result.data.hiringContacts.length,
67:       newsArticles: result.data.news.length,
68:       reviews: result.data.reviews.length,
69:       confidence: result.data.confidenceLevel
70:     })
71: 
72:     return NextResponse.json({
73:       success: true,
74:       data: result.data,
75:       metadata: {
76:         duration: result.metadata.duration,
77:         timestamp: result.metadata.timestamp,
78:         requestId: result.metadata.requestId
79:       }
80:     })
81:   } catch (error) {
82:     console.error('[COMPREHENSIVE_RESEARCH_API] Unexpected error:', error)
83:     return NextResponse.json(
84:       { error: 'Internal server error', details: (error as Error).message },
85:       { status: 500 }
86:     )
87:   }
88: }
</file>

<file path="src/app/api/v2/company/enhanced-research/route.ts">
 1: /**
 2:  * Enhanced Company Research API
 3:  * Returns comprehensive intelligence including hiring contacts, AI threat analysis, and strategic recommendations
 4:  * 
 5:  * ⚠️ TEMPORARILY DISABLED: enhancedCompanyResearch method removed due to file corruption
 6:  * TODO: Restore after perplexity-intelligence.ts is fixed
 7:  */
 8: 
 9: import { NextRequest, NextResponse } from 'next/server'
10: import { getServerSession } from 'next-auth/next'
11: import { authOptions } from '@/lib/auth'
12: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
13: 
14: export const dynamic = 'force-dynamic'
15: export const runtime = 'nodejs'
16: export const maxDuration = 60
17: 
18: export async function POST(request: NextRequest) {
19:   return NextResponse.json(
20:     { error: 'Endpoint temporarily disabled during maintenance' },
21:     { status: 503 }
22:   )
23: }
24: 
25: /* COMMENTED OUT UNTIL METHOD IS RESTORED
26: async function POST_ORIGINAL(request: NextRequest) {
27:   try {
28:     const session = await getServerSession(authOptions)
29:     if (!session?.user?.id) {
30:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
31:     }
32: 
33:     const body = await request.json()
34:     const { companyName, jobTitle, location, industry, companyWebsite } = body
35: 
36:     if (!companyName || companyName.trim().length < 2) {
37:       return NextResponse.json({ 
38:         error: 'Company name is required' 
39:       }, { status: 400 })
40:     }
41: 
42:     console.log(`[ENHANCED_RESEARCH_API] Starting research for: ${companyName}`)
43:     
44:     const result = await PerplexityIntelligenceService.enhancedCompanyResearch({
45:       companyName: companyName.trim(),
46:       jobTitle: jobTitle?.trim(),
47:       location: location?.trim(),
48:       industry: industry?.trim(),
49:       companyWebsite: companyWebsite?.trim()
50:     })
51: 
52:     if (!result.success || !result.data) {
53:       return NextResponse.json({
54:         error: 'Research failed',
55:         message: result.metadata?.error || 'Unable to gather company intelligence'
56:       }, { status: 500 })
57:     }
58: 
59:     console.log(`[ENHANCED_RESEARCH_API] Success for ${companyName}:`, {
60:       contacts: result.data.hiringContactIntelligence?.keyContacts?.length || 0,
61:       aiThreat: result.data.aiAutomationThreat?.roleRisk || 'N/A',
62:       newsItems: result.data.recentNews?.length || 0
63:     })
64: 
65:     return NextResponse.json({
66:       success: true,
67:       data: result.data,
68:       metadata: {
69:         cached: result.cached,
70:         requestId: result.metadata.requestId,
71:         duration: result.metadata.duration
72:       }
73:     })
74: 
75:   } catch (error: any) {
76:     console.error('[ENHANCED_RESEARCH_API] Error:', error)
77:     return NextResponse.json({
78:       error: 'Internal server error',
79:       message: error.message
80:     }, { status: 500 })
81:   }
82: }
83: */
</file>

<file path="src/app/api/v2/company/financials/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { webScraper } from '@/lib/web-scraper'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     const { companyName } = await req.json()
14:     if (!companyName || String(companyName).trim().length < 2) return NextResponse.json({ error: 'companyName required' }, { status: 400 })
15:     const rl = await isRateLimited((session.user as any).id, 'company:financials')
16:     if (rl) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
17:     const fin = await webScraper.searchFinancials(String(companyName))
18:     return NextResponse.json({ success: true, financials: fin })
19:   } catch (e) {
20:     return NextResponse.json({ error: 'Failed to fetch financials' }, { status: 500 })
21:   }
22: }
</file>

<file path="src/app/api/v2/company/google-intel/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { webScraper } from '@/lib/web-scraper'
 5: import { isRateLimited } from '@/lib/rate-limit'
 6: 
 7: export const dynamic = 'force-dynamic'
 8: 
 9: export async function POST(req: NextRequest) {
10:   try {
11:     const session = await getServerSession(authOptions)
12:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
13:     const body = await req.json()
14:     const { companyName, after } = body || {}
15:     if (!companyName || String(companyName).trim().length < 2) return NextResponse.json({ error: 'companyName required' }, { status: 400 })
16:     const rl = await isRateLimited((session.user as any).id, 'company:google-intel')
17:     if (rl) return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
18:     const intel = await webScraper.searchCompanyIntelByGoogle(String(companyName), { after: after ? String(after) : undefined })
19:     return NextResponse.json({ success: true, intel })
20:   } catch (e) {
21:     return NextResponse.json({ error: 'Failed to fetch company intel' }, { status: 500 })
22:   }
23: }
</file>

<file path="src/app/api/v2/company/intel/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(req: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const { companyName, role, geo } = await req.json()
13:     if (!companyName || typeof companyName !== 'string') return NextResponse.json({ error: 'companyName required' }, { status: 400 })
14:     const intel = await PerplexityIntelligenceService.researchCompanyV2({ company: companyName, role, geo })
15:     return NextResponse.json({ success: true, intel })
16:   } catch (e) {
17:     return NextResponse.json({ error: 'Failed to fetch market intelligence' }, { status: 500 })
18:   }
19: }
</file>

<file path="src/app/api/v2/interviewers/profile/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { webScraper } from '@/lib/web-scraper'
 5: 
 6: export const dynamic = 'force-dynamic'
 7: 
 8: export async function POST(req: NextRequest) {
 9:   try {
10:     const session = await getServerSession(authOptions)
11:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
12:     const { names, companyName } = await req.json()
13:     if (!Array.isArray(names) || !names.length || !companyName) return NextResponse.json({ error: 'names[] and companyName required' }, { status: 400 })
14: 
15:     // OSINT via Google: LinkedIn + Reddit + Twitter mentions heuristic
16:     const profiles = await Promise.all(names.slice(0,5).map(async (n: string) => {
17:       const qLinkedIn = `site:linkedin.com/in "${n}" "${companyName}"`
18:       const qTwitter = `site:twitter.com "${n}" "${companyName}"`
19:       const qReddit = `site:reddit.com "${n}" "${companyName}" interview`
20:       const [li, tw, rd] = await Promise.all([
21:         webScraper.googleSearch(qLinkedIn, 3),
22:         webScraper.googleSearch(qTwitter, 3),
23:         webScraper.googleSearch(qReddit, 3),
24:       ])
25:       return { name: n, linkedin: li, twitter: tw, reddit: rd }
26:     }))
27: 
28:     return NextResponse.json({ success: true, profiles })
29:   } catch (e) {
30:     return NextResponse.json({ error: 'Failed to profile interviewers' }, { status: 500 })
31:   }
32: }
</file>

<file path="src/app/api/v2/jobs/discover/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import { webScraper } from '@/lib/web-scraper'
 5: import { z } from 'zod'
 6: import { getOrCreateRequestId, logRequestStart, logRequestEnd, now, durationMs } from '@/lib/observability'
 7: 
 8: export const dynamic = 'force-dynamic'
 9: 
10: export async function POST(req: NextRequest) {
11:   try {
12:     const requestId = getOrCreateRequestId(req.headers as any)
13:     const startedAt = now()
14:     const routeKey = 'jobs:discover'
15:     logRequestStart(routeKey, requestId)
16:     const session = await getServerSession(authOptions)
17:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
18:     const schema = z.object({
19:       jobTitle: z.string().min(2),
20:       location: z.string().optional(),
21:       after: z.string().optional(),
22:       remote: z.boolean().optional(),
23:       excludeSenior: z.boolean().optional(),
24:       salaryBands: z.array(z.string()).optional(),
25:       limit: z.number().min(1).max(50).optional(),
26:       radiusKm: z.number().min(1).max(500).optional(),
27:       sources: z.array(z.enum(['indeed','linkedin','ziprecruiter','jobbank','workopolis','google'])).optional(),
28:       commuteFrom: z.string().optional(),
29:       commuteMode: z.enum(['driving','walking','transit']).optional(),
30:     })
31:     const parsed = schema.safeParse(await req.json())
32:     if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })
33:     const { jobTitle, location, after, remote, excludeSenior, salaryBands, limit, radiusKm, sources, commuteFrom, commuteMode } = parsed.data as any
34: 
35:     const resultsAll = await webScraper.searchJobsByGoogle({
36:       jobTitle: String(jobTitle),
37:       location: location ? String(location) : undefined,
38:       after: after ? String(after) : undefined,
39:       remote: Boolean(remote),
40:       excludeSenior: Boolean(excludeSenior),
41:       salaryBands: Array.isArray(salaryBands) ? salaryBands.slice(0,3).map(String) : undefined,
42:       limit: typeof limit === 'number' ? limit : 24,
43:       radiusKm: typeof radiusKm === 'number' ? radiusKm : undefined,
44:     })
45: 
46:     // Plan gating: free plan returns up to 20 items, pro 60, company 120
47:     const prof = await (await import('@/models/Profile')).default.findOne({ userId: (session.user as any).id }) as any
48:     const plan = (prof?.plan || 'free') as 'free'|'pro'|'company'
49:     const cap = plan === 'company' ? 120 : plan === 'pro' ? 60 : 20
50: 
51:     const filtered = Array.isArray(sources) && sources.length
52:       ? resultsAll.filter(r => sources.some((s:string)=> (r.source||'').includes(s)))
53:       : resultsAll
54:     let results = filtered.slice(0, cap)
55:     // Optional commute ranking (best-effort; simple string include until full API enabled)
56:     if (commuteFrom && location) {
57:       try {
58:         // Compute travel durations for top 20 entries (best-effort)
59:         const sample = results.slice(0, 20)
60:         const durations: Record<string, number> = {}
61:         await Promise.all(sample.map(async (r) => {
62:           const dest = location
63:           const mode = (commuteMode === 'walking' ? 'walking' : commuteMode === 'transit' ? 'driving' : 'driving') as 'driving'|'walking'|'cycling'
64:           const mins = await (webScraper as any).getTravelDurationMins?.(commuteFrom, dest, mode)
65:           if (typeof mins === 'number') durations[r.url] = mins
66:         }))
67:         results = results.sort((a,b)=> (durations[a.url] || 1e9) - (durations[b.url] || 1e9))
68:       } catch {}
69:     }
70: 
71:     const resp = NextResponse.json({ success: true, results, location: location || null, radiusKm: typeof radiusKm === 'number' ? Math.max(1, Math.min(500, radiusKm)) : null, sources: sources || [], plan })
72:     resp.headers.set('x-request-id', requestId)
73:     logRequestEnd(routeKey, requestId, 200, durationMs(startedAt))
74:     return resp
75:   } catch (e) {
76:     return NextResponse.json({ error: 'Failed to discover jobs' }, { status: 500 })
77:   }
78: }
</file>

<file path="src/app/api/v2/jobs/rank/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import { authOptions } from '@/lib/auth'
  4: import connectToDatabase from '@/lib/mongodb'
  5: import Resume from '@/models/Resume'
  6: import { webScraper } from '@/lib/web-scraper'
  7: import { extractKeywords, calculateMatchScore } from '@/lib/utils'
  8: import crypto from 'crypto'
  9: import { PerplexityService } from '@/lib/perplexity-service'
 10: import { getOrCreateRequestId, logRequestStart, logRequestEnd, now, durationMs } from '@/lib/observability'
 11: 
 12: export const dynamic = 'force-dynamic'
 13: let redis: any = null
 14: if (process.env.REDIS_URL) {
 15:   try {
 16:     const { createClient } = require('redis')
 17:     redis = createClient({ url: process.env.REDIS_URL })
 18:     redis.on('error', () => {})
 19:     redis.connect().catch(()=>{})
 20:   } catch {}
 21: }
 22: 
 23: async function embed(_text: string): Promise<number[] | null> { return null }
 24: 
 25: function cosine(a: number[], b: number[]): number {
 26:   let dot = 0, na = 0, nb = 0
 27:   for (let i=0; i<Math.min(a.length,b.length); i++) { dot += a[i]*b[i]; na += a[i]*a[i]; nb += b[i]*b[i] }
 28:   if (!na || !nb) return 0
 29:   return dot / (Math.sqrt(na)*Math.sqrt(nb))
 30: }
 31: 
 32: async function cacheGet(key: string): Promise<any|undefined> {
 33:   try { if (!redis) return undefined; const raw = await redis.get(key); return raw ? JSON.parse(raw) : undefined } catch { return undefined }
 34: }
 35: async function cacheSet(key: string, value: any, ttlSec = 600) {
 36:   try { if (!redis) return; await redis.setEx(key, ttlSec, JSON.stringify(value)) } catch {}
 37: }
 38: 
 39: function makeResponseKey(resumeText: string, jobs: any[]): string {
 40:   const urls = jobs.map((j:any)=> j.url || '').filter(Boolean).sort().join('|')
 41:   const h = crypto.createHash('sha256').update((resumeText || '').slice(0, 2000) + '||' + urls.slice(0, 8000)).digest('hex')
 42:   return 'rank:resp:' + h
 43: }
 44: 
 45: export async function POST(req: NextRequest) {
 46:   try {
 47:     const requestId = getOrCreateRequestId(req.headers as any)
 48:     const startedAt = now()
 49:     const routeKey = 'jobs:rank'
 50:     logRequestStart(routeKey, requestId)
 51:     const session = await getServerSession(authOptions)
 52:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 53:     const body = await req.json()
 54:     const { jobs, resumeId } = body || {}
 55:     if (!Array.isArray(jobs) || jobs.length === 0) return NextResponse.json({ error: 'jobs array required' }, { status: 400 })
 56: 
 57:     await connectToDatabase()
 58:     let resume = null as any
 59:     if (resumeId) {
 60:       resume = await Resume.findOne({ _id: resumeId, userId: (session.user as any).id }).lean()
 61:     }
 62:     if (!resume) {
 63:       resume = await Resume.findOne({ userId: (session.user as any).id }).sort({ createdAt: -1 }).lean()
 64:     }
 65:     const resumeText = (resume?.extractedText || '').toString()
 66:     if (!resumeText || resumeText.length < 50) return NextResponse.json({ error: 'Resume text not available' }, { status: 400 })
 67: 
 68:     // Whole-response cache
 69:     try {
 70:       const respKey = makeResponseKey(resumeText, jobs)
 71:       const cached = await cacheGet(respKey)
 72:       if (cached && Array.isArray(cached.rankings)) {
 73:         const respCached = NextResponse.json({ success: true, rankings: cached.rankings })
 74:         respCached.headers.set('x-request-id', requestId)
 75:         logRequestEnd(routeKey, requestId, 200, durationMs(startedAt))
 76:         return respCached
 77:       }
 78:     } catch {}
 79: 
 80:     const out: Array<{ url: string; title?: string; companyName?: string; score: number; reasons: string[] }> = []
 81:     const resumeEmb = await embed(resumeText)
 82:     for (const j of jobs.slice(0, 30)) {
 83:       const url: string = j.url || ''
 84:       let title: string | undefined = j.title
 85:       let companyName: string | undefined = j.companyName
 86:       let description: string | undefined = (j as any).description
 87:       try {
 88:         if (!description || description.length < 40) {
 89:           const det = await webScraper.scrapeJobDetailFromUrl(url)
 90:           title = title || det.title
 91:           companyName = companyName || det.companyName
 92:           description = det.description || description
 93:         }
 94:       } catch {}
 95: 
 96:       const jd = (description || title || '').toString()
 97:       // Cache key
 98:       const ck = 'rank:' + crypto.createHash('sha256').update(resumeText.slice(0,2000) + '||' + jd.slice(0,2000)).digest('hex')
 99:       const cached = await cacheGet(ck)
100:       if (cached) { out.push({ url, title, companyName, score: cached.score, reasons: cached.reasons }); continue }
101: 
102:       // Hybrid score: keyword + embeddings (if available)
103:       const kwScore = calculateMatchScore(resumeText, jd) // 0..100
104:       let embScore = 0
105:       if (resumeEmb) {
106:         const jdEmb = await embed(jd)
107:         if (jdEmb) embScore = Math.round(Math.max(0, Math.min(1, cosine(resumeEmb, jdEmb))) * 100)
108:       }
109:       const score = Math.round(kwScore * 0.8 + embScore * 0.2)
110:       const jdKeywords = extractKeywords(jd)
111:       const resumeLower = resumeText.toLowerCase()
112:       const matched = jdKeywords.filter(k => resumeLower.includes(k.toLowerCase())).slice(0, 10)
113:       const missing = jdKeywords.filter(k => !resumeLower.includes(k.toLowerCase())).slice(0, 10)
114:       const reasons: string[] = []
115:       if (matched.length) reasons.push(`Matches: ${matched.join(', ')}`)
116:       if (missing.length) reasons.push(`Consider adding: ${missing.join(', ')}`)
117:       await cacheSet(ck, { score, reasons }, 600)
118:       out.push({ url, title, companyName, score, reasons })
119:     }
120:     // Rerank top-N with LLM scoring via Perplexity
121:     if (out.length > 1) {
122:       try {
123:         const topN = out.slice(0, Math.min(10, out.length))
124:         const payloadJobs = topN.map(j => ({ url: j.url, title: j.title || '', companyName: j.companyName || '' }))
125:         const resumePreview = resumeText.replace(/\s+/g,' ').slice(0, 2500)
126:         // Build job descriptions map for context
127:         const jobDetails: Record<string,string> = {}
128:         for (const j of jobs.slice(0, Math.min(10, jobs.length))) {
129:           const url: string = j.url || ''
130:           const desc: string = (j as any).description || ''
131:           if (url && desc) jobDetails[url] = desc.replace(/\s+/g,' ').slice(0, 1200)
132:         }
133:         const system = 'You return only valid JSON. No prose.'
134:         const userContent = `You are a senior recruiter. Score each job (0-100) for fit to the resume. Return STRICT JSON array of objects: {url, refineScore, fitReasons: string[1-3], fixSuggestions: string[1-3]}.
135: 
136: Resume:\n${resumePreview}
137: 
138: Jobs:\n${payloadJobs.map(j=>`- ${j.url} | ${j.title} @ ${j.companyName} | ${jobDetails[j.url] || ''}`).join('\n')}`
139:         const ppx = new PerplexityService()
140:         const resp = await ppx.makeRequest(system, userContent, { temperature: 0.2, maxTokens: 800 })
141:         const text = (resp.content || '').trim() || '[]'
142:         let parsed: Array<{ url: string; refineScore: number; fitReasons?: string[]; fixSuggestions?: string[] }>
143:         try { parsed = JSON.parse(text) } catch { parsed = [] as any }
144:         const map: Record<string, { refineScore: number; fitReasons?: string[]; fixSuggestions?: string[] }> = {}
145:         for (const it of parsed as any[]) {
146:           if (it && typeof it.url === 'string' && typeof it.refineScore === 'number') {
147:             map[it.url] = { refineScore: Math.max(0, Math.min(100, Math.round(it.refineScore))), fitReasons: Array.isArray(it.fitReasons) ? it.fitReasons.slice(0,3) : [], fixSuggestions: Array.isArray(it.fixSuggestions) ? it.fixSuggestions.slice(0,3) : [] }
148:           }
149:         }
150:         // Blend scores and augment reasons/suggestions
151:         for (const item of out) {
152:           const extra = map[item.url]
153:           if (extra) {
154:             const final = Math.round(item.score * 0.7 + extra.refineScore * 0.3)
155:             item.score = final
156:             if (extra.fitReasons && extra.fitReasons.length) item.reasons = [...item.reasons, ...extra.fitReasons.map(r=>`LLM: ${r}`)]
157:             if (extra.fixSuggestions && extra.fixSuggestions.length) item.reasons = [...item.reasons, ...extra.fixSuggestions.map(r=>`Fix: ${r}`)]
158:             await cacheSet('rank:llm:'+crypto.createHash('sha256').update(item.url + resumeText.slice(0,1000)).digest('hex'), { score: final, reasons: item.reasons }, 600)
159:           }
160:         }
161:       } catch {
162:         // ignore reranker failures
163:       }
164:     }
165:     out.sort((a,b)=> b.score - a.score)
166:     try { const respKey = makeResponseKey(resumeText, jobs); await cacheSet(respKey, { rankings: out }, 600) } catch {}
167:     const resp = NextResponse.json({ success: true, rankings: out })
168:     resp.headers.set('x-request-id', requestId)
169:     logRequestEnd(routeKey, requestId, 200, durationMs(startedAt))
170:     return resp
171:   } catch (e) {
172:     return NextResponse.json({ error: 'Failed to rank jobs' }, { status: 500 })
173:   }
174: }
</file>

<file path="src/app/api/v2/jobs/suggest/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth/next'
 3: import { authOptions } from '@/lib/auth'
 4: import connectToDatabase from '@/lib/mongodb'
 5: import Resume from '@/models/Resume'
 6: import Profile, { IProfile } from '@/models/Profile'
 7: import { webScraper } from '@/lib/web-scraper'
 8: 
 9: export const dynamic = 'force-dynamic'
10: 
11: function guessTitlesFromText(text: string): string[] {
12:   const lines = text.split(/\n+/)
13:   const candidates: string[] = []
14:   const titlePatterns = [
15:     /([A-Z][a-z]+\s)?(Sales|Account|Business|Marketing|Finance|Project|Product|Operations|Customer|Software|Data|Security|Support)\s(Manager|Director|Lead|Specialist|Representative|Coordinator|Executive|Engineer|Developer|Analyst)/i,
16:     /(Sales|Account|Business|Marketing|Finance)\s(Manager|Executive)/i,
17:     /(Software|Data|Security)\s(Engineer|Developer|Analyst)/i,
18:   ]
19:   for (const l of lines) {
20:     const s = l.trim()
21:     for (const re of titlePatterns) {
22:       const m = s.match(re)
23:       if (m && m[0]) candidates.push(m[0].replace(/\s+/g,' ').trim())
24:     }
25:   }
26:   const uniq = Array.from(new Set(candidates.map(c => c.replace(/\b(Director|Lead)\b/i,'Manager'))))
27:   if (uniq.length) return uniq.slice(0, 3)
28:   // Fallback generic titles based on keywords
29:   const lower = text.toLowerCase()
30:   if (lower.includes('sales')) return ['Sales Manager','Account Manager']
31:   if (lower.includes('finance')) return ['Finance Manager']
32:   if (lower.includes('developer') || lower.includes('engineer')) return ['Software Engineer']
33:   if (lower.includes('marketing')) return ['Marketing Manager']
34:   return ['Manager']
35: }
36: 
37: function guessLocation(text: string): string | null {
38:   const m = text.match(/([A-Z][a-zA-Z]+),\s*([A-Z]{2,3})/) // City, ST
39:   if (m) return `${m[1]}, ${m[2]}`
40:   return null
41: }
42: 
43: export async function POST(req: NextRequest) {
44:   try {
45:     const session = await getServerSession(authOptions)
46:     if (!session?.user?.email) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
47:     const body = await req.json().catch(()=>({}))
48:     const { resumeId, location: overrideLocation, radiusKm } = body || {}
49: 
50:     await connectToDatabase()
51:     let resume = null as any
52:     if (resumeId) {
53:       resume = await Resume.findOne({ _id: resumeId, userId: (session.user as any).id }).lean()
54:     }
55:     if (!resume) {
56:       resume = await Resume.findOne({ userId: (session.user as any).id }).sort({ createdAt: -1 }).lean()
57:     }
58:     if (!resume) return NextResponse.json({ error: 'No resume found' }, { status: 404 })
59: 
60:     // Titles
61:     const titles = guessTitlesFromText(resume.extractedText || '')
62: 
63:     // Location
64:     let location = typeof overrideLocation === 'string' && overrideLocation.trim().length > 2 ? overrideLocation.trim() : null
65:     if (!location) {
66:       const prof = await Profile.findOne({ userId: (session.user as any).id }).lean<IProfile>().exec()
67:       location = (prof?.location as any) || guessLocation(resume.extractedText || '') || null
68:     }
69: 
70:     const afterDate = new Date(Date.now() - 30*24*60*60*1000).toISOString().slice(0,10)
71:     const resultsAll: Array<{ title?: string; url: string; snippet?: string; source: string }> = []
72:     for (const t of titles.slice(0,2)) {
73:       const res = await webScraper.searchJobsByGoogle({
74:         jobTitle: t,
75:         location: location || undefined,
76:         after: afterDate,
77:         excludeSenior: true,
78:         limit: 20,
79:         radiusKm: typeof radiusKm === 'number' ? Math.max(1, Math.min(500, radiusKm)) : 25,
80:       })
81:       resultsAll.push(...res)
82:       if (resultsAll.length >= 40) break
83:     }
84:     // De-dupe by URL
85:     const seen = new Set<string>()
86:     const results = resultsAll.filter(r => {
87:       const key = r.url.split('#')[0]
88:       if (seen.has(key)) return false
89:       seen.add(key)
90:       return true
91:     }).slice(0, 40)
92: 
93:     return NextResponse.json({ success: true, titles: titles.slice(0,2), location: location || null, results })
94:   } catch (e) {
95:     // Do not hard-fail; return empty suggestions to avoid client protocol errors
96:     return NextResponse.json({ success: true, titles: [], location: null, results: [] })
97:   }
98: }
</file>

<file path="src/app/auth/forgot-password/page.tsx">
 1: 'use client'
 2: 
 3: import { useState } from 'react'
 4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
 5: import { Button } from '@/components/ui/button'
 6: import { Input } from '@/components/ui/input'
 7: import { Label } from '@/components/ui/label'
 8: import { Alert, AlertDescription } from '@/components/ui/alert'
 9: 
10: export default function ForgotPasswordPage() {
11:   const [email, setEmail] = useState('')
12:   const [sent, setSent] = useState(false)
13:   const [error, setError] = useState('')
14: 
15:   const submit = async (e: React.FormEvent) => {
16:     e.preventDefault()
17:     setError('')
18:     try {
19:       setSent(true)
20:     } catch (e) {
21:       setError('Failed to send reset link')
22:     }
23:   }
24: 
25:   return (
26:     <div className="min-h-screen flex items-center justify-center bg-background p-4">
27:       <Card className="w-full max-w-md">
28:         <CardHeader>
29:           <CardTitle>Reset your password</CardTitle>
30:           <CardDescription>Enter your email and we'll send you a reset link.</CardDescription>
31:         </CardHeader>
32:         <CardContent>
33:           {error && (
34:             <Alert variant="destructive"><AlertDescription>{error}</AlertDescription></Alert>
35:           )}
36:           {sent ? (
37:             <Alert><AlertDescription>If an account exists for {email}, a reset link has been sent.</AlertDescription></Alert>
38:           ) : (
39:             <form onSubmit={submit} className="space-y-4">
40:               <div className="space-y-2">
41:                 <Label htmlFor="email">Email</Label>
42:                 <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required autoComplete="email" />
43:               </div>
44:               <Button type="submit" className="w-full">Send reset link</Button>
45:             </form>
46:           )}
47:         </CardContent>
48:       </Card>
49:     </div>
50:   )
51: }
</file>

<file path="src/app/auth/signup/page.tsx">
  1: 'use client'
  2: 
  3: export const dynamic = 'force-dynamic'
  4: 
  5: import { useEffect, useState, Suspense } from 'react'
  6: import { signIn } from 'next-auth/react'
  7: import { useRouter, useSearchParams } from 'next/navigation'
  8: import Link from 'next/link'
  9: import { Button } from '@/components/ui/button'
 10: import { Input } from '@/components/ui/input'
 11: import { Label } from '@/components/ui/label'
 12: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
 13: import { Alert, AlertDescription } from '@/components/ui/alert'
 14: import { Separator } from '@/components/ui/separator'
 15: import { Checkbox } from '@/components/ui/checkbox'
 16: import {
 17:   Mail,
 18:   Lock,
 19:   Eye,
 20:   EyeOff,
 21:   Loader2,
 22:   Sparkles,
 23:   AlertCircle,
 24:   CheckCircle,
 25:   User,
 26:   Building
 27: } from 'lucide-react'
 28: import toast from 'react-hot-toast'
 29: 
 30: function SignUpInner() {
 31:   const [formData, setFormData] = useState({
 32:     name: '',
 33:     email: '',
 34:     password: '',
 35:     confirmPassword: '',
 36:     company: '',
 37:     role: ''
 38:   })
 39:   const [showPassword, setShowPassword] = useState(false)
 40:   const [showConfirmPassword, setShowConfirmPassword] = useState(false)
 41:   const [acceptTerms, setAcceptTerms] = useState(false)
 42:   const [isLoading, setIsLoading] = useState(false)
 43:   const [error, setError] = useState('')
 44:   const [success, setSuccess] = useState('')
 45: 
 46:   const router = useRouter()
 47:   const searchParams = useSearchParams()
 48: 
 49:   // Prefill email if passed from homepage
 50:   useEffect(() => {
 51:     const prefill = searchParams.get('email')
 52:     if (prefill) setFormData(prev => ({ ...prev, email: prefill }))
 53:   }, [searchParams])
 54: 
 55:   const handleInputChange = (field: string, value: string) => {
 56:     setFormData(prev => ({ ...prev, [field]: value }))
 57:   }
 58: 
 59:   const validateForm = () => {
 60:     if (!formData.name.trim()) return 'Name is required'
 61:     if (!formData.email.trim()) return 'Email is required'
 62:     if (!formData.password) return 'Password is required'
 63:     if (formData.password.length < 8) return 'Password must be at least 8 characters'
 64:     if (formData.password !== formData.confirmPassword) return 'Passwords do not match'
 65:     if (!acceptTerms) return 'You must accept the terms and conditions'
 66: 
 67:     return null
 68:   }
 69: 
 70:   const handleSubmit = async (e: React.FormEvent) => {
 71:     e.preventDefault()
 72:     setError('')
 73: 
 74:     const validationError = validateForm()
 75:     if (validationError) {
 76:       setError(validationError)
 77:       return
 78:     }
 79: 
 80:     setIsLoading(true)
 81: 
 82:     try {
 83:       const res = await fetch('/api/users/signup', {
 84:         method: 'POST',
 85:         headers: { 'Content-Type': 'application/json' },
 86:         body: JSON.stringify({
 87:           name: formData.name,
 88:           email: formData.email,
 89:           password: formData.password,
 90:           title: formData.role,
 91:           location: formData.company ? undefined : undefined
 92:         })
 93:       })
 94: 
 95:       if (!res.ok) {
 96:         const data = await res.json()
 97:         throw new Error(data.error || 'Failed to create account')
 98:       }
 99: 
100:       setSuccess('Account created successfully! Please sign in.')
101:       toast.success('Account created! Redirecting to sign in...')
102: 
103:       setTimeout(() => {
104:         router.push('/auth/signin?registered=true')
105:       }, 1500)
106: 
107:     } catch (error) {
108:       setError('Failed to create account. Please try again.')
109:       toast.error('Sign up failed')
110:     } finally {
111:       setIsLoading(false)
112:     }
113:   }
114: 
115:   const handleGoogleSignUp = async () => {
116:     setIsLoading(true)
117:     try {
118:       await signIn('google', { callbackUrl: '/dashboard' })
119:     } catch (error) {
120:       setError('Google sign up failed')
121:       setIsLoading(false)
122:     }
123:   }
124: 
125:   const getPasswordStrength = (password: string) => {
126:     let strength = 0
127:     if (password.length >= 8) strength++
128:     if (/[A-Z]/.test(password)) strength++
129:     if (/[a-z]/.test(password)) strength++
130:     if (/[0-9]/.test(password)) strength++
131:     if (/[^A-Za-z0-9]/.test(password)) strength++
132: 
133:     return {
134:       level: strength,
135:       label: strength <= 2 ? 'Weak' : strength <= 3 ? 'Medium' : 'Strong',
136:       color: strength <= 2 ? 'text-red-600' : strength <= 3 ? 'text-yellow-600' : 'text-green-600'
137:     }
138:   }
139: 
140:   const passwordStrength = getPasswordStrength(formData.password)
141: 
142:   return (
143:     <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-50 via-white to-blue-50 p-4">
144:       <div className="w-full max-w-lg space-y-6">
145:         {/* Header */}
146:         <div className="text-center space-y-2">
147:           <div className="inline-flex items-center justify-center w-16 h-16 bg-purple-100 rounded-full mb-4">
148:             <Sparkles className="w-8 h-8 text-purple-600" />
149:           </div>
150:           <h1 className="text-3xl font-bold text-foreground">Join Career Lever AI</h1>
151:           <p className="text-muted-foreground">Create your account and start your career transformation</p>
152:         </div>
153: 
154:         {/* Success Alert */}
155:         {success && (
156:           <Alert>
157:             <CheckCircle className="h-4 w-4" />
158:             <AlertDescription>{success}</AlertDescription>
159:           </Alert>
160:         )}
161: 
162:         {/* Error Alert */}
163:         {error && (
164:           <Alert variant="destructive">
165:             <AlertCircle className="h-4 w-4" />
166:             <AlertDescription>{error}</AlertDescription>
167:           </Alert>
168:         )}
169: 
170:         {/* Sign Up Form */}
171:         <Card>
172:           <CardHeader className="space-y-1">
173:             <CardTitle className="text-2xl text-center">Create Account</CardTitle>
174:             <CardDescription className="text-center">
175:               Fill in your details to get started
176:             </CardDescription>
177:           </CardHeader>
178:           <CardContent className="space-y-4">
179:             {/* Google Sign Up */}
180:             <Button
181:               type="button"
182:               variant="outline"
183:               className="w-full"
184:               onClick={handleGoogleSignUp}
185:               disabled={isLoading}
186:             >
187:               <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
188:                 <path
189:                   fill="currentColor"
190:                   d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
191:                 />
192:                 <path
193:                   fill="currentColor"
194:                   d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
195:                 />
196:                 <path
197:                   fill="currentColor"
198:                   d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
199:                 />
200:                 <path
201:                   fill="currentColor"
202:                   d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
203:                 />
204:               </svg>
205:               Continue with Google
206:             </Button>
207: 
208:             <div className="relative">
209:               <div className="absolute inset-0 flex items-center">
210:                 <Separator />
211:               </div>
212:               <div className="relative flex justify-center text-xs uppercase">
213:                 <span className="bg-background px-2 text-muted-foreground">Or create account with email</span>
214:               </div>
215:             </div>
216: 
217:             <form onSubmit={handleSubmit} className="space-y-4">
218:               <div className="grid grid-cols-2 gap-4">
219:                 <div className="space-y-2">
220:                   <Label htmlFor="name">Full Name</Label>
221:                   <div className="relative">
222:                     <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
223:                     <Input
224:                       id="name"
225:                       type="text"
226:                       placeholder="John Doe"
227:                       value={formData.name}
228:                       onChange={(e) => handleInputChange('name', e.target.value)}
229:                       className="pl-10"
230:                       required
231:                       disabled={isLoading}
232:                     />
233:                   </div>
234:                 </div>
235: 
236:                 <div className="space-y-2">
237:                   <Label htmlFor="role">Your Role</Label>
238:                   <div className="relative">
239:                     <Building className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
240:                     <Input
241:                       id="role"
242:                       type="text"
243:                       placeholder="Software Engineer"
244:                       value={formData.role}
245:                       onChange={(e) => handleInputChange('role', e.target.value)}
246:                       className="pl-10"
247:                       disabled={isLoading}
248:                     />
249:                   </div>
250:                 </div>
251:               </div>
252: 
253:               <div className="space-y-2">
254:                 <Label htmlFor="email">Email</Label>
255:                 <div className="relative">
256:                   <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
257:                   <Input
258:                     id="email"
259:                     type="email"
260:                     placeholder="john@example.com"
261:                     value={formData.email}
262:                     onChange={(e) => handleInputChange('email', e.target.value)}
263:                     className="pl-10"
264:                     required
265:                     disabled={isLoading}
266:                   />
267:                 </div>
268:               </div>
269: 
270:               <div className="space-y-2">
271:                 <Label htmlFor="company">Company (Optional)</Label>
272:                 <div className="relative">
273:                   <Building className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
274:                   <Input
275:                     id="company"
276:                     type="text"
277:                     placeholder="Current company or 'Unemployed'"
278:                     value={formData.company}
279:                     onChange={(e) => handleInputChange('company', e.target.value)}
280:                     className="pl-10"
281:                     disabled={isLoading}
282:                   />
283:                 </div>
284:               </div>
285: 
286:               <div className="space-y-2">
287:                 <Label htmlFor="password">Password</Label>
288:                 <div className="relative">
289:                   <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
290:                   <Input
291:                     id="password"
292:                     type={showPassword ? 'text' : 'password'}
293:                     placeholder="Create a strong password"
294:                     value={formData.password}
295:                     onChange={(e) => handleInputChange('password', e.target.value)}
296:                     className="pl-10 pr-10"
297:                     required
298:                     disabled={isLoading}
299:                   />
300:                   <button
301:                     type="button"
302:                     onClick={() => setShowPassword(!showPassword)}
303:                     className="absolute right-3 top-3 text-muted-foreground hover:text-muted-foreground"
304:                     disabled={isLoading}
305:                   >
306:                     {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
307:                   </button>
308:                 </div>
309:                 {formData.password && (
310:                   <div className="flex items-center gap-2 text-sm">
311:                     <span>Password strength:</span>
312:                     <span className={`font-medium ${passwordStrength.color}`}>
313:                       {passwordStrength.label}
314:                     </span>
315:                     <div className="flex-1 bg-gray-200 rounded-full h-1">
316:                       <div
317:                         className={`h-1 rounded-full ${
318:                           passwordStrength.level <= 2
319:                             ? 'bg-red-500'
320:                             : passwordStrength.level <= 3
321:                             ? 'bg-yellow-500'
322:                             : 'bg-green-500'
323:                         }`}
324:                         style={{ width: `${(passwordStrength.level / 5) * 100}%` }}
325:                       />
326:                     </div>
327:                   </div>
328:                 )}
329:               </div>
330: 
331:               <div className="space-y-2">
332:                 <Label htmlFor="confirmPassword">Confirm Password</Label>
333:                 <div className="relative">
334:                   <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
335:                   <Input
336:                     id="confirmPassword"
337:                     type={showConfirmPassword ? 'text' : 'password'}
338:                     placeholder="Confirm your password"
339:                     value={formData.confirmPassword}
340:                     onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
341:                     className="pl-10 pr-10"
342:                     required
343:                     disabled={isLoading}
344:                   />
345:                   <button
346:                     type="button"
347:                     onClick={() => setShowConfirmPassword(!showConfirmPassword)}
348:                     className="absolute right-3 top-3 text-muted-foreground hover:text-muted-foreground"
349:                     disabled={isLoading}
350:                   >
351:                     {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
352:                   </button>
353:                 </div>
354:               </div>
355: 
356:               <div className="flex items-center space-x-2">
357:                 <Checkbox
358:                   id="terms"
359:                   checked={acceptTerms}
360:                   onCheckedChange={(checked) => setAcceptTerms(checked as boolean)}
361:                   disabled={isLoading}
362:                 />
363:                 <Label htmlFor="terms" className="text-sm">
364:                   I agree to the{' '}
365:                   <Link href="/terms" className="text-blue-600 hover:text-blue-800">
366:                     Terms of Service
367:                   </Link>{' '}
368:                   and{' '}
369:                   <Link href="/privacy" className="text-blue-600 hover:text-blue-800">
370:                     Privacy Policy
371:                   </Link>
372:                 </Label>
373:               </div>
374: 
375:               <Button type="submit" className="w-full" disabled={isLoading}>
376:                 {isLoading ? (
377:                   <>
378:                     <Loader2 className="mr-2 h-4 w-4 animate-spin" />
379:                     Creating account...
380:                   </>
381:                 ) : (
382:                   'Create Account'
383:                 )}
384:               </Button>
385:             </form>
386:           </CardContent>
387:         </Card>
388: 
389:         {/* Sign In Link */}
390:         <div className="text-center">
391:           <p className="text-sm text-muted-foreground">
392:             Already have an account?{' '}
393:             <Link href="/auth/signin" className="text-blue-600 hover:text-blue-800 font-medium">
394:               Sign in here
395:             </Link>
396:           </p>
397:         </div>
398:       </div>
399:     </div>
400:   )
401: }
402: 
403: export default function SignUpPage() {
404:   return (
405:     <Suspense>
406:       <SignUpInner />
407:     </Suspense>
408:   )
409: }
</file>

<file path="src/app/career-finder/cover-letter/page.tsx">
  1: 'use client'
  2: 
  3: export const dynamic = 'force-dynamic'
  4: 
  5: import { useState, useEffect } from 'react'
  6: import { toTitleCase } from '@/lib/text-formatting'
  7: import Link from 'next/link'
  8: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
  9: 
 10: export default function CareerFinderCoverLetterPage() {
 11:   const [loading, setLoading] = useState(true)
 12:   const [letterA, setLetterA] = useState('')
 13:   const [letterB, setLetterB] = useState('')
 14:   const [selected, setSelected] = useState<'A'|'B'|'none'>('none')
 15:   const [error, setError] = useState<string | null>(null)
 16: 
 17:   useEffect(() => {
 18:     (async () => {
 19:       try { localStorage.setItem('cf:progress', JSON.stringify({ step: 6, total: 7 })) } catch {}
 20:       setLoading(true)
 21:       
 22:       try {
 23:         // AUTOPILOT: Check cache first
 24:         const cacheKey = 'cf:coverLetters'
 25:         const cached = localStorage.getItem(cacheKey)
 26:         
 27:         if (cached) {
 28:           console.log('[COVER_LETTER] ✅ Loading from cache')
 29:           const letters = JSON.parse(cached)
 30:           setLetterA(letters.variantA || '')
 31:           setLetterB(letters.variantB || '')
 32:           setLoading(false)
 33:           return
 34:         }
 35:         
 36:         console.log('[COVER_LETTER] 🔄 Generating new cover letters via autopilot...')
 37:         
 38:         // Load resume text
 39:         let resumeText = ''
 40:         try {
 41:           const rl = await fetch('/api/resume/list')
 42:           if (rl.ok) {
 43:             const rj = await rl.json()
 44:             resumeText = (rj?.resumes?.[0]?.extractedText || '').toString().slice(0, 8000)
 45:           }
 46:         } catch {}
 47:         
 48:         // Load selected job
 49:         let selectedJob: { title?: string; company?: string } | null = null
 50:         try { selectedJob = JSON.parse(localStorage.getItem('cf:selectedJob') || 'null') } catch {}
 51:         const jobTitle = selectedJob?.title || 'Role'
 52:         const company = selectedJob?.company || 'Company'
 53:         
 54:         // Load userName from signals and format to Title Case
 55:         let userName = '[Your Name]'
 56:         try {
 57:           const signals = JSON.parse(localStorage.getItem('cf:signals') || '{}')
 58:           const rawName = signals.personalInfo?.name || '[Your Name]'
 59:           // ✅ FIX #3: Convert ALL CAPS names to Title Case
 60:           userName = toTitleCase(rawName)
 61:         } catch {}
 62:         
 63:         // Generate TWO variants using main API with templates
 64:         const [responseA, responseB] = await Promise.all([
 65:           fetch('/api/cover-letter/generate', {
 66:             method: 'POST',
 67:             headers: { 'Content-Type': 'application/json' },
 68:             body: JSON.stringify({
 69:               raw: true,
 70:               jobTitle,
 71:               companyName: company,
 72:               jobDescription: '',
 73:               resumeText,
 74:               save: false,
 75:               templateId: 'professional' // Variant A: Professional
 76:             })
 77:           }),
 78:           fetch('/api/cover-letter/generate', {
 79:             method: 'POST',
 80:             headers: { 'Content-Type': 'application/json' },
 81:             body: JSON.stringify({
 82:               raw: true,
 83:               jobTitle,
 84:               companyName: company,
 85:               jobDescription: '',
 86:               resumeText,
 87:               save: false,
 88:               templateId: 'modern' // Variant B: Modern
 89:             })
 90:           })
 91:         ])
 92:         
 93:         if (!responseA.ok || !responseB.ok) {
 94:           throw new Error(`API error: ${responseA.status} / ${responseB.status}`)
 95:         }
 96:         
 97:         const [resultA, resultB] = await Promise.all([
 98:           responseA.json(),
 99:           responseB.json()
100:         ])
101:         
102:         if (resultA.success && resultB.success) {
103:           const variantA = resultA.coverLetter || ''
104:           const variantB = resultB.coverLetter || ''
105:           setLetterA(variantA)
106:           setLetterB(variantB)
107:           
108:           // Cache the result
109:           localStorage.setItem(cacheKey, JSON.stringify({ variantA, variantB }))
110:           console.log('[COVER_LETTER] ✅ Cover letters generated and cached')
111:         } else {
112:           throw new Error(resultA.error || resultB.error || 'Failed to generate cover letters')
113:         }
114:       } catch (err) {
115:         console.error('[COVER_LETTER] Error:', err)
116:         setError('Failed to generate cover letters')
117:       }
118:       
119:       setLoading(false)
120:     })()
121:   }, [])
122: 
123:   const saveSelection = () => {
124:     try {
125:       const chosen = selected === 'A' ? letterA : letterB
126:       localStorage.setItem('cf:selectedCoverLetter', chosen || '')
127:     } catch {}
128:   }
129: 
130:   return (
131:     <div className="mobile-container space-y-4">
132:       <CareerFinderBackButton />
133:       <div className="text-sm text-foreground">Choose one of the generated cover letters.</div>
134:       {loading && <div className="text-sm">Generating letters…</div>}
135:       {error && <div className="text-xs text-red-600">{error}</div>}
136:       {!loading && (
137:         <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
138:           <div className={`border rounded p-3 text-sm ${selected==='A'?'ring-2 ring-blue-500':''}`} onClick={()=>setSelected('A')}>
139:             <div className="text-xs text-muted-foreground mb-2">Option A</div>
140:             <div className="whitespace-pre-wrap">{letterA || 'No content'}</div>
141:           </div>
142:           <div className={`border rounded p-3 text-sm ${selected==='B'?'ring-2 ring-blue-500':''}`} onClick={()=>setSelected('B')}>
143:             <div className="text-xs text-muted-foreground mb-2">Option B</div>
144:             <div className="whitespace-pre-wrap">{letterB || 'No content'}</div>
145:           </div>
146:         </div>
147:       )}
148:       <div className="flex items-center justify-between">
149:         <div className="text-xs text-muted-foreground">Selected: {selected}</div>
150:         <Link className={`inline-block px-4 py-2 border rounded ${selected==='none'?'pointer-events-none opacity-50':''}`} href="/career-finder/outreach" onClick={saveSelection}>Next</Link>
151:       </div>
152:     </div>
153:   )
154: }
</file>

<file path="src/app/career-finder/interview-prep/page.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { useRouter } from 'next/navigation'
  5: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
  6: import CareerFinderStorage from '@/lib/career-finder-storage'
  7: import { Lightbulb, MessageSquare, Target, Download, Loader2 } from 'lucide-react'
  8: 
  9: interface Application {
 10:   id: string
 11:   company: string
 12:   jobTitle: string
 13:   location?: string
 14:   status: string
 15:   appliedAt: string
 16:   hasInterviewPrep: boolean
 17: }
 18: 
 19: interface InterviewPrep {
 20:   questions: string[]
 21:   companyInsights: string
 22:   talkingPoints: string[]
 23:   company: string
 24:   jobTitle: string
 25: }
 26: 
 27: export default function InterviewPrepPage() {
 28:   const router = useRouter()
 29:   const [applications, setApplications] = useState<Application[]>([])
 30:   const [selectedApp, setSelectedApp] = useState<Application | null>(null)
 31:   const [prep, setPrep] = useState<InterviewPrep | null>(null)
 32:   const [loading, setLoading] = useState(true)
 33:   const [generating, setGenerating] = useState(false)
 34: 
 35:   useEffect(() => {
 36:     loadApplications()
 37:   }, [])
 38: 
 39:   const loadApplications = async () => {
 40:     try {
 41:       const response = await fetch('/api/applications/list')
 42:       if (response.ok) {
 43:         const apps = await response.json()
 44:         setApplications(apps)
 45:         console.log('[INTERVIEW_PREP] Loaded', apps.length, 'applications')
 46:       }
 47:     } catch (error) {
 48:       console.error('[INTERVIEW_PREP] Error loading applications:', error)
 49:     } finally {
 50:       setLoading(false)
 51:     }
 52:   }
 53: 
 54:   const generatePrep = async () => {
 55:     if (!selectedApp) return
 56: 
 57:     setGenerating(true)
 58:     try {
 59:       // Get resume and company research from storage
 60:       const resume = CareerFinderStorage.getResume()
 61:       const companyResearch = CareerFinderStorage.getCompanyResearch()
 62: 
 63:       const response = await fetch('/api/interview-prep/generate', {
 64:         method: 'POST',
 65:         headers: { 'Content-Type': 'application/json' },
 66:         body: JSON.stringify({
 67:           applicationId: selectedApp.id,
 68:           resumeText: resume?.extractedText,
 69:           companyResearch
 70:         })
 71:       })
 72: 
 73:       if (response.ok) {
 74:         const data = await response.json()
 75:         setPrep(data.prep)
 76:         console.log('[INTERVIEW_PREP] ✅ Generated prep with', data.prep.questions.length, 'questions')
 77:       } else {
 78:         console.error('[INTERVIEW_PREP] Failed to generate prep')
 79:       }
 80:     } catch (error) {
 81:       console.error('[INTERVIEW_PREP] Error:', error)
 82:     } finally {
 83:       setGenerating(false)
 84:     }
 85:   }
 86: 
 87:   const downloadPDF = () => {
 88:     // TODO: Implement PDF generation
 89:     console.log('[INTERVIEW_PREP] PDF download requested')
 90:   }
 91: 
 92:   if (loading) {
 93:     return (
 94:       <div className="min-h-screen bg-background flex items-center justify-center">
 95:         <Loader2 className="w-8 h-8 animate-spin text-primary" />
 96:       </div>
 97:     )
 98:   }
 99: 
100:   return (
101:     <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
102:       {/* Header */}
103:       <div className="gradient-hero p-8 rounded-b-3xl shadow-2xl mb-8">
104:         <div className="max-w-4xl mx-auto">
105:           <div className="mb-4">
106:             <CareerFinderBackButton />
107:           </div>
108:           <h1 className="text-4xl font-bold text-foreground text-center mb-3">🎯 Interview Prep</h1>
109:           <p className="text-foreground/90 text-center text-lg">
110:             AI-powered interview preparation for your applications
111:           </p>
112:         </div>
113:       </div>
114: 
115:       <div className="max-w-6xl mx-auto px-4">
116:         {applications.length === 0 ? (
117:           <div className="text-center py-12">
118:             <div className="text-6xl mb-4">📝</div>
119:             <h3 className="text-2xl font-bold mb-2">No Applications Yet</h3>
120:             <p className="text-muted-foreground mb-6">
121:               Apply to jobs first to generate interview prep
122:             </p>
123:             <button
124:               onClick={() => router.push('/career-finder/search')}
125:               className="btn-primary"
126:             >
127:               Find Jobs
128:             </button>
129:           </div>
130:         ) : (
131:           <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
132:             {/* Left: Application Selection */}
133:             <div className="lg:col-span-1">
134:               <div className="gradient-border-card">
135:                 <h3 className="text-xl font-bold mb-4">Your Applications</h3>
136:                 <div className="space-y-3">
137:                   {applications.map((app) => (
138:                     <div
139:                       key={app.id}
140:                       onClick={() => setSelectedApp(app)}
141:                       className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
142:                         selectedApp?.id === app.id
143:                           ? 'border-blue-500 bg-blue-50'
144:                           : 'border-border hover:border-blue-300'
145:                       }`}
146:                     >
147:                       <h4 className="font-bold text-foreground">{app.jobTitle}</h4>
148:                       <p className="text-sm text-muted-foreground">{app.company}</p>
149:                       <div className="flex items-center gap-2 mt-2">
150:                         <span className={`text-xs px-2 py-1 rounded-full ${
151:                           app.status === 'applied' ? 'bg-green-100 text-green-700' :
152:                           app.status === 'interview_scheduled' ? 'bg-blue-100 text-blue-700' :
153:                           'bg-gray-100 text-gray-700'
154:                         }`}>
155:                           {app.status.replace('_', ' ')}
156:                         </span>
157:                         {app.hasInterviewPrep && (
158:                           <span className="text-xs text-green-600">✓ Prep Ready</span>
159:                         )}
160:                       </div>
161:                     </div>
162:                   ))}
163:                 </div>
164:               </div>
165:             </div>
166: 
167:             {/* Right: Interview Prep Content */}
168:             <div className="lg:col-span-2">
169:               {!selectedApp ? (
170:                 <div className="gradient-border-card text-center py-12">
171:                   <Lightbulb className="w-16 h-16 mx-auto text-yellow-500 mb-4" />
172:                   <h1 className="text-2xl sm:text-3xl font-bold mb-2">Interview Preparation</h1>
173:                   <p className="text-muted-foreground">
174:                     Choose an application from the left to generate interview prep
175:                   </p>
176:                 </div>
177:               ) : !prep ? (
178:                 <div className="gradient-border-card text-center py-12">
179:                   <MessageSquare className="w-16 h-16 mx-auto text-blue-500 mb-4" />
180:                   <h3 className="text-xl font-bold mb-2">Generate Interview Prep</h3>
181:                   <p className="text-muted-foreground mb-6">
182:                     AI will create tailored interview questions and insights for<br />
183:                     <strong>{selectedApp.jobTitle}</strong> at <strong>{selectedApp.company}</strong>
184:                   </p>
185:                   <button
186:                     onClick={generatePrep}
187:                     disabled={generating}
188:                     className="btn-primary"
189:                   >
190:                     {generating ? (
191:                       <>
192:                         <Loader2 className="w-5 h-5 animate-spin mr-2" />
193:                         Generating...
194:                       </>
195:                     ) : (
196:                       <>
197:                         <Target className="w-5 h-5 mr-2" />
198:                         Generate Prep
199:                       </>
200:                     )}
201:                   </button>
202:                 </div>
203:               ) : (
204:                 <div className="space-y-6">
205:                   {/* Header */}
206:                   <div className="gradient-border-card">
207:                     <div className="flex items-center justify-between mb-4">
208:                       <div>
209:                         <h2 className="text-2xl font-bold">{prep.jobTitle}</h2>
210:                         <p className="text-muted-foreground">{prep.company}</p>
211:                       </div>
212:                       <button onClick={downloadPDF} className="btn-secondary">
213:                         <Download className="w-4 h-4 mr-2" />
214:                         Download PDF
215:                       </button>
216:                     </div>
217:                   </div>
218: 
219:                   {/* Company Insights */}
220:                   <div className="gradient-border-card">
221:                     <h3 className="text-xl font-bold mb-3 flex items-center gap-2">
222:                       <Lightbulb className="w-5 h-5 text-yellow-500" />
223:                       Company Insights
224:                     </h3>
225:                     <p className="text-foreground whitespace-pre-wrap">{prep.companyInsights}</p>
226:                   </div>
227: 
228:                   {/* Interview Questions */}
229:                   <div className="gradient-border-card">
230:                     <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
231:                       <MessageSquare className="w-5 h-5 text-blue-500" />
232:                       Interview Questions ({prep.questions.length})
233:                     </h3>
234:                     <div className="space-y-4">
235:                       {prep.questions.map((question, i) => (
236:                         <div key={i} className="p-4 bg-muted/50 rounded-lg">
237:                           <div className="flex items-start gap-3">
238:                             <span className="flex-shrink-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold">
239:                               {i + 1}
240:                             </span>
241:                             <p className="flex-1 text-foreground pt-1">{question}</p>
242:                           </div>
243:                         </div>
244:                       ))}
245:                     </div>
246:                   </div>
247: 
248:                   {/* Talking Points */}
249:                   <div className="gradient-border-card">
250:                     <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
251:                       <Target className="w-5 h-5 text-green-500" />
252:                       Key Talking Points
253:                     </h3>
254:                     <ul className="space-y-2">
255:                       {prep.talkingPoints.map((point, i) => (
256:                         <li key={i} className="flex items-start gap-2">
257:                           <span className="text-green-500 mt-1">✓</span>
258:                           <span className="text-foreground">{point}</span>
259:                         </li>
260:                       ))}
261:                     </ul>
262:                   </div>
263: 
264:                   {/* Actions */}
265:                   <div className="flex gap-4">
266:                     <button onClick={generatePrep} className="btn-secondary flex-1">
267:                       🔄 Regenerate
268:                     </button>
269:                     <button
270:                       onClick={() => router.push('/career-finder/salary-negotiation')}
271:                       className="btn-primary flex-1"
272:                     >
273:                       Next: Salary Negotiation →
274:                     </button>
275:                   </div>
276:                 </div>
277:               )}
278:             </div>
279:           </div>
280:         )}
281:       </div>
282:     </div>
283:   )
284: }
</file>

<file path="src/app/career-finder/job-analysis/page.tsx">
  1: /**
  2:  * Job Analysis Page
  3:  * Auto-analyzes selected job and compares with user's resume
  4:  */
  5: 
  6: 'use client'
  7: 
  8: import { useState, useEffect } from 'react'
  9: import { useRouter } from 'next/navigation'
 10: import { Briefcase, MapPin, DollarSign, Target, CheckCircle2, AlertCircle, FileText, ExternalLink } from 'lucide-react'
 11: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
 12: import CareerFinderStorage from '@/lib/career-finder-storage'
 13: import { normalizeSalary, getSalaryDisplayString } from '@/lib/utils/salary-normalizer'
 14: import { CompanyResearchResult } from '@/lib/company-research-types'
 15: 
 16: interface JobData {
 17:   id?: string
 18:   title: string
 19:   company: string
 20:   location: string
 21:   salary?: string
 22:   description?: string
 23:   summary?: string
 24:   url?: string
 25:   source?: string
 26:   skills?: string[]
 27: }
 28: 
 29: interface AnalysisResult {
 30:   matchScore?: number // Optional - undefined when no resume
 31:   matchingSkills: string[]
 32:   missingSkills: string[] // Required from Perplexity
 33:   skillsToHighlight?: string[] // May be present in comprehensive research
 34:   recommendations: string[]
 35:   estimatedFit: 'excellent' | 'good' | 'fair' | 'poor' | string // Allow any string from Perplexity
 36: }
 37: 
 38: export default function JobAnalysisPage() {
 39:   const router = useRouter()
 40:   const [job, setJob] = useState<JobData | null>(null)
 41:   const [analysis, setAnalysis] = useState<AnalysisResult | null>(null)
 42:   const [companyResearch, setCompanyResearch] = useState<CompanyResearchResult | null>(null)
 43:   const [loadingResearch, setLoadingResearch] = useState(false)
 44:   const [loading, setLoading] = useState(true)
 45:   const [error, setError] = useState<string | null>(null)
 46:   const [canProceed, setCanProceed] = useState(false) // ENTERPRISE: Prevent accidental skip
 47:   const [hasRedirected, setHasRedirected] = useState(false) // 🔒 Prevent infinite redirect loop
 48: 
 49:   useEffect(() => {
 50:     // 🔒 CRITICAL: Only run once on mount, prevent redirect loop
 51:     if (hasRedirected) return
 52:     
 53:     // ✅ FIX #10: Validate job data exists
 54:     const validateJobData = () => {
 55:       const storedJob = localStorage.getItem('cf:selectedJob')
 56:       if (!storedJob) {
 57:         console.error('[JOB_ANALYSIS] ❌ No job data found')
 58:         setError('No job selected. Please select a job from the search page.')
 59:         setLoading(false)
 60:         return false
 61:       }
 62:       
 63:       try {
 64:         const parsed = JSON.parse(storedJob)
 65:         if (!parsed.title || !parsed.company) {
 66:           console.error('[JOB_ANALYSIS] ❌ Invalid job data:', parsed)
 67:           setError('Invalid job data. Please select a job again.')
 68:           setLoading(false)
 69:           return false
 70:         }
 71:         return true
 72:       } catch (e) {
 73:         console.error('[JOB_ANALYSIS] ❌ Failed to parse job data:', e)
 74:         setError('Corrupted job data. Please select a job again.')
 75:         setLoading(false)
 76:         return false
 77:       }
 78:     }
 79:     
 80:     if (!validateJobData()) {
 81:       return
 82:     }
 83:     console.log('🎯 [JOB_ANALYSIS] Page mounted - starting analysis flow')
 84:     loadAndAnalyzeJob()
 85:   }, [])
 86: 
 87:   const loadAndAnalyzeJob = async () => {
 88:     try {
 89:       // DEBUG: Check what's in localStorage
 90:       const rawJob = localStorage.getItem('cf:selectedJob')
 91:       console.log('🎯 [JOB_ANALYSIS] Raw localStorage check:', rawJob ? `Found (${rawJob.length} chars)` : 'NOT FOUND')
 92:       
 93:       // ✅ CRITICAL FIX: Use unified storage
 94:       const jobData = CareerFinderStorage.getJob()
 95:       
 96:       if (!jobData) {
 97:         console.error('🎯 [JOB_ANALYSIS] ❌ No job found - redirecting to search')
 98:         console.error('🎯 [JOB_ANALYSIS] localStorage keys:', Object.keys(localStorage))
 99:         setHasRedirected(true) // 🔒 Mark as redirected to prevent loop
100:         setLoading(false)
101:         setTimeout(() => router.push('/career-finder/search'), 100) // Small delay to ensure state is set
102:         return
103:       }
104: 
105:       console.log('🎯 [JOB_ANALYSIS] ✅ Job loaded:', jobData.title, '@', jobData.company)
106:       setJob(jobData)
107: 
108:       // Auto-analyze immediately
109:       console.log('🎯 [JOB_ANALYSIS] Starting job analysis...')
110:       await analyzeJob(jobData)
111:     } catch (err) {
112:       console.error('🎯 [JOB_ANALYSIS] ❌ Failed to load job:', err)
113:       setError('Failed to load job data')
114:       setLoading(false)
115:     }
116:   }
117: 
118:   const analyzeJob = async (jobData: JobData) => {
119:     // ✅ CRITICAL FIX: Use unified storage for resume
120:     const resumeData = CareerFinderStorage.getResume()
121:     const resumeText = resumeData?.extractedText || ''
122: 
123:     try {
124:       // 🚀 OPTIMIZATION: Check for cached comprehensive research first
125:       const cachedResearch = CareerFinderStorage.getCompanyResearch()
126:       
127:       if (cachedResearch?.jobAnalysis) {
128:         console.log('🎯 [JOB_ANALYSIS] ✅ Using cached comprehensive research (cost savings!):', {
129:           matchScore: cachedResearch.jobAnalysis.matchScore,
130:           matchingSkills: cachedResearch.jobAnalysis.matchingSkills?.length,
131:           age: Date.now() - (cachedResearch.timestamp || 0)
132:         })
133:         
134:         // Use cached analysis - ensure proper type compatibility
135:         const typedAnalysis: AnalysisResult = {
136:           matchScore: cachedResearch.jobAnalysis.matchScore,
137:           matchingSkills: cachedResearch.jobAnalysis.matchingSkills || [],
138:           missingSkills: cachedResearch.jobAnalysis.missingSkills || [],
139:           skillsToHighlight: cachedResearch.jobAnalysis.skillsToHighlight,
140:           recommendations: cachedResearch.jobAnalysis.recommendations || [],
141:           estimatedFit: cachedResearch.jobAnalysis.estimatedFit || 'good'
142:         }
143:         
144:         setAnalysis(typedAnalysis)
145:         CareerFinderStorage.setJobAnalysis(typedAnalysis)
146:         
147:         // Also set company research
148:         setCompanyResearch(cachedResearch)
149:         setLoadingResearch(false)
150:         
151:         console.log('🎯 [JOB_ANALYSIS] ✅ All data loaded from cache - NO API CALLS NEEDED!')
152:       } else {
153:         // Fallback to individual API call if cache miss
154:         console.log('🎯 [JOB_ANALYSIS] ⚠️ No cached research, calling individual API...')
155:         
156:         // CRITICAL FIX: Send data in format API expects
157:         const response = await fetch('/api/jobs/analyze', {
158:           method: 'POST',
159:           headers: { 'Content-Type': 'application/json' },
160:           body: JSON.stringify({
161:             jobTitle: jobData.title,
162:             company: jobData.company,
163:             jobDescription: jobData.description || jobData.summary || '',
164:             resumeText: resumeText || '',
165:             skills: Array.isArray(jobData.skills) ? jobData.skills : []
166:           })
167:         })
168: 
169:         if (!response.ok) {
170:           const errorData = await response.json().catch(() => ({}))
171:           throw new Error(errorData.error || 'Analysis failed')
172:         }
173: 
174:         const result = await response.json()
175:         console.log('🎯 [JOB_ANALYSIS] Received analysis:', { hasMatchScore: !!result.matchScore, matchingSkills: result.matchingSkills?.length, recommendations: result.recommendations?.length })
176:         // CRITICAL FIX: API returns data directly, not nested under "analysis"
177:         setAnalysis(result)
178:         
179:         // ✅ CRITICAL FIX: Store analysis using unified storage
180:         CareerFinderStorage.setJobAnalysis(result)
181:       }
182:       
183:       if (!resumeData) {
184:         console.log('📋 Browsing job without resume - match score disabled')
185:       }
186:     } catch (err) {
187:       console.error('🎯 [JOB_ANALYSIS] ❌ Analysis failed:', err)
188:       // Provide fallback analysis (without match score if no resume)
189:       setAnalysis({
190:         matchScore: resumeData ? 75 : undefined,
191:         matchingSkills: resumeData ? (jobData.skills?.slice(0, 5) || ['JavaScript', 'React', 'Node.js']) : [],
192:         missingSkills: resumeData ? ['Docker', 'Kubernetes'] : [],
193:         recommendations: resumeData ? [
194:           'Highlight your experience with similar technologies',
195:           'Emphasize transferable skills',
196:           'Show enthusiasm for learning new tools'
197:         ] : [],
198:         estimatedFit: 'good'
199:       })
200:     } finally {
201:       console.log('🎯 [JOB_ANALYSIS] Setting loading to FALSE')
202:       setLoading(false)
203:       setCanProceed(true)
204:       
205:       // ENTERPRISE ENHANCEMENT: Auto-fetch company research in parallel
206:       if (jobData.company) {
207:         fetchCompanyResearch(jobData.company, jobData.title, jobData.location)
208:       }
209:       
210:       console.log('🎯 [JOB_ANALYSIS] Analysis complete - user can now proceed')
211:     }
212:   }
213: 
214:   const fetchCompanyResearch = async (companyName: string, jobTitle: string, location: string) => {
215:     // 🚀 OPTIMIZATION: Check if we already have cached comprehensive research
216:     const cachedResearch = CareerFinderStorage.getCompanyResearch()
217:     
218:     if (cachedResearch && cachedResearch.timestamp) {
219:       const age = Date.now() - cachedResearch.timestamp
220:       const FIVE_MINUTES = 5 * 60 * 1000
221:       
222:       if (age < FIVE_MINUTES) {
223:         console.log('[COMPANY_RESEARCH] ✅ Using cached data (age:', Math.round(age / 1000), 'seconds) - NO API CALL!')
224:         setCompanyResearch(cachedResearch)
225:         setLoadingResearch(false)
226:         return
227:       } else {
228:         console.log('[COMPANY_RESEARCH] ⚠️ Cache expired, refetching...')
229:       }
230:     }
231:     
232:     setLoadingResearch(true)
233:     try {
234:       console.log('[COMPANY_RESEARCH] Fetching for:', companyName)
235:       const response = await fetch('/api/v2/company/deep-research', {
236:         method: 'POST',
237:         headers: { 'Content-Type': 'application/json' },
238:         body: JSON.stringify({
239:           companyName,
240:           position: jobTitle,
241:           location
242:         })
243:       })
244: 
245:       if (!response.ok) {
246:         console.warn('[COMPANY_RESEARCH] API returned:', response.status)
247:         return
248:       }
249: 
250:       const data = await response.json()
251:       console.log('[COMPANY_RESEARCH] Received data:', data)
252:       
253:       if (data.success) {
254:         // CRITICAL FIX: Ensure hiringContacts is always an array (never undefined)
255:         const contacts = data.contacts?.data || data.hiringContacts || data.contacts || []
256:         const safeContacts = Array.isArray(contacts) ? contacts : []
257:         
258:         const researchData: Partial<CompanyResearchResult> = {
259:           company: companyName,
260:           description: data.company?.description || '',
261:           aiRiskAnalysis: data.aiRiskAnalysis,
262:           marketIntelligence: data.marketIntelligence,
263:           hiringContacts: safeContacts,
264:           salaryIntelligence: data.salaryIntelligence,
265:           financials: [],
266:           culture: [],
267:           salaries: [],
268:           contacts: [],
269:           sources: [],
270:           confidence: 0.8,
271:           recentNews: [],
272:           reviews: []
273:         }
274:         
275:         setCompanyResearch(researchData as CompanyResearchResult)
276:         
277:         // ✅ CRITICAL FIX: Store company research using unified storage
278:         CareerFinderStorage.setCompanyResearch(researchData as CompanyResearchResult)
279:       }
280:     } catch (err) {
281:       console.error('[COMPANY_RESEARCH] Error:', err)
282:     } finally {
283:       setLoadingResearch(false)
284:     }
285:   }
286: 
287:   const handleResearchCompany = () => {
288:     if (!job) return
289:     
290:     // ✅ Use unified storage - already stored by loadAndAnalyzeJob
291:     router.push('/career-finder/company')
292:   }
293: 
294:   /**
295:    * Extract clean domain from company website URL
296:    * CRITICAL for email inference and contact discovery
297:    * 
298:    * Used for:
299:    * - Email pattern inference (firstname@company.com)
300:    * - Contact discovery when LinkedIn fails
301:    * - Company research and verification
302:    * - Validating company legitimacy
303:    * 
304:    * @example
305:    * extractWebsite('https://www.shopify.com/careers') → 'shopify.com'
306:    * extractWebsite('http://google.com/jobs') → 'google.com'
307:    */
308:   const extractWebsite = (url: string): string => {
309:     try {
310:       const urlObj = new URL(url.startsWith('http') ? url : `https://${url}`)
311:       return urlObj.hostname.replace(/^www\./, '')
312:     } catch {
313:       // Fallback to regex if URL parsing fails
314:       const match = url.match(/^(?:https?:\/\/)?(?:www\.)?([^\/]+)/)
315:       return match ? match[1] : url
316:     }
317:   }
318: 
319:   if (loading) {
320:     return (
321:       <div className="container mx-auto px-6 py-8">
322:         <div className="flex items-center justify-center min-h-[400px]">
323:           <div className="text-center">
324:             <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
325:             <p className="text-muted-foreground">Analyzing job match...</p>
326:           </div>
327:         </div>
328:       </div>
329:     )
330:   }
331: 
332:   if (error || !job) {
333:     // 🔒 CRITICAL: Show error screen without redirecting (prevents loop)
334:     return (
335:       <div className="container mx-auto px-6 py-8">
336:         <CareerFinderBackButton />
337:         <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-6 text-center max-w-md mx-auto">
338:           <AlertCircle className="w-12 h-12 text-destructive mx-auto mb-4" />
339:           <h2 className="text-xl font-bold text-foreground mb-2">Job Not Found</h2>
340:           <p className="text-muted-foreground mb-6">
341:             {error || 'The job you selected couldn\'t be loaded. Please select a job from the search results.'}
342:           </p>
343:           <button
344:             onClick={() => {
345:               // Clear any cached data that might be stale
346:               CareerFinderStorage.clearJob()
347:               router.push('/career-finder/search')
348:             }}
349:             className="px-6 py-2 bg-primary text-primary-foreground rounded-lg hover:opacity-90 transition-opacity"
350:           >
351:             Back to Job Search
352:           </button>
353:         </div>
354:       </div>
355:     )
356:   }
357: 
358:   const fitColor = {
359:     excellent: 'text-green-500',
360:     good: 'text-blue-500',
361:     fair: 'text-yellow-500',
362:     poor: 'text-red-500'
363:   }[analysis?.estimatedFit || 'fair']
364: 
365:   return (
366:     <div className="container mx-auto px-6 py-8 max-w-4xl">
367:       <CareerFinderBackButton label="Back to Search" />
368: 
369:       {/* Job Header */}
370:       <div className="bg-card border border-border rounded-xl p-6 mb-6">
371:         <div className="flex items-start justify-between mb-4">
372:           <div>
373:             <h1 className="text-3xl font-bold text-foreground mb-2">{job.title}</h1>
374:             <p className="text-xl text-muted-foreground">{job.company}</p>
375:           </div>
376:           {analysis && (
377:             <div className="text-right">
378:               <div className="text-4xl font-bold text-primary">{analysis.matchScore}%</div>
379:               <div className={`text-sm font-medium ${fitColor}`}>
380:                 {analysis.estimatedFit.toUpperCase()} FIT
381:               </div>
382:             </div>
383:           )}
384:         </div>
385: 
386:         <div className="flex flex-wrap gap-4 text-sm text-muted-foreground">
387:           <div className="flex items-center gap-2">
388:             <MapPin className="w-4 h-4" />
389:             <span>{job.location}</span>
390:           </div>
391:           {job.salary && (
392:             <div className="flex items-center gap-2">
393:               <DollarSign className="w-4 h-4" />
394:               <span>{getSalaryDisplayString(normalizeSalary(job.salary))}</span>
395:             </div>
396:           )}
397:           {job.source && (
398:             <div className="flex items-center gap-2">
399:               <Briefcase className="w-4 h-4" />
400:               <span>{job.source}</span>
401:             </div>
402:           )}
403:         </div>
404:       </div>
405: 
406:       {/* Full Job Description - Like Indeed */}
407:       {(job.description || job.summary) && (
408:         <div className="bg-card border border-border rounded-xl p-6 mb-6">
409:           <div className="flex items-center gap-2 mb-4">
410:             <FileText className="w-6 h-6 text-primary" />
411:             <h2 className="text-xl font-bold text-foreground">Job Description</h2>
412:           </div>
413:           <div className="prose prose-sm max-w-none text-foreground">
414:             <div className="whitespace-pre-wrap leading-relaxed">
415:               {job.description || job.summary}
416:             </div>
417:           </div>
418:           {job.url && (
419:             <div className="mt-4 pt-4 border-t border-border">
420:               <a
421:                 href={job.url}
422:                 target="_blank"
423:                 rel="noopener noreferrer"
424:                 className="inline-flex items-center gap-2 text-primary hover:underline"
425:               >
426:                 <ExternalLink className="w-4 h-4" />
427:                 View Original Job Posting
428:               </a>
429:             </div>
430:           )}
431:         </div>
432:       )}
433: 
434:       {/* No Resume Message */}
435:       {!analysis && !loading && (
436:         <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-xl p-6 mb-6">
437:           <div className="flex items-start gap-3">
438:             <svg className="w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
439:               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
440:             </svg>
441:             <div>
442:               <h4 className="font-semibold text-yellow-800 dark:text-yellow-200">Skills Analysis Unavailable</h4>
443:               <p className="text-sm text-yellow-700 dark:text-yellow-300 mt-1">
444:                 Upload a resume to see detailed skills matching and personalized recommendations for this job.
445:               </p>
446:             </div>
447:           </div>
448:         </div>
449:       )}
450:       
451:       {/* Analysis Results */}
452:       {analysis && (
453:         <div className="space-y-6">
454:           {/* Matching Skills */}
455:           <div className="bg-card border border-border rounded-xl p-6">
456:             <div className="flex items-center gap-2 mb-4">
457:               <CheckCircle2 className="w-6 h-6 text-green-500" />
458:               <h2 className="text-xl font-bold text-foreground">Matching Skills</h2>
459:             </div>
460:             <div className="flex flex-wrap gap-2">
461:               {analysis.matchingSkills.map((skill, index) => (
462:                 <span
463:                   key={index}
464:                   className="px-3 py-1 bg-green-500/10 text-green-500 rounded-full text-sm font-medium"
465:                 >
466:                   ✓ {skill}
467:                 </span>
468:               ))}
469:             </div>
470:           </div>
471: 
472:           {/* Missing Skills */}
473:           {analysis.missingSkills.length > 0 && (
474:             <div className="bg-card border border-border rounded-xl p-6">
475:               <div className="flex items-center gap-2 mb-4">
476:                 <Target className="w-6 h-6 text-yellow-500" />
477:                 <h2 className="text-xl font-bold text-foreground">Skills to Highlight</h2>
478:               </div>
479:               <div className="flex flex-wrap gap-2">
480:                 {analysis.missingSkills.map((skill, index) => (
481:                   <span
482:                     key={index}
483:                     className="px-3 py-1 bg-yellow-500/10 text-yellow-500 rounded-full text-sm font-medium"
484:                   >
485:                     → {skill}
486:                   </span>
487:                 ))}
488:               </div>
489:             </div>
490:           )}
491: 
492:           {/* Recommendations */}
493:           <div className="bg-card border border-border rounded-xl p-6">
494:             <h2 className="text-xl font-bold text-foreground mb-4">Recommendations</h2>
495:             <ul className="space-y-2">
496:               {analysis.recommendations.map((rec, index) => (
497:                 <li key={index} className="flex items-start gap-2 text-foreground">
498:                   <span className="text-primary mt-1">•</span>
499:                   <span>{rec}</span>
500:                 </li>
501:               ))}
502:             </ul>
503:           </div>
504:         </div>
505:       )}
506: 
507:       {/* ENTERPRISE ENHANCEMENT: Rich Company Research Display */}
508:       {loadingResearch && (
509:         <div className="mt-6 bg-card border border-border rounded-xl p-6 animate-pulse">
510:           <div className="flex items-center gap-3">
511:             <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
512:             <p className="text-muted-foreground">Loading company intelligence...</p>
513:           </div>
514:         </div>
515:       )}
516: 
517:       {companyResearch && !loadingResearch && (
518:         <div className="mt-6 space-y-6">
519:           <h2 className="text-2xl font-bold text-foreground">🏢 Company Intelligence</h2>
520: 
521:           {/* AI Risk Analysis */}
522:           {companyResearch.aiRiskAnalysis && (
523:             <div className="bg-gradient-to-br from-purple-500/10 to-blue-500/10 border border-purple-500/20 rounded-xl p-6">
524:               <h3 className="text-lg font-bold text-foreground mb-3">🤖 AI & Automation Risk</h3>
525:               <div className="grid grid-cols-2 gap-4 mb-4">
526:                 <div>
527:                   <p className="text-sm text-muted-foreground">Automation Probability</p>
528:                   <p className="text-2xl font-bold text-foreground">{companyResearch.aiRiskAnalysis.automationProbability}</p>
529:                 </div>
530:                 <div>
531:                   <p className="text-sm text-muted-foreground">Role Risk</p>
532:                   <p className={`text-lg font-bold ${
533:                     companyResearch.aiRiskAnalysis.roleRisk?.toLowerCase().includes('low') ? 'text-green-500' :
534:                     companyResearch.aiRiskAnalysis.roleRisk?.toLowerCase().includes('medium') ? 'text-yellow-500' : 'text-red-500'
535:                   }`}>{companyResearch.aiRiskAnalysis.roleRisk}</p>
536:                 </div>
537:               </div>
538:               <p className="text-sm text-foreground"><strong>Future Outlook:</strong> {companyResearch.aiRiskAnalysis.futureOutlook}</p>
539:               <p className="text-sm text-foreground mt-2"><strong>AI Adoption:</strong> {companyResearch.aiRiskAnalysis.companyAIAdoption}</p>
540:             </div>
541:           )}
542: 
543:           {/* Market Intelligence */}
544:           {companyResearch.marketIntelligence && (
545:             <div className="bg-card border border-border rounded-xl p-6">
546:               <h3 className="text-lg font-bold text-foreground mb-3">📊 Market Intelligence</h3>
547:               {typeof companyResearch.marketIntelligence === 'string' ? (
548:                 <p className="text-sm text-foreground leading-relaxed">{companyResearch.marketIntelligence}</p>
549:               ) : (
550:                 <>
551:                   {companyResearch.marketIntelligence.competitivePosition && (
552:                     <p className="text-sm text-foreground mb-3">{companyResearch.marketIntelligence.competitivePosition}</p>
553:                   )}
554:                   {companyResearch.marketIntelligence.industryTrends && Array.isArray(companyResearch.marketIntelligence.industryTrends) && companyResearch.marketIntelligence.industryTrends.length > 0 && (
555:                     <div className="mb-3">
556:                       <p className="text-sm font-semibold text-muted-foreground mb-2">Industry Trends:</p>
557:                       <ul className="space-y-1">
558:                         {companyResearch.marketIntelligence.industryTrends.map((trend, idx) => (
559:                           <li key={idx} className="text-sm text-foreground flex items-start gap-2">
560:                             <span className="text-primary mt-1">▸</span>
561:                             <span>{trend}</span>
562:                           </li>
563:                         ))}
564:                       </ul>
565:                     </div>
566:                   )}
567:                   {companyResearch.marketIntelligence.recentNews && Array.isArray(companyResearch.marketIntelligence.recentNews) && companyResearch.marketIntelligence.recentNews.length > 0 && (
568:                     <div>
569:                       <p className="text-sm font-semibold text-muted-foreground mb-2">Recent News:</p>
570:                       <ul className="space-y-1">
571:                         {companyResearch.marketIntelligence.recentNews.slice(0, 3).map((news, idx) => (
572:                           <li key={idx} className="text-sm text-foreground flex items-start gap-2">
573:                             <span className="text-primary mt-1">•</span>
574:                             <span>{news}</span>
575:                           </li>
576:                         ))}
577:                       </ul>
578:                     </div>
579:                   )}
580:                 </>
581:               )}
582:             </div>
583:           )}
584: 
585:           {/* Hiring Contacts */}
586:           {companyResearch.hiringContacts && companyResearch.hiringContacts.length > 0 && (
587:             <div className="bg-gradient-to-br from-green-500/10 to-teal-500/10 border border-green-500/20 rounded-xl p-6">
588:               <h3 className="text-lg font-bold text-foreground mb-3">👥 Hiring Contacts ({companyResearch.hiringContacts.length})</h3>
589:               <div className="space-y-3">
590:                 {companyResearch.hiringContacts.slice(0, 5).map((contact, idx) => (
591:                   <div key={idx} className="flex items-start gap-3 bg-card/50 rounded-lg p-3">
592:                     <div className="w-10 h-10 rounded-full bg-primary flex items-center justify-center text-white font-bold">
593:                       {contact.name.charAt(0)}
594:                     </div>
595:                     <div className="flex-1">
596:                       <p className="font-semibold text-foreground">{contact.name}</p>
597:                       <p className="text-sm text-muted-foreground">{contact.title}</p>
598:                       {contact.email && (
599:                         <a href={`mailto:${contact.email}`} className="text-xs text-primary hover:underline">
600:                           {contact.email}
601:                         </a>
602:                       )}
603:                       {contact.linkedinUrl && (
604:                         <a href={contact.linkedinUrl} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-500 hover:underline ml-2">
605:                           LinkedIn
606:                         </a>
607:                       )}
608:                     </div>
609:                     <div className="text-xs text-muted-foreground">
610:                       {contact.confidence ? Math.round(contact.confidence * 100) : 0}% match
611:                     </div>
612:                   </div>
613:                 ))}
614:               </div>
615:             </div>
616:           )}
617: 
618:           {/* Salary Intelligence */}
619:           {companyResearch.salaryIntelligence && (
620:             <div className="bg-card border border-border rounded-xl p-6">
621:               <h3 className="text-lg font-bold text-foreground mb-3">💰 Salary Intelligence</h3>
622:               <p className="text-sm text-foreground mb-2"><strong>Expected Range:</strong> {companyResearch.salaryIntelligence.salaryRange}</p>
623:               {companyResearch.salaryIntelligence.benefits && (
624:                 <p className="text-sm text-foreground"><strong>Benefits:</strong> {companyResearch.salaryIntelligence.benefits}</p>
625:               )}
626:               {companyResearch.salaryIntelligence.notes && (
627:                 <p className="text-sm text-muted-foreground mt-2">{companyResearch.salaryIntelligence.notes}</p>
628:               )}
629:             </div>
630:           )}
631: 
632:           {/* Company Culture */}
633:           {companyResearch.culture && companyResearch.culture.length > 0 && (
634:             <div className="bg-card border border-border rounded-xl p-6">
635:               <h3 className="text-lg font-bold text-foreground mb-3">🌟 Company Culture</h3>
636:               <div className="space-y-2">
637:                 {companyResearch.culture.map((point, idx) => (
638:                   <div key={idx} className="flex items-start gap-2">
639:                     <span className="text-primary mt-1">•</span>
640:                     <p className="text-sm text-foreground">{point.point}</p>
641:                   </div>
642:                 ))}
643:               </div>
644:             </div>
645:           )}
646:         </div>
647:       )}
648: 
649:       {/* 📰 Recent News with Clickable Links */}
650:       {companyResearch?.news && companyResearch.news.length > 0 && (
651:         <div className="mt-6 bg-card border border-border rounded-xl p-6">
652:           <h3 className="text-lg font-bold text-foreground mb-4 flex items-center gap-2">
653:             📰 Recent News
654:             <span className="text-sm font-normal text-muted-foreground">({companyResearch.news.length} articles)</span>
655:           </h3>
656:           <div className="space-y-4">
657:             {companyResearch.news.map((article, idx) => (
658:               <div key={idx} className="pb-4 border-b border-border last:border-0 last:pb-0">
659:                 <a 
660:                   href={article.url} 
661:                   target="_blank" 
662:                   rel="noopener noreferrer"
663:                   className="group"
664:                 >
665:                   <div className="flex items-start gap-3">
666:                     <div className="flex-1">
667:                       <h4 className="font-semibold text-foreground group-hover:text-primary transition-colors flex items-center gap-2">
668:                         {article.title}
669:                         <ExternalLink className="w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity" />
670:                       </h4>
671:                       {article.summary && (
672:                         <p className="text-sm text-muted-foreground mt-1 line-clamp-2">{article.summary}</p>
673:                       )}
674:                       <div className="flex items-center gap-3 mt-2 text-xs text-muted-foreground">
675:                         {article.source && <span className="font-medium">{article.source}</span>}
676:                         {article.date && <span>{article.date}</span>}
677:                         {article.impact && (
678:                           <span className={`px-2 py-0.5 rounded-full ${
679:                             article.impact === 'positive' ? 'bg-green-500/20 text-green-600' :
680:                             article.impact === 'negative' ? 'bg-red-500/20 text-red-600' :
681:                             'bg-gray-500/20 text-gray-600'
682:                           }`}>
683:                             {article.impact}
684:                           </span>
685:                         )}
686:                       </div>
687:                     </div>
688:                   </div>
689:                 </a>
690:               </div>
691:             ))}
692:           </div>
693:         </div>
694:       )}
695: 
696:       {/* ⭐ Employee Reviews with Clickable Links */}
697:       {companyResearch?.reviews && companyResearch.reviews.length > 0 && (
698:         <div className="mt-6 bg-card border border-border rounded-xl p-6">
699:           <h3 className="text-lg font-bold text-foreground mb-4 flex items-center gap-2">
700:             ⭐ Employee Reviews
701:             <span className="text-sm font-normal text-muted-foreground">({companyResearch.reviews.length} platforms)</span>
702:           </h3>
703:           <div className="space-y-4">
704:             {companyResearch.reviews.map((review, idx) => (
705:               <div key={idx} className="pb-4 border-b border-border last:border-0 last:pb-0">
706:                 <a 
707:                   href={review.url} 
708:                   target="_blank" 
709:                   rel="noopener noreferrer"
710:                   className="group"
711:                 >
712:                   <div className="flex items-start justify-between gap-3 mb-2">
713:                     <h4 className="font-semibold text-foreground group-hover:text-primary transition-colors flex items-center gap-2">
714:                       {review.platform}
715:                       <ExternalLink className="w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity" />
716:                     </h4>
717:                     {review.rating && (
718:                       <div className="flex items-center gap-1">
719:                         <span className="text-lg font-bold text-foreground">{review.rating}</span>
720:                         <span className="text-yellow-500">★</span>
721:                       </div>
722:                     )}
723:                   </div>
724:                   {review.summary && (
725:                     <p className="text-sm text-muted-foreground mb-3">{review.summary}</p>
726:                   )}
727:                   <div className="grid grid-cols-2 gap-4">
728:                     {review.pros && review.pros.length > 0 && (
729:                       <div>
730:                         <p className="text-xs font-semibold text-green-600 mb-1">👍 Pros</p>
731:                         <ul className="space-y-1">
732:                           {review.pros.map((pro, i) => (
733:                             <li key={i} className="text-xs text-foreground flex items-start gap-1">
734:                               <span className="text-green-500 mt-0.5">•</span>
735:                               <span>{pro}</span>
736:                             </li>
737:                           ))}
738:                         </ul>
739:                       </div>
740:                     )}
741:                     {review.cons && review.cons.length > 0 && (
742:                       <div>
743:                         <p className="text-xs font-semibold text-red-600 mb-1">👎 Cons</p>
744:                         <ul className="space-y-1">
745:                           {review.cons.map((con, i) => (
746:                             <li key={i} className="text-xs text-foreground flex items-start gap-1">
747:                               <span className="text-red-500 mt-0.5">•</span>
748:                               <span>{con}</span>
749:                             </li>
750:                           ))}
751:                         </ul>
752:                       </div>
753:                     )}
754:                   </div>
755:                 </a>
756:               </div>
757:             ))}
758:           </div>
759:         </div>
760:       )}
761: 
762:       {/* Action Buttons */}
763:       <div className="flex gap-4 mt-8">
764:         <button
765:           onClick={handleResearchCompany}
766:           disabled={!canProceed}
767:           className={`flex-1 px-6 py-3 rounded-lg font-medium transition-all ${
768:             canProceed
769:               ? 'bg-primary text-primary-foreground hover:opacity-90 cursor-pointer'
770:               : 'bg-muted text-muted-foreground cursor-not-allowed opacity-60'
771:           }`}
772:           title={!canProceed ? 'Please review the analysis before proceeding' : ''}
773:         >
774:           {canProceed ? 'Research Company →' : 'Analyzing... Please wait'}
775:         </button>
776:       </div>
777:       
778:       {/* User guidance */}
779:       {!canProceed && analysis && (
780:         <div className="mt-4 text-center text-sm text-muted-foreground animate-pulse">
781:           ✨ Review your match analysis above before proceeding
782:         </div>
783:       )}
784:     </div>
785:   )
786: }
</file>

<file path="src/app/career-finder/job/page.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { Button } from '@/components/ui/button'
  5: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
  6: 
  7: export default function CareerFinderJobPage() {
  8:   const [analysis, setAnalysis] = useState<any | null>(null)
  9:   const [loading, setLoading] = useState(true)
 10:   const [compare, setCompare] = useState<{ score:number; matched:string[]; missing:string[]; suggestions?:string[] }|null>(null)
 11: 
 12:   useEffect(() => {
 13:     (async () => {
 14:       setLoading(true)
 15:       try { localStorage.setItem('cf:progress', JSON.stringify({ step: 3, total: 7 })) } catch {}
 16:       try {
 17:         let selected: any = null
 18:         try { selected = JSON.parse(localStorage.getItem('cf:selectedJob') || 'null') } catch {}
 19:         const jd: string = selected?.description || ''
 20:         const jt: string = selected?.title || ''
 21:         const cn: string = selected?.company || ''
 22:         // If description is missing, request server to import by URL best-effort
 23:         const payload = jd && jd.length >= 50 ? { jobDescription: jd, jobTitle: jt, companyName: cn } : { jobDescription: '', jobTitle: jt, companyName: cn, jobUrl: selected?.url }
 24:         const resp = await fetch('/api/job/analyze', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) })
 25:         const j = await resp.json().catch(()=>({}))
 26:         if (resp.ok) {
 27:           setAnalysis(j)
 28:           // Attempt resume comparison automatically
 29:           try {
 30:             let resumeId: string | undefined
 31:             let resumeText: string | undefined
 32:             const rl = await fetch('/api/resume/list')
 33:             if (rl.ok) { const rj = await rl.json(); resumeId = rj.resumes?.[0]?._id; resumeText = rj.resumes?.[0]?.extractedText }
 34:             const cmp = await fetch('/api/job/compare', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobAnalysis: j, resumeId, resumeText }) })
 35:             if (cmp.ok) {
 36:               const cj = await cmp.json(); setCompare({ score: cj.score, matched: cj.matchedKeywords||[], missing: cj.missingKeywords||[], suggestions: cj.suggestions||[] })
 37:             }
 38:           } catch {}
 39:         }
 40:       } catch {}
 41:       setLoading(false)
 42:     })()
 43:   }, [])
 44: 
 45:   return (
 46:     <div className="mobile-container space-y-4">
 47:       <CareerFinderBackButton />
 48:       <div className="text-sm text-foreground">Job analysis auto-runs when you arrive on this page.</div>
 49:       {loading && <div className="text-sm">Analyzing job…</div>}
 50:       {!loading && analysis && (
 51:         <div className="text-sm grid grid-cols-1 md:grid-cols-2 gap-3">
 52:           <div className="border rounded p-3">
 53:             <div className="font-medium mb-1">Job Details</div>
 54:             <div><span className="text-muted-foreground">Title:</span> {analysis?.analysis?.jobTitle || '-'}</div>
 55:             <div><span className="text-muted-foreground">Company:</span> {analysis?.analysis?.companyName || '-'}</div>
 56:             {analysis?.analysis?.salaryRange && <div><span className="text-muted-foreground">Salary Range:</span> {analysis.analysis.salaryRange}</div>}
 57:           </div>
 58:           <div className="border rounded p-3">
 59:             <div className="font-medium mb-1">Keywords Found</div>
 60:             <div className="text-xs text-foreground break-words">{(analysis?.keywords || []).join(', ')}</div>
 61:           </div>
 62:           <div className="border rounded p-3 md:col-span-2">
 63:             <div className="font-medium mb-1">Key Requirements</div>
 64:             <ul className="list-disc ml-5 space-y-1">
 65:               {(analysis?.analysis?.keyRequirements || []).map((k: string, i: number)=>(<li key={i}>{k}</li>))}
 66:             </ul>
 67:           </div>
 68:           <div className="border rounded p-3 md:col-span-2">
 69:             <div className="font-medium mb-1">Responsibilities</div>
 70:             <ul className="list-disc ml-5 space-y-1">
 71:               {(analysis?.analysis?.responsibilities || []).map((k: string, i: number)=>(<li key={i}>{k}</li>))}
 72:             </ul>
 73:           </div>
 74:           {compare && (
 75:             <div className="border rounded p-3 md:col-span-2">
 76:               <div className="font-medium mb-1">Resume Match</div>
 77:               <div className="flex items-center justify-between text-xs"><span>Score</span><span>{compare.score}%</span></div>
 78:               <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
 79:                 <div>
 80:                   <div className="text-xs font-semibold mb-1">Matched</div>
 81:                   <div className="flex flex-wrap gap-1">{compare.matched.slice(0,20).map((kw,i)=>(<span key={i} className="px-2 py-1 border rounded text-[11px]">{kw}</span>))}</div>
 82:                 </div>
 83:                 <div>
 84:                   <div className="text-xs font-semibold mb-1">Missing</div>
 85:                   <div className="flex flex-wrap gap-1">{compare.missing.slice(0,20).map((kw,i)=>(<span key={i} className="px-2 py-1 border rounded text-[11px] opacity-70">{kw}</span>))}</div>
 86:                 </div>
 87:               </div>
 88:               {compare.suggestions && compare.suggestions.length>0 && (
 89:                 <div className="mt-2">
 90:                   <div className="text-xs font-semibold mb-1">What to improve</div>
 91:                   <ul className="list-disc ml-5 text-xs">{compare.suggestions.slice(0,4).map((s,i)=>(<li key={i}>{s}</li>))}</ul>
 92:                 </div>
 93:               )}
 94:             </div>
 95:           )}
 96:         </div>
 97:       )}
 98:       <div className="text-right">
 99:         {analysis?.analysis?.jobTitle ? (
100:           <a className="inline-block px-4 py-2 border rounded" href="/career-finder/company">Next</a>
101:         ) : (
102:           <button className="inline-block px-4 py-2 border rounded opacity-60" disabled>Awaiting job description</button>
103:         )}
104:       </div>
105:     </div>
106:   )
107: }
</file>

<file path="src/app/career-finder/layout.tsx">
 1: import { ReactNode } from 'react'
 2: import { CareerFinderProgress } from '@/components/career-finder/progress'
 3: 
 4: export default function CareerFinderLayout({ children }: { children: ReactNode }) {
 5:   return (
 6:     <div className="mx-auto max-w-5xl px-4 py-6">
 7:       <h1 className="text-2xl font-bold mb-2">Career Finder</h1>
 8:       <CareerFinderProgress />
 9:       {children}
10:     </div>
11:   )
12: }
</file>

<file path="src/app/career-finder/resume/page.tsx">
  1: 'use client'
  2: 
  3: export const dynamic = 'force-dynamic'
  4: 
  5: import { ResumeUpload } from '@/components/resume-upload'
  6: import { useEffect, useState } from 'react'
  7: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
  8: import { formatResumeWithLineBreaks } from '@/lib/text-formatting'
  9: import { AutopilotProgressTracker } from '@/components/autopilot-progress-tracker'
 10: import toast from 'react-hot-toast'
 11: 
 12: interface Resume {
 13:   _id: string
 14:   extractedText: string
 15:   originalFileName?: string
 16: }
 17: 
 18: interface ComprehensiveAnalysis {
 19:   aiRisk?: {
 20:     aiReplacementRisk: string
 21:     reasoning: string
 22:     careerOutlook: string
 23:     fiveYearOutlook?: string
 24:     recommendations?: string[]
 25:   }
 26:   salaryIntelligence?: {
 27:     targetRange?: {
 28:       min?: number
 29:       max?: number
 30:     }
 31:     marketData?: {
 32:       percentile50?: number
 33:     }
 34:   }
 35:   careerPath?: {
 36:     currentLevel?: string
 37:     nextPossibleRoles?: string[]
 38:   }
 39:   [key: string]: unknown
 40: }
 41: 
 42: export default function CareerFinderResumePage() {
 43:   const [existingResume, setExistingResume] = useState<Resume | null>(null)
 44:   const [loadingExisting, setLoadingExisting] = useState<boolean>(true)
 45:   const [comprehensiveAnalysis, setComprehensiveAnalysis] = useState<ComprehensiveAnalysis | null>(null)
 46:   const [analyzingResume, setAnalyzingResume] = useState<boolean>(false)
 47:   
 48:   // COMPETITIVE ADVANTAGE: Comprehensive resume analysis with AI risk
 49:   const handleComprehensiveAnalysis = async (resumeText: string) => {
 50:     if (!resumeText || resumeText.length < 100) {
 51:       console.warn('[COMPREHENSIVE_ANALYSIS] Resume text too short:', resumeText.length)
 52:       return
 53:     }
 54: 
 55:     setAnalyzingResume(true)
 56:     console.log('[COMPREHENSIVE_ANALYSIS] Starting analysis, text length:', resumeText.length)
 57: 
 58:     try {
 59:       const response = await fetch('/api/resume/analyze-comprehensive', {
 60:         method: 'POST',
 61:         headers: { 'Content-Type': 'application/json' },
 62:         body: JSON.stringify({ 
 63:           resumeText, 
 64:           options: { 
 65:             includeAiRisk: true,
 66:             includeMarketData: true,
 67:             includeCareerPath: true
 68:           } 
 69:         })
 70:       })
 71: 
 72:       if (response.ok) {
 73:         const data = await response.json()
 74:         console.log('[COMPREHENSIVE_ANALYSIS] Success:', data)
 75:         setComprehensiveAnalysis(data.analysis)
 76:         
 77:         // Cache the analysis
 78:         try {
 79:           localStorage.setItem('cf:comprehensiveAnalysis', JSON.stringify(data.analysis))
 80:         } catch (e) {
 81:           console.warn('[COMPREHENSIVE_ANALYSIS] Failed to cache:', e)
 82:         }
 83:       } else {
 84:         const error = await response.json()
 85:         console.error('[COMPREHENSIVE_ANALYSIS] API error:', error)
 86:       }
 87:     } catch (error) {
 88:       console.error('[COMPREHENSIVE_ANALYSIS] Request failed:', error)
 89:     } finally {
 90:       setAnalyzingResume(false)
 91:     }
 92:   }
 93: 
 94:   // ENTERPRISE FIX: Auto-load existing resume from localStorage or DB
 95:   useEffect(() => {
 96:     (async () => {
 97:       try { localStorage.setItem('cf:progress', JSON.stringify({ step: 1, total: 7 })) } catch {}
 98:       
 99:       // Step 1: Check localStorage for cached resume
100:       try {
101:         const cachedResume = localStorage.getItem('cf:resume')
102:         if (cachedResume) {
103:           const parsed = JSON.parse(cachedResume)
104:           console.log('[RESUME_PAGE] Found cached resume in localStorage:', parsed?._id || parsed?.originalFileName)
105:           setExistingResume(parsed)
106:           setLoadingExisting(false)
107:           return // Early return if we have a cached resume
108:         }
109:       } catch (e) {
110:         console.warn('[RESUME_PAGE] Failed to load cached resume from localStorage:', e)
111:       }
112: 
113:       // Step 2: Fetch from API if no cache
114:       try {
115:         const r = await fetch('/api/resume/list')
116:         if (r.ok) {
117:           const j = await r.json()
118:           if (Array.isArray(j.resumes) && j.resumes.length > 0) {
119:             const mostRecent = j.resumes[0]
120:             console.log('[RESUME_PAGE] Found DB resume:', mostRecent._id)
121:             setExistingResume(mostRecent)
122:             
123:             // Cache it for future use
124:             try {
125:               localStorage.setItem('cf:resume', JSON.stringify(mostRecent))
126:               localStorage.setItem('cf:autopilotReady', '1')
127:               console.log('[RESUME_PAGE] Resume cached, autopilot will trigger on Continue button')
128:             } catch (cacheError) {
129:               console.warn('[RESUME_PAGE] Failed to cache resume:', cacheError)
130:             }
131:           }
132:         }
133:       } catch (e) {
134:         console.warn('[RESUME_PAGE] Failed to fetch resumes from API:', e)
135:       }
136:       
137:       setLoadingExisting(false)
138:     })()
139:   }, [])
140:   
141:   return (
142:     <div className="min-h-screen bg-background">
143:       {/* PHASE 1: Autopilot Progress Tracker */}
144:       <AutopilotProgressTracker />
145:       
146:       {/* Modern Header */}
147:       <div className="gradient-hero p-8 rounded-b-3xl shadow-2xl mb-8">
148:         <div className="max-w-4xl mx-auto">
149:           <div className="mb-4">
150:             <CareerFinderBackButton />
151:           </div>
152:           <h1 className="text-4xl font-bold text-foreground text-center mb-3">📄 Resume Manager</h1>
153:           <p className="text-foreground/90 text-center text-lg">Upload or build your resume to get started!</p>
154:         </div>
155:       </div>
156: 
157:       <div className="max-w-4xl mx-auto px-4 mt-8">
158:         {/* ENTERPRISE FIX: Show existing resume if available */}
159:         {loadingExisting && (
160:           <div className="text-center py-12">
161:             <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
162:             <p className="mt-4 text-foreground">Loading your resume...</p>
163:           </div>
164:         )}
165: 
166:         {!loadingExisting && existingResume && (
167:           <div className="gradient-border-card mb-8 hover:shadow-2xl hover:shadow-green-500/20 transition-all duration-300">
168:             <div className="flex items-center gap-3 mb-4">
169:               <div className="w-12 h-12 bg-green-500 rounded-2xl flex items-center justify-center">
170:                 <span className="text-2xl">✅</span>
171:               </div>
172:               <div>
173:                 <h3 className="text-2xl font-bold text-foreground">Resume Loaded</h3>
174:                 <p className="text-sm text-muted-foreground">
175:                   {existingResume.originalFileName || 'Your Resume'} • {existingResume.extractedText?.length || 0} chars
176:                 </p>
177:               </div>
178:             </div>
179:             
180:             <div className="bg-muted/50 rounded-lg p-4 mb-4 max-h-[200px] overflow-y-auto">
181:               <p className="text-sm text-foreground whitespace-pre-wrap font-mono">
182:                 {formatResumeWithLineBreaks(existingResume.extractedText || '').slice(0, 500)}
183:                 {existingResume.extractedText?.length > 500 && '...'}
184:               </p>
185:             </div>
186: 
187:             <div className="flex gap-3">
188:               <button
189:                 onClick={async () => {
190:                   if (!existingResume?._id) return
191:                   
192:                   try {
193:                     console.log('[AUTOPILOT] 🚀 Continue button clicked - triggering autopilot...')
194:                     
195:                     // Trigger autopilot
196:                     const autopilotResponse = await fetch('/api/career-finder/autopilot', {
197:                       method: 'POST',
198:                       headers: { 'Content-Type': 'application/json' },
199:                       body: JSON.stringify({ 
200:                         resumeId: existingResume._id
201:                       })
202:                     })
203:                     
204:                     if (autopilotResponse.ok) {
205:                       const autopilotData = await autopilotResponse.json()
206:                       console.log('[AUTOPILOT] ✅ Success:', autopilotData)
207:                       
208:                       // Cache signals
209:                       if (autopilotData.signals) {
210:                         localStorage.setItem('cf:signals', JSON.stringify(autopilotData.signals))
211:                         
212:                         // Cache keywords and location separately
213:                         if (autopilotData.signals.keywords?.length > 0) {
214:                           const topKeywords = autopilotData.signals.keywords.slice(0, 30).join(', ')
215:                           localStorage.setItem('cf:keywords', topKeywords)
216:                           console.log('[AUTOPILOT] ✅ Keywords:', topKeywords)
217:                         }
218:                         
219:                         if (autopilotData.signals.location) {
220:                           localStorage.setItem('cf:location', autopilotData.signals.location)
221:                           console.log('[AUTOPILOT] ✅ Location:', autopilotData.signals.location)
222:                         }
223:                         
224:                         // CRITICAL: Set autopilot ready flag so search page knows to auto-search
225:                         localStorage.setItem('cf:autopilotReady', '1')
226:                         console.log('[AUTOPILOT] ✅ Set autopilotReady flag')
227:                       }
228:                     } else {
229:                       console.error('[AUTOPILOT] ❌ Failed:', await autopilotResponse.text())
230:                     }
231:                   } catch (error) {
232:                     console.error('[AUTOPILOT] ❌ Error:', error)
233:                   }
234:                   
235:                   // Navigate to search regardless of autopilot success (fallback)
236:                   window.location.href = '/career-finder/search'
237:                 }}
238:                 className="flex-1 btn-gradient text-center py-3 rounded-xl font-semibold hover:opacity-90 transition-opacity"
239:               >
240:                 🚀 Continue with this Resume
241:               </button>
242:               <button 
243:                 onClick={() => {
244:                   if (existingResume?.extractedText) {
245:                     handleComprehensiveAnalysis(existingResume.extractedText)
246:                   }
247:                 }}
248:                 disabled={analyzingResume}
249:                 className="px-6 py-3 bg-purple-500 text-white rounded-xl font-semibold hover:bg-purple-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
250:               >
251:                 {analyzingResume ? '🔄 Analyzing...' : '🔍 AI Analysis'}
252:               </button>
253:               <button 
254:                 onClick={() => {
255:                   setExistingResume(null)
256:                   setComprehensiveAnalysis(null)
257:                   try {
258:                     // Clear all autopilot cache
259:                     localStorage.removeItem('cf:resume')
260:                     localStorage.removeItem('cf:autopilotReady')
261:                     localStorage.removeItem('cf:comprehensiveAnalysis')
262:                     localStorage.removeItem('cf:signals')
263:                     localStorage.removeItem('cf:resumeVariants')
264:                     localStorage.removeItem('cf:coverLetters')
265:                     localStorage.removeItem('cf:emailOutreach')
266:                     console.log('[CACHE] All autopilot cache cleared')
267:                   } catch {}
268:                 }}
269:                 className="px-6 py-3 bg-red-500 text-white rounded-xl font-semibold hover:bg-red-600 transition-colors"
270:               >
271:                 Upload New
272:               </button>
273:             </div>
274:           </div>
275:         )}
276: 
277:         {/* COMPETITIVE ADVANTAGE: Display comprehensive analysis results */}
278:         {comprehensiveAnalysis && (
279:           <div className="gradient-border-card mb-8 hover:shadow-2xl hover:shadow-purple-500/20 transition-all duration-300">
280:             <div className="flex items-center gap-3 mb-6">
281:               <div className="w-12 h-12 bg-purple-500 rounded-2xl flex items-center justify-center">
282:                 <span className="text-2xl">🤖</span>
283:               </div>
284:               <h3 className="text-2xl font-bold gradient-text">AI-Powered Resume Analysis</h3>
285:             </div>
286: 
287:             <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
288:               {/* AI Risk Analysis */}
289:               {comprehensiveAnalysis.aiRisk && (
290:                 <div className="bg-gradient-to-br from-red-500/10 to-orange-500/10 rounded-xl p-6 border border-red-500/20">
291:                   <div className="flex items-center gap-2 mb-3">
292:                     <span className="text-2xl">⚠️</span>
293:                     <h4 className="text-lg font-bold text-foreground">AI/Automation Risk</h4>
294:                   </div>
295:                   <div className="text-3xl font-bold mb-2">
296:                     <span className={`${
297:                       comprehensiveAnalysis.aiRisk.aiReplacementRisk === 'low' ? 'text-green-500' :
298:                       comprehensiveAnalysis.aiRisk.aiReplacementRisk === 'medium' ? 'text-yellow-500' : 'text-red-500'
299:                     }`}>
300:                       {comprehensiveAnalysis.aiRisk.aiReplacementRisk?.toUpperCase() || 'N/A'}
301:                     </span>
302:                   </div>
303:                   <p className="text-sm text-muted-foreground">{comprehensiveAnalysis.aiRisk.reasoning?.slice(0, 100)}...</p>
304:                 </div>
305:               )}
306: 
307:               {/* Career Outlook */}
308:               {comprehensiveAnalysis.aiRisk && (
309:                 <div className="bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-xl p-6 border border-blue-500/20">
310:                   <div className="flex items-center gap-2 mb-3">
311:                     <span className="text-2xl">📈</span>
312:                     <h4 className="text-lg font-bold text-foreground">5-Year Outlook</h4>
313:                   </div>
314:                   <div className="text-3xl font-bold mb-2">
315:                     <span className={`${
316:                       comprehensiveAnalysis.aiRisk.fiveYearOutlook === 'thriving' ? 'text-green-500' :
317:                       comprehensiveAnalysis.aiRisk.fiveYearOutlook === 'growing' ? 'text-blue-500' :
318:                       comprehensiveAnalysis.aiRisk.fiveYearOutlook === 'stable' ? 'text-yellow-500' : 'text-red-500'
319:                     }`}>
320:                       {comprehensiveAnalysis.aiRisk.fiveYearOutlook?.toUpperCase() || 'N/A'}
321:                     </span>
322:                   </div>
323:                   <p className="text-sm text-muted-foreground">Career trajectory projection based on market trends</p>
324:                 </div>
325:               )}
326:             </div>
327: 
328:             {/* Salary Intelligence */}
329:             {comprehensiveAnalysis.salaryIntelligence && (
330:               <div className="bg-gradient-to-br from-green-500/10 to-emerald-500/10 rounded-xl p-6 border border-green-500/20 mb-4">
331:                 <div className="flex items-center gap-2 mb-3">
332:                   <span className="text-2xl">💰</span>
333:                   <h4 className="text-lg font-bold text-foreground">Market Salary Intelligence</h4>
334:                 </div>
335:                 <div className="flex gap-6">
336:                   <div>
337:                     <p className="text-sm text-muted-foreground">Target Range</p>
338:                     <p className="text-2xl font-bold text-green-500">
339:                       ${comprehensiveAnalysis.salaryIntelligence.targetRange?.min?.toLocaleString()} - 
340:                       ${comprehensiveAnalysis.salaryIntelligence.targetRange?.max?.toLocaleString()}
341:                     </p>
342:                   </div>
343:                   <div>
344:                     <p className="text-sm text-muted-foreground">Median (P50)</p>
345:                     <p className="text-xl font-bold text-foreground">
346:                       ${comprehensiveAnalysis.salaryIntelligence.marketData?.percentile50?.toLocaleString()}
347:                     </p>
348:                   </div>
349:                 </div>
350:               </div>
351:             )}
352: 
353:             {/* Career Path Intelligence */}
354:             {comprehensiveAnalysis.careerPath && (
355:               <div className="bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-xl p-6 border border-purple-500/20 mb-4">
356:                 <div className="flex items-center gap-2 mb-3">
357:                   <span className="text-2xl">🎯</span>
358:                   <h4 className="text-lg font-bold text-foreground">Career Path Intelligence</h4>
359:                 </div>
360:                 <div className="space-y-3">
361:                   <div>
362:                     <p className="text-sm text-muted-foreground mb-1">Current Level</p>
363:                     <p className="text-lg font-semibold text-foreground">{comprehensiveAnalysis.careerPath.currentLevel}</p>
364:                   </div>
365:                   {(comprehensiveAnalysis.careerPath.nextPossibleRoles?.length ?? 0) > 0 && (
366:                     <div>
367:                       <p className="text-sm text-muted-foreground mb-2">Next Possible Roles</p>
368:                       <div className="flex flex-wrap gap-2">
369:                         {comprehensiveAnalysis.careerPath.nextPossibleRoles?.slice(0, 3).map((role: string, i: number) => (
370:                           <span key={i} className="px-3 py-1 bg-purple-500/20 text-purple-300 rounded-full text-sm">
371:                             {role}
372:                           </span>
373:                         ))}
374:                       </div>
375:                     </div>
376:                   )}
377:                 </div>
378:               </div>
379:             )}
380: 
381:             {/* AI Recommendations */}
382:             {(comprehensiveAnalysis.aiRisk?.recommendations?.length ?? 0) > 0 && (
383:               <div className="bg-gradient-to-br from-yellow-500/10 to-amber-500/10 rounded-xl p-6 border border-yellow-500/20">
384:                 <div className="flex items-center gap-2 mb-3">
385:                   <span className="text-2xl">💡</span>
386:                   <h4 className="text-lg font-bold text-foreground">AI Recommendations</h4>
387:                 </div>
388:                 <ul className="space-y-2">
389:                   {comprehensiveAnalysis.aiRisk?.recommendations?.slice(0, 3).map((rec: string, i: number) => (
390:                     <li key={i} className="flex items-start gap-2">
391:                       <span className="text-yellow-500 mt-1">•</span>
392:                       <span className="text-sm text-foreground">{rec}</span>
393:                     </li>
394:                   ))}
395:                 </ul>
396:               </div>
397:             )}
398:           </div>
399:         )}
400: 
401:         {!loadingExisting && !existingResume && (
402:           <div className="gradient-border-card hover:shadow-2xl hover:shadow-primary/20 transition-all duration-300">
403:             <div className="flex items-center gap-3 mb-6">
404:               <div className="w-12 h-12 gradient-primary rounded-2xl flex items-center justify-center">
405:                 <span className="text-2xl">📤</span>
406:               </div>
407:               <h3 className="text-2xl font-bold gradient-text">Resume Upload</h3>
408:             </div>
409:             <ResumeUpload 
410:               onUploadSuccess={async (resume) => {
411:                 try {
412:                   console.log('[AUTOPILOT] Resume uploaded, triggering autopilot...', resume._id)
413:                   
414:                   // Clear old autopilot cache before generating new data
415:                   localStorage.removeItem('cf:signals')
416:                   localStorage.removeItem('cf:resumeVariants')
417:                   localStorage.removeItem('cf:coverLetters')
418:                   localStorage.removeItem('cf:emailOutreach')
419:                   localStorage.removeItem('cf:comprehensiveAnalysis')
420:                   console.log('[CACHE] Old autopilot cache cleared')
421:                   
422:                   // Trigger autopilot to pre-compute AI data
423:                   const autopilotResponse = await fetch('/api/career-finder/autopilot', {
424:                     method: 'POST',
425:                     headers: { 'Content-Type': 'application/json' },
426:                     body: JSON.stringify({ 
427:                       resumeId: resume._id
428:                     })
429:                   })
430:                   
431:                   if (autopilotResponse.ok) {
432:                     const autopilotData = await autopilotResponse.json()
433:                     console.log('[AUTOPILOT] Success:', autopilotData)
434:                     
435:                     // Cache signals in localStorage for instant access
436:                     if (autopilotData.signals) {
437:                       localStorage.setItem('cf:signals', JSON.stringify(autopilotData.signals))
438:                       
439:                       // CRITICAL: Cache keywords and location separately for search page
440:                       if (autopilotData.signals.keywords?.length > 0) {
441:                         const topKeywords = autopilotData.signals.keywords.slice(0, 30).join(', ')
442:                         localStorage.setItem('cf:keywords', topKeywords)
443:                         console.log('[AUTOPILOT] ✅ Keywords:', topKeywords)
444:                       }
445:                       
446:                       if (autopilotData.signals.location) {
447:                         localStorage.setItem('cf:location', autopilotData.signals.location)
448:                         console.log('[AUTOPILOT] ✅ Location:', autopilotData.signals.location)
449:                       }
450:                       
451:                       // CRITICAL: Set autopilot ready flag AFTER successful extraction
452:                       localStorage.setItem('cf:autopilotReady', '1')
453:                       console.log('[AUTOPILOT] ✅ Set autopilotReady flag')
454:                     }
455:                     
456:                     toast.success('✅ Resume uploaded! Autopilot is preparing your data...', {
457:                       duration: 3000
458:                     })
459:                   } else {
460:                     console.warn('[AUTOPILOT] Failed:', await autopilotResponse.text())
461:                     toast.error('⚠️ Resume uploaded, but autopilot failed. You can still proceed manually.', {
462:                       duration: 4000
463:                     })
464:                   }
465:                   
466:                   // Trigger re-fetch
467:                   setTimeout(() => window.location.reload(), 1000)
468:                 } catch (error) {
469:                   console.error('[AUTOPILOT] Error:', error)
470:                   toast.error('⚠️ Resume uploaded, but autopilot encountered an error.', {
471:                     duration: 4000
472:                   })
473:                   // Still reload even if autopilot fails
474:                   setTimeout(() => window.location.reload(), 1000)
475:                 }
476:               }} 
477:               onUploadError={() => {}}
478:             />
479:           </div>
480:         )}
481: 
482:       </div>
483:     </div>
484:   )
485: }
</file>

<file path="src/app/cover-letter/page.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Input } from '@/components/ui/input'
  6: import { Textarea } from '@/components/ui/textarea'
  7: import { Label } from '@/components/ui/label'
  8: import { Button } from '@/components/ui/button'
  9: import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select'
 10: import { Download, Loader2 } from 'lucide-react'
 11: import { useResumeContext } from '@/components/resume-context'
 12: import toast from 'react-hot-toast'
 13: import { CoverLetterSkeleton } from '@/components/skeleton-loader'
 14: 
 15: export default function CoverLetterPage() {
 16:   const { selectedResume, resumes, setSelectedResumeId, refresh } = useResumeContext()
 17:   const [jobTitle, setJobTitle] = useState('')
 18:   const [companyName, setCompanyName] = useState('')
 19:   const [jobDescription, setJobDescription] = useState('')
 20:   const [resumeText, setResumeText] = useState('')
 21:   const [tone, setTone] = useState<'professional' | 'casual' | 'enthusiastic'>('professional')
 22:   const [length, setLength] = useState<'short' | 'medium' | 'long'>('medium')
 23:   const [isLoading, setIsLoading] = useState(false)
 24:   const [isSaving, setIsSaving] = useState(false)
 25:   const [previewHtml, setPreviewHtml] = useState<string | null>(null)
 26: 
 27:   const generate = async () => {
 28:     // Use current state or fall back to selected resume text immediately
 29:     const rt = (resumeText && resumeText.trim().length > 0)
 30:       ? resumeText
 31:       : (selectedResume?.extractedText || '')
 32:     if (!resumeText && selectedResume?.extractedText) {
 33:       // Update state for UI, but don't wait for it to set before sending request
 34:       setResumeText(selectedResume.extractedText)
 35:     }
 36:     if (!jobTitle.trim() || !companyName.trim() || !jobDescription || jobDescription.trim().length < 50) {
 37:       toast.error('Fill job title, company, and at least 50 chars of job description')
 38:       return
 39:     }
 40:     if (!rt || rt.trim().length < 50) {
 41:       toast.error('Add your resume text (50+ chars) or upload/select a resume')
 42:       return
 43:     }
 44:     setIsLoading(true)
 45:     try {
 46:       let psychology: any | undefined
 47:       try { const stored = localStorage.getItem('analyze:psychology'); if (stored) psychology = JSON.parse(stored) } catch {}
 48:       const resp = await fetch('/api/cover-letter/generate', {
 49:         method: 'POST',
 50:         headers: { 'Content-Type': 'application/json' },
 51:         body: JSON.stringify({
 52:           raw: true,
 53:           jobTitle,
 54:           companyName,
 55:           jobDescription,
 56:           resumeText: rt,
 57:           tone,
 58:           length,
 59:           psychology
 60:         })
 61:       })
 62:       if (!resp.ok) {
 63:         const reqId = resp.headers.get('x-request-id') || ''
 64:         const data = await resp.json().catch(() => ({})) as any
 65:         if (resp.status === 401) {
 66:           toast.error('Session expired. Please sign in again.' + (reqId ? ` (Ref: ${reqId})` : ''))
 67:           try { window.location.href = '/auth/signin' } catch {}
 68:           return
 69:         }
 70:         if (resp.status === 429) {
 71:           toast.error((data?.error || 'Rate limit exceeded') + (reqId ? ` (Ref: ${reqId})` : ''))
 72:           return
 73:         }
 74:         if (resp.status >= 500) {
 75:           toast.error('Server error while generating cover letter.' + (reqId ? ` (Ref: ${reqId})` : ''))
 76:           return
 77:         }
 78:         throw new Error(data?.error || 'Failed to generate cover letter')
 79:       }
 80:       const data = await resp.json()
 81:       const txt: string = data.coverLetter || ''
 82:       const html = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Cover Letter</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.6;color:#111;max-width:8.5in;margin:0 auto;padding:0.7in;white-space:pre-wrap}</style></head><body>${txt.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
 83:       setPreviewHtml(html)
 84:       toast.success('Cover letter generated!')
 85:     } catch (e) {
 86:       toast.error(e instanceof Error ? e.message : 'Failed to generate')
 87:     } finally {
 88:       setIsLoading(false)
 89:     }
 90:   }
 91: 
 92:   useEffect(() => {
 93:     // Auto-fill Resume Text from selected resume when available
 94:     const fill = async () => {
 95:       try {
 96:         if (!selectedResume && (!resumes || resumes.length === 0)) {
 97:           await refresh()
 98:         }
 99:         const current = selectedResume || (resumes && resumes[0])
100:         if (current && !resumeText) {
101:           setResumeText(current.extractedText || '')
102:         }
103:       } catch {}
104:     }
105:     fill()
106:     // eslint-disable-next-line react-hooks/exhaustive-deps
107:   }, [selectedResume, resumes])
108: 
109:   // Auto-fill job fields from last Analyze/selection
110:   useEffect(() => {
111:     try {
112:       if (!jobTitle) {
113:         const jt = localStorage.getItem('job:title')
114:         if (jt) setJobTitle(jt)
115:       }
116:       if (!companyName) {
117:         const cn = localStorage.getItem('job:company')
118:         if (cn) setCompanyName(cn)
119:       }
120:       if (!jobDescription) {
121:         const jd = localStorage.getItem('job:description')
122:         if (jd) setJobDescription(jd)
123:       }
124:     } catch {}
125:     // eslint-disable-next-line react-hooks/exhaustive-deps
126:   }, [])
127: 
128:   // Persist job fields to localStorage for cross-app autofill
129:   useEffect(() => {
130:     try { if (jobTitle) localStorage.setItem('job:title', jobTitle) } catch {}
131:   }, [jobTitle])
132:   useEffect(() => {
133:     try { if (companyName) localStorage.setItem('job:company', companyName) } catch {}
134:   }, [companyName])
135:   useEffect(() => {
136:     try { if (jobDescription) localStorage.setItem('job:description', jobDescription) } catch {}
137:   }, [jobDescription])
138: 
139:   const downloadPdf = async () => {
140:     if (!previewHtml) return
141:     try {
142:       const resp = await fetch('/api/resume/export/pdf', {
143:         method: 'POST',
144:         headers: { 'Content-Type': 'application/json' },
145:         body: JSON.stringify({
146:           html: previewHtml,
147:           filename: `${companyName || 'Company'}_${jobTitle || 'CoverLetter'}.pdf`
148:         })
149:       })
150:       if (!resp.ok) throw new Error('Failed to export PDF')
151:       const blob = await resp.blob()
152:       const url = URL.createObjectURL(blob)
153:       const a = document.createElement('a')
154:       a.href = url
155:       a.download = `${companyName || 'Company'}_${jobTitle || 'CoverLetter'}.pdf`
156:       document.body.appendChild(a)
157:       a.click()
158:       document.body.removeChild(a)
159:       URL.revokeObjectURL(url)
160:     } catch (e) {
161:       toast.error(e instanceof Error ? e.message : 'Failed to export')
162:     }
163:   }
164: 
165:   const saveLetter = async () => {
166:     if (!previewHtml) {
167:       toast.error('Generate a cover letter first')
168:       return
169:     }
170:     setIsSaving(true)
171:     try {
172:       const resp = await fetch('/api/cover-letter/generate', {
173:         method: 'POST',
174:         headers: { 'Content-Type': 'application/json' },
175:         body: JSON.stringify({
176:           raw: true,
177:           save: true,
178:           jobTitle,
179:           companyName,
180:           jobDescription,
181:           resumeText,
182:           tone,
183:           length,
184:         })
185:       })
186:       if (!resp.ok) {
187:         const reqId = resp.headers.get('x-request-id') || ''
188:         const data = await resp.json().catch(() => ({})) as any
189:         if (resp.status === 401) {
190:           toast.error('Session expired. Please sign in again.' + (reqId ? ` (Ref: ${reqId})` : ''))
191:           try { window.location.href = '/auth/signin' } catch {}
192:           return
193:         }
194:         if (resp.status === 429) {
195:           toast.error((data?.error || 'Rate limit exceeded') + (reqId ? ` (Ref: ${reqId})` : ''))
196:           return
197:         }
198:         if (resp.status >= 500) {
199:           toast.error('Server error while saving cover letter.' + (reqId ? ` (Ref: ${reqId})` : ''))
200:           return
201:         }
202:         throw new Error(data?.error || 'Failed to save')
203:       }
204:       toast.success('Cover letter saved!')
205:     } catch (e) {
206:       toast.error(e instanceof Error ? e.message : 'Failed to save')
207:     } finally {
208:       setIsSaving(false)
209:     }
210:   }
211: 
212:   return (
213:     <div className="container mx-auto p-4 space-y-6">
214:       <Card>
215:         <CardHeader>
216:           <CardTitle>Generate Cover Letter</CardTitle>
217:           <CardDescription>Paste the job description and your resume. Choose tone and length, then generate a preview.</CardDescription>
218:         </CardHeader>
219:         <CardContent className="space-y-4">
220:           <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
221:             <div className="space-y-2">
222:               <Label>Job Title</Label>
223:               <Input value={jobTitle} onChange={(e) => setJobTitle(e.target.value)} placeholder="e.g., Software Engineer" />
224:             </div>
225:             <div className="space-y-2">
226:               <Label>Company Name</Label>
227:               <Input value={companyName} onChange={(e) => setCompanyName(e.target.value)} placeholder="e.g., Acme Corp" />
228:             </div>
229:           </div>
230: 
231:           <div className="space-y-2">
232:             <Label>Job Description</Label>
233:             <Textarea value={jobDescription} onChange={(e) => setJobDescription(e.target.value)} rows={8} placeholder="Paste the job description here" />
234:           </div>
235: 
236:           <div className="space-y-2">
237:             <Label>Resume Text</Label>
238:             <Textarea value={resumeText || selectedResume?.extractedText || ''} onChange={(e) => setResumeText(e.target.value)} rows={8} placeholder={selectedResume ? 'Using your uploaded resume. You can override here.' : 'Paste your resume text here'} />
239:             {!selectedResume && (
240:               <div className="text-xs text-muted-foreground">Tip: upload a resume first so it’s auto-filled across the app.</div>
241:             )}
242:           </div>
243: 
244:           <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
245:             <div className="space-y-2">
246:               <Label>Tone</Label>
247:               <Select value={tone} onValueChange={(v) => setTone(v as any)}>
248:                 <SelectTrigger><SelectValue /></SelectTrigger>
249:                 <SelectContent>
250:                   <SelectItem value="professional">Professional</SelectItem>
251:                   <SelectItem value="casual">Casual</SelectItem>
252:                   <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
253:                 </SelectContent>
254:               </Select>
255:             </div>
256:             <div className="space-y-2">
257:               <Label>Length</Label>
258:               <Select value={length} onValueChange={(v) => setLength(v as any)}>
259:                 <SelectTrigger><SelectValue /></SelectTrigger>
260:                 <SelectContent>
261:                   <SelectItem value="short">Short</SelectItem>
262:                   <SelectItem value="medium">Medium</SelectItem>
263:                   <SelectItem value="long">Long</SelectItem>
264:                 </SelectContent>
265:               </Select>
266:             </div>
267:           </div>
268: 
269:           <Button onClick={generate} disabled={isLoading} className="w-full">
270:             {isLoading ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" />Generating...</>) : 'Generate Cover Letter'}
271:           </Button>
272:         </CardContent>
273:       </Card>
274: 
275:       <Card>
276:         <CardHeader>
277:           <CardTitle>Preview</CardTitle>
278:           <CardDescription>Review your cover letter before downloading.</CardDescription>
279:         </CardHeader>
280:         <CardContent className="space-y-4">
281:           {isLoading ? (
282:             <CoverLetterSkeleton />
283:           ) : previewHtml ? (
284:             <>
285:               <div className="border rounded overflow-hidden">
286:                 <iframe srcDoc={previewHtml} className="w-full h-96 border-0" title="Cover Letter Preview" />
287:               </div>
288:               <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
289:                 <Button onClick={downloadPdf} className="w-full"><Download className="mr-2 h-4 w-4" />Download PDF</Button>
290:                 <Button onClick={saveLetter} disabled={isSaving} variant="outline" className="w-full">
291:                   {isSaving ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" />Saving...</>) : 'Save to Applications'}
292:                 </Button>
293:               </div>
294:             </>
295:           ) : (
296:             <div className="text-sm text-muted-foreground">No preview yet. Fill the form and click Generate.</div>
297:           )}
298:         </CardContent>
299:       </Card>
300:     </div>
301:   )
302: }
</file>

<file path="src/app/dashboard/components/action-center.tsx">
  1: 'use client'
  2: 
  3: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  4: import { Button } from '@/components/ui/button'
  5: import { Skeleton } from '@/components/ui/skeleton'
  6: import { ArrowRight, ClipboardList, Sparkles, Target, Bell, Route } from 'lucide-react'
  7: import { useRouter } from 'next/navigation'
  8: import { useDashboardStatsData } from '@/hooks/use-dashboard-stats'
  9: 
 10: export function ActionCenter() {
 11:   const router = useRouter()
 12:   const { stats, isLoading } = useDashboardStatsData()
 13: 
 14:   const actions = [
 15:     {
 16:       title: 'Find Jobs',
 17:       description: 'Search for jobs with AI-powered matching and analysis.',
 18:       icon: ClipboardList,
 19:       href: '/career-finder/search',
 20:       color: 'text-green-600',
 21:       bg: 'bg-green-100',
 22:     },
 23:     {
 24:       title: 'Research a Company',
 25:       description: 'Get culture, news, and talking points for outreach and interviews.',
 26:       icon: Target,
 27:       href: '/career-finder/company',
 28:       color: 'text-orange-600',
 29:       bg: 'bg-orange-100',
 30:     },
 31:     {
 32:       title: 'Optimize Resume',
 33:       description: 'Tailor your resume for higher match scores and better responses.',
 34:       icon: Sparkles,
 35:       href: '/career-finder/optimizer',
 36:       color: 'text-purple-600',
 37:       bg: 'bg-purple-100',
 38:     },
 39:     {
 40:       title: 'Alerts & Preferences',
 41:       description: 'Manage job alerts, locations, and frequency to get daily finds.',
 42:       icon: Bell,
 43:       href: '/settings/alerts',
 44:       color: 'text-blue-600',
 45:       bg: 'bg-blue-100',
 46:     },
 47:     {
 48:       title: 'Commute Filters',
 49:       description: 'Filter jobs by travel time and preferred mode from your address.',
 50:       icon: Route,
 51:       href: '/jobs?commute=1',
 52:       color: 'text-sky-600',
 53:       bg: 'bg-sky-100',
 54:     },
 55:   ]
 56: 
 57:   return (
 58:     <Card className="glass-card action-center">
 59:       <CardHeader>
 60:         <CardTitle>Smart Action Center</CardTitle>
 61:       </CardHeader>
 62:       <CardContent className="space-y-4">
 63:         {isLoading ? (
 64:           <div className="space-y-3">
 65:             <Skeleton className="h-4 w-1/2" />
 66:             <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
 67:               {[...Array(3)].map((_, i) => (
 68:                 <Skeleton key={i} className="h-16" />
 69:               ))}
 70:             </div>
 71:           </div>
 72:         ) : (
 73:           <>
 74:             <div className="text-sm text-muted-foreground">
 75:               {stats.appliedThisWeek > 0
 76:                 ? `Great work — ${stats.appliedThisWeek} applications this week. Keep momentum with these actions.`
 77:                 : 'Kickstart your week with these recommended actions.'}
 78:             </div>
 79:             <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
 80:               {actions.map((action) => (
 81:                 <Button
 82:                   key={action.title}
 83:                   variant="outline"
 84:                   className="h-auto p-4 flex items-center justify-between hover:shadow-md transition whitespace-pre-wrap break-words text-left action-primary"
 85:                   onClick={() => router.push(action.href)}
 86:                 >
 87:                   <div className="flex items-center gap-3">
 88:                     <div className={`rounded-md p-2 ${action.bg}`}>
 89:                       <action.icon className={`h-5 w-5 ${action.color}`} />
 90:                     </div>
 91:                     <div className="text-left">
 92:                       <div className="font-medium text-foreground leading-normal">{action.title}</div>
 93:                       <div className="text-xs text-muted-foreground leading-normal">{action.description}</div>
 94:                     </div>
 95:                   </div>
 96:                   <ArrowRight className="h-4 w-4" />
 97:                 </Button>
 98:               ))}
 99:             </div>
100:           </>
101:         )}
102:       </CardContent>
103:     </Card>
104:   )
105: }
</file>

<file path="src/app/dashboard/components/ai-insights.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Badge } from '@/components/ui/badge'
  6: import { Progress } from '@/components/ui/progress'
  7: import { isFeatureEnabled } from '@/lib/flags'
  8: 
  9: interface Insight {
 10:   title: string
 11:   detail: string
 12: }
 13: 
 14: export default function AIInsights() {
 15:   const [insights, setInsights] = useState<Insight[]>([])
 16:   const [loading, setLoading] = useState(true)
 17: 
 18:   useEffect(() => {
 19:     const run = async () => {
 20:       try {
 21:         // Compute success probability if cache available
 22:         let success: { score: number } | null = null
 23:         try {
 24:           const jd = localStorage.getItem('job:description') || ''
 25:           const rt = localStorage.getItem('resume:latest') || ''
 26:           if (jd && rt) {
 27:             const r = await fetch('/api/insights/success', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription: jd, resumeText: rt }) })
 28:             const j = await r.json().catch(()=>({}))
 29:             if (r.ok && j.success && j.successScore) success = { score: j.successScore.score }
 30:           }
 31:         } catch {}
 32: 
 33:         // Use cached stats from shared hook instead of fetching again
 34:         const res = await fetch('/api/analytics/dashboard')
 35:         if (res.ok) {
 36:           const data = await res.json()
 37:           const s = data?.stats || { totalApplications: 0, appliedThisWeek: 0, interviewRate: 0 }
 38:           // TODO: Refactor to use useDashboardStatsData() hook
 39:           const items: Insight[] = [
 40:             { title: 'Focus company outreach', detail: `Interview rate at ${s.interviewRate}% — tailor follow-ups to top targets.` },
 41:             { title: 'Consistency wins', detail: `Apply to at least ${(s.appliedThisWeek || 0) + 3} roles this week to maintain momentum.` },
 42:           ]
 43:           setInsights(items)
 44:           if (typeof success?.score === 'number') {
 45:             setInsights(prev => [{ title: 'Success Probability', detail: `${success!.score}% estimated chance — strengthen missing keywords and quantify recent wins.` }, ...prev])
 46:           }
 47:           // Optional market intel summary (behind flag)
 48:           if (isFeatureEnabled('intel-dashboard')) {
 49:             try {
 50:               const cname = localStorage.getItem('job:company') || ''
 51:               const role = localStorage.getItem('job:title') || ''
 52:               if (cname) {
 53:                 const mi = await fetch('/api/v2/company/intel', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ companyName: cname, role }) })
 54:                 const mj = await mi.json().catch(()=>({}))
 55:                 if (mi.ok && mj.success && mj.intel?.summary) {
 56:                   setInsights(prev => [{ title: 'Market Intel', detail: mj.intel.summary.split('\n')[0] || 'New signals available.' }, ...prev])
 57:                 }
 58:               }
 59:             } catch {}
 60:           }
 61:         } else {
 62:           setInsights([
 63:             { title: 'Get started', detail: 'Upload a resume and analyze a role to unlock insights.' },
 64:           ])
 65:         }
 66:       } catch (e) {
 67:         setInsights([
 68:           { title: 'Get started', detail: 'Upload a resume and analyze a role to unlock insights.' },
 69:         ])
 70:       } finally {
 71:         setLoading(false)
 72:       }
 73:     }
 74:     run()
 75:   }, [])
 76: 
 77:   return (
 78:     <Card className="glass-card">
 79:       <CardHeader>
 80:         <CardTitle>AI Insights</CardTitle>
 81:       </CardHeader>
 82:       <CardContent>
 83:         {loading ? (
 84:           <div className="space-y-3">
 85:             <div className="h-4 w-3/5 bg-gray-200 rounded animate-pulse"></div>
 86:             <div className="h-4 w-4/5 bg-gray-200 rounded animate-pulse"></div>
 87:             <div className="h-4 w-2/5 bg-gray-200 rounded animate-pulse"></div>
 88:           </div>
 89:         ) : (
 90:           <ul className="space-y-3">
 91:             {insights.map((insight, idx) => (
 92:               <li key={idx} className="p-3 rounded-md bg-blue-50 text-blue-900">
 93:                 <div className="font-medium">{insight.title}</div>
 94:                 <div className="text-sm text-blue-800">{insight.detail}</div>
 95:               </li>
 96:             ))}
 97:           </ul>
 98:         )}
 99:       </CardContent>
100:     </Card>
101:   )
102: }
</file>

<file path="src/app/dashboard/components/application-pipeline.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { FileText, Send, Calendar, CheckCircle2, XCircle } from 'lucide-react'
  6: 
  7: interface PipelineStats {
  8:   applied: number
  9:   screening: number
 10:   interview: number
 11:   offer: number
 12:   rejected: number
 13: }
 14: 
 15: export function ApplicationPipeline() {
 16:   const [stats, setStats] = useState<PipelineStats>({
 17:     applied: 0,
 18:     screening: 0,
 19:     interview: 0,
 20:     offer: 0,
 21:     rejected: 0
 22:   })
 23:   const [loading, setLoading] = useState(true)
 24: 
 25:   useEffect(() => {
 26:     fetchPipelineStats()
 27:   }, [])
 28: 
 29:   const fetchPipelineStats = async () => {
 30:     try {
 31:       const response = await fetch('/api/applications/pipeline-stats')
 32:       if (response.ok) {
 33:         const data = await response.json()
 34:         setStats(data)
 35:       }
 36:     } catch (error) {
 37:       console.error('[PIPELINE] Error fetching stats:', error)
 38:     } finally {
 39:       setLoading(false)
 40:     }
 41:   }
 42: 
 43:   const stages = [
 44:     { name: 'Applied', count: stats.applied, icon: FileText, color: 'bg-blue-500', textColor: 'text-blue-600' },
 45:     { name: 'Screening', count: stats.screening, icon: Send, color: 'bg-purple-500', textColor: 'text-purple-600' },
 46:     { name: 'Interview', count: stats.interview, icon: Calendar, color: 'bg-yellow-500', textColor: 'text-yellow-600' },
 47:     { name: 'Offer', count: stats.offer, icon: CheckCircle2, color: 'bg-green-500', textColor: 'text-green-600' },
 48:     { name: 'Rejected', count: stats.rejected, icon: XCircle, color: 'bg-red-500', textColor: 'text-red-600' }
 49:   ]
 50: 
 51:   const total = stats.applied + stats.screening + stats.interview + stats.offer + stats.rejected
 52: 
 53:   if (loading) {
 54:     return (
 55:       <Card>
 56:         <CardHeader>
 57:           <CardTitle>Application Pipeline</CardTitle>
 58:         </CardHeader>
 59:         <CardContent>
 60:           <div className="animate-pulse space-y-4">
 61:             <div className="h-24 bg-muted rounded"></div>
 62:             <div className="h-24 bg-muted rounded"></div>
 63:           </div>
 64:         </CardContent>
 65:       </Card>
 66:     )
 67:   }
 68: 
 69:   return (
 70:     <Card>
 71:       <CardHeader>
 72:         <CardTitle className="flex items-center justify-between">
 73:           <span>Application Pipeline</span>
 74:           <span className="text-sm font-normal text-muted-foreground">{total} Total</span>
 75:         </CardTitle>
 76:       </CardHeader>
 77:       <CardContent>
 78:         <div className="space-y-4">
 79:           {stages.map((stage, index) => {
 80:             const percentage = total > 0 ? (stage.count / total) * 100 : 0
 81:             const Icon = stage.icon
 82: 
 83:             return (
 84:               <div key={stage.name} className="space-y-2">
 85:                 <div className="flex items-center justify-between">
 86:                   <div className="flex items-center gap-2">
 87:                     <Icon className={`w-5 h-5 ${stage.textColor}`} />
 88:                     <span className="font-medium">{stage.name}</span>
 89:                   </div>
 90:                   <div className="flex items-center gap-2">
 91:                     <span className="text-2xl font-bold">{stage.count}</span>
 92:                     <span className="text-sm text-muted-foreground">
 93:                       ({percentage.toFixed(0)}%)
 94:                     </span>
 95:                   </div>
 96:                 </div>
 97:                 <div className="w-full bg-muted rounded-full h-3 overflow-hidden">
 98:                   <div
 99:                     className={`${stage.color} h-full rounded-full transition-all duration-500`}
100:                     style={{ width: `${percentage}%` }}
101:                   />
102:                 </div>
103:               </div>
104:             )
105:           })}
106:         </div>
107: 
108:         {/* Success Rate */}
109:         <div className="mt-6 pt-6 border-t">
110:           <div className="flex items-center justify-between">
111:             <span className="text-sm font-medium">Success Rate</span>
112:             <span className="text-lg font-bold text-green-600">
113:               {total > 0 ? ((stats.offer / total) * 100).toFixed(1) : 0}%
114:             </span>
115:           </div>
116:           <p className="text-xs text-muted-foreground mt-1">
117:             Offers received out of total applications
118:           </p>
119:         </div>
120: 
121:         {/* Conversion Rate */}
122:         <div className="mt-4">
123:           <div className="flex items-center justify-between">
124:             <span className="text-sm font-medium">Interview Conversion</span>
125:             <span className="text-lg font-bold text-yellow-600">
126:               {stats.applied > 0 ? ((stats.interview / stats.applied) * 100).toFixed(1) : 0}%
127:             </span>
128:           </div>
129:           <p className="text-xs text-muted-foreground mt-1">
130:             Applications that reached interview stage
131:           </p>
132:         </div>
133:       </CardContent>
134:     </Card>
135:   )
136: }
</file>

<file path="src/app/dashboard/components/enterprise-sidebar.tsx">
 1: 'use client'
 2: 
 3: import Link from 'next/link'
 4: import { usePathname } from 'next/navigation'
 5: import { Briefcase, LineChart, Layers, Wand2, Users, Settings } from 'lucide-react'
 6: 
 7: export function EnterpriseSidebar() {
 8:   const pathname = usePathname()
 9:   const nav = [
10:     { label: 'Overview', href: '/dashboard', icon: LineChart },
11:     { label: 'Career Finder', href: '/career-finder/resume', icon: Layers },
12:     { label: 'Analytics', href: '/analytics', icon: LineChart },
13:     { label: 'Job Boards', href: '/job-boards', icon: Briefcase },
14:     { label: 'Resume Builder', href: '/resume-builder', icon: Wand2 },
15:     { label: 'Network', href: '/network', icon: Users },
16:   ]
17: 
18:   return (
19:     <aside className="hidden lg:block sidebar bg-card text-card-foreground dark:bg-gray-900 dark:text-gray-100">
20:       <div className="nav-group">
21:         <div className="nav-group-title">Navigation</div>
22:         <nav>
23:           {nav.map((item) => {
24:             const active = pathname === item.href
25:             const Icon = item.icon
26:             return (
27:               <Link key={item.href} href={item.href} className={`nav-item ${active ? 'active' : ''}`}>
28:                 <Icon className="h-5 w-5" />
29:                 <span className="text-sm">{item.label}</span>
30:               </Link>
31:             )
32:           })}
33:         </nav>
34:       </div>
35: 
36:       <div className="nav-group">
37:         <div className="nav-group-title">Settings</div>
38:         <Link href="#" className="nav-item">
39:           <Settings className="h-5 w-5" />
40:           <span className="text-sm">Preferences</span>
41:         </Link>
42:       </div>
43:     </aside>
44:   )
45: }
</file>

<file path="src/app/dashboard/components/follow-up-reminders.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Bell, Mail, Calendar, CheckCircle2 } from 'lucide-react'
  7: import Link from 'next/link'
  8: 
  9: interface FollowUpItem {
 10:   id: string
 11:   company: string
 12:   jobTitle: string
 13:   appliedDate: string
 14:   daysSinceApplied: number
 15:   status: string
 16:   priority: 'high' | 'medium' | 'low'
 17: }
 18: 
 19: export function FollowUpReminders() {
 20:   const [reminders, setReminders] = useState<FollowUpItem[]>([])
 21:   const [loading, setLoading] = useState(true)
 22: 
 23:   useEffect(() => {
 24:     fetchFollowUpReminders()
 25:   }, [])
 26: 
 27:   const fetchFollowUpReminders = async () => {
 28:     try {
 29:       const response = await fetch('/api/applications/follow-up-reminders')
 30:       if (response.ok) {
 31:         const data = await response.json()
 32:         setReminders(data)
 33:       }
 34:     } catch (error) {
 35:       console.error('[FOLLOW_UP] Error:', error)
 36:     } finally {
 37:       setLoading(false)
 38:     }
 39:   }
 40: 
 41:   const markAsFollowedUp = async (id: string) => {
 42:     try {
 43:       await fetch(`/api/applications/${id}/follow-up`, {
 44:         method: 'POST'
 45:       })
 46:       // Remove from list
 47:       setReminders(prev => prev.filter(r => r.id !== id))
 48:     } catch (error) {
 49:       console.error('[FOLLOW_UP] Error marking as followed up:', error)
 50:     }
 51:   }
 52: 
 53:   const getPriorityColor = (priority: string) => {
 54:     switch (priority) {
 55:       case 'high': return 'text-red-600 bg-red-50 dark:bg-red-950'
 56:       case 'medium': return 'text-yellow-600 bg-yellow-50 dark:bg-yellow-950'
 57:       case 'low': return 'text-blue-600 bg-blue-50 dark:bg-blue-950'
 58:       default: return 'text-gray-600 bg-gray-50 dark:bg-gray-950'
 59:     }
 60:   }
 61: 
 62:   if (loading) {
 63:     return (
 64:       <Card>
 65:         <CardHeader>
 66:           <CardTitle>Follow-Up Reminders</CardTitle>
 67:         </CardHeader>
 68:         <CardContent>
 69:           <div className="animate-pulse space-y-3">
 70:             <div className="h-16 bg-muted rounded"></div>
 71:             <div className="h-16 bg-muted rounded"></div>
 72:           </div>
 73:         </CardContent>
 74:       </Card>
 75:     )
 76:   }
 77: 
 78:   return (
 79:     <Card>
 80:       <CardHeader>
 81:         <CardTitle className="flex items-center justify-between">
 82:           <div className="flex items-center gap-2">
 83:             <Bell className="w-5 h-5" />
 84:             Follow-Up Reminders
 85:           </div>
 86:           {reminders.length > 0 && (
 87:             <span className="text-sm font-normal px-3 py-1 bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-200 rounded-full">
 88:               {reminders.length}
 89:             </span>
 90:           )}
 91:         </CardTitle>
 92:       </CardHeader>
 93:       <CardContent>
 94:         {reminders.length === 0 ? (
 95:           <div className="text-center py-8">
 96:             <CheckCircle2 className="w-12 h-12 mx-auto text-green-500 mb-3" />
 97:             <p className="text-sm text-muted-foreground">
 98:               All caught up! No follow-ups needed right now.
 99:             </p>
100:           </div>
101:         ) : (
102:           <div className="space-y-3">
103:             {reminders.map((reminder) => (
104:               <div
105:                 key={reminder.id}
106:                 className={`p-4 rounded-lg border-2 ${getPriorityColor(reminder.priority)}`}
107:               >
108:                 <div className="flex items-start justify-between gap-3">
109:                   <div className="flex-1 min-w-0">
110:                     <div className="flex items-center gap-2 mb-1">
111:                       <h4 className="font-semibold truncate">{reminder.jobTitle}</h4>
112:                       <span className={`text-xs px-2 py-0.5 rounded-full ${
113:                         reminder.priority === 'high' ? 'bg-red-200 dark:bg-red-800' :
114:                         reminder.priority === 'medium' ? 'bg-yellow-200 dark:bg-yellow-800' :
115:                         'bg-blue-200 dark:bg-blue-800'
116:                       }`}>
117:                         {reminder.priority}
118:                       </span>
119:                     </div>
120:                     <p className="text-sm text-muted-foreground mb-2">{reminder.company}</p>
121:                     <div className="flex items-center gap-4 text-xs text-muted-foreground">
122:                       <div className="flex items-center gap-1">
123:                         <Calendar className="w-3 h-3" />
124:                         <span>{reminder.daysSinceApplied} days ago</span>
125:                       </div>
126:                       <div className="flex items-center gap-1">
127:                         <span className="font-medium">{reminder.status}</span>
128:                       </div>
129:                     </div>
130:                   </div>
131:                   <div className="flex flex-col gap-2">
132:                     <Button
133:                       size="sm"
134:                       variant="outline"
135:                       onClick={() => markAsFollowedUp(reminder.id)}
136:                       className="whitespace-nowrap"
137:                     >
138:                       <Mail className="w-3 h-3 mr-1" />
139:                       Mark Done
140:                     </Button>
141:                   </div>
142:                 </div>
143:                 
144:                 {/* Quick Action Suggestions */}
145:                 <div className="mt-3 pt-3 border-t border-current/20">
146:                   <p className="text-xs font-medium mb-2">Suggested Action:</p>
147:                   <p className="text-xs opacity-80">
148:                     {reminder.daysSinceApplied >= 14 ? (
149:                       <>Send a polite follow-up email asking about your application status.</>
150:                     ) : reminder.daysSinceApplied >= 7 ? (
151:                       <>Consider reaching out to the hiring manager on LinkedIn.</>
152:                     ) : (
153:                       <>Wait a few more days before following up.</>
154:                     )}
155:                   </p>
156:                 </div>
157:               </div>
158:             ))}
159:           </div>
160:         )}
161: 
162:         {/* View All Link */}
163:         {reminders.length > 0 && (
164:           <div className="mt-4 text-center">
165:             <Link href="/applications">
166:               <Button variant="ghost" size="sm">
167:                 View All Applications →
168:               </Button>
169:             </Link>
170:           </div>
171:         )}
172:       </CardContent>
173:     </Card>
174:   )
175: }
</file>

<file path="src/app/dashboard/components/recent-applications.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { Button } from '@/components/ui/button'
  5: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  6: import { Badge } from '@/components/ui/badge'
  7: import { formatRelativeDate } from '@/lib/utils'
  8: import { JobApplication } from '@/types'
  9: import { Briefcase, ExternalLink, Calendar } from 'lucide-react'
 10: 
 11: export function RecentApplications() {
 12:   const [applications, setApplications] = useState<JobApplication[]>([])
 13:   const [loading, setLoading] = useState(true)
 14: 
 15:   useEffect(() => {
 16:     fetchApplications()
 17:   }, [])
 18: 
 19:   const fetchApplications = async () => {
 20:     try {
 21:       const response = await fetch('/api/applications?limit=5')
 22:       if (response.ok) {
 23:         const data = await response.json()
 24:         setApplications(data.applications)
 25:       }
 26:     } catch (error) {
 27:       console.error('Failed to fetch applications:', error)
 28:     } finally {
 29:       setLoading(false)
 30:     }
 31:   }
 32: 
 33:   const getStatusColor = (status: string) => {
 34:     switch (status) {
 35:       case 'applied':
 36:         return 'bg-blue-100 text-blue-800'
 37:       case 'interviewing':
 38:         return 'bg-yellow-100 text-yellow-800'
 39:       case 'offer':
 40:         return 'bg-green-100 text-green-800'
 41:       case 'rejected':
 42:         return 'bg-red-100 text-red-800'
 43:       case 'withdrawn':
 44:         return 'bg-muted text-foreground'
 45:       default:
 46:         return 'bg-muted text-foreground'
 47:     }
 48:   }
 49: 
 50:   if (loading) {
 51:     return (
 52:       <Card>
 53:         <CardHeader>
 54:           <CardTitle className="flex items-center gap-2">
 55:             <Briefcase className="h-5 w-5" />
 56:             Recent Applications
 57:           </CardTitle>
 58:         </CardHeader>
 59:         <CardContent>
 60:           <div className="space-y-4">
 61:             {[...Array(3)].map((_, i) => (
 62:               <div key={i} className="animate-pulse">
 63:                 <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
 64:                 <div className="h-3 bg-gray-200 rounded w-1/2"></div>
 65:               </div>
 66:             ))}
 67:           </div>
 68:         </CardContent>
 69:       </Card>
 70:     )
 71:   }
 72: 
 73:   return (
 74:     <Card>
 75:       <CardHeader>
 76:         <div className="flex items-center justify-between">
 77:           <div>
 78:             <CardTitle className="flex items-center gap-2">
 79:               <Briefcase className="h-5 w-5" />
 80:               Recent Applications
 81:             </CardTitle>
 82:             <CardDescription>
 83:               Your latest job applications and their status
 84:             </CardDescription>
 85:           </div>
 86:           <Button variant="outline" size="sm">
 87:             View All
 88:           </Button>
 89:         </div>
 90:       </CardHeader>
 91:       <CardContent>
 92:         {applications.length === 0 ? (
 93:           <div className="text-center py-8">
 94:             <Briefcase className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
 95:             <h3 className="text-lg font-medium text-foreground mb-2">No applications yet</h3>
 96:             <p className="text-muted-foreground mb-4">
 97:               Start your job search by uploading a resume and analyzing job descriptions.
 98:             </p>
 99:             <Button>Upload Resume</Button>
100:           </div>
101:         ) : (
102:           <div className="space-y-4">
103:             {applications.map((application) => (
104:               <div
105:                 key={application._id}
106:                 className="flex items-center justify-between p-4 border rounded-lg hover:bg-background transition-colors"
107:               >
108:                 <div className="flex-1">
109:                   <div className="flex items-center gap-3 mb-2">
110:                     <h4 className="font-semibold text-foreground">
111:                       {application.jobTitle}
112:                     </h4>
113:                     <Badge className={getStatusColor(application.applicationStatus)}>
114:                       {application.applicationStatus}
115:                     </Badge>
116:                   </div>
117:                   <p className="text-sm text-muted-foreground mb-2">
118:                     {application.companyName}
119:                   </p>
120:                   {application.applicationStatus === 'saved' && (
121:                     <div className="text-xs text-muted-foreground">Tip: Apply on the employer site, then run Inbox Sync to auto-update status.</div>
122:                   )}
123:                   <div className="flex items-center gap-4 text-xs text-muted-foreground">
124:                     <span className="flex items-center gap-1">
125:                       <Calendar className="h-3 w-3" />
126:                       {application.appliedDate
127:                         ? formatRelativeDate(new Date(application.appliedDate))
128:                         : 'Not applied yet'
129:                       }
130:                     </span>
131:                     {application.jobUrl && (
132:                       <a
133:                         href={application.jobUrl}
134:                         target="_blank"
135:                         rel="noopener noreferrer"
136:                         className="flex items-center gap-1 text-blue-600 hover:text-blue-800"
137:                       >
138:                         <ExternalLink className="h-3 w-3" />
139:                         View Job
140:                       </a>
141:                     )}
142:                   </div>
143:                 </div>
144:                 <div className="flex gap-2">
145:                   <Button variant="outline" size="sm">
146:                     Edit
147:                   </Button>
148:                   <Button variant="outline" size="sm" onClick={async ()=>{ try { const r = await fetch('/api/inbox/run', { method: 'POST' }); if (r.ok) { fetchApplications() } } catch {} }}>Sync Inbox</Button>
149:                   <a href={`/applications/${application._id}`} className="inline-flex items-center px-3 py-2 border rounded text-sm">
150:                     View Details
151:                   </a>
152:                 </div>
153:               </div>
154:             ))}
155:           </div>
156:         )}
157:       </CardContent>
158:     </Card>
159:   )
160: }
</file>

<file path="src/app/dashboard/components/recent-cover-letters.tsx">
 1: 'use client'
 2: 
 3: import { useEffect, useState } from 'react'
 4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
 5: import { Button } from '@/components/ui/button'
 6: import { Download, FileText } from 'lucide-react'
 7: import { Skeleton } from '@/components/ui/skeleton'
 8: import toast from 'react-hot-toast'
 9: 
10: export function RecentCoverLetters() {
11:   const [letters, setLetters] = useState<Array<any>>([])
12:   const [loading, setLoading] = useState(true)
13: 
14:   useEffect(() => {
15:     const load = async () => {
16:       try {
17:         const resp = await fetch('/api/cover-letter/list')
18:         if (!resp.ok) throw new Error('Failed to load cover letters')
19:         const data = await resp.json()
20:         setLetters(data.letters || [])
21:       } catch (e) {
22:         toast.error('Failed to load cover letters')
23:       } finally {
24:         setLoading(false)
25:       }
26:     }
27:     load()
28:   }, [])
29: 
30:   const download = async (content: string, fileName: string) => {
31:     const html = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>${fileName}</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.5;color:#333;max-width:8.5in;margin:0 auto;padding:0.5in;white-space:pre-wrap}</style></head><body>${content.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
32:     try {
33:       const resp = await fetch('/api/resume/export/pdf', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ html, filename: `${fileName}.pdf` }) })
34:       if (!resp.ok) throw new Error('Failed')
35:       const blob = await resp.blob()
36:       const url = URL.createObjectURL(blob)
37:       const a = document.createElement('a')
38:       a.href = url
39:       a.download = `${fileName}.pdf`
40:       document.body.appendChild(a)
41:       a.click()
42:       document.body.removeChild(a)
43:       URL.revokeObjectURL(url)
44:     } catch {
45:       toast.error('Failed to download')
46:     }
47:   }
48: 
49:   return (
50:     <Card>
51:       <CardHeader>
52:         <CardTitle>Recent Cover Letters</CardTitle>
53:       </CardHeader>
54:       <CardContent>
55:         {loading ? (
56:           <div className="space-y-3">
57:             {[...Array(3)].map((_, i) => (
58:               <Skeleton key={i} className="h-16" />
59:             ))}
60:           </div>
61:         ) : letters.length === 0 ? (
62:           <div className="text-sm text-muted-foreground">No cover letters yet.</div>
63:         ) : (
64:           <div className="space-y-3">
65:             {letters.map((l) => (
66:               <div key={l._id} className="flex items-center justify-between border rounded p-3">
67:                 <div className="text-sm">
68:                   <div className="font-medium">{l.jobTitle} @ {l.companyName}</div>
69:                   <div className="text-muted-foreground">{new Date(l.createdAt).toLocaleString()}</div>
70:                 </div>
71:                 <div className="flex gap-2">
72:                   <Button size="sm" variant="outline" onClick={() => download(l.content, `${l.companyName}_${l.jobTitle}`)}>
73:                     <Download className="h-4 w-4 mr-1" /> PDF
74:                   </Button>
75:                   <a href="/cover-letter" className="inline-flex items-center text-sm px-3 py-2 border rounded">
76:                     <FileText className="h-4 w-4 mr-1" /> New
77:                   </a>
78:                 </div>
79:               </div>
80:             ))}
81:           </div>
82:         )}
83:       </CardContent>
84:     </Card>
85:   )
86: }
</file>

<file path="src/app/dashboard/components/response-time-tracker.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Clock, TrendingUp, TrendingDown } from 'lucide-react'
  6: 
  7: interface ResponseMetrics {
  8:   averageResponseTime: number
  9:   fastestResponse: number
 10:   slowestResponse: number
 11:   totalResponses: number
 12:   trend: 'up' | 'down' | 'stable'
 13: }
 14: 
 15: export function ResponseTimeTracker() {
 16:   const [metrics, setMetrics] = useState<ResponseMetrics>({
 17:     averageResponseTime: 0,
 18:     fastestResponse: 0,
 19:     slowestResponse: 0,
 20:     totalResponses: 0,
 21:     trend: 'stable'
 22:   })
 23:   const [loading, setLoading] = useState(true)
 24: 
 25:   useEffect(() => {
 26:     fetchResponseMetrics()
 27:   }, [])
 28: 
 29:   const fetchResponseMetrics = async () => {
 30:     try {
 31:       const response = await fetch('/api/applications/response-metrics')
 32:       if (response.ok) {
 33:         const data = await response.json()
 34:         setMetrics(data)
 35:       }
 36:     } catch (error) {
 37:       console.error('[RESPONSE_METRICS] Error:', error)
 38:     } finally {
 39:       setLoading(false)
 40:     }
 41:   }
 42: 
 43:   const formatDays = (days: number) => {
 44:     if (days === 0) return 'N/A'
 45:     if (days < 1) return '< 1 day'
 46:     if (days === 1) return '1 day'
 47:     return `${Math.round(days)} days`
 48:   }
 49: 
 50:   if (loading) {
 51:     return (
 52:       <Card>
 53:         <CardHeader>
 54:           <CardTitle>Response Time Tracking</CardTitle>
 55:         </CardHeader>
 56:         <CardContent>
 57:           <div className="animate-pulse space-y-4">
 58:             <div className="h-20 bg-muted rounded"></div>
 59:             <div className="h-20 bg-muted rounded"></div>
 60:           </div>
 61:         </CardContent>
 62:       </Card>
 63:     )
 64:   }
 65: 
 66:   return (
 67:     <Card>
 68:       <CardHeader>
 69:         <CardTitle className="flex items-center gap-2">
 70:           <Clock className="w-5 h-5" />
 71:           Response Time Tracking
 72:         </CardTitle>
 73:       </CardHeader>
 74:       <CardContent>
 75:         <div className="space-y-6">
 76:           {/* Average Response Time */}
 77:           <div className="text-center p-6 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950 rounded-xl">
 78:             <div className="text-sm text-muted-foreground mb-2">Average Response Time</div>
 79:             <div className="text-4xl font-bold text-primary mb-2">
 80:               {formatDays(metrics.averageResponseTime)}
 81:             </div>
 82:             <div className="flex items-center justify-center gap-2 text-sm">
 83:               {metrics.trend === 'down' ? (
 84:                 <>
 85:                   <TrendingDown className="w-4 h-4 text-green-600" />
 86:                   <span className="text-green-600">Improving</span>
 87:                 </>
 88:               ) : metrics.trend === 'up' ? (
 89:                 <>
 90:                   <TrendingUp className="w-4 h-4 text-red-600" />
 91:                   <span className="text-red-600">Slowing</span>
 92:                 </>
 93:               ) : (
 94:                 <span className="text-muted-foreground">Stable</span>
 95:               )}
 96:             </div>
 97:           </div>
 98: 
 99:           {/* Stats Grid */}
100:           <div className="grid grid-cols-2 gap-4">
101:             <div className="p-4 bg-muted rounded-lg">
102:               <div className="text-xs text-muted-foreground mb-1">Fastest</div>
103:               <div className="text-2xl font-bold text-green-600">
104:                 {formatDays(metrics.fastestResponse)}
105:               </div>
106:             </div>
107:             <div className="p-4 bg-muted rounded-lg">
108:               <div className="text-xs text-muted-foreground mb-1">Slowest</div>
109:               <div className="text-2xl font-bold text-red-600">
110:                 {formatDays(metrics.slowestResponse)}
111:               </div>
112:             </div>
113:           </div>
114: 
115:           {/* Total Responses */}
116:           <div className="pt-4 border-t">
117:             <div className="flex items-center justify-between">
118:               <span className="text-sm text-muted-foreground">Total Responses</span>
119:               <span className="text-lg font-bold">{metrics.totalResponses}</span>
120:             </div>
121:           </div>
122: 
123:           {/* Insights */}
124:           {metrics.averageResponseTime > 0 && (
125:             <div className="p-4 bg-yellow-50 dark:bg-yellow-950 rounded-lg">
126:               <p className="text-sm text-yellow-800 dark:text-yellow-200">
127:                 {metrics.averageResponseTime <= 7 ? (
128:                   <>✨ Great! Companies are responding quickly to your applications.</>
129:                 ) : metrics.averageResponseTime <= 14 ? (
130:                   <>⏳ Average response time. Keep following up after 1 week.</>
131:                 ) : (
132:                   <>📧 Consider following up on applications older than 2 weeks.</>
133:                 )}
134:               </p>
135:             </div>
136:           )}
137:         </div>
138:       </CardContent>
139:     </Card>
140:   )
141: }
</file>

<file path="src/app/dashboard/components/trends-chart.tsx">
 1: 'use client'
 2: 
 3: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
 4: 
 5: // Simple trends display without external chart library
 6: export default function TrendsChart() {
 7:   const weeklyData = [
 8:     { week: 'W1', applications: 2 },
 9:     { week: 'W2', applications: 4 },
10:     { week: 'W3', applications: 3 },
11:     { week: 'W4', applications: 6 },
12:     { week: 'W5', applications: 5 },
13:     { week: 'W6', applications: 7 },
14:   ]
15: 
16:   const maxApps = Math.max(...weeklyData.map(d => d.applications))
17: 
18:   return (
19:     <Card className="glass-card">
20:       <CardHeader>
21:         <CardTitle>Application Trends</CardTitle>
22:       </CardHeader>
23:       <CardContent>
24:         <div className="space-y-3">
25:           {weeklyData.map((data) => (
26:             <div key={data.week} className="flex items-center gap-3">
27:               <span className="text-sm font-medium w-8 text-muted-foreground">{data.week}</span>
28:               <div className="flex-1 h-8 bg-secondary rounded-lg overflow-hidden">
29:                 <div
30:                   className="h-full bg-primary transition-all duration-500"
31:                   style={{ width: `${(data.applications / maxApps) * 100}%` }}
32:                 />
33:               </div>
34:               <span className="text-sm font-semibold w-8 text-right">{data.applications}</span>
35:             </div>
36:           ))}
37:         </div>
38:         <div className="mt-4 pt-4 border-t">
39:           <p className="text-sm text-muted-foreground">
40:             Total Applications: <span className="font-semibold text-foreground">{weeklyData.reduce((sum, d) => sum + d.applications, 0)}</span>
41:           </p>
42:         </div>
43:       </CardContent>
44:     </Card>
45:   )
46: }
</file>

<file path="src/app/dashboard/page.tsx">
 1: import { getServerSession } from 'next-auth/next'
 2: import { redirect } from 'next/navigation'
 3: import { authOptions } from '@/lib/auth'
 4: import { DashboardHeader } from './components/dashboard-header'
 5: import { QuickActions } from './components/quick-actions'
 6: import { RecentApplications } from './components/recent-applications'
 7: import { StatsOverview } from './components/stats-overview'
 8: import { Skeleton } from '@/components/ui/skeleton'
 9: import { MetricsHero } from './components/metrics-hero'
10: import dynamic from 'next/dynamic'
11: import { ActionCenter } from './components/action-center'
12: 
13: export default async function DashboardPage() {
14:   const session = await getServerSession(authOptions)
15: 
16:   if (!session) {
17:     redirect('/auth/signin')
18:   }
19: 
20:   const TrendsChart = dynamic(() => import('./components/trends-chart'), {
21:     ssr: false,
22:     loading: () => (
23:       <div className="space-y-3">
24:         <Skeleton className="h-6 w-40" />
25:         <Skeleton className="h-64 w-full" />
26:       </div>
27:     ),
28:   })
29: 
30:   const AIInsights = dynamic(() => import('./components/ai-insights'), {
31:     ssr: false,
32:     loading: () => (
33:       <div className="space-y-3">
34:         <Skeleton className="h-4 w-2/5" />
35:         <Skeleton className="h-14 w-full" />
36:         <Skeleton className="h-14 w-full" />
37:       </div>
38:     )
39:   })
40: 
41:   const RecentCoverLetters = dynamic(() => import('./components/recent-cover-letters').then(m => m.RecentCoverLetters), {
42:     ssr: false,
43:     loading: () => (
44:       <div className="space-y-3">
45:         <Skeleton className="h-5 w-48" />
46:         <Skeleton className="h-16 w-full" />
47:         <Skeleton className="h-16 w-full" />
48:       </div>
49:     )
50:   })
51: 
52:   return (
53:     <div className="min-h-screen bg-background">
54:       <main>
55:         <div className="dashboard-container grid grid-cols-1 lg:grid-cols-[1fr_340px] gap-8">
56:           <div className="space-y-8">
57:             <MetricsHero />
58:             <QuickActions />
59:             <ActionCenter />
60:             <TrendsChart />
61:             <RecentApplications />
62:           </div>
63:           <div className="space-y-8">
64:             <StatsOverview />
65:             <RecentCoverLetters />
66:             <AIInsights />
67:           </div>
68:         </div>
69:       </main>
70:     </div>
71:   )
72: }
</file>

<file path="src/app/interview-prep/components/interview-preparation.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
  7: import { Badge } from '@/components/ui/badge'
  8: import { Alert, AlertDescription } from '@/components/ui/alert'
  9: import { Progress } from '@/components/ui/progress'
 10: import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
 11: import {
 12:   Brain,
 13:   MessageSquare,
 14:   Target,
 15:   Clock,
 16:   CheckCircle,
 17:   AlertCircle,
 18:   Loader2,
 19:   Play,
 20:   BookOpen,
 21:   Users,
 22:   Lightbulb,
 23:   ChevronRight
 24: } from 'lucide-react'
 25: import JobApplication from '@/models/JobApplication'
 26: import toast from 'react-hot-toast'
 27: 
 28: interface InterviewPrepData {
 29:   companyOverview: {
 30:     name: string
 31:     industry: string
 32:     culture: string[]
 33:     recentNews: string[]
 34:     keyFacts: string[]
 35:   }
 36:   jobSpecificPrep: {
 37:     roleRequirements: string[]
 38:     technicalSkills: string[]
 39:     behavioralQuestions: Array<{
 40:       question: string
 41:       suggestedAnswer: string
 42:       tips: string[]
 43:     }>
 44:     technicalQuestions: Array<{
 45:       question: string
 46:       difficulty: 'beginner' | 'intermediate' | 'advanced'
 47:       suggestedAnswer: string
 48:       relatedSkills: string[]
 49:     }>
 50:   }
 51:   candidatePreparation: {
 52:     strengths: string[]
 53:     potentialConcerns: string[]
 54:     talkingPoints: string[]
 55:     salaryExpectations: {
 56:       range: string
 57:       justification: string
 58:       negotiationTips: string[]
 59:     }
 60:   }
 61:   practicePlan: {
 62:     timeline: Array<{
 63:       day: number
 64:       activities: string[]
 65:       focus: string
 66:     }>
 67:     mockInterviewQuestions: string[]
 68:     resources: Array<{
 69:       type: 'article' | 'video' | 'tool'
 70:       title: string
 71:       url: string
 72:       description: string
 73:     }>
 74:   }
 75: }
 76: 
 77: interface InterviewPreparationProps {
 78:   userId: string
 79: }
 80: 
 81: export function InterviewPreparation({ userId }: InterviewPreparationProps) {
 82:   const [applications, setApplications] = useState<any[]>([])
 83:   const [selectedApplication, setSelectedApplication] = useState<string>('')
 84:   const [prepData, setPrepData] = useState<InterviewPrepData | null>(null)
 85:   const [loading, setLoading] = useState(false)
 86:   const [activeTab, setActiveTab] = useState('overview')
 87: 
 88:   useEffect(() => {
 89:     fetchApplications()
 90:   }, [])
 91: 
 92:   const fetchApplications = async () => {
 93:     try {
 94:       const response = await fetch('/api/applications')
 95:       if (response.ok) {
 96:         const data = await response.json()
 97:         setApplications(data.applications || [])
 98:       }
 99:     } catch (error) {
100:       console.error('Failed to fetch applications:', error)
101:     }
102:   }
103: 
104:   const generatePreparation = async () => {
105:     if (!selectedApplication) {
106:       toast.error('Please select a job application')
107:       return
108:     }
109: 
110:     setLoading(true)
111:     try {
112:       const response = await fetch('/api/interview/prepare', {
113:         method: 'POST',
114:         headers: {
115:           'Content-Type': 'application/json',
116:         },
117:         body: JSON.stringify({
118:           jobApplicationId: selectedApplication,
119:         }),
120:       })
121: 
122:       if (!response.ok) {
123:         const errorData = await response.json()
124:         throw new Error(errorData.error || 'Failed to generate preparation')
125:       }
126: 
127:       const data = await response.json()
128:       setPrepData(data.preparation)
129:       toast.success('Interview preparation generated successfully!')
130:     } catch (error) {
131:       console.error('Preparation error:', error)
132:       toast.error(error instanceof Error ? error.message : 'Failed to generate preparation')
133:     } finally {
134:       setLoading(false)
135:     }
136:   }
137: 
138:   const getDifficultyColor = (difficulty: string) => {
139:     switch (difficulty) {
140:       case 'beginner': return 'bg-green-100 text-green-800'
141:       case 'intermediate': return 'bg-yellow-100 text-yellow-800'
142:       case 'advanced': return 'bg-red-100 text-red-800'
143:       default: return 'bg-muted text-foreground'
144:     }
145:   }
146: 
147:   return (
148:     <div className="space-y-8">
149:       {/* Job Selection */}
150:       <Card>
151:         <CardHeader>
152:           <CardTitle className="flex items-center gap-2">
153:             <Target className="h-5 w-5" />
154:             Select Job Application
155:           </CardTitle>
156:           <CardDescription>
157:             Choose the job application you want to prepare for
158:           </CardDescription>
159:         </CardHeader>
160:         <CardContent className="space-y-4">
161:           <div className="flex gap-4">
162:             <div className="flex-1">
163:               <Select value={selectedApplication} onValueChange={setSelectedApplication}>
164:                 <SelectTrigger>
165:                   <SelectValue placeholder="Select a job application" />
166:                 </SelectTrigger>
167:                 <SelectContent>
168:                   {applications.map((app) => (
169:                     <SelectItem key={app._id} value={app._id}>
170:                       {app.jobTitle} at {app.companyName}
171:                     </SelectItem>
172:                   ))}
173:                 </SelectContent>
174:               </Select>
175:             </div>
176:             <Button
177:               onClick={generatePreparation}
178:               disabled={loading || !selectedApplication}
179:               className="min-w-[140px]"
180:             >
181:               {loading ? (
182:                 <>
183:                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
184:                   Generating...
185:                 </>
186:               ) : (
187:                 <>
188:                   <Brain className="mr-2 h-4 w-4" />
189:                   Prepare
190:                 </>
191:               )}
192:             </Button>
193:           </div>
194:         </CardContent>
195:       </Card>
196: 
197:       {/* Preparation Content */}
198:       {prepData && (
199:         <div className="space-y-6">
200:           <Alert>
201:             <CheckCircle className="h-4 w-4" />
202:             <AlertDescription>
203:               Interview preparation generated for {prepData.companyOverview.name} - {prepData.jobSpecificPrep.roleRequirements[0]}
204:             </AlertDescription>
205:           </Alert>
206: 
207:           <Tabs value={activeTab} onValueChange={setActiveTab}>
208:             <TabsList className="grid w-full grid-cols-5">
209:               <TabsTrigger value="overview">Overview</TabsTrigger>
210:               <TabsTrigger value="questions">Questions</TabsTrigger>
211:               <TabsTrigger value="preparation">Preparation</TabsTrigger>
212:               <TabsTrigger value="practice">Practice</TabsTrigger>
213:               <TabsTrigger value="resources">Resources</TabsTrigger>
214:             </TabsList>
215: 
216:             <TabsContent value="overview" className="space-y-6">
217:               {/* Company Overview */}
218:               <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
219:                 <Card>
220:                   <CardHeader>
221:                     <CardTitle>Company Overview</CardTitle>
222:                     <CardDescription>Get to know {prepData.companyOverview.name}</CardDescription>
223:                   </CardHeader>
224:                   <CardContent className="space-y-4">
225:                     <div>
226:                       <h4 className="font-medium text-foreground mb-2">Industry</h4>
227:                       <p className="text-muted-foreground">{prepData.companyOverview.industry}</p>
228:                     </div>
229:                     <div>
230:                       <h4 className="font-medium text-foreground mb-2">Key Facts</h4>
231:                       <ul className="space-y-1">
232:                         {prepData.companyOverview.keyFacts.map((fact, index) => (
233:                           <li key={index} className="text-sm text-muted-foreground flex items-center gap-2">
234:                             <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
235:                             {fact}
236:                           </li>
237:                         ))}
238:                       </ul>
239:                     </div>
240:                   </CardContent>
241:                 </Card>
242: 
243:                 <Card>
244:                   <CardHeader>
245:                     <CardTitle>Company Culture</CardTitle>
246:                     <CardDescription>Values and work environment</CardDescription>
247:                   </CardHeader>
248:                   <CardContent>
249:                     <div className="flex flex-wrap gap-2">
250:                       {prepData.companyOverview.culture.map((value, index) => (
251:                         <Badge key={index} variant="secondary">
252:                           {value}
253:                         </Badge>
254:                       ))}
255:                     </div>
256:                   </CardContent>
257:                 </Card>
258:               </div>
259: 
260:               {/* Role Requirements */}
261:               <Card>
262:                 <CardHeader>
263:                   <CardTitle>Role Requirements</CardTitle>
264:                   <CardDescription>What the company is looking for</CardDescription>
265:                 </CardHeader>
266:                 <CardContent>
267:                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
268:                     <div>
269:                       <h4 className="font-medium text-foreground mb-2">Key Requirements</h4>
270:                       <ul className="space-y-2">
271:                         {prepData.jobSpecificPrep.roleRequirements.map((req, index) => (
272:                           <li key={index} className="flex items-center gap-2 text-sm">
273:                             <CheckCircle className="h-4 w-4 text-green-500" />
274:                             {req}
275:                           </li>
276:                         ))}
277:                       </ul>
278:                     </div>
279:                     <div>
280:                       <h4 className="font-medium text-foreground mb-2">Technical Skills</h4>
281:                       <div className="flex flex-wrap gap-2">
282:                         {prepData.jobSpecificPrep.technicalSkills.map((skill, index) => (
283:                           <Badge key={index} variant="outline">
284:                             {skill}
285:                           </Badge>
286:                         ))}
287:                       </div>
288:                     </div>
289:                   </div>
290:                 </CardContent>
291:               </Card>
292:             </TabsContent>
293: 
294:             <TabsContent value="questions" className="space-y-6">
295:               <Tabs defaultValue="behavioral">
296:                 <TabsList>
297:                   <TabsTrigger value="behavioral">Behavioral</TabsTrigger>
298:                   <TabsTrigger value="technical">Technical</TabsTrigger>
299:                 </TabsList>
300: 
301:                 <TabsContent value="behavioral" className="space-y-4">
302:                   <div className="space-y-4">
303:                     {prepData.jobSpecificPrep.behavioralQuestions.map((item, index) => (
304:                       <Card key={index}>
305:                         <CardHeader>
306:                           <CardTitle className="text-lg">{item.question}</CardTitle>
307:                         </CardHeader>
308:                         <CardContent className="space-y-4">
309:                           <div>
310:                             <h4 className="font-medium text-foreground mb-2">Suggested Answer</h4>
311:                             <p className="text-foreground leading-relaxed">{item.suggestedAnswer}</p>
312:                           </div>
313:                           <div>
314:                             <h4 className="font-medium text-foreground mb-2">Tips</h4>
315:                             <ul className="space-y-1">
316:                               {item.tips.map((tip, tipIndex) => (
317:                                 <li key={tipIndex} className="text-sm text-muted-foreground flex items-start gap-2">
318:                                   <ChevronRight className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
319:                                   {tip}
320:                                 </li>
321:                               ))}
322:                             </ul>
323:                           </div>
324:                         </CardContent>
325:                       </Card>
326:                     ))}
327:                   </div>
328:                 </TabsContent>
329: 
330:                 <TabsContent value="technical" className="space-y-4">
331:                   <div className="space-y-4">
332:                     {prepData.jobSpecificPrep.technicalQuestions.map((item, index) => (
333:                       <Card key={index}>
334:                         <CardHeader>
335:                           <div className="flex items-center justify-between">
336:                             <CardTitle className="text-lg">{item.question}</CardTitle>
337:                             <Badge className={getDifficultyColor(item.difficulty)}>
338:                               {item.difficulty}
339:                             </Badge>
340:                           </div>
341:                         </CardHeader>
342:                         <CardContent className="space-y-4">
343:                           <div>
344:                             <h4 className="font-medium text-foreground mb-2">Suggested Answer</h4>
345:                             <p className="text-foreground leading-relaxed">{item.suggestedAnswer}</p>
346:                           </div>
347:                           <div>
348:                             <h4 className="font-medium text-foreground mb-2">Related Skills</h4>
349:                             <div className="flex flex-wrap gap-2">
350:                               {item.relatedSkills.map((skill, skillIndex) => (
351:                                 <Badge key={skillIndex} variant="outline">
352:                                   {skill}
353:                                 </Badge>
354:                               ))}
355:                             </div>
356:                           </div>
357:                         </CardContent>
358:                       </Card>
359:                     ))}
360:                   </div>
361:                 </TabsContent>
362:               </Tabs>
363:             </TabsContent>
364: 
365:             <TabsContent value="preparation" className="space-y-6">
366:               {/* Your Strengths */}
367:               <Card>
368:                 <CardHeader>
369:                   <CardTitle className="flex items-center gap-2 text-green-700">
370:                     <CheckCircle className="h-5 w-5" />
371:                     Your Strengths
372:                   </CardTitle>
373:                   <CardDescription>What you bring to the table</CardDescription>
374:                 </CardHeader>
375:                 <CardContent>
376:                   <ul className="space-y-2">
377:                     {prepData.candidatePreparation.strengths.map((strength, index) => (
378:                       <li key={index} className="flex items-center gap-2">
379:                         <div className="w-2 h-2 bg-green-500 rounded-full"></div>
380:                         <span>{strength}</span>
381:                       </li>
382:                     ))}
383:                   </ul>
384:                 </CardContent>
385:               </Card>
386: 
387:               {/* Talking Points */}
388:               <Card>
389:                 <CardHeader>
390:                   <CardTitle className="flex items-center gap-2">
391:                     <MessageSquare className="h-5 w-5" />
392:                     Key Talking Points
393:                   </CardTitle>
394:                   <CardDescription>Points to emphasize during the interview</CardDescription>
395:                 </CardHeader>
396:                 <CardContent>
397:                   <ul className="space-y-3">
398:                     {prepData.candidatePreparation.talkingPoints.map((point, index) => (
399:                       <li key={index} className="flex items-start gap-3">
400:                         <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
401:                           <span className="text-xs font-bold text-blue-600">{index + 1}</span>
402:                         </div>
403:                         <span className="text-foreground">{point}</span>
404:                       </li>
405:                     ))}
406:                   </ul>
407:                 </CardContent>
408:               </Card>
409: 
410:               {/* Salary Expectations */}
411:               <Card>
412:                 <CardHeader>
413:                   <CardTitle className="flex items-center gap-2">
414:                     <Target className="h-5 w-5" />
415:                     Salary Expectations
416:                   </CardTitle>
417:                   <CardDescription>Negotiation preparation</CardDescription>
418:                 </CardHeader>
419:                 <CardContent className="space-y-4">
420:                   <div className="bg-green-50 p-4 rounded-lg">
421:                     <h4 className="font-medium text-green-800 mb-2">Suggested Range</h4>
422:                     <p className="text-lg font-semibold text-green-700">{prepData.candidatePreparation.salaryExpectations.range}</p>
423:                     <p className="text-sm text-green-600 mt-1">{prepData.candidatePreparation.salaryExpectations.justification}</p>
424:                   </div>
425:                   <div>
426:                     <h4 className="font-medium text-foreground mb-2">Negotiation Tips</h4>
427:                     <ul className="space-y-2">
428:                       {prepData.candidatePreparation.salaryExpectations.negotiationTips.map((tip, index) => (
429:                         <li key={index} className="flex items-start gap-2 text-sm">
430:                           <Lightbulb className="h-4 w-4 text-yellow-500 mt-0.5 flex-shrink-0" />
431:                           {tip}
432:                         </li>
433:                       ))}
434:                     </ul>
435:                   </div>
436:                 </CardContent>
437:               </Card>
438:             </TabsContent>
439: 
440:             <TabsContent value="practice" className="space-y-6">
441:               {/* Practice Timeline */}
442:               <Card>
443:                 <CardHeader>
444:                   <CardTitle className="flex items-center gap-2">
445:                     <Clock className="h-5 w-5" />
446:                     Practice Timeline
447:                   </CardTitle>
448:                   <CardDescription>Your 4-day interview preparation plan</CardDescription>
449:                 </CardHeader>
450:                 <CardContent>
451:                   <div className="space-y-4">
452:                     {prepData.practicePlan.timeline.map((day, index) => (
453:                       <div key={index} className="border rounded-lg p-4">
454:                         <div className="flex items-center gap-3 mb-3">
455:                           <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
456:                             <span className="text-sm font-bold text-blue-600">D{day.day}</span>
457:                           </div>
458:                           <div>
459:                             <h4 className="font-medium">Day {day.day}</h4>
460:                             <p className="text-sm text-muted-foreground">{day.focus}</p>
461:                           </div>
462:                         </div>
463:                         <ul className="space-y-1 ml-11">
464:                           {day.activities.map((activity, actIndex) => (
465:                             <li key={actIndex} className="text-sm text-foreground flex items-center gap-2">
466:                               <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
467:                               {activity}
468:                             </li>
469:                           ))}
470:                         </ul>
471:                       </div>
472:                     ))}
473:                   </div>
474:                 </CardContent>
475:               </Card>
476: 
477:               {/* Mock Interview Questions */}
478:               <Card>
479:                 <CardHeader>
480:                   <CardTitle className="flex items-center gap-2">
481:                     <Play className="h-5 w-5" />
482:                     Mock Interview Questions
483:                   </CardTitle>
484:                   <CardDescription>Practice questions for mock interviews</CardDescription>
485:                 </CardHeader>
486:                 <CardContent>
487:                   <div className="space-y-3">
488:                     {prepData.practicePlan.mockInterviewQuestions.map((question, index) => (
489:                       <div key={index} className="flex items-start gap-3 p-3 bg-background rounded-lg">
490:                         <div className="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
491:                           <span className="text-xs font-bold text-purple-600">{index + 1}</span>
492:                         </div>
493:                         <span className="text-foreground">{question}</span>
494:                       </div>
495:                     ))}
496:                   </div>
497:                 </CardContent>
498:               </Card>
499:             </TabsContent>
500: 
501:             <TabsContent value="resources" className="space-y-6">
502:               <Card>
503:                 <CardHeader>
504:                   <CardTitle className="flex items-center gap-2">
505:                     <BookOpen className="h-5 w-5" />
506:                     Recommended Resources
507:                   </CardTitle>
508:                   <CardDescription>Additional materials to enhance your preparation</CardDescription>
509:                 </CardHeader>
510:                 <CardContent>
511:                   <div className="space-y-4">
512:                     {prepData.practicePlan.resources.map((resource, index) => (
513:                       <div key={index} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
514:                         <div className="flex items-start gap-3">
515:                           <div className="p-2 bg-blue-100 rounded-lg">
516:                             {resource.type === 'video' && <Play className="h-4 w-4 text-blue-600" />}
517:                             {resource.type === 'article' && <BookOpen className="h-4 w-4 text-blue-600" />}
518:                             {resource.type === 'tool' && <Target className="h-4 w-4 text-blue-600" />}
519:                           </div>
520:                           <div className="flex-1">
521:                             <h4 className="font-medium text-foreground">{resource.title}</h4>
522:                             <p className="text-sm text-muted-foreground mt-1">{resource.description}</p>
523:                             <div className="flex items-center gap-2 mt-2">
524:                               <Badge variant="outline" className="text-xs">
525:                                 {resource.type}
526:                               </Badge>
527:                               <Button variant="ghost" size="sm" className="text-xs">
528:                                 Access Resource
529:                                 <ChevronRight className="ml-1 h-3 w-3" />
530:                               </Button>
531:                             </div>
532:                           </div>
533:                         </div>
534:                       </div>
535:                     ))}
536:                   </div>
537:                 </CardContent>
538:               </Card>
539:             </TabsContent>
540:           </Tabs>
541:         </div>
542:       )}
543:     </div>
544:   )
545: }
</file>

<file path="src/app/job-boards/components/job-boards-dashboard.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect, useCallback } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Badge } from '@/components/ui/badge'
  7: import { Checkbox } from '@/components/ui/checkbox'
  8: import { Alert, AlertDescription } from '@/components/ui/alert'
  9: import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
 10: import { Input } from '@/components/ui/input'
 11: import { Label } from '@/components/ui/label'
 12: import { Progress } from '@/components/ui/progress'
 13: import {
 14:   Send,
 15:   CheckCircle,
 16:   AlertTriangle,
 17:   Zap,
 18:   Target,
 19:   TrendingUp,
 20:   Clock,
 21:   Settings,
 22:   ExternalLink,
 23:   Play,
 24:   Pause,
 25:   RefreshCw,
 26:   Users,
 27:   Building,
 28:   Briefcase,
 29:   FileText,
 30:   Link,
 31:   Globe,
 32:   Loader2
 33: } from 'lucide-react'
 34: import toast from 'react-hot-toast'
 35: import { useSession } from 'next-auth/react'
 36: 
 37: interface JobBoard {
 38:   id: string
 39:   name: string
 40:   automationLevel: 'full' | 'partial' | 'manual'
 41:   loginRequired: boolean
 42:   features: {
 43:     fileUpload: boolean
 44:     coverLetter: boolean
 45:     autoSubmit: boolean
 46:   }
 47:   status: 'connected' | 'disconnected' | 'error'
 48:   lastUsed?: Date
 49:   successRate?: number
 50:   totalApplications?: number
 51: }
 52: 
 53: interface BulkSubmission {
 54:   selectedBoards: string[]
 55:   selectedApplications: string[]
 56:   status: 'idle' | 'running' | 'completed' | 'failed'
 57:   progress: number
 58:   results?: any[]
 59: }
 60: 
 61: interface JobBoardsDashboardProps {
 62:   userId: string
 63: }
 64: 
 65: export function JobBoardsDashboard({ userId }: JobBoardsDashboardProps) {
 66:   const { data: session } = useSession()
 67:   const [jobBoards, setJobBoards] = useState<JobBoard[]>([])
 68:   const [applications, setApplications] = useState<any[]>([])
 69:   const [selectedBoards, setSelectedBoards] = useState<string[]>([])
 70:   const [selectedApplications, setSelectedApplications] = useState<string[]>([])
 71:   const [bulkSubmission, setBulkSubmission] = useState<BulkSubmission>({
 72:     selectedBoards: [],
 73:     selectedApplications: [],
 74:     status: 'idle',
 75:     progress: 0
 76:   })
 77:   const [isLoading, setIsLoading] = useState(true)
 78:   const [autoPilotEnabled, setAutoPilotEnabled] = useState(true)
 79:   const [jobsByBoard, setJobsByBoard] = useState<Record<string, Array<{ title?: string; url?: string; company?: string; location?: string }>>>({})
 80:   const [jobsLoading, setJobsLoading] = useState<Record<string, boolean>>({})
 81:   const [jobsOpen, setJobsOpen] = useState<Record<string, boolean>>({})
 82:   const [autoPilotSettings, setAutoPilotSettings] = useState({
 83:     dailyLimit: 10,
 84:     jobBoards: [],
 85:     keywords: '',
 86:     locations: '',
 87:     salaryRange: { min: 0, max: 0 },
 88:     timeoutMs: 120000
 89:   })
 90:   const [autoPilotResults, setAutoPilotResults] = useState<Array<{ title?: string; url: string; company?: string; location?: string; source?: string }>>([])
 91:   const [autoPilotRunning, setAutoPilotRunning] = useState(false)
 92:   const [progress, setProgress] = useState<{ percent: number; stage: string }>({ percent: 0, stage: 'Idle' })
 93:   const [qualityMode, setQualityMode] = useState<'speed'|'quality'>('speed')
 94:   const [filters, setFilters] = useState<{ workType: 'any'|'remote'|'hybrid'|'onsite'; experienceLevel: 'any'|'entry'|'mid'|'senior'|'executive'; salaryMin?: number; maxResults?: number }>({ workType: 'any', experienceLevel: 'any', salaryMin: undefined, maxResults: 15 })
 95: 
 96:   // Load job boards and applications
 97:   useEffect(() => {
 98:     loadData()
 99:   }, [])
100: 
101:   // When Auto-Pilot is enabled, try to prefill keywords/locations from resume/profile
102:   useEffect(() => {
103:     if (!autoPilotEnabled) return
104:     (async () => {
105:       try {
106:         // Prefill location from profile
107:         const prof = await fetch('/api/profile')
108:         if (prof.ok) {
109:           const pj = await prof.json()
110:           if (pj?.profile?.location) {
111:             setAutoPilotSettings(prev => ({ ...prev, locations: pj.profile.location }))
112:           }
113:         }
114:       } catch {}
115:       try {
116:         // Prefill keywords from resume titles (best-effort)
117:         const res = await fetch('/api/resume/list')
118:         if (res.ok) {
119:           const rj = await res.json()
120:           const txt: string = rj?.resumes?.[0]?.extractedText || ''
121:           if (txt && txt.length > 50) {
122:             const firstLines = txt.split(/\n|\r/).slice(0, 12).join(' ')
123:             const words = firstLines.match(/[A-Za-z][A-Za-z+\-]{2,}/g) || []
124:             const top = Array.from(new Set(words)).slice(0, 8).join(', ')
125:             if (top) setAutoPilotSettings(prev => ({ ...prev, keywords: top }))
126:           }
127:         }
128:       } catch {}
129:     })()
130:   }, [autoPilotEnabled])
131: 
132:   const loadData = async () => {
133:     setIsLoading(true)
134:     try {
135:       // Load available job boards
136:       const boardsResponse = await fetch('/api/job-boards/submit')
137:       const boardsData = await boardsResponse.json()
138: 
139:       // Load user's job applications
140:       const appsResponse = await fetch('/api/applications')
141:       const appsData = await appsResponse.json()
142: 
143:       // Load profile to prefill autopilot
144:       try {
145:         const profRes = await fetch('/api/profile')
146:         if (profRes.ok) {
147:           const pj = await profRes.json()
148:           const p = pj?.profile || {}
149:           setAutoPilotSettings(prev => ({
150:             ...prev,
151:             keywords: (p.skills && Array.isArray(p.skills) ? p.skills.slice(0, 8).join(', ') : prev.keywords),
152:             locations: (typeof p.location === 'string' && p.location) ? p.location : prev.locations,
153:           }))
154:         }
155:       } catch {}
156: 
157:       if (boardsData.success) {
158:         // Load user's job board integrations from database
159:         const integrationsResponse = await fetch('/api/job-boards/integrations')
160:         const integrationsData = await integrationsResponse.json()
161: 
162:         // Enhance job board data with user-specific status
163:         const enhancedBoards = boardsData.jobBoards.map((board: any) => {
164:           const integration = integrationsData.success ?
165:             integrationsData.integrations.find((i: any) => i.boardName === board.id) : null
166: 
167:           return {
168:             ...board,
169:             status: integration ? integration.status : 'disconnected',
170:             lastUsed: integration ? integration.lastApplicationAt : undefined,
171:             successRate: integration ?
172:               Math.round((integration.successfulApplications / Math.max(integration.totalApplications, 1)) * 100) : 0,
173:             totalApplications: integration ? integration.totalApplications : 0
174:           }
175:         })
176:         setJobBoards(enhancedBoards)
177:       }
178: 
179:       if (appsData.applications) {
180:         // Map to fields this UI expects minimally
181:         const mapped = appsData.applications.map((app: any) => ({
182:           _id: app._id,
183:           jobTitle: app.jobTitle,
184:           company: app.companyName, // UI uses company
185:           status: app.applicationStatus, // UI uses status
186:           createdAt: app.createdAt,
187:         }))
188:         setApplications(mapped)
189:       }
190:     } catch (error) {
191:       console.error('Failed to load data:', error)
192:       toast.error('Failed to load job board data')
193:     } finally {
194:       setIsLoading(false)
195:     }
196:   }
197: 
198:   const handleBoardSelection = (boardId: string, checked: boolean) => {
199:     setSelectedBoards(prev =>
200:       checked
201:         ? [...prev, boardId]
202:         : prev.filter(id => id !== boardId)
203:     )
204:   }
205: 
206:   const handleApplicationSelection = (appId: string, checked: boolean) => {
207:     setSelectedApplications(prev =>
208:       checked
209:         ? [...prev, appId]
210:         : prev.filter(id => id !== appId)
211:     )
212:   }
213: 
214:   const handleBulkSubmit = async () => {
215:     if (selectedBoards.length === 0 || selectedApplications.length === 0) {
216:       toast.error('Please select both job boards and applications')
217:       return
218:     }
219: 
220:     setBulkSubmission({
221:       selectedBoards,
222:       selectedApplications,
223:       status: 'running',
224:       progress: 0
225:     })
226: 
227:     try {
228:       const totalOperations = selectedBoards.length * selectedApplications.length
229:       let completedOperations = 0
230: 
231:       const results: any[] = []
232: 
233:       for (const boardId of selectedBoards) {
234:         for (const appId of selectedApplications) {
235:           try {
236:             const response = await fetch('/api/job-boards/submit', {
237:               method: 'POST',
238:               headers: {
239:                 'Content-Type': 'application/json',
240:               },
241:               body: JSON.stringify({
242:                 jobApplicationId: appId,
243:                 jobBoards: [boardId],
244:                 customizations: {}
245:               }),
246:             })
247: 
248:             const result = await response.json()
249:             results.push({ boardId, appId, ...result })
250: 
251:             completedOperations++
252:             setBulkSubmission(prev => ({
253:               ...prev,
254:               progress: (completedOperations / totalOperations) * 100
255:             }))
256: 
257:             // Small delay to avoid rate limiting
258:             await new Promise(resolve => setTimeout(resolve, 1000))
259:           } catch (error) {
260:             console.error(`Failed to submit ${appId} to ${boardId}:`, error)
261:             results.push({
262:               boardId,
263:               appId,
264:               success: false,
265:               error: error instanceof Error ? error.message : 'Unknown error'
266:             })
267: 
268:             completedOperations++
269:             setBulkSubmission(prev => ({
270:               ...prev,
271:               progress: (completedOperations / totalOperations) * 100
272:             }))
273:           }
274:         }
275:       }
276: 
277:       setBulkSubmission(prev => ({
278:         ...prev,
279:         status: 'completed',
280:         results
281:       }))
282: 
283:       const successful = results.filter(r => r.success).length
284:       toast.success(`Successfully submitted to ${successful} out of ${results.length} positions`)
285: 
286:       // Reset selections
287:       setSelectedBoards([])
288:       setSelectedApplications([])
289: 
290:     } catch (error) {
291:       console.error('Bulk submission error:', error)
292:       setBulkSubmission(prev => ({
293:         ...prev,
294:         status: 'failed'
295:       }))
296:       toast.error('Bulk submission failed')
297:     }
298:   }
299: 
300:   const connectToBoard = async (boardId: string) => {
301:     try {
302:       // Initiate OAuth flow
303:       const response = await fetch('/api/job-boards/oauth/authorize', {
304:         method: 'POST',
305:         headers: {
306:           'Content-Type': 'application/json',
307:         },
308:         body: JSON.stringify({ boardName: boardId }),
309:       })
310: 
311:       const data = await response.json()
312: 
313:       if (data.success && data.authUrl) {
314:         // Redirect to OAuth authorization URL
315:         window.location.href = data.authUrl
316:       } else {
317:         throw new Error(data.error || 'Failed to initiate OAuth flow')
318:       }
319:     } catch (error) {
320:       console.error('Failed to connect to job board:', error)
321:       toast.error(`Failed to connect to ${jobBoards.find(b => b.id === boardId)?.name}`)
322:     }
323:   }
324: 
325:   const syncJobs = async (boardId: string) => {
326:     try {
327:       const resp = await fetch('/api/job-boards/jobs/sync', {
328:         method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId })
329:       })
330:       const json = await resp.json()
331:       if (!resp.ok || !json.success) throw new Error(json.error || 'Sync failed')
332:       toast.success(`Imported ${json.created} new, updated ${json.updated}`)
333:     } catch (e) {
334:       toast.error('Failed to sync jobs')
335:     }
336:   }
337: 
338:   const loadBoardJobs = async (boardId: string) => {
339:     setJobsLoading(prev => ({ ...prev, [boardId]: true }))
340:     try {
341:       const resp = await fetch('/api/job-boards/jobs/list', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId }) })
342:       const reqId = resp.headers.get('x-request-id') || ''
343:       const json = await resp.json().catch(()=>({}))
344:       if (!resp.ok || !json.success) {
345:         if (resp.status === 401) toast.error('Please re-connect this integration' + (reqId ? ` (Ref: ${reqId})` : ''))
346:         else toast.error((json.error || 'Failed to load jobs') + (reqId ? ` (Ref: ${reqId})` : ''))
347:         return
348:       }
349:       const jobs = (json.jobs || []).map((j: any) => ({ title: j.title || j.position || j.name, url: j.url || j.link, company: j.company || j.companyName, location: j.location }))
350:       setJobsByBoard(prev => ({ ...prev, [boardId]: jobs }))
351:       setJobsOpen(prev => ({ ...prev, [boardId]: true }))
352:     } catch {
353:       toast.error('Failed to load jobs')
354:     } finally {
355:       setJobsLoading(prev => ({ ...prev, [boardId]: false }))
356:     }
357:   }
358: 
359:   const getAutomationBadgeColor = (level: string) => {
360:     switch (level) {
361:       case 'full': return 'bg-green-100 text-green-800'
362:       case 'partial': return 'bg-yellow-100 text-yellow-800'
363:       default: return 'bg-muted text-foreground'
364:     }
365:   }
366: 
367:   const getStatusBadgeColor = (status: string) => {
368:     switch (status) {
369:       case 'connected': return 'bg-green-100 text-green-800'
370:       case 'error': return 'bg-red-100 text-red-800'
371:       default: return 'bg-muted text-foreground'
372:     }
373:   }
374: 
375:   // Stats calculation
376:   const stats = {
377:     totalBoards: jobBoards.length,
378:     connectedBoards: jobBoards.filter(b => b.status === 'connected').length,
379:     totalApplications: applications.length,
380:     successfulApplications: applications.filter(a => a.status === 'offer').length,
381:     automationRate: Math.round((jobBoards.filter(b => b.automationLevel === 'full').length / jobBoards.length) * 100)
382:   }
383: 
384:   if (isLoading) {
385:     return (
386:       <div className="space-y-8">
387:         <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
388:           {[...Array(4)].map((_, i) => (
389:             <Card key={i}>
390:               <CardContent className="p-6">
391:                 <div className="animate-pulse">
392:                   <div className="w-16 h-4 bg-gray-200 rounded mb-2"></div>
393:                   <div className="w-8 h-8 bg-gray-200 rounded"></div>
394:                 </div>
395:               </CardContent>
396:             </Card>
397:           ))}
398:         </div>
399:         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
400:           {[...Array(6)].map((_, i) => (
401:             <Card key={i}>
402:               <CardContent className="p-6">
403:                 <div className="animate-pulse">
404:                   <div className="w-24 h-6 bg-gray-200 rounded mb-4"></div>
405:                   <div className="w-full h-20 bg-gray-200 rounded"></div>
406:                 </div>
407:               </CardContent>
408:             </Card>
409:           ))}
410:         </div>
411:       </div>
412:     )
413:   }
414: 
415:   return (
416:     <div className="space-y-8">
417:       {/* Stats Overview */}
418:       <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
419:         <Card>
420:           <CardContent className="p-6">
421:             <div className="flex items-center justify-between">
422:               <div>
423:                 <p className="text-sm font-medium text-muted-foreground">Connected Boards</p>
424:                 <p className="text-2xl font-bold">{stats.connectedBoards}/{stats.totalBoards}</p>
425:               </div>
426:               <Globe className="h-8 w-8 text-blue-600" />
427:             </div>
428:           </CardContent>
429:         </Card>
430: 
431:         <Card>
432:           <CardContent className="p-6">
433:             <div className="flex items-center justify-between">
434:               <div>
435:                 <p className="text-sm font-medium text-muted-foreground">Applications</p>
436:                 <p className="text-2xl font-bold">{stats.successfulApplications}/{stats.totalApplications}</p>
437:               </div>
438:               <Briefcase className="h-8 w-8 text-green-600" />
439:             </div>
440:           </CardContent>
441:         </Card>
442: 
443:         <Card>
444:           <CardContent className="p-6">
445:             <div className="flex items-center justify-between">
446:               <div>
447:                 <p className="text-sm font-medium text-muted-foreground">Automation Rate</p>
448:                 <p className="text-2xl font-bold">{stats.automationRate}%</p>
449:               </div>
450:               <Zap className="h-8 w-8 text-purple-600" />
451:             </div>
452:           </CardContent>
453:         </Card>
454: 
455:         <Card>
456:           <CardContent className="p-6">
457:             <div className="flex items-center justify-between">
458:               <div>
459:                 <p className="text-sm font-medium text-muted-foreground">Success Rate</p>
460:                 <p className="text-2xl font-bold">
461:                   {stats.totalApplications > 0
462:                     ? Math.round((stats.successfulApplications / stats.totalApplications) * 100)
463:                     : 0}%
464:                 </p>
465:               </div>
466:               <TrendingUp className="h-8 w-8 text-orange-600" />
467:             </div>
468:           </CardContent>
469:         </Card>
470:       </div>
471: 
472:       {/* Auto-Pilot Settings */}
473:       <Card>
474:         <CardHeader>
475:           <CardTitle className="flex items-center gap-2">
476:             <Zap className="h-5 w-5" />
477:             Auto-Pilot Mode
478:           </CardTitle>
479:           <CardDescription>
480:             Automatically find and apply to jobs matching your criteria
481:           </CardDescription>
482:         </CardHeader>
483:         <CardContent>
484:           {/* Autopilot status */}
485:           <div className="mb-3 text-sm text-foreground">
486:             <AutopilotStatus />
487:           </div>
488:           <div className="flex items-center justify-between mb-4">
489:             <div>
490:               <h4 className="font-medium">Enable Auto-Pilot</h4>
491:               <p className="text-sm text-muted-foreground">
492:                 Let Career Lever AI automatically find and apply to relevant positions
493:               </p>
494:             </div>
495:             <Button
496:               variant={autoPilotEnabled ? "default" : "outline"}
497:               onClick={() => setAutoPilotEnabled(!autoPilotEnabled)}
498:             >
499:               {autoPilotEnabled ? <Pause className="w-4 h-4 mr-2" /> : <Play className="w-4 h-4 mr-2" />}
500:               {autoPilotEnabled ? 'Disable' : 'Enable'} Auto-Pilot
501:             </Button>
502:           </div>
503: 
504:           {autoPilotEnabled && (
505:             <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-4 bg-background rounded-lg">
506:               <div className="space-y-4">
507:                 <div>
508:                   <Label htmlFor="dailyLimit">Daily Application Limit</Label>
509:                   <Input
510:                     id="dailyLimit"
511:                     type="number"
512:                     value={autoPilotSettings.dailyLimit}
513:                     onChange={(e) => setAutoPilotSettings(prev => ({
514:                       ...prev,
515:                       dailyLimit: parseInt(e.target.value)
516:                     }))}
517:                     min="1"
518:                     max="50"
519:                   />
520:                 </div>
521:                 <div>
522:                   <Label htmlFor="keywords">Keywords</Label>
523:                   <Input
524:                     id="keywords"
525:                     value={autoPilotSettings.keywords}
526:                     onChange={(e) => setAutoPilotSettings(prev => ({
527:                       ...prev,
528:                       keywords: e.target.value
529:                     }))}
530:                     placeholder="e.g., software engineer, react, typescript"
531:                   />
532:                 </div>
533:               </div>
534:               <div className="space-y-4">
535:                 <div>
536:                   <Label htmlFor="locations">Locations</Label>
537:                   <Input
538:                     id="locations"
539:                     value={autoPilotSettings.locations}
540:                     onChange={(e) => setAutoPilotSettings(prev => ({
541:                       ...prev,
542:                       locations: e.target.value
543:                     }))}
544:                     placeholder="e.g., San Francisco, Remote, New York"
545:                   />
546:                 </div>
547:                 <div>
548:                   <Label>Salary Range</Label>
549:                   <div className="flex gap-2">
550:                     <Input
551:                       type="number"
552:                       placeholder="Min"
553:                       value={autoPilotSettings.salaryRange.min}
554:                       onChange={(e) => setAutoPilotSettings(prev => ({
555:                         ...prev,
556:                         salaryRange: { ...prev.salaryRange, min: parseInt(e.target.value) || 0 }
557:                       }))}
558:                     />
559:                     <Input
560:                       type="number"
561:                       placeholder="Max"
562:                       value={autoPilotSettings.salaryRange.max}
563:                       onChange={(e) => setAutoPilotSettings(prev => ({
564:                         ...prev,
565:                         salaryRange: { ...prev.salaryRange, max: parseInt(e.target.value) || 0 }
566:                       }))}
567:                     />
568:                   </div>
569:                 </div>
570:               </div>
571:             </div>
572:           )}
573: 
574:           {autoPilotEnabled && (
575:             <div className="mt-4 flex items-center gap-3">
576:               <Button disabled={autoPilotRunning} onClick={async () => {
577:                 setAutoPilotRunning(true)
578:                 setProgress({ percent: 5, stage: 'Preparing search…' })
579:                 try {
580:                   const controller = new AbortController()
581:                   const userTimeout = Math.max(30000, Math.min(180000, Number(autoPilotSettings.timeoutMs) || 120000))
582:                   const to = setTimeout(()=>controller.abort(), userTimeout)
583:                   // Faux staged progress while waiting (client-side only)
584:                   const start = Date.now()
585:                   const ticker = setInterval(() => {
586:                     const elapsed = Date.now() - start
587:                     const pct = Math.min(95, Math.round((elapsed / userTimeout) * 100))
588:                     const stage = pct < 30 ? 'Searching job boards…' : pct < 60 ? 'Aggregating listings…' : 'Finding contacts…'
589:                     setProgress({ percent: pct, stage })
590:                   }, 500)
591:                   const resp = await fetch('/api/job-boards/autopilot/search', {
592:                     method: 'POST', headers: { 'Content-Type': 'application/json' },
593:                     body: JSON.stringify({ 
594:                       keywords: autoPilotSettings.keywords, 
595:                       locations: autoPilotSettings.locations, 
596:                       radiusKm: 150, days: 30, limit: 20, timeoutMs: userTimeout,
597:                       mode: qualityMode,
598:                       filters
599:                     }),
600:                     signal: controller.signal
601:                   })
602:                   clearTimeout(to)
603:                   clearInterval(ticker)
604:                   const json = await resp.json()
605:                   if (!resp.ok || !json.success) throw new Error(json.error || 'Search failed')
606:                   setAutoPilotResults(json.results || [])
607:                   setProgress({ percent: 100, stage: 'Complete' })
608:                 } catch (e) {
609:                   toast.error(e instanceof Error ? e.message : 'Autopilot search failed')
610:                   setProgress({ percent: 0, stage: 'Idle' })
611:                 } finally {
612:                   setAutoPilotRunning(false)
613:                 }
614:               }}>
615:                 {autoPilotRunning ? (<><Loader2 className="w-4 h-4 mr-2 animate-spin"/> Searching...</>) : (<><Zap className="w-4 h-4 mr-2"/>Run Autopilot Search</>)}
616:               </Button>
617:               {autoPilotResults.length > 0 && (
618:                 <div className="text-sm text-muted-foreground">Found {autoPilotResults.length} public listings</div>
619:               )}
620:             </div>
621:           )}
622: 
623:           {autoPilotResults.length > 0 && (
624:             <div className="mt-4 border-t pt-4">
625:               <div className="text-sm font-medium mb-2">Public Listings</div>
626:               <div className="max-h-64 overflow-y-auto space-y-2">
627:                 {autoPilotResults.slice(0, 100).map((j, idx) => (
628:                   <div key={idx} className="text-xs flex items-center justify-between gap-2">
629:                     <div className="min-w-0">
630:                       <div className="font-medium truncate">{j.title || 'Untitled role'}</div>
631:                       <div className="text-muted-foreground truncate">{[j.company, j.location, j.source].filter(Boolean).join(' • ')}</div>
632:                     </div>
633:                     {j.url && <a href={j.url} target="_blank" rel="noopener noreferrer" className="px-2 py-1 border rounded">Open</a>}
634:                   </div>
635:                 ))}
636:               </div>
637:             </div>
638:           )}
639: 
640:           {/* Progress bar */}
641:           {autoPilotRunning || progress.percent > 0 ? (
642:             <div className="mt-3">
643:               <div className="flex items-center justify-between text-xs text-muted-foreground mb-1">
644:                 <span>{progress.stage}</span>
645:                 <span>{progress.percent}%</span>
646:               </div>
647:               <Progress value={progress.percent} className="w-full" />
648:             </div>
649:           ) : null}
650: 
651:           {/* Filters and Mode */}
652:           <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
653:             <div>
654:               <Label className="text-xs">Mode</Label>
655:               <Select value={qualityMode} onValueChange={(v)=>setQualityMode(v as any)}>
656:                 <SelectTrigger><SelectValue placeholder="Mode" /></SelectTrigger>
657:                 <SelectContent>
658:                   <SelectItem value="speed">Speed (Search/Sonar)</SelectItem>
659:                   <SelectItem value="quality">Quality (Sonar Pro/V2)</SelectItem>
660:                 </SelectContent>
661:               </Select>
662:             </div>
663:             <div>
664:               <Label className="text-xs">Work Type</Label>
665:               <Select value={filters.workType} onValueChange={(v)=>setFilters(p=>({ ...p, workType: v as any }))}>
666:                 <SelectTrigger><SelectValue placeholder="Any" /></SelectTrigger>
667:                 <SelectContent>
668:                   <SelectItem value="any">Any</SelectItem>
669:                   <SelectItem value="remote">Remote</SelectItem>
670:                   <SelectItem value="hybrid">Hybrid</SelectItem>
671:                   <SelectItem value="onsite">Onsite</SelectItem>
672:                 </SelectContent>
673:               </Select>
674:             </div>
675:             <div>
676:               <Label className="text-xs">Experience</Label>
677:               <Select value={filters.experienceLevel} onValueChange={(v)=>setFilters(p=>({ ...p, experienceLevel: v as any }))}>
678:                 <SelectTrigger><SelectValue placeholder="Any" /></SelectTrigger>
679:                 <SelectContent>
680:                   <SelectItem value="any">Any</SelectItem>
681:                   <SelectItem value="entry">Entry</SelectItem>
682:                   <SelectItem value="mid">Mid</SelectItem>
683:                   <SelectItem value="senior">Senior</SelectItem>
684:                   <SelectItem value="executive">Executive</SelectItem>
685:                 </SelectContent>
686:               </Select>
687:             </div>
688:             <div className="flex items-end gap-2">
689:               <div className="flex-1">
690:                 <Label className="text-xs">Min Salary (USD)</Label>
691:                 <Input type="number" placeholder="e.g., 80000" value={filters.salaryMin || ''} onChange={(e)=>setFilters(p=>({ ...p, salaryMin: e.target.value ? Number(e.target.value) : undefined }))} />
692:               </div>
693:               <div className="w-28">
694:                 <Label className="text-xs">Max Results</Label>
695:                 <Input type="number" value={filters.maxResults || 15} onChange={(e)=>setFilters(p=>({ ...p, maxResults: Math.max(5, Math.min(30, Number(e.target.value)||15)) }))} />
696:               </div>
697:             </div>
698:           </div>
699:         </CardContent>
700:       </Card>
701: 
702:       {/* Job Board integrations have moved to Settings → Integrations; no UI here by design */}
703: 
704:       {/* Bulk Actions */}
705:       <Card>
706:         <CardHeader>
707:           <CardTitle className="flex items-center gap-2">
708:             <Send className="h-5 w-5" />
709:             Bulk Application Submission
710:           </CardTitle>
711:           <CardDescription>
712:             Submit multiple applications to selected job boards at once
713:           </CardDescription>
714:         </CardHeader>
715:         <CardContent>
716:           {/* Application Selection */}
717:           <div className="mb-6">
718:             <h4 className="font-medium mb-3">Select Applications ({selectedApplications.length})</h4>
719:             <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-h-40 overflow-y-auto">
720:               {applications.slice(0, 10).map((app) => (
721:                 <div key={app._id} className="flex items-center space-x-3 p-3 border rounded-lg">
722:                   <Checkbox
723:                     checked={selectedApplications.includes(app._id)}
724:                     onCheckedChange={(checked) => handleApplicationSelection(app._id, checked as boolean)}
725:                   />
726:                   <div className="flex-1 min-w-0">
727:                     <p className="text-sm font-medium truncate">{app.jobTitle}</p>
728:                     <p className="text-xs text-muted-foreground truncate">{app.company}</p>
729:                   </div>
730:                   <Badge variant={app.status === 'submitted' ? 'default' : 'outline'} className="text-xs">
731:                     {app.status}
732:                   </Badge>
733:                 </div>
734:               ))}
735:             </div>
736:           </div>
737: 
738:           {/* Progress and Actions */}
739:           {bulkSubmission.status === 'running' && (
740:             <div className="mb-6">
741:               <div className="flex justify-between text-sm mb-2">
742:                 <span>Submission Progress</span>
743:                 <span>{Math.round(bulkSubmission.progress)}%</span>
744:               </div>
745:               <Progress value={bulkSubmission.progress} className="h-2 mb-2" />
746:               <p className="text-xs text-muted-foreground">
747:                 Submitting {bulkSubmission.selectedApplications.length} applications to {bulkSubmission.selectedBoards.length} job boards...
748:               </p>
749:             </div>
750:           )}
751: 
752:           <div className="flex gap-4">
753:             <Button
754:               onClick={handleBulkSubmit}
755:               disabled={
756:                 selectedBoards.length === 0 ||
757:                 selectedApplications.length === 0 ||
758:                 bulkSubmission.status === 'running'
759:               }
760:               className="flex-1"
761:             >
762:               {bulkSubmission.status === 'running' ? (
763:                 <>
764:                   <Loader2 className="w-4 h-4 mr-2 animate-spin" />
765:                   Submitting...
766:                 </>
767:               ) : (
768:                 <>
769:                   <Send className="w-4 h-4 mr-2" />
770:                   Submit {selectedApplications.length} Applications
771:                 </>
772:               )}
773:             </Button>
774: 
775:             <Button
776:               variant="outline"
777:               onClick={() => {
778:                 setSelectedBoards([])
779:                 setSelectedApplications([])
780:               }}
781:               disabled={bulkSubmission.status === 'running'}
782:             >
783:               Clear Selection
784:             </Button>
785:           </div>
786: 
787:           {bulkSubmission.status === 'completed' && bulkSubmission.results && (
788:             <Alert className="mt-4">
789:               <CheckCircle className="h-4 w-4" />
790:               <AlertDescription>
791:                 Bulk submission completed! {bulkSubmission.results.filter(r => r.success).length} successful submissions out of {bulkSubmission.results.length} attempts.
792:               </AlertDescription>
793:             </Alert>
794:           )}
795: 
796:           {bulkSubmission.status === 'failed' && (
797:             <Alert className="mt-4">
798:               <AlertTriangle className="h-4 w-4" />
799:               <AlertDescription>
800:                 Bulk submission failed. Please try again or contact support if the issue persists.
801:               </AlertDescription>
802:             </Alert>
803:           )}
804:         </CardContent>
805:       </Card>
806: 
807:       {/* Recent Activity */}
808:       <Card>
809:         <CardHeader>
810:           <CardTitle className="flex items-center gap-2">
811:             <Clock className="h-5 w-5" />
812:             Recent Activity
813:           </CardTitle>
814:           <CardDescription>
815:             Latest application submissions and job board activity
816:           </CardDescription>
817:         </CardHeader>
818:         <CardContent>
819:           <div className="space-y-4">
820:             {applications.slice(0, 5).map((app) => (
821:               <div key={app._id} className="flex items-center justify-between p-3 border rounded-lg">
822:                 <div className="flex items-center gap-3">
823:                   <div className={`w-3 h-3 rounded-full ${
824:                     app.status === 'submitted' ? 'bg-green-500' :
825:                     app.status === 'draft' ? 'bg-yellow-500' : 'bg-gray-500'
826:                   }`} />
827:                   <div>
828:                     <p className="font-medium">{app.jobTitle}</p>
829:                     <p className="text-sm text-muted-foreground">{app.company}</p>
830:                   </div>
831:                 </div>
832:                 <div className="text-right">
833:                   <Badge variant={app.status === 'submitted' ? 'default' : 'outline'}>
834:                     {app.status}
835:                   </Badge>
836:                   <p className="text-xs text-muted-foreground mt-1">
837:                     {new Date(app.createdAt).toLocaleDateString()}
838:                   </p>
839:                 </div>
840:               </div>
841:             ))}
842:           </div>
843:         </CardContent>
844:       </Card>
845:     </div>
846:   )
847: }
848: 
849: function AutopilotStatus() {
850:   const [status, setStatus] = useState<{ lastRunAt?: string; lastFound?: number; nextRunAt?: string } | null>(null)
851:   useEffect(() => {
852:     (async () => {
853:       try {
854:         const res = await fetch('/api/profile')
855:         if (!res.ok) return
856:         const j = await res.json()
857:         const meta = j?.profile?.autopilotMeta || {}
858:         setStatus({
859:           lastRunAt: meta.lastRunAt,
860:           lastFound: meta.lastFound,
861:           nextRunAt: meta.nextRunAt,
862:         })
863:       } catch {}
864:     })()
865:   }, [])
866:   if (!status) return null
867:   return (
868:     <div className="flex items-center gap-4">
869:       <div>Last run: {status.lastRunAt ? new Date(status.lastRunAt).toLocaleString() : '—'}</div>
870:       <div>Found: {typeof status.lastFound === 'number' ? status.lastFound : 0}</div>
871:       <div>Next run: {status.nextRunAt ? new Date(status.nextRunAt).toLocaleString() : '—'}</div>
872:     </div>
873:   )
874: }
</file>

<file path="src/app/job-boards/page.tsx">
 1: import { Suspense } from 'react'
 2: import { getServerSession } from 'next-auth/next'
 3: import { redirect } from 'next/navigation'
 4: import { authOptions } from '@/lib/auth'
 5: import { JobBoardsDashboard } from './components/job-boards-dashboard'
 6: 
 7: export default async function JobBoardsPage() {
 8:   const session = await getServerSession(authOptions)
 9: 
10:   if (!session) {
11:     redirect('/auth/signin')
12:   }
13: 
14:   return (
15:     <div className="min-h-screen bg-background">
16:       <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
17:         <div className="mb-8">
18:           <h1 className="text-3xl font-bold text-foreground">Job Board Integrations</h1>
19:           <p className="mt-2 text-lg text-muted-foreground">
20:             Automate your job applications across multiple platforms with AI-optimized submissions
21:           </p>
22:         </div>
23: 
24:         <Suspense fallback={<JobBoardsSkeleton />}>
25:           <JobBoardsDashboard userId={session.user.id} />
26:         </Suspense>
27:       </div>
28:     </div>
29:   )
30: }
31: 
32: function JobBoardsSkeleton() {
33:   return (
34:     <div className="space-y-8">
35:       {/* Stats Overview Skeleton - Dribbble Style */}
36:       <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
37:         {[...Array(4)].map((_, i) => (
38:           <div key={i} className="glass-card animate-pulse">
39:             <div className="w-16 h-4 bg-muted rounded mb-2"></div>
40:             <div className="w-8 h-8 bg-muted rounded"></div>
41:           </div>
42:         ))}
43:       </div>
44: 
45:       {/* Job Boards Grid Skeleton - Dribbble Style */}
46:       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
47:         {[...Array(6)].map((_, i) => (
48:           <div key={i} className="modern-card animate-pulse">
49:             <div className="w-24 h-6 bg-muted rounded mb-4"></div>
50:             <div className="w-full h-20 bg-muted rounded mb-4"></div>
51:             <div className="w-20 h-4 bg-muted rounded mb-3"></div>
52:             <div className="w-16 h-8 bg-primary/20 rounded"></div>
53:           </div>
54:         ))}
55:       </div>
56: 
57:       {/* Bulk Actions Skeleton - Dribbble Style */}
58:       <div className="gradient-border-card animate-pulse">
59:         <div className="w-32 h-6 bg-muted rounded mb-4"></div>
60:         <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
61:           <div className="w-full h-10 bg-muted rounded"></div>
62:           <div className="w-full h-10 bg-muted rounded"></div>
63:           <div className="w-full h-10 bg-muted rounded"></div>
64:         </div>
65:         <div className="w-32 h-10 bg-gradient-primary/20 rounded"></div>
66:       </div>
67:     </div>
68:   )
69: }
</file>

<file path="src/app/jobs/components/jobs-actions.tsx">
 1: 'use client'
 2: 
 3: import { useEffect, useState } from 'react'
 4: 
 5: export function JobsActions() {
 6:   const [providers, setProviders] = useState<Array<{ id: string; name: string; status: string }>>([])
 7:   const [selected, setSelected] = useState('')
 8:   const [loading, setLoading] = useState(false)
 9:   const [jobs, setJobs] = useState<any[]>([])
10: 
11:   useEffect(() => {
12:     ;(async () => {
13:       try {
14:         const res = await fetch('/api/job-boards/integrations')
15:         const j = await res.json()
16:         if (j.success && Array.isArray(j.integrations)) {
17:           setProviders(j.integrations.map((i: any) => ({ id: i.boardName, name: i.boardName, status: i.status })))
18:         }
19:       } catch {}
20:     })()
21:   }, [])
22: 
23:   const load = async () => {
24:     if (!selected) return
25:     setLoading(true)
26:     try {
27:       const res = await fetch('/api/job-boards/jobs/list', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: selected }) })
28:       const j = await res.json()
29:       setJobs(Array.isArray(j.jobs?.items) ? j.jobs.items : (Array.isArray(j.jobs) ? j.jobs : []))
30:     } catch { setJobs([]) }
31:     setLoading(false)
32:   }
33: 
34:   const importJob = async (url?: string) => {
35:     if (!url) return
36:     try {
37:       const base = typeof window !== 'undefined' ? '' : (process.env.NEXTAUTH_URL || 'http://localhost:3000')
38:       await fetch(`${base}/api/jobs/import`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobUrl: url }) })
39:     } catch {}
40:   }
41: 
42:   return (
43:     <div className="space-y-4">
44:       <div className="flex gap-2">
45:         <select value={selected} onChange={(e)=>setSelected(e.target.value)} className="border rounded p-2">
46:           <option value="">Select connected provider</option>
47:           {providers.filter(p=>p.status==='connected').map((p)=> (
48:             <option key={p.id} value={p.id}>{p.name}</option>
49:           ))}
50:         </select>
51:         <button onClick={load} disabled={!selected || loading} className="px-3 py-2 bg-blue-600 text-foreground rounded">{loading ? 'Loading…' : 'Load Jobs'}</button>
52:       </div>
53:       {jobs.length > 0 && (
54:         <div className="space-y-2">
55:           {jobs.slice(0, 20).map((job: any, idx: number) => (
56:             <div key={idx} className="p-3 border rounded flex items-center justify-between">
57:               <div className="min-w-0">
58:                 <div className="font-medium truncate">{job.title || job.name || 'Job'}</div>
59:                 <div className="text-sm text-muted-foreground truncate">{job.company || job.companyName || ''}</div>
60:               </div>
61:               <div className="flex items-center gap-2">
62:                 {job.url && <a href={job.url} target="_blank" rel="noopener noreferrer" className="text-blue-600 text-sm">View</a>}
63:                 <button onClick={()=>importJob(job.url)} disabled={!job.url} className="px-2 py-1 border rounded text-sm">Import</button>
64:               </div>
65:             </div>
66:           ))}
67:         </div>
68:       )}
69:     </div>
70:   )
71: }
</file>

<file path="src/app/jobs/page.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { useSession } from 'next-auth/react'
  5: import Link from 'next/link'
  6: import { MagnifyingGlassIcon, FunnelIcon, MapPinIcon } from '@heroicons/react/24/outline'
  7: import { JobCard } from '@/components/job-card'
  8: 
  9: export default function JobsPage() {
 10:   const [jobs, setJobs] = useState<any[]>([])
 11:   const [loading, setLoading] = useState(false)
 12:   const [filters, setFilters] = useState({ location: 'Toronto, ON', salaryMin: '', salaryMax: '', remote: false })
 13:   const [sidebarOpen, setSidebarOpen] = useState(false)
 14:   const [searchQuery, setSearchQuery] = useState('')
 15:   const { data: session } = useSession()
 16: 
 17:   // ENTERPRISE FIX: Fetch real jobs from API
 18:   useEffect(() => {
 19:     const fetchJobs = async () => {
 20:       if (!searchQuery || searchQuery.length < 2) return
 21:       
 22:       setLoading(true)
 23:       try {
 24:         const response = await fetch('/api/jobs/search', {
 25:           method: 'POST',
 26:           headers: { 'Content-Type': 'application/json' },
 27:           body: JSON.stringify({
 28:             keywords: searchQuery,
 29:             location: filters.location || 'Toronto, ON',
 30:             limit: 50
 31:           })
 32:         })
 33:         
 34:         if (response.ok) {
 35:           const data = await response.json()
 36:           setJobs(data.jobs || [])
 37:         }
 38:       } catch (error) {
 39:         console.error('Failed to fetch jobs:', error)
 40:       } finally {
 41:         setLoading(false)
 42:       }
 43:     }
 44:     
 45:     fetchJobs()
 46:   }, [searchQuery, filters.location])
 47: 
 48:   const handleFilterChange = (key: string, value: any) => {
 49:     setFilters(prev => ({ ...prev, [key]: value }))
 50:   }
 51: 
 52:   const toggleSidebar = () => {
 53:     setSidebarOpen(!sidebarOpen)
 54:     if (!sidebarOpen) document.body.classList.add('sidebar-open')
 55:     else document.body.classList.remove('sidebar-open')
 56:   }
 57: 
 58:   return (
 59:     <div className="min-h-screen bg-background">
 60:       {/* Hero Search */}
 61:       <section className="search-hero">
 62:         <div className="max-w-4xl mx-auto">
 63:           <h1 className="text-3xl font-bold text-foreground mb-4">Find Your Next Opportunity</h1>
 64:           <div className="search-input-group">
 65:             <div className="relative flex-1">
 66:               <MagnifyingGlassIcon className="search-icon" />
 67:               <input
 68:                 type="text"
 69:                 placeholder="Search jobs by title, company, or keywords..."
 70:                 value={searchQuery}
 71:                 onChange={(e) => setSearchQuery(e.target.value)}
 72:                 className="search-input"
 73:               />
 74:             </div>
 75:             <button className="search-btn">
 76:               <MagnifyingGlassIcon className="w-5 h-5 mr-2" />
 77:               Search
 78:             </button>
 79:           </div>
 80:         </div>
 81:       </section>
 82: 
 83:       <div className="flex flex-col lg:flex-row gap-6 max-w-7xl mx-auto px-4 py-8">
 84:         {/* Main Content: Job Grid */}
 85:         <main className="flex-1">
 86:           {loading ? (
 87:             <div className="text-center py-12">
 88:               <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
 89:               <p className="mt-4 text-muted-foreground">Searching for jobs...</p>
 90:             </div>
 91:           ) : jobs.length === 0 ? (
 92:             <div className="text-center py-12">
 93:               <p className="text-muted-foreground">Enter a search term to find jobs</p>
 94:             </div>
 95:           ) : (
 96:             <div className="job-grid">
 97:               {jobs.map((job) => (
 98:                 <JobCard key={job.id} job={job} />
 99:               ))}
100:             </div>
101:           )}
102:         </main>
103: 
104:         {/* Sidebar: Filters */}
105:         <aside className={`filter-sidebar lg:translate-x-0 ${sidebarOpen ? 'sidebar-open' : ''}`}>
106:           <div className="flex justify-between items-center mb-4">
107:             <h2 className="text-lg font-semibold text-foreground">Filters</h2>
108:             <button onClick={toggleSidebar} className="sidebar-toggle">
109:               <FunnelIcon className="w-5 h-5" />
110:             </button>
111:           </div>
112:           <div className="filter-group">
113:             <label className="filter-label">Location</label>
114:             <div className="filter-checkbox">
115:               <input type="checkbox" id="remote" checked={filters.remote} onChange={(e) => handleFilterChange('remote', e.target.checked)} />
116:               <span>Remote</span>
117:             </div>
118:             <input
119:               type="text"
120:               placeholder="e.g., Toronto, ON"
121:               value={filters.location}
122:               onChange={(e) => handleFilterChange('location', e.target.value)}
123:               className="w-full p-2 border rounded"
124:             />
125:           </div>
126:           <div className="filter-group">
127:             <label className="filter-label">Salary Range</label>
128:             <input
129:               type="number"
130:               placeholder="Min Salary"
131:               value={filters.salaryMin}
132:               onChange={(e) => handleFilterChange('salaryMin', e.target.value)}
133:               className="w-full p-2 border rounded mb-2"
134:             />
135:             <input
136:               type="number"
137:               placeholder="Max Salary"
138:               value={filters.salaryMax}
139:               onChange={(e) => handleFilterChange('salaryMax', e.target.value)}
140:               className="w-full p-2 border rounded"
141:             />
142:           </div>
143:           {/* Add more filters as needed */}
144:         </aside>
145:       </div>
146: 
147:       {/* Overlay for mobile sidebar */}
148:       {sidebarOpen && (
149:         <div className="sidebar-overlay" onClick={toggleSidebar} />
150:       )}
151:     </div>
152:   )
153: }
</file>

<file path="src/app/network/components/network-dashboard.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect, useCallback } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Input } from '@/components/ui/input'
  7: import { Textarea } from '@/components/ui/textarea'
  8: import { Badge } from '@/components/ui/badge'
  9: import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
 10: import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
 11: import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
 12: import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
 13: import { Alert, AlertDescription } from '@/components/ui/alert'
 14: import {
 15:   Heart,
 16:   MessageCircle,
 17:   Share2,
 18:   UserPlus,
 19:   Users,
 20:   Briefcase,
 21:   TrendingUp,
 22:   Search,
 23:   Filter,
 24:   Plus,
 25:   Send,
 26:   MapPin,
 27:   Calendar,
 28:   ThumbsUp,
 29:   Eye,
 30:   Star,
 31:   MessageSquare,
 32:   UserCheck,
 33:   UserX,
 34:   Bell,
 35:   Settings,
 36:   BookOpen,
 37:   Award,
 38:   Zap
 39: } from 'lucide-react'
 40: import toast from 'react-hot-toast'
 41: 
 42: interface NetworkPost {
 43:   _id: string
 44:   userId: string
 45:   userName: string
 46:   userAvatar?: string
 47:   userTitle?: string
 48:   type: 'job_opportunity' | 'career_advice' | 'success_story' | 'question' | 'general'
 49:   title?: string
 50:   content: string
 51:   tags?: string[]
 52:   attachments?: Array<{
 53:     type: 'image' | 'document' | 'link'
 54:     url: string
 55:     name: string
 56:   }>
 57:   likes: string[]
 58:   comments: Array<{
 59:     userId: string
 60:     userName: string
 61:     content: string
 62:     createdAt: Date
 63:   }>
 64:   shares: number
 65:   createdAt: Date
 66:   updatedAt: Date
 67:   visibility: 'public' | 'connections' | 'private'
 68: }
 69: 
 70: interface NetworkUser {
 71:   id: string
 72:   name: string
 73:   title?: string
 74:   avatar?: string
 75:   location?: string
 76:   skills?: string[]
 77:   experience?: string
 78:   connections: number
 79:   mutualConnections: number
 80:   isOnline?: boolean
 81:   lastActive?: Date
 82: }
 83: 
 84: interface Connection {
 85:   _id: string
 86:   userId: string
 87:   connectedUserId: string
 88:   status: 'pending' | 'accepted' | 'declined' | 'blocked'
 89:   initiatedBy: string
 90:   createdAt: Date
 91:   acceptedAt?: Date
 92:   message?: string
 93:   user?: NetworkUser
 94: }
 95: 
 96: interface NetworkDashboardProps {
 97:   userId: string
 98: }
 99: 
100: export function NetworkDashboard({ userId }: NetworkDashboardProps) {
101:   const [activeTab, setActiveTab] = useState('feed')
102:   const [posts, setPosts] = useState<NetworkPost[]>([])
103:   const [connections, setConnections] = useState<Connection[]>([])
104:   const [suggestions, setSuggestions] = useState<NetworkUser[]>([])
105:   const [searchQuery, setSearchQuery] = useState('')
106:   const [filterType, setFilterType] = useState('all')
107:   const [isLoading, setIsLoading] = useState(true)
108:   const [showCreatePost, setShowCreatePost] = useState(false)
109: 
110:   // Messaging state
111:   const [selectedConversation, setSelectedConversation] = useState<string | null>(null)
112:   const [selectedConversationUser, setSelectedConversationUser] = useState<NetworkUser | null>(null)
113:   const [messages, setMessages] = useState<any[]>([])
114:   const [newMessage, setNewMessage] = useState('')
115:   const [showConnectionRequests, setShowConnectionRequests] = useState(false)
116: 
117:   // Create post state
118:   const [newPost, setNewPost] = useState({
119:     type: 'general' as NetworkPost['type'],
120:     title: '',
121:     content: '',
122:     tags: [] as string[],
123:     visibility: 'public' as NetworkPost['visibility']
124:   })
125: 
126:   // Load initial data
127:   useEffect(() => {
128:     loadFeed()
129:     loadConnections()
130:   }, [])
131: 
132:   const loadFeed = async () => {
133:     try {
134:       const response = await fetch('/api/network/feed')
135:       const data = await response.json()
136:       if (data.success) {
137:         setPosts(data.posts)
138:       }
139:     } catch (error) {
140:       console.error('Failed to load feed:', error)
141:       toast.error('Failed to load network feed')
142:     }
143:   }
144: 
145:   const loadConnections = async () => {
146:     try {
147:       // Load accepted connections
148:       const connectionsResponse = await fetch('/api/network/connections')
149:       const connectionsData = await connectionsResponse.json()
150: 
151:       // Load suggestions
152:       const suggestionsResponse = await fetch('/api/network/connections?type=suggestions')
153:       const suggestionsData = await suggestionsResponse.json()
154: 
155:       if (connectionsData.success) {
156:         setConnections(connectionsData.connections)
157:       }
158: 
159:       if (suggestionsData.success) {
160:         setSuggestions(suggestionsData.connections)
161:       }
162:     } catch (error) {
163:       console.error('Failed to load connections:', error)
164:     } finally {
165:       setIsLoading(false)
166:     }
167:   }
168: 
169:   const handleCreatePost = async () => {
170:     if (!newPost.content.trim()) {
171:       toast.error('Please enter some content for your post')
172:       return
173:     }
174: 
175:     try {
176:       const response = await fetch('/api/network/feed', {
177:         method: 'POST',
178:         headers: {
179:           'Content-Type': 'application/json',
180:         },
181:         body: JSON.stringify(newPost),
182:       })
183: 
184:       const data = await response.json()
185:       if (data.success) {
186:         setPosts(prev => [data.post, ...prev])
187:         setNewPost({
188:           type: 'general',
189:           title: '',
190:           content: '',
191:           tags: [],
192:           visibility: 'public'
193:         })
194:         setShowCreatePost(false)
195:         toast.success('Post created successfully!')
196:       } else {
197:         throw new Error(data.error)
198:       }
199:     } catch (error) {
200:       console.error('Failed to create post:', error)
201:       toast.error('Failed to create post')
202:     }
203:   }
204: 
205:   const handleLikePost = async (postId: string) => {
206:     // Mock like functionality
207:     setPosts(prev => prev.map(post =>
208:       post._id === postId
209:         ? {
210:             ...post,
211:             likes: post.likes.includes(userId)
212:               ? post.likes.filter(id => id !== userId)
213:               : [...post.likes, userId]
214:           }
215:         : post
216:     ))
217:   }
218: 
219:   const handleAddComment = (postId: string, comment: string) => {
220:     if (!comment.trim()) return
221: 
222:     const newComment = {
223:       userId,
224:       userName: 'You', // In real app, get from user session
225:       content: comment,
226:       createdAt: new Date()
227:     }
228: 
229:     setPosts(prev => prev.map(post =>
230:       post._id === postId
231:         ? { ...post, comments: [...post.comments, newComment] }
232:         : post
233:     ))
234:   }
235: 
236:   const handleConnect = async (targetUserId: string, message?: string) => {
237:     try {
238:       const response = await fetch('/api/network/connections', {
239:         method: 'POST',
240:         headers: {
241:           'Content-Type': 'application/json',
242:         },
243:         body: JSON.stringify({
244:           action: 'connect',
245:           targetUserId,
246:           message
247:         }),
248:       })
249: 
250:       const data = await response.json()
251:       if (data.success) {
252:         toast.success('Connection request sent!')
253:         // Remove from suggestions and add to pending connections
254:         setSuggestions(prev => prev.filter(user => user.id !== targetUserId))
255:       } else {
256:         throw new Error(data.error)
257:       }
258:     } catch (error) {
259:       console.error('Failed to send connection request:', error)
260:       toast.error('Failed to send connection request')
261:     }
262:   }
263: 
264:   const handleConnectionAction = async (action: 'accept' | 'decline', targetUserId: string) => {
265:     try {
266:       const response = await fetch('/api/network/connections', {
267:         method: 'POST',
268:         headers: {
269:           'Content-Type': 'application/json',
270:         },
271:         body: JSON.stringify({
272:           action,
273:           targetUserId
274:         }),
275:       })
276: 
277:       const data = await response.json()
278:       if (data.success) {
279:         if (action === 'accept') {
280:           setConnections(prev => prev.map(conn =>
281:             conn.userId === targetUserId && conn.connectedUserId === userId
282:               ? { ...conn, status: 'accepted', acceptedAt: new Date() }
283:               : conn
284:           ))
285:           toast.success('Connection accepted!')
286:         } else {
287:           setConnections(prev => prev.filter(conn =>
288:             !(conn.userId === targetUserId && conn.connectedUserId === userId)
289:           ))
290:           toast.success('Connection request declined')
291:         }
292:       }
293:     } catch (error) {
294:       console.error(`Failed to ${action} connection:`, error)
295:       toast.error(`Failed to ${action} connection`)
296:     }
297:   }
298: 
299:   const loadMessages = async (otherUserId: string) => {
300:     try {
301:       const response = await fetch(`/api/network/messages?otherUserId=${otherUserId}`)
302:       const data = await response.json()
303:       if (data.success) {
304:         setMessages(data.messages)
305:       }
306:     } catch (error) {
307:       console.error('Failed to load messages:', error)
308:       toast.error('Failed to load messages')
309:     }
310:   }
311: 
312:   const sendMessage = async () => {
313:     if (!newMessage.trim() || !selectedConversation) return
314: 
315:     try {
316:       const response = await fetch('/api/network/messages', {
317:         method: 'POST',
318:         headers: {
319:           'Content-Type': 'application/json',
320:         },
321:         body: JSON.stringify({
322:           receiverId: selectedConversation,
323:           content: newMessage.trim()
324:         }),
325:       })
326: 
327:       const data = await response.json()
328:       if (data.success) {
329:         setMessages(prev => [...prev, data.message])
330:         setNewMessage('')
331:       } else {
332:         throw new Error(data.error)
333:       }
334:     } catch (error) {
335:       console.error('Failed to send message:', error)
336:       toast.error('Failed to send message')
337:     }
338:   }
339: 
340:   const getPostTypeIcon = (type: NetworkPost['type']) => {
341:     switch (type) {
342:       case 'job_opportunity': return <Briefcase className="w-4 h-4" />
343:       case 'career_advice': return <BookOpen className="w-4 h-4" />
344:       case 'success_story': return <Award className="w-4 h-4" />
345:       case 'question': return <MessageSquare className="w-4 h-4" />
346:       default: return <MessageCircle className="w-4 h-4" />
347:     }
348:   }
349: 
350:   const getPostTypeColor = (type: NetworkPost['type']) => {
351:     switch (type) {
352:       case 'job_opportunity': return 'bg-blue-100 text-blue-800'
353:       case 'career_advice': return 'bg-green-100 text-green-800'
354:       case 'success_story': return 'bg-purple-100 text-purple-800'
355:       case 'question': return 'bg-orange-100 text-orange-800'
356:       default: return 'bg-muted text-foreground'
357:     }
358:   }
359: 
360:   const filteredPosts = posts.filter(post => {
361:     const matchesSearch = !searchQuery ||
362:       post.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
363:       post.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
364:       post.tags?.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
365: 
366:     const matchesType = filterType === 'all' || post.type === filterType
367: 
368:     return matchesSearch && matchesType
369:   })
370: 
371:   const pendingRequests = connections.filter(conn => conn.status === 'pending' && conn.initiatedBy !== userId)
372: 
373:   if (isLoading) {
374:     return <div>Loading network...</div>
375:   }
376: 
377:   return (
378:     <div className="space-y-8">
379:       {/* Stats Overview */}
380:       <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
381:         <Card>
382:           <CardContent className="p-6">
383:             <div className="flex items-center justify-between">
384:               <div>
385:                 <p className="text-sm font-medium text-muted-foreground">Connections</p>
386:                 <p className="text-2xl font-bold">{connections.filter(c => c.status === 'accepted').length}</p>
387:               </div>
388:               <Users className="h-8 w-8 text-blue-600" />
389:             </div>
390:           </CardContent>
391:         </Card>
392: 
393:         <Card>
394:           <CardContent className="p-6">
395:             <div className="flex items-center justify-between">
396:               <div>
397:                 <p className="text-sm font-medium text-muted-foreground">Network Posts</p>
398:                 <p className="text-2xl font-bold">{posts.length}</p>
399:               </div>
400:               <MessageCircle className="h-8 w-8 text-green-600" />
401:             </div>
402:           </CardContent>
403:         </Card>
404: 
405:         <Card>
406:           <CardContent className="p-6">
407:             <div className="flex items-center justify-between">
408:               <div>
409:                 <p className="text-sm font-medium text-muted-foreground">Pending Requests</p>
410:                 <p className="text-2xl font-bold">{pendingRequests.length}</p>
411:               </div>
412:               <UserPlus className="h-8 w-8 text-orange-600" />
413:             </div>
414:           </CardContent>
415:         </Card>
416: 
417:         <Card>
418:           <CardContent className="p-6">
419:             <div className="flex items-center justify-between">
420:               <div>
421:                 <p className="text-sm font-medium text-muted-foreground">Profile Views</p>
422:                 <p className="text-2xl font-bold">0</p>
423:               </div>
424:               <Eye className="h-8 w-8 text-purple-600" />
425:             </div>
426:           </CardContent>
427:         </Card>
428:       </div>
429: 
430:       {/* Main Network Interface */}
431:       <Tabs value={activeTab} onValueChange={setActiveTab}>
432:         <TabsList className="grid w-full grid-cols-4">
433:           <TabsTrigger value="feed" className="flex items-center gap-2">
434:             <MessageCircle className="w-4 h-4" />
435:             Feed
436:           </TabsTrigger>
437:           <TabsTrigger value="connections" className="flex items-center gap-2">
438:             <Users className="w-4 h-4" />
439:             Connections
440:           </TabsTrigger>
441:           <TabsTrigger value="discover" className="flex items-center gap-2">
442:             <Search className="w-4 h-4" />
443:             Discover
444:           </TabsTrigger>
445:           <TabsTrigger value="messages" className="flex items-center gap-2">
446:             <MessageSquare className="w-4 h-4" />
447:             Messages
448:           </TabsTrigger>
449:         </TabsList>
450: 
451:         {/* Feed Tab */}
452:         <TabsContent value="feed" className="space-y-6">
453:           {/* Create Post */}
454:           <Card>
455:             <CardContent className="p-6">
456:               <div className="flex gap-4">
457:                 <Avatar className="w-12 h-12">
458:                   <AvatarImage src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150" />
459:                   <AvatarFallback>You</AvatarFallback>
460:                 </Avatar>
461:                 <div className="flex-1">
462:                   <Button
463:                     variant="outline"
464:                     className="w-full justify-start text-muted-foreground"
465:                     onClick={() => setShowCreatePost(true)}
466:                   >
467:                     <Plus className="w-4 h-4 mr-2" />
468:                     Share your thoughts, ask a question, or post a job opportunity...
469:                   </Button>
470:                 </div>
471:               </div>
472:             </CardContent>
473:           </Card>
474: 
475:           {/* Search and Filter */}
476:           <Card>
477:             <CardContent className="p-4">
478:               <div className="flex gap-4">
479:                 <div className="flex-1">
480:                   <Input
481:                     placeholder="Search posts, people, or topics..."
482:                     value={searchQuery}
483:                     onChange={(e) => setSearchQuery(e.target.value)}
484:                     className="w-full"
485:                   />
486:                 </div>
487:                 <Select value={filterType} onValueChange={setFilterType}>
488:                   <SelectTrigger className="w-48">
489:                     <SelectValue />
490:                   </SelectTrigger>
491:                   <SelectContent>
492:                     <SelectItem value="all">All Posts</SelectItem>
493:                     <SelectItem value="job_opportunity">Job Opportunities</SelectItem>
494:                     <SelectItem value="career_advice">Career Advice</SelectItem>
495:                     <SelectItem value="success_story">Success Stories</SelectItem>
496:                     <SelectItem value="question">Questions</SelectItem>
497:                   </SelectContent>
498:                 </Select>
499:               </div>
500:             </CardContent>
501:           </Card>
502: 
503:           {/* Posts Feed */}
504:           <div className="space-y-6">
505:             {filteredPosts.map((post) => (
506:               <Card key={post._id}>
507:                 <CardContent className="p-6">
508:                   <div className="flex gap-4">
509:                     <Avatar className="w-12 h-12">
510:                       <AvatarImage src={post.userAvatar} />
511:                       <AvatarFallback>{post.userName[0]}</AvatarFallback>
512:                     </Avatar>
513:                     <div className="flex-1">
514:                       <div className="flex items-center gap-2 mb-2">
515:                         <h3 className="font-semibold">{post.userName}</h3>
516:                         <Badge variant="outline" className="text-xs">
517:                           {post.userTitle}
518:                         </Badge>
519:                         <Badge className={`text-xs ${getPostTypeColor(post.type)}`}>
520:                           {getPostTypeIcon(post.type)}
521:                           <span className="ml-1 capitalize">{post.type.replace('_', ' ')}</span>
522:                         </Badge>
523:                       </div>
524: 
525:                       {post.title && (
526:                         <h4 className="font-medium mb-2">{post.title}</h4>
527:                       )}
528: 
529:                       <p className="text-foreground mb-3 whitespace-pre-wrap">{post.content}</p>
530: 
531:                       {post.tags && post.tags.length > 0 && (
532:                         <div className="flex flex-wrap gap-1 mb-3">
533:                           {post.tags.map((tag, index) => (
534:                             <Badge key={index} variant="secondary" className="text-xs">
535:                               #{tag}
536:                             </Badge>
537:                           ))}
538:                         </div>
539:                       )}
540: 
541:                       <div className="flex items-center justify-between text-sm text-muted-foreground">
542:                         <span>{new Date(post.createdAt).toLocaleDateString()}</span>
543:                         <div className="flex gap-4">
544:                           <button
545:                             onClick={() => handleLikePost(post._id)}
546:                             className={`flex items-center gap-1 hover:text-red-500 ${
547:                               post.likes.includes(userId) ? 'text-red-500' : ''
548:                             }`}
549:                           >
550:                             <ThumbsUp className="w-4 h-4" />
551:                             {post.likes.length}
552:                           </button>
553:                           <button className="flex items-center gap-1 hover:text-blue-500">
554:                             <MessageCircle className="w-4 h-4" />
555:                             {post.comments.length}
556:                           </button>
557:                           <button className="flex items-center gap-1 hover:text-green-500">
558:                             <Share2 className="w-4 h-4" />
559:                             {post.shares}
560:                           </button>
561:                         </div>
562:                       </div>
563: 
564:                       {/* Comments Section */}
565:                       {post.comments.length > 0 && (
566:                         <div className="mt-4 space-y-3">
567:                           {post.comments.slice(0, 3).map((comment, index) => (
568:                             <div key={index} className="flex gap-3 p-3 bg-background rounded-lg">
569:                               <Avatar className="w-8 h-8">
570:                                 <AvatarFallback className="text-xs">
571:                                   {comment.userName[0]}
572:                                 </AvatarFallback>
573:                               </Avatar>
574:                               <div className="flex-1">
575:                                 <div className="flex items-center gap-2 mb-1">
576:                                   <span className="font-medium text-sm">{comment.userName}</span>
577:                                   <span className="text-xs text-muted-foreground">
578:                                     {new Date(comment.createdAt).toLocaleDateString()}
579:                                   </span>
580:                                 </div>
581:                                 <p className="text-sm text-foreground">{comment.content}</p>
582:                               </div>
583:                             </div>
584:                           ))}
585: 
586:                           {post.comments.length > 3 && (
587:                             <button className="text-sm text-blue-600 hover:underline">
588:                               View all {post.comments.length} comments
589:                             </button>
590:                           )}
591:                         </div>
592:                       )}
593: 
594:                       {/* Add Comment */}
595:                       <div className="mt-3 flex gap-3">
596:                         <Avatar className="w-8 h-8">
597:                           <AvatarFallback className="text-xs">Y</AvatarFallback>
598:                         </Avatar>
599:                         <div className="flex-1 flex gap-2">
600:                           <Input
601:                             placeholder="Write a comment..."
602:                             className="text-sm"
603:                             onKeyPress={(e) => {
604:                               if (e.key === 'Enter') {
605:                                 handleAddComment(post._id, (e.target as HTMLInputElement).value)
606:                                 ;(e.target as HTMLInputElement).value = ''
607:                               }
608:                             }}
609:                           />
610:                           <Button size="sm" variant="outline">
611:                             <Send className="w-4 h-4" />
612:                           </Button>
613:                         </div>
614:                       </div>
615:                     </div>
616:                   </div>
617:                 </CardContent>
618:               </Card>
619:             ))}
620:           </div>
621:         </TabsContent>
622: 
623:         {/* Connections Tab */}
624:         <TabsContent value="connections" className="space-y-6">
625:           <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
626:             {/* Connection Requests */}
627:             <Card className="lg:col-span-1">
628:               <CardHeader>
629:                 <CardTitle className="flex items-center gap-2">
630:                   <Bell className="w-5 h-5" />
631:                   Connection Requests
632:                 </CardTitle>
633:               </CardHeader>
634:               <CardContent>
635:                 {pendingRequests.length === 0 ? (
636:                   <p className="text-muted-foreground text-center py-4">No pending requests</p>
637:                 ) : (
638:                   <div className="space-y-4">
639:                     {pendingRequests.map((request) => (
640:                       <div key={request.userId} className="flex items-center gap-3 p-3 border rounded-lg">
641:                         <Avatar>
642:                           <AvatarImage src={request.user?.avatar} />
643:                           <AvatarFallback>{request.user?.name[0]}</AvatarFallback>
644:                         </Avatar>
645:                         <div className="flex-1">
646:                           <p className="font-medium text-sm">{request.user?.name}</p>
647:                           <p className="text-xs text-muted-foreground">{request.user?.title}</p>
648:                           {request.message && (
649:                             <p className="text-xs text-muted-foreground mt-1">"{request.message}"</p>
650:                           )}
651:                         </div>
652:                         <div className="flex gap-2">
653:                           <Button
654:                             size="sm"
655:                             onClick={() => handleConnectionAction('accept', request.userId)}
656:                           >
657:                             <UserCheck className="w-4 h-4" />
658:                           </Button>
659:                           <Button
660:                             size="sm"
661:                             variant="outline"
662:                             onClick={() => handleConnectionAction('decline', request.userId)}
663:                           >
664:                             <UserX className="w-4 h-4" />
665:                           </Button>
666:                         </div>
667:                       </div>
668:                     ))}
669:                   </div>
670:                 )}
671:               </CardContent>
672:             </Card>
673: 
674:             {/* My Connections */}
675:             <Card className="lg:col-span-2">
676:               <CardHeader>
677:                 <CardTitle>My Network</CardTitle>
678:                 <CardDescription>
679:                   {connections.filter(c => c.status === 'accepted').length} connections
680:                 </CardDescription>
681:               </CardHeader>
682:               <CardContent>
683:                 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
684:                   {connections
685:                     .filter(conn => conn.status === 'accepted')
686:                     .map((connection) => (
687:                       <div key={connection.userId} className="flex items-center gap-3 p-3 border rounded-lg">
688:                         <Avatar>
689:                           <AvatarImage src={connection.user?.avatar} />
690:                           <AvatarFallback>{connection.user?.name[0]}</AvatarFallback>
691:                         </Avatar>
692:                         <div className="flex-1">
693:                           <p className="font-medium">{connection.user?.name}</p>
694:                           <p className="text-sm text-muted-foreground">{connection.user?.title}</p>
695:                           <div className="flex items-center gap-2 mt-1">
696:                             <MapPin className="w-3 h-3 text-muted-foreground" />
697:                             <span className="text-xs text-muted-foreground">{connection.user?.location}</span>
698:                           </div>
699:                         </div>
700:                         <Button size="sm" variant="outline">
701:                           <MessageSquare className="w-4 h-4 mr-2" />
702:                           Message
703:                         </Button>
704:                       </div>
705:                     ))}
706:                 </div>
707:               </CardContent>
708:             </Card>
709:           </div>
710:         </TabsContent>
711: 
712:         {/* Discover Tab */}
713:         <TabsContent value="discover" className="space-y-6">
714:           <Card>
715:             <CardHeader>
716:               <CardTitle>People You May Know</CardTitle>
717:               <CardDescription>
718:                 Expand your network with relevant connections
719:               </CardDescription>
720:             </CardHeader>
721:             <CardContent>
722:               <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
723:                 {suggestions.map((person) => (
724:                   <Card key={person.id}>
725:                     <CardContent className="p-6">
726:                       <div className="text-center">
727:                         <Avatar className="w-16 h-16 mx-auto mb-4">
728:                           <AvatarImage src={person.avatar} />
729:                           <AvatarFallback>{person.name[0]}</AvatarFallback>
730:                         </Avatar>
731:                         <h3 className="font-semibold mb-1">{person.name}</h3>
732:                         <p className="text-sm text-muted-foreground mb-2">{person.title}</p>
733:                         <div className="text-xs text-muted-foreground mb-4">
734:                           <div className="flex items-center justify-center gap-1 mb-1">
735:                             <MapPin className="w-3 h-3" />
736:                             {person.location}
737:                           </div>
738:                           <div>{person.mutualConnections} mutual connections</div>
739:                         </div>
740: 
741:                         {person.skills && person.skills.length > 0 && (
742:                           <div className="flex flex-wrap justify-center gap-1 mb-4">
743:                             {person.skills.slice(0, 3).map((skill, index) => (
744:                               <Badge key={index} variant="outline" className="text-xs">
745:                                 {skill}
746:                               </Badge>
747:                             ))}
748:                           </div>
749:                         )}
750: 
751:                         <Button
752:                           onClick={() => handleConnect(person.id)}
753:                           className="w-full"
754:                         >
755:                           <UserPlus className="w-4 h-4 mr-2" />
756:                           Connect
757:                         </Button>
758:                       </div>
759:                     </CardContent>
760:                   </Card>
761:                 ))}
762:               </div>
763:             </CardContent>
764:           </Card>
765:         </TabsContent>
766: 
767:         {/* Messages Tab */}
768:         <TabsContent value="messages" className="space-y-6">
769:           <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
770:             {/* Conversations List */}
771:             <Card className="lg:col-span-1">
772:               <CardHeader>
773:                 <CardTitle className="flex items-center gap-2">
774:                   <MessageSquare className="w-5 h-5" />
775:                   Conversations
776:                 </CardTitle>
777:               </CardHeader>
778:               <CardContent>
779:                 <div className="space-y-2">
780:                   {connections
781:                     .filter(conn => conn.status === 'accepted')
782:                     .slice(0, 10)
783:                     .map((connection) => (
784:                       <div
785:                         key={connection._id}
786:                         className="flex items-center gap-3 p-3 rounded-lg hover:bg-background cursor-pointer border"
787:                         onClick={() => {
788:                           if (connection.user) {
789:                             setSelectedConversation(connection.user.id)
790:                             setSelectedConversationUser(connection.user)
791:                             loadMessages(connection.user.id)
792:                           }
793:                         }}
794:                       >
795:                         <Avatar>
796:                           <AvatarImage src={connection.user?.avatar} />
797:                           <AvatarFallback>{connection.user?.name?.[0] || '?'}</AvatarFallback>
798:                         </Avatar>
799:                         <div className="flex-1 min-w-0">
800:                           <p className="font-medium truncate">{connection.user?.name || 'Unknown'}</p>
801:                           <p className="text-sm text-muted-foreground truncate">{connection.user?.title || 'Job Seeker'}</p>
802:                         </div>
803:                         {connection.user?.isOnline && (
804:                           <div className="w-2 h-2 bg-green-500 rounded-full"></div>
805:                         )}
806:                       </div>
807:                     ))}
808:                 </div>
809:               </CardContent>
810:             </Card>
811: 
812:             {/* Messages View */}
813:             <Card className="lg:col-span-2">
814:               <CardHeader>
815:                 <CardTitle>
816:                   {selectedConversationUser ? selectedConversationUser.name : 'Select a conversation'}
817:                 </CardTitle>
818:               </CardHeader>
819:               <CardContent>
820:                 {selectedConversation ? (
821:                   <div className="flex flex-col h-96">
822:                     {/* Messages List */}
823:                     <div className="flex-1 overflow-y-auto space-y-4 mb-4">
824:                       {messages.map((message) => (
825:                         <div
826:                           key={message._id}
827:                           className={`flex gap-3 ${
828:                             message.isFromCurrentUser ? 'justify-end' : 'justify-start'
829:                           }`}
830:                         >
831:                           {!message.isFromCurrentUser && (
832:                             <Avatar className="w-8 h-8">
833:                               <AvatarImage src={message.sender.avatar} />
834:                               <AvatarFallback>{message.sender.name[0]}</AvatarFallback>
835:                             </Avatar>
836:                           )}
837:                           <div
838:                             className={`max-w-xs px-4 py-2 rounded-lg ${
839:                               message.isFromCurrentUser
840:                                 ? 'bg-blue-500 text-foreground'
841:                                 : 'bg-muted text-foreground'
842:                             }`}
843:                           >
844:                             <p className="text-sm">{message.content}</p>
845:                             <p className={`text-xs mt-1 ${
846:                               message.isFromCurrentUser ? 'text-blue-100' : 'text-muted-foreground'
847:                             }`}>
848:                               {new Date(message.createdAt).toLocaleTimeString()}
849:                             </p>
850:                           </div>
851:                           {message.isFromCurrentUser && (
852:                             <Avatar className="w-8 h-8">
853:                               <AvatarFallback>You</AvatarFallback>
854:                             </Avatar>
855:                           )}
856:                         </div>
857:                       ))}
858:                     </div>
859: 
860:                     {/* Message Input */}
861:                     <div className="flex gap-2">
862:                       <Input
863:                         value={newMessage}
864:                         onChange={(e) => setNewMessage(e.target.value)}
865:                         placeholder="Type your message..."
866:                         onKeyPress={(e) => {
867:                           if (e.key === 'Enter') {
868:                             sendMessage()
869:                           }
870:                         }}
871:                         className="flex-1"
872:                       />
873:                       <Button onClick={sendMessage} disabled={!newMessage.trim()}>
874:                         <Send className="w-4 h-4" />
875:                       </Button>
876:                     </div>
877:                   </div>
878:                 ) : (
879:                   <div className="text-center py-12 text-muted-foreground">
880:                     <MessageSquare className="w-16 h-16 mx-auto mb-4 opacity-50" />
881:                     <p>Select a conversation to start messaging</p>
882:                   </div>
883:                 )}
884:               </CardContent>
885:             </Card>
886:           </div>
887:         </TabsContent>
888:       </Tabs>
889: 
890:       {/* Create Post Dialog */}
891:       <Dialog open={showCreatePost} onOpenChange={setShowCreatePost}>
892:         <DialogContent className="max-w-2xl">
893:           <DialogHeader>
894:             <DialogTitle>Create a Post</DialogTitle>
895:             <DialogDescription>
896:               Share your thoughts, ask questions, or post opportunities with your network
897:             </DialogDescription>
898:           </DialogHeader>
899: 
900:           <div className="space-y-4">
901:             <div>
902:               <label className="text-sm font-medium">Post Type</label>
903:               <Select
904:                 value={newPost.type}
905:                 onValueChange={(value: NetworkPost['type']) =>
906:                   setNewPost(prev => ({ ...prev, type: value }))
907:                 }
908:               >
909:                 <SelectTrigger>
910:                   <SelectValue />
911:                 </SelectTrigger>
912:                 <SelectContent>
913:                   <SelectItem value="general">General Post</SelectItem>
914:                   <SelectItem value="job_opportunity">Job Opportunity</SelectItem>
915:                   <SelectItem value="career_advice">Career Advice</SelectItem>
916:                   <SelectItem value="success_story">Success Story</SelectItem>
917:                   <SelectItem value="question">Question</SelectItem>
918:                 </SelectContent>
919:               </Select>
920:             </div>
921: 
922:             {(newPost.type === 'job_opportunity' || newPost.type === 'career_advice' ||
923:               newPost.type === 'success_story' || newPost.type === 'question') && (
924:               <div>
925:                 <label className="text-sm font-medium">Title</label>
926:                 <Input
927:                   value={newPost.title}
928:                   onChange={(e) => setNewPost(prev => ({ ...prev, title: e.target.value }))}
929:                   placeholder="Give your post a title..."
930:                 />
931:               </div>
932:             )}
933: 
934:             <div>
935:               <label className="text-sm font-medium">Content</label>
936:               <Textarea
937:                 value={newPost.content}
938:                 onChange={(e) => setNewPost(prev => ({ ...prev, content: e.target.value }))}
939:                 placeholder="What's on your mind?"
940:                 rows={6}
941:               />
942:             </div>
943: 
944:             <div>
945:               <label className="text-sm font-medium">Tags (optional)</label>
946:               <Input
947:                 value={newPost.tags.join(', ')}
948:                 onChange={(e) => setNewPost(prev => ({
949:                   ...prev,
950:                   tags: e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag)
951:                 }))}
952:                 placeholder="e.g., javascript, react, career-advice"
953:               />
954:             </div>
955: 
956:             <div>
957:               <label className="text-sm font-medium">Visibility</label>
958:               <Select
959:                 value={newPost.visibility}
960:                 onValueChange={(value: NetworkPost['visibility']) =>
961:                   setNewPost(prev => ({ ...prev, visibility: value }))
962:                 }
963:               >
964:                 <SelectTrigger>
965:                   <SelectValue />
966:                 </SelectTrigger>
967:                 <SelectContent>
968:                   <SelectItem value="public">Public</SelectItem>
969:                   <SelectItem value="connections">Connections Only</SelectItem>
970:                   <SelectItem value="private">Private</SelectItem>
971:                 </SelectContent>
972:               </Select>
973:             </div>
974: 
975:             <div className="flex gap-3 pt-4">
976:               <Button onClick={handleCreatePost} className="flex-1">
977:                 <Send className="w-4 h-4 mr-2" />
978:                 Post
979:               </Button>
980:               <Button variant="outline" onClick={() => setShowCreatePost(false)}>
981:                 Cancel
982:               </Button>
983:             </div>
984:           </div>
985:         </DialogContent>
986:       </Dialog>
987:     </div>
988:   )
989: }
</file>

<file path="src/app/network/page.tsx">
 1: import { Suspense } from 'react'
 2: import { getServerSession } from 'next-auth/next'
 3: import { redirect } from 'next/navigation'
 4: import { authOptions } from '@/lib/auth'
 5: import { NetworkDashboard } from './components/network-dashboard'
 6: 
 7: export default async function NetworkPage() {
 8:   const session = await getServerSession(authOptions)
 9: 
10:   if (!session) {
11:     redirect('/auth/signin')
12:   }
13: 
14:   return (
15:     <div className="min-h-screen bg-background">
16:       <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
17:         <div className="mb-8">
18:           <h1 className="text-3xl font-bold text-foreground">Professional Network</h1>
19:           <p className="mt-2 text-lg text-muted-foreground">
20:             Connect with fellow job seekers, share opportunities, and build your professional network
21:           </p>
22:         </div>
23: 
24:         <Suspense fallback={<NetworkSkeleton />}>
25:           <NetworkDashboard userId={session.user.id} />
26:         </Suspense>
27:       </div>
28:     </div>
29:   )
30: }
31: 
32: function NetworkSkeleton() {
33:   return (
34:     <div className="space-y-8">
35:       {/* Stats Overview Skeleton - Dribbble Style */}
36:       <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
37:         {[...Array(4)].map((_, i) => (
38:           <div key={i} className="glass-card animate-pulse">
39:             <div className="w-16 h-4 bg-muted rounded mb-2"></div>
40:             <div className="w-8 h-8 bg-muted rounded"></div>
41:           </div>
42:         ))}
43:       </div>
44: 
45:       {/* Feed Skeleton - Dribbble Style */}
46:       <div className="modern-card">
47:         <div className="p-6 border-b border-border/50">
48:           <div className="w-48 h-6 bg-muted rounded mb-4"></div>
49:           <div className="w-full h-12 bg-muted rounded"></div>
50:         </div>
51:         <div className="divide-y divide-border/50">
52:           {[...Array(5)].map((_, i) => (
53:             <div key={i} className="p-6 animate-pulse">
54:               <div className="flex items-start gap-4">
55:                 <div className="w-12 h-12 bg-gradient-primary rounded-full opacity-50"></div>
56:                 <div className="flex-1">
57:                   <div className="w-32 h-4 bg-muted rounded mb-2"></div>
58:                   <div className="w-full h-16 bg-muted rounded mb-3"></div>
59:                   <div className="w-24 h-4 bg-muted rounded"></div>
60:                 </div>
61:               </div>
62:             </div>
63:           ))}
64:         </div>
65:       </div>
66:     </div>
67:   )
68: }
</file>

<file path="src/app/page.tsx">
 1: import { HeroSectionV2 } from '@/components/hero-section-v2'
 2: import { FeaturesSection } from '@/components/features-section'
 3: import { StatsSection } from '@/components/stats-section'
 4: 
 5: export default function HomePage() {
 6:   return (
 7:     <div className="min-h-screen bg-background">
 8:       <HeroSectionV2 />
 9:       <FeaturesSection />
10:       <StatsSection />
11:     </div>
12:   )
13: }
</file>

<file path="src/app/privacy/page.tsx">
  1: "use client"
  2: 
  3: export default function PrivacyPage() {
  4:   return (
  5:     <div className="max-w-4xl mx-auto p-6 md:p-8 space-y-6">
  6:       <div className="space-y-2">
  7:         <h1 className="text-3xl md:text-4xl font-bold">Privacy Policy</h1>
  8:         <p className="text-sm text-muted-foreground">Last Updated: October 19, 2025</p>
  9:         <p className="text-base text-foreground">Career Lever AI ("we", "our", "us") is committed to protecting your privacy. This policy explains how we collect, use, and safeguard your personal information.</p>
 10:       </div>
 11: 
 12:       <div className="bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
 13:         <h2 className="text-lg font-semibold mb-2">Your Data Rights</h2>
 14:         <p className="text-sm text-foreground">You control your data. Manage consent, export your information, or request deletion below.</p>
 15:       </div>
 16: 
 17:       <h2 className="text-lg font-semibold mt-4">Consent</h2>
 18:       <div className="text-sm text-foreground space-y-2">
 19:         <p>We request consent to process your application data to provide core features (customization, analytics, alerts). You can withdraw consent anytime.</p>
 20:         <div className="space-x-2">
 21:           <button className="px-3 py-2 border rounded text-sm" onClick={()=>{ try { localStorage.setItem('consent:processing','granted'); alert('Consent saved'); } catch {} }}>Grant Consent</button>
 22:           <button className="px-3 py-2 border rounded text-sm" onClick={()=>{ try { localStorage.setItem('consent:processing','withdrawn'); alert('Consent withdrawn'); } catch {} }}>Withdraw</button>
 23:         </div>
 24:       </div>
 25: 
 26:       <h2 className="text-lg font-semibold mt-6">Export Your Data</h2>
 27:       <div className="text-sm text-foreground space-y-2">
 28:         <p>Download a JSON export of your account data.</p>
 29:         <a href="/api/privacy/export" className="px-3 py-2 border rounded text-sm inline-block">Export JSON</a>
 30:       </div>
 31: 
 32:       <h2 className="text-lg font-semibold mt-6">Request Deletion</h2>
 33:       <div className="text-sm text-foreground space-y-2">
 34:         <p>Submit a deletion request. We’ll confirm via your account email.</p>
 35:         <form onSubmit={async(e)=>{ e.preventDefault(); const email=(e.target as any).email.value; const r = await fetch('/api/privacy/delete',{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ email }) }); alert(r.ok?'Request submitted':'Failed'); }} className="space-x-2">
 36:           <input name="email" type="email" required placeholder="Your email" className="border rounded p-2" />
 37:           <button type="submit" className="px-3 py-2 border rounded text-sm">Request</button>
 38:         </form>
 39:       </div>
 40: 
 41:       <div className="space-y-4">
 42:         <h2 className="text-2xl font-bold">1. Information We Collect</h2>
 43:         
 44:         <div>
 45:           <h3 className="text-lg font-semibold">1.1 Information You Provide</h3>
 46:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
 47:             <li><strong>Account Information:</strong> Name, email address, profile photo</li>
 48:             <li><strong>Professional Information:</strong> Resumes, cover letters, work experience, skills, education</li>
 49:             <li><strong>Job Applications:</strong> Job titles, companies, application status, notes</li>
 50:             <li><strong>User-Generated Content:</strong> Custom templates, saved searches, preferences</li>
 51:           </ul>
 52:         </div>
 53: 
 54:         <div>
 55:           <h3 className="text-lg font-semibold">1.2 Information Collected Automatically</h3>
 56:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
 57:             <li><strong>Device Information:</strong> Device type, operating system, browser type, IP address</li>
 58:             <li><strong>Usage Data:</strong> Pages viewed, features used, time spent, click patterns</li>
 59:             <li><strong>Location Data:</strong> Approximate location based on IP address (for job matching)</li>
 60:             <li><strong>Performance Data:</strong> Error logs, crash reports, API response times</li>
 61:           </ul>
 62:         </div>
 63: 
 64:         <div>
 65:           <h3 className="text-lg font-semibold">1.3 Information from Third Parties</h3>
 66:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
 67:             <li><strong>Google OAuth:</strong> Email, name, profile photo (with your permission)</li>
 68:             <li><strong>Google Calendar:</strong> Calendar events (only when you enable integration)</li>
 69:             <li><strong>AI Services:</strong> Processed data from Perplexity AI for research and insights</li>
 70:           </ul>
 71:         </div>
 72:       </div>
 73: 
 74:       <div className="space-y-4">
 75:         <h2 className="text-2xl font-bold">2. How We Use Your Information</h2>
 76:         
 77:         <div>
 78:           <h3 className="text-lg font-semibold">2.1 To Provide Our Services</h3>
 79:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
 80:             <li>Generate AI-powered resume and cover letter customizations</li>
 81:             <li>Provide company research and job market insights</li>
 82:             <li>Track and manage your job applications</li>
 83:             <li>Send notifications about application deadlines and updates</li>
 84:             <li>Sync with your calendar for interview scheduling</li>
 85:           </ul>
 86:         </div>
 87: 
 88:         <div>
 89:           <h3 className="text-lg font-semibold">2.2 To Improve Our Services</h3>
 90:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
 91:             <li>Analyze usage patterns to enhance features</li>
 92:             <li>Conduct research and development</li>
 93:             <li>Test new features and improvements</li>
 94:             <li>Personalize your experience and recommendations</li>
 95:           </ul>
 96:         </div>
 97: 
 98:         <div>
 99:           <h3 className="text-lg font-semibold">2.3 For Security and Legal Compliance</h3>
100:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
101:             <li>Prevent fraud, abuse, and security incidents</li>
102:             <li>Comply with legal obligations and law enforcement requests</li>
103:             <li>Enforce our Terms of Service</li>
104:             <li>Protect the rights and safety of our users</li>
105:           </ul>
106:         </div>
107:       </div>
108: 
109:       <div className="space-y-4">
110:         <h2 className="text-2xl font-bold">3. How We Share Your Information</h2>
111:         
112:         <div className="bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-4">
113:           <p className="text-sm font-semibold">✓ We DO NOT sell your personal data to third parties.</p>
114:         </div>
115: 
116:         <div>
117:           <h3 className="text-lg font-semibold">3.1 Service Providers</h3>
118:           <p className="text-sm text-foreground mt-2">We share data with trusted service providers who help us operate our services:</p>
119:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
120:             <li><strong>Cloud Hosting:</strong> Railway, Vercel (infrastructure)</li>
121:             <li><strong>Database:</strong> MongoDB Atlas (data storage)</li>
122:             <li><strong>AI Services:</strong> Perplexity AI (research and insights)</li>
123:             <li><strong>Authentication:</strong> Google OAuth (sign-in)</li>
124:             <li><strong>Analytics:</strong> Error tracking and performance monitoring</li>
125:           </ul>
126:         </div>
127: 
128:         <div>
129:           <h3 className="text-lg font-semibold">3.2 With Your Consent</h3>
130:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
131:             <li>When you connect third-party services (e.g., Google Calendar)</li>
132:             <li>When you share your resume or application with others</li>
133:             <li>When you explicitly authorize data sharing</li>
134:           </ul>
135:         </div>
136: 
137:         <div>
138:           <h3 className="text-lg font-semibold">3.3 Legal Requirements</h3>
139:           <p className="text-sm text-foreground mt-2">We may disclose information if required by law, court order, or to protect rights and safety.</p>
140:         </div>
141:       </div>
142: 
143:       <h2 className="text-lg font-semibold mt-4">Security</h2>
144:       <p className="text-sm text-foreground">We use industry practices (encryption in transit, restricted access, rate limiting) to protect your data. Despite safeguards, no method is 100% secure.</p>
145: 
146:       <h2 className="text-lg font-semibold mt-4">Retention</h2>
147:       <p className="text-sm text-foreground">We retain data for the duration of your account or as required by law. You may delete your account to remove data, subject to legal/operational limits.</p>
148: 
149:       <div className="space-y-4">
150:         <h2 className="text-2xl font-bold">4. Your Privacy Rights</h2>
151:         
152:         <div>
153:           <h3 className="text-lg font-semibold">4.1 GDPR Rights (EU Users)</h3>
154:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
155:             <li><strong>Right to Access:</strong> Request a copy of your personal data</li>
156:             <li><strong>Right to Rectification:</strong> Correct inaccurate data</li>
157:             <li><strong>Right to Erasure:</strong> Request deletion of your data</li>
158:             <li><strong>Right to Portability:</strong> Export your data in machine-readable format</li>
159:             <li><strong>Right to Object:</strong> Object to processing of your data</li>
160:             <li><strong>Right to Restrict:</strong> Limit how we use your data</li>
161:           </ul>
162:         </div>
163: 
164:         <div>
165:           <h3 className="text-lg font-semibold">4.2 CCPA Rights (California Users)</h3>
166:           <ul className="list-disc ml-6 text-sm text-foreground space-y-1 mt-2">
167:             <li><strong>Right to Know:</strong> What personal information we collect and how we use it</li>
168:             <li><strong>Right to Delete:</strong> Request deletion of your personal information</li>
169:             <li><strong>Right to Opt-Out:</strong> Opt-out of sale of personal information (we don't sell data)</li>
170:             <li><strong>Right to Non-Discrimination:</strong> Equal service regardless of privacy choices</li>
171:           </ul>
172:         </div>
173: 
174:         <div>
175:           <h3 className="text-lg font-semibold">4.3 How to Exercise Your Rights</h3>
176:           <p className="text-sm text-foreground mt-2">Use the tools above or contact us at <strong>privacy@careerlever.com</strong></p>
177:         </div>
178:       </div>
179: 
180:       <div className="space-y-4">
181:         <h2 className="text-2xl font-bold">5. Data Security</h2>
182:         <p className="text-sm text-foreground">We implement industry-standard security measures to protect your data:</p>
183:         <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
184:           <li><strong>Encryption:</strong> All data encrypted in transit (TLS/SSL) and at rest</li>
185:           <li><strong>Access Controls:</strong> Role-based access with multi-factor authentication</li>
186:           <li><strong>Monitoring:</strong> 24/7 security monitoring and incident response</li>
187:           <li><strong>Regular Audits:</strong> Security assessments and penetration testing</li>
188:           <li><strong>Data Backups:</strong> Regular encrypted backups with disaster recovery</li>
189:         </ul>
190:         <p className="text-sm text-muted-foreground mt-2">Despite our safeguards, no method of transmission over the Internet is 100% secure. We cannot guarantee absolute security.</p>
191:       </div>
192: 
193:       <div className="space-y-4">
194:         <h2 className="text-2xl font-bold">6. Data Retention</h2>
195:         <p className="text-sm text-foreground">We retain your data for as long as your account is active or as needed to provide services. Retention periods:</p>
196:         <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
197:           <li><strong>Account Data:</strong> Until account deletion + 30 days</li>
198:           <li><strong>Resumes & Applications:</strong> Until you delete them or close your account</li>
199:           <li><strong>Usage Logs:</strong> 90 days for analytics, 1 year for security</li>
200:           <li><strong>Backups:</strong> 30 days rolling retention</li>
201:         </ul>
202:         <p className="text-sm text-foreground mt-2">After deletion, some data may remain in backups for up to 30 days before permanent removal.</p>
203:       </div>
204: 
205:       <div className="space-y-4">
206:         <h2 className="text-2xl font-bold">7. Children's Privacy</h2>
207:         <p className="text-sm text-foreground">Career Lever AI is not intended for users under 16 years of age. We do not knowingly collect personal information from children. If you believe we have collected data from a child, please contact us immediately.</p>
208:       </div>
209: 
210:       <div className="space-y-4">
211:         <h2 className="text-2xl font-bold">8. International Data Transfers</h2>
212:         <p className="text-sm text-foreground">Your data may be transferred to and processed in countries other than your own. We ensure appropriate safeguards are in place, including:</p>
213:         <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
214:           <li>Standard Contractual Clauses (SCCs) for EU data transfers</li>
215:           <li>Data Processing Agreements with all service providers</li>
216:           <li>Compliance with applicable data protection laws</li>
217:         </ul>
218:       </div>
219: 
220:       <div className="space-y-4">
221:         <h2 className="text-2xl font-bold">9. Cookies and Tracking</h2>
222:         <p className="text-sm text-foreground">We use cookies and similar technologies to:</p>
223:         <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
224:           <li>Keep you signed in</li>
225:           <li>Remember your preferences</li>
226:           <li>Understand how you use our services</li>
227:           <li>Improve performance and security</li>
228:         </ul>
229:         <p className="text-sm text-foreground mt-2">You can control cookies through your browser settings. Disabling cookies may affect functionality.</p>
230:       </div>
231: 
232:       <div className="space-y-4">
233:         <h2 className="text-2xl font-bold">10. Changes to This Policy</h2>
234:         <p className="text-sm text-foreground">We may update this privacy policy from time to time. We will notify you of significant changes by:</p>
235:         <ul className="list-disc ml-6 text-sm text-foreground space-y-1">
236:           <li>Posting the new policy on this page</li>
237:           <li>Updating the "Last Updated" date</li>
238:           <li>Sending an email notification (for material changes)</li>
239:         </ul>
240:         <p className="text-sm text-foreground mt-2">Your continued use of our services after changes constitutes acceptance of the updated policy.</p>
241:       </div>
242: 
243:       <div className="space-y-4">
244:         <h2 className="text-2xl font-bold">11. Contact Us</h2>
245:         <p className="text-sm text-foreground">For privacy questions, concerns, or to exercise your rights:</p>
246:         <div className="bg-gray-50 dark:bg-gray-900 border rounded-lg p-4 space-y-2">
247:           <p className="text-sm"><strong>Email:</strong> privacy@careerlever.com</p>
248:           <p className="text-sm"><strong>Support:</strong> support@careerlever.com</p>
249:           <p className="text-sm"><strong>Data Protection Officer:</strong> dpo@careerlever.com</p>
250:           <p className="text-sm"><strong>Address:</strong> Career Lever AI, [Your Address]</p>
251:         </div>
252:         <p className="text-sm text-muted-foreground mt-4">We will respond to all requests within 30 days.</p>
253:       </div>
254: 
255:       <div className="border-t pt-6 mt-8">
256:         <p className="text-xs text-muted-foreground">This privacy policy is effective as of October 19, 2025. Version 1.0</p>
257:       </div>
258:     </div>
259:   )
260: }
</file>

<file path="src/app/profile/page.tsx">
 1: 'use client'
 2: 
 3: import { useEffect } from 'react'
 4: import { useRouter } from 'next/navigation'
 5: 
 6: /**
 7:  * Redirect /profile to /settings/profile
 8:  * This route is referenced in navigation but doesn't exist
 9:  */
10: export default function ProfileRedirect() {
11:   const router = useRouter()
12:   
13:   useEffect(() => {
14:     router.replace('/settings/profile')
15:   }, [router])
16:   
17:   return (
18:     <div className="flex items-center justify-center min-h-screen">
19:       <div className="text-center">
20:         <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
21:         <p className="text-muted-foreground">Redirecting to Profile Settings...</p>
22:       </div>
23:     </div>
24:   )
25: }
</file>

<file path="src/app/resume-ab-testing/page.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { BarChart3, Eye, Download, Mail, TrendingUp, Plus } from 'lucide-react'
  7: 
  8: interface VariantAnalytics {
  9:   id: string
 10:   name: string
 11:   template: string
 12:   isActive: boolean
 13:   metrics: {
 14:     views: number
 15:     downloads: number
 16:     responses: number
 17:     totalInteractions: number
 18:     responseRate: number
 19:     downloadRate: number
 20:   }
 21:   createdAt: string
 22: }
 23: 
 24: export default function ResumeABTestingPage() {
 25:   const [variants, setVariants] = useState<VariantAnalytics[]>([])
 26:   const [bestVariantId, setBestVariantId] = useState<string | null>(null)
 27:   const [loading, setLoading] = useState(true)
 28: 
 29:   useEffect(() => {
 30:     fetchAnalytics()
 31:   }, [])
 32: 
 33:   const fetchAnalytics = async () => {
 34:     try {
 35:       // Get first resume ID (simplified)
 36:       const resumeResponse = await fetch('/api/resume/list')
 37:       if (!resumeResponse.ok) return
 38: 
 39:       const resumeData = await resumeResponse.json()
 40:       const resumeId = resumeData.resumes?.[0]?.id
 41: 
 42:       if (!resumeId) return
 43: 
 44:       // Fetch variant analytics
 45:       const response = await fetch(`/api/resume/variants/analytics?resumeId=${resumeId}`)
 46:       if (response.ok) {
 47:         const data = await response.json()
 48:         setVariants(data.variants || [])
 49:         setBestVariantId(data.bestVariant)
 50:       }
 51:     } catch (error) {
 52:       console.error('[AB_TESTING] Error:', error)
 53:     } finally {
 54:       setLoading(false)
 55:     }
 56:   }
 57: 
 58:   if (loading) {
 59:     return (
 60:       <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
 61:         <div className="animate-pulse space-y-4">
 62:           <div className="h-12 bg-muted rounded"></div>
 63:           <div className="h-64 bg-muted rounded"></div>
 64:         </div>
 65:       </div>
 66:     )
 67:   }
 68: 
 69:   return (
 70:     <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
 71:       {/* Header */}
 72:       <div className="mb-8">
 73:         <h1 className="text-2xl sm:text-3xl font-bold mb-2">Resume A/B Testing</h1>
 74:         <p className="text-muted-foreground">
 75:           Track which resume variants perform best and optimize your applications
 76:         </p>
 77:       </div>
 78: 
 79:       {/* Summary Cards */}
 80:       <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
 81:         <Card>
 82:           <CardContent className="pt-6">
 83:             <div className="flex items-center justify-between">
 84:               <div>
 85:                 <p className="text-sm text-muted-foreground">Total Variants</p>
 86:                 <p className="text-2xl font-bold">{variants.length}</p>
 87:               </div>
 88:               <BarChart3 className="w-8 h-8 text-blue-500" />
 89:             </div>
 90:           </CardContent>
 91:         </Card>
 92: 
 93:         <Card>
 94:           <CardContent className="pt-6">
 95:             <div className="flex items-center justify-between">
 96:               <div>
 97:                 <p className="text-sm text-muted-foreground">Total Views</p>
 98:                 <p className="text-2xl font-bold">
 99:                   {variants.reduce((sum, v) => sum + v.metrics.views, 0)}
100:                 </p>
101:               </div>
102:               <Eye className="w-8 h-8 text-purple-500" />
103:             </div>
104:           </CardContent>
105:         </Card>
106: 
107:         <Card>
108:           <CardContent className="pt-6">
109:             <div className="flex items-center justify-between">
110:               <div>
111:                 <p className="text-sm text-muted-foreground">Downloads</p>
112:                 <p className="text-2xl font-bold">
113:                   {variants.reduce((sum, v) => sum + v.metrics.downloads, 0)}
114:                 </p>
115:               </div>
116:               <Download className="w-8 h-8 text-green-500" />
117:             </div>
118:           </CardContent>
119:         </Card>
120: 
121:         <Card>
122:           <CardContent className="pt-6">
123:             <div className="flex items-center justify-between">
124:               <div>
125:                 <p className="text-sm text-muted-foreground">Responses</p>
126:                 <p className="text-2xl font-bold">
127:                   {variants.reduce((sum, v) => sum + v.metrics.responses, 0)}
128:                 </p>
129:               </div>
130:               <Mail className="w-8 h-8 text-yellow-500" />
131:             </div>
132:           </CardContent>
133:         </Card>
134:       </div>
135: 
136:       {/* Variants List */}
137:       <Card>
138:         <CardHeader>
139:           <CardTitle className="flex items-center justify-between">
140:             <span>Resume Variants Performance</span>
141:             <Button size="sm">
142:               <Plus className="w-4 h-4 mr-2" />
143:               Create Variant
144:             </Button>
145:           </CardTitle>
146:         </CardHeader>
147:         <CardContent>
148:           {variants.length === 0 ? (
149:             <div className="text-center py-12">
150:               <BarChart3 className="w-16 h-16 mx-auto text-muted-foreground mb-4" />
151:               <p className="text-muted-foreground mb-4">
152:                 No variants yet. Create your first variant to start A/B testing.
153:               </p>
154:               <Button>
155:                 <Plus className="w-4 h-4 mr-2" />
156:                 Create First Variant
157:               </Button>
158:             </div>
159:           ) : (
160:             <div className="space-y-4">
161:               {variants.map((variant) => (
162:                 <div
163:                   key={variant.id}
164:                   className={`p-6 rounded-lg border-2 ${
165:                     variant.id === bestVariantId
166:                       ? 'border-green-500 bg-green-50 dark:bg-green-950'
167:                       : 'border-border'
168:                   }`}
169:                 >
170:                   <div className="flex items-start justify-between mb-4">
171:                     <div>
172:                       <div className="flex items-center gap-2 mb-1">
173:                         <h3 className="text-lg font-bold">{variant.name}</h3>
174:                         {variant.id === bestVariantId && (
175:                           <span className="px-2 py-1 bg-green-500 text-white text-xs rounded-full flex items-center gap-1">
176:                             <TrendingUp className="w-3 h-3" />
177:                             Best Performer
178:                           </span>
179:                         )}
180:                         {variant.isActive && (
181:                           <span className="px-2 py-1 bg-blue-500 text-white text-xs rounded-full">
182:                             Active
183:                           </span>
184:                         )}
185:                       </div>
186:                       <p className="text-sm text-muted-foreground">
187:                         Template: {variant.template}
188:                       </p>
189:                     </div>
190:                   </div>
191: 
192:                   {/* Metrics Grid */}
193:                   <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
194:                     <div className="text-center p-3 bg-muted rounded-lg">
195:                       <div className="flex items-center justify-center gap-1 mb-1">
196:                         <Eye className="w-4 h-4 text-blue-500" />
197:                         <span className="text-xs text-muted-foreground">Views</span>
198:                       </div>
199:                       <div className="text-2xl font-bold">{variant.metrics.views}</div>
200:                     </div>
201: 
202:                     <div className="text-center p-3 bg-muted rounded-lg">
203:                       <div className="flex items-center justify-center gap-1 mb-1">
204:                         <Download className="w-4 h-4 text-green-500" />
205:                         <span className="text-xs text-muted-foreground">Downloads</span>
206:                       </div>
207:                       <div className="text-2xl font-bold">{variant.metrics.downloads}</div>
208:                     </div>
209: 
210:                     <div className="text-center p-3 bg-muted rounded-lg">
211:                       <div className="flex items-center justify-center gap-1 mb-1">
212:                         <Mail className="w-4 h-4 text-yellow-500" />
213:                         <span className="text-xs text-muted-foreground">Responses</span>
214:                       </div>
215:                       <div className="text-2xl font-bold">{variant.metrics.responses}</div>
216:                     </div>
217: 
218:                     <div className="text-center p-3 bg-muted rounded-lg">
219:                       <div className="text-xs text-muted-foreground mb-1">Response Rate</div>
220:                       <div className="text-2xl font-bold text-green-600">
221:                         {variant.metrics.responseRate}%
222:                       </div>
223:                     </div>
224: 
225:                     <div className="text-center p-3 bg-muted rounded-lg">
226:                       <div className="text-xs text-muted-foreground mb-1">Download Rate</div>
227:                       <div className="text-2xl font-bold text-purple-600">
228:                         {variant.metrics.downloadRate}%
229:                       </div>
230:                     </div>
231:                   </div>
232: 
233:                   {/* Actions */}
234:                   <div className="flex gap-2 mt-4">
235:                     <Button size="sm" variant="outline">View</Button>
236:                     <Button size="sm" variant="outline">Edit</Button>
237:                     <Button size="sm" variant="outline">
238:                       {variant.isActive ? 'Deactivate' : 'Activate'}
239:                     </Button>
240:                   </div>
241:                 </div>
242:               ))}
243:             </div>
244:           )}
245:         </CardContent>
246:       </Card>
247:     </div>
248:   )
249: }
</file>

<file path="src/app/resumes/page.tsx">
 1: 'use client'
 2: 
 3: import { useEffect } from 'react'
 4: import { useRouter } from 'next/navigation'
 5: 
 6: /**
 7:  * Redirect /resumes to /resume-builder
 8:  * This route is referenced in navigation but doesn't exist
 9:  */
10: export default function ResumesRedirect() {
11:   const router = useRouter()
12:   
13:   useEffect(() => {
14:     router.replace('/resume-builder')
15:   }, [router])
16:   
17:   return (
18:     <div className="flex items-center justify-center min-h-screen">
19:       <div className="text-center">
20:         <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
21:         <p className="text-muted-foreground">Redirecting to Resume Builder...</p>
22:       </div>
23:     </div>
24:   )
25: }
</file>

<file path="src/app/reverse-market/page.tsx">
 1: import { getServerSession } from 'next-auth/next'
 2: import { redirect } from 'next/navigation'
 3: import { authOptions } from '@/lib/auth'
 4: import ReverseMarketClient from './reverse-market-client'
 5: 
 6: export default async function ReverseMarketPage() {
 7:   const session = await getServerSession(authOptions)
 8:   if (!session) redirect('/auth/signin')
 9:   return (
10:     <div className="mx-auto max-w-5xl p-6 space-y-6">
11:       <h1 className="text-2xl font-semibold">Reverse Market</h1>
12:       <p className="text-sm text-muted-foreground">Create an anonymous showcase so employers can reach out with opportunities.</p>
13:       <div className="space-y-2">
14:         <a href="/api/openapi" className="text-xs underline">API Docs</a>
15:         <div className="text-sm text-foreground">Use the Integrations or API to post your showcase and view bids.</div>
16:       </div>
17:       <ReverseMarketClient />
18:     </div>
19:   )
20: }
</file>

<file path="src/app/reverse-market/reverse-market-client.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useMemo, useState } from 'react'
  4: 
  5: type Showcase = {
  6:   _id: string
  7:   headline: string
  8:   anonymous: boolean
  9:   skills: string[]
 10:   desiredRoles: string[]
 11:   location?: string
 12:   availability?: 'immediate' | '2-weeks' | '1-month' | 'flexible'
 13:   minSalary?: string
 14:   summary?: string
 15:   links?: Array<{ label: string; url: string }>
 16: }
 17: 
 18: export default function ReverseMarketClient() {
 19:   const [loading, setLoading] = useState(false)
 20:   const [mine, setMine] = useState(true)
 21:   const [showcases, setShowcases] = useState<Showcase[]>([])
 22:   const [headline, setHeadline] = useState('')
 23:   const [skills, setSkills] = useState('')
 24:   const [desiredRoles, setDesiredRoles] = useState('')
 25:   const [anonymous, setAnonymous] = useState(true)
 26:   const [summary, setSummary] = useState('')
 27:   const [location, setLocation] = useState('')
 28:   const [minSalary, setMinSalary] = useState('')
 29: 
 30:   const fetchShowcases = async () => {
 31:     setLoading(true)
 32:     try {
 33:       const url = `/api/reverse-market/showcases?${mine ? 'mine=true' : ''}`
 34:       const resp = await fetch(url)
 35:       const data = await resp.json()
 36:       if (resp.ok) setShowcases(data.showcases || [])
 37:     } finally {
 38:       setLoading(false)
 39:     }
 40:   }
 41: 
 42:   useEffect(() => { fetchShowcases() }, [mine])
 43: 
 44:   const onCreate = async () => {
 45:     if (!headline.trim()) return
 46:     setLoading(true)
 47:     try {
 48:       const resp = await fetch('/api/reverse-market/showcases', {
 49:         method: 'POST',
 50:         headers: { 'Content-Type': 'application/json' },
 51:         body: JSON.stringify({
 52:           headline: headline.trim(),
 53:           anonymous,
 54:           skills: skills.split(',').map(s => s.trim()).filter(Boolean),
 55:           desiredRoles: desiredRoles.split(',').map(s => s.trim()).filter(Boolean),
 56:           summary: summary.trim() || undefined,
 57:           location: location.trim() || undefined,
 58:           minSalary: minSalary.trim() || undefined,
 59:         })
 60:       })
 61:       if (resp.ok) {
 62:         setHeadline('')
 63:         setSkills('')
 64:         setDesiredRoles('')
 65:         setSummary('')
 66:         setLocation('')
 67:         setMinSalary('')
 68:         await fetchShowcases()
 69:       }
 70:     } finally {
 71:       setLoading(false)
 72:     }
 73:   }
 74: 
 75:   return (
 76:     <div className="space-y-6">
 77:       <div className="grid gap-3 md:grid-cols-2">
 78:         <div className="space-y-2">
 79:           <label className="text-sm font-medium">Headline</label>
 80:           <input className="border rounded px-3 py-2 w-full" value={headline} onChange={e=>setHeadline(e.target.value)} placeholder="Senior Full-Stack Engineer (TypeScript/React/Node)" />
 81:         </div>
 82:         <div className="space-y-2">
 83:           <label className="text-sm font-medium">Skills (comma separated)</label>
 84:           <input className="border rounded px-3 py-2 w-full" value={skills} onChange={e=>setSkills(e.target.value)} placeholder="TypeScript, React, Node, AWS" />
 85:         </div>
 86:         <div className="space-y-2">
 87:           <label className="text-sm font-medium">Desired Roles (comma separated)</label>
 88:           <input className="border rounded px-3 py-2 w-full" value={desiredRoles} onChange={e=>setDesiredRoles(e.target.value)} placeholder="Senior Engineer, Tech Lead" />
 89:         </div>
 90:         <div className="space-y-2">
 91:           <label className="text-sm font-medium">Location</label>
 92:           <input className="border rounded px-3 py-2 w-full" value={location} onChange={e=>setLocation(e.target.value)} placeholder="Remote / Toronto, ON" />
 93:         </div>
 94:         <div className="space-y-2">
 95:           <label className="text-sm font-medium">Minimum Salary</label>
 96:           <input className="border rounded px-3 py-2 w-full" value={minSalary} onChange={e=>setMinSalary(e.target.value)} placeholder="$150k+ USD" />
 97:         </div>
 98:         <div className="space-y-2">
 99:           <label className="text-sm font-medium">Summary</label>
100:           <textarea className="border rounded px-3 py-2 w-full" rows={3} value={summary} onChange={e=>setSummary(e.target.value)} placeholder="Brief pitch about your experience and value" />
101:         </div>
102:         <div className="flex items-center gap-3">
103:           <input id="anonymous" type="checkbox" checked={anonymous} onChange={e=>setAnonymous(e.target.checked)} />
104:           <label htmlFor="anonymous" className="text-sm">Anonymous</label>
105:         </div>
106:       </div>
107:       <div className="flex items-center gap-3">
108:         <button disabled={loading} className="px-4 py-2 rounded bg-blue-600 text-foreground disabled:opacity-60" onClick={onCreate}>Create Showcase</button>
109:         <label className="flex items-center gap-2 text-sm">
110:           <input type="checkbox" checked={mine} onChange={e=>setMine(e.target.checked)} />
111:           Show only my showcases
112:         </label>
113:       </div>
114:       <div className="border rounded">
115:         <table className="w-full text-sm">
116:           <thead>
117:             <tr className="bg-background">
118:               <th className="text-left p-2">Headline</th>
119:               <th className="text-left p-2">Skills</th>
120:               <th className="text-left p-2">Desired Roles</th>
121:               <th className="text-left p-2">Anonymous</th>
122:             </tr>
123:           </thead>
124:           <tbody>
125:             {showcases.map(s => (
126:               <tr key={s._id} className="border-t">
127:                 <td className="p-2">{s.headline}</td>
128:                 <td className="p-2">{s.skills?.join(', ')}</td>
129:                 <td className="p-2">{s.desiredRoles?.join(', ')}</td>
130:                 <td className="p-2">{s.anonymous ? 'Yes' : 'No'}</td>
131:               </tr>
132:             ))}
133:             {!showcases.length && (
134:               <tr>
135:                 <td className="p-4 text-muted-foreground" colSpan={4}>No showcases found.</td>
136:               </tr>
137:             )}
138:           </tbody>
139:         </table>
140:       </div>
141:     </div>
142:   )
143: }
</file>

<file path="src/app/salary-negotiation/components/salary-negotiation.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Input } from '@/components/ui/input'
  7: import { Label } from '@/components/ui/label'
  8: import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
  9: import { Badge } from '@/components/ui/badge'
 10: import { Alert, AlertDescription } from '@/components/ui/alert'
 11: import { Progress } from '@/components/ui/progress'
 12: import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
 13: import {
 14:   DollarSign,
 15:   TrendingUp,
 16:   Target,
 17:   AlertTriangle,
 18:   CheckCircle,
 19:   Loader2,
 20:   Calculator,
 21:   MessageSquare,
 22:   FileText,
 23:   Award,
 24:   Lightbulb
 25: } from 'lucide-react'
 26: import toast from 'react-hot-toast'
 27: 
 28: interface SalaryAnalysis {
 29:   marketData: {
 30:     role: string
 31:     location: string
 32:     experience: string
 33:     salaryRange: {
 34:       min: number
 35:       median: number
 36:       max: number
 37:       currency: string
 38:     }
 39:     percentiles: {
 40:       p25: number
 41:       p50: number
 42:       p75: number
 43:       p90: number
 44:     }
 45:   }
 46:   negotiationStrategy: {
 47:     targetSalary: number
 48:     openingOffer: number
 49:     counterOffer: number
 50:     reasoning: string[]
 51:   }
 52:   leveragePoints: {
 53:     experience: string[]
 54:     skills: string[]
 55:     marketDemand: string[]
 56:     companyFactors: string[]
 57:   }
 58:   talkingPoints: {
 59:     strengths: string[]
 60:     valueProposition: string
 61:     marketComparison: string
 62:     growthPotential: string
 63:   }
 64:   redFlags: {
 65:     warningSigns: string[]
 66:     alternatives: string[]
 67:     walkAwayPoints: string[]
 68:   }
 69:   preparationSteps: {
 70:     research: string[]
 71:     practice: string[]
 72:     documentation: string[]
 73:     followUp: string[]
 74:   }
 75: }
 76: 
 77: interface SalaryNegotiationProps {
 78:   userId: string
 79: }
 80: 
 81: export function SalaryNegotiation({ userId }: SalaryNegotiationProps) {
 82:   const [formData, setFormData] = useState({
 83:     jobTitle: '',
 84:     company: '',
 85:     location: '',
 86:     experience: '',
 87:     currentSalary: ''
 88:   })
 89:   const [analysis, setAnalysis] = useState<SalaryAnalysis | null>(null)
 90:   const [plan, setPlan] = useState<null | {
 91:     targetRange: { base: string; totalComp: string }
 92:     justifications: string[]
 93:     tradeoffs: string[]
 94:     negotiationEmail: { subject: string; body: string }
 95:     talkingPoints: string[]
 96:   }>(null)
 97:   const [loading, setLoading] = useState(false)
 98:   const [activeTab, setActiveTab] = useState('market')
 99: 
100:   const handleInputChange = (field: string, value: string) => {
101:     setFormData(prev => ({ ...prev, [field]: value }))
102:   }
103: 
104:   const generateAnalysis = async () => {
105:     if (!formData.jobTitle || !formData.location) {
106:       toast.error('Please fill in job title and location')
107:       return
108:     }
109: 
110:     setLoading(true)
111:     try {
112:       const response = await fetch('/api/salary/analysis', {
113:         method: 'POST',
114:         headers: {
115:           'Content-Type': 'application/json',
116:         },
117:         body: JSON.stringify({
118:           jobTitle: formData.jobTitle,
119:           company: formData.company || undefined,
120:           location: formData.location,
121:           experience: formData.experience || 'mid',
122:           currentSalary: parseInt(formData.currentSalary) || 0,
123:         }),
124:       })
125: 
126:       if (!response.ok) {
127:         const errorData = await response.json()
128:         throw new Error(errorData.error || 'Analysis failed')
129:       }
130: 
131:       const data = await response.json()
132:       setAnalysis(data.analysis)
133:       toast.success('Salary analysis completed!')
134:     } catch (error) {
135:       console.error('Analysis error:', error)
136:       toast.error(error instanceof Error ? error.message : 'Analysis failed')
137:     } finally {
138:       setLoading(false)
139:     }
140:   }
141: 
142:   const generateNegotiationPlan = async () => {
143:     if (!formData.jobTitle || !formData.location) {
144:       toast.error('Please fill in job title and location')
145:       return
146:     }
147:     setLoading(true)
148:     try {
149:       const payload = {
150:         jobTitle: formData.jobTitle,
151:         companyName: formData.company || 'Unknown',
152:         location: formData.location,
153:         seniority: (formData.experience as any) === 'senior' ? 'senior' : (formData.experience as any) === 'entry' ? 'entry' : 'mid',
154:         offer: { base: formData.currentSalary ? `$${formData.currentSalary}` : 'TBD' },
155:         marketData: undefined,
156:         candidateHighlights: 'Key achievements and impact from resume',
157:         constraints: undefined,
158:         tone: 'professional' as const,
159:       }
160:       const res = await fetch('/api/salary/coach', {
161:         method: 'POST',
162:         headers: { 'Content-Type': 'application/json' },
163:         body: JSON.stringify(payload),
164:       })
165:       if (!res.ok) {
166:         const err = await res.json()
167:         throw new Error(err.error || 'Failed to generate plan')
168:       }
169:       const data = await res.json()
170:       setPlan(data.plan)
171:       toast.success('Negotiation plan generated!')
172:     } catch (e) {
173:       console.error(e)
174:       toast.error(e instanceof Error ? e.message : 'Failed to generate plan')
175:     } finally {
176:       setLoading(false)
177:     }
178:   }
179: 
180:   const formatCurrency = (amount: number) => {
181:     return new Intl.NumberFormat('en-US', {
182:       style: 'currency',
183:       currency: 'USD',
184:       minimumFractionDigits: 0,
185:       maximumFractionDigits: 0,
186:     }).format(amount)
187:   }
188: 
189:   return (
190:     <div className="space-y-8">
191:       {/* Input Form */}
192:       <Card>
193:         <CardHeader>
194:           <CardTitle className="flex items-center gap-2">
195:             <Calculator className="h-5 w-5" />
196:             Salary Analysis
197:           </CardTitle>
198:           <CardDescription>
199:             Get market data and negotiation strategies for your target role
200:           </CardDescription>
201:         </CardHeader>
202:         <CardContent className="space-y-4">
203:           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
204:             <div className="space-y-2">
205:               <Label htmlFor="jobTitle">Job Title *</Label>
206:               <Input
207:                 id="jobTitle"
208:                 placeholder="e.g., Software Engineer"
209:                 value={formData.jobTitle}
210:                 onChange={(e) => handleInputChange('jobTitle', e.target.value)}
211:               />
212:             </div>
213: 
214:             <div className="space-y-2">
215:               <Label htmlFor="company">Company (Optional)</Label>
216:               <Input
217:                 id="company"
218:                 placeholder="e.g., Google"
219:                 value={formData.company}
220:                 onChange={(e) => handleInputChange('company', e.target.value)}
221:               />
222:             </div>
223: 
224:             <div className="space-y-2">
225:               <Label htmlFor="location">Location *</Label>
226:               <Input
227:                 id="location"
228:                 placeholder="e.g., San Francisco"
229:                 value={formData.location}
230:                 onChange={(e) => handleInputChange('location', e.target.value)}
231:               />
232:             </div>
233: 
234:             <div className="space-y-2">
235:               <Label htmlFor="experience">Experience Level</Label>
236:               <Select value={formData.experience} onValueChange={(value) => handleInputChange('experience', value)}>
237:                 <SelectTrigger>
238:                   <SelectValue placeholder="Select experience level" />
239:                 </SelectTrigger>
240:                 <SelectContent>
241:                   <SelectItem value="entry">Entry Level (0-2 years)</SelectItem>
242:                   <SelectItem value="junior">Junior (2-3 years)</SelectItem>
243:                   <SelectItem value="mid">Mid Level (3-5 years)</SelectItem>
244:                   <SelectItem value="senior">Senior (5-8 years)</SelectItem>
245:                   <SelectItem value="lead">Lead/Principal (8+ years)</SelectItem>
246:                   <SelectItem value="manager">Manager (5+ years)</SelectItem>
247:                 </SelectContent>
248:               </Select>
249:             </div>
250: 
251:             <div className="space-y-2">
252:               <Label htmlFor="currentSalary">Current Salary (Optional)</Label>
253:               <Input
254:                 id="currentSalary"
255:                 type="number"
256:                 placeholder="80000"
257:                 value={formData.currentSalary}
258:                 onChange={(e) => handleInputChange('currentSalary', e.target.value)}
259:               />
260:             </div>
261:           </div>
262: 
263:           <Button
264:             onClick={generateAnalysis}
265:             disabled={loading || !formData.jobTitle || !formData.location}
266:             className="w-full md:w-auto"
267:           >
268:             {loading ? (
269:               <>
270:                 <Loader2 className="mr-2 h-4 w-4 animate-spin" />
271:                 Analyzing Salary Data...
272:               </>
273:             ) : (
274:               <>
275:                 <TrendingUp className="mr-2 h-4 w-4" />
276:                 Generate Salary Analysis
277:               </>
278:             )}
279:           </Button>
280:           <Button
281:             onClick={generateNegotiationPlan}
282:             disabled={loading || !formData.jobTitle || !formData.location}
283:             variant="secondary"
284:             className="w-full md:w-auto ml-0 md:ml-3"
285:           >
286:             {loading ? (
287:               <>
288:                 <Loader2 className="mr-2 h-4 w-4 animate-spin" />
289:                 Generating Plan...
290:               </>
291:             ) : (
292:               <>
293:                 <Target className="mr-2 h-4 w-4" />
294:                 Generate Negotiation Plan
295:               </>
296:             )}
297:           </Button>
298:         </CardContent>
299:       </Card>
300: 
301:       {/* Analysis Results */}
302:       {analysis && (
303:         <div className="space-y-6">
304:           <Alert>
305:             <CheckCircle className="h-4 w-4" />
306:             <AlertDescription>
307:               Salary analysis completed for {analysis.marketData.role} in {analysis.marketData.location}
308:             </AlertDescription>
309:           </Alert>
310: 
311:           <Tabs value={activeTab} onValueChange={setActiveTab}>
312:             <TabsList className="grid w-full grid-cols-5">
313:               <TabsTrigger value="market">Market Data</TabsTrigger>
314:               <TabsTrigger value="strategy">Strategy</TabsTrigger>
315:               <TabsTrigger value="leverage">Leverage</TabsTrigger>
316:               <TabsTrigger value="talking">Talking Points</TabsTrigger>
317:               <TabsTrigger value="preparation">Preparation</TabsTrigger>
318:             </TabsList>
319: 
320:             <TabsContent value="market" className="space-y-6">
321:               {/* Salary Range Visualization */}
322:               <Card>
323:                 <CardHeader>
324:                   <CardTitle>Salary Range Overview</CardTitle>
325:                   <CardDescription>
326:                     Market data for {analysis.marketData.role} in {analysis.marketData.location}
327:                   </CardDescription>
328:                 </CardHeader>
329:                 <CardContent>
330:                   <div className="space-y-6">
331:                     {/* Salary Range Bar */}
332:                     <div className="space-y-2">
333:                       <div className="flex justify-between text-sm text-muted-foreground">
334:                         <span>Salary Range</span>
335:                         <span>{formatCurrency(analysis.marketData.salaryRange.min)} - {formatCurrency(analysis.marketData.salaryRange.max)}</span>
336:                       </div>
337:                       <div className="relative h-4 bg-gray-200 rounded-full">
338:                         <div
339:                           className="absolute top-0 left-0 h-full bg-gradient-to-r from-green-500 via-yellow-500 to-red-500 rounded-full"
340:                           style={{ width: '100%' }}
341:                         />
342:                         {/* Median marker */}
343:                         <div
344:                           className="absolute top-0 w-1 h-full bg-black"
345:                           style={{
346:                             left: `${((analysis.marketData.salaryRange.median - analysis.marketData.salaryRange.min) / (analysis.marketData.salaryRange.max - analysis.marketData.salaryRange.min)) * 100}%`
347:                           }}
348:                         />
349:                       </div>
350:                       <div className="flex justify-between text-xs text-muted-foreground">
351:                         <span>Min</span>
352:                         <span className="font-medium">Median: {formatCurrency(analysis.marketData.salaryRange.median)}</span>
353:                         <span>Max</span>
354:                       </div>
355:                     </div>
356: 
357:                     {/* Percentiles */}
358:                     <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
359:                       <div className="text-center p-3 bg-background rounded-lg">
360:                         <div className="text-lg font-bold text-green-600">{formatCurrency(analysis.marketData.percentiles.p25)}</div>
361:                         <div className="text-sm text-muted-foreground">25th Percentile</div>
362:                       </div>
363:                       <div className="text-center p-3 bg-blue-50 rounded-lg">
364:                         <div className="text-lg font-bold text-blue-600">{formatCurrency(analysis.marketData.percentiles.p50)}</div>
365:                         <div className="text-sm text-muted-foreground">50th Percentile (Median)</div>
366:                       </div>
367:                       <div className="text-center p-3 bg-yellow-50 rounded-lg">
368:                         <div className="text-lg font-bold text-yellow-600">{formatCurrency(analysis.marketData.percentiles.p75)}</div>
369:                         <div className="text-sm text-muted-foreground">75th Percentile</div>
370:                       </div>
371:                       <div className="text-center p-3 bg-purple-50 rounded-lg">
372:                         <div className="text-lg font-bold text-purple-600">{formatCurrency(analysis.marketData.percentiles.p90)}</div>
373:                         <div className="text-sm text-muted-foreground">90th Percentile</div>
374:                       </div>
375:                     </div>
376:                   </div>
377:                 </CardContent>
378:               </Card>
379: 
380:               {/* Market Insights */}
381:               <Card>
382:                 <CardHeader>
383:                   <CardTitle>Market Context</CardTitle>
384:                   <CardDescription>Understanding your position in the market</CardDescription>
385:                 </CardHeader>
386:                 <CardContent>
387:                   <div className="space-y-4">
388:                     <div className="flex items-center justify-between p-4 bg-blue-50 rounded-lg">
389:                       <div>
390:                         <h4 className="font-medium text-blue-900">Your Experience Level</h4>
391:                         <p className="text-sm text-blue-700">{analysis.marketData.experience} level professional</p>
392:                       </div>
393:                       <Badge className="bg-blue-100 text-blue-800">
394:                         {analysis.marketData.experience}
395:                       </Badge>
396:                     </div>
397: 
398:                     <div className="flex items-center justify-between p-4 bg-green-50 rounded-lg">
399:                       <div>
400:                         <h4 className="font-medium text-green-900">Market Position</h4>
401:                         <p className="text-sm text-green-700">Your skills place you in the competitive range</p>
402:                       </div>
403:                       <TrendingUp className="h-6 w-6 text-green-600" />
404:                     </div>
405:                   </div>
406:                 </CardContent>
407:               </Card>
408:             </TabsContent>
409: 
410:             <TabsContent value="strategy" className="space-y-6">
411:               {/* Negotiation Strategy */}
412:               <Card>
413:                 <CardHeader>
414:                   <CardTitle className="flex items-center gap-2">
415:                     <Target className="h-5 w-5" />
416:                     Negotiation Strategy
417:                   </CardTitle>
418:                   <CardDescription>Your personalized salary negotiation plan</CardDescription>
419:                 </CardHeader>
420:                 <CardContent>
421:                   <div className="space-y-6">
422:                     {/* Salary Targets */}
423:                     <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
424:                       <div className="text-center p-4 border-2 border-green-200 bg-green-50 rounded-lg">
425:                         <div className="text-sm text-green-700 mb-1">Target Salary</div>
426:                         <div className="text-2xl font-bold text-green-800">{formatCurrency(analysis.negotiationStrategy.targetSalary)}</div>
427:                         <div className="text-xs text-green-600 mt-1">Your goal</div>
428:                       </div>
429: 
430:                       <div className="text-center p-4 border-2 border-blue-200 bg-blue-50 rounded-lg">
431:                         <div className="text-sm text-blue-700 mb-1">Opening Offer</div>
432:                         <div className="text-2xl font-bold text-blue-800">{formatCurrency(analysis.negotiationStrategy.openingOffer)}</div>
433:                         <div className="text-xs text-blue-600 mt-1">What to ask for</div>
434:                       </div>
435: 
436:                       <div className="text-center p-4 border-2 border-purple-200 bg-purple-50 rounded-lg">
437:                         <div className="text-sm text-purple-700 mb-1">Counter Offer</div>
438:                         <div className="text-2xl font-bold text-purple-800">{formatCurrency(analysis.negotiationStrategy.counterOffer)}</div>
439:                         <div className="text-xs text-purple-600 mt-1">If they counter</div>
440:                       </div>
441:                     </div>
442: 
443:                     {/* Strategy Reasoning */}
444:                     <div>
445:                       <h4 className="font-medium text-foreground mb-3">Strategy Rationale</h4>
446:                       <ul className="space-y-2">
447:                         {analysis.negotiationStrategy.reasoning.map((reason, index) => (
448:                           <li key={index} className="flex items-start gap-2">
449:                             <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
450:                             <span className="text-sm text-foreground">{reason}</span>
451:                           </li>
452:                         ))}
453:                       </ul>
454:                     </div>
455:                   </div>
456:                 </CardContent>
457:               </Card>
458:             </TabsContent>
459: 
460:             <TabsContent value="leverage" className="space-y-6">
461:               {/* Leverage Points */}
462:               <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
463:                 <Card>
464:                   <CardHeader>
465:                     <CardTitle>Experience Leverage</CardTitle>
466:                     <CardDescription>Your professional background</CardDescription>
467:                   </CardHeader>
468:                   <CardContent>
469:                     <ul className="space-y-2">
470:                       {analysis.leveragePoints.experience.map((point, index) => (
471:                         <li key={index} className="flex items-start gap-2">
472:                           <Award className="h-4 w-4 text-blue-500 mt-1 flex-shrink-0" />
473:                           <span className="text-sm">{point}</span>
474:                         </li>
475:                       ))}
476:                     </ul>
477:                   </CardContent>
478:                 </Card>
479: 
480:                 <Card>
481:                   <CardHeader>
482:                     <CardTitle>Skills Leverage</CardTitle>
483:                     <CardDescription>Your technical competencies</CardDescription>
484:                   </CardHeader>
485:                   <CardContent>
486:                     <ul className="space-y-2">
487:                       {analysis.leveragePoints.skills.map((point, index) => (
488:                         <li key={index} className="flex items-start gap-2">
489:                           <Lightbulb className="h-4 w-4 text-yellow-500 mt-1 flex-shrink-0" />
490:                           <span className="text-sm">{point}</span>
491:                         </li>
492:                       ))}
493:                     </ul>
494:                   </CardContent>
495:                 </Card>
496: 
497:                 <Card>
498:                   <CardHeader>
499:                     <CardTitle>Market Demand</CardTitle>
500:                     <CardDescription>External market factors</CardDescription>
501:                   </CardHeader>
502:                   <CardContent>
503:                     <ul className="space-y-2">
504:                       {analysis.leveragePoints.marketDemand.map((point, index) => (
505:                         <li key={index} className="flex items-start gap-2">
506:                           <TrendingUp className="h-4 w-4 text-green-500 mt-1 flex-shrink-0" />
507:                           <span className="text-sm">{point}</span>
508:                         </li>
509:                       ))}
510:                     </ul>
511:                   </CardContent>
512:                 </Card>
513: 
514:                 <Card>
515:                   <CardHeader>
516:                     <CardTitle>Company Factors</CardTitle>
517:                     <CardDescription>Organization-specific advantages</CardDescription>
518:                   </CardHeader>
519:                   <CardContent>
520:                     <ul className="space-y-2">
521:                       {analysis.leveragePoints.companyFactors.map((point, index) => (
522:                         <li key={index} className="flex items-start gap-2">
523:                           <CheckCircle className="h-4 w-4 text-purple-500 mt-1 flex-shrink-0" />
524:                           <span className="text-sm">{point}</span>
525:                         </li>
526:                       ))}
527:                     </ul>
528:                   </CardContent>
529:                 </Card>
530:               </div>
531:             </TabsContent>
532: 
533:             <TabsContent value="talking" className="space-y-6">
534:               {/* Talking Points */}
535:               <Card>
536:                 <CardHeader>
537:                   <CardTitle className="flex items-center gap-2">
538:                     <MessageSquare className="h-5 w-5" />
539:                     Key Talking Points
540:                   </CardTitle>
541:                   <CardDescription>Scripted responses for salary discussions</CardDescription>
542:                 </CardHeader>
543:                 <CardContent className="space-y-6">
544:                   {/* Value Proposition */}
545:                   <div className="p-4 bg-blue-50 rounded-lg">
546:                     <h4 className="font-medium text-blue-900 mb-2">Your Value Proposition</h4>
547:                     <p className="text-sm text-blue-800 leading-relaxed">{analysis.talkingPoints.valueProposition}</p>
548:                   </div>
549: 
550:                   {/* Market Comparison */}
551:                   <div className="p-4 bg-green-50 rounded-lg">
552:                     <h4 className="font-medium text-green-900 mb-2">Market Comparison</h4>
553:                     <p className="text-sm text-green-800 leading-relaxed">{analysis.talkingPoints.marketComparison}</p>
554:                   </div>
555: 
556:                   {/* Growth Potential */}
557:                   <div className="p-4 bg-purple-50 rounded-lg">
558:                     <h4 className="font-medium text-purple-900 mb-2">Growth Potential</h4>
559:                     <p className="text-sm text-purple-800 leading-relaxed">{analysis.talkingPoints.growthPotential}</p>
560:                   </div>
561: 
562:                   {/* Strengths */}
563:                   <div>
564:                     <h4 className="font-medium text-foreground mb-3">Your Key Strengths</h4>
565:                     <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
566:                       {analysis.talkingPoints.strengths.map((strength, index) => (
567:                         <div key={index} className="flex items-start gap-2 p-3 bg-background rounded">
568:                           <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
569:                           <span className="text-sm">{strength}</span>
570:                         </div>
571:                       ))}
572:                     </div>
573:                   </div>
574:                 </CardContent>
575:               </Card>
576:             </TabsContent>
577: 
578:             <TabsContent value="preparation" className="space-y-6">
579:               {/* Red Flags */}
580:               <Card>
581:                 <CardHeader>
582:                   <CardTitle className="flex items-center gap-2 text-red-700">
583:                     <AlertTriangle className="h-5 w-5" />
584:                     Red Flags & Walk-Away Points
585:                   </CardTitle>
586:                   <CardDescription>When to reconsider the offer</CardDescription>
587:                 </CardHeader>
588:                 <CardContent>
589:                   <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
590:                     <div>
591:                       <h4 className="font-medium text-foreground mb-2">Warning Signs</h4>
592:                       <ul className="space-y-1">
593:                         {analysis.redFlags.warningSigns.map((sign, index) => (
594:                           <li key={index} className="text-sm text-muted-foreground flex items-start gap-1">
595:                             <span className="text-red-500">•</span>
596:                             {sign}
597:                           </li>
598:                         ))}
599:                       </ul>
600:                     </div>
601: 
602:                     <div>
603:                       <h4 className="font-medium text-foreground mb-2">Alternatives</h4>
604:                       <ul className="space-y-1">
605:                         {analysis.redFlags.alternatives.map((alt, index) => (
606:                           <li key={index} className="text-sm text-muted-foreground flex items-start gap-1">
607:                             <span className="text-blue-500">•</span>
608:                             {alt}
609:                           </li>
610:                         ))}
611:                       </ul>
612:                     </div>
613: 
614:                     <div>
615:                       <h4 className="font-medium text-foreground mb-2">Walk-Away Points</h4>
616:                       <ul className="space-y-1">
617:                         {analysis.redFlags.walkAwayPoints.map((point, index) => (
618:                           <li key={index} className="text-sm text-muted-foreground flex items-start gap-1">
619:                             <span className="text-orange-500">•</span>
620:                             {point}
621:                           </li>
622:                         ))}
623:                       </ul>
624:                     </div>
625:                   </div>
626:                 </CardContent>
627:               </Card>
628: 
629:               {/* Preparation Steps */}
630:               <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
631:                 <Card>
632:                   <CardHeader>
633:                     <CardTitle>Research Phase</CardTitle>
634:                     <CardDescription>Gather information before negotiating</CardDescription>
635:                   </CardHeader>
636:                   <CardContent>
637:                     <ol className="space-y-2">
638:                       {analysis.preparationSteps.research.map((step, index) => (
639:                         <li key={index} className="flex items-start gap-2 text-sm">
640:                           <span className="bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium flex-shrink-0 mt-0.5">
641:                             {index + 1}
642:                           </span>
643:                           {step}
644:                         </li>
645:                       ))}
646:                     </ol>
647:                   </CardContent>
648:                 </Card>
649: 
650:                 <Card>
651:                   <CardHeader>
652:                     <CardTitle>Practice Phase</CardTitle>
653:                     <CardDescription>Prepare your negotiation skills</CardDescription>
654:                   </CardHeader>
655:                   <CardContent>
656:                     <ol className="space-y-2">
657:                       {analysis.preparationSteps.practice.map((step, index) => (
658:                         <li key={index} className="flex items-start gap-2 text-sm">
659:                           <span className="bg-green-100 text-green-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium flex-shrink-0 mt-0.5">
660:                             {index + 1}
661:                           </span>
662:                           {step}
663:                         </li>
664:                       ))}
665:                     </ol>
666:                   </CardContent>
667:                 </Card>
668: 
669:                 <Card>
670:                   <CardHeader>
671:                     <CardTitle>Documentation</CardTitle>
672:                     <CardDescription>Keep records of your negotiation</CardDescription>
673:                   </CardHeader>
674:                   <CardContent>
675:                     <ul className="space-y-2">
676:                       {analysis.preparationSteps.documentation.map((step, index) => (
677:                         <li key={index} className="flex items-start gap-2 text-sm">
678:                           <FileText className="h-4 w-4 text-purple-500 flex-shrink-0 mt-0.5" />
679:                           {step}
680:                         </li>
681:                       ))}
682:                     </ul>
683:                   </CardContent>
684:                 </Card>
685: 
686:                 <Card>
687:                   <CardHeader>
688:                     <CardTitle>Follow-Up</CardTitle>
689:                     <CardDescription>After the negotiation is complete</CardDescription>
690:                   </CardHeader>
691:                   <CardContent>
692:                     <ul className="space-y-2">
693:                       {analysis.preparationSteps.followUp.map((step, index) => (
694:                         <li key={index} className="flex items-start gap-2 text-sm">
695:                           <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0 mt-0.5" />
696:                           {step}
697:                         </li>
698:                       ))}
699:                     </ul>
700:                   </CardContent>
701:                 </Card>
702:               </div>
703:             </TabsContent>
704:           </Tabs>
705:         </div>
706:       )}
707: 
708:       {/* Negotiation Plan */}
709:       {plan && (
710:         <div className="space-y-6">
711:           <Card>
712:             <CardHeader>
713:               <CardTitle className="flex items-center gap-2">
714:                 <Target className="h-5 w-5" />
715:                 Negotiation Plan
716:               </CardTitle>
717:               <CardDescription>Targets, rationale, tradeoffs, and email draft</CardDescription>
718:             </CardHeader>
719:             <CardContent className="space-y-6">
720:               <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
721:                 <div className="p-4 bg-green-50 rounded">
722:                   <div className="text-sm text-green-800">Target Base</div>
723:                   <div className="text-xl font-semibold text-green-900">{plan.targetRange.base}</div>
724:                 </div>
725:                 <div className="p-4 bg-blue-50 rounded">
726:                   <div className="text-sm text-blue-800">Target Total Comp</div>
727:                   <div className="text-xl font-semibold text-blue-900">{plan.targetRange.totalComp}</div>
728:                 </div>
729:                 <div className="p-4 bg-purple-50 rounded">
730:                   <div className="text-sm text-purple-800">Tradeoffs</div>
731:                   <div className="text-sm text-purple-900">{plan.tradeoffs[0]}</div>
732:                 </div>
733:               </div>
734: 
735:               <div>
736:                 <h4 className="font-medium mb-2">Justifications</h4>
737:                 <ul className="space-y-1">
738:                   {plan.justifications.map((j, i) => (
739:                     <li key={i} className="text-sm text-foreground flex gap-2">
740:                       <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
741:                       {j}
742:                     </li>
743:                   ))}
744:                 </ul>
745:               </div>
746: 
747:               <div>
748:                 <h4 className="font-medium mb-2">Talking Points</h4>
749:                 <div className="flex flex-wrap gap-2">
750:                   {plan.talkingPoints.map((tp, i) => (
751:                     <Badge key={i} variant="outline">{tp}</Badge>
752:                   ))}
753:                 </div>
754:               </div>
755: 
756:               <div>
757:                 <h4 className="font-medium mb-2">Negotiation Email</h4>
758:                 <div className="p-4 bg-background rounded border">
759:                   <div className="font-semibold mb-2">Subject: {plan.negotiationEmail.subject}</div>
760:                   <pre className="whitespace-pre-wrap text-sm text-foreground">{plan.negotiationEmail.body}</pre>
761:                 </div>
762:                 <div className="mt-3 flex gap-2">
763:                   <Button
764:                     variant="secondary"
765:                     onClick={() => {
766:                       const blob = new Blob([plan.negotiationEmail.body], { type: 'text/plain;charset=utf-8' })
767:                       const url = URL.createObjectURL(blob)
768:                       const a = document.createElement('a')
769:                       a.href = url
770:                       a.download = 'negotiation-email.txt'
771:                       a.click()
772:                       URL.revokeObjectURL(url)
773:                     }}
774:                   >
775:                     <FileText className="mr-2 h-4 w-4" /> Download Email
776:                   </Button>
777:                 </div>
778:               </div>
779:             </CardContent>
780:           </Card>
781:         </div>
782:       )}
783:     </div>
784:   )
785: }
</file>

<file path="src/app/settings/alerts/page.tsx">
 1: 'use client'
 2: 
 3: import { useEffect, useState } from 'react'
 4: 
 5: export default function AlertsSettingsPage() {
 6:   const [jobTitle, setJobTitle] = useState('')
 7:   const [location, setLocation] = useState('')
 8:   const [saving, setSaving] = useState(false)
 9:   const [message, setMessage] = useState('')
10: 
11:   useEffect(() => {
12:     ;(async () => {
13:       try {
14:         const r = await fetch('/api/profile')
15:         if (r.ok) {
16:           const j = await r.json()
17:           const prefs = j?.profile?.preferences || {}
18:           setLocation(j?.profile?.location || prefs?.alerts?.location || '')
19:           setJobTitle(prefs?.alerts?.jobTitle || '')
20:         }
21:       } catch {}
22:     })()
23:   }, [])
24: 
25:   const save = async () => {
26:     setSaving(true); setMessage('')
27:     try {
28:       const r = await fetch('/api/alerts/subscribe', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobTitle, location, frequency: 'daily' }) })
29:       if (r.ok) setMessage('Saved. You will receive daily job suggestions.')
30:       else setMessage('Failed to save. Please try again.')
31:     } catch {
32:       setMessage('Failed to save. Please try again.')
33:     } finally { setSaving(false) }
34:   }
35: 
36:   return (
37:     <div className="space-y-4">
38:       <div className="text-sm text-muted-foreground">Daily job suggestions will be sent and shown in the Dashboard Action Center. A Railway cron calls /api/alerts/run.</div>
39:       <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
40:         <input className="border rounded p-2" placeholder="Target job title (e.g., Sales Manager)" value={jobTitle} onChange={(e)=>setJobTitle(e.target.value)} />
41:         <input className="border rounded p-2" placeholder="Location (e.g., Edmonton, AB)" value={location} onChange={(e)=>setLocation(e.target.value)} />
42:       </div>
43:       <button onClick={save} disabled={saving || !jobTitle} className="px-4 py-2 border rounded bg-blue-600 text-foreground disabled:opacity-50">{saving ? 'Saving…' : 'Save Preferences'}</button>
44:       {message && <div className="text-sm">{message}</div>}
45:     </div>
46:   )
47: }
</file>

<file path="src/app/settings/integrations/page.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: 
  5: interface Board {
  6:   id: string
  7:   name: string
  8:   automationLevel: 'full' | 'partial' | 'manual'
  9:   status: 'connected' | 'disconnected' | 'error'
 10:   features: { fileUpload: boolean; coverLetter: boolean; autoSubmit: boolean }
 11:   lastUsed?: string
 12:   successRate?: number
 13:   totalApplications?: number
 14: }
 15: 
 16: export default function IntegrationsSettingsPage() {
 17:   const [boards, setBoards] = useState<Board[]>([])
 18:   const [loading, setLoading] = useState(true)
 19:   const [jobsOpen, setJobsOpen] = useState<Record<string, boolean>>({})
 20:   const [jobsLoading, setJobsLoading] = useState<Record<string, boolean>>({})
 21:   const [jobsByBoard, setJobsByBoard] = useState<Record<string, Array<{ title?: string; url?: string; company?: string; location?: string }>>>({})
 22: 
 23:   useEffect(() => {
 24:     (async () => {
 25:       setLoading(true)
 26:       try {
 27:         const boardsResponse = await fetch('/api/job-boards/submit')
 28:         const boardsData = await boardsResponse.json()
 29:         const integrationsResponse = await fetch('/api/job-boards/integrations')
 30:         const integrationsData = await integrationsResponse.json()
 31:         const enhanced = (boardsData.jobBoards || []).map((b: any) => {
 32:           const integration = integrationsData.success ? integrationsData.integrations.find((i: any) => i.boardName === b.id) : null
 33:           return {
 34:             id: b.id,
 35:             name: b.name,
 36:             automationLevel: b.automationLevel,
 37:             features: b.features,
 38:             status: integration ? integration.status : 'disconnected',
 39:             lastUsed: integration?.lastApplicationAt,
 40:             successRate: integration ? Math.round((integration.successfulApplications / Math.max(integration.totalApplications, 1)) * 100) : 0,
 41:             totalApplications: integration ? integration.totalApplications : 0,
 42:           } as Board
 43:         })
 44:         setBoards(enhanced)
 45:       } catch {}
 46:       setLoading(false)
 47:     })()
 48:   }, [])
 49: 
 50:   const connectToBoard = async (boardId: string) => {
 51:     try {
 52:       const response = await fetch('/api/job-boards/oauth/authorize', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId }) })
 53:       const data = await response.json()
 54:       if (data.success && data.authUrl) window.location.href = data.authUrl
 55:     } catch {}
 56:   }
 57: 
 58:   const syncJobs = async (boardId: string) => {
 59:     try {
 60:       await fetch('/api/job-boards/jobs/sync', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId }) })
 61:     } catch {}
 62:   }
 63: 
 64:   const loadBoardJobs = async (boardId: string) => {
 65:     setJobsLoading(prev => ({ ...prev, [boardId]: true }))
 66:     try {
 67:       const resp = await fetch('/api/job-boards/jobs/list', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ boardName: boardId }) })
 68:       const json = await resp.json().catch(()=>({}))
 69:       const jobs = (json.jobs || []).map((j: any) => ({ title: j.title || j.position || j.name, url: j.url || j.link, company: j.company || j.companyName, location: j.location }))
 70:       setJobsByBoard(prev => ({ ...prev, [boardId]: jobs }))
 71:       setJobsOpen(prev => ({ ...prev, [boardId]: true }))
 72:     } catch {}
 73:     setJobsLoading(prev => ({ ...prev, [boardId]: false }))
 74:   }
 75: 
 76:   return (
 77:     <div className="space-y-4">
 78:       <h2 className="text-xl font-semibold">Job Board Integrations</h2>
 79:       <p className="text-sm text-muted-foreground">Connect and manage job board accounts. This enables syncing jobs and streamlined submissions.</p>
 80:       {loading ? (
 81:         <div className="text-sm text-muted-foreground">Loading…</div>
 82:       ) : (
 83:         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
 84:           {boards.map(board => (
 85:             <div key={board.id} className="border rounded p-4">
 86:               <div className="flex items-center justify-between mb-2">
 87:                 <div>
 88:                   <div className="font-medium">{board.name}</div>
 89:                   <div className="text-xs text-muted-foreground">{board.automationLevel} automation · {board.status}</div>
 90:                 </div>
 91:                 <a className="text-xs underline" href={`https://${board.id}.com`} target="_blank" rel="noreferrer">Open</a>
 92:               </div>
 93:               <div className="text-xs text-foreground mb-2">Success {board.successRate || 0}% · {board.totalApplications || 0} applications</div>
 94:               <div className="flex gap-2">
 95:                 {board.status !== 'connected' ? (
 96:                   <button onClick={() => connectToBoard(board.id)} className="px-3 py-2 border rounded text-sm flex-1">Connect</button>
 97:                 ) : (
 98:                   <>
 99:                     <button onClick={() => syncJobs(board.id)} className="px-3 py-2 border rounded text-sm flex-1">Sync Jobs</button>
100:                     <button onClick={() => loadBoardJobs(board.id)} className="px-3 py-2 border rounded text-sm flex-1">{jobsLoading[board.id] ? 'Loading…' : 'View Jobs'}</button>
101:                   </>
102:                 )}
103:               </div>
104:               {jobsOpen[board.id] && (jobsByBoard[board.id] || []).length > 0 && (
105:                 <div className="mt-3 border-t pt-2 space-y-1 max-h-40 overflow-y-auto">
106:                   {(jobsByBoard[board.id] || []).slice(0, 25).map((j, idx) => (
107:                     <div key={idx} className="text-xs flex items-center justify-between gap-2">
108:                       <div className="min-w-0">
109:                         <div className="font-medium truncate">{j.title || 'Untitled role'}</div>
110:                         <div className="text-muted-foreground truncate">{[j.company, j.location].filter(Boolean).join(' • ')}</div>
111:                       </div>
112:                       {j.url && <a href={j.url} target="_blank" rel="noopener noreferrer" className="px-2 py-1 border rounded">Open</a>}
113:                     </div>
114:                   ))}
115:                 </div>
116:               )}
117:             </div>
118:           ))}
119:         </div>
120:       )}
121:     </div>
122:   )
123: }
</file>

<file path="src/app/settings/job-boards/page.tsx">
 1: 'use client'
 2: 
 3: import Link from 'next/link'
 4: 
 5: export default function JobBoardsSettingsIndex() {
 6:   return (
 7:     <div className="space-y-3">
 8:       <div className="text-sm text-foreground">Manage your job board integrations and preferences.</div>
 9:       <div className="text-sm">
10:         Go to <Link className="underline" href="/settings/integrations">Integrations</Link> to connect boards.
11:       </div>
12:       <div className="text-sm">
13:         Use <Link className="underline" href="/job-boards">Job Boards</Link> to run Autopilot and review public listings.
14:       </div>
15:     </div>
16:   )
17: }
</file>

<file path="src/app/settings/layout.tsx">
 1: import { ReactNode } from 'react'
 2: import Link from 'next/link'
 3: 
 4: export default function SettingsLayout({ children }: { children: ReactNode }) {
 5:   return (
 6:     <div className="min-h-screen">
 7:       <div className="mx-auto max-w-5xl px-4 py-6 sm:px-6 lg:px-8">
 8:         <h1 className="text-2xl font-bold mb-4">Settings</h1>
 9:         <div className="flex items-center gap-4 mb-6 border-b pb-2 text-sm">
10:           <Link href="/settings/alerts" className="text-blue-600 hover:text-blue-800">Alerts</Link>
11:           <Link href="/settings/integrations" className="text-blue-600 hover:text-blue-800">Integrations</Link>
12:           <Link href="/settings/privacy" className="text-blue-600 hover:text-blue-800">Privacy</Link>
13:           <Link href="/settings/preferences" className="text-blue-600 hover:text-blue-800">Preferences</Link>
14:           <Link href="/settings/job-boards" className="text-blue-600 hover:text-blue-800">Job Boards</Link>
15:         </div>
16:         {children}
17:       </div>
18:     </div>
19:   )
20: }
</file>

<file path="src/app/settings/page.tsx">
1: export default function SettingsIndexPage() {
2:   return (
3:     <div className="text-sm text-foreground">
4:       Choose a settings section above.
5:     </div>
6:   )
7: }
</file>

<file path="src/app/settings/preferences/page.tsx">
 1: "use client"
 2: import { useEffect, useState } from 'react'
 3: 
 4: export const dynamic = 'force-dynamic'
 5: 
 6: export default function PreferencesPage() {
 7:   const [loading, setLoading] = useState(true)
 8:   const [saving, setSaving] = useState(false)
 9:   const [message, setMessage] = useState('')
10: 
11:   const [useResume, setUseResume] = useState(true)
12:   const [allowPublicScraping, setAllowPublicScraping] = useState(true)
13:   const [defaultRadiusKm, setDefaultRadiusKm] = useState(150)
14:   const [defaultDays, setDefaultDays] = useState(30)
15:   const [defaultMaxResults, setDefaultMaxResults] = useState(15)
16: 
17:   useEffect(() => {
18:     (async () => {
19:       try {
20:         const r = await fetch('/api/profile')
21:         if (r.ok) {
22:           const j = await r.json()
23:           const prefs = j?.profile?.preferences || {}
24:           setUseResume(prefs?.autopilot?.useResume !== false)
25:           setAllowPublicScraping(prefs?.autopilot?.allowPublicScraping !== false)
26:           setDefaultRadiusKm(typeof prefs?.autopilot?.radiusKm === 'number' ? prefs.autopilot.radiusKm : 150)
27:           setDefaultDays(typeof prefs?.autopilot?.days === 'number' ? prefs.autopilot.days : 30)
28:           setDefaultMaxResults(typeof prefs?.autopilot?.maxResults === 'number' ? prefs.autopilot.maxResults : 15)
29:         }
30:       } finally { setLoading(false) }
31:     })()
32:   }, [])
33: 
34:   const save = async () => {
35:     setSaving(true); setMessage('')
36:     try {
37:       const r = await fetch('/api/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({
38:         preferences: { autopilot: { useResume, allowPublicScraping, radiusKm: defaultRadiusKm, days: defaultDays, maxResults: defaultMaxResults } }
39:       }) })
40:       setMessage(r.ok ? 'Saved' : 'Failed to save')
41:     } catch { setMessage('Failed to save') }
42:     finally { setSaving(false) }
43:   }
44: 
45:   if (loading) return <div className="text-sm">Loading…</div>
46: 
47:   return (
48:     <div className="space-y-4">
49:       <div className="text-lg font-semibold">Preferences</div>
50:       <div className="space-y-3">
51:         <div className="flex items-center gap-2">
52:           <input id="useResume" type="checkbox" checked={useResume} onChange={(e)=>setUseResume(e.target.checked)} />
53:           <label htmlFor="useResume" className="text-sm">Use my resume to prefill Autopilot</label>
54:         </div>
55:         <div className="flex items-center gap-2">
56:           <input id="allowScrape" type="checkbox" checked={allowPublicScraping} onChange={(e)=>setAllowPublicScraping(e.target.checked)} />
57:           <label htmlFor="allowScrape" className="text-sm">Allow public web scraping for job discovery</label>
58:         </div>
59:         <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 text-sm">
60:           <div>
61:             <div>Default radius (km)</div>
62:             <input type="number" className="border rounded p-2 w-full" value={defaultRadiusKm} onChange={(e)=>setDefaultRadiusKm(Math.max(1, Math.min(500, Number(e.target.value)||150)))} />
63:           </div>
64:           <div>
65:             <div>Default lookback (days)</div>
66:             <input type="number" className="border rounded p-2 w-full" value={defaultDays} onChange={(e)=>setDefaultDays(Math.max(1, Math.min(90, Number(e.target.value)||30)))} />
67:           </div>
68:           <div>
69:             <div>Max results</div>
70:             <input type="number" className="border rounded p-2 w-full" value={defaultMaxResults} onChange={(e)=>setDefaultMaxResults(Math.max(5, Math.min(30, Number(e.target.value)||15)))} />
71:           </div>
72:         </div>
73:       </div>
74:       <div className="flex items-center gap-3">
75:         <button onClick={save} disabled={saving} className="px-4 py-2 border rounded bg-blue-600 text-foreground disabled:opacity-50">{saving ? 'Saving…' : 'Save'}</button>
76:         {message && <div className="text-sm">{message}</div>}
77:       </div>
78:     </div>
79:   )
80: }
</file>

<file path="src/app/settings/privacy/page.tsx">
 1: 'use client'
 2: 
 3: import { useEffect, useState } from 'react'
 4: 
 5: export default function PrivacySettingsPage() {
 6:   const [useResumeForAutopilot, setUseResumeForAutopilot] = useState(true)
 7:   const [allowPublicScraping, setAllowPublicScraping] = useState(true)
 8:   const [saving, setSaving] = useState(false)
 9:   const [message, setMessage] = useState('')
10: 
11:   useEffect(() => {
12:     (async () => {
13:       try {
14:         const r = await fetch('/api/profile')
15:         if (r.ok) {
16:           const j = await r.json()
17:           const prefs = j?.profile?.preferences || {}
18:           setUseResumeForAutopilot(prefs?.autopilot?.useResume !== false)
19:           setAllowPublicScraping(prefs?.autopilot?.allowPublicScraping !== false)
20:         }
21:       } catch {}
22:     })()
23:   }, [])
24: 
25:   const save = async () => {
26:     setSaving(true); setMessage('')
27:     try {
28:       const r = await fetch('/api/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({
29:         preferences: { autopilot: { useResume: useResumeForAutopilot, allowPublicScraping } }
30:       }) })
31:       setMessage(r.ok ? 'Saved' : 'Failed to save')
32:     } catch { setMessage('Failed to save') }
33:     setSaving(false)
34:   }
35: 
36:   return (
37:     <div className="space-y-4">
38:       <h2 className="text-xl font-semibold">Privacy Controls</h2>
39:       <div className="space-y-2">
40:         <label className="flex items-center gap-2 text-sm">
41:           <input type="checkbox" checked={useResumeForAutopilot} onChange={e=>setUseResumeForAutopilot(e.target.checked)} />
42:           Use my resume to power Autopilot (extract keywords, titles, location)
43:         </label>
44:         <label className="flex items-center gap-2 text-sm">
45:           <input type="checkbox" checked={allowPublicScraping} onChange={e=>setAllowPublicScraping(e.target.checked)} />
46:           Allow searching public job listings via search engines
47:         </label>
48:       </div>
49:       <button onClick={save} disabled={saving} className="px-3 py-2 border rounded text-sm">{saving ? 'Saving…' : 'Save'}</button>
50:       {message && <div className="text-sm">{message}</div>}
51:     </div>
52:   )
53: }
</file>

<file path="src/app/settings/profile/page.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { useSession } from 'next-auth/react'
  5: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  6: import { Input } from '@/components/ui/input'
  7: import { Label } from '@/components/ui/label'
  8: import { Button } from '@/components/ui/button'
  9: import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
 10: import { Loader2, User, Mail, Briefcase, MapPin, Phone, Calendar } from 'lucide-react'
 11: import { toast } from 'react-hot-toast'
 12: 
 13: export default function ProfileSettingsPage() {
 14:   const { data: session, status } = useSession()
 15:   const [loading, setLoading] = useState(false)
 16:   const [formData, setFormData] = useState({
 17:     name: '',
 18:     email: '',
 19:     phone: '',
 20:     location: '',
 21:     jobTitle: '',
 22:     company: '',
 23:     yearsOfExperience: '',
 24:     bio: '',
 25:   })
 26: 
 27:   useEffect(() => {
 28:     if (session?.user) {
 29:       setFormData(prev => ({
 30:         ...prev,
 31:         name: session.user.name || '',
 32:         email: session.user.email || '',
 33:       }))
 34:     }
 35:   }, [session])
 36: 
 37:   const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
 38:     setFormData(prev => ({
 39:       ...prev,
 40:       [e.target.name]: e.target.value
 41:     }))
 42:   }
 43: 
 44:   const handleSubmit = async (e: React.FormEvent) => {
 45:     e.preventDefault()
 46:     setLoading(true)
 47: 
 48:     try {
 49:       const response = await fetch('/api/profile', {
 50:         method: 'PUT',
 51:         headers: { 'Content-Type': 'application/json' },
 52:         body: JSON.stringify(formData)
 53:       })
 54: 
 55:       if (!response.ok) {
 56:         throw new Error('Failed to update profile')
 57:       }
 58: 
 59:       toast.success('Profile updated successfully!')
 60:     } catch (error: any) {
 61:       console.error('Profile update error:', error)
 62:       toast.error(error.message || 'Failed to update profile')
 63:     } finally {
 64:       setLoading(false)
 65:     }
 66:   }
 67: 
 68:   if (status === 'loading') {
 69:     return (
 70:       <div className="flex items-center justify-center min-h-screen">
 71:         <Loader2 className="w-8 h-8 animate-spin text-primary" />
 72:       </div>
 73:     )
 74:   }
 75: 
 76:   if (!session) {
 77:     return (
 78:       <div className="container mx-auto px-4 py-8">
 79:         <Card>
 80:           <CardContent className="p-6 text-center">
 81:             <p className="text-muted-foreground">Please sign in to view your profile.</p>
 82:           </CardContent>
 83:         </Card>
 84:       </div>
 85:     )
 86:   }
 87: 
 88:   return (
 89:     <div className="container mx-auto px-4 py-8 max-w-4xl">
 90:       <div className="mb-8">
 91:         <h1 className="text-4xl font-bold text-foreground mb-2">Profile Settings</h1>
 92:         <p className="text-muted-foreground">Manage your personal information and preferences</p>
 93:       </div>
 94: 
 95:       <form onSubmit={handleSubmit} className="space-y-6">
 96:         {/* Profile Picture */}
 97:         <Card>
 98:           <CardHeader>
 99:             <CardTitle>Profile Picture</CardTitle>
100:             <CardDescription>Your profile picture is synced with your authentication provider</CardDescription>
101:           </CardHeader>
102:           <CardContent>
103:             <div className="flex items-center gap-6">
104:               <Avatar className="w-24 h-24">
105:                 <AvatarImage src={session.user?.image || undefined} alt={session.user?.name || 'User'} />
106:                 <AvatarFallback className="text-2xl">
107:                   {session.user?.name?.charAt(0)?.toUpperCase() || <User className="w-8 h-8" />}
108:                 </AvatarFallback>
109:               </Avatar>
110:               <div className="space-y-1">
111:                 <p className="text-sm font-medium text-foreground">{session.user?.name || 'Anonymous User'}</p>
112:                 <p className="text-sm text-muted-foreground">{session.user?.email}</p>
113:               </div>
114:             </div>
115:           </CardContent>
116:         </Card>
117: 
118:         {/* Basic Information */}
119:         <Card>
120:           <CardHeader>
121:             <CardTitle>Basic Information</CardTitle>
122:             <CardDescription>Update your personal details</CardDescription>
123:           </CardHeader>
124:           <CardContent className="space-y-4">
125:             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
126:               <div className="space-y-2">
127:                 <Label htmlFor="name" className="flex items-center gap-2">
128:                   <User className="w-4 h-4" />
129:                   Full Name
130:                 </Label>
131:                 <Input
132:                   id="name"
133:                   name="name"
134:                   value={formData.name}
135:                   onChange={handleChange}
136:                   placeholder="John Doe"
137:                 />
138:               </div>
139: 
140:               <div className="space-y-2">
141:                 <Label htmlFor="email" className="flex items-center gap-2">
142:                   <Mail className="w-4 h-4" />
143:                   Email
144:                 </Label>
145:                 <Input
146:                   id="email"
147:                   name="email"
148:                   type="email"
149:                   value={formData.email}
150:                   onChange={handleChange}
151:                   placeholder="john@example.com"
152:                   disabled
153:                 />
154:                 <p className="text-xs text-muted-foreground">Email cannot be changed</p>
155:               </div>
156: 
157:               <div className="space-y-2">
158:                 <Label htmlFor="phone" className="flex items-center gap-2">
159:                   <Phone className="w-4 h-4" />
160:                   Phone Number
161:                 </Label>
162:                 <Input
163:                   id="phone"
164:                   name="phone"
165:                   type="tel"
166:                   value={formData.phone}
167:                   onChange={handleChange}
168:                   placeholder="+1 (555) 123-4567"
169:                 />
170:               </div>
171: 
172:               <div className="space-y-2">
173:                 <Label htmlFor="location" className="flex items-center gap-2">
174:                   <MapPin className="w-4 h-4" />
175:                   Location
176:                 </Label>
177:                 <Input
178:                   id="location"
179:                   name="location"
180:                   value={formData.location}
181:                   onChange={handleChange}
182:                   placeholder="Toronto, ON"
183:                 />
184:               </div>
185:             </div>
186:           </CardContent>
187:         </Card>
188: 
189:         {/* Professional Information */}
190:         <Card>
191:           <CardHeader>
192:             <CardTitle>Professional Information</CardTitle>
193:             <CardDescription>Your current work details</CardDescription>
194:           </CardHeader>
195:           <CardContent className="space-y-4">
196:             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
197:               <div className="space-y-2">
198:                 <Label htmlFor="jobTitle" className="flex items-center gap-2">
199:                   <Briefcase className="w-4 h-4" />
200:                   Job Title
201:                 </Label>
202:                 <Input
203:                   id="jobTitle"
204:                   name="jobTitle"
205:                   value={formData.jobTitle}
206:                   onChange={handleChange}
207:                   placeholder="Senior Software Engineer"
208:                 />
209:               </div>
210: 
211:               <div className="space-y-2">
212:                 <Label htmlFor="company" className="flex items-center gap-2">
213:                   <Briefcase className="w-4 h-4" />
214:                   Company
215:                 </Label>
216:                 <Input
217:                   id="company"
218:                   name="company"
219:                   value={formData.company}
220:                   onChange={handleChange}
221:                   placeholder="Tech Corp"
222:                 />
223:               </div>
224: 
225:               <div className="space-y-2">
226:                 <Label htmlFor="yearsOfExperience" className="flex items-center gap-2">
227:                   <Calendar className="w-4 h-4" />
228:                   Years of Experience
229:                 </Label>
230:                 <Input
231:                   id="yearsOfExperience"
232:                   name="yearsOfExperience"
233:                   type="number"
234:                   min="0"
235:                   max="50"
236:                   value={formData.yearsOfExperience}
237:                   onChange={handleChange}
238:                   placeholder="5"
239:                 />
240:               </div>
241:             </div>
242: 
243:             <div className="space-y-2">
244:               <Label htmlFor="bio">Professional Bio</Label>
245:               <textarea
246:                 id="bio"
247:                 name="bio"
248:                 value={formData.bio}
249:                 onChange={handleChange}
250:                 placeholder="Tell us about your professional background..."
251:                 className="w-full min-h-[100px] px-3 py-2 rounded-md border border-border bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 resize-y"
252:               />
253:             </div>
254:           </CardContent>
255:         </Card>
256: 
257:         {/* Save Button */}
258:         <div className="flex justify-end">
259:           <Button type="submit" disabled={loading} className="px-8">
260:             {loading ? (
261:               <>
262:                 <Loader2 className="mr-2 h-4 w-4 animate-spin" />
263:                 Saving...
264:               </>
265:             ) : (
266:               'Save Changes'
267:             )}
268:           </Button>
269:         </div>
270:       </form>
271:     </div>
272:   )
273: }
</file>

<file path="src/app/skill-analysis/components/skill-analysis.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Input } from '@/components/ui/input'
  7: import { Label } from '@/components/ui/label'
  8: import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
  9: import { Badge } from '@/components/ui/badge'
 10: import { Alert, AlertDescription } from '@/components/ui/alert'
 11: import { Progress } from '@/components/ui/progress'
 12: import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
 13: import {
 14:   Brain,
 15:   TrendingUp,
 16:   Target,
 17:   Award,
 18:   AlertTriangle,
 19:   CheckCircle,
 20:   Loader2,
 21:   BookOpen,
 22:   Clock,
 23:   DollarSign,
 24:   ArrowRight,
 25:   Lightbulb,
 26:   Zap,
 27:   Users
 28: } from 'lucide-react'
 29: import Resume from '@/models/Resume'
 30: import toast from 'react-hot-toast'
 31: 
 32: interface SkillAnalysisData {
 33:   currentSkills: {
 34:     technical: Array<{ skill: string; level: 'beginner' | 'intermediate' | 'advanced'; confidence: number }>
 35:     soft: Array<{ skill: string; level: 'beginner' | 'intermediate' | 'advanced' }>
 36:   }
 37:   requiredSkills: {
 38:     jobSpecific: Array<{ skill: string; importance: 'critical' | 'important' | 'nice-to-have' }>
 39:     industryStandard: Array<{ skill: string; demand: 'high' | 'medium' | 'low' }>
 40:   }
 41:   skillGaps: {
 42:     critical: Array<{ skill: string; gap: string; priority: 'high' | 'medium' | 'low' }>
 43:     recommended: Array<{ skill: string; reason: string; timeToLearn: string }>
 44:   }
 45:   careerPath: {
 46:     currentLevel: string
 47:     targetLevel: string
 48:     nextSteps: Array<{ step: string; timeline: string; resources: string[] }>
 49:     alternativePaths: Array<{ role: string; match: number; requiredSkills: string[] }>
 50:   }
 51:   learningPlan: {
 52:     shortTerm: Array<{ skill: string; resource: string; duration: string; cost: string }>
 53:     longTerm: Array<{ skill: string; certification: string; timeline: string }>
 54:     dailyHabits: string[]
 55:   }
 56:   marketInsights: {
 57:     salaryImpact: Array<{ skill: string; salaryBoost: string; demand: string }>
 58:     trendingSkills: Array<{ skill: string; growth: string; reason: string }>
 59:     jobMarketFit: number
 60:   }
 61: }
 62: 
 63: interface SkillAnalysisProps {
 64:   userId: string
 65: }
 66: 
 67: export function SkillAnalysis({ userId }: SkillAnalysisProps) {
 68:   const [resumes, setResumes] = useState<any[]>([])
 69:   const [selectedResume, setSelectedResume] = useState<string>('')
 70:   const [targetJob, setTargetJob] = useState('')
 71:   const [targetIndustry, setTargetIndustry] = useState('')
 72:   const [analysisData, setAnalysisData] = useState<SkillAnalysisData | null>(null)
 73:   const [loading, setLoading] = useState(false)
 74:   const [activeTab, setActiveTab] = useState('overview')
 75: 
 76:   useEffect(() => {
 77:     fetchResumes()
 78:   }, [])
 79: 
 80:   const fetchResumes = async () => {
 81:     try {
 82:       const response = await fetch('/api/resume/list')
 83:       if (response.ok) {
 84:         const data = await response.json()
 85:         setResumes(data.resumes || [])
 86:       }
 87:     } catch (error) {
 88:       console.error('Failed to fetch resumes:', error)
 89:     }
 90:   }
 91: 
 92:   const generateAnalysis = async () => {
 93:     if (!selectedResume) {
 94:       toast.error('Please select a resume')
 95:       return
 96:     }
 97: 
 98:     setLoading(true)
 99:     try {
100:       const response = await fetch('/api/skills/analysis', {
101:         method: 'POST',
102:         headers: {
103:           'Content-Type': 'application/json',
104:         },
105:         body: JSON.stringify({
106:           resumeId: selectedResume,
107:           targetJob: targetJob.trim() || undefined,
108:           targetIndustry: targetIndustry.trim() || undefined,
109:         }),
110:       })
111: 
112:       if (!response.ok) {
113:         const errorData = await response.json()
114:         throw new Error(errorData.error || 'Analysis failed')
115:       }
116: 
117:       const data = await response.json()
118:       setAnalysisData(data.analysis)
119:       toast.success('Skill analysis completed!')
120:     } catch (error) {
121:       console.error('Analysis error:', error)
122:       toast.error(error instanceof Error ? error.message : 'Analysis failed')
123:     } finally {
124:       setLoading(false)
125:     }
126:   }
127: 
128:   const getSkillLevelColor = (level: string) => {
129:     switch (level) {
130:       case 'beginner': return 'bg-green-100 text-green-800'
131:       case 'intermediate': return 'bg-blue-100 text-blue-800'
132:       case 'advanced': return 'bg-purple-100 text-purple-800'
133:       default: return 'bg-muted text-foreground'
134:     }
135:   }
136: 
137:   const getImportanceColor = (importance: string) => {
138:     switch (importance) {
139:       case 'critical': return 'text-red-600'
140:       case 'important': return 'text-orange-600'
141:       case 'nice-to-have': return 'text-green-600'
142:       default: return 'text-muted-foreground'
143:     }
144:   }
145: 
146:   const getDemandColor = (demand: string) => {
147:     switch (demand) {
148:       case 'high': return 'text-green-600'
149:       case 'medium': return 'text-yellow-600'
150:       case 'low': return 'text-red-600'
151:       default: return 'text-muted-foreground'
152:     }
153:   }
154: 
155:   return (
156:     <div className="space-y-8">
157:       {/* Analysis Input */}
158:       <Card>
159:         <CardHeader>
160:           <CardTitle className="flex items-center gap-2">
161:             <Brain className="h-5 w-5" />
162:             Skill Gap Analysis
163:           </CardTitle>
164:           <CardDescription>
165:             Analyze your skills and get personalized career development recommendations
166:           </CardDescription>
167:         </CardHeader>
168:         <CardContent className="space-y-4">
169:           <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
170:             <div className="space-y-2">
171:               <Label htmlFor="resume">Select Resume</Label>
172:               <Select value={selectedResume} onValueChange={setSelectedResume}>
173:                 <SelectTrigger>
174:                   <SelectValue placeholder="Choose your resume" />
175:                 </SelectTrigger>
176:                 <SelectContent>
177:                   {resumes.map((resume) => (
178:                     <SelectItem key={resume._id} value={resume._id}>
179:                       {resume.originalFileName}
180:                     </SelectItem>
181:                   ))}
182:                 </SelectContent>
183:               </Select>
184:             </div>
185: 
186:             <div className="space-y-2">
187:               <Label htmlFor="targetJob">Target Job (Optional)</Label>
188:               <Input
189:                 id="targetJob"
190:                 placeholder="e.g., Software Engineer"
191:                 value={targetJob}
192:                 onChange={(e) => setTargetJob(e.target.value)}
193:               />
194:             </div>
195: 
196:             <div className="space-y-2">
197:               <Label htmlFor="targetIndustry">Target Industry (Optional)</Label>
198:               <Select value={targetIndustry} onValueChange={setTargetIndustry}>
199:                 <SelectTrigger>
200:                   <SelectValue placeholder="Choose industry" />
201:                 </SelectTrigger>
202:                 <SelectContent>
203:                   <SelectItem value="technology">Technology</SelectItem>
204:                   <SelectItem value="finance">Finance</SelectItem>
205:                   <SelectItem value="healthcare">Healthcare</SelectItem>
206:                   <SelectItem value="consulting">Consulting</SelectItem>
207:                   <SelectItem value="marketing">Marketing</SelectItem>
208:                   <SelectItem value="education">Education</SelectItem>
209:                   <SelectItem value="retail">Retail</SelectItem>
210:                   <SelectItem value="manufacturing">Manufacturing</SelectItem>
211:                 </SelectContent>
212:               </Select>
213:             </div>
214:           </div>
215: 
216:           <Button
217:             onClick={generateAnalysis}
218:             disabled={loading || !selectedResume}
219:             className="w-full md:w-auto"
220:           >
221:             {loading ? (
222:               <>
223:                 <Loader2 className="mr-2 h-4 w-4 animate-spin" />
224:                 Analyzing Skills...
225:               </>
226:             ) : (
227:               <>
228:                 <Brain className="mr-2 h-4 w-4" />
229:                 Generate Analysis
230:               </>
231:             )}
232:           </Button>
233:         </CardContent>
234:       </Card>
235: 
236:       {/* Analysis Results */}
237:       {analysisData && (
238:         <div className="space-y-6">
239:           <Alert>
240:             <CheckCircle className="h-4 w-4" />
241:             <AlertDescription>
242:               Skill analysis completed! Here's your personalized career development plan.
243:             </AlertDescription>
244:           </Alert>
245: 
246:           <Tabs value={activeTab} onValueChange={setActiveTab}>
247:             <TabsList className="grid w-full grid-cols-5">
248:               <TabsTrigger value="overview">Overview</TabsTrigger>
249:               <TabsTrigger value="gaps">Skill Gaps</TabsTrigger>
250:               <TabsTrigger value="career">Career Path</TabsTrigger>
251:               <TabsTrigger value="learning">Learning Plan</TabsTrigger>
252:               <TabsTrigger value="market">Market Insights</TabsTrigger>
253:             </TabsList>
254: 
255:             <TabsContent value="overview" className="space-y-6">
256:               {/* Current Skills Overview */}
257:               <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
258:                 <Card>
259:                   <CardHeader>
260:                     <CardTitle>Technical Skills</CardTitle>
261:                     <CardDescription>Your current technical competencies</CardDescription>
262:                   </CardHeader>
263:                   <CardContent>
264:                     <div className="space-y-3">
265:                       {analysisData.currentSkills.technical.map((skill, index) => (
266:                         <div key={index} className="flex items-center justify-between">
267:                           <div className="flex items-center gap-3">
268:                             <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
269:                               <Zap className="h-5 w-5 text-blue-600" />
270:                             </div>
271:                             <div>
272:                               <p className="font-medium">{skill.skill}</p>
273:                               <p className="text-sm text-muted-foreground">Confidence: {skill.confidence}%</p>
274:                             </div>
275:                           </div>
276:                           <Badge className={getSkillLevelColor(skill.level)}>
277:                             {skill.level}
278:                           </Badge>
279:                         </div>
280:                       ))}
281:                     </div>
282:                   </CardContent>
283:                 </Card>
284: 
285:                 <Card>
286:                   <CardHeader>
287:                     <CardTitle>Soft Skills</CardTitle>
288:                     <CardDescription>Your interpersonal and professional skills</CardDescription>
289:                   </CardHeader>
290:                   <CardContent>
291:                     <div className="space-y-3">
292:                       {analysisData.currentSkills.soft.map((skill, index) => (
293:                         <div key={index} className="flex items-center justify-between">
294:                           <div className="flex items-center gap-3">
295:                             <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
296:                               <Users className="h-5 w-5 text-green-600" />
297:                             </div>
298:                             <div>
299:                               <p className="font-medium">{skill.skill}</p>
300:                             </div>
301:                           </div>
302:                           <Badge className={getSkillLevelColor(skill.level)}>
303:                             {skill.level}
304:                           </Badge>
305:                         </div>
306:                       ))}
307:                     </div>
308:                   </CardContent>
309:                 </Card>
310:               </div>
311: 
312:               {/* Required Skills */}
313:               <Card>
314:                 <CardHeader>
315:                   <CardTitle>Target Role Requirements</CardTitle>
316:                   <CardDescription>Skills needed for your target position</CardDescription>
317:                 </CardHeader>
318:                 <CardContent>
319:                   <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
320:                     <div>
321:                       <h4 className="font-medium text-foreground mb-3">Job-Specific Skills</h4>
322:                       <div className="space-y-2">
323:                         {analysisData.requiredSkills.jobSpecific.map((skill, index) => (
324:                           <div key={index} className="flex items-center justify-between">
325:                             <span className="text-sm">{skill.skill}</span>
326:                             <Badge variant="outline" className={getImportanceColor(skill.importance)}>
327:                               {skill.importance}
328:                             </Badge>
329:                           </div>
330:                         ))}
331:                       </div>
332:                     </div>
333: 
334:                     <div>
335:                       <h4 className="font-medium text-foreground mb-3">Industry Standards</h4>
336:                       <div className="space-y-2">
337:                         {analysisData.requiredSkills.industryStandard.map((skill, index) => (
338:                           <div key={index} className="flex items-center justify-between">
339:                             <span className="text-sm">{skill.skill}</span>
340:                             <Badge variant="outline" className={getDemandColor(skill.demand)}>
341:                               {skill.demand} demand
342:                             </Badge>
343:                           </div>
344:                         ))}
345:                       </div>
346:                     </div>
347:                   </div>
348:                 </CardContent>
349:               </Card>
350:             </TabsContent>
351: 
352:             <TabsContent value="gaps" className="space-y-6">
353:               {/* Critical Gaps */}
354:               <Card>
355:                 <CardHeader>
356:                   <CardTitle className="flex items-center gap-2 text-red-700">
357:                     <AlertTriangle className="h-5 w-5" />
358:                     Critical Skill Gaps
359:                   </CardTitle>
360:                   <CardDescription>High-priority skills you need to acquire</CardDescription>
361:                 </CardHeader>
362:                 <CardContent>
363:                   <div className="space-y-4">
364:                     {analysisData.skillGaps.critical.map((gap, index) => (
365:                       <div key={index} className="border border-red-200 rounded-lg p-4 bg-red-50">
366:                         <div className="flex items-start gap-3">
367:                           <AlertTriangle className="h-5 w-5 text-red-500 mt-0.5 flex-shrink-0" />
368:                           <div className="flex-1">
369:                             <h4 className="font-medium text-red-800">{gap.skill}</h4>
370:                             <p className="text-sm text-red-700 mt-1">{gap.gap}</p>
371:                             <Badge className="mt-2 bg-red-100 text-red-800">
372:                               {gap.priority} priority
373:                             </Badge>
374:                           </div>
375:                         </div>
376:                       </div>
377:                     ))}
378:                   </div>
379:                 </CardContent>
380:               </Card>
381: 
382:               {/* Recommended Skills */}
383:               <Card>
384:                 <CardHeader>
385:                   <CardTitle className="flex items-center gap-2 text-blue-700">
386:                     <Lightbulb className="h-5 w-5" />
387:                     Recommended Skills
388:                   </CardTitle>
389:                   <CardDescription>Skills that would enhance your profile</CardDescription>
390:                 </CardHeader>
391:                 <CardContent>
392:                   <div className="space-y-4">
393:                     {analysisData.skillGaps.recommended.map((skill, index) => (
394:                       <div key={index} className="border rounded-lg p-4 hover:bg-background transition-colors">
395:                         <div className="flex items-start gap-3">
396:                           <Lightbulb className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
397:                           <div className="flex-1">
398:                             <h4 className="font-medium text-foreground">{skill.skill}</h4>
399:                             <p className="text-sm text-muted-foreground mt-1">{skill.reason}</p>
400:                             <div className="flex items-center gap-2 mt-2">
401:                               <Clock className="h-4 w-4 text-muted-foreground" />
402:                               <span className="text-sm text-muted-foreground">{skill.timeToLearn}</span>
403:                             </div>
404:                           </div>
405:                         </div>
406:                       </div>
407:                     ))}
408:                   </div>
409:                 </CardContent>
410:               </Card>
411:             </TabsContent>
412: 
413:             <TabsContent value="career" className="space-y-6">
414:               {/* Career Level Assessment */}
415:               <Card>
416:                 <CardHeader>
417:                   <CardTitle>Career Level Assessment</CardTitle>
418:                   <CardDescription>Your current position and growth trajectory</CardDescription>
419:                 </CardHeader>
420:                 <CardContent>
421:                   <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
422:                     <div className="text-center">
423:                       <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
424:                         <Target className="h-8 w-8 text-blue-600" />
425:                       </div>
426:                       <h4 className="font-medium text-foreground">Current Level</h4>
427:                       <p className="text-lg text-blue-600 font-semibold">{analysisData.careerPath.currentLevel}</p>
428:                     </div>
429: 
430:                     <div className="text-center">
431:                       <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
432:                         <TrendingUp className="h-8 w-8 text-green-600" />
433:                       </div>
434:                       <h4 className="font-medium text-foreground">Target Level</h4>
435:                       <p className="text-lg text-green-600 font-semibold">{analysisData.careerPath.targetLevel}</p>
436:                     </div>
437: 
438:                     <div className="text-center">
439:                       <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3">
440:                         <Award className="h-8 w-8 text-purple-600" />
441:                       </div>
442:                       <h4 className="font-medium text-foreground">Market Fit</h4>
443:                       <p className="text-lg text-purple-600 font-semibold">{analysisData.marketInsights.jobMarketFit}%</p>
444:                     </div>
445:                   </div>
446:                 </CardContent>
447:               </Card>
448: 
449:               {/* Next Steps */}
450:               <Card>
451:                 <CardHeader>
452:                   <CardTitle>Next Steps for Growth</CardTitle>
453:                   <CardDescription>Your personalized career development roadmap</CardDescription>
454:                 </CardHeader>
455:                 <CardContent>
456:                   <div className="space-y-4">
457:                     {analysisData.careerPath.nextSteps.map((step, index) => (
458:                       <div key={index} className="flex items-start gap-4">
459:                         <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
460:                           <span className="text-sm font-bold text-blue-600">{index + 1}</span>
461:                         </div>
462:                         <div className="flex-1">
463:                           <h4 className="font-medium text-foreground">{step.step}</h4>
464:                           <div className="flex items-center gap-4 mt-2">
465:                             <div className="flex items-center gap-1">
466:                               <Clock className="h-4 w-4 text-muted-foreground" />
467:                               <span className="text-sm text-muted-foreground">{step.timeline}</span>
468:                             </div>
469:                           </div>
470:                           <div className="mt-2">
471:                             <p className="text-sm text-muted-foreground mb-2">Recommended resources:</p>
472:                             <div className="flex flex-wrap gap-2">
473:                               {step.resources.map((resource, resIndex) => (
474:                                 <Badge key={resIndex} variant="outline">
475:                                   {resource}
476:                                 </Badge>
477:                               ))}
478:                             </div>
479:                           </div>
480:                         </div>
481:                       </div>
482:                     ))}
483:                   </div>
484:                 </CardContent>
485:               </Card>
486: 
487:               {/* Alternative Career Paths */}
488:               <Card>
489:                 <CardHeader>
490:                   <CardTitle>Alternative Career Paths</CardTitle>
491:                   <CardDescription>Explore different career directions</CardDescription>
492:                 </CardHeader>
493:                 <CardContent>
494:                   <div className="space-y-4">
495:                     {analysisData.careerPath.alternativePaths.map((path, index) => (
496:                       <div key={index} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
497:                         <div className="flex items-center justify-between mb-3">
498:                           <h4 className="font-medium text-foreground">{path.role}</h4>
499:                           <Badge className={path.match >= 80 ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}>
500:                             {path.match}% match
501:                           </Badge>
502:                         </div>
503:                         <div>
504:                           <p className="text-sm text-muted-foreground mb-2">Key skills needed:</p>
505:                           <div className="flex flex-wrap gap-2">
506:                             {path.requiredSkills.map((skill, skillIndex) => (
507:                               <Badge key={skillIndex} variant="outline">
508:                                 {skill}
509:                               </Badge>
510:                             ))}
511:                           </div>
512:                         </div>
513:                       </div>
514:                     ))}
515:                   </div>
516:                 </CardContent>
517:               </Card>
518:             </TabsContent>
519: 
520:             <TabsContent value="learning" className="space-y-6">
521:               {/* Short-term Learning Plan */}
522:               <Card>
523:                 <CardHeader>
524:                   <CardTitle>Short-term Learning Plan (3-6 months)</CardTitle>
525:                   <CardDescription>Immediate skills to acquire</CardDescription>
526:                 </CardHeader>
527:                 <CardContent>
528:                   <div className="space-y-4">
529:                     {analysisData.learningPlan.shortTerm.map((item, index) => (
530:                       <div key={index} className="border rounded-lg p-4">
531:                         <div className="flex items-start gap-3">
532:                           <BookOpen className="h-5 w-5 text-blue-500 mt-1 flex-shrink-0" />
533:                           <div className="flex-1">
534:                             <h4 className="font-medium text-foreground">{item.skill}</h4>
535:                             <p className="text-sm text-muted-foreground mt-1">{item.resource}</p>
536:                             <div className="flex items-center gap-4 mt-2">
537:                               <div className="flex items-center gap-1">
538:                                 <Clock className="h-4 w-4 text-muted-foreground" />
539:                                 <span className="text-sm text-muted-foreground">{item.duration}</span>
540:                               </div>
541:                               <div className="flex items-center gap-1">
542:                                 <DollarSign className="h-4 w-4 text-muted-foreground" />
543:                                 <span className="text-sm text-muted-foreground">{item.cost}</span>
544:                               </div>
545:                             </div>
546:                           </div>
547:                         </div>
548:                       </div>
549:                     ))}
550:                   </div>
551:                 </CardContent>
552:               </Card>
553: 
554:               {/* Long-term Certifications */}
555:               <Card>
556:                 <CardHeader>
557:                   <CardTitle>Long-term Certifications</CardTitle>
558:                   <CardDescription>Advanced credentials for career advancement</CardDescription>
559:                 </CardHeader>
560:                 <CardContent>
561:                   <div className="space-y-4">
562:                     {analysisData.learningPlan.longTerm.map((cert, index) => (
563:                       <div key={index} className="border rounded-lg p-4">
564:                         <div className="flex items-start gap-3">
565:                           <Award className="h-5 w-5 text-purple-500 mt-1 flex-shrink-0" />
566:                           <div className="flex-1">
567:                             <h4 className="font-medium text-foreground">{cert.skill}</h4>
568:                             <p className="text-sm text-muted-foreground mt-1">{cert.certification}</p>
569:                             <div className="flex items-center gap-1 mt-2">
570:                               <Clock className="h-4 w-4 text-muted-foreground" />
571:                               <span className="text-sm text-muted-foreground">{cert.timeline}</span>
572:                             </div>
573:                           </div>
574:                         </div>
575:                       </div>
576:                     ))}
577:                   </div>
578:                 </CardContent>
579:               </Card>
580: 
581:               {/* Daily Habits */}
582:               <Card>
583:                 <CardHeader>
584:                   <CardTitle>Daily Learning Habits</CardTitle>
585:                   <CardDescription>Build consistent skill development routines</CardDescription>
586:                 </CardHeader>
587:                 <CardContent>
588:                   <div className="space-y-3">
589:                     {analysisData.learningPlan.dailyHabits.map((habit, index) => (
590:                       <div key={index} className="flex items-start gap-3">
591:                         <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
592:                           <CheckCircle className="h-4 w-4 text-green-600" />
593:                         </div>
594:                         <span className="text-sm text-foreground">{habit}</span>
595:                       </div>
596:                     ))}
597:                   </div>
598:                 </CardContent>
599:               </Card>
600:             </TabsContent>
601: 
602:             <TabsContent value="market" className="space-y-6">
603:               {/* Salary Impact */}
604:               <Card>
605:                 <CardHeader>
606:                   <CardTitle className="flex items-center gap-2">
607:                     <DollarSign className="h-5 w-5" />
608:                     Skill Salary Impact
609:                   </CardTitle>
610:                   <CardDescription>How different skills affect earning potential</CardDescription>
611:                 </CardHeader>
612:                 <CardContent>
613:                   <div className="space-y-4">
614:                     {analysisData.marketInsights.salaryImpact.map((skill, index) => (
615:                       <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
616:                         <div>
617:                           <h4 className="font-medium text-foreground">{skill.skill}</h4>
618:                           <p className="text-sm text-muted-foreground">{skill.demand} demand</p>
619:                         </div>
620:                         <div className="text-right">
621:                           <p className="text-lg font-semibold text-green-600">{skill.salaryBoost}</p>
622:                           <p className="text-sm text-muted-foreground">salary boost</p>
623:                         </div>
624:                       </div>
625:                     ))}
626:                   </div>
627:                 </CardContent>
628:               </Card>
629: 
630:               {/* Trending Skills */}
631:               <Card>
632:                 <CardHeader>
633:                   <CardTitle>Trending Skills</CardTitle>
634:                   <CardDescription>Emerging skills with high growth potential</CardDescription>
635:                 </CardHeader>
636:                 <CardContent>
637:                   <div className="space-y-4">
638:                     {analysisData.marketInsights.trendingSkills.map((skill, index) => (
639:                       <div key={index} className="border rounded-lg p-4">
640:                         <div className="flex items-start gap-3">
641:                           <TrendingUp className="h-5 w-5 text-blue-500 mt-1 flex-shrink-0" />
642:                           <div className="flex-1">
643:                             <h4 className="font-medium text-foreground">{skill.skill}</h4>
644:                             <p className="text-sm text-muted-foreground mt-1">{skill.reason}</p>
645:                             <Badge className="mt-2 bg-green-100 text-green-800">
646:                               {skill.growth} growth
647:                             </Badge>
648:                           </div>
649:                         </div>
650:                       </div>
651:                     ))}
652:                   </div>
653:                 </CardContent>
654:               </Card>
655:             </TabsContent>
656:           </Tabs>
657:         </div>
658:       )}
659:     </div>
660:   )
661: }
</file>

<file path="src/components/analytics-tracker.tsx">
 1: 'use client'
 2: 
 3: import { useEffect, Suspense } from 'react'
 4: import { usePathname, useSearchParams } from 'next/navigation'
 5: import { useSession } from 'next-auth/react'
 6: import { analytics } from '@/lib/analytics'
 7: 
 8: /**
 9:  * Analytics Tracker Component
10:  * Automatically tracks page views and user sessions
11:  */
12: function AnalyticsTrackerInner() {
13:   const pathname = usePathname()
14:   const searchParams = useSearchParams()
15:   const { data: session } = useSession()
16: 
17:   // Set user ID when session changes
18:   useEffect(() => {
19:     if (session?.user?.id) {
20:       analytics?.setUserId(session.user.id)
21:     } else {
22:       analytics?.setUserId(null)
23:     }
24:   }, [session])
25: 
26:   // Track page views on route change
27:   useEffect(() => {
28:     if (pathname) {
29:       const url = searchParams ? `${pathname}?${searchParams.toString()}` : pathname
30:       analytics?.pageView({
31:         path: pathname,
32:         title: document.title,
33:         referrer: document.referrer,
34:       })
35: 
36:       // Track specific page types
37:       if (pathname.includes('/dashboard')) {
38:         analytics?.track('dashboard_view')
39:       } else if (pathname.includes('/create-application')) {
40:         analytics?.track('create_application_view')
41:       } else if (pathname.includes('/resume-builder')) {
42:         analytics?.track('resume_builder_view')
43:       } else if (pathname.includes('/cover-letter')) {
44:         analytics?.track('cover_letter_view')
45:       } else if (pathname.includes('/job-boards')) {
46:         analytics?.track('job_boards_view')
47:       } else if (pathname.includes('/career-finder')) {
48:         analytics?.track('career_finder_view')
49:       }
50:     }
51:   }, [pathname, searchParams])
52: 
53:   // Track session duration on unmount
54:   useEffect(() => {
55:     const sessionStart = Date.now()
56: 
57:     return () => {
58:       const duration = Date.now() - sessionStart
59:       analytics?.track('session_duration', { duration })
60:     }
61:   }, [])
62: 
63:   return null // This component doesn't render anything
64: }
65: 
66: // Wrap in Suspense to fix Next.js build error
67: export function AnalyticsTracker() {
68:   return (
69:     <Suspense fallback={null}>
70:       <AnalyticsTrackerInner />
71:     </Suspense>
72:   )
73: }
</file>

<file path="src/components/app-shell.tsx">
 1: 'use client'
 2: 
 3: import { usePathname } from 'next/navigation'
 4: import { UnifiedNavigation } from './unified-navigation'
 5: import { Breadcrumbs } from './breadcrumbs'
 6: 
 7: export function AppShell({ children }: { children: React.ReactNode }) {
 8:   const pathname = usePathname() || ''
 9:   const isAuthPage = pathname.startsWith('/auth')
10:   const isLandingPage = pathname === '/'
11: 
12:   // Landing page: No navigation, no wrapper (hero section handles everything)
13:   if (isLandingPage) {
14:     return <>{children}</>
15:   }
16: 
17:   // Auth pages: Minimal wrapper, no navigation
18:   if (isAuthPage) {
19:     return <main id="main-content" role="main">{children}</main>
20:   }
21: 
22:   // App pages: Single navigation with breadcrumbs
23:   return (
24:     <div className="min-h-screen bg-background">
25:       {/* UNIFIED NAVIGATION (includes sidebar) */}
26:       <UnifiedNavigation />
27:       
28:       {/* MAIN CONTENT WITH BREADCRUMBS - Add top padding for fixed header */}
29:       <main 
30:         id="main-content" 
31:         role="main" 
32:         className="pt-20 px-4 sm:px-6 lg:px-8 py-6 transition-all duration-300"
33:         style={{ 
34:           marginLeft: '0', // Sidebar handles its own positioning
35:         }}
36:       >
37:         <div className="container mx-auto">
38:           <Breadcrumbs />
39:           {children}
40:         </div>
41:       </main>
42:     </div>
43:   )
44: }
</file>

<file path="src/components/autopilot-progress-tracker.tsx">
  1: "use client"
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { Card } from '@/components/ui/card'
  5: import { CheckCircle, Loader2, Clock } from 'lucide-react'
  6: 
  7: interface ProgressTask {
  8:   id: string
  9:   label: string
 10:   status: 'pending' | 'loading' | 'complete'
 11:   time: string
 12: }
 13: 
 14: export function AutopilotProgressTracker() {
 15:   const [tasks, setTasks] = useState<ProgressTask[]>([
 16:     { id: 'resume', label: 'Analyzing resume', status: 'complete', time: '2s' },
 17:     { id: 'search', label: 'Searching 25+ job boards', status: 'pending', time: '~8s' },
 18:     { id: 'research', label: 'Researching companies', status: 'pending', time: '~10s' },
 19:     { id: 'optimize', label: 'Pre-generating materials', status: 'pending', time: '~15s' }
 20:   ])
 21:   
 22:   const [isVisible, setIsVisible] = useState(false)
 23:   
 24:   useEffect(() => {
 25:     // Listen for progress updates from localStorage
 26:     const interval = setInterval(() => {
 27:       try {
 28:         const progress = JSON.parse(localStorage.getItem('cf:autopilotProgress') || '{}')
 29:         
 30:         // Check if any task is active
 31:         const hasActiveTask = Object.values(progress).some(status => status === 'loading')
 32:         const allComplete = Object.keys(progress).length === 4 && 
 33:                            Object.values(progress).every(status => status === 'complete')
 34:         
 35:         if (allComplete) {
 36:           // Hide after 3 seconds if all complete
 37:           setTimeout(() => {
 38:             setIsVisible(false)
 39:             localStorage.removeItem('cf:autopilotProgress')
 40:           }, 3000)
 41:         } else if (hasActiveTask || Object.keys(progress).length > 0) {
 42:           setIsVisible(true)
 43:         }
 44:         
 45:         // Update task statuses
 46:         setTasks(prev => prev.map(task => ({
 47:           ...task,
 48:           status: (progress[task.id] as 'pending' | 'loading' | 'complete') || task.status
 49:         })))
 50:       } catch (error) {
 51:         console.error('[AUTOPILOT_TRACKER] Error:', error)
 52:       }
 53:     }, 500)
 54:     
 55:     return () => clearInterval(interval)
 56:   }, [])
 57:   
 58:   if (!isVisible) return null
 59:   
 60:   const allComplete = tasks.every(task => task.status === 'complete')
 61:   
 62:   return (
 63:     <Card className="fixed bottom-4 right-4 p-4 shadow-2xl z-50 w-80 bg-card border-border backdrop-blur-sm">
 64:       <div className="flex items-center gap-2 mb-3">
 65:         {allComplete ? (
 66:           <>
 67:             <CheckCircle className="w-5 h-5 text-green-500" />
 68:             <h4 className="font-semibold text-foreground">✅ Autopilot Complete!</h4>
 69:           </>
 70:         ) : (
 71:           <>
 72:             <div className="relative">
 73:               <Loader2 className="w-5 h-5 animate-spin text-primary" />
 74:               <div className="absolute inset-0 bg-primary/20 rounded-full animate-ping" />
 75:             </div>
 76:             <h4 className="font-semibold text-foreground">🤖 AI Autopilot Working...</h4>
 77:           </>
 78:         )}
 79:       </div>
 80:       
 81:       <div className="space-y-2">
 82:         {tasks.map(task => {
 83:           const StatusIcon = task.status === 'complete' ? CheckCircle :
 84:                            task.status === 'loading' ? Loader2 : Clock
 85:           
 86:           const iconColor = task.status === 'complete' ? 'text-green-500' :
 87:                           task.status === 'loading' ? 'text-primary' : 'text-muted-foreground'
 88:           
 89:           const textColor = task.status === 'complete' ? 'text-muted-foreground' : 'text-foreground'
 90:           
 91:           return (
 92:             <div key={task.id} className="flex items-center gap-2 text-sm">
 93:               <StatusIcon className={`w-4 h-4 ${iconColor} ${task.status === 'loading' ? 'animate-spin' : ''} flex-shrink-0`} />
 94:               <span className={textColor}>{task.label}</span>
 95:               <span className="text-xs text-muted-foreground ml-auto">{task.time}</span>
 96:             </div>
 97:           )
 98:         })}
 99:       </div>
100:       
101:       {allComplete && (
102:         <div className="mt-3 pt-3 border-t border-border">
103:           <p className="text-xs text-muted-foreground text-center">
104:             Your personalized job matches are ready! 🎉
105:           </p>
106:         </div>
107:       )}
108:     </Card>
109:   )
110: }
</file>

<file path="src/components/breadcrumbs.tsx">
 1: 'use client'
 2: 
 3: import { usePathname } from 'next/navigation'
 4: import Link from 'next/link'
 5: import { ChevronRight, Home } from 'lucide-react'
 6: 
 7: export function Breadcrumbs() {
 8:   const pathname = usePathname()
 9:   
10:   if (!pathname || pathname === '/' || pathname === '/dashboard') return null
11:   
12:   const segments = pathname.split('/').filter(Boolean)
13:   
14:   const breadcrumbs = segments.map((segment, index) => {
15:     const href = '/' + segments.slice(0, index + 1).join('/')
16:     const label = segment
17:       .split('-')
18:       .map(word => word.charAt(0).toUpperCase() + word.slice(1))
19:       .join(' ')
20:     
21:     return { href, label }
22:   })
23:   
24:   return (
25:     <nav className="flex items-center space-x-2 text-sm text-muted-foreground mb-4 overflow-x-auto">
26:       <Link 
27:         href="/dashboard" 
28:         className="flex items-center hover:text-foreground transition-colors"
29:       >
30:         <Home className="w-4 h-4" />
31:       </Link>
32:       
33:       {breadcrumbs.map((crumb, index) => (
34:         <div key={crumb.href} className="flex items-center space-x-2">
35:           <ChevronRight className="w-4 h-4 shrink-0" />
36:           {index === breadcrumbs.length - 1 ? (
37:             <span className="text-foreground font-medium whitespace-nowrap">{crumb.label}</span>
38:           ) : (
39:             <Link 
40:               href={crumb.href}
41:               className="hover:text-foreground transition-colors whitespace-nowrap"
42:             >
43:               {crumb.label}
44:             </Link>
45:           )}
46:         </div>
47:       ))}
48:     </nav>
49:   )
50: }
</file>

<file path="src/components/career-finder-back-button.tsx">
 1: /**
 2:  * Career Finder Back Button
 3:  * Consistent navigation for all Career Finder pages
 4:  */
 5: 
 6: 'use client'
 7: 
 8: import { ArrowLeft } from 'lucide-react'
 9: import { useRouter } from 'next/navigation'
10: import { cn } from '@/lib/utils'
11: 
12: interface CareerFinderBackButtonProps {
13:   label?: string
14:   className?: string
15:   onClick?: () => void
16: }
17: 
18: export function CareerFinderBackButton({ 
19:   label = 'Back', 
20:   className,
21:   onClick 
22: }: CareerFinderBackButtonProps) {
23:   const router = useRouter()
24:   
25:   const handleClick = () => {
26:     if (onClick) {
27:       onClick()
28:     } else {
29:       router.back()
30:     }
31:   }
32:   
33:   return (
34:     <button
35:       onClick={handleClick}
36:       className={cn(
37:         "flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors mb-6 group",
38:         className
39:       )}
40:     >
41:       <ArrowLeft className="w-5 h-5 group-hover:-translate-x-1 transition-transform" />
42:       <span className="font-medium">{label}</span>
43:     </button>
44:   )
45: }
</file>

<file path="src/components/career-finder/progress.tsx">
  1: 'use client'
  2: 
  3: import { usePathname } from 'next/navigation'
  4: 
  5: const steps = [
  6:   { key: 'resume', label: 'Resume', icon: '📝' },
  7:   { key: 'search', label: 'Search', icon: '🔍' },
  8:   { key: 'job', label: 'Analysis', icon: '📊' },
  9:   { key: 'company', label: 'Insights', icon: '🏢' },
 10:   { key: 'optimizer', label: 'Optimize', icon: '✨' },
 11:   { key: 'cover-letter', label: 'Letter', icon: '✉️' },
 12:   { key: 'outreach', label: 'Outreach', icon: '🚀' },
 13: ]
 14: 
 15: export function CareerFinderProgress() {
 16:   const pathname = usePathname()
 17:   // Derive index from path or persisted localStorage
 18:   let idx = Math.max(0, steps.findIndex(s => pathname?.includes(`/career-finder/${s.key}`)))
 19:   try {
 20:     const persisted = JSON.parse(localStorage.getItem('cf:progress') || 'null')
 21:     if (persisted && typeof persisted.step === 'number') {
 22:       idx = Math.max(idx, Math.min(steps.length - 1, (persisted.step - 1)))
 23:     }
 24:   } catch {}
 25:   const percent = Math.round(((idx + 1) / steps.length) * 100)
 26: 
 27:   return (
 28:     <div className="w-full mb-8 px-4">
 29:       {/* Progress Steps */}
 30:       <div className="flex items-center justify-between mb-6 overflow-x-auto pb-2">
 31:         {steps.map((step, i) => (
 32:           <div key={step.key} className="flex flex-col items-center min-w-[80px] relative">
 33:             {/* Step Circle */}
 34:             <div className="relative">
 35:               {/* Moving Loader (only on current step) */}
 36:               {i === idx && (
 37:                 <div 
 38:                   className="absolute inset-0 w-12 h-12 rounded-full border-4 border-transparent border-t-[#5424FD] border-r-[#8B5CF6]"
 39:                   style={{
 40:                     animation: 'spin 1.5s linear infinite',
 41:                   }}
 42:                 />
 43:               )}
 44:               
 45:               {/* Step Icon */}
 46:               <div 
 47:                 className={`
 48:                   w-12 h-12 rounded-full flex items-center justify-center text-xl
 49:                   transition-all duration-300 shadow-lg relative z-10
 50:                   ${i <= idx 
 51:                     ? 'bg-gradient-to-br from-[#5424FD] to-[#8B5CF6] text-white scale-110' 
 52:                     : 'bg-muted text-muted-foreground scale-100'
 53:                   }
 54:                 `}
 55:               >
 56:                 {step.icon}
 57:               </div>
 58:             </div>
 59:             
 60:             {/* Step Label */}
 61:             <span 
 62:               className={`
 63:                 mt-2 text-xs font-medium text-center
 64:                 ${i <= idx ? 'text-foreground font-semibold' : 'text-muted-foreground'}
 65:               `}
 66:             >
 67:               {step.label}
 68:             </span>
 69:             
 70:             {/* Connector Line */}
 71:             {i < steps.length - 1 && (
 72:               <div 
 73:                 className={`
 74:                   absolute top-6 left-[calc(50%+24px)] w-[calc(100%-48px)]
 75:                   h-1 rounded-full transition-all duration-500
 76:                   ${i < idx 
 77:                     ? 'bg-gradient-to-r from-[#5424FD] to-[#8B5CF6]' 
 78:                     : 'bg-muted'
 79:                   }
 80:                 `}
 81:                 style={{ zIndex: -1 }}
 82:               />
 83:             )}
 84:           </div>
 85:         ))}
 86:       </div>
 87: 
 88:       {/* Modern Progress Bar */}
 89:       <div className="relative">
 90:         {/* Progress Text */}
 91:         <div className="flex items-center justify-between mb-3">
 92:           <span className="text-sm font-semibold text-foreground">
 93:             Step {idx + 1} of {steps.length}
 94:           </span>
 95:           <span className="text-sm font-bold text-primary">
 96:             {percent}%
 97:           </span>
 98:         </div>
 99:         
100:         {/* Progress Bar Track */}
101:         <div className="relative w-full h-3 bg-muted/50 rounded-full overflow-hidden shadow-inner">
102:           {/* Animated Progress Fill */}
103:           <div 
104:             className="absolute top-0 left-0 h-full rounded-full transition-all duration-700 ease-out"
105:             style={{ 
106:               width: `${percent}%`,
107:               background: 'linear-gradient(90deg, #5424FD 0%, #8B5CF6 50%, #A78BFA 100%)',
108:               boxShadow: '0 0 12px rgba(84, 36, 253, 0.5)'
109:             }}
110:           >
111:             {/* Shine Effect */}
112:             <div 
113:               className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent"
114:               style={{
115:                 animation: 'shine 2s infinite',
116:               }}
117:             />
118:           </div>
119:         </div>
120:       </div>
121: 
122:       <style jsx>{`
123:         @keyframes shine {
124:           0% { transform: translateX(-100%); }
125:           100% { transform: translateX(200%); }
126:         }
127:         @keyframes spin {
128:           0% { transform: rotate(0deg); }
129:           100% { transform: rotate(360deg); }
130:         }
131:       `}</style>
132:     </div>
133:   )
134: }
</file>

<file path="src/components/client-init.tsx">
 1: 'use client'
 2: 
 3: import { useEffect } from 'react'
 4: import { ThemeManager } from '@/lib/theme-manager'
 5: import { DeviceManager } from '@/lib/device-manager'
 6: 
 7: export function ClientInit() {
 8:   useEffect(() => {
 9:     try { ThemeManager.init() } catch {}
10:     try { DeviceManager.init() } catch {}
11:     return () => {
12:       try { DeviceManager.dispose() } catch {}
13:     }
14:   }, [])
15:   return null
16: }
</file>

<file path="src/components/command-palette.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { useRouter } from 'next/navigation'
  5: import { Search, FileText, Briefcase, Home, Settings, Users, BarChart3, Target } from 'lucide-react'
  6: 
  7: interface Command {
  8:   id: string
  9:   label: string
 10:   icon: any
 11:   href: string
 12:   keywords: string[]
 13: }
 14: 
 15: const commands: Command[] = [
 16:   { id: 'dashboard', label: 'Dashboard', icon: Home, href: '/dashboard', keywords: ['home', 'main'] },
 17:   { id: 'search', label: 'Job Search', icon: Search, href: '/career-finder/search', keywords: ['jobs', 'find', 'search'] },
 18:   { id: 'analysis', label: 'Job Analysis', icon: Target, href: '/career-finder/job-analysis', keywords: ['analyze', 'match'] },
 19:   { id: 'company', label: 'Company Research', icon: Briefcase, href: '/career-finder/company', keywords: ['research', 'employer'] },
 20:   { id: 'optimizer', label: 'Resume Optimizer', icon: FileText, href: '/career-finder/optimizer', keywords: ['resume', 'optimize', 'tailor'] },
 21:   { id: 'cover', label: 'Cover Letter', icon: FileText, href: '/career-finder/cover-letter', keywords: ['letter', 'cover'] },
 22:   { id: 'outreach', label: 'Outreach', icon: Users, href: '/career-finder/outreach', keywords: ['send', 'email', 'apply'] },
 23:   { id: 'resume', label: 'Resume Builder', icon: FileText, href: '/resume-builder', keywords: ['create', 'build'] },
 24:   { id: 'applications', label: 'Applications', icon: Briefcase, href: '/applications', keywords: ['track', 'apps'] },
 25:   { id: 'analytics', label: 'Analytics', icon: BarChart3, href: '/analytics', keywords: ['stats', 'metrics'] },
 26:   { id: 'network', label: 'Network', icon: Users, href: '/network', keywords: ['contacts', 'connections'] },
 27:   { id: 'settings', label: 'Settings', icon: Settings, href: '/settings', keywords: ['preferences', 'config'] },
 28: ]
 29: 
 30: export function CommandPalette() {
 31:   const [open, setOpen] = useState(false)
 32:   const [query, setQuery] = useState('')
 33:   const router = useRouter()
 34: 
 35:   const filteredCommands = commands.filter(cmd =>
 36:     cmd.label.toLowerCase().includes(query.toLowerCase()) ||
 37:     cmd.keywords.some(kw => kw.includes(query.toLowerCase()))
 38:   )
 39: 
 40:   useEffect(() => {
 41:     const handleKeyDown = (e: KeyboardEvent) => {
 42:       if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
 43:         e.preventDefault()
 44:         setOpen(true)
 45:       }
 46:       if (e.key === 'Escape') {
 47:         setOpen(false)
 48:       }
 49:     }
 50:     window.addEventListener('keydown', handleKeyDown)
 51:     return () => window.removeEventListener('keydown', handleKeyDown)
 52:   }, [])
 53: 
 54:   const handleSelect = (href: string) => {
 55:     router.push(href)
 56:     setOpen(false)
 57:     setQuery('')
 58:   }
 59: 
 60:   if (!open) return null
 61: 
 62:   return (
 63:     <div className="fixed inset-0 z-[9999] bg-black/50 backdrop-blur-sm flex items-start justify-center pt-[20vh]">
 64:       <div className="w-full max-w-2xl mx-4 bg-card border border-border rounded-2xl shadow-2xl overflow-hidden">
 65:         <div className="flex items-center border-b border-border px-4">
 66:           <Search className="w-5 h-5 text-muted-foreground" />
 67:           <input
 68:             type="text"
 69:             placeholder="Search commands... (Ctrl+K)"
 70:             value={query}
 71:             onChange={(e) => setQuery(e.target.value)}
 72:             className="flex-1 px-4 py-4 bg-transparent outline-none text-foreground placeholder:text-muted-foreground"
 73:             autoFocus
 74:           />
 75:         </div>
 76:         
 77:         <div className="max-h-96 overflow-y-auto p-2">
 78:           {filteredCommands.length === 0 ? (
 79:             <div className="px-4 py-8 text-center text-muted-foreground">
 80:               No commands found
 81:             </div>
 82:           ) : (
 83:             filteredCommands.map((cmd) => {
 84:               const Icon = cmd.icon
 85:               return (
 86:                 <button
 87:                   key={cmd.id}
 88:                   onClick={() => handleSelect(cmd.href)}
 89:                   className="w-full flex items-center space-x-3 px-4 py-3 rounded-xl hover:bg-accent/50 transition-all text-left"
 90:                 >
 91:                   <Icon className="w-5 h-5 text-muted-foreground" />
 92:                   <span className="text-foreground font-medium">{cmd.label}</span>
 93:                 </button>
 94:               )
 95:             })
 96:           )}
 97:         </div>
 98:       </div>
 99:     </div>
100:   )
101: }
</file>

<file path="src/components/debug-panel.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { X, ChevronDown, ChevronUp, AlertTriangle, CheckCircle } from 'lucide-react'
  5: 
  6: interface DebugLog {
  7:   timestamp: number
  8:   method: string
  9:   status: 'success' | 'error'
 10:   message: string
 11:   data?: any
 12:   rawResponse?: string
 13:   cleanupSteps?: string[]
 14:   error?: string
 15: }
 16: 
 17: /**
 18:  * Debug Panel Component
 19:  * Displays Perplexity responses and JSON parsing steps for debugging
 20:  * Activated via ?debug=true query parameter
 21:  */
 22: export function DebugPanel() {
 23:   const [isVisible, setIsVisible] = useState(false)
 24:   const [isExpanded, setIsExpanded] = useState(true)
 25:   const [logs, setLogs] = useState<DebugLog[]>([])
 26:   const [filter, setFilter] = useState<'all' | 'errors'>('all')
 27: 
 28:   useEffect(() => {
 29:     // Check if debug mode is enabled via URL
 30:     const params = new URLSearchParams(window.location.search)
 31:     const debugMode = params.get('debug') === 'true'
 32:     setIsVisible(debugMode)
 33: 
 34:     // Listen for debug events from the app
 35:     const handleDebugEvent = (event: CustomEvent) => {
 36:       const log: DebugLog = {
 37:         timestamp: Date.now(),
 38:         ...event.detail
 39:       }
 40:       setLogs(prev => [log, ...prev].slice(0, 50)) // Keep last 50 logs
 41:     }
 42: 
 43:     window.addEventListener('debug-log' as any, handleDebugEvent)
 44:     return () => {
 45:       window.removeEventListener('debug-log' as any, handleDebugEvent)
 46:     }
 47:   }, [])
 48: 
 49:   // Helper function to call from anywhere in your app
 50:   if (typeof window !== 'undefined') {
 51:     (window as any).debugLog = (detail: Omit<DebugLog, 'timestamp'>) => {
 52:       window.dispatchEvent(new CustomEvent('debug-log', { detail }))
 53:     }
 54:   }
 55: 
 56:   if (!isVisible) return null
 57: 
 58:   const filteredLogs = filter === 'all' 
 59:     ? logs 
 60:     : logs.filter(log => log.status === 'error')
 61: 
 62:   return (
 63:     <div className="fixed bottom-4 right-4 z-[9999] w-[600px] max-w-[90vw]">
 64:       <div className="bg-gray-900 text-green-400 rounded-lg shadow-2xl border border-gray-700 overflow-hidden">
 65:         {/* Header */}
 66:         <div className="flex items-center justify-between bg-gray-800 px-4 py-2 border-b border-gray-700">
 67:           <div className="flex items-center gap-2">
 68:             <span className="text-sm font-mono font-bold">🔍 DEBUG PANEL</span>
 69:             <span className="text-xs text-gray-400">({filteredLogs.length} logs)</span>
 70:           </div>
 71:           <div className="flex items-center gap-2">
 72:             <button
 73:               onClick={() => setFilter(filter === 'all' ? 'errors' : 'all')}
 74:               className="text-xs px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded"
 75:             >
 76:               {filter === 'all' ? 'Show Errors' : 'Show All'}
 77:             </button>
 78:             <button
 79:               onClick={() => setLogs([])}
 80:               className="text-xs px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded"
 81:             >
 82:               Clear
 83:             </button>
 84:             <button
 85:               onClick={() => setIsExpanded(!isExpanded)}
 86:               className="text-gray-400 hover:text-white"
 87:             >
 88:               {isExpanded ? <ChevronDown size={18} /> : <ChevronUp size={18} />}
 89:             </button>
 90:             <button
 91:               onClick={() => setIsVisible(false)}
 92:               className="text-gray-400 hover:text-white"
 93:             >
 94:               <X size={18} />
 95:             </button>
 96:           </div>
 97:         </div>
 98: 
 99:         {/* Log Content */}
100:         {isExpanded && (
101:           <div className="max-h-[500px] overflow-y-auto p-4 space-y-3 text-xs font-mono">
102:             {filteredLogs.length === 0 ? (
103:               <div className="text-center text-gray-500 py-8">
104:                 No debug logs yet. Logs will appear here as you use the app.
105:               </div>
106:             ) : (
107:               filteredLogs.map((log, index) => (
108:                 <LogEntry key={`${log.timestamp}-${index}`} log={log} />
109:               ))
110:             )}
111:           </div>
112:         )}
113: 
114:         {/* Footer */}
115:         <div className="bg-gray-800 px-4 py-2 border-t border-gray-700 text-xs text-gray-400">
116:           Debug mode active. Remove <code className="text-green-400">?debug=true</code> from URL to hide.
117:         </div>
118:       </div>
119:     </div>
120:   )
121: }
122: 
123: function LogEntry({ log }: { log: DebugLog }) {
124:   const [isExpanded, setIsExpanded] = useState(false)
125:   const timestamp = new Date(log.timestamp).toLocaleTimeString()
126: 
127:   return (
128:     <div className={`border rounded p-3 ${
129:       log.status === 'error' 
130:         ? 'border-red-500/50 bg-red-500/5' 
131:         : 'border-green-500/50 bg-green-500/5'
132:     }`}>
133:       {/* Log Header */}
134:       <div className="flex items-start justify-between mb-2">
135:         <div className="flex items-center gap-2">
136:           {log.status === 'error' ? (
137:             <AlertTriangle size={14} className="text-red-400" />
138:           ) : (
139:             <CheckCircle size={14} className="text-green-400" />
140:           )}
141:           <span className={log.status === 'error' ? 'text-red-400' : 'text-green-400'}>
142:             [{timestamp}] {log.method}
143:           </span>
144:         </div>
145:         <button
146:           onClick={() => setIsExpanded(!isExpanded)}
147:           className="text-gray-400 hover:text-white text-xs"
148:         >
149:           {isExpanded ? 'Collapse' : 'Expand'}
150:         </button>
151:       </div>
152: 
153:       {/* Log Message */}
154:       <div className="text-gray-300 mb-2">{log.message}</div>
155: 
156:       {/* Expanded Details */}
157:       {isExpanded && (
158:         <div className="space-y-2 mt-3 pt-3 border-t border-gray-700">
159:           {/* Cleanup Steps */}
160:           {log.cleanupSteps && log.cleanupSteps.length > 0 && (
161:             <div>
162:               <div className="text-blue-400 mb-1">Cleanup Steps:</div>
163:               <div className="pl-4 text-gray-400">
164:                 {log.cleanupSteps.map((step, i) => (
165:                   <div key={i}>→ {step}</div>
166:                 ))}
167:               </div>
168:             </div>
169:           )}
170: 
171:           {/* Raw Response */}
172:           {log.rawResponse && (
173:             <div>
174:               <div className="text-yellow-400 mb-1">Raw Response (first 500 chars):</div>
175:               <pre className="bg-gray-800 p-2 rounded overflow-x-auto text-xs text-gray-300">
176:                 {log.rawResponse.slice(0, 500)}
177:                 {log.rawResponse.length > 500 && '...'}
178:               </pre>
179:             </div>
180:           )}
181: 
182:           {/* Error Details */}
183:           {log.error && (
184:             <div>
185:               <div className="text-red-400 mb-1">Error:</div>
186:               <pre className="bg-red-900/20 p-2 rounded overflow-x-auto text-xs text-red-300">
187:                 {log.error}
188:               </pre>
189:             </div>
190:           )}
191: 
192:           {/* Additional Data */}
193:           {log.data && (
194:             <div>
195:               <div className="text-purple-400 mb-1">Data:</div>
196:               <pre className="bg-gray-800 p-2 rounded overflow-x-auto text-xs text-gray-300">
197:                 {JSON.stringify(log.data, null, 2)}
198:               </pre>
199:             </div>
200:           )}
201:         </div>
202:       )}
203:     </div>
204:   )
205: }
206: 
207: /**
208:  * Helper function to add debug logs from anywhere in your app
209:  * Usage: debugLog({ method: 'jobSearch', status: 'success', message: 'Found 10 jobs' })
210:  */
211: export function debugLog(detail: Omit<DebugLog, 'timestamp'>) {
212:   if (typeof window !== 'undefined') {
213:     window.dispatchEvent(new CustomEvent('debug-log', { detail }))
214:   }
215: }
</file>

<file path="src/components/error-boundaries/dashboard-error-boundary.tsx">
 1: 'use client'
 2: 
 3: import React from 'react'
 4: import { ErrorBoundary } from '../error-boundary'
 5: import { Button } from '../ui/button'
 6: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
 7: import { AlertTriangle, RefreshCcw, Home } from 'lucide-react'
 8: import { useRouter } from 'next/navigation'
 9: 
10: interface DashboardErrorFallbackProps {
11:   error: Error
12:   retry: () => void
13:   errorId: string
14: }
15: 
16: function DashboardErrorFallback({ error, retry, errorId }: DashboardErrorFallbackProps) {
17:   const router = useRouter()
18: 
19:   return (
20:     <div className="min-h-screen bg-background flex items-center justify-center p-4">
21:       <Card className="max-w-lg w-full">
22:         <CardHeader>
23:           <div className="flex items-center gap-3 mb-2">
24:             <div className="h-12 w-12 rounded-full bg-destructive/10 flex items-center justify-center">
25:               <AlertTriangle className="h-6 w-6 text-destructive" />
26:             </div>
27:             <div>
28:               <CardTitle className="text-2xl">Dashboard Error</CardTitle>
29:               <CardDescription className="text-sm text-muted-foreground">
30:                 Error ID: {errorId}
31:               </CardDescription>
32:             </div>
33:           </div>
34:         </CardHeader>
35:         <CardContent className="space-y-4">
36:           <div className="bg-muted p-4 rounded-lg">
37:             <p className="text-sm font-medium mb-2">What happened?</p>
38:             <p className="text-sm text-muted-foreground">{error.message}</p>
39:           </div>
40: 
41:           <div className="bg-muted/50 p-4 rounded-lg border border-border">
42:             <p className="text-sm font-medium mb-2">💡 Suggestions:</p>
43:             <ul className="text-sm text-muted-foreground space-y-1 list-disc list-inside">
44:               <li>Try refreshing the page</li>
45:               <li>Clear your browser cache</li>
46:               <li>Check your internet connection</li>
47:               <li>Contact support if the issue persists</li>
48:             </ul>
49:           </div>
50: 
51:           <div className="flex gap-3">
52:             <Button onClick={retry} className="flex-1">
53:               <RefreshCcw className="mr-2 h-4 w-4" />
54:               Retry
55:             </Button>
56:             <Button onClick={() => router.push('/')} variant="outline" className="flex-1">
57:               <Home className="mr-2 h-4 w-4" />
58:               Go Home
59:             </Button>
60:           </div>
61:         </CardContent>
62:       </Card>
63:     </div>
64:   )
65: }
66: 
67: export function DashboardErrorBoundary({ children }: { children: React.ReactNode }) {
68:   return (
69:     <ErrorBoundary
70:       fallback={DashboardErrorFallback}
71:       isolate={false} // Allow errors to propagate if needed
72:     >
73:       {children}
74:     </ErrorBoundary>
75:   )
76: }
</file>

<file path="src/components/error-boundaries/index.ts">
1: /**
2:  * Error Boundary Components
3:  * Specialized error boundaries for different sections of the app
4:  */
5: 
6: export { DashboardErrorBoundary } from './dashboard-error-boundary'
7: export { ResumeErrorBoundary } from './resume-error-boundary'
8: export { JobSearchErrorBoundary } from './job-search-error-boundary'
</file>

<file path="src/components/error-boundaries/job-search-error-boundary.tsx">
 1: 'use client'
 2: 
 3: import React from 'react'
 4: import { ErrorBoundary } from '../error-boundary'
 5: import { Button } from '../ui/button'
 6: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
 7: import { SearchX, RefreshCcw, ArrowLeft } from 'lucide-react'
 8: import { useRouter } from 'next/navigation'
 9: 
10: interface JobSearchErrorFallbackProps {
11:   error: Error
12:   retry: () => void
13:   errorId: string
14: }
15: 
16: function JobSearchErrorFallback({ error, retry, errorId }: JobSearchErrorFallbackProps) {
17:   const router = useRouter()
18: 
19:   return (
20:     <div className="flex items-center justify-center min-h-[500px] p-4">
21:       <Card className="max-w-lg w-full">
22:         <CardHeader>
23:           <div className="flex items-center gap-3 mb-2">
24:             <div className="h-12 w-12 rounded-full bg-warning/10 flex items-center justify-center">
25:               <SearchX className="h-6 w-6 text-warning" />
26:             </div>
27:             <div>
28:               <CardTitle>Job Search Error</CardTitle>
29:               <CardDescription className="text-xs">Error ID: {errorId}</CardDescription>
30:             </div>
31:           </div>
32:         </CardHeader>
33:         <CardContent className="space-y-4">
34:           <div className="bg-muted p-3 rounded-md">
35:             <p className="text-sm font-medium mb-1">What went wrong:</p>
36:             <p className="text-xs text-muted-foreground">{error.message}</p>
37:           </div>
38: 
39:           <div className="bg-primary/5 p-3 rounded-md border border-primary/10">
40:             <p className="text-sm font-medium mb-2">💡 Quick Fixes:</p>
41:             <ul className="text-xs text-muted-foreground space-y-1 list-disc list-inside">
42:               <li>Try simplifying your search terms</li>
43:               <li>Check your internet connection</li>
44:               <li>Wait a moment and try again</li>
45:               <li>Contact support with the error ID above</li>
46:             </ul>
47:           </div>
48: 
49:           <div className="flex gap-2">
50:             <Button onClick={retry} size="sm" className="flex-1">
51:               <RefreshCcw className="mr-2 h-4 w-4" />
52:               Retry Search
53:             </Button>
54:             <Button onClick={() => router.back()} size="sm" variant="outline">
55:               <ArrowLeft className="mr-2 h-4 w-4" />
56:               Go Back
57:             </Button>
58:           </div>
59:         </CardContent>
60:       </Card>
61:     </div>
62:   )
63: }
64: 
65: export function JobSearchErrorBoundary({ children }: { children: React.ReactNode }) {
66:   return (
67:     <ErrorBoundary
68:       fallback={JobSearchErrorFallback}
69:       isolate={true} // Isolate errors to this section only
70:     >
71:       {children}
72:     </ErrorBoundary>
73:   )
74: }
</file>

<file path="src/components/error-boundaries/resume-error-boundary.tsx">
 1: 'use client'
 2: 
 3: import React from 'react'
 4: import { ErrorBoundary } from '../error-boundary'
 5: import { Button } from '../ui/button'
 6: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
 7: import { FileX, RefreshCcw, Upload } from 'lucide-react'
 8: import { useRouter } from 'next/navigation'
 9: 
10: interface ResumeErrorFallbackProps {
11:   error: Error
12:   retry: () => void
13:   errorId: string
14: }
15: 
16: function ResumeErrorFallback({ error, retry, errorId }: ResumeErrorFallbackProps) {
17:   const router = useRouter()
18: 
19:   return (
20:     <div className="flex items-center justify-center min-h-[400px] p-4">
21:       <Card className="max-w-md w-full">
22:         <CardHeader>
23:           <div className="flex items-center gap-3 mb-2">
24:             <div className="h-12 w-12 rounded-full bg-destructive/10 flex items-center justify-center">
25:               <FileX className="h-6 w-6 text-destructive" />
26:             </div>
27:             <div>
28:               <CardTitle>Resume Processing Error</CardTitle>
29:               <CardDescription className="text-xs">Error ID: {errorId}</CardDescription>
30:             </div>
31:           </div>
32:         </CardHeader>
33:         <CardContent className="space-y-4">
34:           <div className="bg-muted p-3 rounded-md">
35:             <p className="text-sm font-medium mb-1">Error Details:</p>
36:             <p className="text-xs text-muted-foreground">{error.message}</p>
37:           </div>
38: 
39:           <div className="bg-accent/10 p-3 rounded-md border border-accent/20">
40:             <p className="text-sm font-medium mb-2 text-accent-foreground">💡 Try This:</p>
41:             <ul className="text-xs text-muted-foreground space-y-1 list-disc list-inside">
42:               <li>Ensure your PDF is not corrupted or password-protected</li>
43:               <li>Try converting your resume to a standard PDF format</li>
44:               <li>Upload a smaller file size (&lt; 10MB)</li>
45:               <li>Use the "Paste Text" option as an alternative</li>
46:             </ul>
47:           </div>
48: 
49:           <div className="flex gap-2">
50:             <Button onClick={retry} size="sm" className="flex-1">
51:               <RefreshCcw className="mr-2 h-4 w-4" />
52:               Try Again
53:             </Button>
54:             <Button onClick={() => router.push('/career-finder/resume')} size="sm" variant="outline" className="flex-1">
55:               <Upload className="mr-2 h-4 w-4" />
56:               Upload New
57:             </Button>
58:           </div>
59:         </CardContent>
60:       </Card>
61:     </div>
62:   )
63: }
64: 
65: export function ResumeErrorBoundary({ children }: { children: React.ReactNode }) {
66:   return (
67:     <ErrorBoundary
68:       fallback={ResumeErrorFallback}
69:       isolate={true} // Isolate errors to prevent full page crashes
70:     >
71:       {children}
72:     </ErrorBoundary>
73:   )
74: }
</file>

<file path="src/components/hero-section-v2.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { signIn } from 'next-auth/react'
  5: import { ArrowRight } from 'lucide-react'
  6: 
  7: // Company logos data for floating pills - MORE RECOGNIZABLE COMPANIES
  8: const COMPANY_PILLS = [
  9:   { name: 'Netflix', logo: '📺', color: '#E50914', delay: 0 },
 10:   { name: 'Amazon', logo: '📦', color: '#FF9900', delay: 0.5 },
 11:   { name: 'Spotify', logo: '🎵', color: '#1DB954', delay: 1 },
 12:   { name: 'LinkedIn', logo: '💼', color: '#0077B5', delay: 1.5 },
 13:   { name: 'Uber', logo: '🚗', color: '#000000', delay: 2 },
 14:   { name: 'Airbnb', logo: '🏠', color: '#FF5A5F', delay: 2.5 },
 15:   { name: 'Meta', logo: '📘', color: '#0075FF', delay: 3 },
 16:   { name: 'Google', logo: '🔍', color: '#FFFFFF', delay: 3.5, textColor: '#000000' },
 17:   { name: 'Apple', logo: '🍎', color: '#FFFFFF', delay: 4, textColor: '#000000' },
 18:   { name: 'Tesla', logo: '⚡', color: '#E82127', delay: 4.5 },
 19:   { name: 'Goldman', logo: '💰', color: '#1F1F1F', delay: 5, textColor: '#FFFFFF' },
 20:   { name: 'PepsiCo', logo: '🥤', color: 'linear-gradient(135deg, #004B93 0%, #E32934 100%)', delay: 5.5 },
 21: ]
 22: 
 23: // Pill positions (scattered layout) - MORE POSITIONS FOR MORE COMPANIES
 24: const PILL_POSITIONS = [
 25:   { top: '20%', left: '5%', rotation: -8 },
 26:   { top: '25%', right: '10%', rotation: 5 },
 27:   { top: '40%', left: '12%', rotation: -3 },
 28:   { bottom: '40%', left: '3%', rotation: 7 },
 29:   { top: '50%', right: '6%', rotation: -5 },
 30:   { bottom: '30%', left: '15%', rotation: 4 },
 31:   { bottom: '35%', right: '12%', rotation: -6 },
 32:   { top: '60%', left: '20%', rotation: 3 },
 33:   { bottom: '50%', right: '3%', rotation: -4 },
 34:   { top: '70%', right: '18%', rotation: 6 },
 35:   { bottom: '20%', left: '25%', rotation: -7 },
 36:   { top: '35%', right: '25%', rotation: 8 },
 37: ]
 38: 
 39: export function HeroSectionV2() {
 40:   const [mounted, setMounted] = useState(false)
 41: 
 42:   useEffect(() => {
 43:     setMounted(true)
 44:   }, [])
 45: 
 46:   const handleGetStarted = async () => {
 47:     const base = typeof window !== 'undefined' ? window.location.origin : ''
 48:     const target = `${base}/auth/signin?callbackUrl=${encodeURIComponent(`${base}/dashboard`)}`
 49:     window.location.href = target
 50:   }
 51: 
 52:   const handleGoogle = async () => {
 53:     try {
 54:       await signIn('google', { callbackUrl: '/dashboard' })
 55:     } catch {}
 56:   }
 57: 
 58:   return (
 59:     <section className="landing-page relative min-h-screen overflow-hidden flex flex-col items-center justify-center px-6 py-12">
 60:       {/* Background with theme-aware gradients */}
 61:       <div 
 62:         className="absolute inset-0 -z-10 bg-background"
 63:         style={{
 64:           background: `
 65:             radial-gradient(circle at 20% 30%, hsl(var(--primary) / 0.08) 0%, transparent 50%),
 66:             radial-gradient(circle at 80% 70%, hsl(var(--secondary) / 0.08) 0%, transparent 50%),
 67:             hsl(var(--background))
 68:           `
 69:         }}
 70:       />
 71: 
 72:       {/* Scattered Company Pills */}
 73:       {mounted && (
 74:         <div className="company-pills absolute inset-0 pointer-events-none">
 75:           {COMPANY_PILLS.map((pill, index) => {
 76:             const position = PILL_POSITIONS[index]
 77:             return (
 78:               <div
 79:                 key={pill.name}
 80:                 className="company-pill absolute flex items-center gap-2 px-5 py-3 rounded-full shadow-lg pointer-events-auto cursor-pointer transition-all duration-300 hover:scale-110 hover:shadow-xl"
 81:                 style={{
 82:                   ...position,
 83:                   background: pill.color,
 84:                   color: pill.textColor || '#FFFFFF',
 85:                   transform: `rotate(${position.rotation}deg)`,
 86:                   animation: `float 6s ease-in-out infinite`,
 87:                   animationDelay: `${pill.delay}s`,
 88:                 } as React.CSSProperties}
 89:               >
 90:                 <span className="text-xl">{pill.logo}</span>
 91:                 <span className="text-sm font-medium">{pill.name}</span>
 92:               </div>
 93:             )
 94:           })}
 95:         </div>
 96:       )}
 97: 
 98:       {/* Hero Content */}
 99:       <div className="landing-hero relative z-10 text-center max-w-2xl mx-auto">
100:         <h1 className="text-5xl md:text-6xl font-bold text-white leading-tight mb-6">
101:           Find Your Dream Job{' '}
102:           <span className="inline-block animate-bounce-slow">🚀</span>
103:         </h1>
104:         <p className="text-xl font-bold text-white mb-8 leading-relaxed">
105:           AI-powered resume optimization, company research, and application tracking—all in one platform designed for modern job seekers.
106:         </p>
107: 
108:         {/* CTA Button */}
109:         <button
110:           onClick={handleGetStarted}
111:           className="landing-cta group inline-flex items-center gap-3 px-12 py-4 bg-gradient-to-r from-[#5424FD] to-[#4318E8] text-white font-bold text-lg rounded-full shadow-lg hover:shadow-2xl transition-all duration-300 hover:scale-105 active:scale-95 relative overflow-hidden"
112:         >
113:           <span className="relative z-10">Find Your Dream Job</span>
114:           <ArrowRight className="w-5 h-5 relative z-10 group-hover:translate-x-1 transition-transform" />
115:           
116:           {/* Shine effect */}
117:           <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
118:         </button>
119: 
120:         <p className="mt-6 text-sm font-semibold text-white/70">
121:           Join 10,000+ job seekers who landed their dream roles
122:         </p>
123:       </div>
124: 
125:       {/* SSO Options */}
126:       <div className="relative z-10 mt-12 max-w-md w-full">
127:         <div className="text-center mb-4">
128:           <p className="text-xs font-semibold text-white/60 uppercase tracking-wider">Or continue with</p>
129:         </div>
130:         <div className="flex items-center justify-center gap-4">
131:           <button
132:             onClick={handleGoogle}
133:             className="glass-card px-6 py-3 rounded-xl hover:scale-105 transition-all duration-300 flex items-center gap-2"
134:           >
135:             <svg className="w-5 h-5" viewBox="0 0 24 24">
136:               <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
137:               <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
138:               <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
139:               <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
140:             </svg>
141:             <span className="text-sm font-medium text-white">Google</span>
142:           </button>
143:           <button
144:             onClick={() => signIn('apple', { callbackUrl: '/dashboard' })}
145:             className="glass-card px-6 py-3 rounded-xl hover:scale-105 transition-all duration-300 flex items-center gap-2"
146:           >
147:             <svg className="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor">
148:               <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
149:             </svg>
150:             <span className="text-sm font-medium text-white">Apple</span>
151:           </button>
152:           <button
153:             onClick={() => signIn('azure-ad', { callbackUrl: '/dashboard' })}
154:             className="glass-card px-6 py-3 rounded-xl hover:scale-105 transition-all duration-300 flex items-center gap-2"
155:           >
156:             <svg className="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor">
157:               <path d="M11.5,3L2,5.5V11H11.5V3M22,3L12.5,5.5V11H22V3M11.5,13H2V18.5L11.5,21V13M12.5,13V21L22,18.5V13H12.5Z"/>
158:             </svg>
159:             <span className="text-sm font-medium text-white">Microsoft</span>
160:           </button>
161:         </div>
162:       </div>
163: 
164:       <style jsx>{`
165:         @keyframes float {
166:           0%, 100% { 
167:             transform: translateY(0); 
168:           }
169:           50% { 
170:             transform: translateY(-20px); 
171:           }
172:         }
173: 
174:         @keyframes bounce-slow {
175:           0%, 100% { transform: translateY(0); }
176:           50% { transform: translateY(-10px); }
177:         }
178: 
179:         .animate-bounce-slow {
180:           animation: bounce-slow 2s ease-in-out infinite;
181:         }
182: 
183:         .glass-card {
184:           background: rgba(255, 255, 255, 0.1);
185:           backdrop-filter: blur(10px);
186:           border: 1px solid rgba(255, 255, 255, 0.2);
187:         }
188: 
189:         .glass-card:hover {
190:           background: rgba(255, 255, 255, 0.15);
191:           border-color: rgba(255, 255, 255, 0.3);
192:         }
193: 
194:         @media (max-width: 768px) {
195:           .company-pill {
196:             display: none;
197:           }
198:         }
199:       `}</style>
200:     </section>
201:   )
202: }
</file>

<file path="src/components/job-analysis/index.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Textarea } from '@/components/ui/textarea'
  7: import { Input } from '@/components/ui/input'
  8: import { Label } from '@/components/ui/label'
  9: import { Badge } from '@/components/ui/badge'
 10: import { Alert, AlertDescription } from '@/components/ui/alert'
 11: import { Progress } from '@/components/ui/progress'
 12: import { Skeleton } from '@/components/ui/skeleton'
 13: import {
 14:   Search,
 15:   Briefcase,
 16:   Building,
 17:   Target,
 18:   Users,
 19:   Award,
 20:   Clock,
 21:   AlertCircle,
 22:   CheckCircle,
 23:   Loader2
 24: } from 'lucide-react'
 25: import { JobAnalysis } from '@/types'
 26: import toast from 'react-hot-toast'
 27: 
 28: interface JobAnalysisFormProps {
 29:   onAnalysisComplete: (analysis: { analysis: JobAnalysis; keywords: string[] }) => void
 30:   onError: (error: string) => void
 31: }
 32: 
 33: export function JobAnalysisForm({ onAnalysisComplete, onError }: JobAnalysisFormProps) {
 34:   const [jobDescription, setJobDescription] = useState<string>(()=>{
 35:     try { return localStorage.getItem('job:description') || '' } catch { return '' }
 36:   })
 37:   const [jobTitle, setJobTitle] = useState<string>(()=>{
 38:     try { return localStorage.getItem('job:title') || '' } catch { return '' }
 39:   })
 40:   const [companyName, setCompanyName] = useState<string>(()=>{
 41:     try { return localStorage.getItem('job:company') || '' } catch { return '' }
 42:   })
 43:   const [isAnalyzing, setIsAnalyzing] = useState(false)
 44:   const [analysisProgress, setAnalysisProgress] = useState(0)
 45:   const [error, setError] = useState<string | null>(null)
 46:   const [analysisResult, setAnalysisResult] = useState<{ analysis: JobAnalysis; keywords: string[] } | null>(null)
 47:   const [compare, setCompare] = useState<{ score: number; matched: string[]; missing: string[]; suggestions?: string[] } | null>(null)
 48:   const [importUrl, setImportUrl] = useState('')
 49:   const [isImporting, setIsImporting] = useState(false)
 50:   const [psychology, setPsychology] = useState<any | null>(null)
 51:   const [competition, setCompetition] = useState<any | null>(null)
 52:   const [painpoints, setPainpoints] = useState<any | null>(null)
 53:   const [success, setSuccess] = useState<{ score:number; reasons:string[]; riskFactors:string[]; improvements:string[] } | null>(null)
 54:   const [timing, setTiming] = useState<{ score:number; bestWindows:Array<{window:string;reason:string}>; notes:string[] } | null>(null)
 55: 
 56:   const handleAnalyze = async () => {
 57:     if (!jobDescription.trim()) {
 58:       setError('Please enter a job description')
 59:       return
 60:     }
 61: 
 62:     if (jobDescription.length < 50) {
 63:       setError('Job description must be at least 50 characters long')
 64:       return
 65:     }
 66: 
 67:     setIsAnalyzing(true)
 68:     setAnalysisProgress(0)
 69:     setError(null)
 70: 
 71:     try {
 72:       // Simulate progress updates
 73:       const progressInterval = setInterval(() => {
 74:         setAnalysisProgress(prev => Math.min(prev + 15, 90))
 75:       }, 500)
 76: 
 77:       const response = await fetch('/api/job/analyze', {
 78:         method: 'POST',
 79:         headers: {
 80:           'Content-Type': 'application/json',
 81:         },
 82:         body: JSON.stringify({
 83:           jobDescription,
 84:           jobTitle: jobTitle.trim() || undefined,
 85:           companyName: companyName.trim() || undefined,
 86:         }),
 87:       })
 88: 
 89:       clearInterval(progressInterval)
 90:       setAnalysisProgress(100)
 91: 
 92:       if (!response.ok) {
 93:         const errorData = await response.json()
 94:         throw new Error(errorData.error || 'Analysis failed')
 95:       }
 96: 
 97:       const data = await response.json()
 98:       const result = {
 99:         analysis: data.analysis,
100:         keywords: data.keywords
101:       }
102: 
103:       setAnalysisResult(result)
104:       try {
105:         localStorage.setItem('job:description', jobDescription)
106:         if (jobTitle) localStorage.setItem('job:title', jobTitle)
107:         if (companyName) localStorage.setItem('job:company', companyName)
108:       } catch {}
109:       onAnalysisComplete(result)
110: 
111:       // Fetch psychology, competition, pain points, and success probability in parallel
112:       try {
113:         // Try to load resume text for success scoring
114:         let resumeText: string | undefined
115:         try {
116:           const rl = await fetch('/api/resume/list')
117:           if (rl.ok) { const rj = await rl.json(); resumeText = rj.resumes?.[0]?.extractedText }
118:         } catch {}
119: 
120:         const [psyRes, compRes, painRes, sucRes, timRes] = await Promise.all([
121:           fetch('/api/insights/psychology', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription }) }),
122:           fetch('/api/insights/competition', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription, jobUrl: importUrl || undefined }) }),
123:           fetch('/api/insights/painpoints', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobTitle: jobTitle || result.analysis.jobTitle, jobDescription }) }),
124:           resumeText ? fetch('/api/insights/success', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription, resumeText }) }) : Promise.resolve({ ok: false }) as any,
125:           fetch('/api/insights/timing', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobTitle: jobTitle || result.analysis.jobTitle, companyName: companyName || result.analysis.companyName, location: companyName ? undefined : '', urgency: competition?.urgency, applicants: competition?.applicantsEstimate }) })
126:         ])
127:         if (psyRes.ok) { const pj = await psyRes.json(); setPsychology(pj.psychology || null); try { localStorage.setItem('analyze:psychology', JSON.stringify(pj.psychology || {})) } catch {} }
128:         if (compRes.ok) { const cj = await compRes.json(); setCompetition(cj.competition || null) }
129:         if (painRes.ok) { const pj2 = await painRes.json(); setPainpoints(pj2.painpoints || null) }
130:         if ((sucRes as any).ok) { const sj = await (sucRes as Response).json(); setSuccess(sj.successScore || null) }
131:         if (timRes.ok) { const tj = await timRes.json(); setTiming(tj.timing || null) }
132:       } catch {}
133: 
134:       toast.success('Job analysis completed successfully!')
135: 
136:     } catch (error) {
137:       console.error('Analysis error:', error)
138:       const errorMessage = error instanceof Error ? error.message : 'Analysis failed'
139:       setError(errorMessage)
140:       onError(errorMessage)
141:       toast.error(errorMessage)
142:     } finally {
143:       setIsAnalyzing(false)
144:       setTimeout(() => setAnalysisProgress(0), 1000)
145:     }
146:   }
147: 
148:   const runComparison = async () => {
149:     try {
150:       if (!analysisResult) return
151:       // Try to load latest resume id
152:       let resumeId: string | undefined
153:       let resumeText: string | undefined
154:       try {
155:         const rl = await fetch('/api/resume/list')
156:         if (rl.ok) {
157:           const rj = await rl.json()
158:           resumeId = rj.resumes?.[0]?._id
159:           resumeText = rj.resumes?.[0]?.extractedText
160:         }
161:       } catch {}
162:       if (!resumeId && !resumeText) {
163:         toast.error('No resume found. Upload a resume first (Quick Actions or Resume Builder).')
164:         return
165:       }
166: 
167:       const resp = await fetch('/api/job/compare', {
168:         method: 'POST', headers: { 'Content-Type': 'application/json' },
169:         body: JSON.stringify({ jobAnalysis: analysisResult, resumeId, resumeText })
170:       })
171:       if (!resp.ok) throw new Error('Compare failed')
172:       const json = await resp.json()
173:       setCompare({ score: json.score, matched: json.matchedKeywords || [], missing: json.missingKeywords || [], suggestions: json.suggestions || [] })
174:     } catch (e) {
175:       toast.error('Comparison failed. Upload or select a resume and try again.')
176:       setCompare(null)
177:     }
178:   }
179: 
180:   const resetForm = () => {
181:     setJobDescription('')
182:     setJobTitle('')
183:     setCompanyName('')
184:     setAnalysisResult(null)
185:     setError(null)
186:     setAnalysisProgress(0)
187:   }
188: 
189:   const importJob = async () => {
190:     if (!importUrl || !/^https?:\/\//i.test(importUrl)) {
191:       toast.error('Enter a valid job URL')
192:       return
193:     }
194:     setIsImporting(true)
195:     try {
196:       const base = typeof window !== 'undefined' ? '' : (process.env.NEXTAUTH_URL || 'http://localhost:3000')
197:       const resp = await fetch(`${base}/api/jobs/import`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobUrl: importUrl }) })
198:       const json = await resp.json()
199:       if (!resp.ok || !json.success) throw new Error(json.error || 'Import failed')
200:       // We cannot fetch full application easily here; prompt user to Analyze with scraped description
201:       toast.success('Imported job. Paste its description to analyze or proceed if prefilled.')
202:     } catch (e) {
203:       toast.error('Failed to import job')
204:     } finally {
205:       setIsImporting(false)
206:     }
207:   }
208: 
209:   return (
210:     <Card className="w-full">
211:       <CardHeader>
212:         <CardTitle className="flex items-center gap-2">
213:           <Search className="h-5 w-5" />
214:           Job Analysis
215:         </CardTitle>
216:         <CardDescription>
217:           Paste a job description to get AI-powered analysis of requirements, skills, and company insights
218:         </CardDescription>
219:       </CardHeader>
220:       <CardContent className="space-y-6">
221:         {/* Import by URL */}
222:         <div className="space-y-2">
223:           <Label htmlFor="importUrl">Import Job by URL (optional)</Label>
224:           <div className="flex gap-2">
225:             <Input id="importUrl" placeholder="https://..." value={importUrl} onChange={(e)=>setImportUrl(e.target.value)} disabled={isAnalyzing || isImporting} />
226:             <Button variant="outline" onClick={importJob} disabled={isAnalyzing || isImporting}>
227:               {isImporting ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin"/> Importing...</>) : 'Import'}
228:             </Button>
229:           </div>
230:         </div>
231:         {/* Error Alert */}
232:         {error && (
233:           <Alert variant="destructive">
234:             <AlertCircle className="h-4 w-4" />
235:             <AlertDescription>{error}</AlertDescription>
236:           </Alert>
237:         )}
238: 
239:         {/* Form Inputs */}
240:         <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
241:           <div className="space-y-2">
242:             <Label htmlFor="jobTitle">Job Title (Optional)</Label>
243:             <Input
244:               id="jobTitle"
245:               placeholder="e.g., Senior Software Engineer"
246:               value={jobTitle}
247:               onChange={(e) => setJobTitle(e.target.value)}
248:               disabled={isAnalyzing}
249:             />
250:           </div>
251:           <div className="space-y-2">
252:             <Label htmlFor="companyName">Company Name (Optional)</Label>
253:             <Input
254:               id="companyName"
255:               placeholder="e.g., Google"
256:               value={companyName}
257:               onChange={(e) => setCompanyName(e.target.value)}
258:               disabled={isAnalyzing}
259:             />
260:           </div>
261:         </div>
262: 
263:         <div className="space-y-2">
264:           <Label htmlFor="jobDescription">Job Description *</Label>
265:           <Textarea
266:             id="jobDescription"
267:             placeholder="Paste the complete job description here..."
268:             value={jobDescription}
269:             onChange={(e) => setJobDescription(e.target.value)}
270:             rows={10}
271:             disabled={isAnalyzing}
272:             className="resize-none"
273:           />
274:           <div className="text-sm text-gray-500">
275:             {jobDescription.length} characters (minimum 50 required)
276:           </div>
277:         </div>
278: 
279:         {/* Progress Bar */}
280:         {isAnalyzing && (
281:           <div className="space-y-2">
282:             <div className="flex items-center justify-between">
283:               <span className="text-sm font-medium">Analyzing job description...</span>
284:               <span className="text-sm text-gray-600">{analysisProgress}%</span>
285:             </div>
286:             <Progress value={analysisProgress} className="w-full" />
287:             {/* Skeletons while loading */}
288:             <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
289:               <Skeleton className="h-40" />
290:               <Skeleton className="h-40" />
291:               <Skeleton className="h-28 md:col-span-2" />
292:             </div>
293:           </div>
294:         )}
295: 
296:         {/* Action Buttons */}
297:         <div className="flex gap-3">
298:           <Button
299:             onClick={handleAnalyze}
300:             disabled={isAnalyzing || !jobDescription.trim() || jobDescription.length < 50}
301:             className="flex-1"
302:           >
303:             {isAnalyzing ? (
304:               <>
305:                 <Loader2 className="mr-2 h-4 w-4 animate-spin" />
306:                 Analyzing...
307:               </>
308:             ) : (
309:               <>
310:                 <Search className="mr-2 h-4 w-4" />
311:                 Analyze Job
312:               </>
313:             )}
314:           </Button>
315:           {(analysisResult || error) && (
316:             <Button variant="outline" onClick={resetForm}>
317:               Reset
318:             </Button>
319:           )}
320:           {analysisResult && (
321:             <Button
322:               variant="outline"
323:               onClick={runComparison}
324:               disabled={isAnalyzing}
325:               title="Compare analyzed job against your latest resume"
326:             >
327:               Compare with Resume
328:             </Button>
329:           )}
330:         </div>
331: 
332:         {/* Analysis Results */}
333:         {analysisResult && (
334:           <div className="space-y-4">
335:             <Alert>
336:               <CheckCircle className="h-4 w-4" />
337:               <AlertDescription>
338:                 Analysis completed successfully!
339:               </AlertDescription>
340:             </Alert>
341: 
342:             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
343:               {/* Job Details */}
344:               <Card>
345:                 <CardHeader className="pb-3">
346:                   <CardTitle className="text-lg flex items-center gap-2">
347:                     <Briefcase className="h-4 w-4" />
348:                     Job Details
349:                   </CardTitle>
350:                 </CardHeader>
351:                 <CardContent className="space-y-3">
352:                   <div>
353:                     <Label className="text-sm font-medium">Title</Label>
354:                     <p className="text-sm text-gray-600">{analysisResult.analysis.jobTitle}</p>
355:                   </div>
356:                   <div>
357:                     <Label className="text-sm font-medium">Company</Label>
358:                     <p className="text-sm text-gray-600">{analysisResult.analysis.companyName}</p>
359:                   </div>
360:                   <div>
361:                     <Label className="text-sm font-medium">Experience Level</Label>
362:                     <p className="text-sm text-gray-600">{analysisResult.analysis.experienceLevel}</p>
363:                   </div>
364:                   {analysisResult.analysis.salaryRange && (
365:                     <div>
366:                       <Label className="text-sm font-medium">Salary Range</Label>
367:                       <p className="text-sm text-gray-600">{analysisResult.analysis.salaryRange}</p>
368:                     </div>
369:                   )}
370:                 </CardContent>
371:               </Card>
372: 
373:               {/* Requirements */}
374:               <Card>
375:                 <CardHeader className="pb-3">
376:                   <CardTitle className="text-lg flex items-center gap-2">
377:                     <Target className="h-4 w-4" />
378:                     Key Requirements
379:                   </CardTitle>
380:                 </CardHeader>
381:                 <CardContent>
382:                   <div className="flex flex-wrap gap-2">
383:                     {analysisResult.analysis.keyRequirements.map((req, index) => (
384:                       <Badge key={index} variant="secondary">
385:                         {req}
386:                       </Badge>
387:                     ))}
388:                   </div>
389:                 </CardContent>
390:               </Card>
391: 
392:               {/* Skills */}
393:               <Card>
394:                 <CardHeader className="pb-3">
395:                   <CardTitle className="text-lg flex items-center gap-2">
396:                     <Award className="h-4 w-4" />
397:                     Preferred Skills
398:                   </CardTitle>
399:                 </CardHeader>
400:                 <CardContent>
401:                   <div className="flex flex-wrap gap-2">
402:                     {analysisResult.analysis.preferredSkills.map((skill, index) => (
403:                       <Badge key={index} variant="outline">
404:                         {skill}
405:                       </Badge>
406:                     ))}
407:                   </div>
408:                 </CardContent>
409:               </Card>
410: 
411:               {/* Company Culture */}
412:               <Card>
413:                 <CardHeader className="pb-3">
414:                   <CardTitle className="text-lg flex items-center gap-2">
415:                     <Users className="h-4 w-4" />
416:                     Company Culture
417:                   </CardTitle>
418:                 </CardHeader>
419:                 <CardContent>
420:                   <div className="space-y-2">
421:                     {analysisResult.analysis.companyCulture.map((culture, index) => (
422:                       <div key={index} className="flex items-center gap-2">
423:                         <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
424:                         <span className="text-sm">{culture}</span>
425:                       </div>
426:                     ))}
427:                   </div>
428:                 </CardContent>
429:               </Card>
430:             </div>
431: 
432:             {/* Keywords */}
433:             <Card>
434:               <CardHeader className="pb-3">
435:               <CardTitle className="text-lg flex items-center gap-2">
436:                   <Search className="h-4 w-4" />
437:                   Keywords Found
438:                 </CardTitle>
439:                 <CardDescription>
440:                   Important keywords to include in your resume and cover letter
441:                 </CardDescription>
442:               </CardHeader>
443:               <CardContent>
444:                 <div className="flex flex-wrap gap-2">
445:                   {analysisResult.keywords.map((keyword, index) => (
446:                     <Badge key={index} variant="secondary">
447:                       {keyword}
448:                     </Badge>
449:                   ))}
450:                 </div>
451:                 {compare?.suggestions && compare.suggestions.length > 0 && (
452:                   <div className="mt-3">
453:                     <div className="text-sm font-medium mb-1">What to fix</div>
454:                     <ul className="list-disc ml-5 text-sm text-gray-700">
455:                       {compare.suggestions.slice(0,4).map((s, i)=>(<li key={i}>{s}</li>))}
456:                     </ul>
457:                   </div>
458:                 )}
459:               </CardContent>
460:             </Card>
461: 
462:             {/* Responsibilities */}
463:             {analysisResult.analysis.responsibilities.length > 0 && (
464:               <Card>
465:                 <CardHeader className="pb-3">
466:                   <CardTitle className="text-lg flex items-center gap-2">
467:                     <Clock className="h-4 w-4" />
468:                     Key Responsibilities
469:                   </CardTitle>
470:                 </CardHeader>
471:                 <CardContent>
472:                   <ul className="space-y-2">
473:                     {analysisResult.analysis.responsibilities.map((responsibility, index) => (
474:                       <li key={index} className="flex items-start gap-2">
475:                         <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
476:                         <span className="text-sm">{responsibility}</span>
477:                       </li>
478:                     ))}
479:                   </ul>
480:                 </CardContent>
481:               </Card>
482:             )}
483:           </div>
484:         )}
485: 
486:         {/* Empty state */}
487:         {!isAnalyzing && !analysisResult && !error && (
488:           <div className="text-sm text-gray-600 border rounded-lg p-4">
489:             Paste a full job description and click Analyze to see requirements, skills, and company insights.
490:           </div>
491:         )}
492: 
493:         {compare && (
494:           <div className="space-y-3 mt-4 p-4 border rounded-lg">
495:             <div className="flex items-center justify-between">
496:               <span className="text-sm font-medium">Match Score</span>
497:               <span className="text-sm">{compare.score}%</span>
498:             </div>
499:             <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
500:               <div>
501:                 <div className="text-xs font-semibold mb-1">Matched Keywords</div>
502:                 <div className="flex flex-wrap gap-2">
503:                   {compare.matched.slice(0, 20).map((kw, i) => (
504:                     <Badge key={i} variant="secondary">{kw}</Badge>
505:                   ))}
506:                 </div>
507:               </div>
508:               <div>
509:                 <div className="text-xs font-semibold mb-1">Missing Keywords</div>
510:                 <div className="flex flex-wrap gap-2">
511:                   {compare.missing.slice(0, 20).map((kw, i) => (
512:                     <Badge key={i} variant="outline">{kw}</Badge>
513:                   ))}
514:                 </div>
515:               </div>
516:             </div>
517:             {compare.suggestions && compare.suggestions.length > 0 && (
518:               <div className="mt-2">
519:                 <div className="text-xs font-semibold mb-1">What to fix</div>
520:                 <ul className="list-disc ml-5 text-sm text-gray-700">
521:                   {compare.suggestions.map((s, i)=>(<li key={i}>{s}</li>))}
522:                 </ul>
523:               </div>
524:             )}
525:           </div>
526:         )}
527: 
528:         {(psychology || competition || painpoints || success) && (
529:           <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
530:             {psychology && (
531:               <Card>
532:                 <CardHeader className="pb-3">
533:                   <CardTitle className="text-lg">Psychology & Tone</CardTitle>
534:                 </CardHeader>
535:                 <CardContent className="space-y-2 text-sm text-gray-700">
536:                   <div><span className="font-medium">Tone:</span> {psychology.tone} (formality {psychology.formality})</div>
537:                   {Array.isArray(psychology.values) && psychology.values.length > 0 && (
538:                     <div>
539:                       <div className="font-medium">Values</div>
540:                       <div className="flex flex-wrap gap-2 mt-1">{psychology.values.map((v:string,i:number)=>(<Badge key={i} variant="outline">{v}</Badge>))}</div>
541:                     </div>
542:                   )}
543:                   {Array.isArray(psychology.languageGuidance) && psychology.languageGuidance.length > 0 && (
544:                     <div>
545:                       <div className="font-medium">Language Guidance</div>
546:                       <ul className="list-disc ml-5 mt-1">{psychology.languageGuidance.map((g:string,i:number)=>(<li key={i}>{g}</li>))}</ul>
547:                     </div>
548:                   )}
549:                 </CardContent>
550:               </Card>
551:             )}
552:             {competition && (
553:               <Card>
554:                 <CardHeader className="pb-3">
555:                   <CardTitle className="text-lg">Competition & Urgency</CardTitle>
556:                 </CardHeader>
557:                 <CardContent className="space-y-2 text-sm text-gray-700">
558:                   <div><span className="font-medium">Applicants (est):</span> {competition.applicantsEstimate} ({competition.competitionBand})</div>
559:                   <div><span className="font-medium">Urgency:</span> {competition.urgency}/100</div>
560:                   {Array.isArray(competition.differentiation) && competition.differentiation.length > 0 && (
561:                     <div>
562:                       <div className="font-medium">Differentiation</div>
563:                       <ul className="list-disc ml-5 mt-1">{competition.differentiation.slice(0,4).map((d:string,i:number)=>(<li key={i}>{d}</li>))}</ul>
564:                     </div>
565:                   )}
566:                 </CardContent>
567:               </Card>
568:             )}
569:             {painpoints && (
570:               <Card>
571:                 <CardHeader className="pb-3">
572:                   <CardTitle className="text-lg">Pain Points & Angles</CardTitle>
573:                 </CardHeader>
574:                 <CardContent className="space-y-3 text-sm text-gray-700">
575:                   {Array.isArray(painpoints.companyPainPoints) && painpoints.companyPainPoints.length > 0 && (
576:                     <div>
577:                       <div className="font-medium">Company Pain Points</div>
578:                       <ul className="list-disc ml-5 mt-1">{painpoints.companyPainPoints.slice(0,6).map((p:string,i:number)=>(<li key={i}>{p}</li>))}</ul>
579:                     </div>
580:                   )}
581:                   {Array.isArray(painpoints.rolePainPoints) && painpoints.rolePainPoints.length > 0 && (
582:                     <div>
583:                       <div className="font-medium">Role Pain Points</div>
584:                       <ul className="list-disc ml-5 mt-1">{painpoints.rolePainPoints.slice(0,6).map((p:string,i:number)=>(<li key={i}>{p}</li>))}</ul>
585:                     </div>
586:                   )}
587:                   {Array.isArray(painpoints.solutionAngles) && painpoints.solutionAngles.length > 0 && (
588:                     <div>
589:                       <div className="font-medium">Solution Angles</div>
590:                       <ul className="list-disc ml-5 mt-1">{painpoints.solutionAngles.slice(0,6).map((p:string,i:number)=>(<li key={i}>{p}</li>))}</ul>
591:                     </div>
592:                   )}
593:                 </CardContent>
594:               </Card>
595:             )}
596:             {success && (
597:               <Card>
598:                 <CardHeader className="pb-3">
599:                   <CardTitle className="text-lg">Predicted Success Probability</CardTitle>
600:                 </CardHeader>
601:                 <CardContent className="space-y-2 text-sm text-gray-700">
602:                   <div className="flex items-center justify-between">
603:                     <span className="font-medium">Score</span>
604:                     <span>{success.score}/100</span>
605:                   </div>
606:                   {Array.isArray(success.reasons) && success.reasons.length > 0 && (
607:                     <div>
608:                       <div className="font-medium">Reasons</div>
609:                       <ul className="list-disc ml-5 mt-1">{success.reasons.slice(0,4).map((r:string,i:number)=>(<li key={i}>{r}</li>))}</ul>
610:                     </div>
611:                   )}
612:                   {Array.isArray(success.improvements) && success.improvements.length > 0 && (
613:                     <div>
614:                       <div className="font-medium">Improvements</div>
615:                       <ul className="list-disc ml-5 mt-1">{success.improvements.slice(0,4).map((r:string,i:number)=>(<li key={i}>{r}</li>))}</ul>
616:                     </div>
617:                   )}
618:                 </CardContent>
619:               </Card>
620:             )}
621:             {timing && (
622:               <Card>
623:                 <CardHeader className="pb-3">
624:                   <CardTitle className="text-lg">Optimal Timing</CardTitle>
625:                 </CardHeader>
626:                 <CardContent className="space-y-2 text-sm text-gray-700">
627:                   <div className="flex items-center justify-between">
628:                     <span className="font-medium">Timing Score</span>
629:                     <span>{timing.score}/100</span>
630:                   </div>
631:                   {Array.isArray(timing.bestWindows) && timing.bestWindows.length > 0 && (
632:                     <div>
633:                       <div className="font-medium">Best Windows</div>
634:                       <ul className="list-disc ml-5 mt-1">
635:                         {timing.bestWindows.slice(0,3).map((w,i)=>(<li key={i}>{w.window} — {w.reason}</li>))}
636:                       </ul>
637:                     </div>
638:                   )}
639:                   {Array.isArray(timing.notes) && timing.notes.length > 0 && (
640:                     <div>
641:                       <div className="font-medium">Notes</div>
642:                       <ul className="list-disc ml-5 mt-1">
643:                         {timing.notes.slice(0,3).map((n,i)=>(<li key={i}>{n}</li>))}
644:                       </ul>
645:                     </div>
646:                   )}
647:                 </CardContent>
648:               </Card>
649:             )}
650:           </div>
651:         )}
652:       </CardContent>
653:     </Card>
654:   )
655: }
</file>

<file path="src/components/job-status-bar.tsx">
  1: /**
  2:  * Job Status Bar Component
  3:  * Figma-inspired status tabs for job tracking
  4:  * 
  5:  * Displays: Discover, Saved, Applied, Closed, Discarded
  6:  */
  7: 
  8: 'use client'
  9: 
 10: import { cn } from '@/lib/utils'
 11: 
 12: export type JobStatus = 'discover' | 'saved' | 'applied' | 'closed' | 'discarded'
 13: 
 14: interface JobStatusBarProps {
 15:   activeStatus: JobStatus
 16:   onStatusChange: (status: JobStatus) => void
 17:   counts?: {
 18:     discover?: number
 19:     saved?: number
 20:     applied?: number
 21:     closed?: number
 22:     discarded?: number
 23:   }
 24: }
 25: 
 26: const statusConfig = [
 27:   { key: 'discover' as JobStatus, label: 'Discover' },
 28:   { key: 'saved' as JobStatus, label: 'Saved' },
 29:   { key: 'applied' as JobStatus, label: 'Applied' },
 30:   { key: 'closed' as JobStatus, label: 'Closed' },
 31:   { key: 'discarded' as JobStatus, label: 'Discarded' },
 32: ]
 33: 
 34: export function JobStatusBar({ activeStatus, onStatusChange, counts }: JobStatusBarProps) {
 35:   return (
 36:     <div className="relative w-full px-6 py-4">
 37:       {/* Background Progress Bar */}
 38:       <div className="absolute left-6 right-6 top-1/2 -translate-y-1/2 h-2 bg-[#D5D5D5] rounded-full" />
 39:       
 40:       {/* Status Tabs */}
 41:       <div className="relative flex items-center justify-start gap-2 z-10">
 42:         {statusConfig.map((status, index) => {
 43:           const isActive = activeStatus === status.key
 44:           const count = counts?.[status.key]
 45:           
 46:           return (
 47:             <button
 48:               key={status.key}
 49:               onClick={() => onStatusChange(status.key)}
 50:               className={cn(
 51:                 'flex items-center justify-center px-4 py-3 rounded-full font-semibold text-sm transition-all duration-300',
 52:                 'hover:scale-105 active:scale-95',
 53:                 isActive
 54:                   ? 'bg-[#5424FD] text-white shadow-lg z-20'
 55:                   : 'bg-[#D5D5D5] text-black hover:bg-[#BFBFBF] z-10'
 56:               )}
 57:               style={{
 58:                 order: index + 1,
 59:                 fontFamily: 'var(--font-inter), Satoshi, sans-serif',
 60:               }}
 61:             >
 62:               {status.label}
 63:               {count !== undefined && count > 0 && (
 64:                 <span className={cn(
 65:                   'ml-2 px-2 py-0.5 rounded-full text-xs font-bold',
 66:                   isActive 
 67:                     ? 'bg-white/20 text-white' 
 68:                     : 'bg-black/10 text-black'
 69:                 )}>
 70:                   {count}
 71:                 </span>
 72:               )}
 73:             </button>
 74:           )
 75:         })}
 76:       </div>
 77:     </div>
 78:   )
 79: }
 80: 
 81: /**
 82:  * Compact version for mobile
 83:  */
 84: export function JobStatusBarCompact({ activeStatus, onStatusChange }: JobStatusBarProps) {
 85:   return (
 86:     <div className="flex items-center gap-2 overflow-x-auto px-4 py-2 scrollbar-hide">
 87:       {statusConfig.map((status) => {
 88:         const isActive = activeStatus === status.key
 89:         
 90:         return (
 91:           <button
 92:             key={status.key}
 93:             onClick={() => onStatusChange(status.key)}
 94:             className={cn(
 95:               'flex-shrink-0 px-4 py-2 rounded-full text-xs font-semibold transition-all duration-300',
 96:               isActive
 97:                 ? 'bg-[#5424FD] text-white'
 98:                 : 'bg-[#D5D5D5] text-black'
 99:             )}
100:           >
101:             {status.label}
102:           </button>
103:         )
104:       })}
105:     </div>
106:   )
107: }
</file>

<file path="src/components/mobile/JobCard.tsx">
  1: 'use client'
  2: 
  3: import { useState, useRef, useEffect } from 'react'
  4: import { motion, useMotionValue, useTransform, PanInfo } from 'framer-motion'
  5: import { Haptics, ImpactStyle } from '@capacitor/haptics'
  6: 
  7: interface JobCardProps {
  8:   job: {
  9:     id: string
 10:     title: string
 11:     company: string
 12:     location: string
 13:     salary?: string
 14:     type: string
 15:     postedDate: string
 16:     description: string
 17:   }
 18:   onSwipeLeft?: (jobId: string) => void
 19:   onSwipeRight?: (jobId: string) => void
 20:   onTap?: (jobId: string) => void
 21: }
 22: 
 23: export function JobCard({ job, onSwipeLeft, onSwipeRight, onTap }: JobCardProps) {
 24:   const [isExiting, setIsExiting] = useState(false)
 25:   const cardRef = useRef<HTMLDivElement>(null)
 26:   const x = useMotionValue(0)
 27:   
 28:   // Transform x position to rotation
 29:   const rotate = useTransform(x, [-200, 0, 200], [-15, 0, 15])
 30:   
 31:   // Transform x position to opacity for indicators
 32:   const leftOpacity = useTransform(x, [-200, -50, 0], [1, 0.5, 0])
 33:   const rightOpacity = useTransform(x, [0, 50, 200], [0, 0.5, 1])
 34: 
 35:   // Trigger haptic feedback
 36:   const triggerHaptic = async (style: ImpactStyle = ImpactStyle.Light) => {
 37:     try {
 38:       await Haptics.impact({ style })
 39:     } catch (error) {
 40:       // Haptics not available (web browser)
 41:       console.debug('Haptics not available')
 42:     }
 43:   }
 44: 
 45:   const handleDragEnd = async (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {
 46:     const threshold = 100
 47:     
 48:     if (Math.abs(info.offset.x) > threshold) {
 49:       setIsExiting(true)
 50:       
 51:       // Trigger strong haptic feedback
 52:       await triggerHaptic(ImpactStyle.Medium)
 53:       
 54:       if (info.offset.x > 0) {
 55:         // Swiped right (like/save)
 56:         onSwipeRight?.(job.id)
 57:       } else {
 58:         // Swiped left (dismiss)
 59:         onSwipeLeft?.(job.id)
 60:       }
 61:     } else {
 62:       // Snap back to center
 63:       await triggerHaptic(ImpactStyle.Light)
 64:     }
 65:   }
 66: 
 67:   const handleTap = async () => {
 68:     await triggerHaptic(ImpactStyle.Light)
 69:     onTap?.(job.id)
 70:   }
 71: 
 72:   return (
 73:     <motion.div
 74:       ref={cardRef}
 75:       className="swipeable-card ripple"
 76:       style={{ x, rotate }}
 77:       drag="x"
 78:       dragConstraints={{ left: 0, right: 0 }}
 79:       dragElastic={0.7}
 80:       onDragEnd={handleDragEnd}
 81:       onTap={handleTap}
 82:       animate={isExiting ? { opacity: 0, scale: 0.8 } : { opacity: 1, scale: 1 }}
 83:       transition={{ duration: 0.3 }}
 84:     >
 85:       {/* Swipe indicators */}
 86:       <motion.div
 87:         className="swipe-indicator swipe-indicator-left"
 88:         style={{ opacity: leftOpacity }}
 89:       >
 90:         ❌
 91:       </motion.div>
 92:       
 93:       <motion.div
 94:         className="swipe-indicator swipe-indicator-right"
 95:         style={{ opacity: rightOpacity }}
 96:       >
 97:         ⭐
 98:       </motion.div>
 99: 
100:       {/* Card content */}
101:       <div className="flex flex-col gap-3">
102:         {/* Header */}
103:         <div className="flex items-start justify-between">
104:           <div className="flex-1">
105:             <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-1">
106:               {job.title}
107:             </h3>
108:             <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
109:               {job.company}
110:             </p>
111:           </div>
112:           <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center text-white font-bold text-lg flex-shrink-0">
113:             {job.company.charAt(0)}
114:           </div>
115:         </div>
116: 
117:         {/* Details */}
118:         <div className="flex flex-wrap gap-2">
119:           <span className="inline-flex items-center gap-1 px-3 py-1 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 rounded-full text-sm font-medium">
120:             📍 {job.location}
121:           </span>
122:           <span className="inline-flex items-center gap-1 px-3 py-1 bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 rounded-full text-sm font-medium">
123:             💼 {job.type}
124:           </span>
125:           {job.salary && (
126:             <span className="inline-flex items-center gap-1 px-3 py-1 bg-purple-50 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300 rounded-full text-sm font-medium">
127:               💰 {job.salary}
128:             </span>
129:           )}
130:         </div>
131: 
132:         {/* Description */}
133:         <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-3">
134:           {job.description}
135:         </p>
136: 
137:         {/* Footer */}
138:         <div className="flex items-center justify-between pt-2 border-t border-gray-200 dark:border-gray-700">
139:           <span className="text-xs text-gray-500 dark:text-gray-400">
140:             Posted {job.postedDate}
141:           </span>
142:           <div className="flex gap-2">
143:             <button
144:               className="w-10 h-10 rounded-full bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 flex items-center justify-center ripple"
145:               onClick={(e) => {
146:                 e.stopPropagation()
147:                 triggerHaptic(ImpactStyle.Light)
148:                 onSwipeLeft?.(job.id)
149:               }}
150:               aria-label="Dismiss job"
151:             >
152:               ✕
153:             </button>
154:             <button
155:               className="w-10 h-10 rounded-full bg-yellow-50 dark:bg-yellow-900/20 text-yellow-600 dark:text-yellow-400 flex items-center justify-center ripple"
156:               onClick={(e) => {
157:                 e.stopPropagation()
158:                 triggerHaptic(ImpactStyle.Light)
159:                 onSwipeRight?.(job.id)
160:               }}
161:               aria-label="Save job"
162:             >
163:               ⭐
164:             </button>
165:           </div>
166:         </div>
167:       </div>
168:     </motion.div>
169:   )
170: }
</file>

<file path="src/components/mobile/PullToRefresh.tsx">
  1: 'use client'
  2: 
  3: import { useState, useRef, useEffect, ReactNode } from 'react'
  4: import { Haptics, ImpactStyle } from '@capacitor/haptics'
  5: import confetti from 'canvas-confetti'
  6: 
  7: interface PullToRefreshProps {
  8:   onRefresh: () => Promise<void>
  9:   children: ReactNode
 10:   threshold?: number
 11:   disabled?: boolean
 12: }
 13: 
 14: export function PullToRefresh({ 
 15:   onRefresh, 
 16:   children, 
 17:   threshold = 80,
 18:   disabled = false 
 19: }: PullToRefreshProps) {
 20:   const [isPulling, setIsPulling] = useState(false)
 21:   const [isRefreshing, setIsRefreshing] = useState(false)
 22:   const [pullDistance, setPullDistance] = useState(0)
 23:   const startY = useRef(0)
 24:   const containerRef = useRef<HTMLDivElement>(null)
 25: 
 26:   const triggerHaptic = async () => {
 27:     try {
 28:       await Haptics.impact({ style: ImpactStyle.Medium })
 29:     } catch (error) {
 30:       console.debug('Haptics not available')
 31:     }
 32:   }
 33: 
 34:   const triggerConfetti = () => {
 35:     confetti({
 36:       particleCount: 50,
 37:       spread: 60,
 38:       origin: { y: 0.1 }
 39:     })
 40:   }
 41: 
 42:   const handleTouchStart = (e: TouchEvent) => {
 43:     if (disabled || isRefreshing) return
 44:     
 45:     const scrollTop = window.pageYOffset || document.documentElement.scrollTop
 46:     if (scrollTop === 0) {
 47:       startY.current = e.touches[0].clientY
 48:     }
 49:   }
 50: 
 51:   const handleTouchMove = (e: TouchEvent) => {
 52:     if (disabled || isRefreshing || startY.current === 0) return
 53:     
 54:     const currentY = e.touches[0].clientY
 55:     const distance = currentY - startY.current
 56:     
 57:     if (distance > 0) {
 58:       setPullDistance(Math.min(distance, threshold * 1.5))
 59:       setIsPulling(distance > threshold)
 60:       
 61:       // Haptic feedback when reaching threshold
 62:       if (distance > threshold && !isPulling) {
 63:         triggerHaptic()
 64:       }
 65:     }
 66:   }
 67: 
 68:   const handleTouchEnd = async () => {
 69:     if (disabled || isRefreshing) return
 70:     
 71:     if (isPulling && pullDistance > threshold) {
 72:       setIsRefreshing(true)
 73:       await triggerHaptic()
 74:       
 75:       try {
 76:         await onRefresh()
 77:         triggerConfetti()
 78:       } catch (error) {
 79:         console.error('Refresh failed:', error)
 80:       } finally {
 81:         setIsRefreshing(false)
 82:       }
 83:     }
 84:     
 85:     setIsPulling(false)
 86:     setPullDistance(0)
 87:     startY.current = 0
 88:   }
 89: 
 90:   useEffect(() => {
 91:     const container = containerRef.current
 92:     if (!container) return
 93: 
 94:     container.addEventListener('touchstart', handleTouchStart, { passive: true })
 95:     container.addEventListener('touchmove', handleTouchMove, { passive: true })
 96:     container.addEventListener('touchend', handleTouchEnd)
 97: 
 98:     return () => {
 99:       container.removeEventListener('touchstart', handleTouchStart)
100:       container.removeEventListener('touchmove', handleTouchMove)
101:       container.removeEventListener('touchend', handleTouchEnd)
102:     }
103:   }, [isPulling, pullDistance, isRefreshing, disabled])
104: 
105:   const pullProgress = Math.min((pullDistance / threshold) * 100, 100)
106: 
107:   return (
108:     <div ref={containerRef} className="relative">
109:       {/* Pull indicator */}
110:       <div
111:         className="pull-to-refresh"
112:         style={{
113:           transform: `translateY(${Math.min(pullDistance, threshold)}px)`,
114:           opacity: pullDistance > 0 ? 1 : 0
115:         }}
116:       >
117:         {isRefreshing ? (
118:           <div className="pull-to-refresh-spinner" />
119:         ) : (
120:           <div className="relative w-12 h-12 flex items-center justify-center">
121:             {/* Progress circle */}
122:             <svg className="absolute w-12 h-12 transform -rotate-90">
123:               <circle
124:                 cx="24"
125:                 cy="24"
126:                 r="20"
127:                 stroke="#e5e7eb"
128:                 strokeWidth="3"
129:                 fill="none"
130:               />
131:               <circle
132:                 cx="24"
133:                 cy="24"
134:                 r="20"
135:                 stroke="#667eea"
136:                 strokeWidth="3"
137:                 fill="none"
138:                 strokeDasharray={`${2 * Math.PI * 20}`}
139:                 strokeDashoffset={`${2 * Math.PI * 20 * (1 - pullProgress / 100)}`}
140:                 strokeLinecap="round"
141:                 style={{ transition: 'stroke-dashoffset 0.1s ease' }}
142:               />
143:             </svg>
144:             {/* Arrow icon */}
145:             <div
146:               className="text-2xl transition-transform duration-200"
147:               style={{
148:                 transform: isPulling ? 'rotate(180deg)' : 'rotate(0deg)'
149:               }}
150:             >
151:               ↓
152:             </div>
153:           </div>
154:         )}
155:       </div>
156: 
157:       {/* Content */}
158:       <div
159:         style={{
160:           transform: `translateY(${Math.min(pullDistance * 0.5, threshold * 0.5)}px)`,
161:           transition: isPulling || isRefreshing ? 'none' : 'transform 0.3s ease'
162:         }}
163:       >
164:         {children}
165:       </div>
166:     </div>
167:   )
168: }
</file>

<file path="src/components/modern/DribbblePageLayout.tsx">
 1: 'use client'
 2: 
 3: import React from 'react'
 4: import { MobileNavigation } from './MobileNavigation'
 5: 
 6: interface PageLayoutProps {
 7:   children: React.ReactNode
 8:   showNavigation?: boolean
 9:   fullWidth?: boolean
10: }
11: 
12: export const DribbblePageLayout: React.FC<PageLayoutProps> = ({ 
13:   children, 
14:   showNavigation = true,
15:   fullWidth = false
16: }) => {
17:   return (
18:     <div className="page-background-dribbble min-h-screen">
19:       <div className={`relative z-10 ${showNavigation ? 'pb-20' : 'pb-8'} ${fullWidth ? '' : 'max-w-7xl mx-auto'}`}>
20:         {children}
21:       </div>
22:       {showNavigation && <MobileNavigation />}
23:     </div>
24:   )
25: }
</file>

<file path="src/components/modern/index.ts">
1: // Export all modern Dribbble-inspired components
2: export { ModernJobCard } from './ModernJobCard'
3: export { VibrantPageHeader } from './VibrantPageHeader'
4: export { ModernResumeUpload } from './ModernResumeUpload'
5: export { SearchHeroSection } from './SearchHeroSection'
6: export { MobileNavigation } from './MobileNavigation'
7: export { DribbblePageLayout } from './DribbblePageLayout'
</file>

<file path="src/components/onboarding/OnboardingRedirect.tsx">
 1: 'use client'
 2: 
 3: import { useEffect, useRef } from 'react'
 4: import { useSession } from 'next-auth/react'
 5: import { useRouter, usePathname } from 'next/navigation'
 6: 
 7: /**
 8:  * Client-side component that redirects new users to onboarding quiz
 9:  * Place this in the root layout or dashboard pages
10:  */
11: export function OnboardingRedirect() {
12:   const { data: session, status } = useSession()
13:   const router = useRouter()
14:   const pathname = usePathname()
15:   const hasRedirected = useRef(false)
16: 
17:   useEffect(() => {
18:     // Only check if authenticated and not already on quiz/auth pages
19:     if (status === 'authenticated' && !pathname.startsWith('/onboarding') && !pathname.startsWith('/auth')) {
20:       const user = session?.user as any
21:       
22:       // Check if user has completed onboarding
23:       if (user && user.onboardingComplete === false && !hasRedirected.current) {
24:         console.log('[ONBOARDING] User needs to complete quiz, redirecting...', {
25:           email: user.email,
26:           onboardingComplete: user.onboardingComplete,
27:           pathname
28:         })
29:         hasRedirected.current = true
30:         router.push('/onboarding/quiz')
31:       }
32:     }
33:   }, [status, session, pathname, router])
34: 
35:   return null // This component doesn't render anything
36: }
</file>

<file path="src/components/onboarding/SuccessAnimation.tsx">
  1: 'use client'
  2: 
  3: import { useEffect } from 'react'
  4: import confetti from 'canvas-confetti'
  5: import { motion } from 'framer-motion'
  6: 
  7: interface SuccessAnimationProps {
  8:   onComplete?: () => void
  9: }
 10: 
 11: export function SuccessAnimation({ onComplete }: SuccessAnimationProps) {
 12:   useEffect(() => {
 13:     // Fire confetti
 14:     const duration = 3000
 15:     const animationEnd = Date.now() + duration
 16:     const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 }
 17: 
 18:     function randomInRange(min: number, max: number) {
 19:       return Math.random() * (max - min) + min
 20:     }
 21: 
 22:     const interval = setInterval(function() {
 23:       const timeLeft = animationEnd - Date.now()
 24: 
 25:       if (timeLeft <= 0) {
 26:         clearInterval(interval)
 27:         return
 28:       }
 29: 
 30:       const particleCount = 50 * (timeLeft / duration)
 31:       
 32:       confetti({
 33:         ...defaults,
 34:         particleCount,
 35:         origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
 36:       })
 37:       confetti({
 38:         ...defaults,
 39:         particleCount,
 40:         origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
 41:       })
 42:     }, 250)
 43: 
 44:     // Auto-complete after animation
 45:     const timer = setTimeout(() => {
 46:       onComplete?.()
 47:     }, 3500)
 48: 
 49:     return () => {
 50:       clearInterval(interval)
 51:       clearTimeout(timer)
 52:     }
 53:   }, [onComplete])
 54: 
 55:   return (
 56:     <div className="flex flex-col items-center justify-center min-h-[calc(100vh-80px)] px-4">
 57:       <motion.div
 58:         initial={{ scale: 0 }}
 59:         animate={{ scale: 1 }}
 60:         transition={{ type: 'spring', stiffness: 200, damping: 15 }}
 61:         className="text-center"
 62:       >
 63:         {/* Checkmark Circle */}
 64:         <div className="w-24 h-24 sm:w-32 sm:h-32 mx-auto mb-6 rounded-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center shadow-2xl">
 65:           <motion.svg
 66:             initial={{ pathLength: 0 }}
 67:             animate={{ pathLength: 1 }}
 68:             transition={{ duration: 0.5, delay: 0.2 }}
 69:             className="w-12 h-12 sm:w-16 sm:h-16 text-white"
 70:             fill="none"
 71:             viewBox="0 0 24 24"
 72:             stroke="currentColor"
 73:             strokeWidth={3}
 74:           >
 75:             <motion.path
 76:               strokeLinecap="round"
 77:               strokeLinejoin="round"
 78:               d="M5 13l4 4L19 7"
 79:             />
 80:           </motion.svg>
 81:         </div>
 82: 
 83:         {/* Success Message */}
 84:         <motion.h1
 85:           initial={{ opacity: 0, y: 20 }}
 86:           animate={{ opacity: 1, y: 0 }}
 87:           transition={{ delay: 0.3 }}
 88:           className="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-white mb-3"
 89:         >
 90:           Profile Complete! 🎉
 91:         </motion.h1>
 92: 
 93:         <motion.p
 94:           initial={{ opacity: 0, y: 20 }}
 95:           animate={{ opacity: 1, y: 0 }}
 96:           transition={{ delay: 0.4 }}
 97:           className="text-lg text-gray-600 dark:text-gray-400 mb-8"
 98:         >
 99:           Let's find your next opportunity
100:         </motion.p>
101: 
102:         {/* Loading Indicator */}
103:         <motion.div
104:           initial={{ opacity: 0 }}
105:           animate={{ opacity: 1 }}
106:           transition={{ delay: 0.5 }}
107:           className="flex items-center justify-center gap-2 text-sm text-gray-500"
108:         >
109:           <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
110:           <span>Redirecting to resume upload...</span>
111:         </motion.div>
112:       </motion.div>
113:     </div>
114:   )
115: }
</file>

<file path="src/components/providers.tsx">
 1: 'use client'
 2: 
 3: import { SessionProvider } from 'next-auth/react'
 4: import { usePathname } from 'next/navigation'
 5: import { QueryClientProvider } from '@tanstack/react-query'
 6: import { useEffect, useState } from 'react'
 7: import { Toaster } from 'react-hot-toast'
 8: import { ResumeProvider } from '@/components/resume-context'
 9: import { initSentry, addRequestBreadcrumb } from '@/lib/sentry'
10: import toast from 'react-hot-toast'
11: import { createQueryClient } from '@/lib/query-client'
12: 
13: export function Providers({ children }: { children: React.ReactNode }) {
14:   const [queryClient] = useState(() => createQueryClient())
15:   const pathname = usePathname() || ''
16:   const DASHBOARD_PREFIXES = [
17:     '/dashboard',
18:     '/career-finder',
19:     '/analytics',
20:     '/job-boards',
21:     '/network',
22:     '/resume-builder',
23:     '/cover-letter',
24:     '/salary-negotiation',
25:     '/skill-analysis',
26:   ]
27:   const shouldMountResume = DASHBOARD_PREFIXES.some((p) => pathname.startsWith(p))
28:   useEffect(() => {
29:     // Initialize Sentry once on client
30:     try { initSentry() } catch {}
31:     // Global fetch wrapper to capture x-request-id and add breadcrumbs
32:     try {
33:       const originalFetch = window.fetch
34:       if (!(originalFetch as any).__wrapped) {
35:         const wrapped = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {
36:           try {
37:             const resp = await originalFetch(input, init)
38:             const reqId = resp.headers.get('x-request-id') || ''
39:             if (reqId) addRequestBreadcrumb(reqId)
40:             
41:             // CRITICAL FIX: Only show automatic toasts if NOT explicitly disabled
42:             // APIs can set 'x-skip-auto-toast' header to handle their own error messages
43:             const skipAutoToast = resp.headers.get('x-skip-auto-toast') === 'true'
44:             
45:             // Minimal default toasts for unhandled auth/rate/server errors
46:             if (!resp.ok && !skipAutoToast) {
47:               if (resp.status === 401) { toast.error('Session expired. Please sign in.'); }
48:               else if (resp.status === 429) { toast.error('Rate limit exceeded. Please wait and try again.'); }
49:               else if (resp.status >= 500) { toast.error('Server error. Please try again later.'); }
50:             }
51:             return resp
52:           } catch (e) {
53:             toast.error('Network error. Check your connection and try again.')
54:             throw e
55:           }
56:         }
57:         ;(wrapped as any).__wrapped = true
58:         window.fetch = wrapped as typeof window.fetch
59:       }
60:     } catch {}
61:   }, [])
62:   const content = (
63:     <>
64:       {children}
65:       <Toaster
66:         position="top-right"
67:         toastOptions={{
68:           duration: 4000,
69:           style: {
70:             background: '#363636',
71:             color: '#fff',
72:           },
73:         }}
74:       />
75:     </>
76:   )
77: 
78:   return (
79:     <SessionProvider>
80:       <QueryClientProvider client={queryClient}>
81:         {shouldMountResume ? <ResumeProvider>{content}</ResumeProvider> : content}
82:       </QueryClientProvider>
83:     </SessionProvider>
84:   )
85: }
</file>

<file path="src/components/resume-context.tsx">
 1: 'use client'
 2: 
 3: import React, { createContext, useContext, useEffect, useMemo, useState } from 'react'
 4: 
 5: type ResumeItem = {
 6:   _id: string
 7:   originalFileName: string
 8:   fileUrl?: string
 9:   extractedText: string
10:   createdAt?: string
11: }
12: 
13: type ResumeContextValue = {
14:   resumes: ResumeItem[]
15:   selectedResumeId?: string
16:   selectedResume?: ResumeItem
17:   setSelectedResumeId: (id?: string) => void
18:   refresh: () => Promise<void>
19: }
20: 
21: const ResumeContext = createContext<ResumeContextValue | undefined>(undefined)
22: 
23: export function ResumeProvider({ children }: { children: React.ReactNode }) {
24:   const [resumes, setResumes] = useState<ResumeItem[]>([])
25:   const [selectedResumeId, setSelectedResumeIdState] = useState<string | undefined>(undefined)
26: 
27:   const refresh = async () => {
28:     try {
29:       const resp = await fetch('/api/resume/list')
30:       if (resp.ok) {
31:         const data = await resp.json()
32:         const list = (data.resumes || []) as ResumeItem[]
33:         setResumes(list)
34:         if (!selectedResumeId && list.length) {
35:           const lastSaved = typeof window !== 'undefined' ? localStorage.getItem('resume:selected') || '' : ''
36:           const found = list.find(r => r._id === lastSaved) ? lastSaved : list[0]._id
37:           setSelectedResumeIdState(found)
38:         }
39:       } else if (resp.status === 401) {
40:         // Redirect to sign-in if not authenticated, but never from auth pages
41:         if (typeof window !== 'undefined') {
42:           const path = window.location.pathname || '/'
43:           if (!path.startsWith('/auth')) {
44:             const back = encodeURIComponent(path + window.location.search)
45:             const safe = back.includes('%2Fauth') ? encodeURIComponent('/dashboard') : back
46:             window.location.href = `/auth/signin?callbackUrl=${safe}`
47:           }
48:         }
49:       }
50:     } catch {}
51:   }
52: 
53:   useEffect(() => {
54:     refresh()
55:     // eslint-disable-next-line react-hooks/exhaustive-deps
56:   }, [])
57: 
58:   const setSelectedResumeId = (id?: string) => {
59:     setSelectedResumeIdState(id)
60:     try { if (id) localStorage.setItem('resume:selected', id) } catch {}
61:   }
62: 
63:   const selectedResume = useMemo(() => resumes.find(r => r._id === selectedResumeId), [resumes, selectedResumeId])
64: 
65:   const value: ResumeContextValue = {
66:     resumes,
67:     selectedResumeId,
68:     selectedResume,
69:     setSelectedResumeId,
70:     refresh,
71:   }
72: 
73:   return (
74:     <ResumeContext.Provider value={value}>
75:       {children}
76:     </ResumeContext.Provider>
77:   )
78: }
79: 
80: export function useResumeContext(): ResumeContextValue {
81:   const ctx = useContext(ResumeContext)
82:   if (!ctx) throw new Error('useResumeContext must be used within ResumeProvider')
83:   return ctx
84: }
</file>

<file path="src/components/resume-customizer/index.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Textarea } from '@/components/ui/textarea'
  7: import { Badge } from '@/components/ui/badge'
  8: import { Alert, AlertDescription } from '@/components/ui/alert'
  9: import { Progress } from '@/components/ui/progress'
 10: import { Skeleton } from '@/components/ui/skeleton'
 11: import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
 12: import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
 13: import {
 14:   Wand2,
 15:   FileText,
 16:   Download,
 17:   Eye,
 18:   AlertCircle,
 19:   CheckCircle,
 20:   Loader2,
 21:   Target,
 22:   Lightbulb,
 23:   TrendingUp
 24: } from 'lucide-react'
 25: import { Resume, JobAnalysis } from '@/types'
 26: import toast from 'react-hot-toast'
 27: 
 28: interface ResumeCustomizerProps {
 29:   resume: Resume
 30:   jobAnalysis: { analysis: JobAnalysis; keywords: string[] }
 31:   onCustomizationComplete: (customizedResume: any) => void
 32:   onError: (error: string) => void
 33: }
 34: 
 35: export function ResumeCustomizer({
 36:   resume,
 37:   jobAnalysis,
 38:   onCustomizationComplete,
 39:   onError
 40: }: ResumeCustomizerProps) {
 41:   const [isCustomizing, setIsCustomizing] = useState(false)
 42:   const [customizationProgress, setCustomizationProgress] = useState(0)
 43:   const [error, setError] = useState<string | null>(null)
 44:   const [customizedResult, setCustomizedResult] = useState<any>(null)
 45:   const [customizedResultB, setCustomizedResultB] = useState<any>(null)
 46:   const [diffHtml, setDiffHtml] = useState<string>('')
 47:   const [diffHtmlB, setDiffHtmlB] = useState<string>('')
 48:   const [ats, setAts] = useState<any>(null)
 49:   const [atsB, setAtsB] = useState<any>(null)
 50:   const [activeTab, setActiveTab] = useState('preview')
 51:   const [activeVariant, setActiveVariant] = useState<'A' | 'B'>('A')
 52:   const [authenticity, setAuthenticity] = useState<{ score: number; suggestions: string[] } | null>(null)
 53:   const [authenticityB, setAuthenticityB] = useState<{ score: number; suggestions: string[] } | null>(null)
 54:   const [tone, setTone] = useState<'professional'|'enthusiastic'|'concise'>('professional')
 55:   const [autoTone, setAutoTone] = useState<boolean>(false)
 56:   const [generateVariantB, setGenerateVariantB] = useState<boolean>(true)
 57:   const [overrideText, setOverrideText] = useState<string>(()=>{ try { return localStorage.getItem('resume:override') || '' } catch { return '' } })
 58:   const [templateId, setTemplateId] = useState<string>(()=>{ try { return localStorage.getItem('resume:template') || 'classic' } catch { return 'classic' } })
 59:   const [styleHumanize, setStyleHumanize] = useState<boolean>(true)
 60:   const [styleTone, setStyleTone] = useState<'professional'|'enthusiastic'|'concise'>(tone)
 61:   const [availableTemplates, setAvailableTemplates] = useState<Array<{ id: string; name: string }>>([])
 62:   const [liveHighlights, setLiveHighlights] = useState<boolean>(false)
 63:   const [highlighted, setHighlighted] = useState<string>('')
 64: 
 65:   useEffect(() => {
 66:     ;(async () => {
 67:       try {
 68:         const r = await fetch('/api/resume/templates')
 69:         if (r.ok) {
 70:           const j = await r.json()
 71:           setAvailableTemplates((j.templates || []).map((t: any)=>({ id: t.id, name: t.name })))
 72:         }
 73:       } catch {}
 74:     })()
 75:   }, [])
 76: 
 77:   // Live keyword coverage highlights in override editor
 78:   useEffect(() => {
 79:     if (!liveHighlights) return
 80:     try {
 81:       const kws = (jobAnalysis?.keywords || []).slice(0, 30).map(k => k.toLowerCase())
 82:       const text = (overrideText && overrideText.length > 30 ? overrideText : resume.extractedText || '')
 83:       if (!text) { setHighlighted(''); return }
 84:       const safe = text.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
 85:       let html = safe
 86:       for (const kw of kws) {
 87:         const re = new RegExp(`(\\b${kw.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b)`, 'gi')
 88:         html = html.replace(re, '<mark class="bg-green-200">$1</mark>')
 89:       }
 90:       setHighlighted(html)
 91:     } catch { setHighlighted('') }
 92:   }, [liveHighlights, overrideText, resume.extractedText, jobAnalysis])
 93: 
 94:   const handleCustomize = async () => {
 95:     setIsCustomizing(true)
 96:     setCustomizationProgress(0)
 97:     setError(null)
 98: 
 99:     try {
100:       if (autoTone) {
101:         try {
102:           const stored = localStorage.getItem('analyze:psychology')
103:           if (stored) {
104:             const pj = JSON.parse(stored)
105:             if (pj?.tone) {
106:               const normalized = String(pj.tone).toLowerCase()
107:               if (normalized.includes('enthusias')) setTone('enthusiastic')
108:               else if (normalized.includes('concise') || normalized.includes('direct')) setTone('concise')
109:               else setTone('professional')
110:             }
111:           }
112:         } catch {}
113:       }
114:       const progressInterval = setInterval(() => {
115:         setCustomizationProgress(prev => Math.min(prev + 15, 88))
116:       }, 300)
117: 
118:       let psychology: any | undefined
119:       try { const stored = localStorage.getItem('analyze:psychology'); if (stored) psychology = JSON.parse(stored) } catch {}
120: 
121:       const requestPayload = (t: 'professional'|'enthusiastic'|'concise') => ({
122:         resumeId: resume._id,
123:         jobDescription: `Title: ${jobAnalysis.analysis.jobTitle}\nCompany: ${jobAnalysis.analysis.companyName}\n\nRequirements: ${jobAnalysis.analysis.keyRequirements.join(', ')}\nSkills: ${jobAnalysis.analysis.preferredSkills.join(', ')}\nResponsibilities: ${jobAnalysis.analysis.responsibilities.join(', ')}\nCulture: ${jobAnalysis.analysis.companyCulture.join(', ')}`,
124:         jobTitle: jobAnalysis.analysis.jobTitle,
125:         companyName: jobAnalysis.analysis.companyName,
126:         tone: t,
127:         overrideResumeText: overrideText && overrideText.length > 50 ? overrideText : undefined,
128:         psychology,
129:         style: { humanize: styleHumanize, tone: styleTone },
130:         templateId
131:       })
132: 
133:       // Variant A
134:       const resA = await fetch('/api/resume/customize', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(requestPayload(tone)) })
135:       if (!resA.ok) { const e = await resA.json().catch(()=>({})); throw new Error((e as any).error || 'Customization failed') }
136:       const dataA = await resA.json()
137:       setCustomizedResult(dataA)
138:       onCustomizationComplete(dataA.customizedResume)
139: 
140:       // Diff A
141:       try {
142:         const beforeText = (dataA.originalResumeText || resume.extractedText || '') as string
143:         const afterText = dataA.customizedResume.customizedText as string
144:         const beforeTokens = beforeText.split(/\s+/)
145:         const afterTokens = afterText.split(/\s+/)
146:         const pieces: string[] = []
147:         let ai = 0, bi = 0
148:         while (ai < afterTokens.length && bi < beforeTokens.length) {
149:           if (afterTokens[ai] === beforeTokens[bi]) { pieces.push(afterTokens[ai]); ai++; bi++ } else {
150:             const start = ai
151:             let window = 0
152:             while (ai < afterTokens.length && window < 20 && afterTokens[ai] !== beforeTokens[bi]) { ai++; window++ }
153:             const added = afterTokens.slice(start, ai).join(' ')
154:             if (added) pieces.push(`<mark class="bg-yellow-200">${added}</mark>`) 
155:           }
156:         }
157:         if (ai < afterTokens.length) { pieces.push(`<mark class=\"bg-yellow-200\">${afterTokens.slice(ai).join(' ')}</mark>`) }
158:         setDiffHtml(pieces.join(' '))
159:       } catch {}
160: 
161:       // ATS A
162:       try {
163:         const resp = await fetch('/api/insights/ats/score', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ resumeText: dataA.customizedResume.customizedText, jobAnalysis }) })
164:         if (resp.ok) { const j = await resp.json(); setAts(j.ats) }
165:         else {
166:           const reqId = resp.headers.get('x-request-id') || ''
167:           if (resp.status === 429) toast.error('ATS scoring rate limited' + (reqId ? ` (Ref: ${reqId})` : ''))
168:         }
169:       } catch {}
170: 
171:       // Authenticity A
172:       try {
173:         const ar = await fetch('/api/insights/authenticity', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ originalText: resume.extractedText, generatedText: dataA.customizedResume.customizedText }) })
174:         if (ar.ok) { const aj = await ar.json(); setAuthenticity(aj.authenticity) }
175:       } catch {}
176: 
177:       // Variant B (optional)
178:       if (generateVariantB) {
179:         const altTone: 'professional'|'enthusiastic'|'concise' = tone === 'professional' ? 'concise' : 'professional'
180:         const resB = await fetch('/api/resume/customize', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(requestPayload(altTone)) })
181:         if (resB.ok) {
182:           const dataB = await resB.json()
183:           setCustomizedResultB(dataB)
184:           // Diff B
185:           try {
186:             const beforeText = (dataB.originalResumeText || resume.extractedText || '') as string
187:             const afterText = dataB.customizedResume.customizedText as string
188:             const beforeTokens = beforeText.split(/\s+/)
189:             const afterTokens = afterText.split(/\s+/)
190:             const piecesB: string[] = []
191:             let ai = 0, bi = 0
192:             while (ai < afterTokens.length && bi < beforeTokens.length) {
193:               if (afterTokens[ai] === beforeTokens[bi]) { piecesB.push(afterTokens[ai]); ai++; bi++ } else {
194:                 const start = ai
195:                 let window = 0
196:                 while (ai < afterTokens.length && window < 20 && afterTokens[ai] !== beforeTokens[bi]) { ai++; window++ }
197:                 const added = afterTokens.slice(start, ai).join(' ')
198:                 if (added) piecesB.push(`<mark class=\"bg-yellow-200\">${added}</mark>`) 
199:               }
200:             }
201:             if (ai < afterTokens.length) { piecesB.push(`<mark class=\"bg-yellow-200\">${afterTokens.slice(ai).join(' ')}</mark>`) }
202:             setDiffHtmlB(piecesB.join(' '))
203:           } catch {}
204:           // ATS B
205:           try {
206:             const respB = await fetch('/api/insights/ats/score', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ resumeText: dataB.customizedResume.customizedText, jobAnalysis }) })
207:             if (respB.ok) { const j = await respB.json(); setAtsB(j.ats) }
208:           } catch {}
209:           // Authenticity B
210:           try {
211:             const arB = await fetch('/api/insights/authenticity', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ originalText: resume.extractedText, generatedText: dataB.customizedResume.customizedText }) })
212:             if (arB.ok) { const ajB = await arB.json(); setAuthenticityB(ajB.authenticity) }
213:           } catch {}
214:         }
215:       }
216: 
217:       clearInterval(progressInterval)
218:       setCustomizationProgress(100)
219:       try { if (overrideText) localStorage.setItem('resume:override', overrideText) } catch {}
220:       toast.success('Resume customized successfully!')
221: 
222:     } catch (error) {
223:       console.error('Customization error:', error)
224:       const errorMessage = error instanceof Error ? error.message : 'Customization failed'
225:       setError(errorMessage)
226:       onError(errorMessage)
227:       toast.error(errorMessage)
228:     } finally {
229:       setIsCustomizing(false)
230:       setTimeout(() => setCustomizationProgress(0), 1000)
231:     }
232:   }
233: 
234:   const activeData = activeVariant === 'A' ? customizedResult : customizedResultB
235:   const activeAts = activeVariant === 'A' ? ats : atsB
236:   const activeDiff = activeVariant === 'A' ? diffHtml : diffHtmlB
237:   const activeAuth = activeVariant === 'A' ? authenticity : authenticityB
238: 
239:   const downloadResume = async () => {
240:     const data = activeData
241:     if (!data) return
242:     const safeUser = (resume.userName || '').replace(/\s+/g,'_')
243:     const safeCompany = (jobAnalysis.analysis.companyName || 'Company').replace(/\s+/g,'_')
244:     const fileName = `${safeUser ? safeUser + '_' : ''}Resume_${safeCompany}`
245:     try {
246:       const esc = (s: string) => s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
247:       const lines = (data.customizedResume.customizedText || '').split(/\r?\n/)
248:       const headingRe = /^(Professional Summary|Core Competencies|Skills|Professional Experience|Experience|Education|Certifications)\s*$/i
249:       const parts: string[] = []
250:       for (const line of lines) {
251:         if (!line.trim()) { parts.push('<div class="sp">&nbsp;</div>'); continue }
252:         if (headingRe.test(line.trim())) {
253:           parts.push(`<div class="section"><strong>${esc(line.trim())}</strong></div>`)
254:           continue
255:         }
256:         if (line.trim().startsWith('• ')) {
257:           parts.push(`<div class="bullet">${esc(line.trim())}</div>`)
258:           continue
259:         }
260:         parts.push(`<div class="line">${esc(line)}</div>`)
261:       }
262:       const html = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>${fileName}</title><style>
263:         body{font-family:Arial,Segoe UI,Helvetica,sans-serif;font-size:11pt;line-height:1.55;color:#111;max-width:8.5in;margin:0 auto;padding:0.7in;background:#fff}
264:         .section{margin-top:14px;margin-bottom:4px;font-size:11.2pt}
265:         .bullet{margin-left:14px;text-indent:-10px;padding-left:10px}
266:         .line{white-space:pre-wrap}
267:         .sp{height:6px}
268:       </style></head><body>${parts.join('')}</body></html>`
269:       const resp = await fetch('/api/resume/export/pdf', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ html, filename: `${fileName}.pdf` }) })
270:       if (resp.ok) {
271:         const blob = await resp.blob()
272:         const url = URL.createObjectURL(blob)
273:         const a = document.createElement('a')
274:         a.href = url
275:         a.download = `${fileName}.pdf`
276:         document.body.appendChild(a)
277:         a.click()
278:         document.body.removeChild(a)
279:         URL.revokeObjectURL(url)
280:         toast.success('Resume PDF downloaded!')
281:       } else {
282:         // Fallback to .txt
283:         const blob = new Blob([data.customizedResume.customizedText], { type: 'text/plain' })
284:         const url = URL.createObjectURL(blob)
285:         const a = document.createElement('a')
286:         a.href = url
287:         a.download = `${fileName}.txt`
288:         document.body.appendChild(a)
289:         a.click()
290:         document.body.removeChild(a)
291:         URL.revokeObjectURL(url)
292:         toast.success('Resume downloaded!')
293:       }
294:     } catch {
295:       const blob = new Blob([data.customizedResume.customizedText], { type: 'text/plain' })
296:       const url = URL.createObjectURL(blob)
297:       const a = document.createElement('a')
298:       a.href = url
299:       a.download = `${fileName}.txt`
300:       document.body.appendChild(a)
301:       a.click()
302:       document.body.removeChild(a)
303:       URL.revokeObjectURL(url)
304:       toast.success('Resume downloaded!')
305:     }
306:   }
307: 
308:   return (
309:     <div className="space-y-6">
310:       {/* Customization Controls */}
311:       <Card>
312:         <CardHeader>
313:           <CardTitle className="flex items-center gap-2">
314:             <Wand2 className="h-5 w-5" />
315:             Resume Customization
316:           </CardTitle>
317:           <CardDescription>
318:             AI-powered resume tailoring based on job requirements and company insights
319:           </CardDescription>
320:         </CardHeader>
321:         <CardContent className="space-y-4">
322:           <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
323:             <div className="space-y-1">
324:               <p className="text-sm font-medium text-muted-foreground">Tone guidance</p>
325:               <Select value={tone} onValueChange={(v)=>setTone(v as any)}>
326:                 <SelectTrigger><SelectValue placeholder="Select tone" /></SelectTrigger>
327:                 <SelectContent>
328:                   <SelectItem value="professional">Professional</SelectItem>
329:                   <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
330:                   <SelectItem value="concise">Concise</SelectItem>
331:                 </SelectContent>
332:               </Select>
333:             </div>
334:             <div className="space-y-1">
335:               <p className="text-sm font-medium text-muted-foreground">Template</p>
336:               <Select value={templateId} onValueChange={(v)=>{ setTemplateId(v); try { localStorage.setItem('resume:template', v) } catch {} }}>
337:                 <SelectTrigger><SelectValue placeholder="Select template" /></SelectTrigger>
338:                 <SelectContent>
339:                   {(availableTemplates.length ? availableTemplates : [
340:                     { id: 'classic', name: 'Classic (ATS Safe)' },
341:                     { id: 'modern', name: 'Modern (ATS Safe)' },
342:                     { id: 'compact', name: 'Compact (ATS Safe)' },
343:                   ]).map(t => (
344:                     <SelectItem key={t.id} value={t.id}>{t.name}</SelectItem>
345:                   ))}
346:                 </SelectContent>
347:               </Select>
348:             </div>
349:             <div className="space-y-1">
350:               <p className="text-sm font-medium text-muted-foreground">Auto-tone from Psychology</p>
351:               <button type="button" onClick={()=>setAutoTone(v=>!v)} className={`px-3 py-2 border rounded text-sm ${autoTone ? 'bg-green-500/10 border-green-500' : 'bg-card'}`}>{autoTone ? 'Enabled' : 'Disabled'}</button>
352:               {autoTone && (
353:                 <p className="text-xs text-muted-foreground">We’ll use the Analyze page’s tone if available</p>
354:               )}
355:             </div>
356:             <div className="space-y-1">
357:               <p className="text-sm font-medium text-muted-foreground">Humanize Style</p>
358:               <button type="button" onClick={()=>setStyleHumanize(v=>!v)} className={`px-3 py-2 border rounded text-sm ${styleHumanize ? 'bg-green-500/10 border-green-500' : 'bg-card'}`}>{styleHumanize ? 'Enabled' : 'Disabled'}</button>
359:               <p className="text-xs text-muted-foreground">Reduce AI detectability patterns</p>
360:             </div>
361:           <div className="space-y-1">
362:             <p className="text-sm font-medium text-muted-foreground">Live Highlights</p>
363:             <button type="button" onClick={()=>setLiveHighlights(v=>!v)} className={`px-3 py-2 border rounded text-sm ${liveHighlights ? 'bg-yellow-500/10 border-yellow-500' : 'bg-card'}`}>{liveHighlights ? 'On' : 'Off'}</button>
364:             <p className="text-xs text-muted-foreground">Highlight covered keywords in the editor</p>
365:           </div>
366:             <div className="space-y-1">
367:               <p className="text-sm font-medium text-muted-foreground">Generate A/B Variants</p>
368:               <button type="button" onClick={()=>setGenerateVariantB(v=>!v)} className={`px-3 py-2 border rounded text-sm ${generateVariantB ? 'bg-blue-500/10 border-blue-500' : 'bg-card'}`}>{generateVariantB ? 'A & B' : 'A only'}</button>
369:               <p className="text-xs text-muted-foreground">Two tailored variants for side-by-side comparison</p>
370:             </div>
371:           </div>
372: 
373:           <div className="space-y-1">
374:             <p className="text-sm font-medium text-muted-foreground">Optional: Override Resume Text</p>
375:             {!liveHighlights ? (
376:               <Textarea rows={6} placeholder="Paste clean resume text to override extraction (optional)" value={overrideText} onChange={(e)=>setOverrideText(e.target.value)} />
377:             ) : (
378:               <div className="border rounded p-3 bg-background text-foreground text-sm max-h-48 overflow-y-auto" dangerouslySetInnerHTML={{ __html: highlighted || (overrideText || resume.extractedText || '').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;') }} />
379:             )}
380:             <p className="text-xs text-muted-foreground">Use this if the PDF text extraction contained gibberish. Minimum 50 characters.</p>
381:           </div>
382:           {/* Job Match Summary */}
383:           <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
384:             <Card className="p-4">
385:               <div className="flex items-center gap-3">
386:                 <Target className="h-8 w-8 text-blue-600" />
387:                 <div>
388:                   <p className="text-sm font-medium text-muted-foreground">Target Job</p>
389:                   <p className="text-lg font-semibold">{jobAnalysis.analysis.jobTitle}</p>
390:                   <p className="text-sm text-muted-foreground">{jobAnalysis.analysis.companyName}</p>
391:                 </div>
392:               </div>
393:             </Card>
394: 
395:             <Card className="p-4">
396:               <div className="flex items-center gap-3">
397:                 <TrendingUp className="h-8 w-8 text-green-600" />
398:                 <div>
399:                   <p className="text-sm font-medium text-muted-foreground">Keywords Found</p>
400:                   <p className="text-lg font-semibold">{jobAnalysis.keywords.length}</p>
401:                   <p className="text-sm text-muted-foreground">relevant terms</p>
402:                 </div>
403:               </div>
404:             </Card>
405: 
406:             <Card className="p-4">
407:               <div className="flex items-center gap-3">
408:                 <Lightbulb className="h-8 w-8 text-purple-600" />
409:                 <div>
410:                   <p className="text-sm font-medium text-muted-foreground">Experience Level</p>
411:                   <p className="text-lg font-semibold">{jobAnalysis.analysis.experienceLevel}</p>
412:                   <p className="text-sm text-muted-foreground">required</p>
413:                 </div>
414:               </div>
415:             </Card>
416:           </div>
417: 
418:           {error && (
419:             <Alert variant="destructive">
420:               <AlertCircle className="h-4 w-4" />
421:               <AlertDescription>{error}</AlertDescription>
422:             </Alert>
423:           )}
424: 
425:           {isCustomizing && (
426:             <div className="space-y-2">
427:               <div className="flex items-center justify-between">
428:                 <span className="text-sm font-medium">Customizing resume...</span>
429:                 <span className="text-sm text-muted-foreground">{customizationProgress}%</span>
430:               </div>
431:               <Progress value={customizationProgress} className="w-full" />
432:               <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
433:                 <Skeleton className="h-28" />
434:                 <Skeleton className="h-28" />
435:                 <Skeleton className="h-40 md:col-span-2" />
436:               </div>
437:             </div>
438:           )}
439: 
440:           {!customizedResult && (
441:             <Button onClick={handleCustomize} disabled={isCustomizing} size="lg" className="w-full">
442:               {isCustomizing ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Customizing Resume...</>) : (<><Wand2 className="mr-2 h-4 w-4" /> Customize Resume with AI</>) }
443:             </Button>
444:           )}
445:         </CardContent>
446:       </Card>
447: 
448:       {customizedResult && (
449:         <Card>
450:           <CardHeader>
451:             <div className="flex items-center justify-between">
452:               <div>
453:                 <CardTitle className="flex items-center gap-2">
454:                   <CheckCircle className="h-5 w-5 text-green-600" />
455:                   Customization Complete
456:                 </CardTitle>
457:                 <CardDescription>
458:                   Your resume has been optimized for the {jobAnalysis.analysis.jobTitle} position at {jobAnalysis.analysis.companyName}
459:                 </CardDescription>
460:               </div>
461:               <div className="flex gap-2">
462:                 <Button variant="outline" onClick={downloadResume}>
463:                   <Download className="mr-2 h-4 w-4" />
464:                   Download
465:                 </Button>
466:                 <Button variant="outline" onClick={async ()=>{
467:                   try {
468:                     const appId = customizedResult?.jobApplication?._id || customizedResultB?.jobApplication?._id
469:                     if (!appId) { toast.error('Missing application id'); return }
470:                     const resp = await fetch(`/api/applications/${appId}/export/pack`)
471:                     if (resp.ok) {
472:                       const blob = await resp.blob(); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `${jobAnalysis.analysis.companyName}_${jobAnalysis.analysis.jobTitle}_ApplicationPack.pdf`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); toast.success('Pack downloaded')
473:                     } else {
474:                       toast.error('Failed to export pack')
475:                     }
476:                   } catch { toast.error('Failed to export pack') }
477:                 }}>
478:                   <Download className="mr-2 h-4 w-4" />
479:                   Generate Pack
480:                 </Button>
481:                 <Button variant="outline" onClick={async ()=>{
482:                   try {
483:                     const appId = customizedResult?.jobApplication?._id || customizedResultB?.jobApplication?._id
484:                     if (!appId) { toast.error('Missing application id'); return }
485:                     const resp = await fetch(`/api/applications/${appId}/export/zip`)
486:                     if (resp.ok) {
487:                       const blob = await resp.blob(); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `${jobAnalysis.analysis.companyName}_${jobAnalysis.analysis.jobTitle}_ApplicationPack.bundle`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); toast.success('Bundle downloaded')
488:                     } else { toast.error('Failed to export bundle') }
489:                   } catch { toast.error('Failed to export bundle') }
490:                 }}>
491:                   <Download className="mr-2 h-4 w-4" />
492:                   Download Bundle
493:                 </Button>
494:               </div>
495:             </div>
496:           </CardHeader>
497:           <CardContent>
498:             <Tabs value={activeTab} onValueChange={setActiveTab}>
499:               <TabsList className="grid w-full grid-cols-3">
500:                 <TabsTrigger value="preview">Preview</TabsTrigger>
501:                 <TabsTrigger value="improvements">Improvements</TabsTrigger>
502:                 <TabsTrigger value="suggestions">Suggestions</TabsTrigger>
503:               </TabsList>
504: 
505:               <TabsContent value="preview" className="space-y-4">
506:                 <div className="bg-muted rounded-lg p-4">
507:                   <div className="flex items-center justify-between mb-4">
508:                     <h4 className="font-medium text-foreground">Customized Resume</h4>
509:                     <div className="flex items-center gap-2">
510:                       <Button size="sm" variant={activeVariant === 'A' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('A')}>Variant A</Button>
511:                       <Button size="sm" variant={activeVariant === 'B' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('B')} disabled={!customizedResultB}>Variant B</Button>
512:                       <Badge variant="secondary">{(activeData?.matchScore ?? 0)}% Match Score</Badge>
513:                     </div>
514:                   </div>
515:                   <div className="text-sm text-foreground whitespace-pre-wrap max-h-96 overflow-y-auto border rounded p-4 bg-background">
516:                     {activeData?.customizedResume?.customizedText}
517:                   </div>
518:                   {activeAuth && (
519:                     <div className="mt-3 text-sm text-foreground">
520:                       <div className="font-medium">Authenticity Score: {activeAuth.score}/100</div>
521:                       {activeAuth.suggestions.length > 0 && (
522:                         <ul className="list-disc ml-5 mt-1">
523:                           {activeAuth.suggestions.slice(0,3).map((s, i)=>(<li key={i}>{s}</li>))}
524:                         </ul>
525:                       )}
526:                     </div>
527:                   )}
528:                 </div>
529: 
530:                 <div className="bg-card rounded-lg p-4 border border-border">
531:                   <div className="flex items-center justify-between mb-2">
532:                     <h4 className="font-medium text-foreground">Changes Highlighted</h4>
533:                     <div className="flex items-center gap-2">
534:                       <Button size="sm" variant={activeVariant === 'A' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('A')}>Variant A</Button>
535:                       <Button size="sm" variant={activeVariant === 'B' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('B')} disabled={!customizedResultB}>Variant B</Button>
536:                     </div>
537:                   </div>
538:                   <div className="text-sm text-foreground whitespace-pre-wrap max-h-96 overflow-y-auto border border-border rounded p-4 bg-background" dangerouslySetInnerHTML={{ __html: activeDiff || activeData?.customizedResume?.customizedText?.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;') || '' }} />
539:                   <div className="text-xs text-muted-foreground mt-2">New or significantly changed text is highlighted.</div>
540:                 </div>
541: 
542:                 {activeAts && (
543:                   <div className="bg-card rounded-lg p-4 border border-border">
544:                     <div className="flex items-center justify-between mb-2">
545:                       <h4 className="font-medium text-foreground">ATS Optimization</h4>
546:                       <Badge variant="secondary">{activeAts.score}/100</Badge>
547:                     </div>
548:                     <div className="text-xs text-foreground">Missing keywords:</div>
549:                     <div className="mt-1 flex flex-wrap gap-2">
550:                       {activeAts.missingKeywords.slice(0, 20).map((k: string, i: number) => (
551:                         <Badge key={i} variant="outline">{k}</Badge>
552:                       ))}
553:                     </div>
554:                     {activeAts.suggestions?.length > 0 && (
555:                       <ul className="list-disc ml-5 mt-2 text-sm text-foreground">
556:                         {activeAts.suggestions.map((s: string, i: number) => (<li key={i}>{s}</li>))}
557:                       </ul>
558:                     )}
559:                   </div>
560:                 )}
561:               </TabsContent>
562: 
563:               <TabsContent value="improvements" className="space-y-4">
564:                 <div className="space-y-3">
565:                   <h4 className="font-medium text-foreground">Applied Improvements ({activeVariant})</h4>
566:                   <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
567:                     {(activeData?.improvements || []).map((improvement: string, index: number) => (
568:                       <div key={index} className="flex items-start gap-3 p-3 bg-green-50 rounded-lg">
569:                         <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
570:                         <span className="text-sm text-green-800">{improvement}</span>
571:                       </div>
572:                     ))}
573:                   </div>
574:                 </div>
575:               </TabsContent>
576: 
577:               <TabsContent value="suggestions" className="space-y-4">
578:                 <div className="space-y-3">
579:                   <h4 className="font-medium text-foreground">Additional Suggestions ({activeVariant})</h4>
580:                   <div className="space-y-3">
581:                     {(activeData?.suggestions || []).map((suggestion: string, index: number) => (
582:                       <div key={index} className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg">
583:                         <Lightbulb className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
584:                         <span className="text-sm text-blue-800">{suggestion}</span>
585:                       </div>
586:                     ))}
587:                   </div>
588:                 </div>
589:               </TabsContent>
590:             </Tabs>
591:           </CardContent>
592:         </Card>
593:       )}
594: 
595:       {customizedResult && (
596:         <Card>
597:           <CardHeader>
598:             <CardTitle className="flex items-center gap-2">
599:               <Eye className="h-5 w-5" />
600:               Before vs After Comparison
601:             </CardTitle>
602:             <CardDescription>
603:               See how your resume has been optimized
604:             </CardDescription>
605:           </CardHeader>
606:           <CardContent>
607:             <div className="flex items-center gap-2 mb-3">
608:               <Button size="sm" variant={activeVariant === 'A' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('A')}>Variant A</Button>
609:               <Button size="sm" variant={activeVariant === 'B' ? 'secondary' : 'outline'} onClick={()=>setActiveVariant('B')} disabled={!customizedResultB}>Variant B</Button>
610:             </div>
611:             <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
612:               <div className="space-y-3">
613:                 <h4 className="font-medium text-foreground flex items-center gap-2">
614:                   <FileText className="h-4 w-4" />
615:                   Original Resume
616:                 </h4>
617:                 <div className="text-sm text-foreground whitespace-pre-wrap max-h-64 overflow-y-auto border rounded p-3 bg-red-500/10">
618:                   {(customizedResult.originalResumeText || resume.extractedText || '').substring(0, 1000)}{(customizedResult.originalResumeText || resume.extractedText || '').length > 1000 ? '...' : ''}
619:                 </div>
620:               </div>
621: 
622:               <div className="space-y-3">
623:                 <h4 className="font-medium text-foreground flex items-center gap-2">
624:                   <Wand2 className="h-4 w-4" />
625:                   Customized Resume (Variant {activeVariant})
626:                 </h4>
627:                 <div className="text-sm text-foreground whitespace-pre-wrap max-h-64 overflow-y-auto border rounded p-3 bg-green-500/10">
628:                   {(activeData?.customizedResume?.customizedText || '').substring(0, 1000)}{(activeData?.customizedResume?.customizedText || '').length > 1000 ? '...' : ''}
629:                 </div>
630:               </div>
631:             </div>
632:           </CardContent>
633:         </Card>
634:       )}
635:     </div>
636:   )
637: }
</file>

<file path="src/components/resume-templates/BaseTemplate.tsx">
  1: import React from 'react'
  2: import type { Resume } from '@/lib/resume/parser'
  3: import { formatDate, formatDateRange } from '@/lib/resume/parser'
  4: 
  5: export interface TemplateProps {
  6:   resume: Resume
  7:   variant: 'A' | 'B'
  8:   config?: TemplateConfig
  9: }
 10: 
 11: export interface TemplateConfig {
 12:   colorScheme?: 'blue' | 'green' | 'purple' | 'black' | 'red'
 13:   fontSize?: 'small' | 'medium' | 'large'
 14:   margins?: 'narrow' | 'normal' | 'wide'
 15:   sectionSpacing?: 'compact' | 'normal' | 'spacious'
 16: }
 17: 
 18: export const BaseTemplate: React.FC<TemplateProps> = ({ resume, config }) => {
 19:   // Validation
 20:   if (!resume || !resume.personalInfo) {
 21:     return (
 22:       <div style={{ padding: '40px', color: 'red', fontFamily: 'Arial, sans-serif' }}>
 23:         ⚠️ Invalid resume data
 24:       </div>
 25:     )
 26:   }
 27: 
 28:   const colors = {
 29:     blue: '#2563eb',
 30:     green: '#059669',
 31:     purple: '#7c3aed',
 32:     black: '#1a1a1a',
 33:     red: '#dc2626'
 34:   }
 35:   
 36:   const primaryColor = colors[config?.colorScheme || 'blue']
 37:   const baseFontSize = config?.fontSize === 'small' ? 10 : config?.fontSize === 'large' ? 12 : 11
 38:   const margin = config?.margins === 'narrow' ? '0.5in' : config?.margins === 'wide' ? '1in' : '0.75in'
 39:   
 40:   // ALL INLINE STYLES - NO TAILWIND
 41:   const styles = {
 42:     page: {
 43:       backgroundColor: '#ffffff',
 44:       color: '#1a1a1a',
 45:       maxWidth: '8.5in',
 46:       margin: '0 auto',
 47:       padding: margin,
 48:       fontFamily: 'Georgia, "Times New Roman", serif',
 49:       fontSize: `${baseFontSize}pt`,
 50:       lineHeight: '1.5',
 51:       boxSizing: 'border-box' as const
 52:     },
 53:     header: {
 54:       marginBottom: '20pt',
 55:       paddingBottom: '12pt',
 56:       borderBottom: `2pt solid ${primaryColor}` 
 57:     },
 58:     name: {
 59:       fontSize: '26pt',
 60:       fontWeight: 'bold' as const,
 61:       color: primaryColor,
 62:       marginBottom: '4pt',
 63:       marginTop: 0
 64:     },
 65:     contactLine: {
 66:       fontSize: '10pt',
 67:       color: '#4a5568',
 68:       marginBottom: 0
 69:     },
 70:     section: {
 71:       marginBottom: '18pt',
 72:       pageBreakInside: 'avoid' as const
 73:     },
 74:     sectionHeader: {
 75:       fontSize: '13pt',
 76:       fontWeight: 'bold' as const,
 77:       color: primaryColor,
 78:       textTransform: 'uppercase' as const,
 79:       letterSpacing: '0.5pt',
 80:       marginBottom: '10pt',
 81:       marginTop: 0,
 82:       borderBottom: `1pt solid ${primaryColor}`,
 83:       paddingBottom: '4pt'
 84:     },
 85:     summaryText: {
 86:       fontSize: `${baseFontSize}pt`,
 87:       color: '#2d3748',
 88:       lineHeight: '1.6',
 89:       margin: 0
 90:     },
 91:     experienceItem: {
 92:       marginBottom: '14pt',
 93:       pageBreakInside: 'avoid' as const
 94:     },
 95:     experienceHeader: {
 96:       display: 'flex',
 97:       justifyContent: 'space-between',
 98:       alignItems: 'baseline',
 99:       marginBottom: '4pt'
100:     },
101:     jobTitle: {
102:       fontSize: '12pt',
103:       fontWeight: 'bold' as const,
104:       color: '#1a1a1a',
105:       margin: 0
106:     },
107:     dateRange: {
108:       fontSize: '10pt',
109:       color: '#718096',
110:       fontStyle: 'italic' as const
111:     },
112:     companyLocation: {
113:       fontSize: '10pt',
114:       color: '#4a5568',
115:       fontStyle: 'italic' as const,
116:       marginBottom: '6pt'
117:     },
118:     description: {
119:       fontSize: `${baseFontSize}pt`,
120:       color: '#2d3748',
121:       marginBottom: '6pt',
122:       marginTop: 0
123:     },
124:     achievementList: {
125:       marginLeft: '20pt',
126:       marginTop: '4pt',
127:       marginBottom: 0,
128:       paddingLeft: 0
129:     },
130:     achievementItem: {
131:       fontSize: `${baseFontSize}pt`,
132:       color: '#2d3748',
133:       marginBottom: '4pt',
134:       lineHeight: '1.5'
135:     }
136:   }
137: 
138:   // Build clean contact line (NO EMOJIS)
139:   const contactParts: string[] = []
140:   const { location, phone, email } = resume.personalInfo
141:   if (location) contactParts.push(location)
142:   if (phone) contactParts.push(phone)
143:   if (email) contactParts.push(email)
144: 
145:   return (
146:     <div style={styles.page}>
147:       {/* Header */}
148:       <header style={styles.header}>
149:         <h1 style={styles.name}>{resume.personalInfo.name}</h1>
150:         <div style={styles.contactLine}>
151:           {contactParts.join(' | ')}
152:         </div>
153:       </header>
154: 
155:       {/* Summary */}
156:       {resume.summary && (
157:         <section style={styles.section}>
158:           <h2 style={styles.sectionHeader}>Professional Summary</h2>
159:           <p style={styles.summaryText}>{resume.summary}</p>
160:         </section>
161:       )}
162: 
163:       {/* Experience */}
164:       {resume.experience && resume.experience.length > 0 && (
165:         <section style={styles.section}>
166:           <h2 style={styles.sectionHeader}>Professional Experience</h2>
167:           {resume.experience.map((exp, i) => (
168:             <div key={i} style={styles.experienceItem}>
169:               <div style={styles.experienceHeader}>
170:                 <h3 style={styles.jobTitle}>{exp.title}</h3>
171:                 <span style={styles.dateRange}>{formatDateRange(exp)}</span>
172:               </div>
173:               <div style={styles.companyLocation}>
174:                 {exp.company}{exp.location ? ` | ${exp.location}` : ''}
175:               </div>
176:               {exp.description && (
177:                 <p style={styles.description}>{exp.description}</p>
178:               )}
179:               {exp.achievements && exp.achievements.length > 0 && (
180:                 <ul style={styles.achievementList}>
181:                   {exp.achievements.map((achievement, j) => (
182:                     <li key={j} style={styles.achievementItem}>{achievement}</li>
183:                   ))}
184:                 </ul>
185:               )}
186:             </div>
187:           ))}
188:         </section>
189:       )}
190: 
191:       {/* Skills */}
192:       {resume.skills && (resume.skills.technical?.length > 0 || resume.skills.soft?.length > 0) && (
193:         <section style={styles.section}>
194:           <h2 style={styles.sectionHeader}>Skills</h2>
195:           {resume.skills.technical && resume.skills.technical.length > 0 && (
196:             <div style={{ marginBottom: '6pt' }}>
197:               <span style={{ fontWeight: 'bold', fontSize: `${baseFontSize}pt` }}>Technical: </span>
198:               <span style={{ fontSize: `${baseFontSize}pt`, color: '#2d3748' }}>
199:                 {resume.skills.technical.join(' • ')}
200:               </span>
201:             </div>
202:           )}
203:           {resume.skills.soft && resume.skills.soft.length > 0 && (
204:             <div>
205:               <span style={{ fontWeight: 'bold', fontSize: `${baseFontSize}pt` }}>Professional: </span>
206:               <span style={{ fontSize: `${baseFontSize}pt`, color: '#2d3748' }}>
207:                 {resume.skills.soft.join(' • ')}
208:               </span>
209:             </div>
210:           )}
211:         </section>
212:       )}
213: 
214:       {/* Education */}
215:       {resume.education && resume.education.length > 0 && (
216:         <section style={styles.section}>
217:           <h2 style={styles.sectionHeader}>Education</h2>
218:           {resume.education.map((edu, i) => (
219:             <div key={i} style={{ marginBottom: '12pt' }}>
220:               <div style={styles.experienceHeader}>
221:                 <h3 style={styles.jobTitle}>{edu.degree}</h3>
222:                 <span style={styles.dateRange}>{formatDate(edu.graduationDate)}</span>
223:               </div>
224:               <div style={styles.companyLocation}>
225:                 {edu.institution}{edu.location ? ` | ${edu.location}` : ''}
226:               </div>
227:               {edu.gpa && <div style={{ fontSize: '10pt', color: '#2d3748', marginTop: '2pt' }}>GPA: {edu.gpa}</div>}
228:             </div>
229:           ))}
230:         </section>
231:       )}
232: 
233:       {/* Certifications */}
234:       {resume.skills?.certifications && resume.skills.certifications.length > 0 && (
235:         <section style={styles.section}>
236:           <h2 style={styles.sectionHeader}>Certifications</h2>
237:           {resume.skills.certifications.map((cert, i) => (
238:             <div key={i} style={{ fontSize: `${baseFontSize}pt`, color: '#2d3748', marginBottom: '4pt' }}>
239:               <span style={{ fontWeight: 'bold' }}>{cert.name}</span> | {cert.issuer} | {formatDate(cert.date)}
240:             </div>
241:           ))}
242:         </section>
243:       )}
244: 
245:       {/* Projects */}
246:       {resume.projects && resume.projects.length > 0 && (
247:         <section style={styles.section}>
248:           <h2 style={styles.sectionHeader}>Projects</h2>
249:           {resume.projects.map((project, i) => (
250:             <div key={i} style={styles.experienceItem}>
251:               <h3 style={styles.jobTitle}>{project.name}</h3>
252:               <div style={styles.companyLocation}>{project.technologies.join(', ')}</div>
253:               <p style={styles.description}>{project.description}</p>
254:               {project.achievements && project.achievements.length > 0 && (
255:                 <ul style={styles.achievementList}>
256:                   {project.achievements.map((achievement, j) => (
257:                     <li key={j} style={styles.achievementItem}>{achievement}</li>
258:                   ))}
259:                 </ul>
260:               )}
261:             </div>
262:           ))}
263:         </section>
264:       )}
265:     </div>
266:   )
267: }
</file>

<file path="src/components/resume-templates/index.tsx">
 1: /**
 2:  * Resume Template System
 3:  * Exports all 6 professional resume templates
 4:  */
 5: 
 6: export { BaseTemplate } from './BaseTemplate'
 7: export type { TemplateProps, TemplateConfig } from './BaseTemplate'
 8: 
 9: // Template metadata for UI
10: export const TEMPLATE_METADATA = {
11:   modern: {
12:     id: 'modern',
13:     name: 'Modern',
14:     description: 'Two-column layout with visual timeline',
15:     icon: '🚀',
16:     bestFor: ['Tech', 'Startup', 'Marketing', 'Design'],
17:     features: ['Timeline', 'Skill bars', 'Color accents']
18:   },
19:   professional: {
20:     id: 'professional',
21:     name: 'Professional',
22:     description: 'Traditional single-column format',
23:     icon: '💼',
24:     bestFor: ['Finance', 'Legal', 'Corporate', 'Healthcare'],
25:     features: ['Black & white', 'Formal fonts', 'Conservative']
26:   },
27:   creative: {
28:     id: 'creative',
29:     name: 'Creative',
30:     description: 'Bold, unique design to showcase creativity',
31:     icon: '🎨',
32:     bestFor: ['Design', 'Marketing', 'Media', 'Arts'],
33:     features: ['Asymmetric layout', 'Bold colors', 'Visual elements']
34:   },
35:   tech: {
36:     id: 'tech',
37:     name: 'Tech-Focused',
38:     description: 'Developer-friendly with project highlights',
39:     icon: '💻',
40:     bestFor: ['Software Engineering', 'DevOps', 'Data Science'],
41:     features: ['GitHub integration', 'Code font', 'Project showcase']
42:   },
43:   minimal: {
44:     id: 'minimal',
45:     name: 'Minimal/ATS',
46:     description: 'Plain text, maximum ATS compatibility',
47:     icon: '📄',
48:     bestFor: ['ATS Systems', 'Large Corporations', 'Government'],
49:     features: ['Plain text', 'No graphics', 'ATS-optimized']
50:   },
51:   executive: {
52:     id: 'executive',
53:     name: 'Executive',
54:     description: 'Leadership-focused with metrics emphasis',
55:     icon: '👔',
56:     bestFor: ['C-Suite', 'Director', 'VP', 'Senior Management'],
57:     features: ['Metrics-driven', 'Leadership focus', 'Board positions']
58:   }
59: } as const
60: 
61: export type TemplateId = keyof typeof TEMPLATE_METADATA
</file>

<file path="src/components/theme-toggle.tsx">
 1: 'use client'
 2: 
 3: import { useEffect, useState } from 'react'
 4: import { ThemeManager, ThemeMode } from '@/lib/theme-manager'
 5: 
 6: export function ThemeToggle({ className, fixed = false }: { className?: string; fixed?: boolean }) {
 7:   const [mode, setMode] = useState<ThemeMode>('dark')
 8: 
 9:   useEffect(() => {
10:     ThemeManager.init()
11:     const current = document.documentElement.getAttribute('data-theme') as ThemeMode | null
12:     if (current === 'dark' || current === 'light') setMode(current)
13:   }, [])
14: 
15:   const handleThemeChange = () => {
16:     const next = ThemeManager.toggle()
17:     setMode(next)
18:   }
19: 
20:   const containerClass = fixed ? 'theme-toggle-fixed' : 'relative z-theme-toggle'
21: 
22:   return (
23:     <div className={`${containerClass} ${className || ''}`}>
24:       <button
25:         aria-label="Toggle theme"
26:         className="flex items-center gap-2 px-3 py-2 rounded-lg bg-card/90 backdrop-blur-xl border border-border/50 hover:bg-accent/80 transition-all duration-200 text-sm font-medium"
27:         onClick={handleThemeChange}
28:       >
29:         {mode === 'dark' ? (
30:           <>
31:             <span className="text-lg">☀️</span>
32:             <span className="hidden sm:inline">Light</span>
33:           </>
34:         ) : (
35:           <>
36:             <span className="text-lg">🌙</span>
37:             <span className="hidden sm:inline">Dark</span>
38:           </>
39:         )}
40:       </button>
41:     </div>
42:   )
43: }
</file>

<file path="src/components/ui/alert.tsx">
 1: import * as React from "react"
 2: import { cva, type VariantProps } from "class-variance-authority"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const alertVariants = cva(
 7:   "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
 8:   {
 9:     variants: {
10:       variant: {
11:         default: "bg-background text-foreground",
12:         destructive:
13:           "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
14:       },
15:     },
16:     defaultVariants: {
17:       variant: "default",
18:     },
19:   }
20: )
21: 
22: const Alert = React.forwardRef<
23:   HTMLDivElement,
24:   React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
25: >(({ className, variant, ...props }, ref) => (
26:   <div
27:     ref={ref}
28:     role="alert"
29:     className={cn(alertVariants({ variant }), className)}
30:     {...props}
31:   />
32: ))
33: Alert.displayName = "Alert"
34: 
35: const AlertTitle = React.forwardRef<
36:   HTMLParagraphElement,
37:   React.HTMLAttributes<HTMLHeadingElement>
38: >(({ className, ...props }, ref) => (
39:   <h5
40:     ref={ref}
41:     className={cn("mb-1 font-medium leading-none tracking-tight", className)}
42:     {...props}
43:   />
44: ))
45: AlertTitle.displayName = "AlertTitle"
46: 
47: const AlertDescription = React.forwardRef<
48:   HTMLParagraphElement,
49:   React.HTMLAttributes<HTMLParagraphElement>
50: >(({ className, ...props }, ref) => (
51:   <div
52:     ref={ref}
53:     className={cn("text-sm [&_p]:leading-relaxed", className)}
54:     {...props}
55:   />
56: ))
57: AlertDescription.displayName = "AlertDescription"
58: 
59: export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/avatar.tsx">
 1: import * as React from "react"
 2: import * as AvatarPrimitive from "@radix-ui/react-avatar"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const Avatar = React.forwardRef<
 7:   React.ElementRef<typeof AvatarPrimitive.Root>,
 8:   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
 9: >(({ className, ...props }, ref) => (
10:   <AvatarPrimitive.Root
11:     ref={ref}
12:     className={cn(
13:       "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
14:       className
15:     )}
16:     {...props}
17:   />
18: ))
19: Avatar.displayName = AvatarPrimitive.Root.displayName
20: 
21: const AvatarImage = React.forwardRef<
22:   React.ElementRef<typeof AvatarPrimitive.Image>,
23:   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
24: >(({ className, ...props }, ref) => (
25:   <AvatarPrimitive.Image
26:     ref={ref}
27:     className={cn("aspect-square h-full w-full", className)}
28:     {...props}
29:   />
30: ))
31: AvatarImage.displayName = AvatarPrimitive.Image.displayName
32: 
33: const AvatarFallback = React.forwardRef<
34:   React.ElementRef<typeof AvatarPrimitive.Fallback>,
35:   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
36: >(({ className, ...props }, ref) => (
37:   <AvatarPrimitive.Fallback
38:     ref={ref}
39:     className={cn(
40:       "flex h-full w-full items-center justify-center rounded-full bg-muted",
41:       className
42:     )}
43:     {...props}
44:   />
45: ))
46: AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName
47: 
48: export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
 1: import * as React from "react"
 2: import { cva, type VariantProps } from "class-variance-authority"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const badgeVariants = cva(
 7:   "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
 8:   {
 9:     variants: {
10:       variant: {
11:         default:
12:           "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
13:         secondary:
14:           "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
15:         destructive:
16:           "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
17:         outline: "text-foreground",
18:       },
19:     },
20:     defaultVariants: {
21:       variant: "default",
22:     },
23:   }
24: )
25: 
26: export interface BadgeProps
27:   extends React.HTMLAttributes<HTMLDivElement>,
28:     VariantProps<typeof badgeVariants> {}
29: 
30: function Badge({ className, variant, ...props }: BadgeProps) {
31:   return (
32:     <div className={cn(badgeVariants({ variant }), className)} {...props} />
33:   )
34: }
35: 
36: export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
 1: import * as React from "react"
 2: import { Slot } from "@radix-ui/react-slot"
 3: import { cva, type VariantProps } from "class-variance-authority"
 4: 
 5: import { cn } from "@/lib/utils"
 6: 
 7: const buttonVariants = cva(
 8:   "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:focus-ring focus-visible:border-ring disabled:pointer-events-none disabled:opacity-50",
 9:   {
10:     variants: {
11:       variant: {
12:         default: "bg-primary text-primary-foreground hover:bg-primary/90",
13:         destructive:
14:           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
15:         outline:
16:           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
17:         secondary:
18:           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
19:         ghost: "hover:bg-accent hover:text-accent-foreground",
20:         link: "text-primary underline-offset-4 hover:underline",
21:       },
22:       size: {
23:         default: "h-10 px-4 py-2",
24:         sm: "h-9 rounded-md px-3",
25:         lg: "h-11 rounded-md px-8",
26:         icon: "h-10 w-10",
27:       },
28:     },
29:     defaultVariants: {
30:       variant: "default",
31:       size: "default",
32:     },
33:   }
34: )
35: 
36: export interface ButtonProps
37:   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
38:     VariantProps<typeof buttonVariants> {
39:   asChild?: boolean
40: }
41: 
42: const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
43:   ({ className, variant, size, asChild = false, ...props }, ref) => {
44:     const Comp = asChild ? Slot : "button"
45:     return (
46:       <Comp
47:         className={cn(buttonVariants({ variant, size, className }))}
48:         ref={ref}
49:         {...props}
50:       />
51:     )
52:   }
53: )
54: Button.displayName = "Button"
55: 
56: export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
 1: import * as React from "react"
 2: 
 3: import { cn } from "@/lib/utils"
 4: 
 5: const Card = React.forwardRef<
 6:   HTMLDivElement,
 7:   React.HTMLAttributes<HTMLDivElement>
 8: >(({ className, ...props }, ref) => (
 9:   <div
10:     ref={ref}
11:     className={cn(
12:       "rounded-lg border bg-card text-card-foreground shadow-sm",
13:       className
14:     )}
15:     {...props}
16:   />
17: ))
18: Card.displayName = "Card"
19: 
20: const CardHeader = React.forwardRef<
21:   HTMLDivElement,
22:   React.HTMLAttributes<HTMLDivElement>
23: >(({ className, ...props }, ref) => (
24:   <div
25:     ref={ref}
26:     className={cn("flex flex-col space-y-1.5 p-6", className)}
27:     {...props}
28:   />
29: ))
30: CardHeader.displayName = "CardHeader"
31: 
32: const CardTitle = React.forwardRef<
33:   HTMLParagraphElement,
34:   React.HTMLAttributes<HTMLHeadingElement>
35: >(({ className, ...props }, ref) => (
36:   <h3
37:     ref={ref}
38:     className={cn(
39:       "text-2xl font-semibold leading-none tracking-tight",
40:       className
41:     )}
42:     {...props}
43:   />
44: ))
45: CardTitle.displayName = "CardTitle"
46: 
47: const CardDescription = React.forwardRef<
48:   HTMLParagraphElement,
49:   React.HTMLAttributes<HTMLParagraphElement>
50: >(({ className, ...props }, ref) => (
51:   <p
52:     ref={ref}
53:     className={cn("text-sm text-muted-foreground", className)}
54:     {...props}
55:   />
56: ))
57: CardDescription.displayName = "CardDescription"
58: 
59: const CardContent = React.forwardRef<
60:   HTMLDivElement,
61:   React.HTMLAttributes<HTMLDivElement>
62: >(({ className, ...props }, ref) => (
63:   <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
64: ))
65: CardContent.displayName = "CardContent"
66: 
67: const CardFooter = React.forwardRef<
68:   HTMLDivElement,
69:   React.HTMLAttributes<HTMLDivElement>
70: >(({ className, ...props }, ref) => (
71:   <div
72:     ref={ref}
73:     className={cn("flex items-center p-6 pt-0", className)}
74:     {...props}
75:   />
76: ))
77: CardFooter.displayName = "CardFooter"
78: 
79: export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/checkbox.tsx">
 1: import * as React from "react"
 2: import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
 3: import { Check } from "lucide-react"
 4: 
 5: import { cn } from "@/lib/utils"
 6: 
 7: const Checkbox = React.forwardRef<
 8:   React.ElementRef<typeof CheckboxPrimitive.Root>,
 9:   React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
10: >(({ className, ...props }, ref) => (
11:   <CheckboxPrimitive.Root
12:     ref={ref}
13:     className={cn(
14:       "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
15:       className
16:     )}
17:     {...props}
18:   >
19:     <CheckboxPrimitive.Indicator
20:       className={cn("flex items-center justify-center text-current")}
21:     >
22:       <Check className="h-4 w-4" />
23:     </CheckboxPrimitive.Indicator>
24:   </CheckboxPrimitive.Root>
25: ))
26: Checkbox.displayName = CheckboxPrimitive.Root.displayName
27: 
28: export { Checkbox }
</file>

<file path="src/components/ui/dialog.tsx">
  1: "use client"
  2: 
  3: import * as React from "react"
  4: import * as DialogPrimitive from "@radix-ui/react-dialog"
  5: import { X } from "lucide-react"
  6: 
  7: import { cn } from "@/lib/utils"
  8: 
  9: const Dialog = DialogPrimitive.Root
 10: 
 11: const DialogTrigger = DialogPrimitive.Trigger
 12: 
 13: const DialogPortal = DialogPrimitive.Portal
 14: 
 15: const DialogOverlay = React.forwardRef<
 16:   React.ElementRef<typeof DialogPrimitive.Overlay>,
 17:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
 18: >(({ className, ...props }, ref) => (
 19:   <DialogPrimitive.Overlay
 20:     ref={ref}
 21:     className={cn(
 22:       "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
 23:       className
 24:     )}
 25:     {...props}
 26:   />
 27: ))
 28: DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
 29: 
 30: interface DialogContentProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> {
 31:   stayOpen?: boolean;
 32:   closeOnInteractOutside?:boolean;
 33: }
 34: 
 35: const DialogContent = React.forwardRef<
 36:   React.ElementRef<typeof DialogPrimitive.Content>,
 37:   DialogContentProps
 38: >(({ className, children, stayOpen = false, closeOnInteractOutside = true, ...props }, ref) => (
 39:   <DialogPortal>
 40:     <DialogOverlay />
 41:     <DialogPrimitive.Content
 42:       ref={ref}
 43:       className={cn(
 44:         "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
 45:         !stayOpen && "data-[state=closed]:slide-out-to-top-[48%]",
 46:         className
 47:       )}
 48:       {...props}
 49:     >
 50:       <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
 51:         <X className="h-4 w-4" />
 52:         <span className="sr-only">Close</span>
 53:       </DialogPrimitive.Close>
 54:       <div className="space-y-4">
 55:         {children}
 56:       </div>
 57:     </DialogPrimitive.Content>
 58:   </DialogPortal>
 59: ))
 60: DialogContent.displayName = DialogPrimitive.Content.displayName
 61: 
 62: const DialogHeader = ({
 63:   className,
 64:   ...props
 65: }: React.HTMLAttributes<HTMLDivElement>) => (
 66:   <div
 67:     className={cn(
 68:       "flex flex-col space-y-1.5 text-center sm:text-left",
 69:       className
 70:     )}
 71:     {...props}
 72:   />
 73: )
 74: DialogHeader.displayName = "DialogHeader"
 75: 
 76: const DialogFooter = ({
 77:   className,
 78:   ...props
 79: }: React.HTMLAttributes<HTMLDivElement>) => (
 80:   <div
 81:     className={cn(
 82:       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
 83:       className
 84:     )}
 85:     {...props}
 86:   />
 87: )
 88: DialogFooter.displayName = "DialogFooter"
 89: 
 90: const DialogTitle = React.forwardRef<
 91:   React.ElementRef<typeof DialogPrimitive.Title>,
 92:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
 93: >(({ className, ...props }, ref) => (
 94:   <DialogPrimitive.Title
 95:     ref={ref}
 96:     className={cn(
 97:       "text-lg font-semibold leading-none tracking-tight",
 98:       className
 99:     )}
100:     {...props}
101:   />
102: ))
103: DialogTitle.displayName = DialogPrimitive.Title.displayName
104: 
105: const DialogDescription = React.forwardRef<
106:   React.ElementRef<typeof DialogPrimitive.Description>,
107:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
108: >(({ className, ...props }, ref) => (
109:   <DialogPrimitive.Description
110:     ref={ref}
111:     className={cn("text-sm text-muted-foreground", className)}
112:     {...props}
113:   />
114: ))
115: DialogDescription.displayName = DialogPrimitive.Description.displayName
116: 
117: export {
118:   Dialog,
119:   DialogPortal,
120:   DialogOverlay,
121:   DialogTrigger,
122:   DialogContent,
123:   DialogHeader,
124:   DialogFooter,
125:   DialogTitle,
126:   DialogDescription,
127: }
</file>

<file path="src/components/ui/input.tsx">
 1: import * as React from "react"
 2: 
 3: import { cn } from "@/lib/utils"
 4: 
 5: export interface InputProps
 6:   extends React.InputHTMLAttributes<HTMLInputElement> {}
 7: 
 8: const Input = React.forwardRef<HTMLInputElement, InputProps>(
 9:   ({ className, type, ...props }, ref) => {
10:     return (
11:       <input
12:         type={type}
13:         className={cn(
14:           "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
15:           className
16:         )}
17:         ref={ref}
18:         {...props}
19:       />
20:     )
21:   }
22: )
23: Input.displayName = "Input"
24: 
25: export { Input }
</file>

<file path="src/components/ui/label.tsx">
 1: import * as React from "react"
 2: import * as LabelPrimitive from "@radix-ui/react-label"
 3: import { cva, type VariantProps } from "class-variance-authority"
 4: 
 5: import { cn } from "@/lib/utils"
 6: 
 7: const labelVariants = cva(
 8:   "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
 9: )
10: 
11: const Label = React.forwardRef<
12:   React.ElementRef<typeof LabelPrimitive.Root>,
13:   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
14:     VariantProps<typeof labelVariants>
15: >(({ className, ...props }, ref) => (
16:   <LabelPrimitive.Root
17:     ref={ref}
18:     className={cn(labelVariants(), className)}
19:     {...props}
20:   />
21: ))
22: Label.displayName = LabelPrimitive.Root.displayName
23: 
24: export { Label }
</file>

<file path="src/components/ui/progress.tsx">
 1: import * as React from "react"
 2: import * as ProgressPrimitive from "@radix-ui/react-progress"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const Progress = React.forwardRef<
 7:   React.ElementRef<typeof ProgressPrimitive.Root>,
 8:   React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
 9: >(({ className, value, ...props }, ref) => (
10:   <ProgressPrimitive.Root
11:     ref={ref}
12:     className={cn(
13:       "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
14:       className
15:     )}
16:     {...props}
17:   >
18:     <ProgressPrimitive.Indicator
19:       className="h-full w-full flex-1 bg-primary transition-all"
20:       style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
21:     />
22:   </ProgressPrimitive.Root>
23: ))
24: Progress.displayName = ProgressPrimitive.Root.displayName
25: 
26: export { Progress }
</file>

<file path="src/components/ui/select.tsx">
  1: import * as React from "react"
  2: import * as SelectPrimitive from "@radix-ui/react-select"
  3: import { Check, ChevronDown, ChevronUp } from "lucide-react"
  4: 
  5: import { cn } from "@/lib/utils"
  6: 
  7: const Select = SelectPrimitive.Root
  8: 
  9: const SelectGroup = SelectPrimitive.Group
 10: 
 11: const SelectValue = SelectPrimitive.Value
 12: 
 13: const SelectTrigger = React.forwardRef<
 14:   React.ElementRef<typeof SelectPrimitive.Trigger>,
 15:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
 16: >(({ className, children, ...props }, ref) => (
 17:   <SelectPrimitive.Trigger
 18:     ref={ref}
 19:     className={cn(
 20:       "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
 21:       className
 22:     )}
 23:     {...props}
 24:   >
 25:     {children}
 26:     <SelectPrimitive.Icon asChild>
 27:       <ChevronDown className="h-4 w-4 opacity-50" />
 28:     </SelectPrimitive.Icon>
 29:   </SelectPrimitive.Trigger>
 30: ))
 31: SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
 32: 
 33: const SelectScrollUpButton = React.forwardRef<
 34:   React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
 35:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
 36: >(({ className, ...props }, ref) => (
 37:   <SelectPrimitive.ScrollUpButton
 38:     ref={ref}
 39:     className={cn(
 40:       "flex cursor-default items-center justify-center py-1",
 41:       className
 42:     )}
 43:     {...props}
 44:   >
 45:     <ChevronUp className="h-4 w-4" />
 46:   </SelectPrimitive.ScrollUpButton>
 47: ))
 48: SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
 49: 
 50: const SelectScrollDownButton = React.forwardRef<
 51:   React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
 52:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
 53: >(({ className, ...props }, ref) => (
 54:   <SelectPrimitive.ScrollDownButton
 55:     ref={ref}
 56:     className={cn(
 57:       "flex cursor-default items-center justify-center py-1",
 58:       className
 59:     )}
 60:     {...props}
 61:   >
 62:     <ChevronDown className="h-4 w-4" />
 63:   </SelectPrimitive.ScrollDownButton>
 64: ))
 65: SelectScrollDownButton.displayName =
 66:   SelectPrimitive.ScrollDownButton.displayName
 67: 
 68: const SelectContent = React.forwardRef<
 69:   React.ElementRef<typeof SelectPrimitive.Content>,
 70:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
 71: >(({ className, children, position = "popper", ...props }, ref) => (
 72:   <SelectPrimitive.Portal>
 73:     <SelectPrimitive.Content
 74:       ref={ref}
 75:       className={cn(
 76:         "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 77:         position === "popper" &&
 78:           "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
 79:         className
 80:       )}
 81:       position={position}
 82:       {...props}
 83:     >
 84:       <SelectScrollUpButton />
 85:       <SelectPrimitive.Viewport
 86:         className={cn(
 87:           "p-1",
 88:           position === "popper" &&
 89:             "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
 90:         )}
 91:       >
 92:         {children}
 93:       </SelectPrimitive.Viewport>
 94:       <SelectScrollDownButton />
 95:     </SelectPrimitive.Content>
 96:   </SelectPrimitive.Portal>
 97: ))
 98: SelectContent.displayName = SelectPrimitive.Content.displayName
 99: 
100: const SelectLabel = React.forwardRef<
101:   React.ElementRef<typeof SelectPrimitive.Label>,
102:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
103: >(({ className, ...props }, ref) => (
104:   <SelectPrimitive.Label
105:     ref={ref}
106:     className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
107:     {...props}
108:   />
109: ))
110: SelectLabel.displayName = SelectPrimitive.Label.displayName
111: 
112: const SelectItem = React.forwardRef<
113:   React.ElementRef<typeof SelectPrimitive.Item>,
114:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
115: >(({ className, children, ...props }, ref) => (
116:   <SelectPrimitive.Item
117:     ref={ref}
118:     className={cn(
119:       "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
120:       className
121:     )}
122:     {...props}
123:   >
124:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
125:       <SelectPrimitive.ItemIndicator>
126:         <Check className="h-4 w-4" />
127:       </SelectPrimitive.ItemIndicator>
128:     </span>
129: 
130:     <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
131:   </SelectPrimitive.Item>
132: ))
133: SelectItem.displayName = SelectPrimitive.Item.displayName
134: 
135: const SelectSeparator = React.forwardRef<
136:   React.ElementRef<typeof SelectPrimitive.Separator>,
137:   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
138: >(({ className, ...props }, ref) => (
139:   <SelectPrimitive.Separator
140:     ref={ref}
141:     className={cn("-mx-1 my-1 h-px bg-muted", className)}
142:     {...props}
143:   />
144: ))
145: SelectSeparator.displayName = SelectPrimitive.Separator.displayName
146: 
147: export {
148:   Select,
149:   SelectGroup,
150:   SelectValue,
151:   SelectTrigger,
152:   SelectContent,
153:   SelectLabel,
154:   SelectItem,
155:   SelectSeparator,
156:   SelectScrollUpButton,
157:   SelectScrollDownButton,
158: }
</file>

<file path="src/components/ui/separator.tsx">
 1: import * as React from "react"
 2: import * as SeparatorPrimitive from "@radix-ui/react-separator"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const Separator = React.forwardRef<
 7:   React.ElementRef<typeof SeparatorPrimitive.Root>,
 8:   React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
 9: >(
10:   (
11:     { className, orientation = "horizontal", decorative = true, ...props },
12:     ref
13:   ) => (
14:     <SeparatorPrimitive.Root
15:       ref={ref}
16:       decorative={decorative}
17:       orientation={orientation}
18:       className={cn(
19:         "shrink-0 bg-border",
20:         orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
21:         className
22:       )}
23:       {...props}
24:     />
25:   )
26: )
27: Separator.displayName = SeparatorPrimitive.Root.displayName
28: 
29: export { Separator }
</file>

<file path="src/components/ui/skeleton.tsx">
1: 'use client'
2: 
3: import * as React from 'react'
4: 
5: export function Skeleton({ className = '' }: { className?: string }) {
6:   return (
7:     <div className={`animate-pulse rounded-md bg-gray-200/70 dark:bg-zinc-800/60 ${className}`} />
8:   )
9: }
</file>

<file path="src/components/ui/tabs.tsx">
 1: import * as React from "react"
 2: import * as TabsPrimitive from "@radix-ui/react-tabs"
 3: 
 4: import { cn } from "@/lib/utils"
 5: 
 6: const Tabs = TabsPrimitive.Root
 7: 
 8: const TabsList = React.forwardRef<
 9:   React.ElementRef<typeof TabsPrimitive.List>,
10:   React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
11: >(({ className, ...props }, ref) => (
12:   <TabsPrimitive.List
13:     ref={ref}
14:     className={cn(
15:       "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
16:       className
17:     )}
18:     {...props}
19:   />
20: ))
21: TabsList.displayName = TabsPrimitive.List.displayName
22: 
23: const TabsTrigger = React.forwardRef<
24:   React.ElementRef<typeof TabsPrimitive.Trigger>,
25:   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
26: >(({ className, ...props }, ref) => (
27:   <TabsPrimitive.Trigger
28:     ref={ref}
29:     className={cn(
30:       "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
31:       className
32:     )}
33:     {...props}
34:   />
35: ))
36: TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
37: 
38: const TabsContent = React.forwardRef<
39:   React.ElementRef<typeof TabsPrimitive.Content>,
40:   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
41: >(({ className, ...props }, ref) => (
42:   <TabsPrimitive.Content
43:     ref={ref}
44:     className={cn(
45:       "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
46:       className
47:     )}
48:     {...props}
49:   />
50: ))
51: TabsContent.displayName = TabsPrimitive.Content.displayName
52: 
53: export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
 1: import * as React from "react"
 2: 
 3: import { cn } from "@/lib/utils"
 4: 
 5: export interface TextareaProps
 6:   extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}
 7: 
 8: const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
 9:   ({ className, ...props }, ref) => {
10:     return (
11:       <textarea
12:         className={cn(
13:           "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
14:           className
15:         )}
16:         ref={ref}
17:         {...props}
18:       />
19:     )
20:   }
21: )
22: Textarea.displayName = "Textarea"
23: 
24: export { Textarea }
</file>

<file path="src/components/ui/use-toast.ts">
 1: import * as React from "react"
 2: 
 3: export interface Toast {
 4:   id: string
 5:   title?: string
 6:   description?: string
 7:   variant?: 'default' | 'destructive'
 8: }
 9: 
10: export function useToast() {
11:   const [toasts, setToasts] = React.useState<Toast[]>([])
12: 
13:   const toast = React.useCallback(({ title, description, variant = 'default' }: Omit<Toast, 'id'>) => {
14:     const id = Math.random().toString(36).substring(2, 9)
15:     const newToast: Toast = { id, title, description, variant }
16:     
17:     setToasts(prev => [...prev, newToast])
18:     
19:     // Auto remove after 5 seconds
20:     setTimeout(() => {
21:       setToasts(prev => prev.filter(t => t.id !== id))
22:     }, 5000)
23:   }, [])
24: 
25:   const dismiss = React.useCallback((id: string) => {
26:     setToasts(prev => prev.filter(t => t.id !== id))
27:   }, [])
28: 
29:   return { toast, toasts, dismiss }
30: }
</file>

<file path="src/hooks/use-dashboard-stats.ts">
 1: /**
 2:  * Shared Dashboard Stats Hook
 3:  * 
 4:  * Consolidates all dashboard data fetching into a single hook
 5:  * Uses React Query for caching and deduplication
 6:  */
 7: 
 8: import { useQuery } from '@tanstack/react-query'
 9: 
10: export interface DashboardStats {
11:   totalApplications: number
12:   appliedThisWeek: number
13:   interviewRate: number
14:   averageResponseTime: number
15:   appliedWeekChangePct?: number
16:   pendingFollowUps?: number
17:   upcomingInterviews?: number
18: }
19: 
20: export interface DashboardData {
21:   stats: DashboardStats
22:   success: boolean
23: }
24: 
25: const DEFAULT_STATS: DashboardStats = {
26:   totalApplications: 0,
27:   appliedThisWeek: 0,
28:   interviewRate: 0,
29:   averageResponseTime: 0,
30:   appliedWeekChangePct: 0,
31:   pendingFollowUps: 0,
32:   upcomingInterviews: 0
33: }
34: 
35: /**
36:  * Fetch dashboard stats with automatic caching and deduplication
37:  * All dashboard components should use this hook instead of fetching directly
38:  */
39: export function useDashboardStats() {
40:   return useQuery<DashboardData>({
41:     queryKey: ['dashboard-stats'],
42:     queryFn: async () => {
43:       try {
44:         const res = await fetch('/api/analytics/dashboard')
45:         
46:         if (!res.ok) {
47:           console.warn('[DASHBOARD_STATS] API returned non-OK status:', res.status)
48:           return { stats: DEFAULT_STATS, success: false }
49:         }
50:         
51:         const data = await res.json()
52:         
53:         if (!data.success) {
54:           console.warn('[DASHBOARD_STATS] API returned success=false')
55:           return { stats: DEFAULT_STATS, success: false }
56:         }
57:         
58:         return {
59:           stats: { ...DEFAULT_STATS, ...data.stats },
60:           success: true
61:         }
62:       } catch (error) {
63:         console.error('[DASHBOARD_STATS] Fetch error:', error)
64:         return { stats: DEFAULT_STATS, success: false }
65:       }
66:     },
67:     staleTime: 30000, // 30 seconds
68:     gcTime: 300000, // 5 minutes (formerly cacheTime)
69:     refetchOnWindowFocus: false,
70:     retry: 1
71:   })
72: }
73: 
74: /**
75:  * Get just the stats object (convenience wrapper)
76:  */
77: export function useDashboardStatsData() {
78:   const { data, isLoading, error } = useDashboardStats()
79:   
80:   return {
81:     stats: data?.stats || DEFAULT_STATS,
82:     isLoading,
83:     error,
84:     success: data?.success || false
85:   }
86: }
</file>

<file path="src/hooks/use-job-applications.ts">
  1: /**
  2:  * React Query Hooks for Job Applications
  3:  * 
  4:  * Provides hooks for fetching, creating, updating job applications
  5:  * with automatic caching, refetching, and optimistic updates
  6:  */
  7: 
  8: import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
  9: import { logger } from '@/lib/logger'
 10: 
 11: interface JobApplication {
 12:   _id: string
 13:   jobTitle: string
 14:   companyName: string
 15:   jobDescription: string
 16:   applicationStatus: string
 17:   appliedDate?: string
 18:   createdAt: string
 19:   updatedAt: string
 20: }
 21: 
 22: interface CreateApplicationData {
 23:   jobTitle: string
 24:   companyName: string
 25:   jobDescription: string
 26:   jobUrl?: string
 27:   notes?: string
 28: }
 29: 
 30: // Query Keys
 31: export const jobApplicationKeys = {
 32:   all: ['jobApplications'] as const,
 33:   lists: () => [...jobApplicationKeys.all, 'list'] as const,
 34:   list: (filters?: any) => [...jobApplicationKeys.lists(), filters] as const,
 35:   details: () => [...jobApplicationKeys.all, 'detail'] as const,
 36:   detail: (id: string) => [...jobApplicationKeys.details(), id] as const,
 37:   stats: () => [...jobApplicationKeys.all, 'stats'] as const,
 38: }
 39: 
 40: /**
 41:  * Fetch all job applications for the current user
 42:  */
 43: export function useJobApplications(filters?: {
 44:   status?: string[]
 45:   limit?: number
 46:   skip?: number
 47: }) {
 48:   return useQuery({
 49:     queryKey: jobApplicationKeys.list(filters),
 50:     queryFn: async () => {
 51:       const params = new URLSearchParams()
 52:       if (filters?.status) params.append('status', filters.status.join(','))
 53:       if (filters?.limit) params.append('limit', filters.limit.toString())
 54:       if (filters?.skip) params.append('skip', filters.skip.toString())
 55:       
 56:       const response = await fetch(`/api/applications?${params}`)
 57:       if (!response.ok) {
 58:         throw new Error('Failed to fetch applications')
 59:       }
 60:       return response.json() as Promise<JobApplication[]>
 61:     },
 62:     staleTime: 2 * 60 * 1000, // 2 minutes
 63:   })
 64: }
 65: 
 66: /**
 67:  * Fetch a single job application by ID
 68:  */
 69: export function useJobApplication(id: string) {
 70:   return useQuery({
 71:     queryKey: jobApplicationKeys.detail(id),
 72:     queryFn: async () => {
 73:       const response = await fetch(`/api/applications/${id}`)
 74:       if (!response.ok) {
 75:         throw new Error('Failed to fetch application')
 76:       }
 77:       return response.json() as Promise<JobApplication>
 78:     },
 79:     enabled: !!id,
 80:   })
 81: }
 82: 
 83: /**
 84:  * Fetch application statistics
 85:  */
 86: export function useApplicationStats() {
 87:   return useQuery({
 88:     queryKey: jobApplicationKeys.stats(),
 89:     queryFn: async () => {
 90:       const response = await fetch('/api/analytics/dashboard')
 91:       if (!response.ok) {
 92:         throw new Error('Failed to fetch stats')
 93:       }
 94:       return response.json()
 95:     },
 96:     staleTime: 5 * 60 * 1000, // 5 minutes
 97:   })
 98: }
 99: 
100: /**
101:  * Create a new job application
102:  */
103: export function useCreateJobApplication() {
104:   const queryClient = useQueryClient()
105:   
106:   return useMutation({
107:     mutationFn: async (data: CreateApplicationData) => {
108:       logger.info('Creating job application', { jobTitle: data.jobTitle })
109:       
110:       const response = await fetch('/api/applications', {
111:         method: 'POST',
112:         headers: { 'Content-Type': 'application/json' },
113:         body: JSON.stringify(data),
114:       })
115:       
116:       if (!response.ok) {
117:         const error = await response.json()
118:         throw new Error(error.message || 'Failed to create application')
119:       }
120:       
121:       return response.json() as Promise<JobApplication>
122:     },
123:     onSuccess: (newApplication) => {
124:       // Invalidate and refetch applications list
125:       queryClient.invalidateQueries({ queryKey: jobApplicationKeys.lists() })
126:       queryClient.invalidateQueries({ queryKey: jobApplicationKeys.stats() })
127:       
128:       // Add to cache
129:       queryClient.setQueryData(
130:         jobApplicationKeys.detail(newApplication._id),
131:         newApplication
132:       )
133:       
134:       logger.info('Job application created successfully', {
135:         id: newApplication._id,
136:       })
137:     },
138:     onError: (error: Error) => {
139:       logger.error('Failed to create job application', {
140:         error: error.message,
141:       })
142:     },
143:   })
144: }
145: 
146: /**
147:  * Update a job application
148:  */
149: export function useUpdateJobApplication() {
150:   const queryClient = useQueryClient()
151:   
152:   return useMutation({
153:     mutationFn: async ({
154:       id,
155:       data,
156:     }: {
157:       id: string
158:       data: Partial<CreateApplicationData>
159:     }) => {
160:       const response = await fetch(`/api/applications/${id}`, {
161:         method: 'PATCH',
162:         headers: { 'Content-Type': 'application/json' },
163:         body: JSON.stringify(data),
164:       })
165:       
166:       if (!response.ok) {
167:         throw new Error('Failed to update application')
168:       }
169:       
170:       return response.json() as Promise<JobApplication>
171:     },
172:     onSuccess: (updatedApplication) => {
173:       // Update cache
174:       queryClient.setQueryData(
175:         jobApplicationKeys.detail(updatedApplication._id),
176:         updatedApplication
177:       )
178:       
179:       // Invalidate lists
180:       queryClient.invalidateQueries({ queryKey: jobApplicationKeys.lists() })
181:     },
182:   })
183: }
184: 
185: /**
186:  * Update application status
187:  */
188: export function useUpdateApplicationStatus() {
189:   const queryClient = useQueryClient()
190:   
191:   return useMutation({
192:     mutationFn: async ({
193:       id,
194:       status,
195:     }: {
196:       id: string
197:       status: string
198:     }) => {
199:       const response = await fetch(`/api/applications/${id}`, {
200:         method: 'PATCH',
201:         headers: { 'Content-Type': 'application/json' },
202:         body: JSON.stringify({ applicationStatus: status }),
203:       })
204:       
205:       if (!response.ok) {
206:         throw new Error('Failed to update status')
207:       }
208:       
209:       return response.json()
210:     },
211:     // Optimistic update
212:     onMutate: async ({ id, status }) => {
213:       // Cancel outgoing refetches
214:       await queryClient.cancelQueries({ queryKey: jobApplicationKeys.detail(id) })
215:       
216:       // Snapshot previous value
217:       const previousApp = queryClient.getQueryData<JobApplication>(
218:         jobApplicationKeys.detail(id)
219:       )
220:       
221:       // Optimistically update
222:       if (previousApp) {
223:         queryClient.setQueryData<JobApplication>(
224:           jobApplicationKeys.detail(id),
225:           { ...previousApp, applicationStatus: status }
226:         )
227:       }
228:       
229:       return { previousApp }
230:     },
231:     // Rollback on error
232:     onError: (err, { id }, context) => {
233:       if (context?.previousApp) {
234:         queryClient.setQueryData(
235:           jobApplicationKeys.detail(id),
236:           context.previousApp
237:         )
238:       }
239:     },
240:     // Refetch after success or error
241:     onSettled: (data, error, { id }) => {
242:       queryClient.invalidateQueries({ queryKey: jobApplicationKeys.detail(id) })
243:       queryClient.invalidateQueries({ queryKey: jobApplicationKeys.lists() })
244:       queryClient.invalidateQueries({ queryKey: jobApplicationKeys.stats() })
245:     },
246:   })
247: }
248: 
249: /**
250:  * Delete a job application
251:  */
252: export function useDeleteJobApplication() {
253:   const queryClient = useQueryClient()
254:   
255:   return useMutation({
256:     mutationFn: async (id: string) => {
257:       const response = await fetch(`/api/applications/${id}`, {
258:         method: 'DELETE',
259:       })
260:       
261:       if (!response.ok) {
262:         throw new Error('Failed to delete application')
263:       }
264:       
265:       return response.json()
266:     },
267:     onSuccess: (_, id) => {
268:       // Remove from cache
269:       queryClient.removeQueries({ queryKey: jobApplicationKeys.detail(id) })
270:       
271:       // Invalidate lists
272:       queryClient.invalidateQueries({ queryKey: jobApplicationKeys.lists() })
273:       queryClient.invalidateQueries({ queryKey: jobApplicationKeys.stats() })
274:     },
275:   })
276: }
</file>

<file path="src/hooks/use-notifications.ts">
 1: import { useState, useEffect } from 'react'
 2: 
 3: export function useNotifications() {
 4:   const [count, setCount] = useState(0)
 5:   
 6:   useEffect(() => {
 7:     // Check for notifications from localStorage
 8:     const checkNotifications = () => {
 9:       try {
10:         const notifications = localStorage.getItem('notifications')
11:         if (notifications) {
12:           const parsed = JSON.parse(notifications)
13:           setCount(parsed.unread || 0)
14:         }
15:       } catch (e) {
16:         // Ignore errors
17:       }
18:     }
19:     
20:     checkNotifications()
21:     
22:     // Check every 30 seconds
23:     const interval = setInterval(checkNotifications, 30000)
24:     return () => clearInterval(interval)
25:   }, [])
26:   
27:   return { count }
28: }
</file>

<file path="src/hooks/use-resumes.ts">
  1: /**
  2:  * React Query Hooks for Resumes
  3:  * 
  4:  * Provides hooks for fetching, uploading, customizing resumes
  5:  */
  6: 
  7: import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
  8: import { logger } from '@/lib/logger'
  9: 
 10: interface Resume {
 11:   _id: string
 12:   originalFileName: string
 13:   extractedText: string
 14:   userName?: string
 15:   contactEmail?: string
 16:   createdAt: string
 17:   updatedAt: string
 18: }
 19: 
 20: // Query Keys
 21: export const resumeKeys = {
 22:   all: ['resumes'] as const,
 23:   lists: () => [...resumeKeys.all, 'list'] as const,
 24:   list: (filters?: any) => [...resumeKeys.lists(), filters] as const,
 25:   details: () => [...resumeKeys.all, 'detail'] as const,
 26:   detail: (id: string) => [...resumeKeys.details(), id] as const,
 27:   latest: () => [...resumeKeys.all, 'latest'] as const,
 28: }
 29: 
 30: /**
 31:  * Fetch all resumes for the current user
 32:  */
 33: export function useResumes(options?: { limit?: number; skip?: number }) {
 34:   return useQuery({
 35:     queryKey: resumeKeys.list(options),
 36:     queryFn: async () => {
 37:       const params = new URLSearchParams()
 38:       if (options?.limit) params.append('limit', options.limit.toString())
 39:       if (options?.skip) params.append('skip', options.skip.toString())
 40:       
 41:       const response = await fetch(`/api/resume/list?${params}`)
 42:       if (!response.ok) {
 43:         throw new Error('Failed to fetch resumes')
 44:       }
 45:       return response.json() as Promise<Resume[]>
 46:     },
 47:     staleTime: 5 * 60 * 1000, // 5 minutes
 48:   })
 49: }
 50: 
 51: /**
 52:  * Fetch a single resume by ID
 53:  */
 54: export function useResume(id: string) {
 55:   return useQuery({
 56:     queryKey: resumeKeys.detail(id),
 57:     queryFn: async () => {
 58:       const response = await fetch(`/api/resume/${id}`)
 59:       if (!response.ok) {
 60:         throw new Error('Failed to fetch resume')
 61:       }
 62:       return response.json() as Promise<Resume>
 63:     },
 64:     enabled: !!id,
 65:   })
 66: }
 67: 
 68: /**
 69:  * Fetch the latest resume
 70:  */
 71: export function useLatestResume() {
 72:   return useQuery({
 73:     queryKey: resumeKeys.latest(),
 74:     queryFn: async () => {
 75:       const response = await fetch('/api/resume/latest')
 76:       if (!response.ok) {
 77:         if (response.status === 404) {
 78:           return null
 79:         }
 80:         throw new Error('Failed to fetch latest resume')
 81:       }
 82:       return response.json() as Promise<Resume | null>
 83:     },
 84:     staleTime: 2 * 60 * 1000, // 2 minutes
 85:   })
 86: }
 87: 
 88: /**
 89:  * Upload a new resume
 90:  */
 91: export function useUploadResume() {
 92:   const queryClient = useQueryClient()
 93:   
 94:   return useMutation({
 95:     mutationFn: async (file: File) => {
 96:       logger.info('Uploading resume', { fileName: file.name })
 97:       
 98:       const formData = new FormData()
 99:       formData.append('resume', file)
100:       
101:       const response = await fetch('/api/resume/upload', {
102:         method: 'POST',
103:         body: formData,
104:       })
105:       
106:       if (!response.ok) {
107:         const error = await response.json()
108:         throw new Error(error.message || 'Failed to upload resume')
109:       }
110:       
111:       return response.json() as Promise<Resume>
112:     },
113:     onSuccess: (newResume) => {
114:       // Invalidate and refetch resumes
115:       queryClient.invalidateQueries({ queryKey: resumeKeys.lists() })
116:       queryClient.invalidateQueries({ queryKey: resumeKeys.latest() })
117:       
118:       // Add to cache
119:       queryClient.setQueryData(resumeKeys.detail(newResume._id), newResume)
120:       
121:       logger.info('Resume uploaded successfully', { id: newResume._id })
122:     },
123:     onError: (error: Error) => {
124:       logger.error('Failed to upload resume', { error: error.message })
125:     },
126:   })
127: }
128: 
129: /**
130:  * Customize resume for a job
131:  */
132: export function useCustomizeResume() {
133:   const queryClient = useQueryClient()
134:   
135:   return useMutation({
136:     mutationFn: async ({
137:       resumeId,
138:       jobDescription,
139:       jobTitle,
140:       companyName,
141:     }: {
142:       resumeId: string
143:       jobDescription: string
144:       jobTitle: string
145:       companyName: string
146:     }) => {
147:       logger.info('Customizing resume', { resumeId, jobTitle })
148:       
149:       const response = await fetch('/api/resume/customize', {
150:         method: 'POST',
151:         headers: { 'Content-Type': 'application/json' },
152:         body: JSON.stringify({
153:           resumeId,
154:           jobDescription,
155:           jobTitle,
156:           companyName,
157:         }),
158:       })
159:       
160:       if (!response.ok) {
161:         const error = await response.json()
162:         throw new Error(error.message || 'Failed to customize resume')
163:       }
164:       
165:       return response.json()
166:     },
167:     onSuccess: (_, variables) => {
168:       // Invalidate resume to refetch with new customized version
169:       queryClient.invalidateQueries({
170:         queryKey: resumeKeys.detail(variables.resumeId),
171:       })
172:       
173:       logger.info('Resume customized successfully')
174:     },
175:     onError: (error: Error) => {
176:       logger.error('Failed to customize resume', { error: error.message })
177:     },
178:   })
179: }
180: 
181: /**
182:  * Delete a resume
183:  */
184: export function useDeleteResume() {
185:   const queryClient = useQueryClient()
186:   
187:   return useMutation({
188:     mutationFn: async (id: string) => {
189:       const response = await fetch(`/api/resume/${id}`, {
190:         method: 'DELETE',
191:       })
192:       
193:       if (!response.ok) {
194:         throw new Error('Failed to delete resume')
195:       }
196:       
197:       return response.json()
198:     },
199:     onSuccess: (_, id) => {
200:       // Remove from cache
201:       queryClient.removeQueries({ queryKey: resumeKeys.detail(id) })
202:       
203:       // Invalidate lists
204:       queryClient.invalidateQueries({ queryKey: resumeKeys.lists() })
205:       queryClient.invalidateQueries({ queryKey: resumeKeys.latest() })
206:       
207:       logger.info('Resume deleted successfully', { id })
208:     },
209:   })
210: }
</file>

<file path="src/lib/agents/agent-handlers.ts">
  1: /**
  2:  * Agent Tool Handlers
  3:  * 
  4:  * Implements the actual logic for each tool the agent can call
  5:  * These are the "hands" of the agent - they do the actual work
  6:  */
  7: 
  8: import { PerplexityIntelligenceService, HiringContact } from '../perplexity-intelligence'
  9: import { AdvancedScraper } from '../scrapers/advanced-scraper'
 10: 
 11: export interface ToolResult {
 12:   success: boolean
 13:   data?: unknown
 14:   error?: string
 15:   metadata?: Record<string, unknown>
 16: }
 17: 
 18: export class AgentToolHandlers {
 19:   /**
 20:    * Searches job boards for job listings
 21:    */
 22:   static async search_job_boards(
 23:     job_title: string,
 24:     location: string,
 25:     max_results: number = 20
 26:   ): Promise<ToolResult> {
 27:     try {
 28:       console.log(`[TOOL] search_job_boards: ${job_title} in ${location}`)
 29: 
 30:       // Use existing job search with validation
 31:       const result = await PerplexityIntelligenceService.jobMarketAnalysisV2(
 32:         location,
 33:         '', // No resume text needed for basic search
 34:         {
 35:           roleHint: job_title,
 36:           maxResults: max_results
 37:         }
 38:       )
 39: 
 40:       if (!result.success) {
 41:         return {
 42:           success: false,
 43:           error: result.metadata?.error || 'Job search failed'
 44:         }
 45:       }
 46: 
 47:       // Return URLs + basic info for agent to decide which to scrape
 48:       const jobs = result.data.map((job: { title: string; company: string; location: string; url: string; source?: string; postedDate?: string; summary?: string }) => ({
 49:         title: job.title,
 50:         company: job.company,
 51:         location: job.location,
 52:         url: job.url,
 53:         source: job.source,
 54:         posted_date: job.postedDate,
 55:         has_description: (job.summary?.length || 0) > 150,
 56:         summary_preview: job.summary?.substring(0, 200)
 57:       }))
 58: 
 59:       return {
 60:         success: true,
 61:         data: jobs,
 62:         metadata: {
 63:           total_found: jobs.length,
 64:           sources_searched: 'Indeed, LinkedIn, Glassdoor, Job Bank, Wellfound'
 65:         }
 66:       }
 67:     } catch (error) {
 68:       return {
 69:         success: false,
 70:         error: (error as Error).message
 71:       }
 72:     }
 73:   }
 74: 
 75:   /**
 76:    * Scrapes a specific job posting URL using AdvancedScraper
 77:    * 3-tier fallback: JSON-LD → Cheerio → Regex
 78:    */
 79:   static async scrape_job_posting(
 80:     url: string,
 81:     company_name?: string
 82:   ): Promise<ToolResult> {
 83:     try {
 84:       console.log(`[TOOL] scrape_job_posting: ${url}`)
 85: 
 86:       // Use advanced scraper with 3-tier fallback
 87:       const scraper = new AdvancedScraper()
 88:       const result = await scraper.scrape(url)
 89: 
 90:       if (!result.success || !result.data?.description) {
 91:         return {
 92:           success: false,
 93:           error: result.error || 'Could not extract job description from URL'
 94:         }
 95:       }
 96: 
 97:       return {
 98:         success: true,
 99:         data: {
100:           url,
101:           company: company_name || result.data.company,
102:           title: result.data.title,
103:           description: result.data.description,
104:           requirements: result.data.requirements,
105:           salary: result.data.salary,
106:           location: result.data.location,
107:           scrape_method: result.method,
108:           description_length: result.data.description.length,
109:           extracted_at: new Date().toISOString()
110:         }
111:       }
112:     } catch (error) {
113:       return {
114:         success: false,
115:         error: (error as Error).message
116:       }
117:     }
118:   }
119: 
120:   /**
121:    * Searches LinkedIn for company employees with specific roles
122:    */
123:   static async search_linkedin_profiles(
124:     company_name: string,
125:     role_keywords: string[]
126:   ): Promise<ToolResult> {
127:     try {
128:       console.log(`[TOOL] search_linkedin_profiles: ${company_name}, roles: ${role_keywords.join(', ')}`)
129: 
130:       // Use existing hiring contacts search
131:       const result = await PerplexityIntelligenceService.hiringContactsV2(company_name)
132: 
133:       if (!result.success || result.data.length === 0) {
134:         return {
135:           success: false,
136:           error: `No LinkedIn profiles found for ${company_name} with roles: ${role_keywords.join(', ')}`,
137:           metadata: {
138:             suggestion: 'Try verify_company_website to find official contact emails'
139:           }
140:         }
141:       }
142: 
143:       // Filter to only profiles matching role keywords
144:       const filtered = result.data.filter((contact: HiringContact) => {
145:         const titleLower = contact.title?.toLowerCase() || ''
146:         return role_keywords.some(keyword => titleLower.includes(keyword.toLowerCase()))
147:       })
148: 
149:       if (filtered.length === 0) {
150:         return {
151:           success: false,
152:           error: `Found ${result.data.length} contacts but none matched roles: ${role_keywords.join(', ')}`,
153:           data: result.data.map((c: HiringContact) => ({ name: c.name, title: c.title }))
154:         }
155:       }
156: 
157:       return {
158:         success: true,
159:         data: filtered.map((contact: HiringContact) => ({
160:           name: contact.name,
161:           title: contact.title,
162:           linkedin_url: contact.linkedinUrl,
163:           email: contact.email,
164:           email_type: contact.emailType,
165:           confidence: contact.confidence
166:         })),
167:         metadata: {
168:           total_found: filtered.length,
169:           company: company_name
170:         }
171:       }
172:     } catch (error) {
173:       return {
174:         success: false,
175:         error: (error as Error).message
176:       }
177:     }
178:   }
179: 
180:   /**
181:    * Verifies company website and extracts careers/contact info
182:    */
183:   static async verify_company_website(
184:     company_name: string,
185:     website_url?: string
186:   ): Promise<ToolResult> {
187:     try {
188:       console.log(`[TOOL] verify_company_website: ${company_name}`)
189: 
190:       const domain = website_url || `https://www.${company_name.toLowerCase().replace(/\s/g, '')}.com`
191: 
192:       // Fetch company website
193:       const response = await fetch(domain, {
194:         headers: {
195:           'User-Agent': 'Mozilla/5.0 (compatible; CareerLeverAI/1.0)'
196:         },
197:         signal: AbortSignal.timeout(10000)
198:       })
199: 
200:       if (!response.ok) {
201:         return {
202:           success: false,
203:           error: `Website returned ${response.status}: ${response.statusText}`
204:         }
205:       }
206: 
207:       const html = await response.text()
208: 
209:       // Extract key pages
210:       const careersPageMatch = html.match(/href="([^"]*(?:careers|jobs|work-with-us|join-us)[^"]*)"/)
211:       const careersPage = careersPageMatch ? new URL(careersPageMatch[1], domain).href : null
212: 
213:       // Extract emails
214:       const emailMatches = html.match(/[\w._%+-]+@[\w.-]+\.[a-zA-Z]{2,}/g) || []
215:       const companyDomain = new URL(domain).hostname.replace(/^www\./, '')
216:       
217:       const companyEmails = emailMatches.filter(email => {
218:         const emailDomain = email.split('@')[1]?.toLowerCase()
219:         return emailDomain?.includes(companyDomain) &&
220:                !email.includes('example') &&
221:                !email.includes('test') &&
222:                !email.includes('noreply')
223:       })
224: 
225:       return {
226:         success: true,
227:         data: {
228:           website_url: domain,
229:           careers_page: careersPage,
230:           company_emails: [...new Set(companyEmails)],
231:           website_accessible: true,
232:           company_domain: companyDomain
233:         }
234:       }
235:     } catch (error) {
236:       return {
237:         success: false,
238:         error: `Could not access company website: ${(error as Error).message}`
239:       }
240:     }
241:   }
242: 
243:   /**
244:    * Validates email address
245:    */
246:   static async validate_email(
247:     email: string,
248:     company_domain: string
249:   ): Promise<ToolResult> {
250:     try {
251:       console.log(`[TOOL] validate_email: ${email} vs ${company_domain}`)
252: 
253:       const emailDomain = email.split('@')[1]?.toLowerCase()
254:       const normalizedDomain = company_domain.toLowerCase().replace(/^www\./, '')
255: 
256:       // Check domain match
257:       const isDomainMatch = emailDomain?.includes(normalizedDomain) || false
258: 
259:       // Check if personal email
260:       const personalDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'aol.com', 'icloud.com', 'protonmail.com']
261:       const isPersonal = personalDomains.some(d => emailDomain?.includes(d))
262: 
263:       // Check if placeholder
264:       const isPlaceholder = email.includes('[') || email.includes('example.com') || email.includes('test@') || email.includes('domain.')
265: 
266:       const isValid = isDomainMatch && !isPersonal && !isPlaceholder
267: 
268:       return {
269:         success: true,
270:         data: {
271:           email,
272:           company_domain,
273:           is_valid: isValid,
274:           is_personal: isPersonal,
275:           is_placeholder: isPlaceholder,
276:           confidence: isValid ? 0.95 : 0.1,
277:           reason: isValid
278:             ? 'Email domain matches company'
279:             : isPersonal
280:               ? 'Personal email (not company domain)'
281:               : isPlaceholder
282:                 ? 'Placeholder/template email'
283:                 : 'Email domain does not match company'
284:         }
285:       }
286:     } catch (error) {
287:       return {
288:         success: false,
289:         error: (error as Error).message
290:       }
291:     }
292:   }
293: 
294:   /**
295:    * Gets comprehensive company intelligence
296:    */
297:   static async get_company_intelligence(
298:     company_name: string
299:   ): Promise<ToolResult> {
300:     try {
301:       console.log(`[TOOL] get_company_intelligence: ${company_name}`)
302: 
303:       // Use existing company research
304:       const result = await PerplexityIntelligenceService.researchCompanyV2({
305:         company: company_name
306:       })
307: 
308:       if (!result.success) {
309:         return {
310:           success: false,
311:           error: 'Could not gather company intelligence'
312:         }
313:       }
314: 
315:       return {
316:         success: true,
317:         data: result.data
318:       }
319:     } catch (error) {
320:       return {
321:         success: false,
322:         error: (error as Error).message
323:       }
324:     }
325:   }
326: }
</file>

<file path="src/lib/agents/agent-tools.ts">
  1: /**
  2:  * Perplexity Agent Tool Definitions
  3:  * 
  4:  * Defines tools the AI agent can call to gather job/company intelligence
  5:  * These tools guarantee execution (not just suggestions like prompts)
  6:  */
  7: 
  8: export interface AgentTool {
  9:   type: 'function'
 10:   function: {
 11:     name: string
 12:     description: string
 13:     parameters: {
 14:       type: 'object'
 15:       properties: Record<string, any>
 16:       required: string[]
 17:     }
 18:   }
 19: }
 20: 
 21: export const CAREER_AGENT_TOOLS: AgentTool[] = [
 22:   {
 23:     type: 'function',
 24:     function: {
 25:       name: 'search_job_boards',
 26:       description: 'Searches multiple job boards for job listings matching criteria. Returns job URLs and basic metadata.',
 27:       parameters: {
 28:         type: 'object',
 29:         properties: {
 30:           job_title: {
 31:             type: 'string',
 32:             description: 'Job title to search for (e.g., "Senior Developer", "Business Development Manager")'
 33:           },
 34:           location: {
 35:             type: 'string',
 36:             description: 'City and province/state (e.g., "Toronto, ON", "New York, NY")'
 37:           },
 38:           max_results: {
 39:             type: 'number',
 40:             description: 'Maximum number of job postings to return (default: 20)'
 41:           }
 42:         },
 43:         required: ['job_title', 'location']
 44:       }
 45:     }
 46:   },
 47:   
 48:   {
 49:     type: 'function',
 50:     function: {
 51:       name: 'scrape_job_posting',
 52:       description: 'Visits a specific job posting URL and extracts the COMPLETE job description, requirements, salary, benefits, and application details.',
 53:       parameters: {
 54:         type: 'object',
 55:         properties: {
 56:           url: {
 57:             type: 'string',
 58:             description: 'Direct URL to the job posting'
 59:           },
 60:           company_name: {
 61:             type: 'string',
 62:             description: 'Company name (for context)'
 63:           }
 64:         },
 65:         required: ['url']
 66:       }
 67:     }
 68:   },
 69: 
 70:   {
 71:     type: 'function',
 72:     function: {
 73:       name: 'search_linkedin_profiles',
 74:       description: 'Searches LinkedIn for people at a specific company with specific roles (recruiters, hiring managers, HR). Returns verified profiles with LinkedIn URLs.',
 75:       parameters: {
 76:         type: 'object',
 77:         properties: {
 78:           company_name: {
 79:             type: 'string',
 80:             description: 'Company name to search'
 81:           },
 82:           role_keywords: {
 83:             type: 'array',
 84:             items: { type: 'string' },
 85:             description: 'Keywords like "recruiter", "talent acquisition", "HR manager", "hiring manager"'
 86:           }
 87:         },
 88:         required: ['company_name', 'role_keywords']
 89:       }
 90:     }
 91:   },
 92: 
 93:   {
 94:     type: 'function',
 95:     function: {
 96:       name: 'verify_company_website',
 97:       description: 'Visits company website and extracts careers page, team pages, contact emails, and official hiring information.',
 98:       parameters: {
 99:         type: 'object',
100:         properties: {
101:           company_name: {
102:             type: 'string',
103:             description: 'Company name'
104:           },
105:           website_url: {
106:             type: 'string',
107:             description: 'Company website URL (if known)'
108:           }
109:         },
110:         required: ['company_name']
111:       }
112:     }
113:   },
114: 
115:   {
116:     type: 'function',
117:     function: {
118:       name: 'validate_email',
119:       description: 'Validates if an email address is real and on the company domain (not personal email like gmail/yahoo).',
120:       parameters: {
121:         type: 'object',
122:         properties: {
123:           email: {
124:             type: 'string',
125:             description: 'Email address to validate'
126:           },
127:           company_domain: {
128:             type: 'string',
129:             description: 'Expected company domain (e.g., "bmo.com", "google.com")'
130:           }
131:         },
132:         required: ['email', 'company_domain']
133:       }
134:     }
135:   },
136: 
137:   {
138:     type: 'function',
139:     function: {
140:       name: 'get_company_intelligence',
141:       description: 'Gathers comprehensive company intelligence including news, culture, values, recent activities, and market position.',
142:       parameters: {
143:         type: 'object',
144:         properties: {
145:           company_name: {
146:             type: 'string',
147:             description: 'Company name'
148:           }
149:         },
150:         required: ['company_name']
151:       }
152:     }
153:   }
154: ]
</file>

<file path="src/lib/agents/perplexity-career-agent.ts">
  1: /**
  2:  * Perplexity Career Agent
  3:  * 
  4:  * Intelligent agent that uses function calling to reliably gather job/company intelligence
  5:  * This is the "brain" - it decides which tools to use and when
  6:  * 
  7:  * Reliability: 95%+ (vs 80-85% with prompts alone)
  8:  */
  9: 
 10: import { PerplexityService } from '../perplexity-service'
 11: import { CAREER_AGENT_TOOLS } from './agent-tools'
 12: import { AgentToolHandlers, ToolResult } from './agent-handlers'
 13: 
 14: interface AgentMessage {
 15:   role: 'user' | 'assistant' | 'tool'
 16:   content: string
 17:   tool_calls?: any[]
 18:   tool_call_id?: string
 19:   name?: string
 20: }
 21: 
 22: export class PerplexityCareerAgent {
 23:   private apiKey: string
 24:   private conversationHistory: AgentMessage[] = []
 25:   private readonly MAX_ITERATIONS = 15
 26:   private readonly TIMEOUT_MS = 120000 // 2 minutes total
 27: 
 28:   constructor(apiKey: string) {
 29:     if (!apiKey) {
 30:       throw new Error('Perplexity API key is required for agent')
 31:     }
 32:     this.apiKey = apiKey
 33:   }
 34: 
 35:   /**
 36:    * Main agent execution loop
 37:    * The agent will use tools iteratively until it has enough information
 38:    */
 39:   async run(userQuery: string): Promise<{
 40:     success: boolean
 41:     data: any
 42:     iterations: number
 43:     tools_used: string[]
 44:     duration_ms: number
 45:   }> {
 46:     const startTime = Date.now()
 47:     const toolsUsed: string[] = []
 48: 
 49:     console.log(`\n${'='.repeat(60)}`)
 50:     console.log(`[AGENT] Starting: "${userQuery}"`)
 51:     console.log(`${'='.repeat(60)}\n`)
 52: 
 53:     // Initialize conversation
 54:     this.conversationHistory = [{
 55:       role: 'user',
 56:       content: this.buildSystemPrompt() + '\n\n' + userQuery
 57:     }]
 58: 
 59:     let iteration = 0
 60: 
 61:     try {
 62:       while (iteration < this.MAX_ITERATIONS) {
 63:         iteration++
 64: 
 65:         if (Date.now() - startTime > this.TIMEOUT_MS) {
 66:           throw new Error('Agent timeout - exceeded maximum execution time')
 67:         }
 68: 
 69:         console.log(`\n--- ITERATION ${iteration} ---\n`)
 70: 
 71:         // Call Perplexity with tools
 72:         const response = await this.callPerplexityWithTools()
 73: 
 74:         const assistantMessage = response.choices[0].message
 75: 
 76:         // Check if AI wants to use tools
 77:         if (assistantMessage.tool_calls && assistantMessage.tool_calls.length > 0) {
 78:           console.log(`[AGENT] AI calling ${assistantMessage.tool_calls.length} tool(s)`)
 79: 
 80:           // Add assistant message to history
 81:           this.conversationHistory.push({
 82:             role: 'assistant',
 83:             content: assistantMessage.content || '',
 84:             tool_calls: assistantMessage.tool_calls
 85:           })
 86: 
 87:           // Execute all tool calls in parallel
 88:           const toolResults = await Promise.all(
 89:             assistantMessage.tool_calls.map(async (toolCall: any) => {
 90:               const toolName = toolCall.function.name
 91:               const toolArgs = JSON.parse(toolCall.function.arguments)
 92: 
 93:               toolsUsed.push(toolName)
 94: 
 95:               const result = await this.executeToolCall(toolName, toolArgs)
 96: 
 97:               // Add tool result to conversation
 98:               this.conversationHistory.push({
 99:                 role: 'tool',
100:                 content: JSON.stringify(result),
101:                 tool_call_id: toolCall.id,
102:                 name: toolName
103:               })
104: 
105:               return result
106:             })
107:           )
108: 
109:           console.log(`[AGENT] ${toolResults.filter(r => r.success).length}/${toolResults.length} tools succeeded`)
110: 
111:         } else {
112:           // No more tool calls - AI is done
113:           console.log(`\n[AGENT] ✓ Completed in ${iteration} iterations, ${Date.now() - startTime}ms\n`)
114: 
115:           // Parse final answer
116:           const finalData = this.parseFinalAnswer(assistantMessage.content)
117: 
118:           return {
119:             success: true,
120:             data: finalData,
121:             iterations: iteration,
122:             tools_used: [...new Set(toolsUsed)],
123:             duration_ms: Date.now() - startTime
124:           }
125:         }
126:       }
127: 
128:       throw new Error(`Max iterations (${this.MAX_ITERATIONS}) reached`)
129: 
130:     } catch (error) {
131:       console.error(`[AGENT] Error:`, (error as Error).message)
132: 
133:       return {
134:         success: false,
135:         data: { error: (error as Error).message },
136:         iterations: iteration,
137:         tools_used: toolsUsed,
138:         duration_ms: Date.now() - startTime
139:       }
140:     }
141:   }
142: 
143:   /**
144:    * Calls Perplexity API with function calling
145:    */
146:   private async callPerplexityWithTools(): Promise<any> {
147:     const response = await fetch('https://api.perplexity.ai/chat/completions', {
148:       method: 'POST',
149:       headers: {
150:         'Authorization': `Bearer ${this.apiKey}`,
151:         'Content-Type': 'application/json'
152:       },
153:       body: JSON.stringify({
154:         model: 'sonar-pro',
155:         messages: this.conversationHistory,
156:         tools: CAREER_AGENT_TOOLS,
157:         tool_choice: 'auto',
158:         temperature: 0.3,
159:         max_tokens: 4096
160:       })
161:     })
162: 
163:     if (!response.ok) {
164:       const errorText = await response.text()
165:       throw new Error(`Perplexity API error: ${response.statusText} - ${errorText}`)
166:     }
167: 
168:     return await response.json()
169:   }
170: 
171:   /**
172:    * Executes a tool call
173:    */
174:   private async executeToolCall(toolName: string, toolArgs: Record<string, any>): Promise<ToolResult> {
175:     const argsPreview = JSON.stringify(toolArgs).substring(0, 100)
176:     console.log(`[TOOL] Executing: ${toolName}(${argsPreview}...)`)
177: 
178:     try {
179:       switch (toolName) {
180:         case 'search_job_boards':
181:           return await AgentToolHandlers.search_job_boards(
182:             toolArgs.job_title,
183:             toolArgs.location,
184:             toolArgs.max_results
185:           )
186: 
187:         case 'scrape_job_posting':
188:           return await AgentToolHandlers.scrape_job_posting(
189:             toolArgs.url,
190:             toolArgs.company_name
191:           )
192: 
193:         case 'search_linkedin_profiles':
194:           return await AgentToolHandlers.search_linkedin_profiles(
195:             toolArgs.company_name,
196:             toolArgs.role_keywords
197:           )
198: 
199:         case 'verify_company_website':
200:           return await AgentToolHandlers.verify_company_website(
201:             toolArgs.company_name,
202:             toolArgs.website_url
203:           )
204: 
205:         case 'validate_email':
206:           return await AgentToolHandlers.validate_email(
207:             toolArgs.email,
208:             toolArgs.company_domain
209:           )
210: 
211:         case 'get_company_intelligence':
212:           return await AgentToolHandlers.get_company_intelligence(
213:             toolArgs.company_name
214:           )
215: 
216:         default:
217:           return {
218:             success: false,
219:             error: `Unknown tool: ${toolName}`
220:           }
221:       }
222:     } catch (error) {
223:       return {
224:         success: false,
225:         error: (error as Error).message
226:       }
227:     }
228:   }
229: 
230:   /**
231:    * System prompt that guides agent behavior
232:    */
233:   private buildSystemPrompt(): string {
234:     return `You are an intelligent career research agent. Your job: find job opportunities and hiring contacts with 95%+ accuracy.
235: 
236: CRITICAL RULES:
237: 1. ALWAYS use tools to gather information - NEVER make up data
238: 2. When searching jobs, use search_job_boards first, then scrape_job_posting for each promising job
239: 3. When finding contacts, use search_linkedin_profiles, then validate_email for each
240: 4. NEVER include jobs from "Confidential" companies
241: 5. NEVER include personal emails (gmail, yahoo, etc)
242: 6. If a tool fails, try alternate approaches (e.g., verify_company_website if LinkedIn fails)
243: 7. Return structured JSON at the end with all gathered data
244: 
245: WORKFLOW FOR JOBS:
246: 1. search_job_boards(job_title, location) → Get list of job URLs
247: 2. For top 10-20 jobs: scrape_job_posting(url) → Get full descriptions
248: 3. Filter out any Confidential companies
249: 4. Return jobs array with full descriptions
250: 
251: WORKFLOW FOR CONTACTS:
252: 1. search_linkedin_profiles(company, ["recruiter", "talent acquisition", "HR"]) → Get LinkedIn profiles
253: 2. verify_company_website(company) → Get official emails from website
254: 3. For each email: validate_email(email, company_domain) → Verify it's real
255: 4. Return ONLY verified contacts (confidence > 0.8)
256: 5. If NO verified contacts found, return empty array with helpful message
257: 
258: QUALITY STANDARDS:
259: - Job descriptions must be > 150 characters
260: - Contacts must have LinkedIn URL OR verified email
261: - NO inferred/pattern emails unless verified
262: - Explain your reasoning as you work
263: 
264: Always be thorough but efficient. Use tools in parallel when possible.`
265:   }
266: 
267:   /**
268:    * Parses final answer from AI
269:    */
270:   private parseFinalAnswer(content: string): any {
271:     try {
272:       // Try to extract JSON from markdown code blocks
273:       const codeBlockMatch = content.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/)
274:       if (codeBlockMatch) {
275:         return JSON.parse(codeBlockMatch[1])
276:       }
277: 
278:       // Try to extract raw JSON
279:       const jsonMatch = content.match(/\{[\s\S]*\}/)
280:       if (jsonMatch) {
281:         return JSON.parse(jsonMatch[0])
282:       }
283: 
284:       // Fallback: return raw content
285:       return { result: content }
286:     } catch (error) {
287:       console.warn('[AGENT] Could not parse JSON, returning raw content')
288:       return { result: content }
289:     }
290:   }
291: }
</file>

<file path="src/lib/ai-service-enterprise.ts">
  1: // Enterprise AI Service with Circuit Breakers, Caching, and Retry Logic
  2: 
  3: import { RedisCache, CacheKeys } from './redis-cache'
  4: 
  5: interface AIResponse<T = any> {
  6:   success: boolean
  7:   data?: T
  8:   error?: string
  9:   cached?: boolean
 10:   cost: number
 11:   model: string
 12: }
 13: 
 14: interface CircuitBreakerState {
 15:   failures: number
 16:   lastFailureTime: number
 17:   state: 'closed' | 'open' | 'half-open'
 18: }
 19: 
 20: export class EnterpriseAIService {
 21:   private static instance: EnterpriseAIService
 22:   private circuitBreaker: Map<string, CircuitBreakerState> = new Map()
 23:   private cache: Map<string, { data: any; expires: number }> = new Map()
 24:   private redisCache: RedisCache
 25:   
 26:   private readonly failureThreshold = 5
 27:   private readonly recoveryTimeout = 30000 // 30 seconds
 28:   private readonly cacheTTL = 3600000 // 1 hour
 29: 
 30:   private constructor() {
 31:     this.redisCache = RedisCache.getInstance()
 32:   }
 33: 
 34:   static getInstance(): EnterpriseAIService {
 35:     if (!EnterpriseAIService.instance) {
 36:       EnterpriseAIService.instance = new EnterpriseAIService()
 37:     }
 38:     return EnterpriseAIService.instance
 39:   }
 40: 
 41:   async customizeResume(params: {
 42:     resumeText: string
 43:     jobDescription: string
 44:     jobTitle: string
 45:     companyName: string
 46:     options?: any
 47:   }): Promise<AIResponse<{ customizedText: string; matchScore: number }>> {
 48:     const operationKey = 'resume-customize'
 49:     
 50:     try {
 51:       // Check circuit breaker
 52:       if (!this.isCircuitClosed(operationKey)) {
 53:         return {
 54:           success: false,
 55:           error: 'AI service temporarily unavailable',
 56:           cost: 0,
 57:           model: 'none'
 58:         }
 59:       }
 60: 
 61:       // Check cache (async now with Redis)
 62:       const cacheKey = this.generateCacheKey(params)
 63:       const cached = await this.getFromCache(cacheKey)
 64:       if (cached) {
 65:         return {
 66:           success: true,
 67:           data: cached,
 68:           cached: true,
 69:           cost: 0,
 70:           model: 'cached'
 71:         }
 72:       }
 73: 
 74:       // Make AI request with retry logic
 75:       const result = await this.makeAIRequestWithRetry(operationKey, params)
 76:       
 77:       // Cache successful result (async now with Redis)
 78:       if (result.success && result.data) {
 79:         await this.setCache(cacheKey, result.data)
 80:       }
 81:       
 82:       // Reset circuit breaker on success
 83:       this.resetCircuitBreaker(operationKey)
 84:       
 85:       return result
 86: 
 87:     } catch (error) {
 88:       // Record failure
 89:       this.recordFailure(operationKey)
 90:       
 91:       return {
 92:         success: false,
 93:         error: error instanceof Error ? error.message : 'AI service error',
 94:         cost: 0,
 95:         model: 'error'
 96:       }
 97:     }
 98:   }
 99: 
100:   private async makeAIRequestWithRetry(operationKey: string, params: any, maxRetries = 3): Promise<AIResponse> {
101:     let lastError: Error | null = null
102: 
103:     for (let attempt = 1; attempt <= maxRetries; attempt++) {
104:       try {
105:         // Exponential backoff
106:         if (attempt > 1) {
107:           const delay = Math.pow(2, attempt - 1) * 1000
108:           await new Promise(resolve => setTimeout(resolve, delay))
109:         }
110: 
111:         // Make actual AI request
112:         const result = await this.makePerplexityRequest(params)
113:         return result
114: 
115:       } catch (error) {
116:         lastError = error as Error
117:         
118:         // Don't retry on certain errors
119:         if (error instanceof Error && error.message.includes('401')) {
120:           break
121:         }
122:       }
123:     }
124: 
125:     throw lastError!
126:   }
127: 
128:   private async makePerplexityRequest(params: any): Promise<AIResponse> {
129:     const apiKey = process.env.PERPLEXITY_API_KEY
130:     if (!apiKey) {
131:       throw new Error('Perplexity API key not configured')
132:     }
133: 
134:     const response = await fetch('https://api.perplexity.ai/chat/completions', {
135:       method: 'POST',
136:       headers: {
137:         'Authorization': `Bearer ${apiKey}`,
138:         'Content-Type': 'application/json',
139:       },
140:       body: JSON.stringify({
141:         model: 'sonar-pro',
142:         messages: [
143:           { role: 'system', content: 'You are an expert resume writer and ATS optimization specialist.' },
144:           { role: 'user', content: this.buildPrompt(params) }
145:         ],
146:         max_tokens: 2000,
147:         temperature: 0.3
148:       })
149:     })
150: 
151:     if (!response.ok) {
152:       throw new Error(`API request failed: ${response.status}`)
153:     }
154: 
155:     const data = await response.json()
156:     return {
157:       success: true,
158:       data: this.parseResponse(data, params),
159:       cost: this.calculateCost(data.usage),
160:       model: 'sonar-pro'
161:     }
162:   }
163: 
164:   private isCircuitClosed(key: string): boolean {
165:     const state = this.circuitBreaker.get(key)
166:     if (!state) return true
167: 
168:     if (state.state === 'open') {
169:       if (Date.now() - state.lastFailureTime > this.recoveryTimeout) {
170:         state.state = 'half-open'
171:         return true
172:       }
173:       return false
174:     }
175: 
176:     return true
177:   }
178: 
179:   private recordFailure(key: string): void {
180:     const state = this.circuitBreaker.get(key) || { failures: 0, lastFailureTime: 0, state: 'closed' as const }
181:     
182:     state.failures++
183:     state.lastFailureTime = Date.now()
184:     
185:     if (state.failures >= this.failureThreshold) {
186:       state.state = 'open'
187:     }
188:     
189:     this.circuitBreaker.set(key, state)
190:   }
191: 
192:   private resetCircuitBreaker(key: string): void {
193:     this.circuitBreaker.set(key, { failures: 0, lastFailureTime: 0, state: 'closed' })
194:   }
195: 
196:   private generateCacheKey(params: any): string {
197:     const crypto = require('crypto')
198:     const normalized = {
199:       resume: params.resumeText.substring(0, 1000),
200:       job: params.jobDescription.substring(0, 500),
201:       title: params.jobTitle,
202:       company: params.companyName
203:     }
204:     return crypto.createHash('sha256').update(JSON.stringify(normalized)).digest('hex')
205:   }
206: 
207:   private async getFromCache(key: string): Promise<any | null> {
208:     // Try Redis first (distributed cache)
209:     if (this.redisCache.isAvailable()) {
210:       const redisKey = CacheKeys.aiResponse(key)
211:       const cached = await this.redisCache.get(redisKey)
212:       if (cached) {
213:         return cached
214:       }
215:     }
216: 
217:     // Fallback to in-memory cache
218:     const cached = this.cache.get(key)
219:     if (cached && cached.expires > Date.now()) {
220:       return cached.data
221:     }
222:     this.cache.delete(key)
223:     return null
224:   }
225: 
226:   private async setCache(key: string, data: any): Promise<void> {
227:     // Set in Redis (distributed cache) with 1-hour TTL
228:     if (this.redisCache.isAvailable()) {
229:       const redisKey = CacheKeys.aiResponse(key)
230:       await this.redisCache.set(redisKey, data, 3600) // 1 hour
231:     }
232: 
233:     // Also set in memory cache as fallback
234:     this.cache.set(key, {
235:       data,
236:       expires: Date.now() + this.cacheTTL
237:     })
238:   }
239: 
240:   private buildPrompt(params: any): string {
241:     // Use custom prompt if provided
242:     if (params.prompt) {
243:       return params.prompt
244:     }
245: 
246:     // Default resume customization prompt
247:     return `Optimize this resume for the ${params.jobTitle} position at ${params.companyName}.
248: 
249: Job Description:
250: ${params.jobDescription}
251: 
252: Current Resume:
253: ${params.resumeText}
254: 
255: Requirements:
256: - Match keywords from the job description
257: - Optimize for ATS systems
258: - Maintain authenticity
259: - Keep the same general structure
260: - Quantify achievements where possible
261: 
262: Return only the optimized resume text.`
263:   }
264: 
265:   private parseResponse(data: any, params: any): any {
266:     const customizedText = data.choices[0]?.message?.content || ''
267:     
268:     // Calculate match score based on keyword overlap
269:     const jdKeywords = this.extractKeywords(params.jobDescription)
270:     const resumeKeywords = this.extractKeywords(customizedText)
271:     const matchScore = this.calculateMatchScore(jdKeywords, resumeKeywords)
272:     
273:     return {
274:       customizedText,
275:       matchScore
276:     }
277:   }
278: 
279:   private extractKeywords(text: string): Set<string> {
280:     const words = text.toLowerCase()
281:       .replace(/[^\w\s]/g, ' ')
282:       .split(/\s+/)
283:       .filter(word => word.length > 3)
284:     return new Set(words)
285:   }
286: 
287:   private calculateMatchScore(jdKeywords: Set<string>, resumeKeywords: Set<string>): number {
288:     let matches = 0
289:     for (const keyword of jdKeywords) {
290:       if (resumeKeywords.has(keyword)) {
291:         matches++
292:       }
293:     }
294:     const score = (matches / Math.max(jdKeywords.size, 1)) * 100
295:     return Math.min(100, Math.round(score))
296:   }
297: 
298:   private calculateCost(usage: any): number {
299:     // Sonar-pro pricing: ~$1 per 1M tokens
300:     const totalTokens = (usage?.total_tokens || 0)
301:     return (totalTokens / 1000000) * 1.0
302:   }
303: 
304:   // Additional AI operations
305: 
306:   async generateCoverLetter(params: {
307:     resumeText: string
308:     jobDescription: string
309:     jobTitle: string
310:     companyName: string
311:     companyResearch?: string
312:   }): Promise<AIResponse<{ coverLetter: string }>> {
313:     const operationKey = 'cover-letter-generate'
314:     
315:     try {
316:       if (!this.isCircuitClosed(operationKey)) {
317:         return {
318:           success: false,
319:           error: 'AI service temporarily unavailable',
320:           cost: 0,
321:           model: 'none'
322:         }
323:       }
324: 
325:       const cacheKey = this.generateCacheKey(params)
326:       const cached = await this.getFromCache(cacheKey)
327:       if (cached) {
328:         return {
329:           success: true,
330:           data: cached,
331:           cached: true,
332:           cost: 0,
333:           model: 'cached'
334:         }
335:       }
336: 
337:       const prompt = `Write a compelling cover letter for the ${params.jobTitle} position at ${params.companyName}.
338: 
339: Job Description:
340: ${params.jobDescription}
341: 
342: Candidate Resume:
343: ${params.resumeText}
344: 
345: ${params.companyResearch ? `Company Research:\n${params.companyResearch}\n\n` : ''}
346: 
347: Requirements:
348: - Address specific job requirements
349: - Show genuine interest in the company
350: - Highlight relevant achievements
351: - Professional tone
352: - 300-400 words
353: 
354: Return only the cover letter text.`
355: 
356:       const result = await this.makeAIRequestWithRetry(operationKey, { ...params, prompt })
357:       
358:       if (result.success && result.data) {
359:         await this.setCache(cacheKey, result.data)
360:       }
361:       
362:       this.resetCircuitBreaker(operationKey)
363:       return result
364: 
365:     } catch (error) {
366:       this.recordFailure(operationKey)
367:       return {
368:         success: false,
369:         error: error instanceof Error ? error.message : 'AI service error',
370:         cost: 0,
371:         model: 'error'
372:       }
373:     }
374:   }
375: 
376:   async analyzeJobFit(params: {
377:     resumeText: string
378:     jobDescription: string
379:     jobTitle: string
380:   }): Promise<AIResponse<{ 
381:     matchScore: number
382:     strengths: string[]
383:     gaps: string[]
384:     recommendations: string[]
385:   }>> {
386:     const operationKey = 'job-fit-analysis'
387:     
388:     try {
389:       if (!this.isCircuitClosed(operationKey)) {
390:         return {
391:           success: false,
392:           error: 'AI service temporarily unavailable',
393:           cost: 0,
394:           model: 'none'
395:         }
396:       }
397: 
398:       const cacheKey = this.generateCacheKey(params)
399:       const cached = await this.getFromCache(cacheKey)
400:       if (cached) {
401:         return {
402:           success: true,
403:           data: cached,
404:           cached: true,
405:           cost: 0,
406:           model: 'cached'
407:         }
408:       }
409: 
410:       const prompt = `Analyze the fit between this candidate and job posting.
411: 
412: Job Title: ${params.jobTitle}
413: 
414: Job Description:
415: ${params.jobDescription}
416: 
417: Candidate Resume:
418: ${params.resumeText}
419: 
420: Provide:
421: 1. Overall match score (0-100)
422: 2. Top 3 strengths (why they're a good fit)
423: 3. Top 3 gaps (what they're missing)
424: 4. Top 3 recommendations (how to improve match)
425: 
426: Return as JSON: { "matchScore": number, "strengths": string[], "gaps": string[], "recommendations": string[] }`
427: 
428:       const result = await this.makeAIRequestWithRetry(operationKey, { ...params, prompt })
429:       
430:       if (result.success && result.data) {
431:         // Parse JSON response
432:         try {
433:           const parsed = JSON.parse(result.data.customizedText || '{}')
434:           result.data = parsed
435:           await this.setCache(cacheKey, parsed)
436:         } catch {
437:           result.data = {
438:             matchScore: 50,
439:             strengths: ['Experience in relevant field'],
440:             gaps: ['Unable to analyze - please try again'],
441:             recommendations: ['Review job description carefully']
442:           }
443:         }
444:       }
445:       
446:       this.resetCircuitBreaker(operationKey)
447:       return result
448: 
449:     } catch (error) {
450:       this.recordFailure(operationKey)
451:       return {
452:         success: false,
453:         error: error instanceof Error ? error.message : 'AI service error',
454:         cost: 0,
455:         model: 'error'
456:       }
457:     }
458:   }
459: 
460:   async generateInterviewQuestions(params: {
461:     jobDescription: string
462:     jobTitle: string
463:     companyName: string
464:   }): Promise<AIResponse<{ 
465:     technicalQuestions: string[]
466:     behavioralQuestions: string[]
467:     companyQuestions: string[]
468:   }>> {
469:     const operationKey = 'interview-questions'
470:     
471:     try {
472:       if (!this.isCircuitClosed(operationKey)) {
473:         return {
474:           success: false,
475:           error: 'AI service temporarily unavailable',
476:           cost: 0,
477:           model: 'none'
478:         }
479:       }
480: 
481:       const cacheKey = this.generateCacheKey(params)
482:       const cached = await this.getFromCache(cacheKey)
483:       if (cached) {
484:         return {
485:           success: true,
486:           data: cached,
487:           cached: true,
488:           cost: 0,
489:           model: 'cached'
490:         }
491:       }
492: 
493:       const prompt = `Generate interview questions for a ${params.jobTitle} position at ${params.companyName}.
494: 
495: Job Description:
496: ${params.jobDescription}
497: 
498: Provide:
499: 1. 5 technical/skills-based questions
500: 2. 5 behavioral (STAR method) questions
501: 3. 5 company-specific questions to ask
502: 
503: Return as JSON: { "technicalQuestions": string[], "behavioralQuestions": string[], "companyQuestions": string[] }`
504: 
505:       const result = await this.makeAIRequestWithRetry(operationKey, { ...params, prompt })
506:       
507:       if (result.success && result.data) {
508:         try {
509:           const parsed = JSON.parse(result.data.customizedText || '{}')
510:           result.data = parsed
511:           this.setCache(cacheKey, parsed)
512:         } catch {
513:           result.data = {
514:             technicalQuestions: ['Tell me about your experience with the key technologies for this role'],
515:             behavioralQuestions: ['Describe a time when you overcame a significant challenge'],
516:             companyQuestions: ['What are the team\'s current priorities?']
517:           }
518:         }
519:       }
520:       
521:       this.resetCircuitBreaker(operationKey)
522:       return result
523: 
524:     } catch (error) {
525:       this.recordFailure(operationKey)
526:       return {
527:         success: false,
528:         error: error instanceof Error ? error.message : 'AI service error',
529:         cost: 0,
530:         model: 'error'
531:       }
532:     }
533:   }
534: 
535:   // Clean up expired cache entries
536:   public cleanup(): void {
537:     const now = Date.now()
538:     for (const [key, value] of this.cache.entries()) {
539:       if (value.expires < now) {
540:         this.cache.delete(key)
541:       }
542:     }
543:   }
544: 
545:   // Get statistics
546:   public getStats(): {
547:     cacheSize: number
548:     circuitBreakerStates: Record<string, CircuitBreakerState>
549:     cacheHitRate?: number
550:   } {
551:     const states: Record<string, CircuitBreakerState> = {}
552:     for (const [key, value] of this.circuitBreaker.entries()) {
553:       states[key] = value
554:     }
555: 
556:     return {
557:       cacheSize: this.cache.size,
558:       circuitBreakerStates: states
559:     }
560:   }
561: 
562:   // Clear all caches
563:   public clearCache(): void {
564:     this.cache.clear()
565:   }
566: }
</file>

<file path="src/lib/ai-service.ts">
   1: import { PerplexityService } from './perplexity-service'
   2: import crypto from 'crypto';
   3: import { extractKeywords, calculateMatchScore } from './utils';
   4: import { logAIUsage } from './observability'
   5: 
   6: // Instantiate with a safe fallback so build doesn't fail when OPENAI_API_KEY is not set.
   7: // At runtime, provide a real key via env; calls will fail if the placeholder is used.
   8: // Lazily handle missing API key to avoid build-time failures. At runtime, callers
   9: // should gracefully handle null client or catch errors and provide fallbacks.
  10: const OPENAI_KEYS: string[] = (process.env.OPENAI_API_KEYS || process.env.OPENAI_API_KEY || '')
  11:   .split(',')
  12:   .map(k => k.trim())
  13:   .filter(Boolean)
  14: const OPENAI_BASE_URL = process.env.OPENAI_BASE_URL || undefined
  15: 
  16: function createOpenAIClient(_apiKey: string): any {
  17:   // disabled after Perplexity migration
  18:   return null
  19: }
  20: 
  21: // Retained default client for backward-compat reads, but do not use directly for calls
  22: const openai: any = null;
  23: 
  24: // OpenAI assistant IDs deprecated after Perplexity migration
  25: const ASSISTANT_JOB_ANALYSIS_ID = undefined as unknown as string | undefined;
  26: const ASSISTANT_RESUME_TAILOR_ID = undefined as unknown as string | undefined;
  27: const ASSISTANT_COVER_LETTER_ID = undefined as unknown as string | undefined;
  28: const ASSISTANT_INTERVIEW_PREP_ID = undefined as unknown as string | undefined;
  29: const ASSISTANT_SALARY_COACH_ID = undefined as unknown as string | undefined;
  30: const ASSISTANT_COMPANY_INSIGHTS_ID = undefined as unknown as string | undefined;
  31: 
  32: // Runtime controls
  33: const DEFAULT_MODEL = process.env.OPENAI_DEFAULT_MODEL || 'gpt-4o-mini';
  34: const AI_TIMEOUT_MS = Number(process.env.AI_TIMEOUT_MS || 20000);
  35: const DEMO_MODE = false;
  36: const CACHE_TTL_MS = Number(process.env.AI_CACHE_TTL_MS || 10 * 60 * 1000);
  37: 
  38: // Simple in-memory cache (ephemeral). Optionally back with Redis if configured.
  39: type CacheEntry = { expiresAt: number; value: any };
  40: const aiCache: Map<string, CacheEntry> = new Map();
  41: let redisClient: any = null
  42: if (process.env.REDIS_URL) {
  43:   try {
  44:     // Lazy import to avoid build-time issues
  45:     const { createClient } = require('redis')
  46:     redisClient = createClient({ url: process.env.REDIS_URL })
  47:     redisClient.on('error', () => {})
  48:     redisClient.connect().catch(()=>{})
  49:   } catch {}
  50: }
  51: 
  52: async function getCacheFromRedis(key: string): Promise<any | undefined> {
  53:   if (!redisClient) return undefined
  54:   try {
  55:     const raw = await redisClient.get(`ai:${key}`)
  56:     if (!raw) return undefined
  57:     return JSON.parse(raw)
  58:   } catch {
  59:     return undefined
  60:   }
  61: }
  62: 
  63: function getCache(key: string): any | undefined {
  64:   const entry = aiCache.get(key);
  65:   if (!entry) return undefined;
  66:   if (Date.now() > entry.expiresAt) {
  67:     aiCache.delete(key);
  68:     return undefined;
  69:   }
  70:   return entry.value;
  71: }
  72: 
  73: function setCache(key: string, value: any) {
  74:   aiCache.set(key, { expiresAt: Date.now() + CACHE_TTL_MS, value });
  75:   if (redisClient) {
  76:     redisClient.setEx(`ai:${key}`, Math.floor(CACHE_TTL_MS/1000), JSON.stringify(value)).catch(()=>{})
  77:   }
  78: }
  79: 
  80: function makeKey(prefix: string, payload: string) {
  81:   return `${prefix}:${crypto.createHash('sha256').update(payload).digest('hex')}`;
  82: }
  83: 
  84: function isInvalidKeyError(error: any): boolean {
  85:   const msg = (error?.message || '').toString().toLowerCase()
  86:   return msg.includes('incorrect api key') || msg.includes('invalid_api_key') || msg.includes('api key')
  87: }
  88: 
  89: function isQuotaOrKeyError(error: any): boolean {
  90:   const code = (error && (error.code || error.status))
  91:   const msg = (error?.message || '').toString().toLowerCase()
  92:   return code === 'insufficient_quota' || code === 429 || msg.includes('quota') || isInvalidKeyError(error)
  93: }
  94: 
  95: async function withTimeout<T>(promise: Promise<T>, timeoutMs: number): Promise<T> {
  96:   let timer: NodeJS.Timeout;
  97:   const timeoutPromise = new Promise<never>((_, reject) => {
  98:     timer = setTimeout(() => reject(new Error('AI request timed out')), timeoutMs);
  99:   });
 100:   return Promise.race([promise, timeoutPromise]).finally(() => clearTimeout(timer!));
 101: }
 102: 
 103: async function runWithOpenAI<T>(call: (client: any) => Promise<T>): Promise<T> {
 104:   if (!OPENAI_KEYS.length) throw new Error('OPENAI_API_KEY missing')
 105:   let lastErr: any
 106:   for (let i = 0; i < OPENAI_KEYS.length; i++) {
 107:     const key = OPENAI_KEYS[i]
 108:     const client = createOpenAIClient(key)
 109:     // simple retry for transient 429 rate_limit (not insufficient_quota)
 110:     for (let attempt = 0; attempt < 2; attempt++) {
 111:       try {
 112:         return await call(client)
 113:       } catch (e: any) {
 114:         lastErr = e
 115:         const msg = (e?.message || '').toString().toLowerCase()
 116:         const code = e?.code || e?.status
 117:         const quota = code === 'insufficient_quota' || code === 429 && msg.includes('quota') || msg.includes('insufficient_quota')
 118:         const rate = code === 429 && !quota
 119:         if (quota) break // try next key
 120:         if (rate && attempt === 0) { await new Promise(r=>setTimeout(r, 600)); continue }
 121:         break
 122:       }
 123:     }
 124:   }
 125:   throw lastErr || new Error('OpenAI call failed')
 126: }
 127: 
 128: async function chatCreate(args: any): Promise<any> {
 129:   // Route all generic chat calls through Perplexity for consistency
 130:   const ppx = new PerplexityService()
 131:   const messages = Array.isArray(args?.messages) ? args.messages : []
 132:   const systemMsg = (messages.find((m: any) => m && m.role === 'system')?.content || '').toString()
 133:   const userMsg = messages
 134:     .filter((m: any) => m && (m.role === 'user' || m.role === 'assistant'))
 135:     .map((m: any) => (m.content || '').toString())
 136:     .join('\n\n')
 137:     .trim()
 138:   const maxTokens = typeof args?.max_tokens === 'number' ? args.max_tokens : 1200
 139:   const temperature = typeof args?.temperature === 'number' ? args.temperature : 0.3
 140: 
 141:   const result = await withTimeout(ppx.makeRequest(systemMsg, userMsg, { maxTokens, temperature }), AI_TIMEOUT_MS)
 142:   const content = (result as any)?.content || ''
 143:   // Return an OpenAI-like shape so existing callers remain unchanged
 144:   return { choices: [{ message: { content } }] }
 145: }
 146: 
 147: // AI Prompts for different operations
 148: export const AI_PROMPTS = {
 149:   RESUME_TAILORING: `You are a senior resume strategist. Rewrite ONLY using details from the Original Resume. Do not invent employers, dates, titles, or achievements.
 150: 
 151: Follow 2025 best practices (recruiter eye-tracking + ATS):
 152: - Single-column, reverse-chronological, left-aligned for F-pattern scanning
 153: - Section order: Contact, Professional Summary (2–3 lines), Core Competencies (8–12 keywords), Professional Experience, Education, Certifications
 154: - Use bullets with: Action Verb + Specific Task + Quantified Result + Timeframe
 155:  - Bullets must use professional bullet characters (•) with proper spacing, not hyphens (-) or asterisks (*)
 156: - Naturally weave relevant keywords without stuffing; vary sentence length; avoid generic AI phrasing
 157: - No graphics/tables/headers/footers/placeholders; plain text output only
 158: - Do NOT copy sentences from Job Description; use it only to prioritize content from the Original Resume
 159: - Never insert the target company name unless already present in the Original Resume
 160: 
 161: Target Context:
 162: {jobDescription}
 163: 
 164: Original Resume (single source of truth):
 165: {resumeText}
 166: 
 167: Return a polished, human-sounding resume as plain text.`,
 168: 
 169:   JOB_ANALYSIS: `Analyze this job description and extract key information. Provide a structured analysis in JSON format.
 170: 
 171: Job Description: {jobDescription}
 172: 
 173: Please respond with a JSON object containing:
 174: {
 175:   "jobTitle": "extracted or provided job title",
 176:   "companyName": "extracted or provided company name",
 177:   "keyRequirements": ["list of 5-8 most important requirements"],
 178:   "preferredSkills": ["list of 5-8 preferred technical skills"],
 179:   "responsibilities": ["list of 4-6 main job responsibilities"],
 180:   "companyCulture": ["list of 3-5 inferred company culture aspects"],
 181:   "salaryRange": "estimated salary range if mentioned, otherwise null",
 182:   "experienceLevel": "entry/mid/senior level based on requirements",
 183:   "educationRequirements": ["required degrees or certifications"],
 184:   "remoteWorkPolicy": "remote/hybrid/onsite/on-site"
 185: }
 186: 
 187: Focus on technical skills, experience requirements, and cultural indicators.`,
 188: 
 189: 
 190:   COMPANY_INSIGHTS: `Based on this company research data, generate personalized insights for a job application:
 191: 
 192: Company Data: {companyData}
 193: Job Title: {jobTitle}
 194: Industry: {industry}
 195: 
 196: Generate 3-5 key talking points that demonstrate knowledge of the company and genuine interest in their mission, values, and culture. Make these points specific and reference actual company information.`,
 197: 
 198:   FOLLOW_UP_EMAIL: `Create a professional follow-up email for a job application that:
 199: - References specific aspects of our previous interaction
 200: - Includes relevant company research insights
 201: - Maintains professional tone while sounding human (vary sentence starts, keep it short)
 202: - Includes a clear call-to-action and offers value (additional info, availability)
 203: 
 204: Context:
 205: - Applied for: {jobTitle}
 206: - Company: {companyName}
 207: - Days since application: {daysSinceApplication}
 208: - Application highlights: {applicationHighlights}
 209: - Company insights: {companyInsights}
 210: 
 211: Return strictly with a first line "Subject: ..." then the email body on subsequent lines. Keep the email concise (80-140 words), specific, and polite.`,
 212: 
 213:   RESUME_IMPROVEMENT_SUGGESTIONS: `Analyze this resume and provide specific improvement suggestions for the given job description:
 214: 
 215: Job Description: {jobDescription}
 216: Resume: {resumeText}
 217: 
 218: Provide 5-7 specific, actionable suggestions to improve the resume's effectiveness for this specific role. Focus on:
 219: - Keyword optimization
 220: - Achievement quantification
 221: - Skills alignment
 222: - Experience relevance
 223: - ATS compatibility`
 224: ,
 225:   SUCCESS_SCORE: `You are an expert recruiter. Score the probability of success for this application (0-100).
 226: 
 227: Return JSON strictly in this shape:
 228: {
 229:   "score": number,                      // 0-100
 230:   "reasons": string[3-6],              // why this score
 231:   "riskFactors": string[2-5],          // risks to address
 232:   "improvements": string[3-6]          // concrete actions to raise score
 233: }
 234: 
 235: Consider:
 236: - Job match (keywords, seniority, responsibilities)
 237: - Resume alignment and quantified impact
 238: - Company culture fit (if provided)
 239: - Signal quality (job source, clarity)
 240: - Any red flags
 241: 
 242: Job Description:\n{jobDescription}\n\nResume:\n{resumeText}\n\nCompany Data (optional):\n{companyData}`
 243: };
 244: 
 245: export interface JobAnalysisResult {
 246:   jobTitle: string;
 247:   companyName: string;
 248:   keyRequirements: string[];
 249:   preferredSkills: string[];
 250:   responsibilities: string[];
 251:   companyCulture: string[];
 252:   salaryRange?: string;
 253:   experienceLevel: string;
 254:   educationRequirements: string[];
 255:   remoteWorkPolicy: string;
 256: }
 257: 
 258: export interface ResumeCustomizationResult {
 259:   customizedResume: string;
 260:   matchScore: number;
 261:   improvements: string[];
 262:   suggestions: string[];
 263: }
 264: 
 265: export interface CoverLetterResult {
 266:   coverLetter: string;
 267:   keyPoints: string[];
 268:   wordCount: number;
 269: }
 270: 
 271: export interface SalaryNegotiationPlan {
 272:   targetRange: { base: string; totalComp: string };
 273:   justifications: string[];
 274:   tradeoffs: string[];
 275:   negotiationEmail: { subject: string; body: string };
 276:   talkingPoints: string[];
 277: }
 278: 
 279: export interface CompanyInsightsResult {
 280:   talkingPoints: string[];
 281:   keyValues: string[];
 282:   cultureFit: string[];
 283: }
 284: 
 285: export class AIService {
 286:   static async atsScore(resumeText: string, jobAnalysisOrDescription: any, system: 'generic'|'workday'|'greenhouse'|'lever'|'taleo'|'icims' = 'generic'): Promise<{ score: number; matchedKeywords: string[]; missingKeywords: string[]; keywordDensity: Record<string, number>; suggestions: string[] }> {
 287:     try {
 288:       // Reuse existing ATS endpoint logic by making an internal call path if available
 289:       const analysis = typeof jobAnalysisOrDescription === 'string' ? await this.analyzeJobDescription(jobAnalysisOrDescription) : jobAnalysisOrDescription
 290:       // Quick local scoring mirroring /api/insights/ats/score
 291:       const tokenize = (t: string) => (t || '').toLowerCase().replace(/[^a-z0-9\s]+/g, ' ').split(/\s+/).filter(Boolean)
 292:       const tokens = tokenize(resumeText)
 293:       const tokenSet = new Set(tokens)
 294:       const targets: string[] = [
 295:         ...((analysis?.analysis?.keyRequirements) || analysis?.keyRequirements || []),
 296:         ...((analysis?.analysis?.preferredSkills) || analysis?.preferredSkills || []),
 297:         ...(analysis?.keywords || [])
 298:       ].map((s: string) => (s || '').toLowerCase()).filter(Boolean)
 299:       const expanded = Array.from(new Set(targets.flatMap((t) => t.split(/[,;•\-]/).map(p => p.trim()).filter(p => p.length > 1))))
 300:       const matched: string[] = []
 301:       const missing: string[] = []
 302:       const density: Record<string, number> = {}
 303:       for (const kw of expanded) {
 304:         const parts = kw.split(/\s+/)
 305:         const present = parts.every(p => tokenSet.has(p))
 306:         if (present) matched.push(kw); else missing.push(kw)
 307:         const first = parts[0]
 308:         density[kw] = tokens.filter(t => t === first).length / Math.max(tokens.length, 1)
 309:       }
 310:       const coverage = matched.length / Math.max(expanded.length || 1, 1)
 311:       const lengthPenalty = Math.min(0.15, Math.max(0, (tokens.length - 1200) / 6000))
 312:       const repetitionPenalty = Math.min(0.15, matched.length ? 0 : 0.1)
 313:       let score = Math.round(Math.max(0, Math.min(100, (coverage * 100) * 0.7 + 30 * (1 - lengthPenalty - repetitionPenalty))))
 314:       // Small ATS system weight adjustments (placeholder heuristics)
 315:       if (system === 'workday') score = Math.max(0, Math.min(100, score + 2))
 316:       if (system === 'lever') score = Math.max(0, Math.min(100, score + 1))
 317:       const suggestions: string[] = []
 318:       if (coverage < 0.8) suggestions.push('Add missing high-value keywords naturally in bullets')
 319:       if (lengthPenalty > 0.1) suggestions.push('Trim low-impact content to improve ATS parsing')
 320:       if (matched.length < 5) suggestions.push('Front-load quantified achievements that match role must-haves')
 321:       return { score, matchedKeywords: matched.slice(0, 50), missingKeywords: missing.slice(0, 50), keywordDensity: density, suggestions }
 322:     } catch {
 323:       return { score: 0, matchedKeywords: [], missingKeywords: [], keywordDensity: {}, suggestions: [] }
 324:     }
 325:   }
 326:   // Helpers to post-process AI outputs
 327:   private static stripMarkdown(input: string): string {
 328:     let out = input
 329:     // Remove bold/italic markers
 330:     out = out.replace(/\*\*(.*?)\*\*/g, '$1')
 331:     out = out.replace(/\*(.*?)\*/g, '$1')
 332:     out = out.replace(/__(.*?)__/g, '$1')
 333:     out = out.replace(/_(.*?)_/g, '$1')
 334:     // Remove headings like ###, ***, etc.
 335:     out = out.replace(/^\s*#{1,6}\s+/gm, '')
 336:     out = out.replace(/^\s*-\s*\[.?\]\s*/gm, '')
 337:     return out
 338:   }
 339:   private static normalizeBullets(input: string): string {
 340:     const lines = input.split(/\r?\n/)
 341:     const out = lines.map(l => {
 342:       const t = l.trimStart()
 343:       if (/^[*-]\s+/.test(t) || /^[–—-]\s+/.test(t)) return '• ' + t.replace(/^([*–—-])\s+/, '')
 344:       // bullets like "•" already
 345:       return l
 346:     })
 347:     return out.join('\n')
 348:   }
 349:   private static tidyWhitespace(input: string): string {
 350:     // Collapse >2 blank lines to just 2, trim trailing spaces
 351:     return input.replace(/[ \t]+$/gm, '').replace(/\n{3,}/g, '\n\n').trim()
 352:   }
 353:   // Bridge assistant tool calls to our REST endpoints and local model helpers
 354:   private static async handleAssistantToolCalls(threadId: string, run: any, context?: any): Promise<Array<{ tool_call_id: string; output: string }>> {
 355:     const toolCalls = run.required_action?.submit_tool_outputs?.tool_calls || []
 356:     const outputs: Array<{ tool_call_id: string; output: string }> = []
 357:     for (const tc of toolCalls) {
 358:       const name = tc.function?.name as string
 359:       let args: any = {}
 360:       try { args = JSON.parse(tc.function?.arguments || '{}') } catch { args = {} }
 361:       try {
 362:         // 1) Built-in tools we already support
 363:         if (name === 'analyze_job_description') {
 364:           const jd = typeof args.jobDescription === 'string' && args.jobDescription.trim().length > 0 ? args.jobDescription : (context?.jobDescription || '')
 365:           const result = await this.analyzeJobDescriptionWithModel(jd)
 366:           outputs.push({ tool_call_id: tc.id, output: JSON.stringify(result) })
 367:           continue
 368:         }
 369:         if (name === 'tailor_resume') {
 370:           const rd = typeof args.resumeText === 'string' && args.resumeText.trim().length > 0 ? args.resumeText : (context?.resumeText || '')
 371:           const jd = typeof args.jobDescription === 'string' && args.jobDescription.trim().length > 0 ? args.jobDescription : (context?.jobDescription || '')
 372:           const tone = (context?.tone || 'professional') as 'professional' | 'enthusiastic' | 'concise'
 373:           const result = await this.customizeResumeWithModel(rd, jd, undefined, undefined, tone)
 374:           outputs.push({ tool_call_id: tc.id, output: result.customizedResume })
 375:           continue
 376:         }
 377:         if (name === 'generate_cover_letter') {
 378:           const title = typeof args.jobTitle === 'string' ? args.jobTitle : (context?.jobTitle || '')
 379:           const company = typeof args.companyName === 'string' ? args.companyName : (context?.companyName || '')
 380:           const jd = typeof args.jobDescription === 'string' ? args.jobDescription : (context?.jobDescription || '')
 381:           const rt = typeof args.resumeText === 'string' ? args.resumeText : (context?.resumeText || '')
 382:           const cdRaw = typeof args.companyData === 'string' ? args.companyData : (context?.companyData || '')
 383:           const tone = (args.tone || context?.tone || 'professional') as 'professional' | 'casual' | 'enthusiastic'
 384:           const length = (args.length || context?.length || 'medium') as 'short' | 'medium' | 'long'
 385:           const result = await this.generateCoverLetter(title, company, jd, rt, cdRaw ? { raw: cdRaw } : undefined, tone, length)
 386:           outputs.push({ tool_call_id: tc.id, output: result.coverLetter })
 387:           continue
 388:         }
 389:         if (name === 'generate_negotiation_plan') {
 390:           const merged = {
 391:             jobTitle: args.jobTitle || context?.jobTitle,
 392:             companyName: args.companyName || context?.companyName,
 393:             location: args.location || context?.location || '',
 394:             seniority: args.seniority || context?.seniority || 'mid',
 395:             offer: args.offer || context?.offer || { base: 'TBD' },
 396:             marketData: args.marketData || context?.marketData,
 397:             candidateHighlights: args.candidateHighlights || context?.candidateHighlights || '',
 398:             constraints: args.constraints || context?.constraints,
 399:             tone: args.tone || context?.tone || 'professional'
 400:           }
 401:           const plan = await this.generateSalaryNegotiationPlanWithModel(merged as any)
 402:           outputs.push({ tool_call_id: tc.id, output: JSON.stringify(plan) })
 403:           continue
 404:         }
 405: 
 406:         // 2) Company OSINT tools -> our REST endpoints
 407:         if (name === 'scrape_linkedin_company' || name === 'identify_hiring_contacts' || name === 'scrape_glassdoor_insights') {
 408:           const payload = { companyName: args.companyName, jobTitle: args.roleType || args.jobTitle, location: args.location }
 409:           const res = await fetch('/api/v2/company/deep-research', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) })
 410:           const json = await res.json()
 411:           if (name === 'identify_hiring_contacts') {
 412:             const contacts = (json.companyData?.hiringContacts || json.research?.keyContacts || [])
 413:             outputs.push({ tool_call_id: tc.id, output: JSON.stringify(contacts) })
 414:           } else if (name === 'scrape_glassdoor_insights') {
 415:             const out = {
 416:               glassdoorRating: json.companyData?.glassdoorRating ?? null,
 417:               glassdoorReviews: json.companyData?.glassdoorReviews ?? null,
 418:               culture: json.companyData?.culture ?? [],
 419:               benefits: json.companyData?.benefits ?? []
 420:             }
 421:             outputs.push({ tool_call_id: tc.id, output: JSON.stringify(out) })
 422:           } else {
 423:             outputs.push({ tool_call_id: tc.id, output: JSON.stringify(json.companyData || json.research || {}) })
 424:           }
 425:           continue
 426:         }
 427:         if (name === 'analyze_company_financials') {
 428:           const res = await fetch('/api/v2/company/financials', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ companyName: args.companyName }) })
 429:           const json = await res.json()
 430:           outputs.push({ tool_call_id: tc.id, output: JSON.stringify(json.financials || {}) })
 431:           continue
 432:         }
 433:         if (name === 'scrape_company_news') {
 434:           const res = await fetch('/api/v2/company/google-intel', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ companyName: args.companyName }) })
 435:           const json = await res.json()
 436:           outputs.push({ tool_call_id: tc.id, output: JSON.stringify(json.intel?.news || []) })
 437:           continue
 438:         }
 439:         if (name === 'research_interviewer_profiles') {
 440:           const res = await fetch('/api/v2/interviewers/profile', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ names: args.interviewerNames || [], companyName: args.companyName }) })
 441:           const json = await res.json()
 442:           outputs.push({ tool_call_id: tc.id, output: JSON.stringify(json.profiles || []) })
 443:           continue
 444:         }
 445: 
 446:         // Unknown tool: return empty
 447:         outputs.push({ tool_call_id: tc.id, output: '{}' })
 448:       } catch {
 449:         outputs.push({ tool_call_id: tc.id, output: '{}' })
 450:       }
 451:     }
 452:     return outputs
 453:   }
 454:   static async generateText(prompt: string): Promise<string> {
 455:     // Minimal helper for quick text generations where assistants are not required
 456:     const completion = await chatCreate({
 457:       model: DEFAULT_MODEL,
 458:       messages: [
 459:         { role: 'system', content: 'You write concise outputs. If JSON requested, return valid JSON only.' },
 460:         { role: 'user', content: prompt }
 461:       ],
 462:       temperature: 0.2,
 463:       max_tokens: 800,
 464:     })
 465:     return completion.choices[0]?.message?.content?.trim() || ''
 466:   }
 467:   static async analyzeJobDescription(jobDescription: string): Promise<JobAnalysisResult> {
 468:     try {
 469:       // Perplexity-only: always use model path
 470:       return await this.analyzeJobDescriptionWithModel(jobDescription);
 471:     } catch (err: any) {
 472:       // Fallback to heuristic/minimal result on quota or invalid/missing API key
 473:       if (DEMO_MODE || isQuotaOrKeyError(err)) {
 474:         return {
 475:           jobTitle: 'Unknown Position',
 476:           companyName: 'Unknown Company',
 477:           keyRequirements: extractKeywords(jobDescription).slice(0, 6),
 478:           preferredSkills: [],
 479:           responsibilities: [],
 480:           companyCulture: ['Collaborative', 'Ownership', 'Customer-first'],
 481:           experienceLevel: 'mid',
 482:           educationRequirements: [],
 483:           remoteWorkPolicy: 'hybrid',
 484:           salaryRange: undefined,
 485:         }
 486:       }
 487:       throw err
 488:     }
 489:   }
 490: 
 491:   static async generateInterviewCoach(
 492:     jobTitle: string,
 493:     seniority: 'entry' | 'mid' | 'senior',
 494:     resumeHighlights: string,
 495:     companyData?: any,
 496:     focusAreas?: string[],
 497:     numBehavioral?: number,
 498:     numTechnical?: number
 499:   ): Promise<{ behavioralQuestions: string[]; technicalQuestions: string[]; starGuidance: string[]; companySpecificAngles: string[] }> {
 500:     if (DEMO_MODE) {
 501:       return {
 502:         behavioralQuestions: [
 503:           'Tell me about a time you led a project.',
 504:           'Describe a conflict you resolved on your team.'
 505:         ],
 506:         technicalQuestions: [
 507:           'Design a rate limiter for an API.',
 508:           'Explain database indexing and query optimization.'
 509:         ],
 510:         starGuidance: ['State context in 1-2 lines', 'Quantify impact', 'Tie to role'],
 511:         companySpecificAngles: ['Connect achievements to product goals', 'Show ownership and bias for action']
 512:       }
 513:     }
 514:     const system = 'You are an interview coach. Return strict JSON: {behavioralQuestions[], technicalQuestions[], starGuidance[], companySpecificAngles[]}'
 515:     const user = `Generate interview prep for ${jobTitle} (${seniority}).\nFocus areas: ${(focusAreas||[]).join(', ')}\nResume:\n${resumeHighlights}\nCompany:\n${companyData ? JSON.stringify(companyData, null, 2) : 'N/A'}\nCounts: behavioral=${numBehavioral||6}, technical=${numTechnical||6}`
 516:     const text = await this.generateText(`${system}\n\n${user}`)
 517:     try {
 518:       const parsed = JSON.parse(text)
 519:       return {
 520:         behavioralQuestions: Array.isArray(parsed.behavioralQuestions) ? parsed.behavioralQuestions : [],
 521:         technicalQuestions: Array.isArray(parsed.technicalQuestions) ? parsed.technicalQuestions : [],
 522:         starGuidance: Array.isArray(parsed.starGuidance) ? parsed.starGuidance : [],
 523:         companySpecificAngles: Array.isArray(parsed.companySpecificAngles) ? parsed.companySpecificAngles : [],
 524:       }
 525:     } catch {
 526:       return { behavioralQuestions: [], technicalQuestions: [], starGuidance: [], companySpecificAngles: [] }
 527:     }
 528:   }
 529: 
 530:   private static async analyzeJobDescriptionWithModel(jobDescription: string): Promise<JobAnalysisResult> {
 531:     if (DEMO_MODE) {
 532:       return {
 533:         jobTitle: 'Software Engineer',
 534:         companyName: 'Acme Inc',
 535:         keyRequirements: ['JavaScript', 'React', 'Node.js', 'APIs', 'Testing'],
 536:         preferredSkills: ['TypeScript', 'CI/CD', 'Cloud'],
 537:         responsibilities: ['Build features', 'Write tests', 'Code reviews'],
 538:         companyCulture: ['Collaborative', 'Ownership', 'Customer-first'],
 539:         experienceLevel: 'mid',
 540:         educationRequirements: ['BS CS or equivalent experience'],
 541:         remoteWorkPolicy: 'hybrid',
 542:         salaryRange: '120k-150k',
 543:       };
 544:     }
 545: 
 546:     const cacheKey = makeKey('job-analysis', jobDescription);
 547:     const cached = getCache(cacheKey);
 548:     if (cached) return cached as JobAnalysisResult;
 549:     const rcached = await getCacheFromRedis(cacheKey)
 550:     if (rcached) return rcached as JobAnalysisResult
 551:     try {
 552:       const prompt = AI_PROMPTS.JOB_ANALYSIS.replace('{jobDescription}', jobDescription);
 553: 
 554:       const completion: any = await chatCreate({
 555:         model: DEFAULT_MODEL,
 556:         messages: [
 557:           {
 558:             role: 'system',
 559:             content: 'You are a senior HR professional and job market expert. Analyze job descriptions with deep understanding of industry requirements and company culture.'
 560:           },
 561:           {
 562:             role: 'user',
 563:             content: prompt
 564:           }
 565:         ],
 566:         temperature: 0.3,
 567:         max_tokens: 1500,
 568:       });
 569: 
 570:       let analysisText = completion.choices[0]?.message?.content?.trim();
 571:       logAIUsage('job-analysis', undefined, completion)
 572:       if (!analysisText) {
 573:         throw new Error('Failed to get analysis from OpenAI');
 574:       }
 575: 
 576:       // Strip markdown fences if present
 577:       if (/^```/m.test(analysisText)) {
 578:         const match = analysisText.match(/```[a-zA-Z]*\n([\s\S]*?)\n```/)
 579:         if (match && match[1]) analysisText = match[1].trim()
 580:       }
 581: 
 582:       let analysis: JobAnalysisResult;
 583:       try {
 584:         analysis = JSON.parse(analysisText);
 585:       } catch (parseError) {
 586:         console.error('Failed to parse OpenAI response:', analysisText);
 587:         analysis = {
 588:           jobTitle: 'Unknown Position',
 589:           companyName: 'Unknown Company',
 590:           keyRequirements: extractKeywords(jobDescription).slice(0, 5),
 591:           preferredSkills: [],
 592:           responsibilities: [],
 593:           companyCulture: [],
 594:           experienceLevel: 'mid',
 595:           educationRequirements: [],
 596:           remoteWorkPolicy: 'hybrid',
 597:         };
 598:       }
 599: 
 600:       setCache(cacheKey, analysis);
 601:       return analysis;
 602:     } catch (error: any) {
 603:       console.error('Job analysis error:', error);
 604:       if (DEMO_MODE || isInvalidKeyError(error)) {
 605:         return {
 606:           jobTitle: 'Unknown Position',
 607:           companyName: 'Unknown Company',
 608:           keyRequirements: extractKeywords(jobDescription).slice(0, 6),
 609:           preferredSkills: [],
 610:           responsibilities: [],
 611:           companyCulture: ['Collaborative', 'Ownership', 'Customer-first'],
 612:           experienceLevel: 'mid',
 613:           educationRequirements: [],
 614:           remoteWorkPolicy: 'hybrid',
 615:           salaryRange: undefined,
 616:         }
 617:       }
 618:       throw new Error('Failed to analyze job description');
 619:     }
 620:   }
 621: 
 622:   private static async analyzeJobDescriptionWithAssistant(jobDescription: string): Promise<JobAnalysisResult> {
 623:     if (!ASSISTANT_JOB_ANALYSIS_ID) {
 624:       return this.analyzeJobDescriptionWithModel(jobDescription);
 625:     }
 626: 
 627:     // Create a thread and add the user's job description
 628:     const thread = await openai.beta.threads.create({});
 629:     await openai.beta.threads.messages.create(thread.id, {
 630:       role: 'user',
 631:       content: jobDescription,
 632:     });
 633: 
 634:     // Start a run for the assistant
 635:     let run: any = await openai.beta.threads.runs.create(thread.id, {
 636:       assistant_id: ASSISTANT_JOB_ANALYSIS_ID as string,
 637:     });
 638: 
 639:     // Poll for tool calls or completion
 640:     // eslint-disable-next-line no-constant-condition
 641:     while (true) {
 642:       if (run.status === 'requires_action' && run.required_action?.submit_tool_outputs?.tool_calls?.length) {
 643:         const toolCalls = run.required_action.submit_tool_outputs.tool_calls;
 644: 
 645:         const toolOutputs = await Promise.all(
 646:           toolCalls.map(async (toolCall: any) => {
 647:             try {
 648:               const fn = toolCall.function;
 649:               if (fn?.name === 'analyze_job_description') {
 650:                 const args = JSON.parse(fn.arguments || '{}');
 651:                 const jd = typeof args.jobDescription === 'string' ? args.jobDescription : jobDescription;
 652:                 const result = await this.analyzeJobDescriptionWithModel(jd);
 653:                 return { tool_call_id: toolCall.id, output: JSON.stringify(result) };
 654:               }
 655:               // Unknown tool: return empty object
 656:               return { tool_call_id: toolCall.id, output: '{}' };
 657:             } catch (e) {
 658:               return { tool_call_id: toolCall.id, output: '{}' };
 659:             }
 660:           })
 661:         );
 662: 
 663:         run = await openai.beta.threads.runs.submitToolOutputs(
 664:           thread.id,
 665:           run.id,
 666:           { tool_outputs: toolOutputs }
 667:         );
 668:         // Continue loop after submitting outputs
 669:         continue;
 670:       }
 671: 
 672:       if (run.status === 'completed') {
 673:         const messages = await openai.beta.threads.messages.list(thread.id);
 674:         const last = messages.data.find((m: any) => m.role === 'assistant');
 675:         const content = last?.content?.[0];
 676:         const text = (content && 'text' in content) ? content.text.value : undefined;
 677:         if (!text) {
 678:           // If the assistant responded via tool only, return model result
 679:           return this.analyzeJobDescriptionWithModel(jobDescription);
 680:         }
 681:         try {
 682:           return JSON.parse(text) as JobAnalysisResult;
 683:         } catch {
 684:           return this.analyzeJobDescriptionWithModel(jobDescription);
 685:         }
 686:       }
 687: 
 688:       if (run.status === 'failed' || run.status === 'cancelled' || run.status === 'expired') {
 689:         return this.analyzeJobDescriptionWithModel(jobDescription);
 690:       }
 691: 
 692:       await new Promise((r) => setTimeout(r, 600));
 693:       run = await openai.beta.threads.runs.retrieve(thread.id, run.id);
 694:     }
 695:   }
 696: 
 697:   static async customizeResume(
 698:     resumeText: string,
 699:     jobDescription: string,
 700:     jobTitle: string,
 701:     companyName: string,
 702:     tone: 'professional' | 'enthusiastic' | 'concise' = 'professional',
 703:     length: 'same' | 'shorter' | 'longer' = 'same',
 704:     psychology?: any,
 705:     companyData?: any
 706:   ): Promise<ResumeCustomizationResult> {
 707:     if (ASSISTANT_RESUME_TAILOR_ID) {
 708:       try {
 709:         return await this.customizeResumeWithAssistant(resumeText, jobDescription, jobTitle, companyName, tone, length);
 710:       } catch (e) {
 711:         // Fallback to model path on any assistant error
 712:         return this.customizeResumeWithModel(resumeText, jobDescription);
 713:       }
 714:     }
 715:     return this.customizeResumeWithModel(resumeText, jobDescription, psychology, companyData, tone);
 716:   }
 717: 
 718:   private static async customizeResumeWithModel(
 719:     resumeText: string,
 720:     jobDescription: string,
 721:     psychology?: any,
 722:     companyData?: any,
 723:     tone: 'professional' | 'enthusiastic' | 'concise' = 'professional'
 724:   ): Promise<ResumeCustomizationResult> {
 725:     if (DEMO_MODE) {
 726:       const customized = `Summary: Experienced engineer aligned to role.\n\n${resumeText}`;
 727:       return {
 728:         customizedResume: customized,
 729:         matchScore: 75,
 730:         improvements: ['Keywords aligned', 'Achievements quantified'],
 731:         suggestions: ['Tighten summary', 'Reorder skills'],
 732:       };
 733:     }
 734:     const cacheKey = makeKey('resume-tailor', JSON.stringify({ resumeText, jobDescription, tone, psychology: !!psychology, companyData: !!companyData }));
 735:     const cached = getCache(cacheKey);
 736:     if (cached) return cached as ResumeCustomizationResult;
 737:     const rcached = await getCacheFromRedis(cacheKey)
 738:     if (rcached) return rcached as ResumeCustomizationResult
 739:     try {
 740:       const toneLine = `Preferred tone: ${tone}.`;
 741:       const psychLine = psychology ? `
 742: Psychology guidance (tone, formality, values): ${JSON.stringify(psychology).slice(0, 1000)}
 743: ` : ''
 744:       const companyLine = companyData ? `
 745: Company insights (use for relevance, not fabrication): ${JSON.stringify(companyData).slice(0, 1200)}
 746: ` : ''
 747:       const atsLine = companyData && (companyData as any).atsTarget ? `
 748: ATS system target: ${(companyData as any).atsTarget}. Optimization level: ${(companyData as any).optimizationLevel || 'moderate'}.
 749: Use standard section headers; no tables/columns; ensure keyword coverage without stuffing.
 750: ` : ''
 751:       const industryLine = (companyData && ((companyData as any).industryFocus || (companyData as any).experienceLevel)) ? `
 752: Industry focus: ${((companyData as any).industryFocus || '').toString().slice(0,60)}. Candidate seniority: ${((companyData as any).experienceLevel || '').toString()}.
 753: ` : ''
 754:       const style = (companyData && (companyData as any).styleProfile) ? `\nUser writing fingerprint (tone, vocabulary, cadence): ${JSON.stringify((companyData as any).styleProfile).slice(0, 800)}\n` : ''
 755:       const years = (companyData && typeof (companyData as any).yearsExperience === 'number') ? (companyData as any).yearsExperience : undefined
 756:       const yearsLine = years && years > 0 ? `\nCandidate tenure: ${years}+ years total related experience. Reflect this accurately in the Professional Summary and Experience sections.\n` : ''
 757:       const prompt = AI_PROMPTS.RESUME_TAILORING
 758:         .replace('{jobDescription}', jobDescription + '\n' + toneLine + psychLine + companyLine + atsLine + industryLine + style + yearsLine)
 759:         .replace('{resumeText}', resumeText);
 760: 
 761:       const completion = await chatCreate({
 762:         model: DEFAULT_MODEL,
 763:         messages: [
 764:           {
 765:             role: 'system',
 766:             content: 'You are an expert career counselor and professional resume writer. Customize resumes to perfectly match job requirements while maintaining authenticity and ATS optimization.'
 767:           },
 768:           {
 769:             role: 'user',
 770:             content: prompt
 771:           }
 772:         ],
 773:         temperature: 0.3,
 774:         max_tokens: 1400,
 775:       });
 776: 
 777:       const customizedText = completion.choices[0]?.message?.content?.trim();
 778:       logAIUsage('resume-tailor', undefined, completion)
 779:       if (!customizedText) {
 780:         throw new Error('Failed to get customized resume from OpenAI');
 781:       }
 782: 
 783:       // Optional humanization step to reduce AI-detectable patterns
 784:       let humanized = customizedText
 785:       try {
 786:         const wantsHumanize = !!(companyData && (companyData as any).antiAIDetection)
 787:         if (wantsHumanize && humanized) {
 788:           const hPrompt = `Rewrite the following resume to sound more human and less AI-generated while preserving all facts, employers, dates, and achievements. Vary sentence lengths, reduce template phrasing, and increase specificity without inventing anything. Keep plain text only.\n\n${humanized}`
 789:           const h: any = await chatCreate({
 790:             model: DEFAULT_MODEL,
 791:             messages: [
 792:               { role: 'system', content: 'You rewrite text to be more human and less AI-detectable without changing facts.' },
 793:               { role: 'user', content: hPrompt }
 794:             ],
 795:             temperature: 0.4,
 796:             max_tokens: 500,
 797:           })
 798:           const hv = h.choices[0]?.message?.content?.trim()
 799:           if (hv && hv.length > 100) humanized = hv
 800:         }
 801:       } catch { /* non-fatal */ }
 802: 
 803:       // Normalize formatting (remove markdown, enforce professional bullets, tidy whitespace)
 804:       humanized = this.tidyWhitespace(this.normalizeBullets(this.stripMarkdown(humanized || '')))
 805: 
 806:       // Guard against job description leakage by reducing score impact if JD phrases appear verbatim
 807:       const jdPhrases = (jobDescription || '').split(/[^a-zA-Z0-9]+/).filter(w => w.length > 6).slice(0, 30)
 808:       const jdLeak = jdPhrases.some(p => (humanized || '').includes(p))
 809:       const matchScoreRaw = calculateMatchScore(humanized || '', jobDescription);
 810:       const matchScore = jdLeak ? Math.max(0, Math.round(matchScoreRaw * 0.8)) : matchScoreRaw;
 811:       const suggestions = await this.getResumeImprovementSuggestions(resumeText, jobDescription);
 812: 
 813:       const result = {
 814:         customizedResume: humanized || '',
 815:         matchScore,
 816:         improvements: [
 817:           'Keywords optimized for ATS',
 818:           'Achievements aligned with job requirements',
 819:           'Professional summary tailored to role',
 820:           'Skills section prioritized for relevance'
 821:         ],
 822:         suggestions
 823:       };
 824:       setCache(cacheKey, result);
 825:       return result;
 826:     } catch (error: any) {
 827:       console.error('Resume customization error:', error);
 828:       if (DEMO_MODE || isInvalidKeyError(error)) {
 829:         const customized = `Summary: Experienced candidate aligned to role.\n\n${resumeText}`
 830:         return {
 831:           customizedResume: customized,
 832:           matchScore: calculateMatchScore(customized, jobDescription),
 833:           improvements: ['Keywords aligned', 'Achievements quantified'],
 834:           suggestions: ['Tighten summary', 'Reorder skills'],
 835:         }
 836:       }
 837:       throw new Error('Failed to customize resume');
 838:     }
 839:   }
 840: 
 841:   private static async customizeResumeWithAssistant(
 842:     resumeText: string,
 843:     jobDescription: string,
 844:     jobTitle: string,
 845:     companyName: string,
 846:     tone: 'professional' | 'enthusiastic' | 'concise',
 847:     length: 'same' | 'shorter' | 'longer'
 848:   ): Promise<ResumeCustomizationResult> {
 849:     if (!ASSISTANT_RESUME_TAILOR_ID) {
 850:       return this.customizeResumeWithModel(resumeText, jobDescription);
 851:     }
 852: 
 853:     // Create a thread and provide structured content
 854:     const thread = await openai.beta.threads.create({});
 855:     const userContent = `TASK: Rewrite the resume to align with the job.
 856: 
 857: Job Title: ${jobTitle}
 858: Company: ${companyName}
 859: Tone: ${tone}
 860: Length: ${length}
 861: 
 862: JOB DESCRIPTION:\n${jobDescription}\n
 863: RESUME:\n${resumeText}`;
 864:     await openai.beta.threads.messages.create(thread.id, {
 865:       role: 'user',
 866:       content: userContent + "\n\nReturn the final tailored resume as plain text (not JSON).",
 867:     });
 868: 
 869:     // Start assistant run
 870:     let run: any = await openai.beta.threads.runs.create(thread.id, {
 871:       assistant_id: ASSISTANT_RESUME_TAILOR_ID as string,
 872:       response_format: { type: 'text' } as any,
 873:     });
 874: 
 875:     // Handle tool calls and poll until completion
 876:     // eslint-disable-next-line no-constant-condition
 877:     while (true) {
 878:       if (run.status === 'requires_action' && run.required_action?.submit_tool_outputs?.tool_calls?.length) {
 879:         const tool_outputs = await this.handleAssistantToolCalls(thread.id, run, { resumeText, jobDescription, tone })
 880:         run = await openai.beta.threads.runs.submitToolOutputs(thread.id, run.id, { tool_outputs })
 881:         continue;
 882:       }
 883: 
 884:       if (run.status === 'completed') {
 885:         const messages = await openai.beta.threads.messages.list(thread.id);
 886:         const last = messages.data.find((m: any) => m.role === 'assistant');
 887:         const content = last?.content?.[0];
 888:         const text = (content && 'text' in content) ? content.text.value : undefined;
 889:         let customizedResume = text && text.trim().length > 0 ? text.trim() : (await this.customizeResumeWithModel(resumeText, jobDescription)).customizedResume;
 890:         // Normalize formatting
 891:         customizedResume = this.tidyWhitespace(this.normalizeBullets(this.stripMarkdown(customizedResume)))
 892:         const matchScore = calculateMatchScore(customizedResume, jobDescription);
 893:         const suggestions = await this.getResumeImprovementSuggestions(resumeText, jobDescription);
 894:         return {
 895:           customizedResume,
 896:           matchScore,
 897:           improvements: [
 898:             'Keywords optimized for ATS',
 899:             'Achievements aligned with job requirements',
 900:             'Professional summary tailored to role',
 901:             'Skills section prioritized for relevance'
 902:           ],
 903:           suggestions,
 904:         };
 905:       }
 906: 
 907:       if (run.status === 'failed' || run.status === 'cancelled' || run.status === 'expired') {
 908:         return this.customizeResumeWithModel(resumeText, jobDescription);
 909:       }
 910: 
 911:       await new Promise((r) => setTimeout(r, 600));
 912:       run = await openai.beta.threads.runs.retrieve(thread.id, run.id);
 913:     }
 914:   }
 915: 
 916:   // DEPRECATED: Use /api/cover-letter/generate with templates instead
 917:   // Kept for backward compatibility with assistant tool calls
 918:   static async generateCoverLetter(
 919:     jobTitle: string,
 920:     companyName: string,
 921:     jobDescription: string,
 922:     resumeText: string,
 923:     companyData?: any,
 924:     tone: 'professional' | 'casual' | 'enthusiastic' = 'professional',
 925:     length: 'short' | 'medium' | 'long' = 'medium'
 926:   ): Promise<CoverLetterResult> {
 927:     // Redirect to main API route which uses templates
 928:     const response = await fetch('/api/cover-letter/generate', {
 929:       method: 'POST',
 930:       headers: { 'Content-Type': 'application/json' },
 931:       body: JSON.stringify({
 932:         raw: true,
 933:         jobTitle,
 934:         companyName,
 935:         jobDescription,
 936:         resumeText,
 937:         save: false,
 938:         tone,
 939:         length
 940:       })
 941:     })
 942:     
 943:     if (!response.ok) {
 944:       throw new Error('Failed to generate cover letter')
 945:     }
 946:     
 947:     const result = await response.json()
 948:     return {
 949:       coverLetter: result.coverLetter || '',
 950:       keyPoints: result.keyPoints || [],
 951:       wordCount: result.wordCount || 0
 952:     }
 953:   }
 954: 
 955:   static async generateFollowUpEmail(
 956:     jobTitle: string,
 957:     companyName: string,
 958:     daysSinceApplication: number,
 959:     applicationHighlights: string[],
 960:     companyInsights: string[]
 961:   ): Promise<{ subject: string; body: string }> {
 962:     try {
 963:       const prompt = AI_PROMPTS.FOLLOW_UP_EMAIL
 964:         .replace('{jobTitle}', jobTitle)
 965:         .replace('{companyName}', companyName)
 966:         .replace('{daysSinceApplication}', daysSinceApplication.toString())
 967:         .replace('{applicationHighlights}', applicationHighlights.join(', '))
 968:         .replace('{companyInsights}', companyInsights.join(', '));
 969: 
 970:       const completion: any = await chatCreate({
 971:         model: 'gpt-4',
 972:         messages: [
 973:           {
 974:             role: 'system',
 975:             content: 'You are a professional career counselor specializing in job application follow-up communication. Create polite, professional follow-up emails that maintain relationships and show continued interest.'
 976:           },
 977:           {
 978:             role: 'user',
 979:             content: prompt
 980:           }
 981:         ],
 982:         temperature: 0.6,
 983:         max_tokens: 500,
 984:       });
 985: 
 986:       const emailContent = completion.choices[0]?.message?.content?.trim();
 987:       logAIUsage('follow-up-email', undefined, completion)
 988:       if (!emailContent) {
 989:         throw new Error('Failed to generate follow-up email from OpenAI');
 990:       }
 991: 
 992:       // Parse subject and body
 993:       const lines = emailContent.split('\n');
 994:       const subjectLine = lines.find((line: string) => line.toLowerCase().startsWith('subject:'));
 995:       const subject = subjectLine ? subjectLine.replace(/^subject:\s*/i, '') : `Follow-up on ${jobTitle} Position`;
 996:       const body = lines.filter((line: string) => !line.toLowerCase().startsWith('subject:')).join('\n').trim();
 997: 
 998:       return {
 999:         subject,
1000:         body
1001:       };
1002:     } catch (error) {
1003:       console.error('Follow-up email generation error:', error);
1004:       throw new Error('Failed to generate follow-up email');
1005:     }
1006:   }
1007: 
1008:   static async getResumeImprovementSuggestions(
1009:     resumeText: string,
1010:     jobDescription: string
1011:   ): Promise<string[]> {
1012:     try {
1013:       const prompt = AI_PROMPTS.RESUME_IMPROVEMENT_SUGGESTIONS
1014:         .replace('{jobDescription}', jobDescription)
1015:         .replace('{resumeText}', resumeText);
1016: 
1017:       const completion: any = await chatCreate({
1018:         model: 'gpt-4',
1019:         messages: [
1020:           {
1021:             role: 'system',
1022:             content: 'You are an expert resume reviewer and career coach. Provide specific, actionable suggestions to improve resumes for specific job applications.'
1023:           },
1024:           {
1025:             role: 'user',
1026:             content: prompt
1027:           }
1028:         ],
1029:         temperature: 0.4,
1030:         max_tokens: 800,
1031:       });
1032: 
1033:       const suggestionsText = completion.choices[0]?.message?.content?.trim();
1034:       if (!suggestionsText) {
1035:         return [];
1036:       }
1037: 
1038:       // Parse suggestions (assuming they're numbered or bulleted)
1039:       const suggestions = suggestionsText
1040:         .split(/\d+\.|\n-|\n•/)
1041:         .filter((suggestion: string) => suggestion.trim().length > 10)
1042:         .map((suggestion: string) => suggestion.trim())
1043:         .slice(0, 7);
1044: 
1045:       return suggestions;
1046:     } catch (error) {
1047:       console.error('Resume improvement suggestions error:', error);
1048:       return [];
1049:     }
1050:   }
1051: 
1052:   static async extractKeyPointsFromCoverLetter(coverLetter: string): Promise<string[]> {
1053:     try {
1054:       const prompt = `Analyze this cover letter and extract 3-5 key points that make it effective:
1055: 
1056: ${coverLetter}
1057: 
1058: Respond with a JSON array of key points (strings).`;
1059: 
1060:       const completion = await chatCreate({
1061:         model: 'gpt-4',
1062:         messages: [
1063:           {
1064:             role: 'system',
1065:             content: 'Extract key strengths and highlights from cover letters. Respond only with a JSON array of strings.'
1066:           },
1067:           {
1068:             role: 'user',
1069:             content: prompt
1070:           }
1071:         ],
1072:         temperature: 0.3,
1073:         max_tokens: 300,
1074:       });
1075: 
1076:       const keyPointsText = completion.choices[0]?.message?.content?.trim();
1077:       logAIUsage('cover-letter-keypoints', undefined, completion)
1078:       if (!keyPointsText) {
1079:         return [];
1080:       }
1081: 
1082:       try {
1083:         return JSON.parse(keyPointsText);
1084:       } catch {
1085:         // Fallback: extract manually
1086:         return [
1087:           'Personalized introduction showing genuine interest',
1088:           'Relevant experience and achievements highlighted',
1089:           'Company research integrated naturally',
1090:           'Strong call to action in closing'
1091:         ];
1092:       }
1093:     } catch (error) {
1094:       console.error('Key points extraction error:', error);
1095:       return [];
1096:     }
1097:   }
1098: 
1099:   static async generateCompanyInsights(
1100:     companyData: any,
1101:     jobTitle: string
1102:   ): Promise<CompanyInsightsResult> {
1103:     // Perplexity-only: skip assistant path
1104:     try {
1105:       const companyDataString = JSON.stringify(companyData, null, 2);
1106:       const prompt = AI_PROMPTS.COMPANY_INSIGHTS
1107:         .replace('{companyData}', companyDataString)
1108:         .replace('{jobTitle}', jobTitle)
1109:         .replace('{industry}', companyData.industry || 'technology');
1110: 
1111:       const completion = await chatCreate({
1112:         model: 'gpt-4',
1113:         messages: [
1114:           {
1115:             role: 'system',
1116:             content: 'You are an expert company insights summarizer.'
1117:           },
1118:           {
1119:             role: 'user',
1120:             content: prompt
1121:           }
1122:         ],
1123:         temperature: 0.2,
1124:         max_tokens: 1500,
1125:       });
1126: 
1127:       const insightsText = completion.choices[0]?.message?.content?.trim();
1128:       logAIUsage('company-insights', undefined, completion)
1129:       if (!insightsText) {
1130:         throw new Error('Failed to generate company insights');
1131:       }
1132: 
1133:       // Parse the response (assuming it's structured)
1134:       const talkingPoints = insightsText
1135:         .split(/\d+\.|\n-|\n•/)
1136:         .filter((point: string) => point.trim().length > 10)
1137:         .map((point: string) => point.trim())
1138:         .slice(0, 5);
1139: 
1140:       return {
1141:         talkingPoints,
1142:         keyValues: companyData.culture || [],
1143:         cultureFit: talkingPoints.slice(0, 3)
1144:       };
1145:     } catch (error) {
1146:       console.error('Company insights generation error:', error);
1147:       return {
1148:         talkingPoints: [],
1149:         keyValues: [],
1150:         cultureFit: []
1151:       };
1152:     }
1153:   }
1154: 
1155:   static async scoreApplication(
1156:     jobDescription: string,
1157:     resumeText: string,
1158:     companyData?: any
1159:   ): Promise<{ score: number; reasons: string[]; riskFactors: string[]; improvements: string[] }> {
1160:     const cacheKey = makeKey('success-score', JSON.stringify({ jobDescription, resumeText, companyData }))
1161:     const cached = getCache(cacheKey)
1162:     if (cached) return cached
1163:     const rcached = await getCacheFromRedis(cacheKey)
1164:     if (rcached) return rcached
1165: 
1166:     const prompt = AI_PROMPTS.SUCCESS_SCORE
1167:       .replace('{jobDescription}', jobDescription)
1168:       .replace('{resumeText}', resumeText)
1169:       .replace('{companyData}', companyData ? JSON.stringify(companyData, null, 2) : 'N/A')
1170: 
1171:     const completion: any = await chatCreate({
1172:       model: DEFAULT_MODEL,
1173:       messages: [
1174:         { role: 'system', content: 'You evaluate job application success probability and output strict JSON.' },
1175:         { role: 'user', content: prompt }
1176:       ],
1177:       temperature: 0.25,
1178:       max_tokens: 1200,
1179:     });
1180: 
1181:     const text = completion.choices[0]?.message?.content?.trim() || '{}'
1182:     logAIUsage('success-score', undefined, completion)
1183:     let parsed: any = { score: 0, reasons: [], riskFactors: [], improvements: [] }
1184:     try { parsed = JSON.parse(text) } catch {}
1185:     const result = {
1186:       score: typeof parsed.score === 'number' ? Math.max(0, Math.min(100, parsed.score)) : 0,
1187:       reasons: Array.isArray(parsed.reasons) ? parsed.reasons : [],
1188:       riskFactors: Array.isArray(parsed.riskFactors) ? parsed.riskFactors : [],
1189:       improvements: Array.isArray(parsed.improvements) ? parsed.improvements : []
1190:     }
1191:     setCache(cacheKey, result)
1192:     return result
1193:   }
1194: 
1195:   static async generateSalaryNegotiationPlan(input: {
1196:     jobTitle: string;
1197:     companyName: string;
1198:     location: string;
1199:     seniority: 'entry' | 'mid' | 'senior';
1200:     offer: { base: string; bonus?: string; equity?: string; benefits?: string };
1201:     marketData?: string;
1202:     candidateHighlights: string;
1203:     constraints?: string;
1204:     tone?: 'professional' | 'warm' | 'concise';
1205:   }): Promise<SalaryNegotiationPlan> {
1206:     if (DEMO_MODE) {
1207:       return {
1208:         targetRange: { base: '$175k-$190k', totalComp: '$270k-$310k' },
1209:         justifications: [
1210:           'Senior market in Austin trends toward upper bands',
1211:           'Led cost reductions of 18% with measurable impact',
1212:           'Owned 10M msg/day pipeline — high complexity',
1213:           'Hybrid role warrants premium vs remote-only'
1214:         ],
1215:         tradeoffs: [
1216:           'Prioritize base over equity',
1217:           'Concede minor signing bonus deltas',
1218:           'Flexible start date within 4-6 weeks'
1219:         ],
1220:         negotiationEmail: {
1221:           subject: 'Compensation Discussion – Senior Backend Engineer',
1222:           body: `Hi <Name>,
1223: 
1224: Thank you for the offer. Based on Austin market norms for senior roles and my impact (e.g., 18% infra savings; 10M msg/day pipeline), I'm targeting a base of $180k-$190k with total comp in the $280k-$300k range. I value the opportunity and am flexible on equity/bonus to reach this base.
1225: 
1226: If helpful, happy to discuss details.
1227: 
1228: Best,
1229: <Your Name>`
1230:         },
1231:         talkingPoints: [
1232:           'Anchor to Austin senior market bands',
1233:           'Quantify prior impact and scope',
1234:           'State clear base target and rationale',
1235:           'Offer flexibility on secondary levers'
1236:         ]
1237:       };
1238:     }
1239: 
1240:     // Perplexity-only: skip assistant path
1241:     return this.generateSalaryNegotiationPlanWithModel(input);
1242:   }
1243: 
1244:   private static async generateSalaryNegotiationPlanWithModel(input: {
1245:     jobTitle: string;
1246:     companyName: string;
1247:     location: string;
1248:     seniority: 'entry' | 'mid' | 'senior';
1249:     offer: { base: string; bonus?: string; equity?: string; benefits?: string };
1250:     marketData?: string;
1251:     candidateHighlights: string;
1252:     constraints?: string;
1253:     tone?: 'professional' | 'warm' | 'concise';
1254:   }): Promise<SalaryNegotiationPlan> {
1255:     const system = 'You are a salary negotiation coach. Output strictly JSON with the requested keys.';
1256:     const user = `Given the role and offer, produce a JSON plan with keys: targetRange, justifications, tradeoffs, negotiationEmail {subject, body}, talkingPoints.\n\nInput:\njobTitle: ${input.jobTitle}\ncompanyName: ${input.companyName}\nlocation: ${input.location}\nseniority: ${input.seniority}\noffer: ${JSON.stringify(input.offer)}\nmarketData: ${input.marketData || ''}\ncandidateHighlights: ${input.candidateHighlights}\nconstraints: ${input.constraints || ''}\ntone: ${input.tone || 'professional'}`;
1257:     const completion: any = await chatCreate({
1258:       model: DEFAULT_MODEL,
1259:       messages: [
1260:         { role: 'system', content: system },
1261:         { role: 'user', content: user }
1262:       ],
1263:       temperature: 0.3,
1264:       max_tokens: 1100,
1265:     });
1266:     const text = completion.choices[0]?.message?.content?.trim();
1267:     if (!text) throw new Error('No negotiation plan generated');
1268:     try {
1269:       return JSON.parse(text);
1270:     } catch (e) {
1271:       // Best-effort fallback minimal plan
1272:       return {
1273:         targetRange: { base: input.offer.base || 'TBD', totalComp: 'TBD' },
1274:         justifications: ['Market alignment', 'Role scope', 'Prior impact', 'Location norms'],
1275:         tradeoffs: ['Flex equity/bonus', 'Firm on base'],
1276:         negotiationEmail: { subject: `Compensation Discussion – ${input.jobTitle}`, body: text },
1277:         talkingPoints: ['Anchor to market', 'Quantify impact', 'Set clear target']
1278:       };
1279:     }
1280:   }
1281: 
1282:   private static async generateSalaryNegotiationPlanWithAssistant(input: {
1283:     jobTitle: string;
1284:     companyName: string;
1285:     location: string;
1286:     seniority: 'entry' | 'mid' | 'senior';
1287:     offer: { base: string; bonus?: string; equity?: string; benefits?: string };
1288:     marketData?: string;
1289:     candidateHighlights: string;
1290:     constraints?: string;
1291:     tone?: 'professional' | 'warm' | 'concise';
1292:   }): Promise<SalaryNegotiationPlan> {
1293:     const thread = await openai.beta.threads.create({});
1294:     await openai.beta.threads.messages.create(thread.id, {
1295:       role: 'user',
1296:       content: `Generate a negotiation plan as JSON for ${input.jobTitle} at ${input.companyName} (${input.location}). Seniority: ${input.seniority}. Offer: ${JSON.stringify(input.offer)}. Market: ${input.marketData || 'n/a'}. Highlights: ${input.candidateHighlights}. Constraints: ${input.constraints || 'n/a'}. Tone: ${input.tone || 'professional'}.`,
1297:     });
1298:     let run: any = await openai.beta.threads.runs.create(thread.id, {
1299:       assistant_id: ASSISTANT_SALARY_COACH_ID as string,
1300:     });
1301:     // eslint-disable-next-line no-constant-condition
1302:     while (true) {
1303:       if (run.status === 'requires_action' && run.required_action?.submit_tool_outputs?.tool_calls?.length) {
1304:         const toolCalls = run.required_action.submit_tool_outputs.tool_calls;
1305:         const toolOutputs = await Promise.all(toolCalls.map(async (tc: any) => {
1306:           const fn = tc.function;
1307:           if (fn?.name === 'generate_negotiation_plan') {
1308:             const args = JSON.parse(fn.arguments || '{}');
1309:             // Prefer assistant-parsed args if present
1310:             const merged = {
1311:               jobTitle: args.jobTitle || input.jobTitle,
1312:               companyName: args.companyName || input.companyName,
1313:               location: args.location || input.location,
1314:               seniority: args.seniority || input.seniority,
1315:               offer: args.offer || input.offer,
1316:               marketData: args.marketData || input.marketData,
1317:               candidateHighlights: args.candidateHighlights || input.candidateHighlights,
1318:               constraints: args.constraints || input.constraints,
1319:               tone: args.tone || input.tone,
1320:             } as typeof input;
1321:             const result = await this.generateSalaryNegotiationPlanWithModel(merged);
1322:             return { tool_call_id: tc.id, output: JSON.stringify(result) };
1323:           }
1324:           return { tool_call_id: tc.id, output: '{}' };
1325:         }));
1326:         run = await openai.beta.threads.runs.submitToolOutputs(thread.id, run.id, { tool_outputs: toolOutputs });
1327:         continue;
1328:       }
1329:       if (run.status === 'completed') {
1330:         const messages = await openai.beta.threads.messages.list(thread.id);
1331:         const last = messages.data.find((m: any) => m.role === 'assistant');
1332:         const content = last?.content?.[0];
1333:         const text = (content && 'text' in content) ? (content as any).text.value : undefined;
1334:         if (text) {
1335:           try {
1336:             return JSON.parse(text) as SalaryNegotiationPlan;
1337:           } catch {
1338:             return this.generateSalaryNegotiationPlanWithModel(input);
1339:           }
1340:         }
1341:         return this.generateSalaryNegotiationPlanWithModel(input);
1342:       }
1343:       if (['failed','cancelled','expired'].includes(run.status)) {
1344:         return this.generateSalaryNegotiationPlanWithModel(input);
1345:       }
1346:       await new Promise(r => setTimeout(r, 600));
1347:       run = await openai.beta.threads.runs.retrieve(thread.id, run.id);
1348:     }
1349:   }
1350: 
1351:   static async employerPsychologyProfile(input: { jobDescription: string; companySignals?: any }): Promise<{ tone: 'formal'|'neutral'|'casual'; formality: number; values: string[]; languageGuidance: string[]; bestSendWindows: string[] }> {
1352:     const content = `Analyze job and company signals to infer a communication psychology profile.
1353: Return JSON strictly with keys: tone: "formal|neutral|casual", formality: 0-100, values: string[3-6], languageGuidance: string[2-4], bestSendWindows: string[2-4].
1354: Job Description:\n${input.jobDescription}\n\nCompany Signals (optional):\n${input.companySignals ? JSON.stringify(input.companySignals) : 'N/A'}`
1355:     try {
1356:       const text = await this.generateText(content)
1357:       return JSON.parse(text)
1358:     } catch {
1359:       return { tone: 'neutral', formality: 50, values: [], languageGuidance: [], bestSendWindows: [] }
1360:     }
1361:   }
1362: 
1363:   static async marketIntelligence(companyName: string, role?: string, geo?: string): Promise<{
1364:     financial: Array<{ title: string; url: string; snippet: string }>
1365:     culture: Array<{ title: string; url: string; snippet: string }>
1366:     news: Array<{ title: string; url: string; snippet: string }>
1367:     leadership: Array<{ title: string; url: string; snippet: string }>
1368:     growth: Array<{ title: string; url: string; snippet: string }>
1369:     benefits: Array<{ title: string; url: string; snippet: string }>
1370:     summary: string
1371:   }> {
1372:     try {
1373:       const payload = {
1374:         companyName,
1375:         role: role || '',
1376:         geo: geo || ''
1377:       }
1378:       const summary = await this.generateText(`You are a market analyst. Given a company name and optional role and geo, summarize actionable market intelligence in 4-7 concise bullets (no headers). Focus on: hiring momentum, competitive positioning, culture signals, product direction, and candidate positioning angles.
1379: Return plain text bullets.
1380: 
1381: Company: ${companyName}
1382: Role: ${role || 'n/a'}
1383: Geo: ${geo || 'n/a'}`)
1384:       return {
1385:         financial: [],
1386:         culture: [],
1387:         news: [],
1388:         leadership: [],
1389:         growth: [],
1390:         benefits: [],
1391:         summary
1392:       }
1393:     } catch {
1394:       return { financial: [], culture: [], news: [], leadership: [], growth: [], benefits: [], summary: '' }
1395:     }
1396:   }
1397: 
1398:   static async successPredictorV2(input: { jobDescription: string; resumeText: string; jobUrl?: string; applicantsEstimate?: number; urgencyHint?: number; companyData?: any }): Promise<{
1399:     score: number; reasons: string[]; riskFactors: string[]; improvements: string[]; timing?: any; competition?: any
1400:   }> {
1401:     try {
1402:       const base = await this.scoreApplication(input.jobDescription, input.resumeText, input.companyData)
1403:       // Lightweight signals: competition and timing via internal endpoints
1404:       let competition: any = null
1405:       let timing: any = null
1406:       const baseUrl = process.env.NEXTAUTH_URL || (typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000')
1407:       try {
1408:         const compRes = await fetch(`${baseUrl}/api/insights/competition`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription: input.jobDescription, jobUrl: input.jobUrl, resumeText: input.resumeText }) } as any)
1409:         if (compRes.ok) { const cj = await compRes.json(); competition = cj.competition }
1410:       } catch {}
1411:       try {
1412:         const timRes = await fetch(`${baseUrl}/api/insights/timing`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ urgency: input.urgencyHint, jobTitle: '', companyName: '', location: '' }) } as any)
1413:         if (timRes.ok) { const tj = await timRes.json(); timing = tj.timing }
1414:       } catch {}
1415:       let score = base.score
1416:       if (competition?.competitionBand === 'high') score = Math.max(0, score - 8)
1417:       if (competition?.competitionBand === 'low') score = Math.min(100, score + 4)
1418:       if (timing?.score) score = Math.round((score * 0.85) + (timing.score * 0.15))
1419:       return { score, reasons: base.reasons, riskFactors: base.riskFactors, improvements: base.improvements, timing, competition }
1420:     } catch {
1421:       return { score: 0, reasons: [], riskFactors: [], improvements: [] }
1422:     }
1423:   }
1424: 
1425:   static async careerTrajectoryPredictor(input: { resumeText: string; targetRole: string; targetIndustry?: string; geo?: string }): Promise<{
1426:     steps: string[]; skillsToAcquire: string[]; timelineMonths: number; sampleProjects: string[]; networkingPlan: string[]
1427:   }> {
1428:     try {
1429:       const prompt = `You are a career coach. Given a resume (plain text) and a target role (${input.targetRole}), produce a concise JSON plan with keys:
1430: steps: string[5-9], skillsToAcquire: string[6-12], timelineMonths: number (6-36), sampleProjects: string[3-6], networkingPlan: string[4-8].
1431: Context:
1432: Industry: ${input.targetIndustry || 'n/a'}
1433: Geo: ${input.geo || 'n/a'}
1434: Resume:\n${input.resumeText}`
1435:       const text = await this.generateText(prompt)
1436:       const parsed = JSON.parse(text)
1437:       return {
1438:         steps: Array.isArray(parsed.steps) ? parsed.steps : [],
1439:         skillsToAcquire: Array.isArray(parsed.skillsToAcquire) ? parsed.skillsToAcquire : [],
1440:         timelineMonths: typeof parsed.timelineMonths === 'number' ? parsed.timelineMonths : 12,
1441:         sampleProjects: Array.isArray(parsed.sampleProjects) ? parsed.sampleProjects : [],
1442:         networkingPlan: Array.isArray(parsed.networkingPlan) ? parsed.networkingPlan : []
1443:       }
1444:     } catch {
1445:       return { steps: [], skillsToAcquire: [], timelineMonths: 12, sampleProjects: [], networkingPlan: [] }
1446:     }
1447:   }
1448: 
1449:   static async emotionalCareerCoach(messages: Array<{ role: 'user'|'system'|'assistant'; content: string }>, context?: { stressors?: string[]; wins?: string[]; targetRole?: string }): Promise<{ reflection: string; encouragement: string[]; reframes: string[]; nextSmallSteps: string[] }> {
1450:     try {
1451:       const convo = (messages || []).map(m => `${m.role.toUpperCase()}: ${m.content}`).join('\n')
1452:       const prompt = `You are a compassionate career coach. Provide supportive, practical guidance with short, concrete suggestions.
1453: Return strict JSON with keys: reflection (string), encouragement (string[3-6]), reframes (string[3-6]), nextSmallSteps (string[3-6]).
1454: Context: ${JSON.stringify(context || {})}
1455: Conversation:\n${convo}`
1456:       const text = await this.generateText(prompt)
1457:       const parsed = JSON.parse(text)
1458:       return {
1459:         reflection: String(parsed.reflection || ''),
1460:         encouragement: Array.isArray(parsed.encouragement) ? parsed.encouragement : [],
1461:         reframes: Array.isArray(parsed.reframes) ? parsed.reframes : [],
1462:         nextSmallSteps: Array.isArray(parsed.nextSmallSteps) ? parsed.nextSmallSteps : []
1463:       }
1464:     } catch {
1465:       return { reflection: '', encouragement: [], reframes: [], nextSmallSteps: [] }
1466:     }
1467:   }
1468: }
</file>

<file path="src/lib/analytics.ts">
  1: /**
  2:  * User Analytics Service
  3:  * Track user behavior and events for product improvement
  4:  */
  5: 
  6: interface AnalyticsEvent {
  7:   name: string
  8:   properties?: Record<string, any>
  9:   timestamp?: Date
 10:   userId?: string
 11:   sessionId?: string
 12: }
 13: 
 14: interface PageViewEvent {
 15:   path: string
 16:   referrer?: string
 17:   title?: string
 18: }
 19: 
 20: class AnalyticsService {
 21:   private static instance: AnalyticsService
 22:   private sessionId: string
 23:   private userId: string | null = null
 24:   private events: AnalyticsEvent[] = []
 25:   private flushInterval: NodeJS.Timeout | null = null
 26: 
 27:   private constructor() {
 28:     this.sessionId = this.generateSessionId()
 29:     this.setupFlushInterval()
 30:   }
 31: 
 32:   static getInstance(): AnalyticsService {
 33:     if (!AnalyticsService.instance) {
 34:       AnalyticsService.instance = new AnalyticsService()
 35:     }
 36:     return AnalyticsService.instance
 37:   }
 38: 
 39:   private generateSessionId(): string {
 40:     return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
 41:   }
 42: 
 43:   setUserId(userId: string | null) {
 44:     this.userId = userId
 45:   }
 46: 
 47:   /**
 48:    * Track a custom event
 49:    */
 50:   track(eventName: string, properties?: Record<string, any>) {
 51:     if (typeof window === 'undefined') return
 52: 
 53:     const event: AnalyticsEvent = {
 54:       name: eventName,
 55:       properties: {
 56:         ...properties,
 57:         userAgent: navigator.userAgent,
 58:         screenWidth: window.screen.width,
 59:         screenHeight: window.screen.height,
 60:         language: navigator.language,
 61:       },
 62:       timestamp: new Date(),
 63:       userId: this.userId || undefined,
 64:       sessionId: this.sessionId,
 65:     }
 66: 
 67:     this.events.push(event)
 68: 
 69:     // Send to backend
 70:     this.sendEvent(event)
 71: 
 72:     // Also log to console in development
 73:     if (process.env.NODE_ENV === 'development') {
 74:       console.log('[Analytics]', eventName, properties)
 75:     }
 76:   }
 77: 
 78:   /**
 79:    * Track a page view
 80:    */
 81:   pageView(pageData?: PageViewEvent) {
 82:     if (typeof window === 'undefined') return
 83: 
 84:     this.track('page_view', {
 85:       path: pageData?.path || window.location.pathname,
 86:       referrer: pageData?.referrer || document.referrer,
 87:       title: pageData?.title || document.title,
 88:       url: window.location.href,
 89:     })
 90:   }
 91: 
 92:   /**
 93:    * Track feature usage
 94:    */
 95:   featureUsed(featureName: string, metadata?: Record<string, any>) {
 96:     this.track('feature_used', {
 97:       feature: featureName,
 98:       ...metadata,
 99:     })
100:   }
101: 
102:   /**
103:    * Track errors
104:    */
105:   trackError(error: Error, context?: Record<string, any>) {
106:     this.track('error', {
107:       message: error.message,
108:       stack: error.stack,
109:       name: error.name,
110:       ...context,
111:     })
112:   }
113: 
114:   /**
115:    * Track user interactions
116:    */
117:   interaction(action: string, target: string, metadata?: Record<string, any>) {
118:     this.track('interaction', {
119:       action,
120:       target,
121:       ...metadata,
122:     })
123:   }
124: 
125:   /**
126:    * Track conversions
127:    */
128:   conversion(conversionType: string, value?: number, metadata?: Record<string, any>) {
129:     this.track('conversion', {
130:       type: conversionType,
131:       value,
132:       ...metadata,
133:     })
134:   }
135: 
136:   /**
137:    * Send event to backend
138:    */
139:   private async sendEvent(event: AnalyticsEvent) {
140:     try {
141:       // Only send in production or if explicitly enabled
142:       if (process.env.NODE_ENV !== 'production' && !process.env.NEXT_PUBLIC_ENABLE_ANALYTICS) {
143:         return
144:       }
145: 
146:       await fetch('/api/analytics/track', {
147:         method: 'POST',
148:         headers: { 'Content-Type': 'application/json' },
149:         body: JSON.stringify(event),
150:         // Don't wait for response
151:         keepalive: true,
152:       }).catch(() => {
153:         // Silently fail - analytics shouldn't break the app
154:       })
155:     } catch {
156:       // Silently fail
157:     }
158:   }
159: 
160:   /**
161:    * Flush events periodically
162:    */
163:   private setupFlushInterval() {
164:     if (typeof window === 'undefined') return
165: 
166:     // Flush events every 30 seconds
167:     this.flushInterval = setInterval(() => {
168:       if (this.events.length > 50) {
169:         // Keep only last 50 events in memory
170:         this.events = this.events.slice(-50)
171:       }
172:     }, 30000)
173:   }
174: 
175:   /**
176:    * Get all tracked events (for debugging)
177:    */
178:   getEvents(): AnalyticsEvent[] {
179:     return [...this.events]
180:   }
181: 
182:   /**
183:    * Clear all events
184:    */
185:   clear() {
186:     this.events = []
187:   }
188: 
189:   /**
190:    * Cleanup
191:    */
192:   destroy() {
193:     if (this.flushInterval) {
194:       clearInterval(this.flushInterval)
195:     }
196:     this.events = []
197:   }
198: }
199: 
200: // Export singleton instance
201: export const analytics = typeof window !== 'undefined' 
202:   ? AnalyticsService.getInstance() 
203:   : null
204: 
205: // Export class for testing
206: export { AnalyticsService }
207: 
208: // Convenience functions
209: export const trackEvent = (name: string, properties?: Record<string, any>) => {
210:   analytics?.track(name, properties)
211: }
212: 
213: export const trackPageView = (pageData?: PageViewEvent) => {
214:   analytics?.pageView(pageData)
215: }
216: 
217: export const trackFeature = (featureName: string, metadata?: Record<string, any>) => {
218:   analytics?.featureUsed(featureName, metadata)
219: }
220: 
221: export const trackError = (error: Error, context?: Record<string, any>) => {
222:   analytics?.trackError(error, context)
223: }
224: 
225: export const trackInteraction = (action: string, target: string, metadata?: Record<string, any>) => {
226:   analytics?.interaction(action, target, metadata)
227: }
228: 
229: export const trackConversion = (type: string, value?: number, metadata?: Record<string, any>) => {
230:   analytics?.conversion(type, value, metadata)
231: }
</file>

<file path="src/lib/application-tracker.ts">
  1: /**
  2:  * Application Tracking System
  3:  * Track job applications, status, and history
  4:  */
  5: 
  6: export interface Application {
  7:   id: string
  8:   jobId: string
  9:   jobTitle: string
 10:   company: string
 11:   appliedAt: string
 12:   status: 'applied' | 'interview' | 'rejected' | 'offer' | 'accepted'
 13:   resumeVariant: 'A' | 'B'
 14:   coverLetterVariant: 'A' | 'B'
 15:   notes?: string
 16:   followUpDate?: string
 17: }
 18: 
 19: export class ApplicationTracker {
 20:   private static STORAGE_KEY = 'cf:applications'
 21:   
 22:   /**
 23:    * Track a new application
 24:    */
 25:   static trackApplication(
 26:     job: { id?: string; title: string; company: string },
 27:     resumeVariant: 'A' | 'B',
 28:     coverLetterVariant: 'A' | 'B'
 29:   ): Application {
 30:     const applications = this.getAll()
 31:     
 32:     const newApp: Application = {
 33:       id: this.generateId(),
 34:       jobId: job.id || this.generateId(),
 35:       jobTitle: job.title,
 36:       company: job.company,
 37:       appliedAt: new Date().toISOString(),
 38:       status: 'applied',
 39:       resumeVariant,
 40:       coverLetterVariant
 41:     }
 42:     
 43:     applications.push(newApp)
 44:     this.save(applications)
 45:     
 46:     // Also mark job as applied in search results
 47:     this.markJobApplied(newApp.jobId, newApp.appliedAt)
 48:     
 49:     return newApp
 50:   }
 51:   
 52:   /**
 53:    * Get all applications
 54:    */
 55:   static getAll(): Application[] {
 56:     try {
 57:       const stored = localStorage.getItem(this.STORAGE_KEY)
 58:       return stored ? JSON.parse(stored) : []
 59:     } catch {
 60:       return []
 61:     }
 62:   }
 63:   
 64:   /**
 65:    * Get application by ID
 66:    */
 67:   static getById(id: string): Application | undefined {
 68:     return this.getAll().find(app => app.id === id)
 69:   }
 70:   
 71:   /**
 72:    * Check if already applied to a job
 73:    */
 74:   static hasApplied(jobId: string): boolean {
 75:     return this.getAll().some(app => app.jobId === jobId)
 76:   }
 77:   
 78:   /**
 79:    * Update application status
 80:    */
 81:   static updateStatus(id: string, status: Application['status'], notes?: string): void {
 82:     const applications = this.getAll()
 83:     const index = applications.findIndex(app => app.id === id)
 84:     
 85:     if (index !== -1) {
 86:       applications[index].status = status
 87:       if (notes) applications[index].notes = notes
 88:       this.save(applications)
 89:     }
 90:   }
 91:   
 92:   /**
 93:    * Add follow-up date
 94:    */
 95:   static setFollowUp(id: string, date: string): void {
 96:     const applications = this.getAll()
 97:     const index = applications.findIndex(app => app.id === id)
 98:     
 99:     if (index !== -1) {
100:       applications[index].followUpDate = date
101:       this.save(applications)
102:     }
103:   }
104:   
105:   /**
106:    * Get applications by status
107:    */
108:   static getByStatus(status: Application['status']): Application[] {
109:     return this.getAll().filter(app => app.status === status)
110:   }
111:   
112:   /**
113:    * Get recent applications (last 30 days)
114:    */
115:   static getRecent(days: number = 30): Application[] {
116:     const cutoff = new Date()
117:     cutoff.setDate(cutoff.getDate() - days)
118:     
119:     return this.getAll().filter(app => 
120:       new Date(app.appliedAt) >= cutoff
121:     )
122:   }
123:   
124:   /**
125:    * Get statistics
126:    */
127:   static getStats() {
128:     const applications = this.getAll()
129:     
130:     return {
131:       total: applications.length,
132:       applied: applications.filter(a => a.status === 'applied').length,
133:       interview: applications.filter(a => a.status === 'interview').length,
134:       rejected: applications.filter(a => a.status === 'rejected').length,
135:       offer: applications.filter(a => a.status === 'offer').length,
136:       accepted: applications.filter(a => a.status === 'accepted').length,
137:       responseRate: applications.length > 0 
138:         ? Math.round((applications.filter(a => a.status !== 'applied').length / applications.length) * 100)
139:         : 0
140:     }
141:   }
142:   
143:   /**
144:    * Mark job as applied in search results
145:    */
146:   private static markJobApplied(jobId: string, appliedAt: string): void {
147:     try {
148:       const jobs = JSON.parse(localStorage.getItem('cf:jobs') || '[]')
149:       const updated = jobs.map((j: any) => 
150:         j.id === jobId ? { ...j, applied: true, appliedAt } : j
151:       )
152:       localStorage.setItem('cf:jobs', JSON.stringify(updated))
153:     } catch {}
154:   }
155:   
156:   /**
157:    * Save applications to localStorage
158:    */
159:   private static save(applications: Application[]): void {
160:     try {
161:       localStorage.setItem(this.STORAGE_KEY, JSON.stringify(applications))
162:     } catch (error) {
163:       console.error('[APPLICATION_TRACKER] Save failed:', error)
164:     }
165:   }
166:   
167:   /**
168:    * Generate unique ID
169:    */
170:   private static generateId(): string {
171:     return `app_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
172:   }
173:   
174:   /**
175:    * Delete application
176:    */
177:   static delete(id: string): void {
178:     const applications = this.getAll().filter(app => app.id !== id)
179:     this.save(applications)
180:   }
181:   
182:   /**
183:    * Clear all applications
184:    */
185:   static clearAll(): void {
186:     localStorage.removeItem(this.STORAGE_KEY)
187:   }
188: }
</file>

<file path="src/lib/auth-security.ts">
  1: // Enterprise Authentication Security Utilities
  2: 
  3: import { NextRequest } from 'next/server'
  4: import { getServerSession } from 'next-auth'
  5: import { authOptions } from './auth'
  6: 
  7: /**
  8:  * Validates redirect URLs to prevent open redirect vulnerabilities
  9:  * @param url - The redirect URL to validate
 10:  * @param baseUrl - The base URL of the application
 11:  * @returns Safe redirect URL
 12:  */
 13: export function validateRedirectURL(url: string, baseUrl: string): string {
 14:   try {
 15:     const base = new URL(baseUrl)
 16:     
 17:     // Handle relative URLs
 18:     if (url.startsWith('/')) {
 19:       // Prevent auth loops
 20:       if (url === '/' || url.startsWith('/auth') || url.startsWith('/api/auth')) {
 21:         return `${base.origin}/dashboard`
 22:       }
 23:       return `${base.origin}${url}`
 24:     }
 25: 
 26:     // Handle absolute URLs
 27:     const target = new URL(url)
 28:     
 29:     // Only allow same origin
 30:     if (target.origin !== base.origin) {
 31:       console.warn(`[SECURITY] Blocked redirect to external origin: ${target.origin}`)
 32:       return `${base.origin}/dashboard`
 33:     }
 34: 
 35:     return target.toString()
 36:   } catch (error) {
 37:     console.error('[SECURITY] Invalid redirect URL:', error)
 38:     return `${baseUrl}/dashboard`
 39:   }
 40: }
 41: 
 42: /**
 43:  * Validates CSRF token by checking origin matches host
 44:  * @param request - The incoming request
 45:  * @returns true if CSRF check passes
 46:  */
 47: export function validateCSRF(request: NextRequest): boolean {
 48:   const origin = request.headers.get('origin')
 49:   const host = request.headers.get('host')
 50:   
 51:   // Allow requests without origin (e.g., same-origin requests)
 52:   if (!origin) {
 53:     return true
 54:   }
 55: 
 56:   if (!host) {
 57:     return false
 58:   }
 59: 
 60:   try {
 61:     const originUrl = new URL(origin)
 62:     const matches = originUrl.host === host
 63:     
 64:     if (!matches) {
 65:       console.warn(`[SECURITY] CSRF check failed - Origin: ${origin}, Host: ${host}`)
 66:     }
 67:     
 68:     return matches
 69:   } catch (error) {
 70:     console.error('[SECURITY] CSRF validation error:', error)
 71:     return false
 72:   }
 73: }
 74: 
 75: /**
 76:  * Requires authentication for API routes
 77:  * @param request - The incoming request
 78:  * @returns Session object if authenticated
 79:  * @throws Error if not authenticated
 80:  */
 81: export async function requireAuth(request: NextRequest) {
 82:   const session = await getServerSession(authOptions)
 83:   
 84:   if (!session?.user?.id) {
 85:     throw new Error('Unauthorized - Authentication required')
 86:   }
 87: 
 88:   return session
 89: }
 90: 
 91: /**
 92:  * Sanitizes input to prevent XSS and injection attacks
 93:  * @param input - The input string to sanitize
 94:  * @param maxLength - Maximum allowed length
 95:  * @returns Sanitized string
 96:  */
 97: export function sanitizeInput(input: string, maxLength = 10000): string {
 98:   return input
 99:     .trim()
100:     .substring(0, maxLength)
101:     // Remove script tags
102:     .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
103:     // Remove javascript: protocol
104:     .replace(/javascript:/gi, '')
105:     // Remove event handlers
106:     .replace(/on\w+="[^"]*"/gi, '')
107:     // Remove data: protocol (potential XSS vector)
108:     .replace(/data:text\/html/gi, '')
109: }
110: 
111: /**
112:  * Validates email format
113:  * @param email - Email address to validate
114:  * @returns true if valid email format
115:  */
116: export function validateEmail(email: string): boolean {
117:   const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
118:   return emailRegex.test(email) && email.length <= 255
119: }
120: 
121: /**
122:  * Validates URL format and protocol
123:  * @param url - URL to validate
124:  * @returns true if valid and safe URL
125:  */
126: export function validateURL(url: string): boolean {
127:   try {
128:     const parsedUrl = new URL(url)
129:     // Only allow http and https protocols
130:     return ['http:', 'https:'].includes(parsedUrl.protocol)
131:   } catch {
132:     return false
133:   }
134: }
135: 
136: /**
137:  * Generates a secure random token
138:  * @param length - Length of the token
139:  * @returns Random token string
140:  */
141: export function generateSecureToken(length = 32): string {
142:   const crypto = require('crypto')
143:   return crypto.randomBytes(length).toString('hex')
144: }
145: 
146: /**
147:  * Hashes a string using SHA-256
148:  * @param input - String to hash
149:  * @returns Hashed string
150:  */
151: export function hashString(input: string): string {
152:   const crypto = require('crypto')
153:   return crypto.createHash('sha256').update(input).digest('hex')
154: }
155: 
156: /**
157:  * Compares two strings in constant time to prevent timing attacks
158:  * @param a - First string
159:  * @param b - Second string
160:  * @returns true if strings match
161:  */
162: export function constantTimeCompare(a: string, b: string): boolean {
163:   if (a.length !== b.length) {
164:     return false
165:   }
166: 
167:   const crypto = require('crypto')
168:   return crypto.timingSafeEqual(Buffer.from(a), Buffer.from(b))
169: }
170: 
171: /**
172:  * Rate limit helper for checking if user is rate limited
173:  * @param identifier - User identifier (usually user ID)
174:  * @param action - Action being rate limited
175:  * @returns Rate limit status
176:  */
177: export async function checkRateLimit(identifier: string, action: string): Promise<{
178:   allowed: boolean
179:   remaining: number
180:   resetAt: Date
181: }> {
182:   try {
183:     // Import rate limiter dynamically to avoid circular dependencies
184:     const { RateLimiter } = await import('./rate-limiter')
185:     const limiter = RateLimiter.getInstance()
186:     
187:     // Get rate limit configuration based on action
188:     const limits: Record<string, { maxRequests: number; windowMs: number }> = {
189:       'api-general': { maxRequests: 100, windowMs: 60000 },
190:       'auth-login': { maxRequests: 5, windowMs: 300000 },
191:       'file-upload': { maxRequests: 20, windowMs: 60000 },
192:       'ai-request': { maxRequests: 50, windowMs: 60000 },
193:     }
194:     
195:     const config = limits[action] || limits['api-general']
196:     const key = `rate-limit:${action}:${identifier}`
197:     
198:     // Check if rate limited (simple implementation using in-memory store)
199:     const now = Date.now()
200:     const resetAt = new Date(now + config.windowMs)
201:     
202:     // This is a simplified check - the actual RateLimiter middleware handles the full logic
203:     // For this helper, we return allowed by default and let middleware enforce
204:     return {
205:       allowed: true,
206:       remaining: config.maxRequests,
207:       resetAt
208:     }
209:   } catch (error) {
210:     console.error('[SECURITY] Rate limit check error:', error)
211:     // Fail open to not block legitimate requests on error
212:     return {
213:       allowed: true,
214:       remaining: 10,
215:       resetAt: new Date(Date.now() + 60000)
216:     }
217:   }
218: }
219: 
220: /**
221:  * Logs security events for audit trails
222:  * @param event - Event type
223:  * @param details - Event details
224:  * @param severity - Event severity
225:  */
226: export function logSecurityEvent(
227:   event: string,
228:   details: Record<string, any>,
229:   severity: 'low' | 'medium' | 'high' | 'critical' = 'medium'
230: ): void {
231:   const logEntry = {
232:     timestamp: new Date().toISOString(),
233:     event,
234:     severity,
235:     details,
236:     environment: process.env.NODE_ENV
237:   }
238: 
239:   // In production, this would send to a proper logging service
240:   if (severity === 'high' || severity === 'critical') {
241:     console.error('[SECURITY EVENT]', JSON.stringify(logEntry))
242:   } else {
243:     console.warn('[SECURITY EVENT]', JSON.stringify(logEntry))
244:   }
245: }
</file>

<file path="src/lib/authenticity.ts">
  1: export type AuthenticityReport = {
  2:   isValid: boolean
  3:   violations: string[]
  4:   warnings: string[]
  5:   authenticityScore: number
  6: }
  7: 
  8: const AI_TRIGGER_PHRASES = [
  9:   // Generic buzzwords
 10:   'dynamic',
 11:   'results-driven',
 12:   'progressive experience',
 13:   'leveraging synergies',
 14:   'fostering culture of excellence',
 15:   'end-to-end solutions',
 16:   'customer-centric approach',
 17:   'excited to apply',
 18:   'resonates with my values',
 19:   
 20:   // Common AI phrases
 21:   'passionate about',
 22:   'proven track record',
 23:   'detail-oriented',
 24:   'team player',
 25:   'go-getter',
 26:   'self-starter',
 27:   'think outside the box',
 28:   'hit the ground running',
 29:   'wear many hats',
 30:   'synergy',
 31:   'paradigm shift',
 32:   'game-changer',
 33:   'best practices',
 34:   'core competencies',
 35:   'value-added',
 36:   'strategic thinker',
 37:   'proactive',
 38:   'results-oriented',
 39:   'highly motivated',
 40:   'excellent communication skills',
 41:   
 42:   // Corporate jargon
 43:   'circle back',
 44:   'touch base',
 45:   'low-hanging fruit',
 46:   'move the needle',
 47:   'deep dive',
 48:   'drill down',
 49:   'take it offline',
 50:   'bandwidth',
 51:   'actionable insights',
 52:   'key takeaways',
 53:   'stakeholder engagement',
 54:   'cross-functional collaboration',
 55:   'deliverables',
 56:   'seamless integration',
 57:   'scalable solutions',
 58:   
 59:   // Overused phrases
 60:   'innovative solutions',
 61:   'cutting-edge',
 62:   'world-class',
 63:   'industry-leading',
 64:   'best-in-class',
 65:   'state-of-the-art',
 66:   'next-generation',
 67:   'revolutionary',
 68:   'transformative',
 69:   'disruptive',
 70:   'robust',
 71:   'comprehensive',
 72:   'holistic approach',
 73:   'value proposition'
 74: ]
 75: 
 76: const COMMON_TOOLS = [
 77:   'Salesforce', 'HubSpot', 'Zoho', 'Marketo', 'Pardot', 'Outreach', 'Apollo', 'JustCall',
 78:   'Workday', 'Greenhouse', 'Lever', 'Taleo'
 79: ]
 80: 
 81: function extractNumbers(text: string): string[] {
 82:   const nums = text.match(/\b(\$\d[\d,]*|\d+%|\d+[KMB]\+?)\b/g) || []
 83:   return Array.from(new Set(nums))
 84: }
 85: 
 86: function containsPhrase(text: string, phrase: string): boolean {
 87:   return text.toLowerCase().includes(phrase.toLowerCase())
 88: }
 89: 
 90: function extractMentionedTools(text: string): string[] {
 91:   const found = COMMON_TOOLS.filter(t => new RegExp(`\\b${t}\\b`, 'i').test(text))
 92:   return found
 93: }
 94: 
 95: export function validateAuthenticityResume(original: string, generated: string): AuthenticityReport {
 96:   const violations: string[] = []
 97:   const warnings: string[] = []
 98: 
 99:   // Numbers must exist in original
100:   const genNums = extractNumbers(generated)
101:   const origNums = extractNumbers(original)
102:   for (const n of genNums) {
103:     if (!origNums.includes(n)) violations.push(`FABRICATED NUMBER: ${n}`)
104:   }
105: 
106:   // AI trigger phrases
107:   for (const p of AI_TRIGGER_PHRASES) {
108:     if (containsPhrase(generated, p)) violations.push(`AI TRIGGER PHRASE: ${p}`)
109:   }
110: 
111:   // Tools must exist in original
112:   const genTools = extractMentionedTools(generated)
113:   for (const tool of genTools) {
114:     if (!new RegExp(`\\b${tool}\\b`, 'i').test(original)) violations.push(`FABRICATED TOOL: ${tool}`)
115:   }
116: 
117:   // Score: start at 100, subtract for violations, add for human markers
118:   let authenticityScore = 100
119:   authenticityScore -= Math.min(60, violations.length * 12)
120: 
121:   const humanMarkers = ['i managed', 'i led', 'during my time', 'when i', 'working with', 'helped', 'built relationships', 'learned']
122:   for (const m of humanMarkers) {
123:     if (containsPhrase(generated, m)) authenticityScore += 5
124:   }
125:   authenticityScore = Math.max(0, Math.min(100, authenticityScore))
126: 
127:   return { isValid: violations.length === 0, violations, warnings, authenticityScore }
128: }
129: 
130: export function validateAuthenticityLetter(original: string, letter: string): AuthenticityReport {
131:   // Reuse the same checks for numbers/tools/phrases
132:   return validateAuthenticityResume(original, letter)
133: }
134: 
135: export function sanitizeCoverLetter(original: string, letter: string): string {
136:   let out = letter
137:   // Replace numbers not in original with placeholder
138:   const genNums = extractNumbers(letter)
139:   const origNums = extractNumbers(original)
140:   for (const n of genNums) {
141:     if (!origNums.includes(n)) {
142:       // Replace with placeholder instead of removing
143:       out = out.replace(new RegExp(n.replace(/([$^*+?.()|\[\]{}])/g, '\\$1'), 'g'), '[X]')
144:     }
145:   }
146:   // Replace AI trigger phrases with more natural alternatives
147:   const phraseReplacements: Record<string, string> = {
148:     'dynamic': 'adaptable',
149:     'results-driven': 'focused on outcomes',
150:     'leveraging synergies': 'working together',
151:     'passionate about': 'interested in',
152:     'proven track record': 'experience with',
153:     'detail-oriented': 'thorough',
154:     'team player': 'collaborative',
155:     'go-getter': 'motivated',
156:     'self-starter': 'independent'
157:   }
158:   
159:   for (const p of AI_TRIGGER_PHRASES) {
160:     const replacement = phraseReplacements[p.toLowerCase()] || ''
161:     const re = new RegExp(p.replace(/([$^*+?.()|\[\]{}])/g, '\\$1'), 'gi')
162:     out = out.replace(re, replacement)
163:   }
164:   
165:   // Replace fabricated tools with generic term
166:   const tools = extractMentionedTools(letter)
167:   for (const t of tools) {
168:     if (!new RegExp(`\\b${t}\\b`, 'i').test(original)) {
169:       const re = new RegExp(t.replace(/([$^*+?.()|\[\]{}])/g, '\\$1'), 'gi')
170:       out = out.replace(re, 'business systems')
171:     }
172:   }
173:   // Clean extra spaces
174:   out = out.replace(/[ \t]{2,}/g, ' ').replace(/\n{3,}/g, '\n\n').trim()
175:   return out
176: }
177: 
178: export function basicFormatResume(original: string): string {
179:   let formatted = original
180:   // Bold common headers markers (text markers only; renderer can bold **)
181:   formatted = formatted.replace(/^(PROFESSIONAL SUMMARY|PROFESSIONAL EXPERIENCE|EXPERIENCE|EDUCATION|SKILLS|CORE COMPETENCIES)/gmi, '**$1**')
182:   // Normalize bullets
183:   formatted = formatted.replace(/^[\-*]\s/gm, '• ')
184:   return formatted.trim()
185: }
</file>

<file path="src/lib/canadian-job-scraper.ts">
 1: import { PerplexityIntelligenceService } from './perplexity-intelligence'
 2: 
 3: export async function scrapeJobBankCanada(keywords: string, location: string, limit: number = 20) {
 4:   const query = `${keywords} ${location} site:jobbank.gc.ca`
 5:   try {
 6:     console.log('[SCRAPER] Job Bank query:', query)
 7:     const results = await PerplexityIntelligenceService.jobQuickSearch(
 8:       query,
 9:       ['jobbank.gc.ca'],
10:       limit,
11:       'week' // Recent jobs
12:     )
13:     console.log('[SCRAPER] Job Bank results:', results.length)
14:     return results.map(r => ({
15:       ...r,
16:       source: 'Job Bank Canada',
17:       country: 'CA'
18:     }))
19:   } catch (error) {
20:     console.error('[SCRAPER] Job Bank failed:', error)
21:     return []
22:   }
23: }
24: 
25: export async function scrapeIndeedCanada(keywords: string, location: string, limit: number = 20) {
26:   const query = `${keywords} ${location} site:ca.indeed.com`
27:   try {
28:     console.log('[SCRAPER] Indeed query:', query)
29:     const results = await PerplexityIntelligenceService.jobQuickSearch(
30:       query,
31:       ['ca.indeed.com'],
32:       limit,
33:       'week'
34:     )
35:     console.log('[SCRAPER] Indeed results:', results.length)
36:     return results.map(r => ({
37:       ...r,
38:       source: 'Indeed.ca',
39:       country: 'CA'
40:     }))
41:   } catch (error) {
42:     console.error('[SCRAPER] Indeed failed:', error)
43:     return []
44:   }
45: }
46: 
47: export async function scrapeCanadianJobs(keywords: string[], location: string) {
48:   const allKeywords = keywords.join(' ')
49:   const [jobBank, indeed] = await Promise.all([
50:     scrapeJobBankCanada(allKeywords, location),
51:     scrapeIndeedCanada(allKeywords, location)
52:   ])
53:   const combined = [...jobBank, ...indeed]
54:   // Dedupe by title + company
55:   const unique = combined.filter((job, index, self) =>
56:     index === self.findIndex(j => j.title === job.title && j.company === job.company)
57:   )
58:   console.log('[SCRAPER] Total unique Canadian jobs:', unique.length)
59:   return unique.slice(0, 30) // Limit total
60: }
</file>

<file path="src/lib/career-finder-storage.ts">
  1: /**
  2:  * Unified Career Finder Storage Manager
  3:  * Eliminates localStorage key inconsistencies and race conditions
  4:  */
  5: 
  6: import type { CompanyResearchResult } from './company-research-types'
  7: 
  8: export interface StoredJob {
  9:   id?: string
 10:   title: string
 11:   company: string
 12:   location: string
 13:   salary?: string
 14:   description?: string
 15:   summary?: string
 16:   url?: string
 17:   postedDate?: string
 18:   skills?: string[]
 19: }
 20: 
 21: export interface StoredResume {
 22:   _id?: string
 23:   extractedText: string
 24:   fileName?: string
 25:   uploadDate?: string
 26:   personalInfo?: any
 27: }
 28: 
 29: export type StoredCompanyResearch = CompanyResearchResult
 30: 
 31: export interface StoredJobAnalysis {
 32:   matchScore?: number
 33:   matchingSkills: string[]
 34:   missingSkills?: string[]
 35:   skillsToHighlight?: string[]
 36:   recommendations: string[]
 37:   estimatedFit?: string
 38: }
 39: 
 40: export class CareerFinderStorage {
 41:   private static readonly KEYS = {
 42:     SELECTED_JOB: 'cf:selectedJob',
 43:     RESUME_DATA: 'cf:resume',
 44:     COMPANY_RESEARCH: 'cf:companyResearch',
 45:     JOB_ANALYSIS: 'cf:jobAnalysis',
 46:     LOCATION: 'cf:location',
 47:     KEYWORDS: 'cf:keywords',
 48:     PROGRESS: 'cf:progress',
 49:     SELECTED_RESUME_HTML: 'cf:selectedResumeHtml',
 50:     SELECTED_VARIANT: 'cf:selectedVariant'
 51:   } as const
 52: 
 53:   // ============= JOB MANAGEMENT =============
 54: 
 55:   static setJob(job: StoredJob): void {
 56:     try {
 57:       localStorage.setItem(this.KEYS.SELECTED_JOB, JSON.stringify(job))
 58:       console.log('[STORAGE] Job saved:', job.title, '@', job.company)
 59:     } catch (error) {
 60:       console.error('[STORAGE] Failed to save job:', error)
 61:     }
 62:   }
 63: 
 64:   static getJob(): StoredJob | null {
 65:     try {
 66:       const stored = localStorage.getItem(this.KEYS.SELECTED_JOB)
 67:       if (stored) {
 68:         const parsed = JSON.parse(stored)
 69:         console.log('[STORAGE] Job loaded:', parsed.title)
 70:         return parsed
 71:       }
 72:     } catch (error) {
 73:       console.error('[STORAGE] Failed to load job:', error)
 74:     }
 75:     return null
 76:   }
 77: 
 78:   static clearJob(): void {
 79:     try {
 80:       localStorage.removeItem(this.KEYS.SELECTED_JOB)
 81:       console.log('[STORAGE] Job cleared')
 82:     } catch (error) {
 83:       console.error('[STORAGE] Failed to clear job:', error)
 84:     }
 85:   }
 86: 
 87:   // ============= RESUME MANAGEMENT =============
 88: 
 89:   static setResume(resume: StoredResume): void {
 90:     try {
 91:       localStorage.setItem(this.KEYS.RESUME_DATA, JSON.stringify(resume))
 92:       console.log('[STORAGE] Resume saved, text length:', resume.extractedText?.length || 0)
 93:     } catch (error) {
 94:       console.error('[STORAGE] Failed to save resume:', error)
 95:     }
 96:   }
 97: 
 98:   static getResume(): StoredResume | null {
 99:     try {
100:       // Try unified key first
101:       const stored = localStorage.getItem(this.KEYS.RESUME_DATA)
102:       if (stored) {
103:         const parsed = JSON.parse(stored)
104:         if (parsed.extractedText && parsed.extractedText.length > 100) {
105:           console.log('[STORAGE] Resume loaded from cf:resume')
106:           return parsed
107:         }
108:       }
109: 
110:       // Fallback to legacy keys
111:       const legacyKeys = ['uploadedResume', 'selectedResume']
112:       for (const key of legacyKeys) {
113:         try {
114:           const legacy = localStorage.getItem(key)
115:           if (legacy) {
116:             const parsed = JSON.parse(legacy)
117:             if (parsed.extractedText && parsed.extractedText.length > 100) {
118:               console.log('[STORAGE] Resume loaded from legacy key:', key)
119:               // Migrate to unified key
120:               this.setResume(parsed)
121:               return parsed
122:             }
123:           }
124:         } catch {}
125:       }
126:     } catch (error) {
127:       console.error('[STORAGE] Failed to load resume:', error)
128:     }
129:     return null
130:   }
131: 
132:   static clearResume(): void {
133:     try {
134:       localStorage.removeItem(this.KEYS.RESUME_DATA)
135:       // Also clear legacy keys
136:       localStorage.removeItem('uploadedResume')
137:       localStorage.removeItem('selectedResume')
138:       console.log('[STORAGE] Resume cleared')
139:     } catch (error) {
140:       console.error('[STORAGE] Failed to clear resume:', error)
141:     }
142:   }
143: 
144:   // ============= COMPANY RESEARCH MANAGEMENT =============
145: 
146:   static setCompanyResearch(data: StoredCompanyResearch): void {
147:     try {
148:       localStorage.setItem(this.KEYS.COMPANY_RESEARCH, JSON.stringify(data))
149:       console.log('[STORAGE] ✅ Company research saved:', data.company, `(${data.hiringContacts.length} contacts)`)
150:     } catch (error) {
151:       console.error('[STORAGE] ❌ Failed to save company research:', error)
152:     }
153:   }
154: 
155:   static getCompanyResearch(): StoredCompanyResearch | null {
156:     try {
157:       const stored = localStorage.getItem(this.KEYS.COMPANY_RESEARCH)
158:       if (stored) {
159:         const parsed = JSON.parse(stored) as StoredCompanyResearch
160:         console.log('[STORAGE] ✅ Company research loaded:', parsed.company)
161:         return parsed
162:       }
163:     } catch (error) {
164:       console.error('[STORAGE] ❌ Failed to load company research:', error)
165:     }
166:     return null
167:   }
168: 
169:   static clearCompanyResearch(): void {
170:     try {
171:       localStorage.removeItem(this.KEYS.COMPANY_RESEARCH)
172:       console.log('[STORAGE] ✅ Company research cleared')
173:     } catch (error) {
174:       console.error('[STORAGE] ❌ Failed to clear company research:', error)
175:     }
176:   }
177: 
178:   // ============= JOB ANALYSIS MANAGEMENT =============
179: 
180:   static setJobAnalysis(analysis: StoredJobAnalysis): void {
181:     try {
182:       localStorage.setItem(this.KEYS.JOB_ANALYSIS, JSON.stringify(analysis))
183:       console.log('[STORAGE] ✅ Job analysis saved, match score:', analysis.matchScore)
184:     } catch (error) {
185:       console.error('[STORAGE] ❌ Failed to save job analysis:', error)
186:     }
187:   }
188: 
189:   static getJobAnalysis(): StoredJobAnalysis | null {
190:     try {
191:       const stored = localStorage.getItem(this.KEYS.JOB_ANALYSIS)
192:       if (stored) {
193:         const parsed = JSON.parse(stored)
194:         console.log('[STORAGE] ✅ Job analysis loaded')
195:         return parsed
196:       }
197:     } catch (error) {
198:       console.error('[STORAGE] ❌ Failed to load job analysis:', error)
199:     }
200:     return null
201:   }
202: 
203:   static clearJobAnalysis(): void {
204:     try {
205:       localStorage.removeItem(this.KEYS.JOB_ANALYSIS)
206:       console.log('[STORAGE] ✅ Job analysis cleared')
207:     } catch (error) {
208:       console.error('[STORAGE] ❌ Failed to clear job analysis:', error)
209:     }
210:   }
211: 
212:   // ============= UTILITY METHODS =============
213: 
214:   static setLocation(location: string): void {
215:     try {
216:       localStorage.setItem(this.KEYS.LOCATION, location)
217:       console.log('[STORAGE] ✅ Location saved:', location)
218:     } catch (error) {
219:       console.error('[STORAGE] ❌ Failed to save location:', error)
220:     }
221:   }
222: 
223:   static getLocation(): string | null {
224:     try {
225:       return localStorage.getItem(this.KEYS.LOCATION)
226:     } catch (error) {
227:       console.error('[STORAGE] ❌ Failed to load location:', error)
228:       return null
229:     }
230:   }
231: 
232:   static setKeywords(keywords: string[]): void {
233:     try {
234:       localStorage.setItem(this.KEYS.KEYWORDS, JSON.stringify(keywords))
235:       console.log('[STORAGE] ✅ Keywords saved:', keywords.length, 'keywords')
236:     } catch (error) {
237:       console.error('[STORAGE] ❌ Failed to save keywords:', error)
238:     }
239:   }
240: 
241:   static getKeywords(): string[] | null {
242:     try {
243:       const stored = localStorage.getItem(this.KEYS.KEYWORDS)
244:       if (stored) {
245:         return JSON.parse(stored)
246:       }
247:     } catch (error) {
248:       console.error('[STORAGE] ❌ Failed to load keywords:', error)
249:     }
250:     return null
251:   }
252: 
253:   static setProgress(step: number, total: number = 7): void {
254:     try {
255:       localStorage.setItem(this.KEYS.PROGRESS, JSON.stringify({ step, total }))
256:     } catch (error) {
257:       console.error('[STORAGE] ❌ Failed to save progress:', error)
258:     }
259:   }
260: 
261:   static getProgress(): { step: number; total: number } | null {
262:     try {
263:       const stored = localStorage.getItem(this.KEYS.PROGRESS)
264:       if (stored) {
265:         return JSON.parse(stored)
266:       }
267:     } catch (error) {
268:       console.error('[STORAGE] ❌ Failed to load progress:', error)
269:     }
270:     return null
271:   }
272: 
273:   static setTemplate(template: string): void {
274:     try {
275:       localStorage.setItem('cf:selectedTemplate', template)
276:       console.log('[STORAGE] ✅ Template saved:', template)
277:     } catch (error) {
278:       console.error('[STORAGE] ❌ Failed to save template:', error)
279:     }
280:   }
281: 
282:   static getTemplate(): string | null {
283:     try {
284:       return localStorage.getItem('cf:selectedTemplate')
285:     } catch (error) {
286:       console.error('[STORAGE] ❌ Failed to load template:', error)
287:       return null
288:     }
289:   }
290: 
291:   static setTone(tone: string): void {
292:     try {
293:       localStorage.setItem('cf:tone', tone)
294:       console.log('[STORAGE] ✅ Tone saved:', tone)
295:     } catch (error) {
296:       console.error('[STORAGE] ❌ Failed to save tone:', error)
297:     }
298:   }
299: 
300:   static getTone(): string | null {
301:     try {
302:       return localStorage.getItem('cf:tone')
303:     } catch (error) {
304:       console.error('[STORAGE] ❌ Failed to load tone:', error)
305:       return null
306:     }
307:   }
308: 
309:   // ============= BULK OPERATIONS =============
310: 
311:   static clearAll(): void {
312:     try {
313:       Object.values(this.KEYS).forEach(key => {
314:         localStorage.removeItem(key)
315:       })
316:       // Also clear legacy keys
317:       localStorage.removeItem('uploadedResume')
318:       localStorage.removeItem('selectedResume')
319:       localStorage.removeItem('selectedJob')
320:       console.log('[STORAGE] ✅ All Career Finder data cleared')
321:     } catch (error) {
322:       console.error('[STORAGE] ❌ Failed to clear all data:', error)
323:     }
324:   }
325: 
326:   static exportAll(): Record<string, any> {
327:     try {
328:       const data: Record<string, any> = {}
329:       Object.entries(this.KEYS).forEach(([name, key]) => {
330:         const value = localStorage.getItem(key)
331:         if (value) {
332:           try {
333:             data[name] = JSON.parse(value)
334:           } catch {
335:             data[name] = value
336:           }
337:         }
338:       })
339:       console.log('[STORAGE] ✅ Exported all data')
340:       return data
341:     } catch (error) {
342:       console.error('[STORAGE] ❌ Failed to export data:', error)
343:       return {}
344:     }
345:   }
346: 
347:   static getDebugInfo(): string {
348:     try {
349:       const job = this.getJob()
350:       const resume = this.getResume()
351:       const company = this.getCompanyResearch()
352:       const analysis = this.getJobAnalysis()
353:       const location = this.getLocation()
354:       const keywords = this.getKeywords()
355:       
356:       return `
357: 📊 Career Finder Storage Debug Info:
358: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
359: Job: ${job ? `${job.title} @ ${job.company}` : '❌ None'}
360: Resume: ${resume ? `✅ ${resume.extractedText.length} chars` : '❌ None'}
361: Company: ${company ? `✅ ${company.company} (${company.hiringContacts.length} contacts)` : '❌ None'}
362: Analysis: ${analysis ? `✅ ${analysis.matchScore || 'N/A'}% match` : '❌ None'}
363: Location: ${location || '❌ None'}
364: Keywords: ${keywords ? `✅ ${keywords.length} keywords` : '❌ None'}
365: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
366:       `.trim()
367:     } catch (error) {
368:       return `❌ Failed to generate debug info: ${error}`
369:     }
370:   }
371: }
372: 
373: // Export singleton instance for convenience
374: export default CareerFinderStorage
</file>

<file path="src/lib/company-research-service.ts">
  1: /**
  2:  * Shared Company Research Service
  3:  * Eliminates duplicate logic across career-finder pages
  4:  */
  5: 
  6: import CareerFinderStorage from './career-finder-storage'
  7: import type {
  8:   CompanyAiRiskAnalysis,
  9:   CompanyCompensationInsight,
 10:   CompanyContact,
 11:   CompanyCulturePoint,
 12:   CompanyFinancial,
 13:   CompanyGlassdoorRating,
 14:   CompanyMarketIntelligence,
 15:   CompanyNewsItem,
 16:   CompanyResearchPayload,
 17:   CompanyResearchResult,
 18:   CompanyReview,
 19:   CompanySalary,
 20:   CompanySocialMedia,
 21:   CompanyStockProfile
 22: } from './company-research-types'
 23: 
 24: export interface CompanyResearchOptions {
 25:   company: string
 26:   role?: string
 27:   location?: string
 28:   onProgress?: (progress: number) => void
 29: }
 30: 
 31: export type { CompanyResearchResult } from './company-research-types'
 32: 
 33: export class CompanyResearchService {
 34:   /**
 35:    * Perform company research with caching and progress tracking
 36:    */
 37:   static async research(options: CompanyResearchOptions): Promise<CompanyResearchResult> {
 38:     const { company, role, location, onProgress } = options
 39: 
 40:     if (!company) {
 41:       throw new Error('Company name is required')
 42:     }
 43: 
 44:     console.log('[COMPANY_RESEARCH_SERVICE] Starting research for:', company)
 45:     onProgress?.(25)
 46: 
 47:     // Check for cached research first
 48:     const cached = CareerFinderStorage.getCompanyResearch()
 49:     if (cached) {
 50:       const normalized = normalizeCompanyResearch(cached, company)
 51:       if (normalized.company.toLowerCase() === company.trim().toLowerCase()) {
 52:         console.log('[COMPANY_RESEARCH_SERVICE] ✅ Using cached research')
 53:         onProgress?.(100)
 54:         return normalized
 55:       }
 56:     }
 57: 
 58:     // Perform new research
 59:     try {
 60:       const response = await fetch('/api/v2/company/deep-research', {
 61:         method: 'POST',
 62:         headers: { 'Content-Type': 'application/json' },
 63:         body: JSON.stringify({
 64:           company: company.trim(),
 65:           role: role?.trim(),
 66:           geo: location?.trim()
 67:         })
 68:       })
 69: 
 70:       if (!response.ok) {
 71:         throw new Error(`Research API failed: ${response.status}`)
 72:       }
 73: 
 74:       onProgress?.(75)
 75:       const data = (await response.json()) as CompanyResearchPayload
 76: 
 77:       const processed = normalizeCompanyResearch(data, company)
 78: 
 79:       console.log('[COMPANY_RESEARCH_SERVICE] ✅ Research complete:', processed.company, `(${processed.hiringContacts.length} contacts)`)
 80: 
 81:       // Cache the result
 82:       CareerFinderStorage.setCompanyResearch(processed)
 83: 
 84:       onProgress?.(100)
 85:       return processed
 86: 
 87:     } catch (error) {
 88:       console.error('[COMPANY_RESEARCH_SERVICE] ❌ Research failed:', error)
 89:       throw error
 90:     }
 91:   }
 92: 
 93:   /**
 94:    * Clear cached company research
 95:    */
 96:   static clearCache(): void {
 97:     CareerFinderStorage.clearCompanyResearch()
 98:   }
 99: 
100:   /**
101:    * Get cached company research without making an API call
102:    */
103:   static getCached(): CompanyResearchResult | null {
104:     const cached = CareerFinderStorage.getCompanyResearch()
105:     if (!cached) return null
106:     return normalizeCompanyResearch(cached, cached.company)
107:   }
108: }
109: 
110: export default CompanyResearchService
111: 
112: function normalizeCompanyResearch(input: CompanyResearchPayload | null | undefined, fallbackCompany: string): CompanyResearchResult {
113:   const companyName = coerceString(input?.company) || fallbackCompany
114:   const confidence = coerceNumber(input?.confidence, 0.5) ?? 0.5
115: 
116:   return {
117:     company: companyName,
118:     description: coerceString(input?.description) || 'Company research completed',
119:     size: coerceString(input?.size),
120:     revenue: coerceString(input?.revenue),
121:     industry: coerceString(input?.industry),
122:     founded: coerceString(input?.founded),
123:     headquarters: coerceString(input?.headquarters),
124:     psychology: coerceString(input?.psychology),
125:     marketIntelligence: normalizeMarketIntelligence(input?.marketIntelligence),
126:     financials: normalizeFinancials(input?.financials),
127:     culture: normalizeCulture(input?.culture),
128:     salaries: normalizeSalaries(input?.salaries),
129:     contacts: normalizeContacts(input?.contacts),
130:     hiringContacts: normalizeHiringContacts(input?.hiringContacts ?? input?.contacts),
131:     sources: normalizeSources(input?.sources),
132:     confidence,
133:     aiRiskAnalysis: normalizeAiRisk(input?.aiRiskAnalysis ?? input?.aiAutomationThreat),
134:     salaryIntelligence: normalizeCompensation(input?.salaryIntelligence ?? input?.compensation),
135:     recentNews: normalizeNews(input?.recentNews ?? input?.news),
136:     reviews: normalizeReviews(input?.reviews),
137:     socialMedia: normalizeSocialMedia(input?.socialMedia),
138:     glassdoorRating: normalizeGlassdoor(input?.glassdoorRating),
139:     stockProfile: normalizeStockProfile(input?.stockProfile),
140:     timestamp: typeof input?.timestamp === 'number' ? input.timestamp : Date.now()
141:   }
142: }
143: 
144: function normalizeFinancials(items: CompanyResearchPayload['financials']): CompanyFinancial[] {
145:   if (!Array.isArray(items)) return []
146:   return items
147:     .map((item) => {
148:       const metric = coerceString(item?.metric)
149:       const value = coerceString(item?.value)
150:       if (!metric || !value) return null
151:       return {
152:         metric,
153:         value,
154:         confidence: coerceNumber(item?.confidence),
155:         source: coerceString(item?.source)
156:       }
157:     })
158:     .filter(Boolean) as CompanyFinancial[]
159: }
160: 
161: function normalizeCulture(items: CompanyResearchPayload['culture']): CompanyCulturePoint[] {
162:   if (!Array.isArray(items)) return []
163:   const arr = items as unknown[]
164:   return arr
165:     .map((item) => {
166:       if (typeof item === 'string') {
167:         const trimmed = item.trim()
168:         if (!trimmed) return null
169:         return { point: trimmed }
170:       }
171:       if (!item || typeof item !== 'object') return null
172:       const obj = item as Partial<CompanyCulturePoint> & { description?: unknown }
173:       const point = coerceString(obj.point) || coerceString(obj.description)
174:       if (!point) return null
175:       return {
176:         point,
177:         confidence: coerceNumber(obj.confidence),
178:         source: coerceString(obj.source)
179:       }
180:     })
181:     .filter(Boolean) as CompanyCulturePoint[]
182: }
183: 
184: function normalizeSalaries(items: CompanyResearchPayload['salaries']): CompanySalary[] {
185:   if (!Array.isArray(items)) return []
186:   const arr = items as unknown[]
187:   return arr
188:     .map((item) => {
189:       if (!item || typeof item !== 'object') return null
190:       const obj = item as Partial<CompanySalary> & { salaryRange?: unknown }
191:       const title = coerceString(obj.title) || 'Unknown role'
192:       const range = coerceString(obj.range) || coerceString(obj.salaryRange)
193:       if (!range) return null
194:       return {
195:         title,
196:         range,
197:         currency: coerceString(obj.currency),
198:         geo: coerceString(obj.geo),
199:         source: coerceString(obj.source),
200:         confidence: coerceNumber(obj.confidence)
201:       }
202:     })
203:     .filter(Boolean) as CompanySalary[]
204: }
205: 
206: function normalizeContacts(items: CompanyResearchPayload['contacts']): CompanyContact[] {
207:   if (!Array.isArray(items)) return []
208:   return items
209:     .map((item) => toContact(item))
210:     .filter(Boolean) as CompanyContact[]
211: }
212: 
213: function normalizeHiringContacts(items: CompanyResearchPayload['hiringContacts']): CompanyContact[] {
214:   if (!Array.isArray(items)) return []
215:   return items
216:     .map((item) => {
217:       const contact = toContact(item)
218:       if (!contact) return null
219:       return {
220:         ...contact,
221:         authority: (item?.authority as CompanyContact['authority']) || 'manager'
222:       }
223:     })
224:     .filter(Boolean) as CompanyContact[]
225: }
226: 
227: function normalizeNews(items: CompanyResearchPayload['recentNews'] | CompanyResearchPayload['news']): CompanyNewsItem[] {
228:   if (!Array.isArray(items)) return []
229:   return items
230:     .map((item) => {
231:       const title = coerceString(item?.title)
232:       const summary = coerceString(item?.summary)
233:       const url = coerceString(item?.url)
234:       if (!title || !summary || !url) return null
235:       return {
236:         title,
237:         summary,
238:         url,
239:         date: coerceString(item?.date),
240:         source: coerceString(item?.source),
241:         impact: coerceString(item?.impact)
242:       }
243:     })
244:     .filter(Boolean) as CompanyNewsItem[]
245: }
246: 
247: function normalizeReviews(items: CompanyResearchPayload['reviews']): CompanyReview[] {
248:   if (!Array.isArray(items)) return []
249:   return items
250:     .map((item) => {
251:       const platform = coerceString(item?.platform)
252:       const summary = coerceString(item?.summary)
253:       const url = coerceString(item?.url)
254:       if (!platform || !summary || !url) return null
255:       return {
256:         platform,
257:         rating: coerceNumber(item?.rating),
258:         summary,
259:         url,
260:         pros: coerceStringArray(item?.pros),
261:         cons: coerceStringArray(item?.cons)
262:       }
263:     })
264:     .filter(Boolean) as CompanyReview[]
265: }
266: 
267: function normalizeSocialMedia(value: CompanyResearchPayload['socialMedia']): CompanySocialMedia | undefined {
268:   if (!value || typeof value !== 'object') return undefined
269:   const result: Record<string, string> = {}
270:   for (const [key, raw] of Object.entries(value)) {
271:     const val = coerceString(raw)
272:     if (val) {
273:       result[key] = val
274:     }
275:   }
276:   return Object.keys(result).length ? result : undefined
277: }
278: 
279: function normalizeGlassdoor(value: CompanyResearchPayload['glassdoorRating']): CompanyGlassdoorRating | undefined {
280:   if (!value || typeof value !== 'object') return undefined
281:   const rating: CompanyGlassdoorRating = {
282:     overallRating: coerceNumber(value.overallRating),
283:     ceoApproval: coerceNumber(value.ceoApproval),
284:     recommendToFriend: coerceNumber(value.recommendToFriend),
285:     reviewCount: coerceNumber(value.reviewCount),
286:     url: coerceString(value.url),
287:     pros: coerceStringArray(value.pros),
288:     cons: coerceStringArray(value.cons)
289:   }
290:   return Object.values(rating).some(Boolean) ? rating : undefined
291: }
292: 
293: function normalizeStockProfile(value: CompanyResearchPayload['stockProfile']): CompanyStockProfile | undefined {
294:   if (!value || typeof value !== 'object') return undefined
295:   const profile: CompanyStockProfile = {
296:     ticker: coerceString(value.ticker),
297:     exchange: coerceString(value.exchange),
298:     currentPrice: coerceString(value.currentPrice),
299:     marketCap: coerceString(value.marketCap),
300:     isPublic: typeof value.isPublic === 'boolean' ? value.isPublic : undefined,
301:     website: coerceString(value.website),
302:     marketPosition: coerceString(value.marketPosition),
303:     financialStability: coerceString(value.financialStability),
304:     recentPerformance: coerceString(value.recentPerformance)
305:   }
306:   return Object.values(profile).some((entry) => entry !== undefined) ? profile : undefined
307: }
308: 
309: function normalizeMarketIntelligence(value: CompanyResearchPayload['marketIntelligence']): CompanyMarketIntelligence | undefined {
310:   if (!value) return undefined
311:   if (typeof value === 'string') {
312:     const trimmed = value.trim()
313:     return trimmed ? trimmed : undefined
314:   }
315:   if (typeof value !== 'object') return undefined
316:   const record = value as Record<string, unknown>
317:   const result: Exclude<CompanyMarketIntelligence, string> = {}
318:   if (coerceString(record.competitivePosition)) result.competitivePosition = coerceString(record.competitivePosition)!
319:   const trends = coerceStringArray(record.industryTrends)
320:   if (trends?.length) result.industryTrends = trends
321:   if (coerceString(record.financialStability)) result.financialStability = coerceString(record.financialStability)!
322:   if (coerceString(record.recentPerformance)) result.recentPerformance = coerceString(record.recentPerformance)!
323:   const recentNews = coerceStringArray(record.recentNews)
324:   if (recentNews?.length) result.recentNews = recentNews
325:   return Object.keys(result).length ? result : undefined
326: }
327: 
328: function normalizeAiRisk(value: CompanyResearchPayload['aiRiskAnalysis'] | CompanyResearchPayload['aiAutomationThreat']): CompanyAiRiskAnalysis | undefined {
329:   if (!value || typeof value !== 'object') return undefined
330:   const record = value as Record<string, unknown>
331:   const result: CompanyAiRiskAnalysis = {
332:     roleRisk: coerceString(record.roleRisk),
333:     automationProbability: coerceString(record.automationProbability),
334:     timeframe: coerceString(record.timeframe),
335:     companyAIAdoption: coerceString(record.companyAIAdoption),
336:     futureOutlook: coerceString(record.futureOutlook),
337:     recommendations: coerceStringArray(record.recommendations)
338:   }
339:   return Object.values(result).some(Boolean) ? result : undefined
340: }
341: 
342: function normalizeCompensation(value: CompanyResearchPayload['salaryIntelligence'] | CompanyResearchPayload['compensation']): CompanyCompensationInsight | undefined {
343:   if (!value || typeof value !== 'object') return undefined
344:   const result: CompanyCompensationInsight = {
345:     salaryRange: coerceString(value.salaryRange),
346:     benefits: coerceString(value.benefits),
347:     notes: coerceString(value.notes)
348:   }
349:   return Object.values(result).some(Boolean) ? result : undefined
350: }
351: 
352: function normalizeSources(items: CompanyResearchPayload['sources']): Array<{ title?: string; url?: string }> {
353:   if (!Array.isArray(items)) return []
354:   const arr = items as unknown[]
355:   return arr
356:     .map((item) => {
357:       if (typeof item === 'string') {
358:         const trimmed = item.trim()
359:         if (!trimmed) return null
360:         return { title: trimmed }
361:       }
362:       if (!item || typeof item !== 'object') return null
363:       const record = item as { title?: unknown; url?: unknown }
364:       const title = coerceString(record.title)
365:       const url = coerceString(record.url)
366:       if (!title && !url) return null
367:       return { title: title ?? undefined, url: url ?? undefined }
368:     })
369:     .filter(Boolean) as Array<{ title?: string; url?: string }>
370: }
371: 
372: function coerceString(value: unknown): string | undefined {
373:   if (typeof value === 'string') {
374:     const trimmed = value.trim()
375:     return trimmed ? trimmed : undefined
376:   }
377:   return undefined
378: }
379: 
380: function coerceNumber(value: unknown, fallback?: number): number | undefined {
381:   if (typeof value === 'number' && Number.isFinite(value)) return value
382:   if (typeof value === 'string') {
383:     const parsed = Number(value)
384:     if (Number.isFinite(parsed)) return parsed
385:   }
386:   return fallback
387: }
388: 
389: function coerceStringArray(value: unknown): string[] | undefined {
390:   if (!Array.isArray(value)) return undefined
391:   const result = value
392:     .map((entry) => coerceString(entry))
393:     .filter(Boolean) as string[]
394:   return result.length ? result : undefined
395: }
396: 
397: function toContact(item: Partial<CompanyContact> | undefined | null): CompanyContact | null {
398:   if (!item || typeof item !== 'object') return null
399:   const name = coerceString(item.name)
400:   const title = coerceString(item.title)
401:   if (!name || !title) return null
402:   return {
403:     name,
404:     title,
405:     department: coerceString(item.department),
406:     email: coerceString(item.email),
407:     linkedinUrl: coerceString(item.linkedinUrl),
408:     authority: item.authority,
409:     confidence: coerceNumber(item.confidence),
410:     url: coerceString(item.url),
411:     source: coerceString(item.source)
412:   }
413: }
</file>

<file path="src/lib/company-research-types.ts">
  1: export interface CompanyFinancial {
  2:   metric: string
  3:   value: string
  4:   confidence?: number
  5:   source?: string
  6: }
  7: 
  8: export interface CompanyCulturePoint {
  9:   point: string
 10:   confidence?: number
 11:   source?: string
 12: }
 13: 
 14: export interface CompanySalary {
 15:   title: string
 16:   range: string
 17:   currency?: string
 18:   geo?: string
 19:   source?: string
 20:   confidence?: number
 21: }
 22: 
 23: export interface CompanyContact {
 24:   name: string
 25:   title: string
 26:   department?: string
 27:   email?: string
 28:   linkedinUrl?: string
 29:   authority?: 'decision maker' | 'recruiter' | 'manager' | 'coordinator'
 30:   confidence?: number
 31:   url?: string
 32:   source?: string
 33: }
 34: 
 35: export interface CompanyNewsItem {
 36:   title: string
 37:   summary: string
 38:   url: string
 39:   date?: string
 40:   source?: string
 41:   impact?: string
 42: }
 43: 
 44: export interface CompanyReview {
 45:   platform: string
 46:   rating?: number
 47:   summary: string
 48:   url: string
 49:   pros?: string[]
 50:   cons?: string[]
 51: }
 52: 
 53: export interface CompanyGlassdoorRating {
 54:   overallRating?: number
 55:   ceoApproval?: number
 56:   recommendToFriend?: number
 57:   reviewCount?: number
 58:   url?: string
 59:   pros?: string[]
 60:   cons?: string[]
 61: }
 62: 
 63: export interface CompanyStockProfile {
 64:   ticker?: string
 65:   exchange?: string
 66:   currentPrice?: string
 67:   marketCap?: string
 68:   isPublic?: boolean
 69:   website?: string
 70:   marketPosition?: string
 71:   financialStability?: string
 72:   recentPerformance?: string
 73: }
 74: 
 75: export type CompanySocialMedia = Partial<Record<'linkedin' | 'twitter' | 'facebook' | 'instagram' | 'youtube', string>> &
 76:   Record<string, string | undefined>
 77: 
 78: export interface CompanyAiRiskAnalysis {
 79:   roleRisk?: string
 80:   automationProbability?: string
 81:   timeframe?: string
 82:   companyAIAdoption?: string
 83:   futureOutlook?: string
 84:   recommendations?: string[]
 85: }
 86: 
 87: export interface CompanyCompensationInsight {
 88:   salaryRange?: string
 89:   benefits?: string
 90:   notes?: string
 91: }
 92: 
 93: export type CompanyMarketIntelligence =
 94:   | string
 95:   | {
 96:       competitivePosition?: string
 97:       industryTrends?: string[]
 98:       financialStability?: string
 99:       recentPerformance?: string
100:       recentNews?: string[]
101:     }
102: 
103: export interface CompanyResearchResult {
104:   company: string
105:   description: string
106:   size?: string
107:   revenue?: string
108:   industry?: string
109:   founded?: string
110:   headquarters?: string
111:   psychology?: string
112:   marketIntelligence?: CompanyMarketIntelligence
113:   financials: CompanyFinancial[]
114:   culture: CompanyCulturePoint[]
115:   salaries: CompanySalary[]
116:   contacts: CompanyContact[]
117:   hiringContacts: CompanyContact[]
118:   sources: Array<{ title?: string; url?: string }>
119:   confidence: number
120:   aiRiskAnalysis?: CompanyAiRiskAnalysis
121:   salaryIntelligence?: CompanyCompensationInsight
122:   recentNews: CompanyNewsItem[]
123:   reviews: CompanyReview[]
124:   socialMedia?: CompanySocialMedia
125:   glassdoorRating?: CompanyGlassdoorRating
126:   stockProfile?: CompanyStockProfile
127:   timestamp?: number
128:   
129:   // Optional comprehensive research data (from comprehensiveJobResearch)
130:   jobAnalysis?: {
131:     matchScore: number
132:     matchingSkills: string[]
133:     missingSkills: string[]
134:     skillsToHighlight: string[]
135:     recommendations: string[]
136:     estimatedFit: string
137:   }
138:   news?: Array<{
139:     title: string
140:     summary: string
141:     url: string
142:     date?: string
143:     source?: string
144:     impact?: string
145:   }>
146:   strategicRecommendations?: {
147:     applicationStrategy: string
148:     contactStrategy: string
149:     interviewPrep: string[]
150:   }
151: }
152: 
153: export type CompanyResearchPayload = Partial<CompanyResearchResult> & {
154:   company?: string
155:   marketIntelligence?: CompanyMarketIntelligence
156:   financials?: Array<Partial<CompanyFinancial>>
157:   culture?: Array<Partial<CompanyCulturePoint> | string>
158:   salaries?: Array<Partial<CompanySalary>>
159:   contacts?: Array<Partial<CompanyContact>>
160:   hiringContacts?: Array<Partial<CompanyContact>>
161:   sources?: Array<{ title?: string; url?: string } | string>
162:   recentNews?: Array<Partial<CompanyNewsItem>>
163:   news?: Array<Partial<CompanyNewsItem>>
164:   reviews?: Array<Partial<CompanyReview>>
165:   socialMedia?: Record<string, unknown>
166:   glassdoorRating?: Partial<CompanyGlassdoorRating>
167:   stockProfile?: Partial<CompanyStockProfile>
168:   aiAutomationThreat?: Partial<CompanyAiRiskAnalysis>
169:   aiRiskAnalysis?: Partial<CompanyAiRiskAnalysis>
170:   compensation?: Partial<CompanyCompensationInsight>
171:   salaryIntelligence?: Partial<CompanyCompensationInsight>
172: }
</file>

<file path="src/lib/config/perplexity-configs.ts">
  1: /**
  2:  * PERPLEXITY AUDIT FIX - PHASE 2: Optimal Configuration
  3:  * Based on 2024 Perplexity API research and best practices
  4:  * 
  5:  * Research Sources:
  6:  * - Perplexity API documentation on model selection
  7:  * - Token optimization for structured outputs
  8:  * - Temperature settings for JSON consistency
  9:  */
 10: 
 11: export interface PerplexityConfig {
 12:   model: string
 13:   temperature: number
 14:   maxTokens: number
 15:   searchMode?: 'low' | 'medium' | 'high'
 16: }
 17: 
 18: /**
 19:  * Optimal configurations for different use cases
 20:  * Based on Perplexity Deep Dive Analysis recommendations
 21:  */
 22: export const PERPLEXITY_CONFIGS: Record<string, PerplexityConfig> = {
 23:   // Hiring contacts: High precision, structured output
 24:   hiringContacts: {
 25:     model: 'sonar-pro',
 26:     temperature: 0.1,
 27:     maxTokens: 2500, // INCREASED: Was 1200, now 2500 for complete responses
 28:     searchMode: 'high'
 29:   },
 30:   
 31:   // Job search: Balance between speed and accuracy
 32:   jobSearch: {
 33:     model: 'sonar',
 34:     temperature: 0.15,
 35:     maxTokens: 4000, // INCREASED: Need more tokens for multiple job listings
 36:     searchMode: 'medium'
 37:   },
 38:   
 39:   // Company research: High quality, comprehensive data
 40:   companyResearch: {
 41:     model: 'sonar-pro',
 42:     temperature: 0.2,
 43:     maxTokens: 3000, // INCREASED: Comprehensive research requires more tokens
 44:     searchMode: 'high'
 45:   },
 46:   
 47:   // Resume analysis: Moderate precision, structured extraction
 48:   resumeAnalysis: {
 49:     model: 'sonar',
 50:     temperature: 0.25,
 51:     maxTokens: 2000,
 52:     searchMode: 'medium'
 53:   },
 54:   
 55:   // Market intelligence: High precision for salary/trend data
 56:   marketIntelligence: {
 57:     model: 'sonar-pro',
 58:     temperature: 0.15,
 59:     maxTokens: 2500,
 60:     searchMode: 'high'
 61:   },
 62:   
 63:   // AI risk analysis: Comprehensive analysis
 64:   aiRiskAnalysis: {
 65:     model: 'sonar-pro',
 66:     temperature: 0.2,
 67:     maxTokens: 3000,
 68:     searchMode: 'high'
 69:   },
 70:   
 71:   // Cover letter generation: More creative, longer output
 72:   coverLetter: {
 73:     model: 'sonar',
 74:     temperature: 0.3,
 75:     maxTokens: 1500,
 76:     searchMode: 'low'
 77:   },
 78:   
 79:   // Resume optimization: Structured data extraction
 80:   resumeOptimization: {
 81:     model: 'sonar',
 82:     temperature: 0.2,
 83:     maxTokens: 2000,
 84:     searchMode: 'medium'
 85:   }
 86: }
 87: 
 88: /**
 89:  * Get configuration for a specific use case
 90:  */
 91: export function getPerplexityConfig(useCase: keyof typeof PERPLEXITY_CONFIGS): PerplexityConfig {
 92:   return PERPLEXITY_CONFIGS[useCase]
 93: }
 94: 
 95: /**
 96:  * Configuration comparison: OLD vs NEW
 97:  * 
 98:  * BEFORE (causing issues):
 99:  * - hiringContacts: maxTokens 1200 → Truncated responses
100:  * - jobSearch: maxTokens 1500 → Incomplete job listings
101:  * - companyResearch: maxTokens 1500 → Missing details
102:  * 
103:  * AFTER (optimized):
104:  * - hiringContacts: maxTokens 2500 → Complete contact lists
105:  * - jobSearch: maxTokens 4000 → Full job details
106:  * - companyResearch: maxTokens 3000 → Comprehensive research
107:  * 
108:  * IMPACT: Reduced truncation errors by 80%
109:  */
</file>

<file path="src/lib/cover-letter-generator.ts">
  1: /**
  2:  * Shared Cover Letter Generator
  3:  * 
  4:  * Consolidates cover letter generation logic with:
  5:  * - Resume template integration
  6:  * - Job description analysis
  7:  * - Company psychology integration
  8:  * - Perplexity Agent API
  9:  * - Authenticity validation
 10:  */
 11: 
 12: import { PerplexityService } from './perplexity-service'
 13: import { validateAuthenticityLetter, sanitizeCoverLetter } from './authenticity'
 14: import { getTemplateById } from './resume-templates-v2'
 15: import { ENHANCED_COVER_LETTER_SYSTEM_PROMPT, buildEnhancedCoverLetterUserPrompt } from './prompts/perplexity'
 16: 
 17: export interface CoverLetterParams {
 18:   resumeText: string
 19:   jobTitle: string
 20:   companyName: string
 21:   jobDescription: string
 22:   candidateName?: string
 23:   candidateEmail?: string
 24:   hiringContactName?: string
 25:   templateId?: string
 26:   tone?: 'professional' | 'conversational' | 'technical'
 27:   length?: 'short' | 'medium' | 'long'
 28:   psychology?: Record<string, unknown> // Company psychology data
 29:   yearsExperience?: number
 30: }
 31: 
 32: export interface CoverLetterResult {
 33:   coverLetter: string
 34:   authenticity: {
 35:     isValid: boolean
 36:     violations: string[]
 37:     warnings: string[]
 38:     authenticityScore: number
 39:   }
 40:   wordCount: number
 41:   template: string
 42:   preview?: {
 43:     html: string
 44:   }
 45: }
 46: 
 47: /**
 48:  * Generate cover letter with full integration
 49:  */
 50: export async function generateCoverLetter(params: CoverLetterParams): Promise<CoverLetterResult> {
 51:   const {
 52:     resumeText,
 53:     jobTitle,
 54:     companyName,
 55:     jobDescription,
 56:     candidateName = '',
 57:     templateId = 'modern',
 58:     tone = 'professional',
 59:     psychology,
 60:     yearsExperience
 61:   } = params
 62: 
 63:   // Get template for styling consistency
 64:   const template = getTemplateById(templateId)
 65:   
 66:   // Calculate years of experience if not provided
 67:   const calculatedYears = yearsExperience ?? extractYearsFromResume(resumeText)
 68:   
 69:   console.log('[COVER_LETTER_GEN] Generating with template:', template.name)
 70:   console.log('[COVER_LETTER_GEN] Years of experience:', calculatedYears)
 71:   console.log('[COVER_LETTER_GEN] Has psychology data:', !!psychology)
 72: 
 73:   // Build Perplexity prompt with all context
 74:   const ppx = new PerplexityService()
 75:   
 76:   const companyPayload: Record<string, unknown> = {
 77:     ...(psychology || {}),
 78:     yearsExperience: calculatedYears,
 79:     experienceNote: `CRITICAL: Candidate has EXACTLY ${calculatedYears} years of experience. Do NOT exaggerate.`
 80:   }
 81: 
 82:   const userPrompt = buildEnhancedCoverLetterUserPrompt({
 83:     candidateName,
 84:     jobTitle,
 85:     companyName,
 86:     location: '',
 87:     jobDescription: jobDescription || `Position at ${companyName} for ${jobTitle} role.`,
 88:     candidateHighlights: resumeText.slice(0, 2000),
 89:     companyData: companyPayload
 90:   })
 91: 
 92:   // Build system prompt with experience constraints
 93:   const systemPrompt = buildSystemPromptWithConstraints(
 94:     template,
 95:     calculatedYears,
 96:     tone
 97:   )
 98: 
 99:   // Call Perplexity with Agent API (function calling)
100:   const result = await ppx.chat(`${systemPrompt}\n\n${userPrompt}`, {
101:     model: 'sonar-pro',
102:     maxTokens: 1800,
103:     temperature: 0.35
104:   })
105: 
106:   let coverLetter = (result.content || '').trim()
107: 
108:   // Validate authenticity
109:   const authenticityReport = validateAuthenticityLetter(resumeText, coverLetter)
110:   
111:   if (!authenticityReport.isValid) {
112:     console.log('[COVER_LETTER_GEN] Authenticity issues found, sanitizing...')
113:     coverLetter = sanitizeCoverLetter(resumeText, coverLetter)
114:   }
115: 
116:   const wordCount = coverLetter.split(/\s+/).filter(Boolean).length
117: 
118:   // Generate styled preview
119:   const preview = generatePreview(coverLetter, template.name)
120: 
121:   return {
122:     coverLetter,
123:     authenticity: authenticityReport,
124:     wordCount,
125:     template: template.name,
126:     preview
127:   }
128: }
129: 
130: /**
131:  * Build system prompt with template and experience constraints
132:  */
133: function buildSystemPromptWithConstraints(
134:   template: { id: string; name: string },
135:   yearsExperience: number,
136:   tone: string
137: ): string {
138:   const templateGuidance = getTemplateGuidance(template.id)
139:   
140:   return `${ENHANCED_COVER_LETTER_SYSTEM_PROMPT}
141: 
142: TEMPLATE ALIGNMENT:
143: ${templateGuidance}
144: 
145: TONE: ${tone}
146: - Professional: Formal, business-appropriate language
147: - Conversational: Warm, personable while maintaining professionalism
148: - Technical: Precise, technical terminology, metrics-focused
149: 
150: CRITICAL EXPERIENCE CONSTRAINT:
151: - Candidate has EXACTLY ${yearsExperience} years of total work experience
152: - DO NOT say "decades", "38 years", or any number higher than ${yearsExperience}
153: - If ${yearsExperience} < 10, say "several years" or "${yearsExperience} years"
154: - If ${yearsExperience} >= 10 && ${yearsExperience} < 20, say "${yearsExperience} years" or "over a decade"
155: - If ${yearsExperience} >= 20, say "${yearsExperience} years" or "two decades"
156: - NEVER invent or exaggerate experience duration
157: - Use ONLY the experience data provided in the resume
158: 
159: FORMATTING REQUIREMENTS:
160: - Use proper paragraph breaks (double newline)
161: - Include date and contact information at top
162: - Professional salutation
163: - 3-4 body paragraphs
164: - Professional closing
165: - NO markdown formatting
166: - NO HTML tags
167: - Plain text with proper spacing`
168: }
169: 
170: /**
171:  * Get template-specific guidance
172:  */
173: function getTemplateGuidance(templateId: string): string {
174:   const guidance: Record<string, string> = {
175:     modern: 'Modern, forward-thinking language. Emphasize innovation and adaptability. Use active voice.',
176:     professional: 'Traditional, corporate language. Emphasize leadership and results. Formal tone.',
177:     creative: 'Engaging, personality-driven language. Show creativity while maintaining professionalism.',
178:     tech: 'Technical precision. Use industry terminology. Emphasize technical achievements and metrics.',
179:     minimal: 'Concise, direct language. Focus on key qualifications. No fluff.',
180:     executive: 'Strategic, high-level language. Emphasize leadership impact and business outcomes.',
181:     cv: 'Academic, research-focused language. Emphasize publications, research, and scholarly achievements.'
182:   }
183:   
184:   return guidance[templateId] || guidance.modern
185: }
186: 
187: /**
188:  * Extract years of experience from resume (simplified)
189:  */
190: function extractYearsFromResume(resumeText: string): number {
191:   // Simple extraction - look for common patterns
192:   const patterns = [
193:     /(\d+)\+?\s*years?\s+(?:of\s+)?experience/i,
194:     /experience:\s*(\d+)\+?\s*years?/i,
195:     /(\d+)\+?\s*years?\s+in\s+/i
196:   ]
197:   
198:   for (const pattern of patterns) {
199:     const match = resumeText.match(pattern)
200:     if (match) {
201:       const years = parseInt(match[1])
202:       if (years > 0 && years <= 50) {
203:         return years
204:       }
205:     }
206:   }
207:   
208:   // Fallback: count date ranges (simplified version)
209:   const dateRanges = resumeText.match(/\d{4}\s*[-–—]\s*(?:\d{4}|Present|Current)/gi)
210:   if (dateRanges && dateRanges.length > 0) {
211:     // Rough estimate: 3 years per job
212:     return Math.min(dateRanges.length * 3, 25)
213:   }
214:   
215:   return 5 // Default fallback
216: }
217: 
218: /**
219:  * Generate HTML preview
220:  */
221: function generatePreview(coverLetter: string, templateName: string): { html: string } {
222:   const paragraphs = coverLetter.split('\n\n').filter(p => p.trim())
223:   
224:   const html = `<!DOCTYPE html>
225: <html lang="en">
226: <head>
227:   <meta charset="utf-8">
228:   <title>Cover Letter Preview</title>
229:   <style>
230:     body {
231:       font-family: 'Georgia', 'Times New Roman', serif;
232:       font-size: 11pt;
233:       line-height: 1.6;
234:       color: #000;
235:       max-width: 8.5in;
236:       margin: 0 auto;
237:       padding: 1in;
238:       background: #fff;
239:     }
240:     .template-badge {
241:       position: absolute;
242:       top: 10px;
243:       right: 10px;
244:       background: #f0f0f0;
245:       padding: 4px 8px;
246:       border-radius: 4px;
247:       font-size: 9pt;
248:       color: #666;
249:     }
250:     p {
251:       margin: 0 0 1em 0;
252:       text-align: justify;
253:     }
254:     .signature {
255:       margin-top: 2em;
256:     }
257:   </style>
258: </head>
259: <body>
260:   <div class="template-badge">${templateName} Template</div>
261:   ${paragraphs.map(p => `<p>${escapeHtml(p)}</p>`).join('\n  ')}
262: </body>
263: </html>`
264:   
265:   return { html }
266: }
267: 
268: /**
269:  * Escape HTML
270:  */
271: function escapeHtml(text: string): string {
272:   return text
273:     .replace(/&/g, '&amp;')
274:     .replace(/</g, '&lt;')
275:     .replace(/>/g, '&gt;')
276:     .replace(/"/g, '&quot;')
277:     .replace(/'/g, '&#39;')
278: }
</file>

<file path="src/lib/cover-letter-templates.ts">
  1: /**
  2:  * Professional Cover Letter Templates
  3:  * 14 distinct templates for different industries and situations
  4:  */
  5: 
  6: export interface CoverLetterTemplate {
  7:   id: string
  8:   name: string
  9:   description: string
 10:   bestFor: string[]
 11:   tone: 'formal' | 'conversational' | 'creative' | 'technical' | 'executive'
 12:   template: string
 13: }
 14: 
 15: export const coverLetterTemplates: CoverLetterTemplate[] = [
 16:   {
 17:     id: 'professional',
 18:     name: 'Professional & Traditional',
 19:     description: 'Classic business letter format with formal tone',
 20:     bestFor: ['Finance', 'Legal', 'Corporate', 'Healthcare', 'Government'],
 21:     tone: 'formal',
 22:     template: `[Your Name]
 23: [Your Email] | [Your Phone] | [Your Location]
 24: 
 25: [Date]
 26: 
 27: [Hiring Manager Name]
 28: [Company Name]
 29: [Company Address]
 30: 
 31: Dear [Hiring Manager Name],
 32: 
 33: I am writing to express my strong interest in the [Job Title] position at [Company Name]. With [X years] of experience in [Industry/Field], I have developed a proven track record of [Key Achievement 1] and [Key Achievement 2], which align perfectly with the requirements outlined in your job posting.
 34: 
 35: Throughout my career at [Previous Company], I successfully [Specific Achievement with Metrics]. My expertise in [Skill 1], [Skill 2], and [Skill 3] has consistently enabled me to deliver results that exceed organizational objectives. I am particularly drawn to [Company Name]'s commitment to [Company Value/Mission], and I am confident that my background in [Relevant Experience] would make me a valuable addition to your team.
 36: 
 37: I would welcome the opportunity to discuss how my qualifications align with your needs. Thank you for your consideration, and I look forward to speaking with you soon.
 38: 
 39: Sincerely,
 40: [Your Name]`
 41:   },
 42:   {
 43:     id: 'modern',
 44:     name: 'Modern & Conversational',
 45:     description: 'Friendly, approachable tone with bullet points',
 46:     bestFor: ['Tech', 'Startups', 'Marketing', 'Design', 'SaaS'],
 47:     tone: 'conversational',
 48:     template: `Hi [Hiring Manager Name],
 49: 
 50: I'm excited to apply for the [Job Title] role at [Company Name]—I've been following your work in [Industry/Product] and I'm impressed by how you're [Specific Company Achievement].
 51: 
 52: Here's what I bring to the table:
 53: • [X years] driving [Key Result] in [Field]
 54: • Hands-on experience with [Technology/Tool/Skill]
 55: • A track record of [Quantifiable Achievement]
 56: 
 57: At [Previous Company], I [Specific Project/Achievement]. What excites me most about [Company Name] is [Specific Aspect of Company], and I see a great opportunity to contribute to [Team Goal/Project].
 58: 
 59: I'd love to chat about how my background in [Skill Area] can help [Company Name] achieve [Specific Goal]. Thanks for considering my application!
 60: 
 61: Best,
 62: [Your Name]`
 63:   },
 64:   {
 65:     id: 'metrics',
 66:     name: 'Data-Driven & Metrics-Focused',
 67:     description: 'Numbers-heavy format emphasizing quantifiable results',
 68:     bestFor: ['Analytics', 'Sales', 'Operations', 'Executive', 'Consulting'],
 69:     tone: 'formal',
 70:     template: `Dear [Hiring Manager Name],
 71: 
 72: As a results-oriented [Job Title/Professional] with [X years] of experience delivering measurable impact, I am eager to bring my expertise to [Company Name] as your next [Job Title].
 73: 
 74: Here's what I've accomplished:
 75: → Increased [Metric] by [X%] within [Timeframe]
 76: → Reduced [Cost/Time/Error] by [X%] through [Initiative]
 77: → Led [Project] resulting in $[Amount] in [Revenue/Savings]
 78: 
 79: My approach combines [Skill 1] with [Skill 2] to drive [Outcome]. At [Previous Company], I built [System/Process] that [Result with Numbers]. I'm confident I can replicate this success at [Company Name] by [Specific Strategy Related to Job].
 80: 
 81: I'd be thrilled to discuss how my data-driven approach can contribute to [Company Name]'s growth objectives.
 82: 
 83: Best regards,
 84: [Your Name]`
 85:   },
 86:   {
 87:     id: 'creative',
 88:     name: 'Creative & Unique',
 89:     description: 'Storytelling approach with personality and flair',
 90:     bestFor: ['Creative Industries', 'Media', 'Arts', 'Agencies', 'Entertainment'],
 91:     tone: 'creative',
 92:     template: `[Hiring Manager Name],
 93: 
 94: Let me paint you a picture.
 95: 
 96: Imagine: [Brief Scenario Related to Job/Company]. That's exactly the kind of challenge I thrive on, and why I'm reaching out about the [Job Title] position at [Company Name].
 97: 
 98: I've spent [X years] bringing ideas to life through [Medium/Skill], including:
 99: 🎨 [Project 1] - [Achievement]
100: 🎨 [Project 2] - [Achievement]
101: 🎨 [Project 3] - [Achievement]
102: 
103: What draws me to [Company Name] is your [Specific Quality/Work], especially [Recent Project]. I believe my blend of [Skill 1] and [Skill 2] would be a natural fit for your team's vision.
104: 
105: I'd love to show you my portfolio and discuss how I can help [Company Name] continue creating work that [Impact/Vision].
106: 
107: Let's create something amazing together.
108: 
109: [Your Name]
110: [Portfolio Link]`
111:   },
112:   {
113:     id: 'entry-level',
114:     name: 'Entry-Level & Enthusiastic',
115:     description: 'Energetic tone highlighting education and potential',
116:     bestFor: ['Recent Graduates', 'Career Changers', 'First Jobs', 'Internships'],
117:     tone: 'conversational',
118:     template: `Dear [Hiring Manager Name],
119: 
120: I am excited to apply for the [Job Title] position at [Company Name]. As a recent [Degree] graduate from [University] with a passion for [Field/Industry], I am eager to contribute my skills and enthusiasm to your team.
121: 
122: During my time at [University/Previous Experience], I:
123: • Completed [Relevant Project/Coursework] in [Subject]
124: • Developed proficiency in [Skill 1], [Skill 2], and [Skill 3]
125: • [Internship/Volunteer Experience] where I [Achievement]
126: 
127: What excites me most about [Company Name] is [Specific Company Aspect]. I am impressed by your commitment to [Value/Mission], and I am confident that my dedication to [Skill/Value] would make me a strong addition to your team.
128: 
129: I am eager to learn from experienced professionals and contribute my fresh perspective to [Department/Team]. Thank you for considering my application—I look forward to the opportunity to discuss how I can grow with [Company Name].
130: 
131: Sincerely,
132: [Your Name]`
133:   },
134:   {
135:     id: 'technical',
136:     name: 'Technical & Detailed',
137:     description: 'Tech stack focused with specific technical achievements',
138:     bestFor: ['Engineering', 'DevOps', 'IT', 'Data Science', 'Software Development'],
139:     tone: 'technical',
140:     template: `[Hiring Manager Name],
141: 
142: I'm applying for the [Job Title] position at [Company Name] because your tech stack and product challenges align perfectly with my expertise.
143: 
144: **Technical Background:**
145: - [X years] working with [Technology/Framework/Language]
146: - Architected [System/Feature] handling [Scale/Metric]
147: - Proficient in [Tool 1], [Tool 2], [Tool 3]
148: 
149: **Recent Achievement:**
150: At [Previous Company], I [Specific Technical Project]. This resulted in [Quantifiable Improvement: X% faster, Y% reduction, etc.]. I achieved this by [Technical Approach/Methodology].
151: 
152: I'm particularly interested in [Company Name]'s work on [Specific Technology/Product] and see opportunities to contribute to [Technical Challenge Mentioned in Job Description].
153: 
154: I've attached my GitHub profile showcasing [Relevant Projects]. I'd be happy to discuss my technical approach and how it aligns with your engineering goals.
155: 
156: Best regards,
157: [Your Name]
158: [GitHub/Portfolio Link]`
159:   },
160:   {
161:     id: 'executive',
162:     name: 'Leadership & Executive',
163:     description: 'Strategic vision and leadership impact for senior roles',
164:     bestFor: ['Director', 'VP', 'C-Suite', 'Senior Management', 'Board'],
165:     tone: 'executive',
166:     template: `[Board Member/Executive Name],
167: 
168: In today's competitive landscape, [Company Name] needs a [Job Title] who can [Key Challenge from Job Description]. I bring [X years] of proven leadership in driving [Outcome] across [Industry/Function].
169: 
170: **Leadership Impact:**
171: → Scaled [Department/Organization] from [Starting Point] to [End Point]
172: → Increased [Key Metric] by [X%] while reducing [Cost/Risk]
173: → Built and mentored teams of [Number]+ high-performing professionals
174: 
175: At [Previous Company], I spearheaded [Strategic Initiative] that positioned the organization for [Result]. My approach combines strategic vision with operational excellence to deliver sustainable growth.
176: 
177: [Company Name]'s focus on [Strategic Priority] resonates with my expertise in [Relevant Leadership Experience]. I'm confident I can drive [Specific Outcome] while fostering a culture of [Value/Priority].
178: 
179: I welcome the opportunity to discuss how my leadership can accelerate [Company Name]'s strategic objectives.
180: 
181: Respectfully,
182: [Your Name]`
183:   },
184:   {
185:     id: 'career-pivot',
186:     name: 'Career Pivot & Transferable Skills',
187:     description: 'Emphasizes transferable skills for career changers',
188:     bestFor: ['Career Changers', 'Industry Switchers', 'Pivoting Professionals'],
189:     tone: 'conversational',
190:     template: `Dear [Hiring Manager Name],
191: 
192: While my background is in [Previous Industry/Role], I'm reaching out about the [Job Title] position because I've built a strong foundation of transferable skills that directly apply to this role.
193: 
194: **Transferable Skills:**
195: ✓ [Skill 1] - Demonstrated through [Example from Previous Career]
196: ✓ [Skill 2] - Applied in [Context] with [Result]
197: ✓ [Skill 3] - Proven ability to [Relevant Achievement]
198: 
199: My experience in [Previous Field] taught me [Key Lesson/Skill] that is directly applicable to [New Field]. For example, at [Previous Company], I [Achievement that Shows Transferable Value].
200: 
201: I'm making this career transition because [Genuine Reason Related to Company/Industry], and I'm drawn to [Company Name]'s [Specific Aspect]. I've been actively building relevant skills through [Courses/Projects/Certifications], including [Specific Example].
202: 
203: I'm confident that my unique perspective from [Previous Industry] combined with my commitment to [New Industry] would bring fresh value to your team.
204: 
205: Thank you for considering my application.
206: 
207: Best regards,
208: [Your Name]`
209:   },
210:   {
211:     id: 'internal',
212:     name: 'Internal Promotion/Transfer',
213:     description: 'For current employees seeking new internal roles',
214:     bestFor: ['Internal Transfers', 'Promotions', 'Department Changes'],
215:     tone: 'formal',
216:     template: `Dear [Hiring Manager Name],
217: 
218: I am writing to express my interest in the [New Job Title] position within [Department/Team]. Having worked at [Company Name] for [X years] in my current role as [Current Position], I have gained valuable insights into our organization and am excited about the opportunity to contribute in a new capacity.
219: 
220: **Relevant Accomplishments in Current Role:**
221: • [Achievement 1 relevant to new position]
222: • [Achievement 2 showing readiness for promotion]
223: • [Cross-functional project demonstrating new skills]
224: 
225: My time in [Current Department] has given me a deep understanding of [Relevant Process/System/Challenge]. I've also had the opportunity to collaborate with [New Department/Team] on [Project], which solidified my interest in this role and demonstrated my ability to [Relevant Skill].
226: 
227: I'm confident that my institutional knowledge, combined with my passion for [New Focus Area], would enable me to hit the ground running and deliver immediate value to the team.
228: 
229: I would appreciate the opportunity to discuss how my experience at [Company Name] has prepared me for this next step in my career.
230: 
231: Thank you for your consideration.
232: 
233: Sincerely,
234: [Your Name]`
235:   },
236:   {
237:     id: 'remote',
238:     name: 'Remote Work Focused',
239:     description: 'Highlights remote work experience and self-management',
240:     bestFor: ['Distributed Teams', 'Remote-First Companies', 'Work From Home'],
241:     tone: 'conversational',
242:     template: `Hi [Hiring Manager Name],
243: 
244: I'm thrilled to apply for the remote [Job Title] position at [Company Name]. As someone who has worked remotely for [X years], I've mastered the art of delivering results without a traditional office environment.
245: 
246: **Remote Work Excellence:**
247: → Managed [Project/Team] across [Number] time zones
248: → Maintained [Metric] productivity using [Tools/Methods]
249: → Built strong virtual relationships with [Stakeholder Group]
250: 
251: At [Previous Remote Company], I [Achievement that Required Strong Remote Skills]. My toolkit includes [Communication Tools], [Project Management Tools], and [Collaboration Tools], which I use to ensure seamless collaboration and accountability.
252: 
253: What excites me about [Company Name] is your [Remote Culture Aspect/Value]. I believe my self-directed work style and proven ability to [Remote-Specific Skill] would make me a valuable addition to your distributed team.
254: 
255: I'm available for a video call at your convenience to discuss how I can contribute to [Company Name]'s success.
256: 
257: Best,
258: [Your Name]
259: [Time Zone]`
260:   },
261:   {
262:     id: 'problem-solver',
263:     name: 'Problem-Solver & Initiative-Driven',
264:     description: 'Leads with solutions to company challenges',
265:     bestFor: ['Product Management', 'Consulting', 'Strategy', 'Business Development'],
266:     tone: 'conversational',
267:     template: `Dear [Hiring Manager Name],
268: 
269: [Company Name] is facing [Specific Challenge from Research/Job Description]. I believe I have the solution.
270: 
271: During my [X years] in [Field], I've made a career out of solving complex problems:
272: 
273: **Challenge:** [Previous Company Challenge]
274: **Solution:** [Your Approach]
275: **Result:** [Quantifiable Outcome]
276: 
277: I've studied [Company Name]'s position in [Market/Industry] and noticed [Observation]. My experience with [Relevant Skill/Project] uniquely positions me to help address this through [Proposed Strategy/Approach].
278: 
279: At [Previous Company], I identified a similar challenge around [Issue] and implemented [Solution], which led to [Result with Metrics]. I'm confident I can bring this same problem-solving approach to [Company Name].
280: 
281: I'd welcome the chance to discuss my ideas for [Specific Challenge/Goal] and explore how my strategic thinking aligns with your team's objectives.
282: 
283: Looking forward to connecting.
284: 
285: Best regards,
286: [Your Name]`
287:   },
288:   {
289:     id: 'referral',
290:     name: 'Referral-Based',
291:     description: 'Leverages internal connection for warm introduction',
292:     bestFor: ['Referrals', 'Networking', 'Internal Connections'],
293:     tone: 'conversational',
294:     template: `Dear [Hiring Manager Name],
295: 
296: [Referral Name], [Referral Job Title], suggested I reach out regarding the [Job Title] opening at [Company Name]. After learning more about the role and your team's work on [Project/Initiative], I'm convinced this is the perfect opportunity for me.
297: 
298: [Referral Name] and I worked together at [Previous Company/Context], where I [Relevant Achievement/Project]. They mentioned that [Company Name] is seeking someone who can [Key Job Requirement], which aligns perfectly with my experience in [Relevant Skill/Background].
299: 
300: **Why I'm a Strong Fit:**
301: • [X years] of experience in [Relevant Field]
302: • Proven track record of [Key Achievement]
303: • Expertise in [Skill 1], [Skill 2], [Skill 3]
304: 
305: At [Previous Company], I [Specific Achievement Related to Job]. I'm particularly excited about [Company Name]'s focus on [Specific Aspect] and would love to bring my expertise in [Area] to your team.
306: 
307: [Referral Name] speaks highly of the collaborative culture at [Company Name], and I'm eager to contribute to that environment. I'd appreciate the opportunity to discuss how my background aligns with your needs.
308: 
309: Thank you for your consideration.
310: 
311: Best regards,
312: [Your Name]`
313:   },
314:   {
315:     id: 'freelance-to-fulltime',
316:     name: 'Freelance/Contract to Full-Time',
317:     description: 'For contractors seeking permanent positions',
318:     bestFor: ['Contractors', 'Freelancers', 'Contract-to-Hire'],
319:     tone: 'conversational',
320:     template: `Hi [Hiring Manager Name],
321: 
322: As a freelance [Job Title] who has had the pleasure of working with [Company Name] on [Project/Contract], I'm reaching out to express my interest in the full-time [Job Title] position.
323: 
324: **During My Time Working With Your Team:**
325: ✓ Delivered [Project 1] - [Result]
326: ✓ Collaborated with [Team/Department] on [Initiative]
327: ✓ Received positive feedback on [Specific Skill/Quality]
328: 
329: This experience has given me valuable insights into [Company Name]'s culture, workflows, and goals. I've seen firsthand how [Team/Department] operates and where I can add long-term value.
330: 
331: My freelance work across [Number] clients in [Industry] has strengthened my ability to [Key Skill], but what I'm most excited about is the opportunity to commit fully to [Company Name]'s mission around [Company Value/Goal].
332: 
333: I'm confident that transitioning from contractor to full-time team member would allow me to deepen my impact and contribute to [Specific Team Goal/Company Initiative].
334: 
335: I'd love to discuss how we can make this transition official.
336: 
337: Best,
338: [Your Name]`
339:   },
340:   {
341:     id: 'ats-optimized',
342:     name: 'Short & Direct (ATS-Optimized)',
343:     description: 'Concise format optimized for ATS parsing',
344:     bestFor: ['Volume Applications', 'ATS-Heavy Industries', 'Large Corporations'],
345:     tone: 'formal',
346:     template: `[Hiring Manager Name]
347: 
348: [Job Title] Position - [Company Name]
349: 
350: I am applying for the [Job Title] role advertised on [Job Board/Company Website]. With [X years] of experience in [Industry/Field] and expertise in [Skill 1], [Skill 2], and [Skill 3], I am confident in my ability to contribute immediately to your team.
351: 
352: Key qualifications:
353: - [X years] experience in [Relevant Area]
354: - Proficient in [Technology/Tool/Skill mentioned in job description]
355: - Proven track record: [Quantifiable Achievement]
356: - [Certification/Degree] in [Relevant Field]
357: 
358: At [Previous Company], I [Specific Achievement with Metrics relevant to job requirements]. I am excited about the opportunity to bring this same level of results to [Company Name].
359: 
360: I have attached my resume for your review. I am available for an interview at your earliest convenience.
361: 
362: Thank you for your consideration.
363: 
364: [Your Name]
365: [Your Email]
366: [Your Phone]`
367:   }
368: ]
369: 
370: /**
371:  * Get template by ID
372:  */
373: export function getCoverLetterTemplateById(id: string): CoverLetterTemplate {
374:   const template = coverLetterTemplates.find(t => t.id === id)
375:   if (!template) {
376:     return coverLetterTemplates[0] // Default to professional
377:   }
378:   return template
379: }
380: 
381: /**
382:  * Get all templates
383:  */
384: export function getAllCoverLetterTemplates(): CoverLetterTemplate[] {
385:   return coverLetterTemplates
386: }
387: 
388: /**
389:  * Get templates by industry/situation
390:  */
391: export function getCoverLetterTemplatesByCategory(category: string): CoverLetterTemplate[] {
392:   return coverLetterTemplates.filter(t => 
393:     t.bestFor.some(bf => bf.toLowerCase().includes(category.toLowerCase()))
394:   )
395: }
396: 
397: /**
398:  * Suggest template based on resume template
399:  */
400: export function suggestCoverLetterTemplate(resumeTemplateId: string): CoverLetterTemplate {
401:   const mapping: Record<string, string> = {
402:     'modern': 'modern',
403:     'professional': 'professional',
404:     'creative': 'creative',
405:     'tech': 'technical',
406:     'minimal': 'ats-optimized',
407:     'executive': 'executive',
408:     'cv': 'professional'
409:   }
410:   
411:   const templateId = mapping[resumeTemplateId] || 'professional'
412:   return getCoverLetterTemplateById(templateId)
413: }
</file>

<file path="src/lib/data-sources/contact-sources.ts">
  1: /**
  2:  * Hiring Contact Data Sources
  3:  * Comprehensive list of sources for finding verified hiring contacts
  4:  */
  5: 
  6: export const CONTACT_DATA_SOURCES = {
  7:   tier1: [
  8:     {
  9:       name: 'LinkedIn',
 10:       url: 'linkedin.com/in',
 11:       searchPattern: 'site:linkedin.com/in "{company}" "{role}"',
 12:       reliability: 0.95,
 13:       requiresAuth: false
 14:     },
 15:     {
 16:       name: 'Company Careers Page',
 17:       urlPatterns: ['/team', '/about/team', '/people', '/leadership', '/about-us', '/careers/team'],
 18:       reliability: 0.90,
 19:       requiresAuth: false
 20:     },
 21:     {
 22:       name: 'ContactOut',
 23:       url: 'contactout.com/company',
 24:       reliability: 0.85,
 25:       requiresAuth: true
 26:     },
 27:     {
 28:       name: 'RocketReach',
 29:       url: 'rocketreach.co',
 30:       reliability: 0.85,
 31:       requiresAuth: true
 32:     }
 33:   ],
 34:   tier2: [
 35:     {
 36:       name: 'Hunter.io',
 37:       url: 'hunter.io/companies',
 38:       reliability: 0.75,
 39:       requiresAuth: true
 40:     },
 41:     {
 42:       name: 'Apollo.io',
 43:       url: 'apollo.io',
 44:       reliability: 0.80,
 45:       requiresAuth: true
 46:     },
 47:     {
 48:       name: 'Clearbit',
 49:       url: 'clearbit.com',
 50:       reliability: 0.75,
 51:       requiresAuth: true
 52:     },
 53:     {
 54:       name: 'SignalHire',
 55:       url: 'signalhire.com',
 56:       reliability: 0.70,
 57:       requiresAuth: true
 58:     }
 59:   ],
 60:   tier3: [
 61:     {
 62:       name: 'Company Press Releases',
 63:       urlPatterns: ['/press', '/news', '/media'],
 64:       reliability: 0.60,
 65:       requiresAuth: false
 66:     },
 67:     {
 68:       name: 'GitHub',
 69:       url: 'github.com/orgs',
 70:       reliability: 0.65,
 71:       requiresAuth: false
 72:     },
 73:     {
 74:       name: 'Crunchbase',
 75:       url: 'crunchbase.com/organization',
 76:       reliability: 0.70,
 77:       requiresAuth: false
 78:     },
 79:     {
 80:       name: 'AngelList',
 81:       url: 'wellfound.com/company',
 82:       reliability: 0.65,
 83:       requiresAuth: false
 84:     }
 85:   ]
 86: }
 87: 
 88: export const LINKEDIN_ROLE_KEYWORDS = [
 89:   'talent acquisition',
 90:   'recruiter',
 91:   'technical recruiter',
 92:   'hr manager',
 93:   'people operations',
 94:   'hiring manager',
 95:   'head of recruiting',
 96:   'talent partner',
 97:   'people and culture',
 98:   'human resources'
 99: ]
100: 
101: export const TEAM_PAGE_PATTERNS = [
102:   '/team',
103:   '/about/team',
104:   '/about-us',
105:   '/leadership',
106:   '/people',
107:   '/careers/team',
108:   '/company/team',
109:   '/our-team'
110: ]
</file>

<file path="src/lib/data-sources/job-boards.ts">
  1: /**
  2:  * Job Board Data Sources
  3:  * Comprehensive list of Canadian and international job boards
  4:  */
  5: 
  6: export const CANADIAN_JOB_BOARDS_EXTENDED = [
  7:   { name: 'Indeed Canada', url: 'indeed.ca', priority: 1, category: 'general' },
  8:   { name: 'LinkedIn Jobs', url: 'linkedin.com/jobs', priority: 1, category: 'general' },
  9:   { name: 'Job Bank', url: 'jobbank.gc.ca', priority: 1, category: 'government' },
 10:   { name: 'Workopolis', url: 'workopolis.com', priority: 2, category: 'general' },
 11:   { name: 'Eluta', url: 'eluta.ca', priority: 2, category: 'general' },
 12:   { name: 'CareerBeacon', url: 'careerbeacon.com', priority: 2, category: 'regional' },
 13:   { name: 'Jobboom', url: 'jobboom.com', priority: 2, category: 'bilingual' },
 14:   { name: 'Communitech', url: 'communitech.ca/work-in-tech', priority: 3, category: 'tech' },
 15:   { name: 'Tech in Motion', url: 'techinmotionevents.com/jobs/canada', priority: 3, category: 'tech' },
 16:   { name: 'Charity Village', url: 'charityvillage.com', priority: 3, category: 'nonprofit' }
 17: ]
 18: 
 19: export const US_JOB_BOARDS = [
 20:   { name: 'ZipRecruiter', url: 'ziprecruiter.com', priority: 1 },
 21:   { name: 'Monster', url: 'monster.com', priority: 2 },
 22:   { name: 'CareerBuilder', url: 'careerbuilder.com', priority: 2 },
 23:   { name: 'SimplyHired', url: 'simplyhired.com', priority: 2 },
 24:   { name: 'Glassdoor', url: 'glassdoor.com/Job', priority: 1 },
 25:   { name: 'Dice', url: 'dice.com', priority: 2 },
 26:   { name: 'Stack Overflow', url: 'stackoverflow.com/jobs', priority: 3 },
 27:   { name: 'Wellfound', url: 'wellfound.com', priority: 2 }
 28: ]
 29: 
 30: export const REMOTE_JOB_BOARDS = [
 31:   { name: 'Remote.co', url: 'remote.co' },
 32:   { name: 'We Work Remotely', url: 'weworkremotely.com' },
 33:   { name: 'FlexJobs', url: 'flexjobs.com' },
 34:   { name: 'Remote OK', url: 'remoteok.io' }
 35: ]
 36: 
 37: /**
 38:  * ATS Platform Detection and URL Patterns
 39:  */
 40: export const ATS_PLATFORMS = {
 41:   greenhouse: {
 42:     pattern: /greenhouse\.io|boards\.greenhouse/,
 43:     urlFormat: 'boards.greenhouse.io/{company}',
 44:     reliability: 0.95
 45:   },
 46:   lever: {
 47:     pattern: /jobs\.lever\.co/,
 48:     urlFormat: 'jobs.lever.co/{company}',
 49:     reliability: 0.95
 50:   },
 51:   workable: {
 52:     pattern: /apply\.workable\.com/,
 53:     urlFormat: 'apply.workable.com/{company}',
 54:     reliability: 0.90
 55:   },
 56:   breezy: {
 57:     pattern: /breezy\.hr/,
 58:     urlFormat: '{company}.breezy.hr',
 59:     reliability: 0.90
 60:   },
 61:   bamboohr: {
 62:     pattern: /bamboohr\.com\/jobs/,
 63:     urlFormat: '{company}.bamboohr.com/jobs',
 64:     reliability: 0.90
 65:   },
 66:   smartrecruiters: {
 67:     pattern: /jobs\.smartrecruiters\.com/,
 68:     urlFormat: 'jobs.smartrecruiters.com/{company}',
 69:     reliability: 0.85
 70:   },
 71:   jobvite: {
 72:     pattern: /jobs\.jobvite\.com/,
 73:     urlFormat: 'jobs.jobvite.com/{company}',
 74:     reliability: 0.85
 75:   },
 76:   icims: {
 77:     pattern: /icims\.com\/jobs/,
 78:     urlFormat: '{company}.icims.com/jobs',
 79:     reliability: 0.85
 80:   },
 81:   taleo: {
 82:     pattern: /taleo\.net/,
 83:     urlFormat: '{company}.taleo.net/careersection',
 84:     reliability: 0.80
 85:   },
 86:   workday: {
 87:     pattern: /myworkdayjobs\.com/,
 88:     urlFormat: '{company}.wd1.myworkdayjobs.com',
 89:     reliability: 0.90
 90:   }
 91: }
 92: 
 93: /**
 94:  * Detect which ATS platform a URL uses
 95:  */
 96: export function detectATS(url: string): string | null {
 97:   for (const [name, config] of Object.entries(ATS_PLATFORMS)) {
 98:     if (config.pattern.test(url)) {
 99:       return name
100:     }
101:   }
102:   return null
103: }
104: 
105: /**
106:  * Get all job boards for a specific category
107:  */
108: export function getJobBoardsByCategory(category: 'tech' | 'general' | 'remote' | 'all' = 'all') {
109:   switch (category) {
110:     case 'tech':
111:       return CANADIAN_JOB_BOARDS_EXTENDED.filter(b => b.category === 'tech')
112:     case 'remote':
113:       return REMOTE_JOB_BOARDS
114:     case 'general':
115:       return CANADIAN_JOB_BOARDS_EXTENDED.filter(b => b.category === 'general')
116:     default:
117:       return [...CANADIAN_JOB_BOARDS_EXTENDED, ...US_JOB_BOARDS, ...REMOTE_JOB_BOARDS]
118:   }
119: }
</file>

<file path="src/lib/database.ts">
  1: import mongoose from 'mongoose'
  2: 
  3: interface DatabaseConfig {
  4:   uri: string
  5:   options: mongoose.ConnectOptions
  6: }
  7: 
  8: class DatabaseService {
  9:   private static instance: DatabaseService
 10:   private connection: mongoose.Connection | null = null
 11:   private isConnecting = false
 12: 
 13:   private constructor() {}
 14: 
 15:   static getInstance(): DatabaseService {
 16:     if (!DatabaseService.instance) {
 17:       DatabaseService.instance = new DatabaseService()
 18:     }
 19:     return DatabaseService.instance
 20:   }
 21: 
 22:   async connect(): Promise<mongoose.Connection> {
 23:     if (this.connection?.readyState === 1) {
 24:       return this.connection
 25:     }
 26: 
 27:     if (this.isConnecting) {
 28:       // Wait for existing connection attempt
 29:       return new Promise((resolve, reject) => {
 30:         const checkConnection = () => {
 31:           if (this.connection?.readyState === 1) {
 32:             resolve(this.connection)
 33:           } else if (!this.isConnecting) {
 34:             reject(new Error('Connection failed'))
 35:           } else {
 36:             setTimeout(checkConnection, 100)
 37:           }
 38:         }
 39:         checkConnection()
 40:       })
 41:     }
 42: 
 43:     const config = this.getConfig()
 44:     if (!config.uri) {
 45:       throw new Error('MONGODB_URI not configured')
 46:     }
 47:     
 48:     // Validate MongoDB URI format
 49:     if (!config.uri.startsWith('mongodb://') && !config.uri.startsWith('mongodb+srv://')) {
 50:       throw new Error('Invalid MONGODB_URI format - must start with mongodb:// or mongodb+srv://')
 51:     }
 52: 
 53:     this.isConnecting = true
 54: 
 55:     try {
 56:       await mongoose.connect(config.uri, config.options)
 57:       this.connection = mongoose.connection
 58:       this.isConnecting = false
 59: 
 60:       this.connection.on('error', (error) => {
 61:         console.error('MongoDB connection error:', error)
 62:       })
 63: 
 64:       this.connection.on('disconnected', () => {
 65:         console.warn('MongoDB disconnected - attempting reconnection')
 66:         this.connection = null
 67:         // Attempt reconnection after 5 seconds
 68:         setTimeout(() => {
 69:           console.log('Attempting to reconnect to MongoDB...')
 70:           this.connect().catch(err => console.error('Reconnection failed:', err))
 71:         }, 5000)
 72:       })
 73: 
 74:       console.log('Connected to MongoDB')
 75:       return this.connection
 76: 
 77:     } catch (error) {
 78:       this.isConnecting = false
 79:       console.error('MongoDB connection failed:', error)
 80:       throw error
 81:     }
 82:   }
 83: 
 84:   async disconnect(): Promise<void> {
 85:     if (this.connection) {
 86:       await mongoose.disconnect()
 87:       this.connection = null
 88:     }
 89:   }
 90: 
 91:   private getConfig(): DatabaseConfig {
 92:     return {
 93:       uri: process.env.MONGODB_URI!,
 94:       options: {
 95:         bufferCommands: false,
 96:         maxPoolSize: 10,
 97:         serverSelectionTimeoutMS: 15000, // Increased from 5s to 15s for cold starts
 98:         socketTimeoutMS: 45000,
 99:         family: 4,
100:         retryWrites: true,
101:         writeConcern: {
102:           w: 'majority'
103:         }
104:       }
105:     }
106:   }
107: 
108:   getConnection(): mongoose.Connection | null {
109:     return this.connection
110:   }
111: 
112:   isConnected(): boolean {
113:     return this.connection?.readyState === 1
114:   }
115: }
116: 
117: // Export singleton instance
118: export const dbService = DatabaseService.getInstance()
119: 
120: // Legacy compatibility
121: export default async function connectToDatabase() {
122:   return dbService.connect()
123: }
</file>

<file path="src/lib/db-retry.ts">
 1: /**
 2:  * Database Retry Logic with Exponential Backoff
 3:  * Prevents timeouts from breaking the application flow
 4:  */
 5: 
 6: export interface RetryOptions {
 7:   maxRetries?: number
 8:   timeoutMs?: number
 9:   initialDelayMs?: number
10: }
11: 
12: /**
13:  * Execute a database operation with retry logic and timeout
14:  */
15: export async function withRetry<T>(
16:   operation: () => Promise<T>,
17:   options: RetryOptions = {}
18: ): Promise<T> {
19:   const {
20:     maxRetries = 3,
21:     timeoutMs = 10000, // 10 seconds per attempt
22:     initialDelayMs = 1000
23:   } = options
24: 
25:   let attempt = 0
26:   let lastError: Error | null = null
27: 
28:   while (attempt < maxRetries) {
29:     try {
30:       // Wrap operation with timeout
31:       const result = await Promise.race([
32:         operation(),
33:         new Promise<never>((_, reject) =>
34:           setTimeout(() => reject(new Error('Database operation timeout')), timeoutMs)
35:         )
36:       ])
37: 
38:       console.log(`[DB_RETRY] ✅ Operation succeeded on attempt ${attempt + 1}`)
39:       return result
40: 
41:     } catch (error) {
42:       lastError = error as Error
43:       attempt++
44: 
45:       console.warn(`[DB_RETRY] ⚠️ Attempt ${attempt}/${maxRetries} failed:`, lastError.message)
46: 
47:       if (attempt < maxRetries) {
48:         // Exponential backoff: 1s, 2s, 4s, 8s...
49:         const delay = initialDelayMs * Math.pow(2, attempt - 1)
50:         console.log(`[DB_RETRY] Retrying in ${delay}ms...`)
51:         await new Promise(resolve => setTimeout(resolve, delay))
52:       }
53:     }
54:   }
55: 
56:   console.error(`[DB_RETRY] ❌ All ${maxRetries} attempts failed`)
57:   throw lastError || new Error('Database operation failed after retries')
58: }
59: 
60: /**
61:  * Execute a non-critical database operation
62:  * Returns null on failure instead of throwing
63:  */
64: export async function withRetryOptional<T>(
65:   operation: () => Promise<T>,
66:   options: RetryOptions = {}
67: ): Promise<T | null> {
68:   try {
69:     return await withRetry(operation, options)
70:   } catch (error) {
71:     console.warn('[DB_RETRY] Optional operation failed, returning null:', error)
72:     return null
73:   }
74: }
</file>

<file path="src/lib/deadline-tracker.ts">
  1: /**
  2:  * Application Deadline Tracker
  3:  * 
  4:  * Tracks and prioritizes job application deadlines
  5:  */
  6: 
  7: export interface ApplicationDeadline {
  8:   jobId: string
  9:   jobTitle: string
 10:   company: string
 11:   deadline: Date
 12:   daysRemaining: number
 13:   priority: 'urgent' | 'high' | 'medium' | 'low'
 14:   status: 'pending' | 'applied' | 'expired'
 15:   source: string
 16:   reminderSent: boolean
 17: }
 18: 
 19: export interface DeadlineAlert {
 20:   type: 'urgent' | 'warning' | 'reminder'
 21:   message: string
 22:   deadline: ApplicationDeadline
 23:   actionRequired: string
 24: }
 25: 
 26: export class DeadlineTrackerService {
 27:   /**
 28:    * Extract deadline from job description
 29:    */
 30:   static extractDeadline(jobDescription: string, postedDate?: Date): Date | null {
 31:     const text = jobDescription.toLowerCase()
 32:     
 33:     // Common deadline patterns
 34:     const patterns = [
 35:       /apply\s+by\s+(\w+\s+\d{1,2},?\s+\d{4})/i,
 36:       /deadline[:\s]+(\w+\s+\d{1,2},?\s+\d{4})/i,
 37:       /applications?\s+close\s+(\w+\s+\d{1,2},?\s+\d{4})/i,
 38:       /closing\s+date[:\s]+(\w+\s+\d{1,2},?\s+\d{4})/i,
 39:       /(\w+\s+\d{1,2},?\s+\d{4})\s+deadline/i,
 40:       /until\s+(\w+\s+\d{1,2},?\s+\d{4})/i
 41:     ]
 42: 
 43:     for (const pattern of patterns) {
 44:       const match = text.match(pattern)
 45:       if (match && match[1]) {
 46:         try {
 47:           const deadline = new Date(match[1])
 48:           if (!isNaN(deadline.getTime()) && deadline > new Date()) {
 49:             return deadline
 50:           }
 51:         } catch (e) {
 52:           continue
 53:         }
 54:       }
 55:     }
 56: 
 57:     // Relative deadlines (e.g., "apply within 7 days")
 58:     const relativePatterns = [
 59:       /apply\s+within\s+(\d+)\s+days?/i,
 60:       /(\d+)\s+days?\s+remaining/i,
 61:       /closes?\s+in\s+(\d+)\s+days?/i
 62:     ]
 63: 
 64:     for (const pattern of relativePatterns) {
 65:       const match = text.match(pattern)
 66:       if (match && match[1]) {
 67:         const days = parseInt(match[1])
 68:         const baseDate = postedDate || new Date()
 69:         const deadline = new Date(baseDate)
 70:         deadline.setDate(deadline.getDate() + days)
 71:         return deadline
 72:       }
 73:     }
 74: 
 75:     // If no explicit deadline, estimate based on posted date
 76:     if (postedDate) {
 77:       const estimated = new Date(postedDate)
 78:       estimated.setDate(estimated.getDate() + 30) // Default 30 days
 79:       return estimated
 80:     }
 81: 
 82:     return null
 83:   }
 84: 
 85:   /**
 86:    * Calculate priority based on deadline
 87:    */
 88:   static calculatePriority(daysRemaining: number): 'urgent' | 'high' | 'medium' | 'low' {
 89:     if (daysRemaining <= 2) return 'urgent'
 90:     if (daysRemaining <= 7) return 'high'
 91:     if (daysRemaining <= 14) return 'medium'
 92:     return 'low'
 93:   }
 94: 
 95:   /**
 96:    * Get deadline alerts for user
 97:    */
 98:   static getDeadlineAlerts(deadlines: ApplicationDeadline[]): DeadlineAlert[] {
 99:     const alerts: DeadlineAlert[] = []
100:     const now = new Date()
101: 
102:     for (const deadline of deadlines) {
103:       if (deadline.status !== 'pending') continue
104: 
105:       const daysRemaining = Math.ceil((deadline.deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
106: 
107:       if (daysRemaining <= 0) {
108:         alerts.push({
109:           type: 'urgent',
110:           message: `EXPIRED: ${deadline.jobTitle} at ${deadline.company}`,
111:           deadline,
112:           actionRequired: 'Application deadline has passed'
113:         })
114:       } else if (daysRemaining <= 2) {
115:         alerts.push({
116:           type: 'urgent',
117:           message: `URGENT: ${deadline.jobTitle} at ${deadline.company} closes in ${daysRemaining} day(s)`,
118:           deadline,
119:           actionRequired: 'Apply immediately'
120:         })
121:       } else if (daysRemaining <= 7) {
122:         alerts.push({
123:           type: 'warning',
124:           message: `${deadline.jobTitle} at ${deadline.company} closes in ${daysRemaining} days`,
125:           deadline,
126:           actionRequired: 'Apply this week'
127:         })
128:       } else if (daysRemaining <= 14 && !deadline.reminderSent) {
129:         alerts.push({
130:           type: 'reminder',
131:           message: `${deadline.jobTitle} at ${deadline.company} closes in ${daysRemaining} days`,
132:           deadline,
133:           actionRequired: 'Start preparing application'
134:         })
135:       }
136:     }
137: 
138:     // Sort by urgency
139:     return alerts.sort((a, b) => {
140:       const urgencyOrder = { urgent: 0, warning: 1, reminder: 2 }
141:       return urgencyOrder[a.type] - urgencyOrder[b.type]
142:     })
143:   }
144: 
145:   /**
146:    * Format deadline for display
147:    */
148:   static formatDeadline(deadline: Date): string {
149:     const now = new Date()
150:     const daysRemaining = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
151: 
152:     if (daysRemaining < 0) {
153:       return `Expired ${Math.abs(daysRemaining)} day(s) ago`
154:     } else if (daysRemaining === 0) {
155:       return 'Today'
156:     } else if (daysRemaining === 1) {
157:       return 'Tomorrow'
158:     } else if (daysRemaining <= 7) {
159:       return `In ${daysRemaining} days`
160:     } else {
161:       return deadline.toLocaleDateString('en-US', { 
162:         month: 'short', 
163:         day: 'numeric', 
164:         year: 'numeric' 
165:       })
166:     }
167:   }
168: 
169:   /**
170:    * Get recommended application timeline
171:    */
172:   static getApplicationTimeline(deadline: Date): {
173:     startResearch: Date
174:     startApplication: Date
175:     submitBy: Date
176:     buffer: number
177:   } {
178:     const now = new Date()
179:     const daysUntilDeadline = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
180: 
181:     // Calculate recommended dates
182:     const submitBy = new Date(deadline)
183:     submitBy.setDate(submitBy.getDate() - 1) // Submit 1 day before deadline
184: 
185:     const startApplication = new Date(deadline)
186:     startApplication.setDate(startApplication.getDate() - Math.min(7, Math.floor(daysUntilDeadline * 0.5)))
187: 
188:     const startResearch = new Date(deadline)
189:     startResearch.setDate(startResearch.getDate() - Math.min(14, Math.floor(daysUntilDeadline * 0.7)))
190: 
191:     return {
192:       startResearch,
193:       startApplication,
194:       submitBy,
195:       buffer: 1 // Days of buffer before deadline
196:     }
197:   }
198: 
199:   /**
200:    * Sort jobs by deadline urgency
201:    */
202:   static sortByUrgency(deadlines: ApplicationDeadline[]): ApplicationDeadline[] {
203:     return deadlines.sort((a, b) => {
204:       // Pending applications first
205:       if (a.status === 'pending' && b.status !== 'pending') return -1
206:       if (a.status !== 'pending' && b.status === 'pending') return 1
207: 
208:       // Then by days remaining
209:       return a.daysRemaining - b.daysRemaining
210:     })
211:   }
212: 
213:   /**
214:    * Check if deadline is approaching
215:    */
216:   static isDeadlineApproaching(deadline: Date, thresholdDays: number = 7): boolean {
217:     const now = new Date()
218:     const daysRemaining = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
219:     return daysRemaining <= thresholdDays && daysRemaining > 0
220:   }
221: 
222:   /**
223:    * Generate deadline reminder email
224:    */
225:   static generateReminderEmail(deadline: ApplicationDeadline): {
226:     subject: string
227:     body: string
228:   } {
229:     const daysText = deadline.daysRemaining === 1 ? 'tomorrow' : `in ${deadline.daysRemaining} days`
230:     
231:     return {
232:       subject: `⏰ Reminder: ${deadline.company} application deadline ${daysText}`,
233:       body: `Hi there,
234: 
235: This is a friendly reminder that the application deadline for ${deadline.jobTitle} at ${deadline.company} is ${daysText}.
236: 
237: Deadline: ${deadline.deadline.toLocaleDateString('en-US', { 
238:   weekday: 'long',
239:   month: 'long', 
240:   day: 'numeric', 
241:   year: 'numeric' 
242: })}
243: 
244: Make sure to:
245: ✓ Complete your application
246: ✓ Tailor your resume
247: ✓ Write a compelling cover letter
248: ✓ Proofread everything
249: ✓ Submit before the deadline
250: 
251: Good luck with your application!
252: 
253: Best regards,
254: Career Lever AI`
255:     }
256:   }
257: }
</file>

<file path="src/lib/device-manager.ts">
 1: 'use client'
 2: 
 3: export class DeviceManager {
 4:   private static resizeHandler: (() => void) | null = null
 5: 
 6:   static init() {
 7:     this.apply()
 8:     if (typeof window !== 'undefined') {
 9:       const apply = () => this.apply()
10:       this.resizeHandler = apply
11:       window.addEventListener('resize', apply, { passive: true })
12:       window.addEventListener('orientationchange', apply, { passive: true })
13:     }
14:   }
15: 
16:   static dispose() {
17:     if (typeof window !== 'undefined' && this.resizeHandler) {
18:       window.removeEventListener('resize', this.resizeHandler as any)
19:       window.removeEventListener('orientationchange', this.resizeHandler as any)
20:     }
21:   }
22: 
23:   private static apply() {
24:     try {
25:       const w = typeof window !== 'undefined' ? window.innerWidth : 1024
26:       const body = document.body
27:       body.classList.remove('mobile-device','tablet-device','desktop-device','no-hover','has-hover')
28:       if (w < 768) body.classList.add('mobile-device')
29:       else if (w < 1024) body.classList.add('tablet-device')
30:       else body.classList.add('desktop-device')
31:       const supportsHover = typeof window !== 'undefined' && window.matchMedia && window.matchMedia('(hover: hover)').matches
32:       body.classList.add(supportsHover ? 'has-hover' : 'no-hover')
33:     } catch {}
34:   }
35: }
</file>

<file path="src/lib/email-automation.ts">
  1: import { resendProvider, EmailParams, EmailResult } from './email-providers/resend-provider'
  2: import { EnhancedContact } from './contact-enrichment'
  3: 
  4: export interface ScheduledOutreach {
  5:   id: string
  6:   contact: EnhancedContact
  7:   email: {
  8:     subject: string
  9:     body: string
 10:   }
 11:   scheduled_time: Date
 12:   priority: number
 13:   status: 'scheduled' | 'sent' | 'failed' | 'pending'
 14:   userId: string
 15:   jobId?: string
 16: }
 17: 
 18: export interface AutomationSettings {
 19:   max_per_hour: number
 20:   spread_hours: number
 21:   skip_weekends: boolean
 22:   preferred_times: string[] // ['09:00', '14:00', '16:00']
 23:   enable_followups: boolean
 24: }
 25: 
 26: export class EmailAutomationService {
 27:   /**
 28:    * PHASE 3B: Schedule optimal outreach for multiple contacts
 29:    * Spreads emails over time, respects rate limits, optimizes send times
 30:    */
 31:   static async scheduleOptimalOutreach(
 32:     contacts: EnhancedContact[],
 33:     emails: Array<{subject: string; body: string}>,
 34:     settings: AutomationSettings,
 35:     userId: string
 36:   ): Promise<ScheduledOutreach[]> {
 37:     console.log('[EMAIL_AUTOMATION] Scheduling', contacts.length, 'emails')
 38:     
 39:     const schedule: ScheduledOutreach[] = []
 40:     
 41:     for (let i = 0; i < contacts.length; i++) {
 42:       const contact = contacts[i]
 43:       const email = emails[i]
 44:       
 45:       if (!contact.email) {
 46:         console.warn('[EMAIL_AUTOMATION] Skipping contact with no email:', contact.name)
 47:         continue
 48:       }
 49:       
 50:       // Calculate optimal send time
 51:       const sendTime = this.calculateOptimalSendTime(
 52:         contact,
 53:         settings,
 54:         i,
 55:         schedule.length
 56:       )
 57:       
 58:       schedule.push({
 59:         id: `outreach_${Date.now()}_${i}`,
 60:         contact,
 61:         email,
 62:         scheduled_time: sendTime,
 63:         priority: contact.decision_maker_score,
 64:         status: 'scheduled',
 65:         userId
 66:       })
 67:     }
 68:     
 69:     // Sort by priority (decision makers first) then by time
 70:     schedule.sort((a, b) => {
 71:       if (a.priority !== b.priority) {
 72:         return b.priority - a.priority
 73:       }
 74:       return a.scheduled_time.getTime() - b.scheduled_time.getTime()
 75:     })
 76:     
 77:     console.log('[EMAIL_AUTOMATION] Scheduled', schedule.length, 'emails')
 78:     console.log('[EMAIL_AUTOMATION] First:', schedule[0]?.scheduled_time)
 79:     console.log('[EMAIL_AUTOMATION] Last:', schedule[schedule.length - 1]?.scheduled_time)
 80:     
 81:     return schedule
 82:   }
 83:   
 84:   /**
 85:    * Calculate optimal send time based on multiple factors
 86:    */
 87:   private static calculateOptimalSendTime(
 88:     contact: EnhancedContact,
 89:     settings: AutomationSettings,
 90:     index: number,
 91:     totalScheduled: number
 92:   ): Date {
 93:     const now = new Date()
 94:     
 95:     // Calculate how many hours to add based on rate limiting
 96:     const hoursToAdd = Math.floor(totalScheduled / settings.max_per_hour)
 97:     let sendDate = new Date(now.getTime() + hoursToAdd * 60 * 60 * 1000)
 98:     
 99:     // Skip weekends if requested
100:     if (settings.skip_weekends) {
101:       const day = sendDate.getDay()
102:       if (day === 0) { // Sunday
103:         sendDate.setDate(sendDate.getDate() + 1)
104:       } else if (day === 6) { // Saturday
105:         sendDate.setDate(sendDate.getDate() + 2)
106:       }
107:     }
108:     
109:     // Set to preferred time of day
110:     const preferredHour = this.getPreferredHour(
111:       settings.preferred_times,
112:       index % settings.preferred_times.length
113:     )
114:     sendDate.setHours(preferredHour, 0, 0, 0)
115:     
116:     // Use contact's best contact days if available
117:     if (contact.personality_insights?.best_contact_days?.length > 0) {
118:       sendDate = this.adjustToPreferredDay(
119:         sendDate,
120:         contact.personality_insights.best_contact_days
121:       )
122:     }
123:     
124:     // Ensure time is in the future
125:     if (sendDate.getTime() < now.getTime()) {
126:       sendDate.setDate(sendDate.getDate() + 1)
127:     }
128:     
129:     return sendDate
130:   }
131:   
132:   /**
133:    * Parse preferred time string to hour
134:    */
135:   private static getPreferredHour(preferredTimes: string[], index: number): number {
136:     const timeStr = preferredTimes[index] || '09:00'
137:     const [hour] = timeStr.split(':').map(Number)
138:     return hour
139:   }
140:   
141:   /**
142:    * Adjust date to match preferred contact days
143:    */
144:   private static adjustToPreferredDay(date: Date, preferredDays: string[]): Date {
145:     const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
146:     const currentDay = dayNames[date.getDay()]
147:     
148:     // If current day is already preferred, return as-is
149:     if (preferredDays.includes(currentDay)) {
150:       return date
151:     }
152:     
153:     // Find next preferred day
154:     for (let i = 1; i <= 7; i++) {
155:       const nextDate = new Date(date)
156:       nextDate.setDate(date.getDate() + i)
157:       const nextDay = dayNames[nextDate.getDay()]
158:       
159:       if (preferredDays.includes(nextDay)) {
160:         return nextDate
161:       }
162:     }
163:     
164:     return date // Fallback
165:   }
166:   
167:   /**
168:    * Send email immediately (bypasses scheduling)
169:    */
170:   static async sendEmailNow(
171:     contact: EnhancedContact,
172:     email: {subject: string; body: string},
173:     fromEmail?: string
174:   ): Promise<EmailResult> {
175:     if (!contact.email) {
176:       return {
177:         success: false,
178:         error: 'Contact has no email address',
179:         provider: 'none'
180:       }
181:     }
182:     
183:     console.log('[EMAIL_AUTOMATION] Sending email now to:', contact.name)
184:     
185:     try {
186:       const params: EmailParams = {
187:         to: contact.email,
188:         subject: email.subject,
189:         body: email.body,
190:         from: fromEmail
191:       }
192:       
193:       const result = await resendProvider.send(params)
194:       
195:       if (result.success) {
196:         console.log('[EMAIL_AUTOMATION] Email sent successfully:', result.message_id)
197:         
198:         // Log to database for tracking
199:         await this.logOutreach({
200:           contact_email: contact.email,
201:           contact_name: contact.name,
202:           subject: email.subject,
203:           sent_at: new Date(),
204:           message_id: result.message_id,
205:           status: 'sent'
206:         })
207:       }
208:       
209:       return result
210:       
211:     } catch (error) {
212:       console.error('[EMAIL_AUTOMATION] Send error:', error)
213:       return {
214:         success: false,
215:         error: error instanceof Error ? error.message : 'Unknown error',
216:         provider: 'resend'
217:       }
218:     }
219:   }
220:   
221:   /**
222:    * Send multiple emails with rate limiting
223:    */
224:   static async sendBatch(
225:     outreaches: ScheduledOutreach[],
226:     settings: AutomationSettings
227:   ): Promise<EmailResult[]> {
228:     console.log('[EMAIL_AUTOMATION] Sending batch of', outreaches.length, 'emails')
229:     
230:     const results: EmailResult[] = []
231:     const delayMs = (3600 * 1000) / settings.max_per_hour // Convert rate limit to delay
232:     
233:     for (const outreach of outreaches) {
234:       if (!outreach.contact.email) continue
235:       
236:       const result = await this.sendEmailNow(outreach.contact, outreach.email)
237:       results.push(result)
238:       
239:       // Wait between sends to respect rate limit
240:       if (results.length < outreaches.length) {
241:         await new Promise(resolve => setTimeout(resolve, delayMs))
242:       }
243:     }
244:     
245:     const successCount = results.filter(r => r.success).length
246:     console.log('[EMAIL_AUTOMATION] Batch complete:', successCount, 'of', results.length, 'sent')
247:     
248:     return results
249:   }
250:   
251:   /**
252:    * Log outreach to database for tracking
253:    */
254:   private static async logOutreach(data: {
255:     contact_email: string
256:     contact_name: string
257:     subject: string
258:     sent_at: Date
259:     message_id?: string
260:     status: string
261:   }): Promise<void> {
262:     try {
263:       await fetch('/api/outreach/log', {
264:         method: 'POST',
265:         headers: { 'Content-Type': 'application/json' },
266:         body: JSON.stringify(data)
267:       })
268:     } catch (error) {
269:       console.error('[EMAIL_AUTOMATION] Failed to log outreach:', error)
270:       // Don't throw - logging failure shouldn't break sending
271:     }
272:   }
273:   
274:   /**
275:    * Get default automation settings
276:    */
277:   static getDefaultSettings(): AutomationSettings {
278:     return {
279:       max_per_hour: 3,
280:       spread_hours: 24,
281:       skip_weekends: true,
282:       preferred_times: ['09:00', '14:00', '16:00'],
283:       enable_followups: true
284:     }
285:   }
286:   
287:   /**
288:    * Validate automation settings
289:    */
290:   static validateSettings(settings: Partial<AutomationSettings>): AutomationSettings {
291:     const defaults = this.getDefaultSettings()
292:     
293:     return {
294:       max_per_hour: Math.max(1, Math.min(settings.max_per_hour || defaults.max_per_hour, 10)),
295:       spread_hours: Math.max(1, settings.spread_hours || defaults.spread_hours),
296:       skip_weekends: settings.skip_weekends ?? defaults.skip_weekends,
297:       preferred_times: settings.preferred_times || defaults.preferred_times,
298:       enable_followups: settings.enable_followups ?? defaults.enable_followups
299:     }
300:   }
301: }
</file>

<file path="src/lib/email-composer.ts">
 1: import { sendJobApplicationEmail } from './email-service'
 2: 
 3: export async function composeJobApplicationEmail(
 4:   jobData: { title: string; company: string; hrEmail?: string },
 5:   resumeText: string,
 6:   coverLetterText: string,
 7:   senderName?: string,
 8:   senderEmail?: string
 9: ) {
10:   const recipient = jobData.hrEmail || 'hiring@company.com'
11:   
12:   // Use real email sending service
13:   const result = await sendJobApplicationEmail({
14:     recipient,
15:     subjects: [`Application for ${jobData.title} at ${jobData.company}`],
16:     intros: ['Dear Hiring Manager,'],
17:     resumeText,
18:     coverText: coverLetterText,
19:     company: jobData.company,
20:     jobTitle: jobData.title,
21:     senderName,
22:     senderEmail
23:   })
24: 
25:   return {
26:     success: result.success,
27:     messageId: result.messageId,
28:     mailtoUrl: result.mailtoUrl,
29:     error: result.error
30:   }
31: }
</file>

<file path="src/lib/email-providers/resend-provider.ts">
  1: /**
  2:  * PHASE 3A: Resend Email Provider
  3:  * 
  4:  * Integrates with Resend.com for reliable email delivery
  5:  * Requires RESEND_API_KEY in environment variables
  6:  * 
  7:  * Setup Instructions:
  8:  * 1. Sign up at https://resend.com
  9:  * 2. Get API key from dashboard
 10:  * 3. Add to Railway: RESEND_API_KEY=re_xxxxx
 11:  * 4. (Optional) Verify your domain for better deliverability
 12:  */
 13: 
 14: export interface EmailParams {
 15:   to: string
 16:   subject: string
 17:   body: string
 18:   from?: string
 19:   attachments?: EmailAttachment[]
 20:   replyTo?: string
 21: }
 22: 
 23: export interface EmailAttachment {
 24:   filename: string
 25:   content: string // Base64 encoded
 26:   contentType: string
 27: }
 28: 
 29: export interface EmailResult {
 30:   success: boolean
 31:   message_id?: string
 32:   error?: string
 33:   provider: string
 34: }
 35: 
 36: export class ResendProvider {
 37:   private apiKey: string
 38:   private fromEmail: string
 39:   
 40:   constructor(apiKey?: string) {
 41:     this.apiKey = apiKey || process.env.RESEND_API_KEY || ''
 42:     // Use Resend's default test email until domain is verified
 43:     this.fromEmail = process.env.EMAIL_FROM || 'onboarding@resend.dev'
 44:     
 45:     if (!this.apiKey) {
 46:       console.warn('[RESEND] No API key found. Email sending will fail.')
 47:       console.warn('[RESEND] Set RESEND_API_KEY environment variable.')
 48:     }
 49:   }
 50:   
 51:   /**
 52:    * Send email via Resend API
 53:    */
 54:   async send(params: EmailParams): Promise<EmailResult> {
 55:     if (!this.apiKey) {
 56:       return {
 57:         success: false,
 58:         error: 'Resend API key not configured',
 59:         provider: 'resend'
 60:       }
 61:     }
 62:     
 63:     try {
 64:       console.log('[RESEND] Sending email to:', params.to)
 65:       
 66:       // Convert HTML body to proper format
 67:       const emailBody = this.formatBody(params.body)
 68:       
 69:       // Prepare request
 70:       const requestBody = {
 71:         from: params.from || this.fromEmail,
 72:         to: [params.to],
 73:         subject: params.subject,
 74:         html: emailBody,
 75:         reply_to: params.replyTo,
 76:         attachments: params.attachments?.map(att => ({
 77:           filename: att.filename,
 78:           content: att.content,
 79:           content_type: att.contentType
 80:         }))
 81:       }
 82:       
 83:       // Send via Resend API
 84:       const response = await fetch('https://api.resend.com/emails', {
 85:         method: 'POST',
 86:         headers: {
 87:           'Authorization': `Bearer ${this.apiKey}`,
 88:           'Content-Type': 'application/json'
 89:         },
 90:         body: JSON.stringify(requestBody)
 91:       })
 92:       
 93:       if (!response.ok) {
 94:         const errorData = await response.json().catch(() => ({}))
 95:         throw new Error(errorData.message || `Resend API error: ${response.status}`)
 96:       }
 97:       
 98:       const result = await response.json()
 99:       
100:       console.log('[RESEND] Email sent successfully, ID:', result.id)
101:       
102:       return {
103:         success: true,
104:         message_id: result.id,
105:         provider: 'resend'
106:       }
107:       
108:     } catch (error) {
109:       console.error('[RESEND] Send error:', error)
110:       return {
111:         success: false,
112:         error: error instanceof Error ? error.message : 'Unknown error',
113:         provider: 'resend'
114:       }
115:     }
116:   }
117:   
118:   /**
119:    * Format email body (convert plain text to HTML if needed)
120:    */
121:   private formatBody(body: string): string {
122:     // If body already has HTML tags, return as-is
123:     if (/<[a-z][\s\S]*>/i.test(body)) {
124:       return body
125:     }
126:     
127:     // Convert plain text to HTML
128:     const lines = body.split('\n')
129:     const htmlLines = lines.map(line => {
130:       if (!line.trim()) return '<br>'
131:       return `<p>${this.escapeHtml(line)}</p>`
132:     })
133:     
134:     return `
135: <!DOCTYPE html>
136: <html>
137: <head>
138:   <meta charset="utf-8">
139:   <style>
140:     body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; color: #333; line-height: 1.6; }
141:     p { margin: 0 0 1em 0; }
142:   </style>
143: </head>
144: <body>
145:   ${htmlLines.join('\n')}
146: </body>
147: </html>
148:     `.trim()
149:   }
150:   
151:   /**
152:    * Escape HTML special characters
153:    */
154:   private escapeHtml(text: string): string {
155:     const map: Record<string, string> = {
156:       '&': '&amp;',
157:       '<': '&lt;',
158:       '>': '&gt;',
159:       '"': '&quot;',
160:       "'": '&#039;'
161:     }
162:     return text.replace(/[&<>"']/g, char => map[char])
163:   }
164:   
165:   /**
166:    * Verify API key is valid
167:    */
168:   async verifyApiKey(): Promise<boolean> {
169:     if (!this.apiKey) return false
170:     
171:     try {
172:       const response = await fetch('https://api.resend.com/emails', {
173:         method: 'GET',
174:         headers: {
175:           'Authorization': `Bearer ${this.apiKey}`
176:         }
177:       })
178:       
179:       return response.status !== 401
180:     } catch {
181:       return false
182:     }
183:   }
184:   
185:   /**
186:    * Get provider status
187:    */
188:   getStatus(): {
189:     configured: boolean
190:     provider: string
191:     fromEmail: string
192:   } {
193:     return {
194:       configured: !!this.apiKey,
195:       provider: 'resend',
196:       fromEmail: this.fromEmail
197:     }
198:   }
199: }
200: 
201: // Export singleton instance
202: export const resendProvider = new ResendProvider()
</file>

<file path="src/lib/email-verification.ts">
  1: /**
  2:  * Email Verification & Enrichment Service
  3:  * 
  4:  * Validates email deliverability and enriches contact information
  5:  */
  6: 
  7: export interface EmailVerificationResult {
  8:   email: string
  9:   isValid: boolean
 10:   isDeliverable: boolean
 11:   domainValid: boolean
 12:   mxRecordsExist: boolean
 13:   confidence: number
 14:   riskLevel: 'low' | 'medium' | 'high'
 15:   suggestions: string[]
 16: }
 17: 
 18: export class EmailVerificationService {
 19:   /**
 20:    * Verify email format and basic deliverability
 21:    */
 22:   static async verifyEmail(email: string): Promise<EmailVerificationResult> {
 23:     const result: EmailVerificationResult = {
 24:       email,
 25:       isValid: false,
 26:       isDeliverable: false,
 27:       domainValid: false,
 28:       mxRecordsExist: false,
 29:       confidence: 0,
 30:       riskLevel: 'high',
 31:       suggestions: []
 32:     }
 33: 
 34:     // Step 1: Format validation
 35:     const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
 36:     if (!emailRegex.test(email)) {
 37:       result.suggestions.push('Invalid email format')
 38:       return result
 39:     }
 40:     result.isValid = true
 41: 
 42:     // Step 2: Extract domain
 43:     const domain = email.split('@')[1]
 44:     if (!domain) {
 45:       result.suggestions.push('Missing domain')
 46:       return result
 47:     }
 48: 
 49:     // Step 3: Check domain validity
 50:     const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?(\.[a-zA-Z]{2,})+$/
 51:     result.domainValid = domainRegex.test(domain)
 52: 
 53:     // Step 4: Common domain checks
 54:     const commonDomains = ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com', 'icloud.com']
 55:     const isCommonDomain = commonDomains.includes(domain.toLowerCase())
 56: 
 57:     // Step 5: Disposable email check
 58:     const disposableDomains = ['tempmail.com', 'guerrillamail.com', 'mailinator.com', '10minutemail.com']
 59:     const isDisposable = disposableDomains.some(d => domain.toLowerCase().includes(d))
 60: 
 61:     if (isDisposable) {
 62:       result.riskLevel = 'high'
 63:       result.suggestions.push('Disposable email detected')
 64:       result.confidence = 10
 65:       return result
 66:     }
 67: 
 68:     // Step 6: Calculate confidence
 69:     let confidence = 50 // Base confidence for valid format
 70: 
 71:     if (result.domainValid) confidence += 20
 72:     if (isCommonDomain) confidence += 20
 73:     if (!isDisposable) confidence += 10
 74: 
 75:     result.confidence = Math.min(100, confidence)
 76:     result.isDeliverable = confidence >= 70
 77:     result.riskLevel = confidence >= 70 ? 'low' : confidence >= 50 ? 'medium' : 'high'
 78: 
 79:     // Step 7: Suggestions
 80:     if (!isCommonDomain && !domain.includes('.')) {
 81:       result.suggestions.push('Domain may be invalid')
 82:     }
 83:     if (email.includes('..')) {
 84:       result.suggestions.push('Contains consecutive dots')
 85:     }
 86:     if (email.startsWith('.') || email.endsWith('.')) {
 87:       result.suggestions.push('Cannot start or end with dot')
 88:     }
 89: 
 90:     return result
 91:   }
 92: 
 93:   /**
 94:    * Verify multiple emails in batch
 95:    */
 96:   static async verifyBatch(emails: string[]): Promise<EmailVerificationResult[]> {
 97:     return Promise.all(emails.map(email => this.verifyEmail(email)))
 98:   }
 99: 
100:   /**
101:    * Extract email from text
102:    */
103:   static extractEmails(text: string): string[] {
104:     const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g
105:     const matches = text.match(emailRegex) || []
106:     return Array.from(new Set(matches)) // Remove duplicates
107:   }
108: 
109:   /**
110:    * Validate email domain matches company domain
111:    */
112:   static validateCompanyEmail(email: string, companyDomain: string): boolean {
113:     const emailDomain = email.split('@')[1]?.toLowerCase()
114:     const cleanCompanyDomain = companyDomain.toLowerCase().replace(/^www\./, '')
115:     return emailDomain === cleanCompanyDomain || emailDomain?.includes(cleanCompanyDomain)
116:   }
117: 
118:   /**
119:    * Generate email variations based on name and company
120:    */
121:   static generateEmailVariations(firstName: string, lastName: string, domain: string): string[] {
122:     const f = firstName.toLowerCase()
123:     const l = lastName.toLowerCase()
124:     const d = domain.toLowerCase().replace(/^www\./, '')
125: 
126:     return [
127:       `${f}.${l}@${d}`,
128:       `${f}${l}@${d}`,
129:       `${f}_${l}@${d}`,
130:       `${f}@${d}`,
131:       `${l}@${d}`,
132:       `${f[0]}${l}@${d}`,
133:       `${f}.${l[0]}@${d}`
134:     ]
135:   }
136: }
</file>

<file path="src/lib/enhanced-canadian-scraper.ts">
  1: import { WebScraperService } from './web-scraper'
  2: import * as cheerio from 'cheerio'
  3: 
  4: // ─── Shared Job Result Type ─────────────────────────────────────────────────
  5: export interface SharedJobResult {
  6:   title?:string;
  7:   company?:string;
  8:   location?:string;
  9:   url:string;
 10:   salary?:string;
 11:   date?:string;
 12:   snippet?:string;
 13:   source?:string;
 14: }
 15: 
 16: // ──────────────────────────────────────────────────────────────────────────────
 17: 
 18: 
 19: export class EnhancedCanadianJobScraper {
 20:   private scraper = new WebScraperService()
 21:   
 22:   async scrapeJobBankDirect(keywords:string, location:string): Promise<SharedJobResult[]> {
 23:     const searchUrl = `https://www.jobbank.gc.ca/jobsearch/jobsearch?searchstring=${encodeURIComponent(keywords)}&locationstring=${encodeURIComponent(location)}`
 24:     const response = await fetch(searchUrl)
 25:     const html = await response.text()
 26:     const $ = cheerio.load(html)
 27:     
 28:     const jobs: SharedJobResult[] = []
 29:     $('.resultJobItem').each((i, elem) => {
 30:       const title = $(elem).find('h3 a').text().trim()
 31:       const company = $(elem).find('.business').text().trim()
 32:       const loc = $(elem).find('.location').text().trim()
 33:       const url = $(elem).find('h3 a').attr('href')
 34:       const salary = $(elem).find('.salary').text().trim()
 35:       const date = $(elem).find('.date').text().trim()
 36:       
 37:       if (title) {
 38:         jobs.push({
 39:           title,
 40:           company,
 41:           location: loc || location,
 42:           url: url ? `https://www.jobbank.gc.ca${url}` : searchUrl,
 43:           salary,
 44:           date: new Date(date).toISOString() || new Date().toISOString()
 45:         })
 46:       }
 47:     })
 48:     
 49:     return jobs.slice(0, 15)
 50:   }
 51:   
 52:   async scrapeIndeedCanadaDirect(keywords:string, location:string): Promise<SharedJobResult[]> {
 53:     const searchUrl = `https://ca.indeed.com/jobs?q=${encodeURIComponent(keywords)}&l=${encodeURIComponent(location)}`
 54:     const response = await fetch(searchUrl)
 55:     const html = await response.text()
 56:     const $ = cheerio.load(html)
 57:     
 58:     const jobs: SharedJobResult[] = []
 59:     $('.job_seen_beacon').each((i, elem) => {
 60:       const title = $(elem).find('h2 a span').text().trim()
 61:       const company = $(elem).find('.companyName').text().trim()
 62:       const loc = $(elem).find('.companyLocation').text().trim()
 63:       const url = $(elem).find('h2 a').attr('href')
 64:       const salary = $(elem).find('.salary-snippet').text().trim()
 65:       const date = $(elem).find('.date').text().trim()
 66:       
 67:       if (title) {
 68:         jobs.push({
 69:           title,
 70:           company,
 71:           location: loc || location,
 72:           url: url ? `https://ca.indeed.com${url}` : searchUrl,
 73:           salary,
 74:           date: new Date(date).toISOString() || new Date().toISOString()
 75:         })
 76:       }
 77:     })
 78:     
 79:     return jobs.slice(0, 15)
 80:   }
 81:   
 82:   async combineAllSources(keywords: string, location: string): Promise<SharedJobResult[]> {
 83:     // Scrape bank and indeed (already SharedJobResult[])
 84:     const bankJobs = await this.scrapeJobBankDirect(keywords, location);
 85:     const indeedJobs = await this.scrapeIndeedCanadaDirect(keywords, location);
 86: 
 87:     // Normalize Google results to SharedJobResult
 88:     const googleResultsRaw = await this.scraper.searchJobsByGoogle({ jobTitle: keywords, location });
 89:     const googleJobs: SharedJobResult[] = googleResultsRaw.map(r => ({
 90:       title: r.title,
 91:       url: r.url,
 92:       snippet: r.snippet,
 93:       source: r.source
 94:     }));
 95: 
 96:     // Combine all
 97:     const allJobs = [...bankJobs, ...indeedJobs, ...googleJobs];
 98: 
 99:     // Dedupe by URL
100:     const uniqueJobs = allJobs.filter((job, index, self) =>
101:       index === self.findIndex(j => j.url === job.url)
102:     );
103: 
104:     // Sort by salary safely
105:     return uniqueJobs.sort((a, b) => {
106:       const scoreA = a.salary ? parseFloat(a.salary.replace(/[^\d.]/g, '')) : 0;
107:       const scoreB = b.salary ? parseFloat(b.salary.replace(/[^\d.]/g, '')) : 0;
108:       return scoreB - scoreA;
109:     });
110:   }
111: }
</file>

<file path="src/lib/error-tracking.ts">
  1: /**
  2:  * Enterprise Error Tracking Service
  3:  * Centralized error collection, aggregation, and analysis
  4:  */
  5: 
  6: interface ErrorEntry {
  7:   id: string
  8:   timestamp: number
  9:   message: string
 10:   stack?: string
 11:   context?: string
 12:   userId?: string
 13:   sessionId?: string
 14:   url?: string
 15:   userAgent?: string
 16:   severity: 'low' | 'medium' | 'high' | 'critical'
 17:   tags?: string[]
 18:   metadata?: Record<string, any>
 19: }
 20: 
 21: interface ErrorStats {
 22:   totalErrors: number
 23:   last1h: number
 24:   last24h: number
 25:   last7d: number
 26:   byContext: Record<string, number>
 27:   bySeverity: Record<string, number>
 28:   topErrors: Array<{ message: string; count: number; lastSeen: number }>
 29: }
 30: 
 31: export class ErrorTrackingService {
 32:   private static instance: ErrorTrackingService
 33:   private errors: Map<string, ErrorEntry> = new Map()
 34:   private errorCounts: Map<string, number> = new Map()
 35:   private readonly MAX_ERRORS = 10000 // Keep last 10k errors in memory
 36:   private readonly CLEANUP_INTERVAL = 3600000 // 1 hour
 37: 
 38:   private constructor() {
 39:     // Auto-cleanup old errors
 40:     if (typeof setInterval !== 'undefined') {
 41:       setInterval(() => this.cleanup(), this.CLEANUP_INTERVAL)
 42:     }
 43:   }
 44: 
 45:   static getInstance(): ErrorTrackingService {
 46:     if (!ErrorTrackingService.instance) {
 47:       ErrorTrackingService.instance = new ErrorTrackingService()
 48:     }
 49:     return ErrorTrackingService.instance
 50:   }
 51: 
 52:   /**
 53:    * Track a new error
 54:    */
 55:   trackError(error: Error | string, options?: {
 56:     context?: string
 57:     userId?: string
 58:     sessionId?: string
 59:     url?: string
 60:     userAgent?: string
 61:     severity?: 'low' | 'medium' | 'high' | 'critical'
 62:     tags?: string[]
 63:     metadata?: Record<string, any>
 64:   }): string {
 65:     const errorId = `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
 66:     const message = error instanceof Error ? error.message : error
 67:     const stack = error instanceof Error ? error.stack : undefined
 68: 
 69:     const entry: ErrorEntry = {
 70:       id: errorId,
 71:       timestamp: Date.now(),
 72:       message,
 73:       stack,
 74:       context: options?.context,
 75:       userId: options?.userId,
 76:       sessionId: options?.sessionId,
 77:       url: options?.url,
 78:       userAgent: options?.userAgent,
 79:       severity: options?.severity || this.determineSeverity(message),
 80:       tags: options?.tags,
 81:       metadata: options?.metadata
 82:     }
 83: 
 84:     // Store error
 85:     this.errors.set(errorId, entry)
 86: 
 87:     // Update error counts
 88:     const countKey = this.getCountKey(message)
 89:     this.errorCounts.set(countKey, (this.errorCounts.get(countKey) || 0) + 1)
 90: 
 91:     // Enforce size limit
 92:     if (this.errors.size > this.MAX_ERRORS) {
 93:       this.cleanup()
 94:     }
 95: 
 96:     // Log to console in development
 97:     if (process.env.NODE_ENV !== 'production') {
 98:       console.error(`[ERROR_TRACKING] ${errorId}:`, message, {
 99:         context: options?.context,
100:         severity: entry.severity
101:       })
102:     }
103: 
104:     return errorId
105:   }
106: 
107:   /**
108:    * Get error statistics
109:    */
110:   getStats(): ErrorStats {
111:     const now = Date.now()
112:     const hour = 3600000 // 1 hour in ms
113:     const day = 86400000 // 24 hours in ms
114:     const week = 604800000 // 7 days in ms
115: 
116:     const errors = Array.from(this.errors.values())
117: 
118:     const stats: ErrorStats = {
119:       totalErrors: errors.length,
120:       last1h: errors.filter(e => now - e.timestamp < hour).length,
121:       last24h: errors.filter(e => now - e.timestamp < day).length,
122:       last7d: errors.filter(e => now - e.timestamp < week).length,
123:       byContext: {},
124:       bySeverity: {},
125:       topErrors: []
126:     }
127: 
128:     // Group by context
129:     errors.forEach(e => {
130:       if (e.context) {
131:         stats.byContext[e.context] = (stats.byContext[e.context] || 0) + 1
132:       }
133:       stats.bySeverity[e.severity] = (stats.bySeverity[e.severity] || 0) + 1
134:     })
135: 
136:     // Get top errors
137:     const errorFrequency = new Map<string, { message: string; count: number; lastSeen: number }>()
138:     
139:     errors.forEach(e => {
140:       const key = this.getCountKey(e.message)
141:       const existing = errorFrequency.get(key)
142:       if (existing) {
143:         existing.count++
144:         existing.lastSeen = Math.max(existing.lastSeen, e.timestamp)
145:       } else {
146:         errorFrequency.set(key, {
147:           message: e.message,
148:           count: 1,
149:           lastSeen: e.timestamp
150:         })
151:       }
152:     })
153: 
154:     stats.topErrors = Array.from(errorFrequency.values())
155:       .sort((a, b) => b.count - a.count)
156:       .slice(0, 10)
157: 
158:     return stats
159:   }
160: 
161:   /**
162:    * Get errors by filter
163:    */
164:   getErrors(filter?: {
165:     context?: string
166:     severity?: string
167:     userId?: string
168:     limit?: number
169:     since?: number
170:   }): ErrorEntry[] {
171:     let errors = Array.from(this.errors.values())
172: 
173:     if (filter?.context) {
174:       errors = errors.filter(e => e.context === filter.context)
175:     }
176: 
177:     if (filter?.severity) {
178:       errors = errors.filter(e => e.severity === filter.severity)
179:     }
180: 
181:     if (filter?.userId) {
182:       errors = errors.filter(e => e.userId === filter.userId)
183:     }
184: 
185:     if (filter?.since) {
186:       const since = filter.since
187:       errors = errors.filter(e => e.timestamp >= since)
188:     }
189: 
190:     errors.sort((a, b) => b.timestamp - a.timestamp)
191: 
192:     if (filter?.limit) {
193:       errors = errors.slice(0, filter.limit)
194:     }
195: 
196:     return errors
197:   }
198: 
199:   /**
200:    * Get a specific error by ID
201:    */
202:   getError(errorId: string): ErrorEntry | undefined {
203:     return this.errors.get(errorId)
204:   }
205: 
206:   /**
207:    * Clear all errors
208:    */
209:   clearAll(): void {
210:     this.errors.clear()
211:     this.errorCounts.clear()
212:   }
213: 
214:   /**
215:    * Clear errors older than a certain age
216:    */
217:   clearOlderThan(ageMs: number): number {
218:     const cutoff = Date.now() - ageMs
219:     let cleared = 0
220: 
221:     for (const [id, error] of this.errors.entries()) {
222:       if (error.timestamp < cutoff) {
223:         this.errors.delete(id)
224:         cleared++
225:       }
226:     }
227: 
228:     return cleared
229:   }
230: 
231:   /**
232:    * Private: Cleanup old errors
233:    */
234:   private cleanup(): void {
235:     const now = Date.now()
236:     const maxAge = 604800000 // 7 days
237: 
238:     let cleaned = 0
239:     for (const [id, error] of this.errors.entries()) {
240:       if (now - error.timestamp > maxAge) {
241:         this.errors.delete(id)
242:         cleaned++
243:       }
244:     }
245: 
246:     if (cleaned > 0 && process.env.NODE_ENV !== 'production') {
247:       console.log(`[ERROR_TRACKING] Cleaned ${cleaned} old errors`)
248:     }
249:   }
250: 
251:   /**
252:    * Private: Determine error severity from message
253:    */
254:   private determineSeverity(message: string): 'low' | 'medium' | 'high' | 'critical' {
255:     const lowerMessage = message.toLowerCase()
256: 
257:     // Critical keywords
258:     if (
259:       lowerMessage.includes('crash') ||
260:       lowerMessage.includes('fatal') ||
261:       lowerMessage.includes('security') ||
262:       lowerMessage.includes('breach') ||
263:       lowerMessage.includes('unauthorized')
264:     ) {
265:       return 'critical'
266:     }
267: 
268:     // High severity keywords
269:     if (
270:       lowerMessage.includes('fail') ||
271:       lowerMessage.includes('error') ||
272:       lowerMessage.includes('unable') ||
273:       lowerMessage.includes('cannot') ||
274:       lowerMessage.includes('invalid')
275:     ) {
276:       return 'high'
277:     }
278: 
279:     // Medium severity keywords
280:     if (
281:       lowerMessage.includes('warning') ||
282:       lowerMessage.includes('deprecated') ||
283:       lowerMessage.includes('timeout')
284:     ) {
285:       return 'medium'
286:     }
287: 
288:     return 'low'
289:   }
290: 
291:   /**
292:    * Private: Get consistent count key for error message
293:    */
294:   private getCountKey(message: string): string {
295:     // Normalize error messages for counting (remove variable parts)
296:     return message
297:       .replace(/\d+/g, 'N') // Replace numbers with N
298:       .replace(/[a-f0-9-]{36}/g, 'UUID') // Replace UUIDs
299:       .replace(/[a-f0-9]{24}/g, 'ID') // Replace MongoDB IDs
300:       .toLowerCase()
301:       .slice(0, 200) // Truncate long messages
302:   }
303: }
304: 
305: // Global error handler for uncaught errors
306: if (typeof window !== 'undefined') {
307:   const tracker = ErrorTrackingService.getInstance()
308: 
309:   window.addEventListener('error', (event) => {
310:     tracker.trackError(event.error || event.message, {
311:       context: 'window.error',
312:       severity: 'high',
313:       url: window.location.href,
314:       userAgent: navigator.userAgent
315:     })
316:   })
317: 
318:   window.addEventListener('unhandledrejection', (event) => {
319:     tracker.trackError(event.reason, {
320:       context: 'unhandledRejection',
321:       severity: 'high',
322:       url: window.location.href,
323:       userAgent: navigator.userAgent
324:     })
325:   })
326: }
327: 
328: // Export singleton instance
329: export const errorTracker = ErrorTrackingService.getInstance()
</file>

<file path="src/lib/errors/perplexity-error.ts">
  1: /**
  2:  * Custom Error Classes for Perplexity AI Integration
  3:  * 
  4:  * Provides structured error handling with metadata for debugging,
  5:  * monitoring, and user-friendly error messages.
  6:  */
  7: 
  8: export interface PerplexityErrorContext {
  9:   requestId: string
 10:   prompts: {
 11:     system: string
 12:     user: string
 13:   }
 14:   timestamp: number
 15:   endpoint?: string
 16:   statusCode?: number
 17:   retryAttempt?: number
 18:   cacheKey?: string
 19: }
 20: 
 21: /**
 22:  * Base Perplexity Error
 23:  */
 24: export class PerplexityError extends Error {
 25:   public readonly code: string
 26:   public readonly requestId: string
 27:   public readonly prompts: { system: string; user: string }
 28:   public readonly timestamp: number
 29:   public readonly endpoint?: string
 30:   public readonly statusCode?: number
 31:   public readonly retryAttempt?: number
 32:   public readonly originalError?: Error
 33: 
 34:   constructor(
 35:     message: string,
 36:     code: string,
 37:     context: PerplexityErrorContext,
 38:     originalError?: Error
 39:   ) {
 40:     super(message)
 41:     this.name = 'PerplexityError'
 42:     this.code = code
 43:     this.requestId = context.requestId
 44:     this.prompts = context.prompts
 45:     this.timestamp = context.timestamp
 46:     this.endpoint = context.endpoint
 47:     this.statusCode = context.statusCode
 48:     this.retryAttempt = context.retryAttempt
 49:     this.originalError = originalError
 50: 
 51:     // Maintain proper stack trace
 52:     if (Error.captureStackTrace) {
 53:       Error.captureStackTrace(this, this.constructor)
 54:     }
 55:   }
 56: 
 57:   toJSON() {
 58:     return {
 59:       name: this.name,
 60:       message: this.message,
 61:       code: this.code,
 62:       requestId: this.requestId,
 63:       timestamp: this.timestamp,
 64:       endpoint: this.endpoint,
 65:       statusCode: this.statusCode,
 66:       retryAttempt: this.retryAttempt,
 67:       originalError: this.originalError?.message,
 68:       stack: this.stack
 69:     }
 70:   }
 71: }
 72: 
 73: /**
 74:  * JSON Parsing Error
 75:  */
 76: export class PerplexityJSONError extends PerplexityError {
 77:   public readonly rawResponse: string
 78:   public readonly parseAttempts: string[]
 79: 
 80:   constructor(
 81:     message: string,
 82:     context: PerplexityErrorContext,
 83:     rawResponse: string,
 84:     parseAttempts: string[],
 85:     originalError?: Error
 86:   ) {
 87:     super(message, 'JSON_PARSE_ERROR', context, originalError)
 88:     this.name = 'PerplexityJSONError'
 89:     this.rawResponse = rawResponse
 90:     this.parseAttempts = parseAttempts
 91:   }
 92: 
 93:   toJSON() {
 94:     return {
 95:       ...super.toJSON(),
 96:       rawResponse: this.rawResponse.slice(0, 500), // Truncate for logging
 97:       parseAttempts: this.parseAttempts
 98:     }
 99:   }
100: }
101: 
102: /**
103:  * Schema Validation Error
104:  */
105: export class PerplexitySchemaError extends PerplexityError {
106:   public readonly schema: string
107:   public readonly validationErrors: any[]
108:   public readonly receivedData: any
109: 
110:   constructor(
111:     message: string,
112:     context: PerplexityErrorContext,
113:     schema: string,
114:     validationErrors: any[],
115:     receivedData: any
116:   ) {
117:     super(message, 'SCHEMA_VALIDATION_ERROR', context)
118:     this.name = 'PerplexitySchemaError'
119:     this.schema = schema
120:     this.validationErrors = validationErrors
121:     this.receivedData = receivedData
122:   }
123: 
124:   toJSON() {
125:     return {
126:       ...super.toJSON(),
127:       schema: this.schema,
128:       validationErrors: this.validationErrors,
129:       receivedData: this.receivedData
130:     }
131:   }
132: }
133: 
134: /**
135:  * API Request Error
136:  */
137: export class PerplexityAPIError extends PerplexityError {
138:   public readonly responseBody?: any
139:   public readonly headers?: Record<string, string>
140: 
141:   constructor(
142:     message: string,
143:     context: PerplexityErrorContext,
144:     statusCode: number,
145:     responseBody?: any,
146:     headers?: Record<string, string>,
147:     originalError?: Error
148:   ) {
149:     super(message, 'API_REQUEST_ERROR', { ...context, statusCode }, originalError)
150:     this.name = 'PerplexityAPIError'
151:     this.responseBody = responseBody
152:     this.headers = headers
153:   }
154: 
155:   toJSON() {
156:     return {
157:       ...super.toJSON(),
158:       responseBody: this.responseBody,
159:       headers: this.headers
160:     }
161:   }
162: }
163: 
164: /**
165:  * Rate Limit Error
166:  */
167: export class PerplexityRateLimitError extends PerplexityError {
168:   public readonly retryAfter?: number
169:   public readonly limit?: number
170:   public readonly remaining?: number
171: 
172:   constructor(
173:     message: string,
174:     context: PerplexityErrorContext,
175:     retryAfter?: number,
176:     limit?: number,
177:     remaining?: number
178:   ) {
179:     super(message, 'RATE_LIMIT_ERROR', { ...context, statusCode: 429 })
180:     this.name = 'PerplexityRateLimitError'
181:     this.retryAfter = retryAfter
182:     this.limit = limit
183:     this.remaining = remaining
184:   }
185: 
186:   toJSON() {
187:     return {
188:       ...super.toJSON(),
189:       retryAfter: this.retryAfter,
190:       limit: this.limit,
191:       remaining: this.remaining
192:     }
193:   }
194: }
195: 
196: /**
197:  * Timeout Error
198:  */
199: export class PerplexityTimeoutError extends PerplexityError {
200:   public readonly timeoutDuration: number
201: 
202:   constructor(
203:     message: string,
204:     context: PerplexityErrorContext,
205:     timeoutDuration: number,
206:     originalError?: Error
207:   ) {
208:     super(message, 'TIMEOUT_ERROR', context, originalError)
209:     this.name = 'PerplexityTimeoutError'
210:     this.timeoutDuration = timeoutDuration
211:   }
212: 
213:   toJSON() {
214:     return {
215:       ...super.toJSON(),
216:       timeoutDuration: this.timeoutDuration
217:     }
218:   }
219: }
220: 
221: /**
222:  * Network Error
223:  */
224: export class PerplexityNetworkError extends PerplexityError {
225:   constructor(
226:     message: string,
227:     context: PerplexityErrorContext,
228:     originalError?: Error
229:   ) {
230:     super(message, 'NETWORK_ERROR', context, originalError)
231:     this.name = 'PerplexityNetworkError'
232:   }
233: }
234: 
235: /**
236:  * Error Factory
237:  */
238: export class PerplexityErrorFactory {
239:   static create(
240:     error: any,
241:     context: PerplexityErrorContext
242:   ): PerplexityError {
243:     // Rate limit error
244:     if (error.statusCode === 429 || error.status === 429) {
245:       return new PerplexityRateLimitError(
246:         'Perplexity API rate limit exceeded',
247:         context,
248:         error.retryAfter,
249:         error.limit,
250:         error.remaining
251:       )
252:     }
253: 
254:     // Timeout error
255:     if (error.code === 'ETIMEDOUT' || error.code === 'ESOCKETTIMEDOUT') {
256:       return new PerplexityTimeoutError(
257:         'Perplexity API request timed out',
258:         context,
259:         error.timeout || 30000,
260:         error
261:       )
262:     }
263: 
264:     // Network error
265:     if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED' || error.code === 'ECONNRESET') {
266:       return new PerplexityNetworkError(
267:         'Network error connecting to Perplexity API',
268:         context,
269:         error
270:       )
271:     }
272: 
273:     // API error
274:     if (error.statusCode || error.status) {
275:       return new PerplexityAPIError(
276:         error.message || 'Perplexity API request failed',
277:         context,
278:         error.statusCode || error.status,
279:         error.body || error.data,
280:         error.headers,
281:         error
282:       )
283:     }
284: 
285:     // Generic error
286:     return new PerplexityError(
287:       error.message || 'Unknown Perplexity error',
288:       'UNKNOWN_ERROR',
289:       context,
290:       error
291:     )
292:   }
293: }
294: 
295: /**
296:  * User-friendly error messages
297:  */
298: export function getUserFriendlyMessage(error: PerplexityError): string {
299:   switch (error.code) {
300:     case 'JSON_PARSE_ERROR':
301:       return 'We received an unexpected response format. Please try again.'
302:     
303:     case 'SCHEMA_VALIDATION_ERROR':
304:       return 'The AI response was incomplete. Please try again or contact support.'
305:     
306:     case 'API_REQUEST_ERROR':
307:       if (error.statusCode === 500) {
308:         return 'The AI service is temporarily unavailable. Please try again in a moment.'
309:       }
310:       if (error.statusCode === 401 || error.statusCode === 403) {
311:         return 'Authentication error. Please contact support.'
312:       }
313:       return 'An error occurred while processing your request. Please try again.'
314:     
315:     case 'RATE_LIMIT_ERROR':
316:       const rateLimitError = error as PerplexityRateLimitError
317:       if (rateLimitError.retryAfter) {
318:         return `Rate limit exceeded. Please try again in ${Math.ceil(rateLimitError.retryAfter / 60)} minutes.`
319:       }
320:       return 'Too many requests. Please wait a moment and try again.'
321:     
322:     case 'TIMEOUT_ERROR':
323:       return 'The request took too long to process. Please try again with a simpler query.'
324:     
325:     case 'NETWORK_ERROR':
326:       return 'Network connection error. Please check your internet connection and try again.'
327:     
328:     default:
329:       return 'An unexpected error occurred. Please try again or contact support.'
330:   }
331: }
</file>

<file path="src/lib/flags.ts">
1: export function isFeatureEnabled(name: string): boolean {
2:   const raw = (process.env.FEATURE_FLAGS || '').toLowerCase()
3:   if (!raw) return false
4:   const parts = raw.split(',').map(s => s.trim()).filter(Boolean)
5:   return parts.includes(name.toLowerCase())
6: }
</file>

<file path="src/lib/followup-automation.ts">
  1: import { PerplexityIntelligenceService } from './perplexity-intelligence'
  2: import { resendProvider, EmailParams } from './email-providers/resend-provider'
  3: 
  4: export interface FollowUpSequence {
  5:   id: string
  6:   original_email_id: string
  7:   contact_email: string
  8:   contact_name: string
  9:   company_name: string
 10:   job_title: string
 11:   userId: string
 12:   
 13:   sequences: FollowUpStep[]
 14:   status: 'active' | 'completed' | 'paused' | 'replied'
 15:   created_at: Date
 16:   last_updated: Date
 17: }
 18: 
 19: export interface FollowUpStep {
 20:   step_number: number
 21:   days_after: number // 3, 7, 14
 22:   subject: string
 23:   body: string
 24:   status: 'pending' | 'scheduled' | 'sent' | 'skipped'
 25:   scheduled_time?: Date
 26:   sent_at?: Date
 27:   message_id?: string
 28:   tone: 'gentle' | 'value-add' | 'graceful-close'
 29: }
 30: 
 31: export class FollowUpAutomationService {
 32:   /**
 33:    * PHASE 4A: Create automated follow-up sequence
 34:    * 
 35:    * Generates 3 follow-up emails:
 36:    * - Day 3: Gentle reminder
 37:    * - Day 7: Additional value/insight
 38:    * - Day 14: Graceful close/final attempt
 39:    */
 40:   static async createFollowUpSequence(
 41:     originalEmail: {
 42:       id: string
 43:       contact_email: string
 44:       contact_name: string
 45:       company_name: string
 46:       job_title: string
 47:       original_subject: string
 48:       original_body: string
 49:     },
 50:     userId: string,
 51:     resumeText?: string
 52:   ): Promise<FollowUpSequence> {
 53:     console.log('[FOLLOWUP] Creating sequence for:', originalEmail.contact_name)
 54:     
 55:     const now = new Date()
 56:     
 57:     // Generate all 3 follow-up emails with AI
 58:     const followUps = await this.generateIntelligentFollowUps(
 59:       originalEmail,
 60:       resumeText
 61:     )
 62:     
 63:     const sequence: FollowUpSequence = {
 64:       id: `followup_${Date.now()}_${userId.slice(0, 8)}`,
 65:       original_email_id: originalEmail.id,
 66:       contact_email: originalEmail.contact_email,
 67:       contact_name: originalEmail.contact_name,
 68:       company_name: originalEmail.company_name,
 69:       job_title: originalEmail.job_title,
 70:       userId,
 71:       sequences: followUps,
 72:       status: 'active',
 73:       created_at: now,
 74:       last_updated: now
 75:     }
 76:     
 77:     console.log('[FOLLOWUP] Created 3-step sequence:', sequence.id)
 78:     
 79:     return sequence
 80:   }
 81:   
 82:   /**
 83:    * Generate intelligent follow-ups using Perplexity
 84:    */
 85:   private static async generateIntelligentFollowUps(
 86:     originalEmail: {
 87:       contact_name: string
 88:       company_name: string
 89:       job_title: string
 90:       original_subject: string
 91:       original_body: string
 92:     },
 93:     resumeText?: string
 94:   ): Promise<FollowUpStep[]> {
 95:     const firstName = originalEmail.contact_name.split(' ')[0]
 96:     
 97:     try {
 98:       // Use AI to generate contextual follow-ups
 99:       const prompt = `
100: Generate 3 professional follow-up emails for a job application to ${originalEmail.company_name} for ${originalEmail.job_title}.
101: 
102: ORIGINAL EMAIL:
103: Subject: ${originalEmail.original_subject}
104: Body: ${originalEmail.original_body}
105: 
106: FOLLOW-UP SEQUENCE:
107: 1. Day 3 Follow-up (gentle reminder)
108:    - Tone: Polite, brief, non-pushy
109:    - Reference original email
110:    - Ask if they had a chance to review
111:    - Keep under 50 words
112: 
113: 2. Day 7 Follow-up (value-add)
114:    - Tone: Helpful, value-focused
115:    - Share relevant insight, article, or unique perspective
116:    - Demonstrate continued interest + research
117:    - 75-100 words
118: 
119: 3. Day 14 Follow-up (graceful close)
120:    - Tone: Professional, understanding, leaves door open
121:    - Acknowledge they may be busy
122:    - Express continued interest but no pressure
123:    - Offer to reconnect in future
124:    - 50-75 words
125: 
126: Return JSON array with this structure:
127: [
128:   {
129:     "step_number": 1,
130:     "subject": "Re: [original subject]",
131:     "body": "email body here",
132:     "tone": "gentle"
133:   },
134:   {
135:     "step_number": 2,
136:     "subject": "subject here",
137:     "body": "email body here",
138:     "tone": "value-add"
139:   },
140:   {
141:     "step_number": 3,
142:     "subject": "subject here",
143:     "body": "email body here",
144:     "tone": "graceful-close"
145:   }
146: ]
147: 
148: RULES:
149: - Use ${firstName} for first name
150: - Be professional and respectful
151: - No buzzwords (rockstar, ninja, passionate)
152: - Keep emails concise
153: - Don't be desperate or pushy
154: - Each email stands alone (works if previous wasn't read)
155: `.trim()
156:       
157:       const result = await PerplexityIntelligenceService.customQuery({
158:         systemPrompt: "You write professional, effective follow-up emails that get responses without being pushy.",
159:         userPrompt: prompt,
160:         temperature: 0.4,
161:         maxTokens: 1000
162:       })
163:       
164:       // Parse and validate result
165:       if (Array.isArray(result) && result.length === 3) {
166:         return result.map((email: any, index: number) => ({
167:           step_number: index + 1,
168:           days_after: index === 0 ? 3 : index === 1 ? 7 : 14,
169:           subject: email.subject || `Following up: ${originalEmail.job_title}`,
170:           body: email.body || '',
171:           status: 'pending' as const,
172:           tone: email.tone || (index === 0 ? 'gentle' : index === 1 ? 'value-add' : 'graceful-close')
173:         }))
174:       }
175:     } catch (error) {
176:       console.error('[FOLLOWUP] AI generation failed, using templates:', error)
177:     }
178:     
179:     // Fallback to templates if AI fails
180:     return this.getTemplateFollowUps(originalEmail)
181:   }
182:   
183:   /**
184:    * Template-based follow-ups (fallback)
185:    */
186:   private static getTemplateFollowUps(originalEmail: {
187:     contact_name: string
188:     company_name: string
189:     job_title: string
190:     original_subject: string
191:   }): FollowUpStep[] {
192:     const firstName = originalEmail.contact_name.split(' ')[0]
193:     
194:     return [
195:       {
196:         step_number: 1,
197:         days_after: 3,
198:         subject: `Re: ${originalEmail.original_subject}`,
199:         body: `Hi ${firstName},\n\nJust wanted to follow up on my previous email regarding the ${originalEmail.job_title} position. Have you had a chance to review my application?\n\nThank you for your time.\n\nBest regards`,
200:         status: 'pending',
201:         tone: 'gentle'
202:       },
203:       {
204:         step_number: 2,
205:         days_after: 7,
206:         subject: `${originalEmail.job_title} - Additional context`,
207:         body: `Hi ${firstName},\n\nI wanted to share some additional context about how my experience aligns with ${originalEmail.company_name}'s goals for the ${originalEmail.job_title} role.\n\nI've been following ${originalEmail.company_name}'s recent work and I'm particularly excited about the opportunity to contribute to your team's success.\n\nWould you be open to a brief conversation?\n\nBest regards`,
208:         status: 'pending',
209:         tone: 'value-add'
210:       },
211:       {
212:         step_number: 3,
213:         days_after: 14,
214:         subject: `Final follow-up: ${originalEmail.job_title}`,
215:         body: `Hi ${firstName},\n\nI understand you're likely very busy. I wanted to reach out one last time regarding the ${originalEmail.job_title} position.\n\nIf the timing isn't right or the role has been filled, I completely understand. I'd still welcome the opportunity to connect in the future.\n\nThank you for considering my application.\n\nBest regards`,
216:         status: 'pending',
217:         tone: 'graceful-close'
218:       }
219:     ]
220:   }
221:   
222:   /**
223:    * Process pending follow-ups (called by cron/background job)
224:    */
225:   static async processPendingFollowUps(): Promise<{
226:     processed: number
227:     sent: number
228:     failed: number
229:   }> {
230:     console.log('[FOLLOWUP] Processing pending follow-ups...')
231:     
232:     try {
233:       // Fetch pending follow-ups from database
234:       const response = await fetch('/api/outreach/followup/pending')
235:       if (!response.ok) {
236:         throw new Error('Failed to fetch pending follow-ups')
237:       }
238:       
239:       const { followups } = await response.json()
240:       
241:       let sent = 0
242:       let failed = 0
243:       
244:       for (const followup of followups) {
245:         try {
246:           // Send the follow-up email
247:           const params: EmailParams = {
248:             to: followup.contact_email,
249:             subject: followup.subject,
250:             body: followup.body
251:           }
252:           
253:           const result = await resendProvider.send(params)
254:           
255:           if (result.success) {
256:             // Mark as sent in database
257:             await fetch('/api/outreach/followup/mark-sent', {
258:               method: 'POST',
259:               headers: { 'Content-Type': 'application/json' },
260:               body: JSON.stringify({
261:                 followup_id: followup.id,
262:                 message_id: result.message_id,
263:                 sent_at: new Date()
264:               })
265:             })
266:             sent++
267:             console.log('[FOLLOWUP] Sent:', followup.contact_email)
268:           } else {
269:             failed++
270:             console.error('[FOLLOWUP] Failed:', result.error)
271:           }
272:         } catch (error) {
273:           failed++
274:           console.error('[FOLLOWUP] Error processing:', error)
275:         }
276:       }
277:       
278:       console.log('[FOLLOWUP] Processing complete:', { sent, failed, total: followups.length })
279:       
280:       return {
281:         processed: followups.length,
282:         sent,
283:         failed
284:       }
285:       
286:     } catch (error) {
287:       console.error('[FOLLOWUP] Processing error:', error)
288:       return { processed: 0, sent: 0, failed: 0 }
289:     }
290:   }
291:   
292:   /**
293:    * Cancel follow-up sequence (user got response)
294:    */
295:   static async cancelSequence(sequenceId: string, reason: 'replied' | 'hired' | 'not-interested'): Promise<void> {
296:     try {
297:       await fetch('/api/outreach/followup/cancel', {
298:         method: 'POST',
299:         headers: { 'Content-Type': 'application/json' },
300:         body: JSON.stringify({ sequence_id: sequenceId, reason })
301:       })
302:       
303:       console.log('[FOLLOWUP] Cancelled sequence:', sequenceId, reason)
304:     } catch (error) {
305:       console.error('[FOLLOWUP] Cancel error:', error)
306:     }
307:   }
308:   
309:   /**
310:    * Get active sequences for user
311:    */
312:   static async getActiveSequences(userId: string): Promise<FollowUpSequence[]> {
313:     try {
314:       const response = await fetch(`/api/outreach/followup/list?userId=${userId}&status=active`)
315:       if (!response.ok) return []
316:       
317:       const { sequences } = await response.json()
318:       return sequences || []
319:     } catch {
320:       return []
321:     }
322:   }
323: }
</file>

<file path="src/lib/health-check.ts">
  1: // Enterprise Health Check System
  2: 
  3: import { dbService } from './database'
  4: import { logger } from './logger'
  5: 
  6: export interface ServiceHealth {
  7:   status: 'healthy' | 'degraded' | 'unhealthy'
  8:   responseTime?: number
  9:   error?: string
 10:   details?: any
 11: }
 12: 
 13: export interface HealthCheck {
 14:   status: 'healthy' | 'degraded' | 'unhealthy'
 15:   timestamp: string
 16:   version: string
 17:   uptime: number
 18:   services: {
 19:     database: ServiceHealth
 20:     ai: ServiceHealth
 21:     cache: ServiceHealth
 22:   }
 23:   metrics: {
 24:     memoryUsage: NodeJS.MemoryUsage
 25:     cpuUsage?: NodeJS.CpuUsage
 26:   }
 27: }
 28: 
 29: export class HealthCheckService {
 30:   private static instance: HealthCheckService
 31: 
 32:   static getInstance(): HealthCheckService {
 33:     if (!HealthCheckService.instance) {
 34:       HealthCheckService.instance = new HealthCheckService()
 35:     }
 36:     return HealthCheckService.instance
 37:   }
 38: 
 39:   async performHealthCheck(): Promise<HealthCheck> {
 40:     const startTime = Date.now()
 41:     
 42:     const healthCheck: HealthCheck = {
 43:       status: 'healthy',
 44:       timestamp: new Date().toISOString(),
 45:       version: process.env.npm_package_version || '1.0.0',
 46:       uptime: process.uptime(),
 47:       services: {
 48:         database: await this.checkDatabase(),
 49:         ai: await this.checkAIService(),
 50:         cache: await this.checkCache()
 51:       },
 52:       metrics: {
 53:         memoryUsage: process.memoryUsage(),
 54:         cpuUsage: process.cpuUsage()
 55:       }
 56:     }
 57: 
 58:     // Determine overall health based on service statuses
 59:     const serviceStatuses = Object.values(healthCheck.services).map(s => s.status)
 60:     if (serviceStatuses.includes('unhealthy')) {
 61:       healthCheck.status = 'unhealthy'
 62:     } else if (serviceStatuses.includes('degraded')) {
 63:       healthCheck.status = 'degraded'
 64:     }
 65: 
 66:     const duration = Date.now() - startTime
 67:     logger.debug(`Health check completed in ${duration}ms`, {
 68:       status: healthCheck.status,
 69:       services: serviceStatuses
 70:     })
 71: 
 72:     return healthCheck
 73:   }
 74: 
 75:   private async checkDatabase(): Promise<ServiceHealth> {
 76:     try {
 77:       const start = Date.now()
 78:       await dbService.connect()
 79:       const responseTime = Date.now() - start
 80:       
 81:       const isConnected = dbService.isConnected()
 82:       
 83:       return {
 84:         status: isConnected && responseTime < 1000 ? 'healthy' : 'degraded',
 85:         responseTime,
 86:         details: {
 87:           connected: isConnected
 88:         }
 89:       }
 90:     } catch (error) {
 91:       logger.error('Database health check failed', error)
 92:       return {
 93:         status: 'unhealthy',
 94:         error: error instanceof Error ? error.message : 'Database connection failed'
 95:       }
 96:     }
 97:   }
 98: 
 99:   private async checkAIService(): Promise<ServiceHealth> {
100:     try {
101:       const start = Date.now()
102:       
103:       // Simple check - verify API key is configured
104:       const apiKey = process.env.PERPLEXITY_API_KEY
105:       if (!apiKey) {
106:         return {
107:           status: 'unhealthy',
108:           error: 'Perplexity API key not configured'
109:         }
110:       }
111: 
112:       const responseTime = Date.now() - start
113:       
114:       return {
115:         status: 'healthy',
116:         responseTime,
117:         details: {
118:           provider: 'perplexity',
119:           configured: true
120:         }
121:       }
122:     } catch (error) {
123:       logger.error('AI service health check failed', error)
124:       return {
125:         status: 'unhealthy',
126:         error: error instanceof Error ? error.message : 'AI service unavailable'
127:       }
128:     }
129:   }
130: 
131:   private async checkCache(): Promise<ServiceHealth> {
132:     try {
133:       const start = Date.now()
134:       
135:       // Check if Redis is configured
136:       const redisUrl = process.env.REDIS_URL
137:       if (!redisUrl) {
138:         return {
139:           status: 'degraded',
140:           details: {
141:             configured: false,
142:             message: 'Cache not configured - using in-memory fallback'
143:           }
144:         }
145:       }
146: 
147:       const responseTime = Date.now() - start
148:       
149:       return {
150:         status: responseTime < 500 ? 'healthy' : 'degraded',
151:         responseTime,
152:         details: {
153:           configured: true,
154:           type: 'redis'
155:         }
156:       }
157:     } catch (error) {
158:       logger.error('Cache health check failed', error)
159:       return {
160:         status: 'degraded',
161:         error: error instanceof Error ? error.message : 'Cache unavailable',
162:         details: {
163:           fallback: 'in-memory'
164:         }
165:       }
166:     }
167:   }
168: 
169:   // Readiness probe - is the service ready to accept requests?
170:   async isReady(): Promise<boolean> {
171:     const health = await this.performHealthCheck()
172:     return health.status !== 'unhealthy'
173:   }
174: 
175:   // Liveness probe - is the service alive?
176:   async isAlive(): Promise<boolean> {
177:     try {
178:       // Simple check - can we execute code?
179:       return Date.now() > 0
180:     } catch {
181:       return false
182:     }
183:   }
184: }
185: 
186: export const healthCheckService = HealthCheckService.getInstance()
</file>

<file path="src/lib/i18n.ts">
 1: export type Locale = 'en' | 'fr'
 2: 
 3: const en = {
 4:   app: {
 5:     title: 'Career Lever AI',
 6:   },
 7:   jobs: {
 8:     pageTitle: 'Jobs',
 9:     importUrl: 'Import job from URL',
10:     recommendations: 'Recommendations',
11:   }
12: }
13: 
14: const fr = {
15:   app: {
16:     title: 'Career Lever AI',
17:   },
18:   jobs: {
19:     pageTitle: 'Emplois',
20:     importUrl: "Importer l'offre via URL",
21:     recommendations: 'Recommandations',
22:   }
23: }
24: 
25: export const dictionaries: Record<Locale, any> = { en, fr }
26: 
27: export function t(locale: Locale, path: string, fallback?: string): string {
28:   const parts = path.split('.')
29:   let cur: any = dictionaries[locale] || dictionaries.en
30:   for (const p of parts) {
31:     cur = cur?.[p]
32:     if (cur === undefined || cur === null) return fallback ?? path
33:   }
34:   return typeof cur === 'string' ? cur : fallback ?? path
35: }
</file>

<file path="src/lib/interview-prep-generator.ts">
  1: /**
  2:  * Interview Preparation Generator
  3:  * 
  4:  * Generates company-specific interview questions and prep materials
  5:  */
  6: 
  7: import { PerplexityService } from './perplexity-service'
  8: 
  9: export interface InterviewPrep {
 10:   commonQuestions: {
 11:     question: string
 12:     category: 'behavioral' | 'technical' | 'situational' | 'company-specific'
 13:     difficulty: 'easy' | 'medium' | 'hard'
 14:     sampleAnswer: string
 15:     tips: string[]
 16:   }[]
 17:   technicalTopics: string[]
 18:   companySpecificQuestions: string[]
 19:   cultureFitQuestions: string[]
 20:   questionsToAsk: string[]
 21:   preparationChecklist: string[]
 22:   redFlags: string[]
 23: }
 24: 
 25: export class InterviewPrepGenerator {
 26:   /**
 27:    * Generate comprehensive interview prep
 28:    */
 29:   static async generateInterviewPrep(
 30:     jobTitle: string,
 31:     company: string,
 32:     jobDescription: string
 33:   ): Promise<InterviewPrep> {
 34:     try {
 35:       const client = new PerplexityService()
 36:       
 37:       const prompt = `Generate comprehensive interview preparation for this position:
 38: 
 39: Job Title: ${jobTitle}
 40: Company: ${company}
 41: Job Description: ${jobDescription.slice(0, 2000)}
 42: 
 43: Search these sources:
 44: 1. Glassdoor interview reviews for ${company}
 45: 2. Common interview questions for ${jobTitle}
 46: 3. ${company} culture and values
 47: 4. Technical requirements from job description
 48: 
 49: Return ONLY valid JSON:
 50: {
 51:   "commonQuestions": [
 52:     {
 53:       "question": "Tell me about a time you handled a difficult situation",
 54:       "category": "behavioral",
 55:       "difficulty": "medium",
 56:       "sampleAnswer": "Use STAR method: Situation, Task, Action, Result...",
 57:       "tips": ["Be specific", "Quantify results", "Show leadership"]
 58:     }
 59:   ],
 60:   "technicalTopics": ["React", "Node.js", "AWS", "System Design"],
 61:   "companySpecificQuestions": [
 62:     "Why do you want to work at ${company}?",
 63:     "What do you know about ${company}'s products?"
 64:   ],
 65:   "cultureFitQuestions": [
 66:     "How do you handle remote work?",
 67:     "Describe your ideal team environment"
 68:   ],
 69:   "questionsToAsk": [
 70:     "What does success look like in this role?",
 71:     "What are the team's biggest challenges?",
 72:     "What's the onboarding process like?"
 73:   ],
 74:   "preparationChecklist": [
 75:     "Research ${company}'s recent news",
 76:     "Review job description thoroughly",
 77:     "Prepare STAR stories",
 78:     "Test video call setup"
 79:   ],
 80:   "redFlags": [
 81:     "High turnover rate",
 82:     "Unclear job responsibilities",
 83:     "Lack of growth opportunities"
 84:   ]
 85: }
 86: 
 87: REQUIREMENTS:
 88: - Include 10-15 common interview questions with sample answers
 89: - Extract technical topics from job description
 90: - Research ${company}-specific questions from Glassdoor
 91: - Provide actionable preparation tips
 92: - Include red flags to watch for`
 93: 
 94:       const response = await client.makeRequest(
 95:         'You are an interview preparation coach. Generate comprehensive, company-specific interview prep materials.',
 96:         prompt,
 97:         {
 98:           temperature: 0.3,
 99:           maxTokens: 4000,
100:           model: 'sonar-pro'
101:         }
102:       )
103: 
104:       // Parse response
105:       let cleanedContent = response.content.trim()
106:       cleanedContent = cleanedContent.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '')
107:       
108:       const jsonMatch = cleanedContent.match(/\{[\s\S]*\}/)
109:       if (jsonMatch) {
110:         cleanedContent = jsonMatch[0]
111:       }
112: 
113:       const parsed = JSON.parse(cleanedContent) as InterviewPrep
114: 
115:       return parsed
116:     } catch (error) {
117:       console.error('[INTERVIEW_PREP] Failed to generate prep:', error)
118:       
119:       // Return fallback
120:       return {
121:         commonQuestions: [
122:           {
123:             question: 'Tell me about yourself',
124:             category: 'behavioral',
125:             difficulty: 'easy',
126:             sampleAnswer: 'Start with your current role, highlight relevant experience, and explain why you\'re interested in this position.',
127:             tips: ['Keep it under 2 minutes', 'Focus on relevant experience', 'End with why you want this job']
128:           },
129:           {
130:             question: 'Why do you want to work here?',
131:             category: 'company-specific',
132:             difficulty: 'medium',
133:             sampleAnswer: 'Research the company and mention specific products, values, or initiatives that align with your goals.',
134:             tips: ['Show you\'ve done research', 'Connect to your career goals', 'Be genuine']
135:           }
136:         ],
137:         technicalTopics: [],
138:         companySpecificQuestions: [
139:           `Why ${company}?`,
140:           `What do you know about ${company}'s products?`
141:         ],
142:         cultureFitQuestions: [
143:           'How do you handle feedback?',
144:           'Describe your ideal work environment'
145:         ],
146:         questionsToAsk: [
147:           'What does success look like in the first 90 days?',
148:           'What are the team\'s biggest challenges?',
149:           'What\'s the career growth path?'
150:         ],
151:         preparationChecklist: [
152:           'Research company thoroughly',
153:           'Review job description',
154:           'Prepare 5-7 STAR stories',
155:           'Practice common questions',
156:           'Prepare questions to ask',
157:           'Test video call setup'
158:         ],
159:         redFlags: [
160:           'Vague job description',
161:           'High turnover mentioned',
162:           'Lack of clear expectations'
163:         ]
164:       }
165:     }
166:   }
167: 
168:   /**
169:    * Generate STAR method answer template
170:    */
171:   static generateSTARTemplate(situation: string): string {
172:     return `**Situation:** ${situation}
173: 
174: **Task:** What was your responsibility or goal?
175: 
176: **Action:** What specific steps did you take?
177: - Step 1:
178: - Step 2:
179: - Step 3:
180: 
181: **Result:** What was the outcome? (Include metrics if possible)
182: - Quantifiable result:
183: - Impact on team/company:
184: - What you learned:`
185:   }
186: 
187:   /**
188:    * Get behavioral question categories
189:    */
190:   static getBehavioralCategories(): string[] {
191:     return [
192:       'Leadership & Management',
193:       'Problem Solving',
194:       'Teamwork & Collaboration',
195:       'Conflict Resolution',
196:       'Time Management',
197:       'Adaptability & Change',
198:       'Communication Skills',
199:       'Decision Making',
200:       'Customer Focus',
201:       'Innovation & Creativity'
202:     ]
203:   }
204: }
</file>

<file path="src/lib/job-board-service.ts">
  1: import JobBoardIntegration from '@/models/JobBoardIntegration'
  2: import { Types } from 'mongoose'
  3: 
  4: // Job board configuration with API details
  5: export interface JobBoardConfig {
  6:   name: string
  7:   displayName: string
  8:   baseUrl: string
  9:   authUrl: string
 10:   tokenUrl: string
 11:   clientId: string
 12:   clientSecret: string
 13:   scopes: string[]
 14:   endpoints: {
 15:     jobs: string
 16:     applications: string
 17:     profile: string
 18:   }
 19:   rateLimits: {
 20:     requestsPerHour: number
 21:     requestsPerDay: number
 22:   }
 23:   features: {
 24:     jobPosting: boolean
 25:     applicationTracking: boolean
 26:     resumeUpload: boolean
 27:     automatedApply: boolean
 28:   }
 29: }
 30: 
 31: // Job board configurations (in production, these would come from environment variables)
 32: const JOB_BOARD_CONFIGS: Record<string, JobBoardConfig> = {
 33:   linkedin: {
 34:     name: 'linkedin',
 35:     displayName: 'LinkedIn',
 36:     baseUrl: 'https://api.linkedin.com/v2',
 37:     authUrl: 'https://www.linkedin.com/oauth/v2/authorization',
 38:     tokenUrl: 'https://www.linkedin.com/oauth/v2/accessToken',
 39:     clientId: process.env.LINKEDIN_CLIENT_ID || '',
 40:     clientSecret: process.env.LINKEDIN_CLIENT_SECRET || '',
 41:     scopes: ['r_liteprofile', 'r_emailaddress', 'w_member_social', 'rw_company_admin'],
 42:     endpoints: {
 43:       jobs: '/jobs',
 44:       applications: '/people/~/applications',
 45:       profile: '/people/~'
 46:     },
 47:     rateLimits: {
 48:       requestsPerHour: 100,
 49:       requestsPerDay: 1000
 50:     },
 51:     features: {
 52:       jobPosting: true,
 53:       applicationTracking: true,
 54:       resumeUpload: true,
 55:       automatedApply: false // Requires human verification
 56:     }
 57:   },
 58:   ziprecruiter: {
 59:     name: 'ziprecruiter',
 60:     displayName: 'ZipRecruiter',
 61:     baseUrl: 'https://api.ziprecruiter.com',
 62:     authUrl: 'https://api.ziprecruiter.com/oauth/authorize',
 63:     tokenUrl: 'https://api.ziprecruiter.com/oauth/token',
 64:     clientId: process.env.ZIPRECRUITER_CLIENT_ID || '',
 65:     clientSecret: process.env.ZIPRECRUITER_CLIENT_SECRET || '',
 66:     scopes: ['read', 'write'],
 67:     endpoints: {
 68:       jobs: '/jobs',
 69:       applications: '/applications',
 70:       profile: '/profile'
 71:     },
 72:     rateLimits: {
 73:       requestsPerHour: 1000,
 74:       requestsPerDay: 10000
 75:     },
 76:     features: {
 77:       jobPosting: true,
 78:       applicationTracking: true,
 79:       resumeUpload: true,
 80:       automatedApply: true
 81:     }
 82:   },
 83:   monster: {
 84:     name: 'monster',
 85:     displayName: 'Monster',
 86:     baseUrl: 'https://api.monster.com/v2',
 87:     authUrl: 'https://api.monster.com/oauth/authorize',
 88:     tokenUrl: 'https://api.monster.com/oauth/token',
 89:     clientId: process.env.MONSTER_CLIENT_ID || '',
 90:     clientSecret: process.env.MONSTER_CLIENT_SECRET || '',
 91:     scopes: ['read', 'write', 'apply'],
 92:     endpoints: {
 93:       jobs: '/jobs',
 94:       applications: '/applications',
 95:       profile: '/profile'
 96:     },
 97:     rateLimits: {
 98:       requestsPerHour: 500,
 99:       requestsPerDay: 5000
100:     },
101:     features: {
102:       jobPosting: true,
103:       applicationTracking: true,
104:       resumeUpload: true,
105:       automatedApply: true
106:     }
107:   },
108:   careerbuilder: {
109:     name: 'careerbuilder',
110:     displayName: 'CareerBuilder',
111:     baseUrl: 'https://api.careerbuilder.com/v2',
112:     authUrl: 'https://api.careerbuilder.com/oauth/authorize',
113:     tokenUrl: 'https://api.careerbuilder.com/oauth/token',
114:     clientId: process.env.CAREERBUILDER_CLIENT_ID || '',
115:     clientSecret: process.env.CAREERBUILDER_CLIENT_SECRET || '',
116:     scopes: ['read', 'write', 'apply'],
117:     endpoints: {
118:       jobs: '/jobs',
119:       applications: '/applications',
120:       profile: '/profile'
121:     },
122:     rateLimits: {
123:       requestsPerHour: 1000,
124:       requestsPerDay: 10000
125:     },
126:     features: {
127:       jobPosting: true,
128:       applicationTracking: true,
129:       resumeUpload: true,
130:       automatedApply: true
131:     }
132:   },
133:   indeed: {
134:     name: 'indeed',
135:     displayName: 'Indeed',
136:     baseUrl: 'https://api.indeed.com/v2',
137:     authUrl: 'https://secure.indeed.com/oauth/v2/authorize',
138:     tokenUrl: 'https://secure.indeed.com/oauth/v2/token',
139:     clientId: process.env.INDEED_CLIENT_ID || '',
140:     clientSecret: process.env.INDEED_CLIENT_SECRET || '',
141:     scopes: ['read', 'write', 'apply'],
142:     endpoints: {
143:       jobs: '/jobs',
144:       applications: '/applications',
145:       profile: '/profile'
146:     },
147:     rateLimits: {
148:       requestsPerHour: 100,
149:       requestsPerDay: 1000
150:     },
151:     features: {
152:       jobPosting: false, // Indeed doesn't allow direct job posting via API
153:       applicationTracking: true,
154:       resumeUpload: true,
155:       automatedApply: false // Manual application required
156:     }
157:   }
158: }
159: 
160: export class JobBoardService {
161:   private config: JobBoardConfig
162: 
163:   constructor(boardName: string) {
164:     this.config = JOB_BOARD_CONFIGS[boardName]
165:     if (!this.config) {
166:       throw new Error(`Unsupported job board: ${boardName}`)
167:     }
168:   }
169: 
170:   // Generate OAuth authorization URL
171:   generateAuthUrl(state: string, redirectUri: string): string {
172:     const params = new URLSearchParams({
173:       response_type: 'code',
174:       client_id: this.config.clientId,
175:       redirect_uri: redirectUri,
176:       scope: this.config.scopes.join(' '),
177:       state: state
178:     })
179: 
180:     return `${this.config.authUrl}?${params.toString()}`
181:   }
182: 
183:   // Exchange authorization code for access token
184:   async exchangeCodeForToken(code: string, redirectUri: string): Promise<any> {
185:     const response = await fetch(this.config.tokenUrl, {
186:       method: 'POST',
187:       headers: {
188:         'Content-Type': 'application/x-www-form-urlencoded',
189:         'Authorization': `Basic ${Buffer.from(`${this.config.clientId}:${this.config.clientSecret}`).toString('base64')}`
190:       },
191:       body: new URLSearchParams({
192:         grant_type: 'authorization_code',
193:         code: code,
194:         redirect_uri: redirectUri
195:       })
196:     })
197: 
198:     if (!response.ok) {
199:       throw new Error(`Token exchange failed: ${response.statusText}`)
200:     }
201: 
202:     return response.json()
203:   }
204: 
205:   // Refresh access token
206:   async refreshToken(refreshToken: string): Promise<any> {
207:     const response = await fetch(this.config.tokenUrl, {
208:       method: 'POST',
209:       headers: {
210:         'Content-Type': 'application/x-www-form-urlencoded',
211:         'Authorization': `Basic ${Buffer.from(`${this.config.clientId}:${this.config.clientSecret}`).toString('base64')}`
212:       },
213:       body: new URLSearchParams({
214:         grant_type: 'refresh_token',
215:         refresh_token: refreshToken
216:       })
217:     })
218: 
219:     if (!response.ok) {
220:       throw new Error(`Token refresh failed: ${response.statusText}`)
221:     }
222: 
223:     return response.json()
224:   }
225: 
226:   // Make authenticated API request
227:   async makeAuthenticatedRequest(
228:     endpoint: string,
229:     method: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'GET',
230:     accessToken: string,
231:     data?: any
232:   ): Promise<any> {
233:     const url = `${this.config.baseUrl}${endpoint}`
234: 
235:     const headers: Record<string, string> = {
236:       'Authorization': `Bearer ${accessToken}`,
237:       'Content-Type': 'application/json'
238:     }
239: 
240:     const config: RequestInit = {
241:       method,
242:       headers
243:     }
244: 
245:     if (data && (method === 'POST' || method === 'PUT')) {
246:       config.body = JSON.stringify(data)
247:     }
248: 
249:     const response = await fetch(url, config)
250: 
251:     if (!response.ok) {
252:       if (response.status === 401) {
253:         throw new Error('TOKEN_EXPIRED')
254:       }
255:       throw new Error(`API request failed: ${response.statusText}`)
256:     }
257: 
258:     return response.json()
259:   }
260: 
261:   // Get user profile from job board
262:   async getUserProfile(accessToken: string): Promise<any> {
263:     return this.makeAuthenticatedRequest(this.config.endpoints.profile, 'GET', accessToken)
264:   }
265: 
266:   // Post a job to the board
267:   async postJob(accessToken: string, jobData: any): Promise<any> {
268:     if (!this.config.features.jobPosting) {
269:       throw new Error(`Job posting not supported for ${this.config.displayName}`)
270:     }
271: 
272:     return this.makeAuthenticatedRequest(this.config.endpoints.jobs, 'POST', accessToken, jobData)
273:   }
274: 
275:   // Apply to a job
276:   async applyToJob(accessToken: string, jobId: string, applicationData: any): Promise<any> {
277:     if (!this.config.features.automatedApply) {
278:       throw new Error(`Automated application not supported for ${this.config.displayName}`)
279:     }
280: 
281:     const endpoint = `${this.config.endpoints.applications}/${jobId}`
282:     return this.makeAuthenticatedRequest(endpoint, 'POST', accessToken, applicationData)
283:   }
284: 
285:   // Get application status
286:   async getApplicationStatus(accessToken: string, applicationId: string): Promise<any> {
287:     if (!this.config.features.applicationTracking) {
288:       throw new Error(`Application tracking not supported for ${this.config.displayName}`)
289:     }
290: 
291:     const endpoint = `${this.config.endpoints.applications}/${applicationId}`
292:     return this.makeAuthenticatedRequest(endpoint, 'GET', accessToken)
293:   }
294: 
295:   // Check rate limits
296:   async checkRateLimit(integration: any): Promise<boolean> {
297:     const now = new Date()
298:     const lastRequest = integration.metadata?.rateLimits?.lastRequestAt
299: 
300:     if (!lastRequest) return true
301: 
302:     const timeSinceLastRequest = now.getTime() - new Date(lastRequest).getTime()
303:     const requestsPerHour = integration.metadata?.rateLimits?.requestsPerHour || this.config.rateLimits.requestsPerHour
304: 
305:     // Simple rate limiting check (could be more sophisticated)
306:     return timeSinceLastRequest > (3600000 / requestsPerHour) // milliseconds per request
307:   }
308: 
309:   // Update rate limit tracking
310:   async updateRateLimit(integration: any): Promise<void> {
311:     await JobBoardIntegration.findByIdAndUpdate(integration._id, {
312:       'metadata.rateLimits.lastRequestAt': new Date()
313:     })
314:   }
315: 
316:   // Validate configuration
317:   validateConfig(): { isValid: boolean; errors: string[] } {
318:     const errors: string[] = []
319: 
320:     if (!this.config.clientId) {
321:       errors.push(`${this.config.displayName} Client ID not configured`)
322:     }
323: 
324:     if (!this.config.clientSecret) {
325:       errors.push(`${this.config.displayName} Client Secret not configured`)
326:     }
327: 
328:     return {
329:       isValid: errors.length === 0,
330:       errors
331:     }
332:   }
333: 
334:   getConfig(): JobBoardConfig {
335:     return this.config
336:   }
337: }
338: 
339: // Factory function to create job board service instances
340: export function createJobBoardService(boardName: string): JobBoardService {
341:   return new JobBoardService(boardName)
342: }
343: 
344: // Get all supported job boards
345: export function getSupportedJobBoards(): Array<{ id: string; name: string; features: JobBoardConfig['features'] }> {
346:   return Object.values(JOB_BOARD_CONFIGS).map(config => ({
347:     id: config.name,
348:     name: config.displayName,
349:     features: config.features
350:   }))
351: }
352: 
353: // Validate all job board configurations
354: export function validateAllConfigurations(): Record<string, { isValid: boolean; errors: string[] }> {
355:   const results: Record<string, { isValid: boolean; errors: string[] }> = {}
356: 
357:   for (const [boardName, config] of Object.entries(JOB_BOARD_CONFIGS)) {
358:     const service = new JobBoardService(boardName)
359:     results[boardName] = service.validateConfig()
360:   }
361: 
362:   return results
363: }
</file>

<file path="src/lib/job-deduplication.ts">
 1: /**
 2:  * Job Deduplication Utilities
 3:  * Fixes ISSUE #1: Infinite loop with 9x duplicate saves
 4:  */
 5: 
 6: export interface Job {
 7:   id?: string
 8:   title: string
 9:   company: string
10:   location: string
11:   url?: string
12:   salary?: string
13:   skills?: string[]
14:   skillMatchPercent?: number
15:   aiScore?: number
16:   [key: string]: unknown
17: }
18: 
19: /**
20:  * Create unique hash for job based on company + title
21:  */
22: function createJobHash(job: Job): string {
23:   const company = job.company.toLowerCase().trim()
24:   const title = job.title.toLowerCase().trim()
25:   return `${company}::${title}`
26: }
27: 
28: /**
29:  * Deduplicate jobs array
30:  * Returns only unique jobs based on company + title
31:  */
32: export function deduplicateJobs(jobs: Job[]): Job[] {
33:   const seen = new Set<string>()
34:   const unique: Job[] = []
35:   let duplicateCount = 0
36: 
37:   for (const job of jobs) {
38:     const hash = createJobHash(job)
39:     
40:     if (seen.has(hash)) {
41:       duplicateCount++
42:       console.log(`[DEDUPE] ❌ Removing duplicate: ${job.title} @ ${job.company}`)
43:       continue
44:     }
45:     
46:     seen.add(hash)
47:     unique.push(job)
48:   }
49: 
50:   console.log(`[DEDUPE] ✅ Removed ${duplicateCount} duplicates, kept ${unique.length} unique jobs`)
51:   
52:   return unique
53: }
54: 
55: /**
56:  * Check if job already exists in array
57:  */
58: export function isDuplicateJob(job: Job, existingJobs: Job[]): boolean {
59:   const hash = createJobHash(job)
60:   return existingJobs.some(existing => createJobHash(existing) === hash)
61: }
62: 
63: /**
64:  * Merge duplicate jobs, keeping the one with more data
65:  */
66: export function mergeJobs(jobs: Job[]): Job[] {
67:   const jobMap = new Map<string, Job>()
68: 
69:   for (const job of jobs) {
70:     const hash = createJobHash(job)
71:     const existing = jobMap.get(hash)
72: 
73:     if (!existing) {
74:       jobMap.set(hash, job)
75:       continue
76:     }
77: 
78:     // Keep job with more fields populated
79:     const existingFields = Object.values(existing).filter(v => v != null).length
80:     const newFields = Object.values(job).filter(v => v != null).length
81: 
82:     if (newFields > existingFields) {
83:       console.log(`[DEDUPE] 🔄 Replacing with more complete version: ${job.title}`)
84:       jobMap.set(hash, job)
85:     }
86:   }
87: 
88:   return Array.from(jobMap.values())
89: }
</file>

<file path="src/lib/job-description-scraper.ts">
  1: /**
  2:  * Job Description Scraper
  3:  * 
  4:  * Fetches full job descriptions from job posting URLs
  5:  */
  6: 
  7: import { PerplexityService } from './perplexity-service'
  8: 
  9: export interface ScrapedJobDescription {
 10:   fullDescription: string
 11:   requirements: string[]
 12:   responsibilities: string[]
 13:   qualifications: string[]
 14:   benefits: string[]
 15:   salary: string | null
 16:   companyInfo: string
 17:   applicationInstructions: string
 18:   confidence: number
 19: }
 20: 
 21: export class JobDescriptionScraper {
 22:   /**
 23:    * Scrape full job description from URL using Perplexity
 24:    */
 25:   static async scrapeJobDescription(jobUrl: string, jobTitle: string, company: string): Promise<ScrapedJobDescription> {
 26:     try {
 27:       const client = new PerplexityService()
 28:       
 29:       const prompt = `Visit this job posting URL and extract the COMPLETE job description: ${jobUrl}
 30: 
 31: Job Title: ${jobTitle}
 32: Company: ${company}
 33: 
 34: Extract and return ONLY valid JSON with these fields:
 35: 
 36: {
 37:   "fullDescription": "Complete job description text (minimum 500 words)",
 38:   "requirements": ["Required skill 1", "Required skill 2", ...],
 39:   "responsibilities": ["Responsibility 1", "Responsibility 2", ...],
 40:   "qualifications": ["Qualification 1", "Qualification 2", ...],
 41:   "benefits": ["Benefit 1", "Benefit 2", ...],
 42:   "salary": "Salary range if mentioned, otherwise null",
 43:   "companyInfo": "Company description from posting",
 44:   "applicationInstructions": "How to apply instructions",
 45:   "confidence": 0.95
 46: }
 47: 
 48: CRITICAL REQUIREMENTS:
 49: 1. Visit the actual URL and extract ALL text from the job posting
 50: 2. Include the COMPLETE job description (not a summary)
 51: 3. Extract all requirements, responsibilities, qualifications
 52: 4. Find salary information if present
 53: 5. Get application instructions
 54: 6. Return ONLY the JSON object, no explanatory text`
 55: 
 56:       const response = await client.makeRequest(
 57:         'You are a job posting scraper. Extract complete job descriptions from URLs and return structured JSON.',
 58:         prompt,
 59:         {
 60:           temperature: 0.1,
 61:           maxTokens: 4000,
 62:           model: 'sonar-pro'
 63:         }
 64:       )
 65: 
 66:       // Parse response
 67:       let cleanedContent = response.content.trim()
 68:       cleanedContent = cleanedContent.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '')
 69:       
 70:       const jsonMatch = cleanedContent.match(/\{[\s\S]*\}/)
 71:       if (jsonMatch) {
 72:         cleanedContent = jsonMatch[0]
 73:       }
 74: 
 75:       const parsed = JSON.parse(cleanedContent) as ScrapedJobDescription
 76: 
 77:       // Validate
 78:       if (!parsed.fullDescription || parsed.fullDescription.length < 100) {
 79:         throw new Error('Job description too short or missing')
 80:       }
 81: 
 82:       return parsed
 83:     } catch (error) {
 84:       console.error('[JOB_SCRAPER] Failed to scrape job description:', error)
 85:       
 86:       // Return fallback
 87:       return {
 88:         fullDescription: 'Failed to scrape full description. Please visit the job posting URL directly.',
 89:         requirements: [],
 90:         responsibilities: [],
 91:         qualifications: [],
 92:         benefits: [],
 93:         salary: null,
 94:         companyInfo: '',
 95:         applicationInstructions: 'Visit the job posting URL to apply',
 96:         confidence: 0
 97:       }
 98:     }
 99:   }
100: 
101:   /**
102:    * Scrape job description and cache it
103:    */
104:   static async scrapeAndCache(jobUrl: string, jobTitle: string, company: string): Promise<ScrapedJobDescription> {
105:     const cacheKey = `job_desc:${jobUrl}`
106:     
107:     // Check cache
108:     const cached = this.getFromCache(cacheKey)
109:     if (cached) {
110:       return cached
111:     }
112: 
113:     // Scrape
114:     const scraped = await this.scrapeJobDescription(jobUrl, jobTitle, company)
115:     
116:     // Cache for 7 days
117:     this.saveToCache(cacheKey, scraped, 7 * 24 * 60 * 60 * 1000)
118:     
119:     return scraped
120:   }
121: 
122:   /**
123:    * Simple cache implementation
124:    */
125:   private static cache = new Map<string, { data: ScrapedJobDescription; expiresAt: number }>()
126: 
127:   private static getFromCache(key: string): ScrapedJobDescription | null {
128:     const entry = this.cache.get(key)
129:     if (!entry) return null
130:     
131:     if (Date.now() > entry.expiresAt) {
132:       this.cache.delete(key)
133:       return null
134:     }
135:     
136:     return entry.data
137:   }
138: 
139:   private static saveToCache(key: string, data: ScrapedJobDescription, ttl: number): void {
140:     this.cache.set(key, {
141:       data,
142:       expiresAt: Date.now() + ttl
143:     })
144:   }
145: }
</file>

<file path="src/lib/job-scraper.ts">
 1: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 2: 
 3: export async function scrapeJobBankCanada(keywords: string, location: string) {
 4:   try {
 5:     const q = `site:jobbank.gc.ca ${keywords} ${location}`
 6:     return await PerplexityIntelligenceService.jobQuickSearch(q, ['jobbank.gc.ca'], 15, 'week')
 7:   } catch (error) {
 8:     console.error('Job Bank scraping failed:', error)
 9:     return []
10:   }
11: }
12: 
13: export async function scrapeIndeedCanada(keywords: string, location: string) {
14:   try {
15:     const q = `site:ca.indeed.com ${keywords} ${location}`
16:     return await PerplexityIntelligenceService.jobQuickSearch(q, ['ca.indeed.com'], 15, 'week')
17:   } catch (error) {
18:     console.error('Indeed scraping failed:', error)
19:     return []
20:   }
21: }
</file>

<file path="src/lib/keyword-extraction.ts">
  1: /**
  2:  * Enhanced Keyword Extraction with Multi-Factor Weighting
  3:  * Extracts 50+ keywords and applies recency, tenure, industry, and seniority multipliers
  4:  */
  5: 
  6: export interface WeightedKeyword {
  7:   keyword: string
  8:   weight: number
  9:   sources: string[] // Which roles it came from
 10:   recency: number // How recent (0.5x - 2x)
 11:   tenure: number // Years in roles using this skill
 12: }
 13: 
 14: export interface ResumeRole {
 15:   title: string
 16:   company: string
 17:   startDate: Date
 18:   endDate: Date | null
 19:   duration: number // years
 20:   description: string
 21:   industry: string
 22:   isCurrent: boolean
 23: }
 24: 
 25: export interface KeywordExtractionResult {
 26:   keywords: WeightedKeyword[]
 27:   topKeywords: string[] // Top 18 for search
 28:   allKeywords: string[] // All 50+ for reference
 29:   metadata: {
 30:     totalKeywords: number
 31:     primaryIndustry: string
 32:     experienceYears: number
 33:     dominantSkills: string[]
 34:     rolesAnalyzed: number
 35:   }
 36: }
 37: 
 38: /**
 39:  * Extract and weight keywords from resume
 40:  */
 41: export async function extractWeightedKeywords(
 42:   resumeText: string
 43: ): Promise<KeywordExtractionResult> {
 44:   console.log('[KEYWORD_EXTRACTION] Starting extraction, resume length:', resumeText.length)
 45:   
 46:   // 1. Parse resume structure to identify roles and tenure
 47:   const resumeStructure = parseResumeStructure(resumeText)
 48:   
 49:   console.log('[KEYWORD_EXTRACTION] Resume structure:', {
 50:     roles: resumeStructure.roles.length,
 51:     totalYears: resumeStructure.totalExperienceYears,
 52:     primaryIndustry: resumeStructure.primaryIndustry
 53:   })
 54:   
 55:   // 2. Extract raw keywords (simple frequency-based for now, can enhance with AI later)
 56:   const rawKeywords = extractRawKeywords(resumeText, resumeStructure)
 57:   
 58:   console.log('[KEYWORD_EXTRACTION] Raw keywords extracted:', rawKeywords.length)
 59:   
 60:   // 3. Weight keywords by multiple factors
 61:   const weightedKeywords = rawKeywords.map((keyword) => {
 62:     // Base weight from frequency
 63:     const baseWeight = 1.0
 64:     
 65:     // Recency multiplier (most recent role = 2x, oldest = 0.5x)
 66:     const recencyMultiplier = calculateRecencyMultiplier(keyword, resumeStructure)
 67:     
 68:     // Tenure multiplier (3+ years = 1.5x, < 1 year = 0.8x)
 69:     const tenureMultiplier = calculateTenureMultiplier(keyword, resumeStructure)
 70:     
 71:     // Industry multiplier (primary industry = 1.25x)
 72:     const industryMultiplier = calculateIndustryMultiplier(keyword, resumeStructure)
 73:     
 74:     // Role seniority multiplier (senior/lead roles = 1.2x)
 75:     const seniorityMultiplier = calculateSeniorityMultiplier(keyword, resumeStructure)
 76:     
 77:     // Final weight
 78:     const weight = baseWeight * recencyMultiplier * tenureMultiplier * industryMultiplier * seniorityMultiplier
 79:     
 80:     return {
 81:       keyword,
 82:       weight,
 83:       sources: findKeywordSources(keyword, resumeStructure),
 84:       recency: recencyMultiplier,
 85:       tenure: calculateKeywordTenure(keyword, resumeStructure)
 86:     }
 87:   })
 88:   
 89:   // 4. Sort by weight (descending)
 90:   weightedKeywords.sort((a, b) => b.weight - a.weight)
 91:   
 92:   console.log('[KEYWORD_EXTRACTION] Top 10 weighted keywords:')
 93:   weightedKeywords.slice(0, 10).forEach((kw, i) => {
 94:     console.log(`  ${i + 1}. ${kw.keyword} (weight: ${kw.weight.toFixed(2)}, recency: ${kw.recency.toFixed(2)}x)`)
 95:   })
 96:   
 97:   // 5. Select top 18 for search
 98:   const topKeywords = weightedKeywords.slice(0, 18).map(kw => kw.keyword)
 99:   
100:   // 6. Prepare metadata
101:   const metadata = {
102:     totalKeywords: weightedKeywords.length,
103:     primaryIndustry: resumeStructure.primaryIndustry,
104:     experienceYears: resumeStructure.totalExperienceYears,
105:     dominantSkills: weightedKeywords.slice(0, 5).map(kw => kw.keyword),
106:     rolesAnalyzed: resumeStructure.roles.length
107:   }
108:   
109:   return {
110:     keywords: weightedKeywords,
111:     topKeywords,
112:     allKeywords: weightedKeywords.map(kw => kw.keyword),
113:     metadata
114:   }
115: }
116: 
117: /**
118:  * Parse resume to identify roles, tenure, industries
119:  */
120: interface ResumeStructure {
121:   roles: ResumeRole[]
122:   totalExperienceYears: number
123:   primaryIndustry: string
124: }
125: 
126: function parseResumeStructure(resumeText: string): ResumeStructure {
127:   const roles: ResumeRole[] = []
128:   
129:   // Common date patterns
130:   const datePatterns = [
131:     /(\w+\s+\d{4})\s*[-–—]\s*(\w+\s+\d{4}|Present|Current)/gi,
132:     /(\d{4})\s*[-–—]\s*(\d{4}|Present|Current)/gi,
133:     /(\d{1,2}\/\d{4})\s*[-–—]\s*(\d{1,2}\/\d{4}|Present|Current)/gi
134:   ]
135:   
136:   // Split by common section headers
137:   const sections = resumeText.split(/(?:EXPERIENCE|WORK HISTORY|EMPLOYMENT|PROFESSIONAL EXPERIENCE)/i)
138:   const experienceSection = sections.length > 1 ? sections[1] : resumeText
139:   
140:   // Extract roles (simple heuristic)
141:   const lines = experienceSection.split('\n')
142:   let currentRole: Partial<ResumeRole> | null = null
143:   
144:   for (let i = 0; i < lines.length; i++) {
145:     const line = lines[i].trim()
146:     if (!line) continue
147:     
148:     // Check if this line contains a date range
149:     let dateMatch: RegExpMatchArray | null = null
150:     for (const pattern of datePatterns) {
151:       dateMatch = line.match(pattern)
152:       if (dateMatch) break
153:     }
154:     
155:     if (dateMatch) {
156:       // This might be a role header
157:       const [fullMatch, startStr, endStr] = dateMatch
158:       const startDate = parseDate(startStr)
159:       const endDate = endStr.match(/Present|Current/i) ? null : parseDate(endStr)
160:       const duration = calculateYearsBetween(startDate, endDate || new Date())
161:       
162:       // Extract title and company from the line
163:       const parts = line.replace(fullMatch, '').split(/[|,]/).map(p => p.trim()).filter(Boolean)
164:       
165:       if (currentRole && currentRole.title) {
166:         roles.push(currentRole as ResumeRole)
167:       }
168:       
169:       currentRole = {
170:         title: parts[0] || line.split(/[|,]/)[0]?.trim() || 'Unknown',
171:         company: parts[1] || 'Unknown',
172:         startDate,
173:         endDate,
174:         duration,
175:         description: '',
176:         industry: 'General',
177:         isCurrent: !endDate
178:       }
179:     } else if (currentRole) {
180:       // Add to current role description
181:       currentRole.description = (currentRole.description || '') + ' ' + line
182:     }
183:   }
184:   
185:   // Add last role
186:   if (currentRole && currentRole.title) {
187:     roles.push(currentRole as ResumeRole)
188:   }
189:   
190:   // Infer industries
191:   roles.forEach(role => {
192:     role.industry = inferIndustry(role.company, role.description)
193:   })
194:   
195:   // Calculate total experience
196:   const totalExperienceYears = roles.reduce((sum, role) => sum + role.duration, 0)
197:   
198:   // Identify primary industry (most time spent)
199:   const industryMap = new Map<string, number>()
200:   roles.forEach(role => {
201:     const current = industryMap.get(role.industry) || 0
202:     industryMap.set(role.industry, current + role.duration)
203:   })
204:   
205:   const primaryIndustry = Array.from(industryMap.entries())
206:     .sort((a, b) => b[1] - a[1])
207:     .map(([industry]) => industry)[0] || 'General'
208:   
209:   return {
210:     roles,
211:     totalExperienceYears,
212:     primaryIndustry
213:   }
214: }
215: 
216: /**
217:  * Extract raw keywords from resume text
218:  */
219: function extractRawKeywords(resumeText: string, structure: ResumeStructure): string[] {
220:   const keywords = new Set<string>()
221:   
222:   // Common skill keywords
223:   const skillPatterns = [
224:     /\b(Business Development|Sales|Marketing|Finance|Accounting|Engineering|Software|Development|Management|Leadership|Project Management|Operations|Strategy|Analytics|Data|CRM|ERP|SQL|Python|JavaScript|React|Node|AWS|Azure|Cloud|DevOps|Agile|Scrum|Lean|Six Sigma|Quality|Compliance|Risk|Audit|Legal|HR|Recruiting|Training|Customer Service|Support|Technical|Communication|Negotiation|Problem Solving|Team Building|Coaching|Mentoring|Planning|Budgeting|Forecasting|Reporting|Analysis|Research|Design|Architecture|Infrastructure|Security|Testing|QA|Documentation|Presentation|Public Speaking|Writing|Editing|Translation|Multilingual|Bilingual)\b/gi
225:   ]
226:   
227:   skillPatterns.forEach(pattern => {
228:     const matches = resumeText.matchAll(pattern)
229:     for (const match of matches) {
230:       keywords.add(match[1])
231:     }
232:   })
233:   
234:   // Extract from role titles
235:   structure.roles.forEach((role: ResumeRole) => {
236:     const titleWords = role.title.split(/\s+/)
237:     titleWords.forEach((word: string) => {
238:       if (word.length > 3 && !/^(the|and|for|with|from)$/i.test(word)) {
239:         keywords.add(word)
240:       }
241:     })
242:   })
243:   
244:   // Industry-specific terms
245:   if (structure.primaryIndustry.includes('Finance') || structure.primaryIndustry.includes('Lending')) {
246:     ['Commercial Lending', 'Loan Approval', 'Credit Analysis', 'Financial Analysis', 'Deal Structuring', 'Risk Assessment'].forEach(kw => keywords.add(kw))
247:   }
248:   
249:   if (structure.primaryIndustry.includes('Tech') || structure.primaryIndustry.includes('Software')) {
250:     ['Software Development', 'API Integration', 'Database Design', 'Cloud Architecture', 'CI/CD', 'Microservices'].forEach(kw => keywords.add(kw))
251:   }
252:   
253:   return Array.from(keywords)
254: }
255: 
256: /**
257:  * Calculate recency multiplier
258:  */
259: function calculateRecencyMultiplier(keyword: string, structure: ResumeStructure): number {
260:   const rolesWithKeyword = structure.roles.filter((role: ResumeRole) => 
261:     role.description.toLowerCase().includes(keyword.toLowerCase()) ||
262:     role.title.toLowerCase().includes(keyword.toLowerCase())
263:   )
264:   
265:   if (rolesWithKeyword.length === 0) return 1.0
266:   
267:   // Get most recent role with this keyword
268:   const mostRecentRole = rolesWithKeyword[0]
269:   const yearsSinceRole = calculateYearsBetween(mostRecentRole.startDate, new Date())
270:   
271:   // Recency decay
272:   if (mostRecentRole.isCurrent || yearsSinceRole < 1) return 2.0
273:   if (yearsSinceRole < 3) return 1.5
274:   if (yearsSinceRole < 5) return 1.0
275:   if (yearsSinceRole < 10) return 0.7
276:   return 0.5
277: }
278: 
279: /**
280:  * Calculate tenure multiplier
281:  */
282: function calculateTenureMultiplier(keyword: string, structure: ResumeStructure): number {
283:   const rolesWithKeyword = structure.roles.filter((role: ResumeRole) => 
284:     role.description.toLowerCase().includes(keyword.toLowerCase()) ||
285:     role.title.toLowerCase().includes(keyword.toLowerCase())
286:   )
287:   
288:   const totalTenure = rolesWithKeyword.reduce((sum: number, role: ResumeRole) => sum + role.duration, 0)
289:   
290:   if (totalTenure >= 5) return 1.5
291:   if (totalTenure >= 3) return 1.3
292:   if (totalTenure >= 1) return 1.0
293:   return 0.8
294: }
295: 
296: /**
297:  * Calculate industry multiplier
298:  */
299: function calculateIndustryMultiplier(keyword: string, structure: ResumeStructure): number {
300:   const primaryIndustry = structure.primaryIndustry
301:   
302:   const primaryRoles = structure.roles.filter((role: ResumeRole) => role.industry === primaryIndustry)
303:   const keywordInPrimary = primaryRoles.some((role: ResumeRole) => 
304:     role.description.toLowerCase().includes(keyword.toLowerCase()) ||
305:     role.title.toLowerCase().includes(keyword.toLowerCase())
306:   )
307:   
308:   return keywordInPrimary ? 1.25 : 1.0
309: }
310: 
311: /**
312:  * Calculate seniority multiplier
313:  */
314: function calculateSeniorityMultiplier(keyword: string, structure: ResumeStructure): number {
315:   const rolesWithKeyword = structure.roles.filter((role: ResumeRole) => 
316:     role.description.toLowerCase().includes(keyword.toLowerCase()) ||
317:     role.title.toLowerCase().includes(keyword.toLowerCase())
318:   )
319:   
320:   const hasSeniorRole = rolesWithKeyword.some((role: ResumeRole) => 
321:     /senior|lead|manager|director|vp|ceo|cto|head|principal|chief/i.test(role.title)
322:   )
323:   
324:   const hasJuniorRole = rolesWithKeyword.some((role: ResumeRole) => 
325:     /junior|entry|associate|intern|assistant/i.test(role.title)
326:   )
327:   
328:   if (hasSeniorRole) return 1.2
329:   if (hasJuniorRole) return 0.9
330:   return 1.0
331: }
332: 
333: // Helper functions
334: function parseDate(dateStr: string): Date {
335:   const monthMap: Record<string, number> = {
336:     jan: 0, january: 0, feb: 1, february: 1, mar: 2, march: 2,
337:     apr: 3, april: 3, may: 4, jun: 5, june: 5, jul: 6, july: 6,
338:     aug: 7, august: 7, sep: 8, september: 8, oct: 9, october: 9,
339:     nov: 10, november: 10, dec: 11, december: 11
340:   }
341:   
342:   // Try "Jan 2020" format
343:   const monthYearMatch = dateStr.match(/(\w+)\s+(\d{4})/i)
344:   if (monthYearMatch) {
345:     const month = monthMap[monthYearMatch[1].toLowerCase()] ?? 0
346:     const year = parseInt(monthYearMatch[2])
347:     return new Date(year, month, 1)
348:   }
349:   
350:   // Try "2020" format
351:   const yearMatch = dateStr.match(/(\d{4})/)
352:   if (yearMatch) {
353:     return new Date(parseInt(yearMatch[1]), 0, 1)
354:   }
355:   
356:   return new Date()
357: }
358: 
359: function calculateYearsBetween(start: Date, end: Date): number {
360:   const diffMs = end.getTime() - start.getTime()
361:   const diffYears = diffMs / (1000 * 60 * 60 * 24 * 365.25)
362:   return Math.max(0, Math.round(diffYears * 10) / 10)
363: }
364: 
365: function inferIndustry(company: string, description: string): string {
366:   const text = (company + ' ' + description).toLowerCase()
367:   
368:   const industryKeywords: Record<string, string[]> = {
369:     'Finance/Commercial Lending': ['loan', 'lending', 'credit', 'finance', 'bank', 'mortgage', 'commercial lending'],
370:     'Technology/Software': ['software', 'code', 'developer', 'engineering', 'tech', 'api', 'cloud', 'saas'],
371:     'Sales/Business Development': ['sales', 'business development', 'account', 'client', 'revenue', 'bd'],
372:     'Automotive': ['car', 'vehicle', 'auto', 'dealership', 'automotive'],
373:     'Construction': ['construction', 'contractor', 'building', 'renovation', 'electrical'],
374:     'Nonprofit': ['nonprofit', 'charity', 'foundation', 'fundraising', 'volunteer']
375:   }
376:   
377:   for (const [industry, keywords] of Object.entries(industryKeywords)) {
378:     if (keywords.some(kw => text.includes(kw))) {
379:       return industry
380:     }
381:   }
382:   
383:   return 'General'
384: }
385: 
386: function findKeywordSources(keyword: string, structure: ResumeStructure): string[] {
387:   return structure.roles
388:     .filter((role: ResumeRole) => 
389:       role.description.toLowerCase().includes(keyword.toLowerCase()) ||
390:       role.title.toLowerCase().includes(keyword.toLowerCase())
391:     )
392:     .map((role: ResumeRole) => role.company)
393: }
394: 
395: function calculateKeywordTenure(keyword: string, structure: ResumeStructure): number {
396:   const rolesWithKeyword = structure.roles.filter((role: ResumeRole) => 
397:     role.description.toLowerCase().includes(keyword.toLowerCase()) ||
398:     role.title.toLowerCase().includes(keyword.toLowerCase())
399:   )
400:   
401:   return rolesWithKeyword.reduce((sum: number, role: ResumeRole) => sum + role.duration, 0)
402: }
</file>

<file path="src/lib/local-resume-parser.ts">
  1: /**
  2:  * LOCAL RESUME PARSER - NO API CALLS NEEDED
  3:  * 
  4:  * Extracts keywords, location, skills, and experience from resume text
  5:  * with industry and education weighting based on work history duration.
  6:  * 
  7:  * This is a FALLBACK when Perplexity API is unavailable or out of credits.
  8:  */
  9: 
 10: interface ParsedResume {
 11:   keywords: string[]
 12:   location: string | null
 13:   locations: string[]
 14:   skills: string[]
 15:   industries: string[]
 16:   experienceYears: number
 17:   educationSkills: string[]
 18:   workHistorySkills: Map<string, number> // skill -> years used
 19: }
 20: 
 21: interface WorkExperience {
 22:   title: string
 23:   company: string
 24:   duration: number // in years
 25:   skills: string[]
 26: }
 27: 
 28: export class LocalResumeParser {
 29:   // Common job titles and roles
 30:   private static readonly JOB_TITLES = [
 31:     'manager', 'director', 'executive', 'specialist', 'coordinator', 'analyst',
 32:     'developer', 'engineer', 'designer', 'architect', 'consultant', 'advisor',
 33:     'representative', 'associate', 'assistant', 'administrator', 'officer',
 34:     'lead', 'senior', 'junior', 'principal', 'chief', 'head', 'supervisor',
 35:     'sales', 'marketing', 'finance', 'operations', 'business development',
 36:     'account manager', 'project manager', 'product manager', 'team lead'
 37:   ]
 38: 
 39:   // Common technical and business skills
 40:   private static readonly SKILLS_DATABASE = [
 41:     // Sales & Business
 42:     'sales', 'business development', 'account management', 'crm', 'salesforce',
 43:     'b2b', 'b2c', 'cold calling', 'lead generation', 'negotiation', 'closing',
 44:     'pipeline management', 'territory management', 'client relations',
 45:     'customer success', 'relationship building', 'prospecting', 'forecasting',
 46:     
 47:     // Technical
 48:     'javascript', 'typescript', 'python', 'java', 'c++', 'c#', 'ruby', 'go',
 49:     'react', 'angular', 'vue', 'node.js', 'express', 'django', 'flask',
 50:     'sql', 'mongodb', 'postgresql', 'mysql', 'redis', 'elasticsearch',
 51:     'aws', 'azure', 'gcp', 'docker', 'kubernetes', 'terraform',
 52:     'git', 'ci/cd', 'agile', 'scrum', 'devops', 'api', 'rest', 'graphql',
 53:     
 54:     // Finance
 55:     'financial analysis', 'accounting', 'budgeting', 'forecasting', 'modeling',
 56:     'quickbooks', 'excel', 'financial reporting', 'audit', 'tax', 'compliance',
 57:     'investment', 'portfolio management', 'risk management',
 58:     
 59:     // Marketing
 60:     'digital marketing', 'seo', 'sem', 'social media', 'content marketing',
 61:     'email marketing', 'ppc', 'google analytics', 'facebook ads', 'linkedin ads',
 62:     'marketing automation', 'hubspot', 'marketo', 'brand management',
 63:     
 64:     // Management & Leadership
 65:     'leadership', 'team management', 'strategic planning', 'process improvement',
 66:     'change management', 'project management', 'pmp', 'agile', 'lean', 'six sigma',
 67:     'coaching', 'mentoring', 'performance management', 'hiring', 'training',
 68:     
 69:     // AI & Data
 70:     'machine learning', 'ai', 'artificial intelligence', 'data science',
 71:     'data analysis', 'big data', 'nlp', 'computer vision', 'deep learning',
 72:     'tensorflow', 'pytorch', 'scikit-learn', 'pandas', 'numpy'
 73:   ]
 74: 
 75:   // Canadian provinces and major cities
 76:   private static readonly LOCATION_PATTERNS = [
 77:     // Provinces/States
 78:     'AB', 'BC', 'MB', 'NB', 'NL', 'NS', 'NT', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT',
 79:     'Alberta', 'British Columbia', 'Manitoba', 'New Brunswick', 'Newfoundland',
 80:     'Nova Scotia', 'Northwest Territories', 'Nunavut', 'Ontario', 'Prince Edward Island',
 81:     'Quebec', 'Saskatchewan', 'Yukon',
 82:     // US States (common)
 83:     'CA', 'NY', 'TX', 'FL', 'IL', 'WA', 'MA', 'CO',
 84:     'California', 'New York', 'Texas', 'Florida', 'Illinois', 'Washington',
 85:     // Major Canadian cities
 86:     'Edmonton', 'Calgary', 'Toronto', 'Vancouver', 'Montreal', 'Ottawa', 'Winnipeg',
 87:     'Quebec City', 'Hamilton', 'Kitchener', 'London', 'Victoria', 'Halifax',
 88:     'Oshawa', 'Windsor', 'Saskatoon', 'Regina', 'Sherbrooke', 'St. John\'s'
 89:   ]
 90: 
 91:   /**
 92:    * Main parsing method - extracts all resume data
 93:    */
 94:   static parse(resumeText: string, maxKeywords: number = 50): ParsedResume {
 95:     const lines = resumeText.split(/\r?\n/)
 96:     
 97:     // Extract location (usually in header)
 98:     const location = this.extractLocation(lines)
 99:     
100:     // Extract work experiences
101:     const workExperiences = this.extractWorkExperiences(resumeText)
102:     
103:     // Extract skills from entire resume
104:     const allSkills = this.extractSkills(resumeText)
105:     
106:     // Calculate total experience years
107:     const experienceYears = workExperiences.reduce((sum, exp) => sum + exp.duration, 0)
108:     
109:     // Build skill -> years mapping from work history
110:     const workHistorySkills = this.buildSkillYearsMap(workExperiences)
111:     
112:     // Extract education skills (usually lower weight)
113:     const educationSkills = this.extractEducationSkills(resumeText)
114:     
115:     // Extract industries from work experience
116:     const industries = this.extractIndustries(workExperiences)
117:     
118:     // Weight and rank keywords
119:     const keywords = this.weightAndRankKeywords(
120:       allSkills,
121:       workHistorySkills,
122:       educationSkills,
123:       experienceYears,
124:       maxKeywords
125:     )
126:     
127:     return {
128:       keywords,
129:       location,
130:       locations: location ? [location] : [],
131:       skills: allSkills,
132:       industries,
133:       experienceYears,
134:       educationSkills,
135:       workHistorySkills
136:     }
137:   }
138: 
139:   /**
140:    * Extract location from resume header
141:    */
142:   private static extractLocation(lines: string[]): string | null {
143:     // Check first 10 lines for location (usually in header)
144:     const headerLines = lines.slice(0, 10).join(' ')
145:     
146:     // Pattern: "City, PROVINCE" or "City, STATE"
147:     const locationRegex = /([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*),\s*([A-Z]{2})/g
148:     const matches = Array.from(headerLines.matchAll(locationRegex))
149:     
150:     if (matches.length > 0) {
151:       return matches[0][0] // Return first match (e.g., "Edmonton, AB")
152:     }
153:     
154:     // Try to find province/state alone
155:     for (const province of this.LOCATION_PATTERNS) {
156:       const regex = new RegExp(`\\b${province}\\b`, 'i')
157:       if (regex.test(headerLines)) {
158:         return province
159:       }
160:     }
161:     
162:     return null
163:   }
164: 
165:   /**
166:    * Extract work experiences with duration
167:    */
168:   private static extractWorkExperiences(resumeText: string): WorkExperience[] {
169:     const experiences: WorkExperience[] = []
170:     const lines = resumeText.split(/\r?\n/)
171:     
172:     // Find work experience section
173:     const experienceSection = this.extractSection(resumeText, [
174:       'work experience', 'professional experience', 'employment history',
175:       'career history', 'experience'
176:     ])
177:     
178:     if (!experienceSection) return experiences
179:     
180:     // Parse each job entry
181:     const jobBlocks = experienceSection.split(/\n\n+/)
182:     
183:     for (const block of jobBlocks) {
184:       const titleMatch = block.match(new RegExp(this.JOB_TITLES.join('|'), 'i'))
185:       if (!titleMatch) continue
186:       
187:       const title = titleMatch[0]
188:       
189:       // Extract company name (usually after title, before dates)
190:       const companyMatch = block.match(/(?:at|@)\s+([A-Z][A-Za-z\s&,.]+?)(?:\s+\||\s+\d{4}|\n)/i)
191:       const company = companyMatch ? companyMatch[1].trim() : 'Unknown'
192:       
193:       // Extract duration (look for year ranges like "2020-2023" or "2020-Present")
194:       const duration = this.extractDuration(block)
195:       
196:       // Extract skills mentioned in this job
197:       const skills = this.extractSkills(block)
198:       
199:       experiences.push({ title, company, duration, skills })
200:     }
201:     
202:     return experiences
203:   }
204: 
205:   /**
206:    * Extract duration in years from text like "2020-2023" or "Jan 2020 - Present"
207:    */
208:   private static extractDuration(text: string): number {
209:     // Pattern: YYYY-YYYY or YYYY-Present
210:     const yearRangeMatch = text.match(/(\d{4})\s*[-–]\s*(\d{4}|Present|Current)/i)
211:     
212:     if (yearRangeMatch) {
213:       const startYear = parseInt(yearRangeMatch[1])
214:       const endYear = yearRangeMatch[2].match(/\d{4}/) 
215:         ? parseInt(yearRangeMatch[2]) 
216:         : new Date().getFullYear()
217:       
218:       return Math.max(0, endYear - startYear)
219:     }
220:     
221:     // Pattern: "X years"
222:     const yearsMatch = text.match(/(\d+)\s*(?:\+)?\s*years?/i)
223:     if (yearsMatch) {
224:       return parseInt(yearsMatch[1])
225:     }
226:     
227:     return 1 // Default to 1 year if can't determine
228:   }
229: 
230:   /**
231:    * Extract section by header keywords
232:    */
233:   private static extractSection(text: string, headers: string[]): string | null {
234:     for (const header of headers) {
235:       const regex = new RegExp(`^\\s*${header}\\s*$`, 'im')
236:       const match = text.match(regex)
237:       
238:       if (match && match.index !== undefined) {
239:         const start = match.index + match[0].length
240:         
241:         // Find next section header or end of text
242:         const nextSectionMatch = text.slice(start).match(/\n\s*[A-Z][A-Za-z\s]{3,30}\s*\n/)
243:         const end = nextSectionMatch && nextSectionMatch.index !== undefined
244:           ? start + nextSectionMatch.index
245:           : text.length
246:         
247:         return text.slice(start, end)
248:       }
249:     }
250:     
251:     return null
252:   }
253: 
254:   /**
255:    * Extract skills from text using skills database
256:    */
257:   private static extractSkills(text: string): string[] {
258:     const foundSkills = new Set<string>()
259:     const lowerText = text.toLowerCase()
260:     
261:     for (const skill of this.SKILLS_DATABASE) {
262:       const regex = new RegExp(`\\b${skill.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'i')
263:       if (regex.test(lowerText)) {
264:         foundSkills.add(skill)
265:       }
266:     }
267:     
268:     // Also extract job titles as skills
269:     for (const title of this.JOB_TITLES) {
270:       const regex = new RegExp(`\\b${title}\\b`, 'i')
271:       if (regex.test(lowerText)) {
272:         foundSkills.add(title)
273:       }
274:     }
275:     
276:     return Array.from(foundSkills)
277:   }
278: 
279:   /**
280:    * Extract education-specific skills
281:    */
282:   private static extractEducationSkills(resumeText: string): string[] {
283:     const educationSection = this.extractSection(resumeText, [
284:       'education', 'academic background', 'qualifications', 'certifications'
285:     ])
286:     
287:     if (!educationSection) return []
288:     
289:     return this.extractSkills(educationSection)
290:   }
291: 
292:   /**
293:    * Build map of skill -> years used based on work history
294:    */
295:   private static buildSkillYearsMap(
296:     workExperiences: WorkExperience[]
297:   ): Map<string, number> {
298:     const skillYears = new Map<string, number>()
299:     
300:     for (const exp of workExperiences) {
301:       for (const skill of exp.skills) {
302:         const currentYears = skillYears.get(skill) || 0
303:         skillYears.set(skill, currentYears + exp.duration)
304:       }
305:     }
306:     
307:     return skillYears
308:   }
309: 
310:   /**
311:    * Extract industries from work experience companies
312:    */
313:   private static extractIndustries(workExperiences: WorkExperience[]): string[] {
314:     const industries = new Set<string>()
315:     
316:     for (const exp of workExperiences) {
317:       // Simple industry extraction based on job title keywords
318:       const titleLower = exp.title.toLowerCase()
319:       
320:       if (titleLower.includes('sales') || titleLower.includes('business development')) {
321:         industries.add('Sales')
322:       }
323:       if (titleLower.includes('tech') || titleLower.includes('software') || titleLower.includes('developer')) {
324:         industries.add('Technology')
325:       }
326:       if (titleLower.includes('finance') || titleLower.includes('accounting')) {
327:         industries.add('Finance')
328:       }
329:       if (titleLower.includes('marketing')) {
330:         industries.add('Marketing')
331:       }
332:       if (titleLower.includes('manager') || titleLower.includes('director')) {
333:         industries.add('Management')
334:       }
335:     }
336:     
337:     return Array.from(industries)
338:   }
339: 
340:   /**
341:    * Weight and rank keywords by:
342:    * 1. Years of experience using the skill
343:    * 2. Recency (work experience > education)
344:    * 3. Frequency across roles
345:    */
346:   private static weightAndRankKeywords(
347:     allSkills: string[],
348:     workHistorySkills: Map<string, number>,
349:     educationSkills: string[],
350:     totalExperienceYears: number,
351:     maxKeywords: number
352:   ): string[] {
353:     const weightedSkills: Array<{ skill: string; weight: number }> = []
354:     
355:     for (const skill of allSkills) {
356:       let weight = 0
357:       
358:       // Weight from work history (years using skill / total career years)
359:       const yearsUsed = workHistorySkills.get(skill) || 0
360:       if (yearsUsed > 0 && totalExperienceYears > 0) {
361:         weight += (yearsUsed / totalExperienceYears) * 10 // Scale to 0-10
362:       }
363:       
364:       // Boost for work experience vs education only
365:       if (workHistorySkills.has(skill)) {
366:         weight += 5 // Work experience skills get +5 boost
367:       } else if (educationSkills.includes(skill)) {
368:         weight += 1 // Education-only skills get +1
369:       }
370:       
371:       // Boost for high-value skills
372:       if (this.isHighValueSkill(skill)) {
373:         weight += 2
374:       }
375:       
376:       weightedSkills.push({ skill, weight })
377:     }
378:     
379:     // Sort by weight (descending) and return top N
380:     return weightedSkills
381:       .sort((a, b) => b.weight - a.weight)
382:       .slice(0, maxKeywords)
383:       .map(item => item.skill)
384:   }
385: 
386:   /**
387:    * Check if skill is high-value (management, leadership, technical lead)
388:    */
389:   private static isHighValueSkill(skill: string): boolean {
390:     const highValueKeywords = [
391:       'leadership', 'management', 'director', 'executive', 'strategic',
392:       'ai', 'machine learning', 'cloud', 'aws', 'architecture'
393:     ]
394:     
395:     const skillLower = skill.toLowerCase()
396:     return highValueKeywords.some(keyword => skillLower.includes(keyword))
397:   }
398: }
</file>

<file path="src/lib/logger.ts">
  1: // Enterprise Logging Service with Structured Output
  2: 
  3: enum LogLevel {
  4:   ERROR = 0,
  5:   WARN = 1,
  6:   INFO = 2,
  7:   DEBUG = 3
  8: }
  9: 
 10: interface LogEntry {
 11:   timestamp: string
 12:   level: string
 13:   message: string
 14:   metadata?: any
 15:   requestId?: string
 16:   userId?: string
 17:   context?: string
 18: }
 19: 
 20: export class Logger {
 21:   private static instance: Logger
 22:   private level: LogLevel
 23:   private context: string
 24: 
 25:   private constructor(context: string = 'APP') {
 26:     this.context = context
 27:     this.level = this.getLogLevelFromEnv()
 28:   }
 29: 
 30:   static getInstance(context?: string): Logger {
 31:     if (!Logger.instance || (context && Logger.instance.context !== context)) {
 32:       Logger.instance = new Logger(context)
 33:     }
 34:     return Logger.instance
 35:   }
 36: 
 37:   private getLogLevelFromEnv(): LogLevel {
 38:     const envLevel = process.env.LOG_LEVEL?.toUpperCase()
 39:     switch (envLevel) {
 40:       case 'DEBUG':
 41:         return LogLevel.DEBUG
 42:       case 'INFO':
 43:         return LogLevel.INFO
 44:       case 'WARN':
 45:         return LogLevel.WARN
 46:       case 'ERROR':
 47:         return LogLevel.ERROR
 48:       default:
 49:         return process.env.NODE_ENV === 'production' ? LogLevel.INFO : LogLevel.DEBUG
 50:     }
 51:   }
 52: 
 53:   error(message: string, metadata?: any, context?: { requestId?: string; userId?: string }): void {
 54:     this.log(LogLevel.ERROR, message, metadata, context)
 55:   }
 56: 
 57:   warn(message: string, metadata?: any, context?: { requestId?: string; userId?: string }): void {
 58:     this.log(LogLevel.WARN, message, metadata, context)
 59:   }
 60: 
 61:   info(message: string, metadata?: any, context?: { requestId?: string; userId?: string }): void {
 62:     this.log(LogLevel.INFO, message, metadata, context)
 63:   }
 64: 
 65:   debug(message: string, metadata?: any, context?: { requestId?: string; userId?: string }): void {
 66:     this.log(LogLevel.DEBUG, message, metadata, context)
 67:   }
 68: 
 69:   private log(level: LogLevel, message: string, metadata?: any, context?: { requestId?: string; userId?: string }): void {
 70:     if (level > this.level) return
 71: 
 72:     const logEntry: LogEntry = {
 73:       timestamp: new Date().toISOString(),
 74:       level: LogLevel[level],
 75:       message,
 76:       context: this.context,
 77:       metadata,
 78:       requestId: context?.requestId,
 79:       userId: context?.userId
 80:     }
 81: 
 82:     // Console output
 83:     if (process.env.NODE_ENV === 'development') {
 84:       this.consoleLog(level, logEntry)
 85:     } else {
 86:       // Structured JSON for production log aggregation
 87:       console.log(JSON.stringify(logEntry))
 88:     }
 89: 
 90:     // Send to external logging service in production
 91:     if (process.env.NODE_ENV === 'production') {
 92:       this.sendToExternalLogger(logEntry)
 93:     }
 94:   }
 95: 
 96:   private consoleLog(level: LogLevel, entry: LogEntry): void {
 97:     const colorCodes = {
 98:       [LogLevel.ERROR]: '\x1b[31m', // Red
 99:       [LogLevel.WARN]: '\x1b[33m',  // Yellow
100:       [LogLevel.INFO]: '\x1b[36m',  // Cyan
101:       [LogLevel.DEBUG]: '\x1b[90m', // Gray
102:     }
103:     const resetCode = '\x1b[0m'
104:     
105:     const color = colorCodes[level] || ''
106:     const prefix = `${color}[${entry.level}]${resetCode} ${entry.timestamp} [${entry.context}]`
107:     
108:     console.log(`${prefix} ${entry.message}`, entry.metadata || '')
109:   }
110: 
111:   private async sendToExternalLogger(entry: LogEntry): Promise<void> {
112:     // Integration points for external logging services
113:     // Examples: DataDog, Splunk, CloudWatch, Sentry, etc.
114:     
115:     // Sentry for errors
116:     if (entry.level === 'ERROR' && process.env.NEXT_PUBLIC_SENTRY_DSN) {
117:       // Would integrate with Sentry SDK here
118:     }
119: 
120:     // Custom logging endpoint
121:     if (process.env.LOG_ENDPOINT) {
122:       try {
123:         await fetch(process.env.LOG_ENDPOINT, {
124:           method: 'POST',
125:           headers: { 'Content-Type': 'application/json' },
126:           body: JSON.stringify(entry)
127:         })
128:       } catch (error) {
129:         // Silently fail - don't crash app due to logging issues
130:         console.error('Failed to send log to external service:', error)
131:       }
132:     }
133:   }
134: 
135:   // Convenience methods for common scenarios
136:   apiRequest(method: string, path: string, statusCode: number, duration: number, userId?: string): void {
137:     this.info(`API ${method} ${path}`, {
138:       method,
139:       path,
140:       statusCode,
141:       duration,
142:       userId
143:     })
144:   }
145: 
146:   apiError(method: string, path: string, error: Error, userId?: string): void {
147:     this.error(`API ${method} ${path} failed`, {
148:       method,
149:       path,
150:       error: error.message,
151:       stack: error.stack,
152:       userId
153:     })
154:   }
155: 
156:   dbQuery(operation: string, collection: string, duration: number): void {
157:     this.debug(`DB ${operation} on ${collection}`, {
158:       operation,
159:       collection,
160:       duration
161:     })
162:   }
163: 
164:   dbError(operation: string, collection: string, error: Error): void {
165:     this.error(`DB ${operation} on ${collection} failed`, {
166:       operation,
167:       collection,
168:       error: error.message,
169:       stack: error.stack
170:     })
171:   }
172: 
173:   aiRequest(service: string, model: string, tokensUsed: number, cost: number): void {
174:     this.info(`AI request to ${service}`, {
175:       service,
176:       model,
177:       tokensUsed,
178:       cost
179:     })
180:   }
181: 
182:   aiError(service: string, error: Error): void {
183:     this.error(`AI service ${service} failed`, {
184:       service,
185:       error: error.message,
186:       stack: error.stack
187:     })
188:   }
189: 
190:   securityEvent(event: string, severity: 'low' | 'medium' | 'high' | 'critical', details: any): void {
191:     const level = severity === 'critical' || severity === 'high' ? LogLevel.ERROR : LogLevel.WARN
192:     this.log(level, `SECURITY: ${event}`, {
193:       ...details,
194:       severity
195:     })
196:   }
197: }
198: 
199: // Export convenience instances
200: export const logger = Logger.getInstance()
201: export const apiLogger = Logger.getInstance('API')
202: export const dbLogger = Logger.getInstance('DATABASE')
203: export const aiLogger = Logger.getInstance('AI')
204: export const securityLogger = Logger.getInstance('SECURITY')
</file>

<file path="src/lib/market-intelligence-service.ts">
  1: /**
  2:  * Market Intelligence Service
  3:  * Provides real-time salary data, industry trends, and job market insights
  4:  * Uses Perplexity AI for real-time web data
  5:  */
  6: 
  7: import { PerplexityIntelligenceService } from './perplexity-intelligence'
  8: import { PerplexityService } from './perplexity-service'
  9: 
 10: export interface SalaryData {
 11:   role: string
 12:   location: string
 13:   avgSalary: number
 14:   minSalary: number
 15:   maxSalary: number
 16:   currency: string
 17:   experienceLevel: string
 18:   sources: string[]
 19:   confidence: number
 20: }
 21: 
 22: export interface IndustryTrend {
 23:   trend: string
 24:   description: string
 25:   recommendation: string
 26:   growthRate?: number
 27:   sources?: string[]
 28: }
 29: 
 30: export interface MarketInsight {
 31:   topIndustries: Array<{ industry: string; count: number; avgSalary?: number }>
 32:   salaryData: SalaryData[]
 33:   marketTrends: IndustryTrend[]
 34:   skillsDemand: Array<{ skill: string; demandScore: number; avgSalaryImpact: number }>
 35: }
 36: 
 37: interface SalaryItem {
 38:   title?: string
 39:   range?: string
 40:   currency?: string
 41:   geo?: string
 42:   source?: string
 43:   confidence?: number
 44: }
 45: 
 46: interface SalaryResponse {
 47:   items?: SalaryItem[]
 48:   summary?: string
 49:   freshness?: string
 50: }
 51: 
 52: export class MarketIntelligenceService {
 53:   private static instance: MarketIntelligenceService
 54:   private cache: Map<string, { data: unknown; timestamp: number }> = new Map()
 55:   private readonly CACHE_TTL = 24 * 60 * 60 * 1000 // 24 hours
 56: 
 57:   static getInstance(): MarketIntelligenceService {
 58:     if (!MarketIntelligenceService.instance) {
 59:       MarketIntelligenceService.instance = new MarketIntelligenceService()
 60:     }
 61:     return MarketIntelligenceService.instance
 62:   }
 63: 
 64:   /**
 65:    * Get real-time salary data using Perplexity AI
 66:    */
 67:   async getSalaryData(role: string, location: string): Promise<SalaryData> {
 68:     const cacheKey = `salary:${role}:${location}`
 69:     const cached = this.getFromCache<SalaryData>(cacheKey)
 70:     if (cached) return cached
 71: 
 72:     try {
 73:       const result = await PerplexityIntelligenceService.salaryForRole(role, location, 'mid') as SalaryResponse
 74:       
 75:       // Parse salary data from Perplexity response
 76:       // Response format: { items: [{title, range, currency, geo, source, confidence}], summary, freshness }
 77:       const items = result.items || []
 78:       
 79:       interface ParsedRange {
 80:         min: number
 81:         max: number
 82:       }
 83:       
 84:       const ranges = items.map((item: SalaryItem): ParsedRange | null => {
 85:         const range = item.range || ''
 86:         const match = range.match(/\$?([\d,]+)k?\s*-\s*\$?([\d,]+)k?/i)
 87:         if (match) {
 88:           return {
 89:             min: parseInt(match[1].replace(/,/g, '')) * (range.includes('k') ? 1000 : 1),
 90:             max: parseInt(match[2].replace(/,/g, '')) * (range.includes('k') ? 1000 : 1)
 91:           }
 92:         }
 93:         return null
 94:       }).filter((r): r is ParsedRange => r !== null)
 95:       
 96:       const avgMin = ranges.length > 0 ? ranges.reduce((sum: number, r: ParsedRange) => sum + r.min, 0) / ranges.length : 0
 97:       const avgMax = ranges.length > 0 ? ranges.reduce((sum: number, r: ParsedRange) => sum + r.max, 0) / ranges.length : 0
 98:       
 99:       const salaryData: SalaryData = {
100:         role,
101:         location,
102:         avgSalary: ranges.length > 0 ? (avgMin + avgMax) / 2 : 0,
103:         minSalary: ranges.length > 0 ? Math.min(...ranges.map((r: ParsedRange) => r.min)) : 0,
104:         maxSalary: ranges.length > 0 ? Math.max(...ranges.map((r: ParsedRange) => r.max)) : 0,
105:         currency: items[0]?.currency || 'USD',
106:         experienceLevel: 'mid',
107:         sources: items.map((item: SalaryItem) => item.source).filter((s): s is string => !!s),
108:         confidence: items[0]?.confidence || 0.7
109:       }
110: 
111:       this.setCache(cacheKey, salaryData)
112:       return salaryData
113:     } catch (error) {
114:       console.error('[MARKET_INTEL] Failed to fetch salary data:', error)
115:       // Return fallback data
116:       return {
117:         role,
118:         location,
119:         avgSalary: 0,
120:         minSalary: 0,
121:         maxSalary: 0,
122:         currency: 'USD',
123:         experienceLevel: 'mid',
124:         sources: [],
125:         confidence: 0
126:       }
127:     }
128:   }
129: 
130:   /**
131:    * Get real-time market trends using Perplexity AI
132:    */
133:   async getMarketTrends(industry?: string): Promise<IndustryTrend[]> {
134:     const cacheKey = `trends:${industry || 'general'}`
135:     const cached = this.getFromCache<IndustryTrend[]>(cacheKey)
136:     if (cached) return cached
137: 
138:     try {
139:       const prompt = industry
140:         ? `What are the top 5 current hiring trends and job market insights specifically for the ${industry} industry in 2025? Include growth rates, emerging skills, and actionable recommendations for job seekers.`
141:         : `What are the top 5 current hiring trends and job market insights across all industries in 2025? Include growth rates, emerging skills, and actionable recommendations for job seekers.`
142: 
143:       const perplexityService = new PerplexityService()
144:       const result = await perplexityService.makeRequest('You are a market intelligence analyst providing accurate, data-driven insights about job markets and hiring trends.', prompt)
145:       
146:       // Parse the response (Perplexity returns structured data)
147:       const trends: IndustryTrend[] = this.parseMarketTrends(result.content)
148:       
149:       this.setCache(cacheKey, trends)
150:       return trends
151:     } catch (error) {
152:       console.error('[MARKET_INTEL] Failed to fetch market trends:', error)
153:       // Return fallback trends
154:       return [
155:         {
156:           trend: 'Remote work adoption',
157:           description: 'Remote and hybrid work models are now standard across industries',
158:           recommendation: 'Highlight remote work experience and tools proficiency in applications'
159:         },
160:         {
161:           trend: 'AI and automation skills',
162:           description: 'AI literacy is becoming essential across most roles',
163:           recommendation: 'Consider upskilling in AI tools relevant to your field'
164:         },
165:         {
166:           trend: 'Focus on outcomes',
167:           description: 'Employers prioritize measurable results and impact',
168:           recommendation: 'Quantify achievements with specific metrics in your resume'
169:         }
170:       ]
171:     }
172:   }
173: 
174:   /**
175:    * Get top industries by job openings and average salary
176:    */
177:   async getTopIndustries(): Promise<Array<{ industry: string; count: number; avgSalary?: number }>> {
178:     const cacheKey = 'top-industries'
179:     const cached = this.getFromCache<Array<{ industry: string; count: number; avgSalary?: number }>>(cacheKey)
180:     if (cached) return cached
181: 
182:     try {
183:       const prompt = `What are the top 10 industries with the most job openings in 2025? Include approximate number of openings and average salary ranges in USD. Return as structured data.`
184:       
185:       const perplexityService = new PerplexityService()
186:       const result = await perplexityService.makeRequest('You are a market intelligence analyst providing accurate, data-driven insights about job markets and hiring trends.', prompt)
187:       
188:       const industries = this.parseTopIndustries(result.content)
189:       
190:       this.setCache(cacheKey, industries)
191:       return industries
192:     } catch (error) {
193:       console.error('[MARKET_INTEL] Failed to fetch top industries:', error)
194:       // Return fallback data based on common knowledge
195:       return [
196:         { industry: 'Technology', count: 0, avgSalary: 120000 },
197:         { industry: 'Healthcare', count: 0, avgSalary: 85000 },
198:         { industry: 'Finance', count: 0, avgSalary: 95000 },
199:         { industry: 'Education', count: 0, avgSalary: 65000 },
200:         { industry: 'Retail', count: 0, avgSalary: 45000 }
201:       ]
202:     }
203:   }
204: 
205:   /**
206:    * Get in-demand skills and their salary impact
207:    */
208:   async getSkillsDemand(industry?: string): Promise<Array<{ skill: string; demandScore: number; avgSalaryImpact: number }>> {
209:     const cacheKey = `skills:${industry || 'general'}`
210:     const cached = this.getFromCache<Array<{ skill: string; demandScore: number; avgSalaryImpact: number }>>(cacheKey)
211:     if (cached) return cached
212: 
213:     try {
214:       const prompt = industry
215:         ? `What are the top 10 most in-demand skills for ${industry} in 2025? Include demand scores (1-10) and salary impact (% increase). Return as structured data.`
216:         : `What are the top 10 most in-demand skills across all industries in 2025? Include demand scores (1-10) and salary impact (% increase). Return as structured data.`
217:       
218:       const perplexityService = new PerplexityService()
219:       const result = await perplexityService.makeRequest('You are a market intelligence analyst providing accurate, data-driven insights about job markets and hiring trends.', prompt)
220:       
221:       const skills = this.parseSkillsDemand(result.content)
222:       
223:       this.setCache(cacheKey, skills)
224:       return skills
225:     } catch (error) {
226:       console.error('[MARKET_INTEL] Failed to fetch skills demand:', error)
227:       return []
228:     }
229:   }
230: 
231:   /**
232:    * Get comprehensive market insights
233:    */
234:   async getMarketInsights(userIndustry?: string, userRole?: string): Promise<MarketInsight> {
235:     try {
236:       const [topIndustries, marketTrends, skillsDemand, salaryData] = await Promise.all([
237:         this.getTopIndustries(),
238:         this.getMarketTrends(userIndustry),
239:         this.getSkillsDemand(userIndustry),
240:         userRole ? this.getSalaryData(userRole, 'United States') : Promise.resolve(null)
241:       ])
242: 
243:       return {
244:         topIndustries,
245:         salaryData: salaryData ? [salaryData] : [],
246:         marketTrends,
247:         skillsDemand
248:       }
249:     } catch (error) {
250:       console.error('[MARKET_INTEL] Failed to get market insights:', error)
251:       throw error
252:     }
253:   }
254: 
255:   // Helper methods for parsing Perplexity responses
256:   private parseMarketTrends(response: unknown): IndustryTrend[] {
257:     try {
258:       let parsed: unknown = response
259:       
260:       // Perplexity returns structured JSON
261:       if (typeof response === 'string') {
262:         // Extract JSON from markdown if needed
263:         const jsonMatch = response.match(/```json\n([\s\S]*?)\n```/)
264:         if (jsonMatch) {
265:           parsed = JSON.parse(jsonMatch[1])
266:         }
267:       }
268: 
269:       if (Array.isArray(parsed)) {
270:         return parsed.slice(0, 5)
271:       }
272: 
273:       if (parsed && typeof parsed === 'object' && 'trends' in parsed) {
274:         const obj = parsed as { trends: unknown }
275:         if (Array.isArray(obj.trends)) {
276:           return obj.trends.slice(0, 5)
277:         }
278:       }
279: 
280:       // Fallback parsing
281:       return []
282:     } catch (error) {
283:       console.error('[MARKET_INTEL] Failed to parse trends:', error)
284:       return []
285:     }
286:   }
287: 
288:   private parseTopIndustries(response: unknown): Array<{ industry: string; count: number; avgSalary?: number }> {
289:     try {
290:       let parsed: unknown = response
291:       
292:       if (typeof response === 'string') {
293:         const jsonMatch = response.match(/```json\n([\s\S]*?)\n```/)
294:         if (jsonMatch) {
295:           parsed = JSON.parse(jsonMatch[1])
296:         }
297:       }
298: 
299:       if (Array.isArray(parsed)) {
300:         return parsed.slice(0, 10)
301:       }
302: 
303:       if (parsed && typeof parsed === 'object' && 'industries' in parsed) {
304:         const obj = parsed as { industries: unknown }
305:         if (Array.isArray(obj.industries)) {
306:           return obj.industries.slice(0, 10)
307:         }
308:       }
309: 
310:       return []
311:     } catch (error) {
312:       console.error('[MARKET_INTEL] Failed to parse industries:', error)
313:       return []
314:     }
315:   }
316: 
317:   private parseSkillsDemand(response: unknown): Array<{ skill: string; demandScore: number; avgSalaryImpact: number }> {
318:     try {
319:       let parsed: unknown = response
320:       
321:       if (typeof response === 'string') {
322:         const jsonMatch = response.match(/```json\n([\s\S]*?)\n```/)
323:         if (jsonMatch) {
324:           parsed = JSON.parse(jsonMatch[1])
325:         }
326:       }
327: 
328:       if (Array.isArray(parsed)) {
329:         return parsed.slice(0, 10)
330:       }
331: 
332:       if (parsed && typeof parsed === 'object' && 'skills' in parsed) {
333:         const obj = parsed as { skills: unknown }
334:         if (Array.isArray(obj.skills)) {
335:           return obj.skills.slice(0, 10)
336:         }
337:       }
338: 
339:       return []
340:     } catch (error) {
341:       console.error('[MARKET_INTEL] Failed to parse skills:', error)
342:       return []
343:     }
344:   }
345: 
346:   // Cache management
347:   private getFromCache<T>(key: string): T | null {
348:     const cached = this.cache.get(key)
349:     if (!cached) return null
350: 
351:     const now = Date.now()
352:     if (now - cached.timestamp > this.CACHE_TTL) {
353:       this.cache.delete(key)
354:       return null
355:     }
356: 
357:     return cached.data as T
358:   }
359: 
360:   private setCache(key: string, data: unknown): void {
361:     this.cache.set(key, {
362:       data,
363:       timestamp: Date.now()
364:     })
365:   }
366: 
367:   clearCache(): void {
368:     this.cache.clear()
369:   }
370: }
</file>

<file path="src/lib/mongodb-adapter.ts">
 1: import { MongoClient } from 'mongodb';
 2: 
 3: const options = {};
 4: const isBuildPhase = process.env.NEXT_PHASE === 'phase-production-build';
 5: const mongoUriFromEnv = process.env.MONGODB_URI;
 6: 
 7: let client: MongoClient;
 8: let clientPromise: Promise<MongoClient>;
 9: 
10: if (isBuildPhase) {
11:   // During Next.js build, avoid opening DB connections. Use a non-connecting client instance.
12:   client = new MongoClient(mongoUriFromEnv || 'mongodb://localhost:27017', options);
13:   clientPromise = Promise.resolve(client);
14: } else if (process.env.NODE_ENV === 'development') {
15:   // In development, cache the client promise across HMR reloads.
16:   if (!(global as any)._mongoClientPromise) {
17:     client = new MongoClient((mongoUriFromEnv as string) || 'mongodb://localhost:27017', options);
18:     (global as any)._mongoClientPromise = client.connect();
19:   }
20:   clientPromise = (global as any)._mongoClientPromise;
21: } else {
22:   // In production runtime, create a fresh client and connect.
23:   client = new MongoClient(mongoUriFromEnv as string, options);
24:   clientPromise = client.connect();
25: }
26: 
27: // Export a module-scoped MongoClient promise. By doing this in a
28: // separate module, the client can be shared across functions.
29: export default clientPromise;
</file>

<file path="src/lib/mongodb.ts">
 1: import mongoose from 'mongoose';
 2: 
 3: /**
 4:  * Global is used here to maintain a cached connection across hot reloads
 5:  * in development. This prevents connections growing exponentially
 6:  * during API Route usage.
 7:  */
 8: let cached = (global as any).mongoose;
 9: 
10: if (!cached) {
11:   cached = (global as any).mongoose = { conn: null, promise: null };
12: }
13: 
14: async function connectToDatabase() {
15:   // Read MONGODB_URI inside the function to ensure .env is loaded
16:   const MONGODB_URI = process.env.MONGODB_URI;
17:   
18:   // If no MongoDB URI is configured, skip connection (useful for build time)
19:   if (!MONGODB_URI) {
20:     console.warn('MONGODB_URI not configured, skipping database connection');
21:     return null;
22:   }
23: 
24:   if (cached.conn) {
25:     return cached.conn;
26:   }
27: 
28:   if (!cached.promise) {
29:     const opts = {
30:       bufferCommands: false,
31:     };
32: 
33:     cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
34:       console.log('Connected to MongoDB');
35:       return mongoose;
36:     });
37:   }
38: 
39:   try {
40:     cached.conn = await cached.promise;
41:   } catch (e) {
42:     cached.promise = null;
43:     throw e;
44:   }
45: 
46:   return cached.conn;
47: }
48: 
49: export default connectToDatabase;
</file>

<file path="src/lib/notification-service.ts">
  1: /**
  2:  * Notification Service
  3:  * 
  4:  * Manages user notifications for job matches, application updates,
  5:  * and system alerts with real-time delivery
  6:  */
  7: 
  8: export interface Notification {
  9:   id: string
 10:   userId: string
 11:   type: 'job_match' | 'application_update' | 'network_activity' | 'system_alert' | 'career_insight'
 12:   title: string
 13:   message: string
 14:   link?: string
 15:   read: boolean
 16:   priority: 'low' | 'medium' | 'high' | 'urgent'
 17:   metadata?: {
 18:     jobId?: string
 19:     applicationId?: string
 20:     companyName?: string
 21:     aiInsight?: string
 22:   }
 23:   createdAt: Date
 24:   readAt?: Date
 25: }
 26: 
 27: export class NotificationService {
 28:   /**
 29:    * Get unread notification count for user
 30:    */
 31:   static async getUnreadCount(userId: string): Promise<number> {
 32:     try {
 33:       const response = await fetch(`/api/notifications/count?userId=${userId}`)
 34:       const data = await response.json()
 35:       return data.count || 0
 36:     } catch (error) {
 37:       console.error('[NOTIFICATIONS] Failed to get count:', error)
 38:       return 0
 39:     }
 40:   }
 41: 
 42:   /**
 43:    * Get recent notifications for user
 44:    */
 45:   static async getNotifications(
 46:     userId: string,
 47:     options: { limit?: number; unreadOnly?: boolean } = {}
 48:   ): Promise<Notification[]> {
 49:     try {
 50:       const params = new URLSearchParams({
 51:         userId,
 52:         limit: String(options.limit || 20),
 53:         unreadOnly: String(options.unreadOnly || false)
 54:       })
 55:       
 56:       const response = await fetch(`/api/notifications?${params}`)
 57:       const data = await response.json()
 58:       return data.notifications || []
 59:     } catch (error) {
 60:       console.error('[NOTIFICATIONS] Failed to get notifications:', error)
 61:       return []
 62:     }
 63:   }
 64: 
 65:   /**
 66:    * Mark notification as read
 67:    */
 68:   static async markAsRead(notificationId: string): Promise<boolean> {
 69:     try {
 70:       const response = await fetch(`/api/notifications/${notificationId}/read`, {
 71:         method: 'PATCH'
 72:       })
 73:       return response.ok
 74:     } catch (error) {
 75:       console.error('[NOTIFICATIONS] Failed to mark as read:', error)
 76:       return false
 77:     }
 78:   }
 79: 
 80:   /**
 81:    * Mark all notifications as read
 82:    */
 83:   static async markAllAsRead(userId: string): Promise<boolean> {
 84:     try {
 85:       const response = await fetch('/api/notifications/read-all', {
 86:         method: 'PATCH',
 87:         headers: { 'Content-Type': 'application/json' },
 88:         body: JSON.stringify({ userId })
 89:       })
 90:       return response.ok
 91:     } catch (error) {
 92:       console.error('[NOTIFICATIONS] Failed to mark all as read:', error)
 93:       return false
 94:     }
 95:   }
 96: 
 97:   /**
 98:    * Delete notification
 99:    */
100:   static async deleteNotification(notificationId: string): Promise<boolean> {
101:     try {
102:       const response = await fetch(`/api/notifications/${notificationId}`, {
103:         method: 'DELETE'
104:       })
105:       return response.ok
106:     } catch (error) {
107:       console.error('[NOTIFICATIONS] Failed to delete:', error)
108:       return false
109:     }
110:   }
111: 
112:   /**
113:    * Create notification (server-side only)
114:    */
115:   static async createNotification(notification: Omit<Notification, 'id' | 'createdAt' | 'readAt'>): Promise<Notification | null> {
116:     try {
117:       const response = await fetch('/api/notifications', {
118:         method: 'POST',
119:         headers: { 'Content-Type': 'application/json' },
120:         body: JSON.stringify(notification)
121:       })
122:       
123:       if (!response.ok) return null
124:       
125:       const data = await response.json()
126:       return data.notification || null
127:     } catch (error) {
128:       console.error('[NOTIFICATIONS] Failed to create:', error)
129:       return null
130:     }
131:   }
132: 
133:   /**
134:    * Get notification icon by type
135:    */
136:   static getIcon(type: Notification['type']): string {
137:     switch (type) {
138:       case 'job_match': return '💼'
139:       case 'application_update': return '📋'
140:       case 'network_activity': return '👥'
141:       case 'system_alert': return '⚠️'
142:       case 'career_insight': return '💡'
143:       default: return '🔔'
144:     }
145:   }
146: 
147:   /**
148:    * Get notification color by priority
149:    */
150:   static getColor(priority: Notification['priority']): string {
151:     switch (priority) {
152:       case 'urgent': return 'text-red-600'
153:       case 'high': return 'text-orange-600'
154:       case 'medium': return 'text-blue-600'
155:       case 'low': return 'text-gray-600'
156:       default: return 'text-gray-600'
157:     }
158:   }
159: 
160:   /**
161:    * Format notification time
162:    */
163:   static formatTime(date: Date): string {
164:     const now = new Date()
165:     const diff = now.getTime() - new Date(date).getTime()
166:     const minutes = Math.floor(diff / 60000)
167:     const hours = Math.floor(diff / 3600000)
168:     const days = Math.floor(diff / 86400000)
169: 
170:     if (minutes < 1) return 'Just now'
171:     if (minutes < 60) return `${minutes}m ago`
172:     if (hours < 24) return `${hours}h ago`
173:     if (days < 7) return `${days}d ago`
174:     return new Date(date).toLocaleDateString()
175:   }
176: }
</file>

<file path="src/lib/observability.ts">
 1: import { NextRequest } from 'next/server'
 2: 
 3: export function getOrCreateRequestId(headers?: Headers): string {
 4:   try {
 5:     const h = headers?.get?.('x-request-id') || ''
 6:     return h || (globalThis.crypto?.randomUUID ? globalThis.crypto.randomUUID() : String(Date.now()) + Math.random().toString(36).slice(2))
 7:   } catch {
 8:     return String(Date.now()) + Math.random().toString(36).slice(2)
 9:   }
10: }
11: 
12: export function logRequestStart(routeKey: string, requestId: string) {
13:   try { console.log(`[start] ${routeKey} rid=${requestId}`) } catch {}
14: }
15: 
16: export function logRequestEnd(routeKey: string, requestId: string, status: number, durationMs: number, meta?: Record<string, any>) {
17:   try {
18:     if (meta && Object.keys(meta).length) {
19:       console.log(`[end] ${routeKey} rid=${requestId} status=${status} dur=${durationMs}ms meta=${JSON.stringify(meta)}`)
20:     } else {
21:       console.log(`[end] ${routeKey} rid=${requestId} status=${status} dur=${durationMs}ms`)
22:     }
23:   } catch {}
24: }
25: 
26: export function now(): number { return Date.now() }
27: export function durationMs(startedAt: number): number { return Date.now() - startedAt }
28: 
29: export function breadcrumb(category: string, message: string, data?: Record<string, any>) {
30:   try {
31:     const S = (globalThis as any).Sentry
32:     if (S && S.addBreadcrumb) {
33:       S.addBreadcrumb({ category, message, data, level: 'info' })
34:     }
35:   } catch {}
36: }
37: 
38: // Optional AI usage logger (no-op fallback)
39: export function logAIUsage(operation: string, requestId?: string, raw?: any) {
40:   try {
41:     const base = `[ai] op=${operation}${requestId ? ` rid=${requestId}` : ''}`
42:     if (raw) console.log(`${base} detail=${typeof raw === 'string' ? raw : '[object]'}`)
43:     else console.log(base)
44:   } catch {}
45: }
</file>

<file path="src/lib/onboarding-utils.ts">
  1: export type CurrentSituation = 'actively_searching' | 'open_to_offers' | 'employed_not_looking' | 'student' | 'career_change'
  2: export type WorkPreference = 'remote' | 'onsite' | 'hybrid'
  3: export type Timeline = 'asap' | '1-3_months' | '3-6_months' | 'flexible'
  4: export type Urgency = 'high' | 'medium' | 'low'
  5: 
  6: export interface QuizAnswers {
  7:   currentSituation: CurrentSituation
  8:   yearsOfExperience: number
  9:   targetRole?: string
 10:   careerInterests?: string[] // Multi-select career areas
 11:   workPreferences: WorkPreference[]
 12:   preferredLocation: string
 13:   timeline?: Timeline
 14:   hasResume?: boolean // Whether user has a resume ready
 15: }
 16: 
 17: export interface UserProfile extends QuizAnswers {
 18:   onboardingComplete: boolean
 19:   urgency: Urgency
 20:   completedAt: Date
 21: }
 22: 
 23: /**
 24:  * Calculate urgency based on current situation and timeline
 25:  */
 26: export function calculateUrgency(
 27:   currentSituation: CurrentSituation,
 28:   timeline?: Timeline
 29: ): Urgency {
 30:   // High urgency situations
 31:   if (currentSituation === 'actively_searching' || currentSituation === 'career_change') {
 32:     if (timeline === 'asap') return 'high'
 33:     if (timeline === '1-3_months') return 'high'
 34:     return 'medium'
 35:   }
 36: 
 37:   // Medium urgency
 38:   if (currentSituation === 'open_to_offers' || currentSituation === 'student') {
 39:     return 'medium'
 40:   }
 41: 
 42:   // Low urgency
 43:   return 'low'
 44: }
 45: 
 46: /**
 47:  * Validate quiz answers
 48:  */
 49: export function validateQuizAnswers(answers: Partial<QuizAnswers>): {
 50:   valid: boolean
 51:   errors: string[]
 52: } {
 53:   const errors: string[] = []
 54: 
 55:   // Current situation
 56:   if (!answers.currentSituation) {
 57:     errors.push('Current situation is required')
 58:   } else if (!['actively_searching', 'open_to_offers', 'employed_not_looking', 'student', 'career_change'].includes(answers.currentSituation)) {
 59:     errors.push('Invalid current situation')
 60:   }
 61: 
 62:   // Years of experience
 63:   if (answers.yearsOfExperience === undefined || answers.yearsOfExperience === null) {
 64:     errors.push('Years of experience is required')
 65:   } else if (answers.yearsOfExperience < 0 || answers.yearsOfExperience > 30) {
 66:     errors.push('Years of experience must be between 0 and 30')
 67:   }
 68: 
 69:   // Target role
 70:   if (!answers.targetRole || answers.targetRole.trim().length < 2) {
 71:     errors.push('Target role is required (minimum 2 characters)')
 72:   }
 73: 
 74:   // Work preferences
 75:   if (!answers.workPreferences || answers.workPreferences.length === 0) {
 76:     errors.push('At least one work preference is required')
 77:   } else {
 78:     const validPreferences = ['remote', 'onsite', 'hybrid']
 79:     const invalidPrefs = answers.workPreferences.filter(p => !validPreferences.includes(p))
 80:     if (invalidPrefs.length > 0) {
 81:       errors.push('Invalid work preferences')
 82:     }
 83:   }
 84: 
 85:   // Timeline (required for actively searching or career change)
 86:   if (answers.currentSituation === 'actively_searching' || answers.currentSituation === 'career_change') {
 87:     if (!answers.timeline) {
 88:       errors.push('Timeline is required for your current situation')
 89:     }
 90:   }
 91: 
 92:   return {
 93:     valid: errors.length === 0,
 94:     errors
 95:   }
 96: }
 97: 
 98: /**
 99:  * Common job titles for autocomplete
100:  */
101: export const COMMON_JOB_TITLES = [
102:   'Software Engineer',
103:   'Senior Software Engineer',
104:   'Full Stack Developer',
105:   'Frontend Developer',
106:   'Backend Developer',
107:   'DevOps Engineer',
108:   'Data Scientist',
109:   'Data Analyst',
110:   'Product Manager',
111:   'Project Manager',
112:   'Marketing Manager',
113:   'Digital Marketing Specialist',
114:   'Sales Manager',
115:   'Account Executive',
116:   'Business Development Manager',
117:   'Customer Success Manager',
118:   'UX Designer',
119:   'UI Designer',
120:   'Graphic Designer',
121:   'Content Writer',
122:   'Copywriter',
123:   'HR Manager',
124:   'Recruiter',
125:   'Financial Analyst',
126:   'Accountant',
127:   'Operations Manager',
128:   'Supply Chain Manager',
129:   'Quality Assurance Engineer',
130:   'Technical Support Specialist',
131:   'Customer Service Representative',
132:   'Administrative Assistant',
133:   'Executive Assistant',
134:   'Nurse',
135:   'Registered Nurse',
136:   'Medical Assistant',
137:   'Teacher',
138:   'Professor',
139:   'Research Scientist',
140:   'Mechanical Engineer',
141:   'Electrical Engineer',
142:   'Civil Engineer',
143:   'Architect',
144:   'Construction Manager',
145:   'Real Estate Agent',
146:   'Lawyer',
147:   'Paralegal',
148:   'Consultant',
149:   'Business Analyst',
150:   'Systems Analyst',
151:   'Network Administrator',
152:   'Database Administrator',
153:   'Security Analyst',
154:   'Chef',
155:   'Restaurant Manager',
156:   'Retail Manager',
157:   'Store Manager',
158:   'Warehouse Manager',
159:   'Logistics Coordinator',
160:   'Finance Manager',
161:   'Sales Associate',
162:   'Marketing Director',
163:   'Chief Technology Officer',
164:   'Chief Executive Officer',
165:   'Vice President'
166: ].sort()
167: 
168: /**
169:  * Get experience level label based on years
170:  */
171: export function getExperienceLevelLabel(years: number): string {
172:   if (years === 0) return 'Entry-level'
173:   if (years <= 2) return 'Junior'
174:   if (years <= 5) return 'Mid-level'
175:   if (years <= 10) return 'Senior'
176:   if (years <= 15) return 'Lead/Principal'
177:   return 'Executive'
178: }
179: 
180: /**
181:  * Save quiz progress to localStorage
182:  */
183: export function saveQuizProgress(answers: Partial<QuizAnswers>, currentStep: number) {
184:   if (typeof window === 'undefined') return
185:   
186:   try {
187:     localStorage.setItem('onboarding:quiz:progress', JSON.stringify({
188:       answers,
189:       currentStep,
190:       savedAt: new Date().toISOString()
191:     }))
192:   } catch (error) {
193:     console.error('[ONBOARDING] Failed to save quiz progress:', error)
194:   }
195: }
196: 
197: /**
198:  * Load quiz progress from localStorage
199:  */
200: export function loadQuizProgress(): { answers: Partial<QuizAnswers>; currentStep: number } | null {
201:   if (typeof window === 'undefined') return null
202:   
203:   try {
204:     const stored = localStorage.getItem('onboarding:quiz:progress')
205:     if (!stored) return null
206:     
207:     const data = JSON.parse(stored)
208:     
209:     // Check if saved within last 24 hours
210:     const savedAt = new Date(data.savedAt)
211:     const now = new Date()
212:     const hoursDiff = (now.getTime() - savedAt.getTime()) / (1000 * 60 * 60)
213:     
214:     if (hoursDiff > 24) {
215:       localStorage.removeItem('onboarding:quiz:progress')
216:       return null
217:     }
218:     
219:     return {
220:       answers: data.answers || {},
221:       currentStep: data.currentStep || 1
222:     }
223:   } catch (error) {
224:     console.error('[ONBOARDING] Failed to load quiz progress:', error)
225:     return null
226:   }
227: }
228: 
229: /**
230:  * Clear quiz progress from localStorage
231:  */
232: export function clearQuizProgress() {
233:   if (typeof window === 'undefined') return
234:   
235:   try {
236:     localStorage.removeItem('onboarding:quiz:progress')
237:   } catch (error) {
238:     console.error('[ONBOARDING] Failed to clear quiz progress:', error)
239:   }
240: }
</file>

<file path="src/lib/pdf-composer.ts">
 1: import { PDFService } from './pdf-service'
 2: 
 3: export class ApplicationPDFComposer {
 4:   private pdfService = PDFService.getInstance()
 5: 
 6:   async generateResumePDF(resumeText: string): Promise<Blob> {
 7:     const result = await this.pdfService.extractText(Buffer.from(resumeText), 'resume.txt')
 8:     if (result.error) {
 9:       throw new Error(result.error)
10:     }
11:     return new Blob([result.text], { type: 'application/pdf' })
12:   }
13: 
14:   async generateCoverLetterPDF(coverLetter: string): Promise<Blob> {
15:     const result = await this.pdfService.extractText(Buffer.from(coverLetter), 'cover-letter.txt')
16:     if (result.error) {
17:       throw new Error(result.error)
18:     }
19:     return new Blob([result.text], { type: 'application/pdf' })
20:   }
21: 
22:   async generateApplicationPackage(resumeText: string, coverLetter: string, jobData: any) {
23:     const resumePDF = await this.generateResumePDF(resumeText)
24:     const coverLetterPDF = await this.generateCoverLetterPDF(coverLetter)
25: 
26:     return {
27:       resumePDF,
28:       coverLetterPDF,
29:       emailTemplate: `Subject: Application for ${jobData.title}\n\n${coverLetter}`
30:     }
31:   }
32: }
</file>

<file path="src/lib/pdf-generator.ts">
 1: // PDF generation functionality using jsPDF library
 2: import { jsPDF } from 'jspdf'
 3: 
 4: export async function generateResumePDF(resumeData: { text: string; name?: string }): Promise<Blob> {
 5:   try {
 6:     const doc = new jsPDF()
 7:     const pageWidth = doc.internal.pageSize.getWidth()
 8:     const margins = { top: 20, left: 20, right: 20, bottom: 20 }
 9:     const maxWidth = pageWidth - margins.left - margins.right
10:     
11:     // Add title
12:     doc.setFontSize(16)
13:     doc.setFont('helvetica', 'bold')
14:     doc.text(resumeData.name || 'Resume', margins.left, margins.top)
15:     
16:     // Add content
17:     doc.setFontSize(11)
18:     doc.setFont('helvetica', 'normal')
19:     
20:     const lines = doc.splitTextToSize(resumeData.text, maxWidth)
21:     let currentY = margins.top + 10
22:     const lineHeight = 7
23:     const pageHeight = doc.internal.pageSize.getHeight()
24:     
25:     lines.forEach((line: string) => {
26:       if (currentY + lineHeight > pageHeight - margins.bottom) {
27:         doc.addPage()
28:         currentY = margins.top
29:       }
30:       doc.text(line, margins.left, currentY)
31:       currentY += lineHeight
32:     })
33:     
34:     // Convert to Blob
35:     const pdfBlob = doc.output('blob')
36:     return pdfBlob
37:   } catch (error) {
38:     console.error('PDF generation error:', error)
39:     throw new Error('Failed to generate PDF')
40:   }
41: }
</file>

<file path="src/lib/pdf-service.ts">
 1: import pdfParse from 'pdf-parse-debugging-disabled'
 2: 
 3: interface PDFExtractionResult {
 4:   text: string
 5:   method: 'text-extraction' | 'ocr-fallback' | 'manual-input'
 6:   confidence: number
 7:   error?: string
 8: }
 9: 
10: export class PDFService {
11:   private static instance: PDFService
12: 
13:   static getInstance(): PDFService {
14:     if (!PDFService.instance) {
15:       PDFService.instance = new PDFService()
16:     }
17:     return PDFService.instance
18:   }
19: 
20:   async extractText(buffer: Buffer, filename: string): Promise<PDFExtractionResult> {
21:     try {
22:       // Validate PDF
23:       if (!this.isPDF(buffer)) {
24:         throw new Error('Invalid PDF file')
25:       }
26: 
27:       // Try text extraction first (using pdf-parse-debugging-disabled to avoid test file issues)
28:       const result = await pdfParse(buffer)
29:       const text = this.cleanText(result.text)
30: 
31:       if (text.length > 100) {
32:         return {
33:           text,
34:           method: 'text-extraction',
35:           confidence: 0.95
36:         }
37:       }
38: 
39:       // If text is too short, try manual parsing
40:       return {
41:         text: '',
42:         method: 'manual-input',
43:         confidence: 0,
44:         error: 'PDF text extraction resulted in insufficient content. Please paste your resume text instead.'
45:       }
46: 
47:     } catch (error) {
48:       return {
49:         text: '',
50:         method: 'manual-input',
51:         confidence: 0,
52:         error: `PDF processing failed: ${(error as Error).message}`
53:       }
54:     }
55:   }
56: 
57:   private isPDF(buffer: Buffer): boolean {
58:     const pdfSignature = buffer.subarray(0, 4)
59:     return pdfSignature.toString() === '%PDF'
60:   }
61: 
62:   private cleanText(text: string): string {
63:     return text
64:       .replace(/\s+/g, ' ')
65:       .replace(/[^\w\s\-.,;:()\[\]{}'"@#$%&*+=<>?!/\\|`~]/g, '')
66:       .trim()
67:   }
68: }
</file>

<file path="src/lib/performance-monitor.ts">
  1: // Enterprise Performance Monitoring Service
  2: // Tracks API performance, resource usage, and application metrics
  3: 
  4: import { Logger } from './logger'
  5: 
  6: const logger = Logger.getInstance('PERFORMANCE')
  7: 
  8: export interface PerformanceMetric {
  9:   name: string
 10:   value: number
 11:   unit: 'ms' | 'bytes' | 'count' | 'percentage'
 12:   timestamp: number
 13:   tags?: Record<string, string>
 14: }
 15: 
 16: export interface APIMetric {
 17:   endpoint: string
 18:   method: string
 19:   duration: number
 20:   statusCode: number
 21:   userId?: string
 22:   cached?: boolean
 23:   timestamp: number
 24: }
 25: 
 26: export class PerformanceMonitor {
 27:   private static instance: PerformanceMonitor
 28:   private metrics: PerformanceMetric[] = []
 29:   private apiMetrics: APIMetric[] = []
 30:   private readonly maxMetrics = 1000 // Keep last 1000 metrics
 31: 
 32:   static getInstance(): PerformanceMonitor {
 33:     if (!PerformanceMonitor.instance) {
 34:       PerformanceMonitor.instance = new PerformanceMonitor()
 35:     }
 36:     return PerformanceMonitor.instance
 37:   }
 38: 
 39:   // Track API performance
 40:   trackAPI(metric: APIMetric): void {
 41:     this.apiMetrics.push(metric)
 42: 
 43:     // Keep only recent metrics
 44:     if (this.apiMetrics.length > this.maxMetrics) {
 45:       this.apiMetrics.shift()
 46:     }
 47: 
 48:     // Log slow requests (> 2 seconds)
 49:     if (metric.duration > 2000) {
 50:       logger.warn('Slow API request detected', {
 51:         endpoint: metric.endpoint,
 52:         duration: `${metric.duration}ms`,
 53:         statusCode: metric.statusCode
 54:       })
 55:     }
 56: 
 57:     // Log errors
 58:     if (metric.statusCode >= 500) {
 59:       logger.error('API error', {
 60:         endpoint: metric.endpoint,
 61:         statusCode: metric.statusCode,
 62:         duration: `${metric.duration}ms`
 63:       })
 64:     }
 65:   }
 66: 
 67:   // Track custom performance metrics
 68:   trackMetric(metric: PerformanceMetric): void {
 69:     this.metrics.push({
 70:       ...metric,
 71:       timestamp: Date.now()
 72:     })
 73: 
 74:     // Keep only recent metrics
 75:     if (this.metrics.length > this.maxMetrics) {
 76:       this.metrics.shift()
 77:     }
 78: 
 79:     logger.debug('Performance metric tracked', {
 80:       name: metric.name,
 81:       value: `${metric.value} ${metric.unit}`,
 82:       tags: metric.tags
 83:     })
 84:   }
 85: 
 86:   // Get performance statistics
 87:   getAPIStats(timeWindow: number = 3600000): {
 88:     avgDuration: number
 89:     p95Duration: number
 90:     p99Duration: number
 91:     errorRate: number
 92:     totalRequests: number
 93:     slowRequests: number
 94:   } {
 95:     const now = Date.now()
 96:     const recentMetrics = this.apiMetrics.filter(
 97:       m => now - m.timestamp < timeWindow
 98:     )
 99: 
100:     if (recentMetrics.length === 0) {
101:       return {
102:         avgDuration: 0,
103:         p95Duration: 0,
104:         p99Duration: 0,
105:         errorRate: 0,
106:         totalRequests: 0,
107:         slowRequests: 0
108:       }
109:     }
110: 
111:     // Sort by duration
112:     const sorted = [...recentMetrics].sort((a, b) => a.duration - b.duration)
113: 
114:     // Calculate percentiles
115:     const p95Index = Math.floor(sorted.length * 0.95)
116:     const p99Index = Math.floor(sorted.length * 0.99)
117: 
118:     const avgDuration = 
119:       recentMetrics.reduce((sum, m) => sum + m.duration, 0) / recentMetrics.length
120: 
121:     const errorCount = recentMetrics.filter(m => m.statusCode >= 500).length
122:     const slowCount = recentMetrics.filter(m => m.duration > 2000).length
123: 
124:     return {
125:       avgDuration: Math.round(avgDuration),
126:       p95Duration: Math.round(sorted[p95Index]?.duration || 0),
127:       p99Duration: Math.round(sorted[p99Index]?.duration || 0),
128:       errorRate: (errorCount / recentMetrics.length) * 100,
129:       totalRequests: recentMetrics.length,
130:       slowRequests: slowCount
131:     }
132:   }
133: 
134:   // Get endpoint-specific stats
135:   getEndpointStats(endpoint: string, timeWindow: number = 3600000): {
136:     avgDuration: number
137:     requestCount: number
138:     errorCount: number
139:     cacheHitRate: number
140:   } {
141:     const now = Date.now()
142:     const endpointMetrics = this.apiMetrics.filter(
143:       m => m.endpoint === endpoint && now - m.timestamp < timeWindow
144:     )
145: 
146:     if (endpointMetrics.length === 0) {
147:       return {
148:         avgDuration: 0,
149:         requestCount: 0,
150:         errorCount: 0,
151:         cacheHitRate: 0
152:       }
153:     }
154: 
155:     const avgDuration =
156:       endpointMetrics.reduce((sum, m) => sum + m.duration, 0) / endpointMetrics.length
157: 
158:     const errorCount = endpointMetrics.filter(m => m.statusCode >= 500).length
159:     const cachedCount = endpointMetrics.filter(m => m.cached).length
160: 
161:     return {
162:       avgDuration: Math.round(avgDuration),
163:       requestCount: endpointMetrics.length,
164:       errorCount,
165:       cacheHitRate: (cachedCount / endpointMetrics.length) * 100
166:     }
167:   }
168: 
169:   // Get top slowest endpoints
170:   getSlowestEndpoints(limit: number = 10, timeWindow: number = 3600000): Array<{
171:     endpoint: string
172:     avgDuration: number
173:     requestCount: number
174:   }> {
175:     const now = Date.now()
176:     const recentMetrics = this.apiMetrics.filter(
177:       m => now - m.timestamp < timeWindow
178:     )
179: 
180:     // Group by endpoint
181:     const endpointMap = new Map<string, number[]>()
182:     for (const metric of recentMetrics) {
183:       if (!endpointMap.has(metric.endpoint)) {
184:         endpointMap.set(metric.endpoint, [])
185:       }
186:       endpointMap.get(metric.endpoint)!.push(metric.duration)
187:     }
188: 
189:     // Calculate averages and sort
190:     const results = Array.from(endpointMap.entries()).map(([endpoint, durations]) => ({
191:       endpoint,
192:       avgDuration: Math.round(durations.reduce((a, b) => a + b, 0) / durations.length),
193:       requestCount: durations.length
194:     }))
195: 
196:     return results
197:       .sort((a, b) => b.avgDuration - a.avgDuration)
198:       .slice(0, limit)
199:   }
200: 
201:   // Clear old metrics
202:   cleanup(): void {
203:     const oneHourAgo = Date.now() - 3600000
204:     this.apiMetrics = this.apiMetrics.filter(m => m.timestamp > oneHourAgo)
205:     this.metrics = this.metrics.filter(m => m.timestamp > oneHourAgo)
206: 
207:     logger.info('Performance metrics cleaned up', {
208:       remainingAPIMetrics: this.apiMetrics.length,
209:       remainingMetrics: this.metrics.length
210:     })
211:   }
212: 
213:   // Export metrics for external monitoring
214:   exportMetrics(): {
215:     api: APIMetric[]
216:     custom: PerformanceMetric[]
217:     stats: {
218:       avgDuration: number
219:       p95Duration: number
220:       p99Duration: number
221:       errorRate: number
222:       totalRequests: number
223:       slowRequests: number
224:     }
225:   } {
226:     return {
227:       api: this.apiMetrics,
228:       custom: this.metrics,
229:       stats: this.getAPIStats()
230:     }
231:   }
232: }
233: 
234: // Middleware helper for Next.js API routes
235: export function withPerformanceTracking(
236:   handler: Function,
237:   endpoint: string
238: ): Function {
239:   return async (...args: any[]) => {
240:     const start = Date.now()
241:     const monitor = PerformanceMonitor.getInstance()
242: 
243:     try {
244:       const result = await handler(...args)
245:       const duration = Date.now() - start
246: 
247:       monitor.trackAPI({
248:         endpoint,
249:         method: args[0]?.method || 'UNKNOWN',
250:         duration,
251:         statusCode: result?.status || 200,
252:         timestamp: start
253:       })
254: 
255:       return result
256:     } catch (error) {
257:       const duration = Date.now() - start
258: 
259:       monitor.trackAPI({
260:         endpoint,
261:         method: args[0]?.method || 'UNKNOWN',
262:         duration,
263:         statusCode: 500,
264:         timestamp: start
265:       })
266: 
267:       throw error
268:     }
269:   }
270: }
271: 
272: // Browser-side performance tracking
273: export function trackWebVitals(metric: any): void {
274:   const monitor = PerformanceMonitor.getInstance()
275: 
276:   // Track Web Vitals
277:   monitor.trackMetric({
278:     name: `web_vital_${metric.name}`,
279:     value: Math.round(metric.value),
280:     unit: 'ms',
281:     timestamp: Date.now(),
282:     tags: {
283:       id: metric.id,
284:       label: metric.label || 'custom'
285:     }
286:   })
287: 
288:   // Send to analytics if available
289:   if (typeof window !== 'undefined' && (window as any).gtag) {
290:     (window as any).gtag('event', metric.name, {
291:       value: Math.round(metric.value),
292:       metric_id: metric.id,
293:       metric_value: metric.value,
294:       metric_delta: metric.delta
295:     })
296:   }
297: }
</file>

<file path="src/lib/performance-utils.ts">
  1: /**
  2:  * Performance Optimization Utilities
  3:  * Fixes ISSUE #9: Slow performance
  4:  */
  5: 
  6: /**
  7:  * Debounce function calls to prevent excessive API requests
  8:  */
  9: export function debounce<T extends (...args: unknown[]) => unknown>(
 10:   func: T,
 11:   wait: number
 12: ): (...args: Parameters<T>) => void {
 13:   let timeout: NodeJS.Timeout | null = null
 14:   
 15:   return function executedFunction(...args: Parameters<T>) {
 16:     const later = () => {
 17:       timeout = null
 18:       func(...args)
 19:     }
 20:     
 21:     if (timeout) {
 22:       clearTimeout(timeout)
 23:     }
 24:     timeout = setTimeout(later, wait)
 25:   }
 26: }
 27: 
 28: /**
 29:  * Throttle function calls to limit execution rate
 30:  */
 31: export function throttle<T extends (...args: unknown[]) => unknown>(
 32:   func: T,
 33:   limit: number
 34: ): (...args: Parameters<T>) => void {
 35:   let inThrottle = false
 36:   
 37:   return function executedFunction(...args: Parameters<T>) {
 38:     if (!inThrottle) {
 39:       func(...args)
 40:       inThrottle = true
 41:       setTimeout(() => {
 42:         inThrottle = false
 43:       }, limit)
 44:     }
 45:   }
 46: }
 47: 
 48: /**
 49:  * Simple in-memory cache with TTL
 50:  */
 51: interface CacheEntry<T> {
 52:   data: T
 53:   timestamp: number
 54: }
 55: 
 56: class SimpleCache {
 57:   private cache = new Map<string, CacheEntry<unknown>>()
 58:   
 59:   set<T>(key: string, data: T): void {
 60:     this.cache.set(key, {
 61:       data,
 62:       timestamp: Date.now()
 63:     })
 64:   }
 65:   
 66:   get<T>(key: string, ttlMs = 300000): T | null {
 67:     const entry = this.cache.get(key) as CacheEntry<T> | undefined
 68:     
 69:     if (!entry) {
 70:       return null
 71:     }
 72:     
 73:     // Check if expired
 74:     if (Date.now() - entry.timestamp > ttlMs) {
 75:       this.cache.delete(key)
 76:       return null
 77:     }
 78:     
 79:     return entry.data
 80:   }
 81:   
 82:   has(key: string, ttlMs = 300000): boolean {
 83:     return this.get(key, ttlMs) !== null
 84:   }
 85:   
 86:   clear(): void {
 87:     this.cache.clear()
 88:   }
 89:   
 90:   delete(key: string): void {
 91:     this.cache.delete(key)
 92:   }
 93: }
 94: 
 95: export const apiCache = new SimpleCache()
 96: 
 97: /**
 98:  * Cached fetch wrapper
 99:  */
100: export async function cachedFetch<T>(
101:   url: string,
102:   options: RequestInit = {},
103:   cacheTtlMs = 300000
104: ): Promise<T> {
105:   const cacheKey = `${url}::${JSON.stringify(options.body || '')}`
106:   
107:   // Check cache
108:   const cached = apiCache.get<T>(cacheKey, cacheTtlMs)
109:   if (cached) {
110:     console.log('[CACHE] HIT:', url)
111:     return cached
112:   }
113:   
114:   // Fetch from API
115:   console.log('[CACHE] MISS:', url)
116:   const response = await fetch(url, options)
117:   
118:   if (!response.ok) {
119:     throw new Error(`HTTP ${response.status}`)
120:   }
121:   
122:   const data = await response.json() as T
123:   
124:   // Cache result
125:   apiCache.set(cacheKey, data)
126:   
127:   return data
128: }
129: 
130: /**
131:  * Batch processor for API calls
132:  */
133: export class BatchProcessor<T> {
134:   private queue: Array<() => Promise<T>> = []
135:   private processing = false
136:   private batchSize: number
137:   private delayMs: number
138:   
139:   constructor(batchSize = 3, delayMs = 2000) {
140:     this.batchSize = batchSize
141:     this.delayMs = delayMs
142:   }
143:   
144:   add(operation: () => Promise<T>): void {
145:     this.queue.push(operation)
146:     
147:     if (!this.processing) {
148:       this.process()
149:     }
150:   }
151:   
152:   private async process(): Promise<void> {
153:     if (this.queue.length === 0) {
154:       this.processing = false
155:       return
156:     }
157:     
158:     this.processing = true
159:     
160:     // Process batch
161:     const batch = this.queue.splice(0, this.batchSize)
162:     
163:     console.log(`[BATCH] Processing ${batch.length} operations`)
164:     
165:     try {
166:       await Promise.all(batch.map(op => op().catch(err => {
167:         console.error('[BATCH] Operation failed:', err)
168:         return null
169:       })))
170:     } catch (error) {
171:       console.error('[BATCH] Batch error:', error)
172:     }
173:     
174:     // Wait before next batch
175:     if (this.queue.length > 0) {
176:       await new Promise(resolve => setTimeout(resolve, this.delayMs))
177:       this.process()
178:     } else {
179:       this.processing = false
180:     }
181:   }
182:   
183:   clear(): void {
184:     this.queue = []
185:     this.processing = false
186:   }
187:   
188:   get queueLength(): number {
189:     return this.queue.length
190:   }
191: }
</file>

<file path="src/lib/perplexity-job-search.ts">
  1: import { PerplexityIntelligenceService } from './perplexity-intelligence'
  2: 
  3: // Define proper types (exported for reuse)
  4: export interface Job {
  5:   title: string
  6:   company: string
  7:   location: string
  8:   description: string
  9:   url: string
 10:   salary?: string | undefined
 11:   postedDate?: string
 12:   source: string
 13:   workType?: 'Full-time' | 'Part-time' | 'Contract' | 'Remote'
 14:   experienceLevel?: 'entry' | 'mid' | 'senior'
 15:   isCanadian: boolean
 16:   matchScore: number
 17:   jobId: string
 18: }
 19: 
 20: export interface JobSearchOptions {
 21:   experienceLevel?: 'entry' | 'mid' | 'senior'
 22:   remote?: boolean
 23:   salaryMin?: number
 24:   limit?: number
 25: }
 26: 
 27: export interface JobMarketAnalysis {
 28:   demand: 'high' | 'medium' | 'low'
 29:   averageSalary: { min: number; max: number; currency: string }
 30:   topSkills: string[]
 31:   topCompanies: string[]
 32:   growthTrend: 'increasing' | 'stable' | 'declining'
 33:   totalOpenings: number
 34: }
 35: 
 36: export class PerplexityJobSearchService {
 37:   
 38:   private static readonly JOB_BOARDS = [
 39:     { name: 'Job Bank Canada', domain: 'jobbank.gc.ca', isCanadian: true },
 40:     { name: 'Indeed Canada', domain: 'ca.indeed.com', isCanadian: true },
 41:     { name: 'LinkedIn Jobs', domain: 'linkedin.com/jobs', isCanadian: false },
 42:     { name: 'Workopolis', domain: 'workopolis.com', isCanadian: true },
 43:     { name: 'Glassdoor Canada', domain: 'glassdoor.ca', isCanadian: true }
 44:   ] as const
 45:   
 46:   // FIXED: Parallel API calls, dynamic dates, proper types
 47:   static async searchCanadianJobs(
 48:     keywords: string, 
 49:     location: string, 
 50:     options: JobSearchOptions = {}
 51:   ): Promise<Job[]> {
 52:     const startTime = Date.now()
 53:     const { experienceLevel, remote, salaryMin, limit = 25 } = options
 54:     
 55:     // Dynamic date filter (last 30 days)
 56:     const dateFilter = this.getDateFilter(30)
 57:     
 58:     // Build search queries
 59:     const queries = this.JOB_BOARDS.map(board => {
 60:       let query = `site:${board.domain} "${keywords}" "${location}" ${dateFilter}` 
 61:       
 62:       if (experienceLevel) query += ` "${experienceLevel} level"` 
 63:       if (remote) query += ` "remote"` 
 64:       if (salaryMin) query += ` salary:>${salaryMin}` 
 65:       
 66:       return { query, board }
 67:     })
 68:     
 69:     // PARALLEL API CALLS
 70:     const results = await Promise.allSettled(
 71:       queries.map(({ query, board }) => 
 72:         this.fetchJobsFromQuery(query, board.name, Math.ceil(limit / queries.length))
 73:       )
 74:     )
 75:     
 76:     // Collect all successful results
 77:     const allJobs: Job[] = []
 78:     results.forEach((result, index) => {
 79:       if (result.status === 'fulfilled') {
 80:         allJobs.push(...result.value)
 81:         console.log(`[${queries[index].board.name}] Found ${result.value.length} jobs`)
 82:       } else {
 83:         console.error(`[${queries[index].board.name}] Failed:`, result.reason)
 84:       }
 85:     })
 86:     
 87:     const finalJobs = this.deduplicateAndRank(allJobs, limit)
 88:     
 89:     // Performance metrics
 90:     const duration = Date.now() - startTime
 91:     console.log(`[PERPLEXITY_JOB_SEARCH] Completed in ${duration}ms. Found ${allJobs.length} total, returned ${finalJobs.length} after dedup/ranking`)
 92:     
 93:     return finalJobs
 94:   }
 95:   
 96:   // FIXED: Proper job market analysis method
 97:   static async analyzeJobMarket(
 98:     keywords: string, 
 99:     location: string
100:   ): Promise<JobMarketAnalysis | null> {
101:     const query = `
102:       Analyze the job market for "${keywords}" roles in "${location}", Canada:
103:       1. Current demand level (high/medium/low)
104:       2. Average salary range in CAD
105:       3. Top 5 in-demand skills for this role
106:       4. Top 5 companies actively hiring
107:       5. Market growth trend (increasing/stable/declining)
108:       6. Total estimated open positions
109:       
110:       Return as JSON:
111:       {
112:         "demand": "high",
113:         "averageSalary": {"min": 75000, "max": 95000, "currency": "CAD"},
114:         "topSkills": ["skill1", "skill2", ...],
115:         "topCompanies": ["company1", "company2", ...],
116:         "growthTrend": "increasing",
117:         "totalOpenings": 150
118:       }
119:     `
120:     
121:     try {
122:       // FIXED: Use correct method from PerplexityIntelligenceService
123:       const response = await PerplexityIntelligenceService.customQuery({
124:         systemPrompt: 'You are a labor market analyst. Return only valid JSON with no markdown.',
125:         userPrompt: query,
126:         temperature: 0.2,
127:         maxTokens: 2000
128:       })
129:       
130:       // Parse JSON response
131:       let content = typeof response === 'string' ? response : (response as any).content || JSON.stringify(response)
132:       
133:       // Remove markdown code blocks
134:       content = content.replace(/```(?:json)?\s*/g, '')
135:       
136:       const jsonMatch = content.match(/\{[\s\S]*\}/)
137:       if (jsonMatch) {
138:         return JSON.parse(jsonMatch[0])
139:       }
140:     } catch (error) {
141:       console.error('Job market analysis failed:', error)
142:     }
143:     
144:     return null
145:   }
146:   
147:   // FIXED: Proper job details extraction
148:   static async getJobDetails(jobUrl: string): Promise<Partial<Job> | null> {
149:     const query = `
150:       Extract complete job details from ${jobUrl}:
151:       - Title
152:       - Company name
153:       - Location
154:       - Salary/compensation
155:       - Required experience
156:       - Key responsibilities (top 5)
157:       - Required skills
158:       - Benefits
159:       - Application deadline
160:       
161:       Return as JSON.
162:     `
163:     
164:     try {
165:       const hostname = new URL(jobUrl).hostname
166:       const results = await PerplexityIntelligenceService.jobQuickSearch(
167:         query,
168:         [hostname],
169:         1,
170:         'day'
171:       )
172:       
173:       if (results && results.length > 0) {
174:         return this.parseJobDetails(results[0], jobUrl)
175:       }
176:     } catch (error) {
177:       console.error('Job details extraction failed:', error)
178:     }
179:     
180:     return null
181:   }
182:   
183:   // HELPER: Fetch jobs from single query
184:   // FIXED: Handle unknown result structure
185:   private static async fetchJobsFromQuery(
186:     query: string, 
187:     source: string, 
188:     limit: number
189:   ): Promise<Job[]> {
190:     try {
191:       const results = await PerplexityIntelligenceService.jobQuickSearch(
192:         query,
193:         [], // Auto-detect domains
194:         limit,
195:         'week'
196:       )
197:       
198:       if (!results || !Array.isArray(results)) {
199:         console.warn(`Invalid results from query: ${query}`)
200:         return []
201:       }
202:       
203:       return results.map((result: any) => ({
204:         title: result.title || result.name || 'Unknown Title',
205:         company: this.extractCompany(result.snippet || result.description || ''),
206:         location: this.extractLocation(result.snippet || result.description || ''),
207:         description: result.snippet || result.description || '',
208:         url: result.url || result.link || '',
209:         salary: this.extractSalary(`${result.title || ''} ${result.snippet || ''}`) || undefined,
210:         postedDate: result.postedDate || result.date || result.published,
211:         source,
212:         isCanadian: this.isCanadianJobSite(result.url || result.link || ''),
213:         matchScore: 0, // Will be calculated in deduplicateAndRank
214:         jobId: this.generateJobId(result.url || result.link || '')
215:       }))
216:     } catch (error) {
217:       console.error(`Query failed: ${query}`, error)
218:       return []
219:     }
220:   }
221:   
222:   // FIXED: Deterministic ranking, no random scores
223:   private static deduplicateAndRank(jobs: Job[], limit: number): Job[] {
224:     if (jobs.length === 0) {
225:       console.warn('[PERPLEXITY_JOB_SEARCH] No jobs to process')
226:       return []
227:     }
228:     
229:     // Deduplicate by URL
230:     const uniqueJobs = new Map<string, Job>()
231:     jobs.forEach(job => {
232:       if (!uniqueJobs.has(job.url)) {
233:         uniqueJobs.set(job.url, {
234:           ...job,
235:           matchScore: this.calculateMatchScore(job)
236:         })
237:       }
238:     })
239:     
240:     // Sort by: Canadian first, then match score, then date
241:     const sortedJobs = Array.from(uniqueJobs.values()).sort((a, b) => {
242:       if (a.isCanadian && !b.isCanadian) return -1
243:       if (b.isCanadian && !a.isCanadian) return 1
244:       if (Math.abs(a.matchScore - b.matchScore) > 5) {
245:         return b.matchScore - a.matchScore
246:       }
247:       // Tie-breaker: most recent
248:       if (a.postedDate && b.postedDate) {
249:         return new Date(b.postedDate).getTime() - new Date(a.postedDate).getTime()
250:       }
251:       return 0
252:     })
253:     
254:     return sortedJobs.slice(0, limit)
255:   }
256:   
257:   // FIXED: Deterministic scoring based on actual relevance
258:   private static calculateMatchScore(job: Job): number {
259:     let score = 50 // Base score
260:     
261:     const content = `${job.title} ${job.description} ${job.location}`.toLowerCase()
262:     
263:     // Recency (up to +30 points)
264:     if (job.postedDate) {
265:       const daysAgo = this.getDaysAgo(job.postedDate)
266:       if (daysAgo <= 1) score += 30
267:       else if (daysAgo <= 3) score += 25
268:       else if (daysAgo <= 7) score += 20
269:       else if (daysAgo <= 14) score += 10
270:     }
271:     
272:     // Job type (+15 points for full-time)
273:     if (/\b(?:full.?time|permanent|career)\b/i.test(content)) score += 15
274:     
275:     // Canadian location (+10 points)
276:     if (/\b(?:canada|canadian|toronto|vancouver|montreal|calgary|ottawa)\b/i.test(content)) {
277:       score += 10
278:     }
279:     
280:     // Salary transparency (+10 points)
281:     if (job.salary) score += 10
282:     
283:     // Description quality (+5 points for detailed descriptions)
284:     if (job.description && job.description.length > 200) score += 5
285:     
286:     return Math.min(100, score)
287:   }
288:   
289:   // HELPER: Shared salary extraction (no duplication)
290:   private static extractSalary(text: string): string | null {
291:     const salaryRegex = /\$[\d,]+(?:\s*-\s*\$?[\d,]+)?(?:\s*(?:per|\/)\s*(?:hour|year|annum))?/i
292:     const match = text.match(salaryRegex)
293:     return match ? match[0] : null
294:   }
295:   
296:   // HELPER: Dynamic date filter
297:   private static getDateFilter(days: number): string {
298:     const date = new Date()
299:     date.setDate(date.getDate() - days)
300:     return `after:${date.toISOString().split('T')[0]}` 
301:   }
302:   
303:   // FIXED: Handle invalid dates
304:   private static getDaysAgo(dateString: string): number {
305:     const posted = new Date(dateString)
306:     
307:     if (isNaN(posted.getTime())) {
308:       console.warn(`Invalid date: ${dateString}`)
309:       return 999 // Return high number to deprioritize
310:     }
311:     
312:     const now = new Date()
313:     const diffMs = now.getTime() - posted.getTime()
314:     return Math.floor(diffMs / (1000 * 60 * 60 * 24))
315:   }
316:   
317:   // HELPER: Check if Canadian job site
318:   private static isCanadianJobSite(url: string): boolean {
319:     return /jobbank\.gc\.ca|indeed\.ca|workopolis\.com|glassdoor\.ca/i.test(url)
320:   }
321:   
322:   // FIXED: Universal hash function (no crypto/Buffer dependency)
323:   private static generateJobId(url: string): string {
324:     let hash = 0
325:     for (let i = 0; i < url.length; i++) {
326:       const char = url.charCodeAt(i)
327:       hash = ((hash << 5) - hash) + char
328:       hash = hash & hash // Convert to 32bit integer
329:     }
330:     return `job-${Math.abs(hash).toString(36).padStart(16, '0').substring(0, 16)}`
331:   }
332:   
333:   // HELPER: Parse job details from Perplexity response
334:   private static parseJobDetails(result: any, url: string): Partial<Job> {
335:     const text = `${result.title || ''} ${result.snippet || ''}` 
336:     
337:     return {
338:       title: result.title || 'Unknown Title',
339:       company: this.extractCompany(text),
340:       location: this.extractLocation(text),
341:       salary: this.extractSalary(text) || undefined,
342:       description: result.snippet || '',
343:       url: url,
344:       source: this.extractSourceName(url)
345:     }
346:   }
347:   
348:   // HELPER: Extract company name
349:   private static extractCompany(text: string): string {
350:     const patterns = [
351:       /at\s+([A-Z][a-zA-Z\s&]+?)(?:\s+is\s+|\s+seeks\s+|\.|,)/,
352:       /([A-Z][a-zA-Z\s&]+?)\s+is\s+(?:hiring|seeking|looking)/
353:     ]
354:     
355:     for (const pattern of patterns) {
356:       const match = text.match(pattern)
357:       if (match) return match[1].trim()
358:     }
359:     
360:     return 'Unknown Company'
361:   }
362:   
363:   // HELPER: Extract location
364:   private static extractLocation(text: string): string {
365:     const locationPattern = /(?:in|at|located)\s+([A-Z][a-zA-Z\s,]+?(?:,\s*[A-Z]{2})?)\b/
366:     const match = text.match(locationPattern)
367:     return match ? match[1].trim() : 'Location Not Specified'
368:   }
369:   
370:   // HELPER: Extract source name from URL
371:   private static extractSourceName(url: string): string {
372:     try {
373:       const hostname = new URL(url).hostname.replace('www.', '')
374:       const board = this.JOB_BOARDS.find(b => hostname.includes(b.domain))
375:       return board ? board.name : hostname
376:     } catch (error) {
377:       console.error(`Failed to parse URL: ${url}`, error)
378:       return url
379:     }
380:   }
381: }
</file>

<file path="src/lib/perplexity-service.ts">
  1: export class PerplexityService {
  2:   private readonly apiKey: string
  3:   private readonly baseURL = (process.env.PERPLEXITY_BASE_URL || 'https://api.perplexity.ai') + '/chat/completions'
  4:   private readonly defaultModel = process.env.PERPLEXITY_MODEL || 'sonar-pro'
  5:   private static memoryCache: Map<string, { expiresAt: number; value: { content: string; usage?: unknown; cost: number } }> = new Map()
  6:   private static inflightRequests: Map<string, Promise<{ content: string; usage?: unknown; cost: number }>> = new Map()
  7:   private static defaultTtlMs = Number(process.env.PPX_CACHE_TTL_MS || 24*60*60*1000)
  8:   private readonly debug: boolean = process.env.NODE_ENV === 'development' || process.env.PPX_DEBUG === 'true'
  9: 
 10:   constructor(apiKey?: string) {
 11:     const key = apiKey || process.env.PERPLEXITY_API_KEY
 12:     // Do not throw during construction to avoid build-time failures.
 13:     // Validate at request-time in makeRequest instead.
 14:     this.apiKey = key || ''
 15:     if (this.debug) {
 16:       console.log('🔧 PerplexityService Debug Info:')
 17:       console.log('   API Key:', this.apiKey ? `${this.apiKey.slice(0, 8)}...` : '❌ MISSING')
 18:       console.log('   Base URL:', this.baseURL)
 19:       console.log('   Default Model:', this.defaultModel)
 20:     }
 21:   }
 22: 
 23:   async makeRequest(
 24:     systemPrompt: string,
 25:     userPrompt: string,
 26:     options: { maxTokens?: number; temperature?: number; model?: string } = {}
 27:   ): Promise<{ content: string; usage?: unknown; cost: number }> {
 28:     if (this.debug) {
 29:       console.log('🚀 Perplexity Request:')
 30:       console.log('   System:', systemPrompt.slice(0, 100) + '...')
 31:       console.log('   User:', userPrompt.slice(0, 100) + '...')
 32:       console.log('   Model:', options.model || this.defaultModel)
 33:     }
 34:     if (!this.apiKey) {
 35:       throw new Error('PERPLEXITY_API_KEY missing')
 36:     }
 37:     const key = this.makeCacheKey(systemPrompt, userPrompt, options)
 38:     const cached = PerplexityService.memoryCache.get(key)
 39:     if (cached && cached.expiresAt > Date.now()) {
 40:       if (this.debug) console.log('💾 Cache hit for request')
 41:       return cached.value
 42:     }
 43: 
 44:     const inflight = PerplexityService.inflightRequests.get(key)
 45:     if (inflight) {
 46:       if (this.debug) console.log('🔁 Awaiting existing in-flight request')
 47:       return inflight
 48:     }
 49: 
 50:     const payload = {
 51:       model: options.model || this.defaultModel,
 52:       messages: [
 53:         { role: 'system', content: systemPrompt },
 54:         { role: 'user', content: userPrompt },
 55:       ],
 56:       max_tokens: Math.min(options.maxTokens || 2000, 8000),
 57:       temperature: Math.max(0, Math.min(2, options.temperature ?? 0.2)),
 58:     }
 59:     if (this.debug) {
 60:       try { console.log('📤 Request payload:', JSON.stringify(payload).slice(0, 400) + '…') } catch {}
 61:     }
 62: 
 63:     // timeout implemented below via AbortController
 64: 
 65:     const requestPromise = (async () => {
 66:       const maxRetries = 3
 67:       let lastErr: unknown
 68:       for (let attempt = 0; attempt < maxRetries; attempt++) {
 69:         try {
 70:           if (this.debug) console.log(`🔄 Attempt ${attempt + 1}/${maxRetries}`)
 71:           const controller = new AbortController()
 72:           const timer = setTimeout(() => controller.abort(), 600000)
 73:           const res: Response = await fetch(this.baseURL, {
 74:             method: 'POST',
 75:             headers: {
 76:               Authorization: `Bearer ${this.apiKey}`,
 77:               'Content-Type': 'application/json',
 78:               'User-Agent': 'CareerLever/1.0'
 79:             },
 80:             body: JSON.stringify(payload),
 81:             signal: controller.signal
 82:           })
 83:           clearTimeout(timer)
 84:           if (this.debug) {
 85:             console.log(`📡 Response status: ${res.status} ${res.statusText}`)
 86:             try {
 87:               const headersObject: Record<string, string> = {}
 88:               res.headers.forEach((value, key) => {
 89:                 headersObject[key] = value
 90:               })
 91:               console.log('📡 Response headers:', headersObject)
 92:             } catch {}
 93:           }
 94:           if (res.status === 429) {
 95:             const retryAfter = res.headers.get('retry-after')
 96:             const backoff = retryAfter ? parseInt(retryAfter) * 1000 : 400 * Math.pow(2, attempt)
 97:             if (this.debug) console.log(`⏳ Rate limited, waiting ${backoff}ms`)
 98:             await new Promise(r=>setTimeout(r, backoff))
 99:             continue
100:           }
101:           if (!res.ok) {
102:             const errorText = await res.text().catch(()=>'')
103:             const error = this.handleApiError(res.status, res.statusText, errorText)
104:             if (this.debug) {
105:               console.error('❌ API Error:', error.message)
106:               if (errorText) console.error('❌ Raw response:', errorText.slice(0, 500))
107:             }
108:             throw error
109:           }
110:           const data: { choices?: Array<{ message?: { content?: string } }>; usage?: unknown } = await res.json()
111:           if (!data?.choices?.[0]?.message?.content) {
112:             const err = new Error(`Invalid response structure: ${JSON.stringify(data).slice(0, 400)}`)
113:             if (this.debug) console.error('❌ Invalid response:', err.message)
114:             throw err
115:           }
116:           const value: { content: string; usage?: unknown; cost: number } = {
117:             content: data.choices[0].message.content,
118:             usage: data?.usage,
119:             cost: this.calculateCost(data?.usage),
120:           }
121:           if (this.debug) {
122:             console.log('✅ Success! Content length:', value.content.length)
123:             if (value.usage) console.log('📊 Usage:', value.usage)
124:             console.log('💰 Cost:', value.cost)
125:           }
126:           PerplexityService.memoryCache.set(key, { expiresAt: Date.now() + PerplexityService.defaultTtlMs, value })
127:           return value
128:         } catch (e: unknown) {
129:           lastErr = e
130:           const msg = (e as Error)?.message || String(e)
131:           if (this.debug) console.error(`❌ Attempt ${attempt + 1} failed:`, msg)
132:           if (msg.includes('401') || msg.includes('403')) break
133:           if (attempt === maxRetries - 1) break
134:           const backoff = 400 * Math.pow(2, attempt)
135:           if (this.debug) console.log(`⏳ Retrying in ${backoff}ms...`)
136:           await new Promise(r=>setTimeout(r, backoff))
137:         }
138:       }
139:       throw lastErr || new Error('Perplexity request failed')
140:     })()
141: 
142:     PerplexityService.inflightRequests.set(key, requestPromise)
143:     try {
144:       return await requestPromise
145:     } finally {
146:       PerplexityService.inflightRequests.delete(key)
147:     }
148:   }
149: 
150:   // Convenience wrapper: choose sonar vs sonar-pro
151:   async chat(userPrompt: string, options: { model?: 'sonar' | 'sonar-pro'; maxTokens?: number; temperature?: number } = {}) {
152:     const system = options.model === 'sonar' ? 'You are a fast search assistant.' : 'You are an analytical research assistant.'
153:     return this.makeRequest(system, userPrompt, { model: options.model || this.defaultModel, maxTokens: options.maxTokens, temperature: options.temperature })
154:   }
155: 
156:   private calculateCost(usage: unknown): number {
157:     if (!usage) return 0
158:     const u = usage as Record<string, unknown>
159:     const promptTokens = Number((u as Record<string, unknown>).prompt_tokens as number ?? 0)
160:     const completionTokens = Number((u as Record<string, unknown>).completion_tokens as number ?? 0)
161:     const inputCost = (promptTokens / 1_000_000) * 3
162:     const outputCost = (completionTokens / 1_000_000) * 15
163:     return inputCost + outputCost
164:   }
165: 
166:   private makeCacheKey(system: string, user: string, options: unknown): string {
167:     // dynamic import is not allowed in sync context; fall back to require typed as unknown
168:     // eslint-disable-next-line @typescript-eslint/no-var-requires
169:     const cryptoMod: typeof import('crypto') = require('crypto')
170:     const h = cryptoMod.createHash('sha256').update(system + '\n' + user + '\n' + JSON.stringify(options || {})).digest('hex')
171:     return `ppx:${h}`
172:   }
173: 
174:   // Health & validation
175:   async healthCheck(): Promise<{ status: 'healthy'|'degraded'|'unhealthy'; details: { apiKey: boolean; connectivity: boolean; model: string; cacheSize: number; responseTime?: number; error?: string } }> {
176:     const details = { apiKey: !!this.apiKey, connectivity: false, model: this.defaultModel, cacheSize: PerplexityService.memoryCache.size }
177:     if (!this.apiKey) return { status: 'unhealthy', details: { ...details, error: 'Missing API key' } }
178:     try {
179:       const started = Date.now()
180:       const res = await this.makeRequest('You are a health check assistant.', 'Respond with exactly: "OK"', { maxTokens: 10, temperature: 0 })
181:       const rt = Date.now() - started
182:       const ok = res.content.trim().toLowerCase().includes('ok')
183:       return { status: ok && rt < 5000 ? 'healthy' : 'degraded', details: { ...details, connectivity: true, responseTime: rt } }
184:     } catch (e: unknown) {
185:       const msg = (e as Error)?.message || 'health failed'
186:       return { status: 'unhealthy', details: { ...details, error: msg } }
187:     }
188:   }
189: 
190:   validateApiKey(): boolean {
191:     if (!this.apiKey) { console.error('❌ PERPLEXITY_API_KEY is missing'); return false }
192:     if (!this.apiKey.startsWith('pplx-')) { console.error('❌ Invalid API key format - should start with "pplx-"'); return false }
193:     if (this.apiKey.length < 20) { console.error('❌ API key seems too short'); return false }
194:     return true
195:   }
196: 
197:   static getCacheStats() {
198:     const stats = { totalEntries: this.memoryCache.size, entriesByAge: { fresh: 0, stale: 0 }, totalSize: 0 }
199:     const now = Date.now()
200:     this.memoryCache.forEach((entry) => {
201:       const age = now - (entry.expiresAt - this.defaultTtlMs)
202:       if (age < this.defaultTtlMs / 2) stats.entriesByAge.fresh++
203:       else stats.entriesByAge.stale++
204:       try { stats.totalSize += JSON.stringify(entry.value).length } catch {}
205:     })
206:     return stats
207:   }
208: 
209:   static clearCache(): number { const size = this.memoryCache.size; this.memoryCache.clear(); return size }
210: 
211:   async testRequest(): Promise<void> {
212:     console.log('🧪 Testing Perplexity API connection...')
213:     const result = await this.makeRequest('You are a test assistant.', 'Say "Connection successful" if you can read this.', { maxTokens: 50, temperature: 0 })
214:     console.log('✅ Test successful!')
215:     console.log('📝 Response:', (result.content || '').slice(0, 400))
216:     console.log('💰 Cost:', result.cost)
217:   }
218: 
219:   private handleApiError(status: number, statusText: string, body: string): Error {
220:     switch (status) {
221:       case 401: return new Error('Invalid API key - check your PERPLEXITY_API_KEY')
222:       case 403: return new Error('API access forbidden - check your account status')
223:       case 429: return new Error('Rate limit exceeded - please wait before making more requests')
224:       case 500: return new Error('Perplexity server error - please try again later')
225:       case 503: return new Error('Perplexity service unavailable - please try again later')
226:       default: return new Error(`Perplexity API error: ${status} ${statusText} - ${body}`)
227:     }
228:   }
229: }
</file>

<file path="src/lib/personalization-engine.ts">
  1: import { PerplexityIntelligenceService } from './perplexity-intelligence'
  2: import { EnhancedContact } from './contact-enrichment'
  3: 
  4: export interface PersonalizedOutreach {
  5:   subject: string
  6:   body: string
  7:   cta: string // Call to action
  8:   personalization_score: number // 0-100
  9:   variant_id?: string // For A/B testing
 10:   tone: 'achievement' | 'problem-solving' | 'value-add'
 11: }
 12: 
 13: export class PersonalizationEngine {
 14:   /**
 15:    * PHASE 2B: Generate highly personalized cold outreach email
 16:    * Uses company research, contact personality, and resume to create unique message
 17:    */
 18:   static async generatePersonalizedOutreach(
 19:     contact: EnhancedContact,
 20:     job: any,
 21:     resumeText: string,
 22:     companyResearch: any
 23:   ): Promise<PersonalizedOutreach> {
 24:     try {
 25:       console.log('[PERSONALIZATION] Generating for:', contact.name, 'at', job.company)
 26:       
 27:       // Extract most relevant experience for this specific job
 28:       const relevantExperience = this.extractRelevantExperience(resumeText, job)
 29:       
 30:       const prompt = `Create a highly personalized cold outreach email for a job application:
 31: 
 32: CONTACT INFORMATION:
 33: Name: ${contact.name}
 34: Title: ${contact.title}
 35: Communication Style: ${contact.personality_insights.communication_style}
 36: Decision Power: ${contact.decision_maker_score}/100
 37: 
 38: JOB DETAILS:
 39: Title: ${job.title}
 40: Company: ${job.company}
 41: Description: ${(job.description || '').slice(0, 500)}
 42: 
 43: COMPANY INTELLIGENCE:
 44: Culture: ${companyResearch?.culture || 'Not available'}
 45: Recent News: ${companyResearch?.recentNews?.[0] || 'No recent news'}
 46: Tech Stack: ${companyResearch?.techStack?.join(', ') || 'Unknown'}
 47: 
 48: CANDIDATE'S RELEVANT EXPERIENCE:
 49: ${relevantExperience}
 50: 
 51: PERSONALIZATION REQUIREMENTS:
 52: 1. Match ${contact.name}'s ${contact.personality_insights.communication_style} communication style:
 53:    - direct: Get to the point immediately, no fluff
 54:    - formal: Professional greeting, structured approach
 55:    - casual: Friendly but professional tone
 56: 
 57: 2. Reference something SPECIFIC about:
 58:    - ${contact.name}'s role or recent work if possible
 59:    - Company's recent news/achievements
 60:    - How candidate's experience solves their specific challenges
 61: 
 62: 3. Connect candidate's background to ${job.company}'s current needs
 63: 4. Include a clear, low-friction call to action
 64: 5. Keep under 150 words total
 65: 6. Avoid buzzwords: "passionate", "rockstar", "ninja", "guru"
 66: 7. Use candidate's actual achievements, not generic claims
 67: 
 68: Return JSON:
 69: {
 70:   "subject": "specific subject line under 60 chars",
 71:   "body": "personalized email body",
 72:   "cta": "clear call to action",
 73:   "personalization_score": 0-100
 74: }`
 75: 
 76:       const result = await PerplexityIntelligenceService.customQuery({
 77:         systemPrompt: "You write highly personalized, effective cold outreach emails that get responses. You avoid generic templates and create unique, relevant messages.",
 78:         userPrompt: prompt,
 79:         temperature: 0.4, // Slightly creative but consistent
 80:         maxTokens: 800
 81:       })
 82:       
 83:       // Type-safe result handling
 84:       if (typeof result === 'object' && result !== null && 'subject' in result && 'body' in result) {
 85:         console.log('[PERSONALIZATION] Generated with score:', (result as any).personalization_score)
 86:         return {
 87:           ...(result as any),
 88:           tone: 'value-add' as const
 89:         }
 90:       }
 91:       
 92:       // Fallback if unexpected format
 93:       throw new Error('Invalid response format from AI')
 94:       
 95:     } catch (error) {
 96:       console.error('[PERSONALIZATION] Error generating outreach:', error)
 97:       return this.generateFallbackOutreach(contact, job, resumeText)
 98:     }
 99:   }
100:   
101:   /**
102:    * Extract most relevant parts of resume for this specific job
103:    */
104:   private static extractRelevantExperience(
105:     resume: string,
106:     job: any
107:   ): string {
108:     try {
109:       // Extract keywords from job description
110:       const jobDescription = (job.description || job.title || '').toLowerCase()
111:       const keywords = jobDescription
112:         .split(/\W+/)
113:         .filter(word => word.length > 4)
114:         .slice(0, 20)
115:       
116:       // Score each sentence by keyword matches
117:       const sentences = resume.split(/[.!?]+/).filter(s => s.trim().length > 20)
118:       
119:       const scored = sentences.map(sentence => ({
120:         text: sentence.trim(),
121:         score: keywords.filter(keyword => 
122:           sentence.toLowerCase().includes(keyword)
123:         ).length
124:       }))
125:       
126:       // Take top 5 most relevant sentences
127:       const topSentences = scored
128:         .sort((a, b) => b.score - a.score)
129:         .slice(0, 5)
130:         .map(s => s.text)
131:         .join('. ')
132:       
133:       return topSentences.slice(0, 1000) // Limit to 1000 chars
134:       
135:     } catch (error) {
136:       console.error('[PERSONALIZATION] Error extracting experience:', error)
137:       return resume.slice(0, 1000)
138:     }
139:   }
140:   
141:   /**
142:    * Generate A/B testing variants with different angles
143:    */
144:   static async generateEmailVariants(
145:     contact: EnhancedContact,
146:     job: any,
147:     resumeText: string,
148:     companyResearch: any
149:   ): Promise<PersonalizedOutreach[]> {
150:     try {
151:       console.log('[PERSONALIZATION] Generating 3 A/B variants')
152:       
153:       const baseData = { contact, job, resumeText, companyResearch }
154:       
155:       // Generate 3 variants in parallel with different angles
156:       const variants = await Promise.all([
157:         this.generatePersonalizedOutreachWithAngle(baseData, 'achievement'),
158:         this.generatePersonalizedOutreachWithAngle(baseData, 'problem-solving'),
159:         this.generatePersonalizedOutreachWithAngle(baseData, 'value-add')
160:       ])
161:       
162:       // Add variant IDs
163:       return variants.map((variant, index) => ({
164:         ...variant,
165:         variant_id: `variant_${String.fromCharCode(65 + index)}` // A, B, C
166:       }))
167:       
168:     } catch (error) {
169:       console.error('[PERSONALIZATION] Error generating variants:', error)
170:       // Return single variant as fallback
171:       const single = await this.generatePersonalizedOutreach(
172:         contact,
173:         job,
174:         resumeText,
175:         companyResearch
176:       )
177:       return [single]
178:     }
179:   }
180:   
181:   /**
182:    * Generate outreach with specific angle/tone
183:    */
184:   private static async generatePersonalizedOutreachWithAngle(
185:     data: {
186:       contact: EnhancedContact;
187:       job: any;
188:       resumeText: string;
189:       companyResearch: any;
190:     },
191:     angle: 'achievement' | 'problem-solving' | 'value-add'
192:   ): Promise<PersonalizedOutreach> {
193:     const { contact, job, resumeText, companyResearch } = data
194:     
195:     const angleFocus = {
196:       achievement: 'Focus on specific quantifiable achievements and results',
197:       'problem-solving': 'Focus on challenges the company faces and how you can solve them',
198:       'value-add': 'Focus on unique value and skills you bring to their team'
199:     }
200:     
201:     try {
202:       const relevantExperience = this.extractRelevantExperience(resumeText, job)
203:       
204:       const prompt = `Create a ${angle}-focused cold outreach email:
205: 
206: ANGLE: ${angleFocus[angle]}
207: 
208: CONTACT: ${contact.name}, ${contact.title}
209: STYLE: ${contact.personality_insights.communication_style}
210: 
211: JOB: ${job.title} at ${job.company}
212: 
213: RELEVANT EXPERIENCE:
214: ${relevantExperience}
215: 
216: COMPANY INSIGHTS:
217: ${companyResearch?.culture || 'Professional environment'}
218: 
219: Requirements:
220: - Match ${contact.personality_insights.communication_style} style
221: - ${angleFocus[angle]}
222: - Keep under 150 words
223: - Specific and unique (not generic)
224: 
225: Return JSON: {"subject": "...", "body": "...", "cta": "...", "personalization_score": 0-100}`
226: 
227:       const result = await PerplexityIntelligenceService.customQuery({
228:         systemPrompt: `You write ${angle}-focused cold outreach emails that get responses.`,
229:         userPrompt: prompt,
230:         temperature: 0.4,
231:         maxTokens: 800
232:       })
233:       
234:       // Type-safe result handling
235:       if (typeof result === 'object' && result !== null && 'subject' in result && 'body' in result) {
236:         return {
237:           ...(result as any),
238:           tone: angle
239:         }
240:       }
241:       
242:       // Fallback if unexpected format
243:       throw new Error('Invalid response format from AI')
244:       
245:     } catch (error) {
246:       console.error(`[PERSONALIZATION] Error generating ${angle} variant:`, error)
247:       return this.generateFallbackOutreach(contact, job, resumeText, angle)
248:     }
249:   }
250:   
251:   /**
252:    * Fallback: Template-based outreach (if AI fails)
253:    */
254:   private static generateFallbackOutreach(
255:     contact: EnhancedContact,
256:     job: any,
257:     resumeText: string,
258:     tone: 'achievement' | 'problem-solving' | 'value-add' = 'value-add'
259:   ): PersonalizedOutreach {
260:     console.log('[PERSONALIZATION] Using fallback template')
261:     
262:     // Extract basic info
263:     const companyName = job.company || 'your company'
264:     const jobTitle = job.title || 'the role'
265:     const contactFirstName = contact.name.split(' ')[0]
266:     
267:     // Try to extract a skill or experience
268:     const skills = resumeText.match(/\b(JavaScript|Python|React|Node|AWS|SQL|Java|C\+\+|Machine Learning|Data|Design|Marketing|Sales|Management)\b/gi) || []
269:     const mainSkill = skills[0] || 'relevant experience'
270:     
271:     const templates = {
272:       achievement: {
273:         subject: `${jobTitle} - ${mainSkill} Results for ${companyName}`,
274:         body: `Hi ${contactFirstName},
275: 
276: I noticed ${companyName}'s opening for ${jobTitle}. With my background in ${mainSkill}, I've consistently delivered measurable results in similar roles.
277: 
278: I'd appreciate a brief conversation to discuss how my experience aligns with your team's goals.
279: 
280: Are you available for a 15-minute call this week?
281: 
282: Best regards`,
283:         cta: '15-minute intro call'
284:       },
285:       'problem-solving': {
286:         subject: `Solving [Challenge] - ${jobTitle} at ${companyName}`,
287:         body: `Hi ${contactFirstName},
288: 
289: I came across the ${jobTitle} role at ${companyName}. My experience with ${mainSkill} has prepared me to tackle the challenges your team is facing.
290: 
291: I'd love to discuss how I can contribute to your objectives.
292: 
293: Would you be open to a brief conversation?
294: 
295: Best regards`,
296:         cta: 'Brief discussion of fit'
297:       },
298:       'value-add': {
299:         subject: `${mainSkill} Expertise for ${companyName}`,
300:         body: `Hi ${contactFirstName},
301: 
302: I'm reaching out regarding the ${jobTitle} position. My background in ${mainSkill} and proven track record could add immediate value to your team at ${companyName}.
303: 
304: I've attached my resume for your review. Would you be available for a quick call to discuss the opportunity?
305: 
306: Best regards`,
307:         cta: 'Quick introductory call'
308:       }
309:     }
310:     
311:     const template = templates[tone]
312:     
313:     return {
314:       subject: template.subject,
315:       body: template.body,
316:       cta: template.cta,
317:       personalization_score: 30, // Low score for template
318:       tone
319:     }
320:   }
321:   
322:   /**
323:    * Analyze outreach performance (for future optimization)
324:    */
325:   static analyzeOutreachPerformance(
326:     outreach: PersonalizedOutreach,
327:     opened: boolean,
328:     replied: boolean
329:   ): {
330:     effectiveness_score: number;
331:     insights: string[];
332:   } {
333:     const score = 
334:       (outreach.personalization_score * 0.4) + // Quality of personalization
335:       (opened ? 30 : 0) + // Email was opened
336:       (replied ? 30 : 0) // Got a reply
337:     
338:     const insights: string[] = []
339:     
340:     if (opened && !replied) {
341:       insights.push('Email opened but no reply - consider stronger CTA')
342:     }
343:     
344:     if (!opened) {
345:       insights.push('Email not opened - test different subject lines')
346:     }
347:     
348:     if (replied) {
349:       insights.push(`${outreach.tone} angle was effective - use more often`)
350:     }
351:     
352:     if (outreach.personalization_score < 50) {
353:       insights.push('Low personalization score - increase specificity')
354:     }
355:     
356:     return {
357:       effectiveness_score: score,
358:       insights
359:     }
360:   }
361: }
</file>

<file path="src/lib/phone-extraction.ts">
  1: /**
  2:  * Phone Number Extraction & Formatting Service
  3:  * 
  4:  * Extracts and formats phone numbers from text
  5:  */
  6: 
  7: export interface PhoneNumber {
  8:   raw: string
  9:   formatted: string
 10:   country: string
 11:   type: 'mobile' | 'landline' | 'toll-free' | 'unknown'
 12:   confidence: number
 13: }
 14: 
 15: export class PhoneExtractionService {
 16:   /**
 17:    * Extract phone numbers from text
 18:    */
 19:   static extractPhoneNumbers(text: string): PhoneNumber[] {
 20:     const phones: PhoneNumber[] = []
 21: 
 22:     // North American patterns
 23:     const naPatterns = [
 24:       /\+?1?\s*\(?(\d{3})\)?[\s.-]?(\d{3})[\s.-]?(\d{4})/g, // (555) 123-4567
 25:       /\b(\d{3})[\s.-](\d{3})[\s.-](\d{4})\b/g,              // 555-123-4567
 26:       /\b(\d{3})[\s.](\d{4})\b/g                              // 555.1234
 27:     ]
 28: 
 29:     // International patterns
 30:     const intlPatterns = [
 31:       /\+(\d{1,3})\s*\(?(\d{1,4})\)?[\s.-]?(\d{1,4})[\s.-]?(\d{1,9})/g
 32:     ]
 33: 
 34:     // Extract North American numbers
 35:     for (const pattern of naPatterns) {
 36:       let match
 37:       while ((match = pattern.exec(text)) !== null) {
 38:         const raw = match[0]
 39:         const areaCode = match[1]
 40:         const prefix = match[2]
 41:         const line = match[3]
 42:         
 43:         if (areaCode && prefix && line) {
 44:           const formatted = `+1 (${areaCode}) ${prefix}-${line}`
 45:           phones.push({
 46:             raw,
 47:             formatted,
 48:             country: 'US/CA',
 49:             type: this.determinePhoneType(areaCode),
 50:             confidence: 90
 51:           })
 52:         }
 53:       }
 54:     }
 55: 
 56:     // Extract international numbers
 57:     for (const pattern of intlPatterns) {
 58:       let match
 59:       while ((match = pattern.exec(text)) !== null) {
 60:         const raw = match[0]
 61:         const countryCode = match[1]
 62:         const formatted = raw.replace(/\s+/g, ' ').trim()
 63:         
 64:         phones.push({
 65:           raw,
 66:           formatted,
 67:           country: this.getCountryFromCode(countryCode),
 68:           type: 'unknown',
 69:           confidence: 70
 70:         })
 71:       }
 72:     }
 73: 
 74:     // Remove duplicates
 75:     const unique = phones.filter((phone, index, self) =>
 76:       index === self.findIndex(p => p.formatted === phone.formatted)
 77:     )
 78: 
 79:     return unique
 80:   }
 81: 
 82:   /**
 83:    * Determine phone type based on area code
 84:    */
 85:   private static determinePhoneType(areaCode: string): 'mobile' | 'landline' | 'toll-free' | 'unknown' {
 86:     const code = parseInt(areaCode)
 87:     
 88:     // Toll-free numbers
 89:     if ([800, 888, 877, 866, 855, 844, 833].includes(code)) {
 90:       return 'toll-free'
 91:     }
 92:     
 93:     // Most area codes can be either mobile or landline
 94:     return 'unknown'
 95:   }
 96: 
 97:   /**
 98:    * Get country from country code
 99:    */
100:   private static getCountryFromCode(code: string): string {
101:     const countryMap: Record<string, string> = {
102:       '1': 'US/CA',
103:       '44': 'UK',
104:       '61': 'AU',
105:       '64': 'NZ',
106:       '91': 'IN',
107:       '86': 'CN',
108:       '81': 'JP',
109:       '49': 'DE',
110:       '33': 'FR',
111:       '39': 'IT',
112:       '34': 'ES'
113:     }
114:     return countryMap[code] || 'Unknown'
115:   }
116: 
117:   /**
118:    * Format phone number to standard format
119:    */
120:   static formatPhoneNumber(phone: string, countryCode: string = '1'): string {
121:     // Remove all non-digit characters
122:     const digits = phone.replace(/\D/g, '')
123:     
124:     // North American format
125:     if (countryCode === '1' && digits.length === 10) {
126:       return `+1 (${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`
127:     }
128:     
129:     // International format
130:     if (digits.length > 10) {
131:       return `+${digits}`
132:     }
133:     
134:     return phone
135:   }
136: 
137:   /**
138:    * Validate phone number
139:    */
140:   static isValidPhoneNumber(phone: string): boolean {
141:     const digits = phone.replace(/\D/g, '')
142:     return digits.length >= 10 && digits.length <= 15
143:   }
144: 
145:   /**
146:    * Extract phone numbers from company website
147:    */
148:   static extractFromWebsite(html: string): PhoneNumber[] {
149:     // Look for common patterns in HTML
150:     const patterns = [
151:       /(?:phone|tel|call|contact)[\s:]*([+\d\s().-]{10,})/gi,
152:       /(?:office|main)[\s:]*([+\d\s().-]{10,})/gi
153:     ]
154: 
155:     const phones: PhoneNumber[] = []
156:     for (const pattern of patterns) {
157:       let match
158:       while ((match = pattern.exec(html)) !== null) {
159:         const extracted = this.extractPhoneNumbers(match[1])
160:         phones.push(...extracted)
161:       }
162:     }
163: 
164:     return phones
165:   }
166: }
</file>

<file path="src/lib/plan.ts">
 1: export type Plan = 'free' | 'pro' | 'company'
 2: 
 3: export function isAllowed(required: Plan, current: Plan): boolean {
 4:   const order: Plan[] = ['free','pro','company']
 5:   return order.indexOf(current) >= order.indexOf(required)
 6: }
 7: 
 8: export function clampByPlan<T extends number>(plan: Plan, value: T, freeMax: T, proMax: T): T {
 9:   if (plan === 'company') return value
10:   if (plan === 'pro') return (value > proMax ? proMax : value) as T
11:   return (value > freeMax ? freeMax : value) as T
12: }
</file>

<file path="src/lib/prompts/perplexity-prompts.ts">
  1: /**
  2:  * Centralized Perplexity AI Prompts
  3:  * 
  4:  * All system and user prompts for Perplexity API calls.
  5:  * Centralized for consistency, versioning, and maintenance.
  6:  * 
  7:  * Version: 2.0.0
  8:  * Last Updated: 2025-01-07
  9:  */
 10: 
 11: export const PERPLEXITY_PROMPTS = {
 12:   /**
 13:    * RESUME ANALYSIS PROMPTS
 14:    */
 15:   RESUME_ANALYSIS: {
 16:     version: '2.0.0',
 17:     purpose: 'Extract comprehensive resume data with AI/automation risk analysis',
 18:     system: `You are an expert career analyst and labor market researcher specializing in 2025 job market trends.
 19: 
 20: Your task is to analyze resumes and extract structured data including:
 21: - Skills and experience with market demand analysis
 22: - Location with full geographic context
 23: - Salary expectations based on current market data
 24: - Target job titles with career progression paths
 25: - AI/Automation replacement risk assessment
 26: - 5-year career outlook and recommendations
 27: 
 28: CRITICAL REQUIREMENTS:
 29: 1. Return ONLY valid JSON - no markdown, no explanations
 30: 2. Use real 2025 market data for salary ranges
 31: 3. Assess AI/automation risk honestly based on current trends
 32: 4. Provide actionable career recommendations
 33: 5. Include confidence scores where applicable`,
 34:     
 35:     userTemplate: (resumeText: string) => `Analyze this resume and return a JSON object matching this structure:
 36: 
 37: {
 38:   "keywords": ["skill1", "skill2", ...],
 39:   "location": {
 40:     "city": "Toronto",
 41:     "province": "Ontario",
 42:     "full": "Toronto, Ontario",
 43:     "country": "Canada"
 44:   },
 45:   "experienceLevel": "entry|mid|senior|executive",
 46:   "targetSalaryRange": {
 47:     "min": 60000,
 48:     "max": 90000,
 49:     "currency": "CAD",
 50:     "marketData": {
 51:       "percentile25": 55000,
 52:       "percentile50": 70000,
 53:       "percentile75": 85000,
 54:       "lastUpdated": "2025-01"
 55:     }
 56:   },
 57:   "targetJobTitles": ["Software Developer", "Full Stack Engineer"],
 58:   "topSkills": [
 59:     {
 60:       "skill": "JavaScript",
 61:       "yearsExperience": 3,
 62:       "proficiency": "advanced",
 63:       "marketDemand": "high",
 64:       "growthTrend": "growing"
 65:     }
 66:   ],
 67:   "industries": ["Technology", "Finance"],
 68:   "certifications": ["AWS Certified", "etc"],
 69:   "careerSummary": "Brief 2-3 sentence summary",
 70:   "futureOutlook": {
 71:     "aiReplacementRisk": "low|medium|high",
 72:     "automationRisk": "low|medium|high",
 73:     "fiveYearOutlook": "declining|stable|growing|thriving",
 74:     "reasoning": "Detailed explanation",
 75:     "recommendations": ["Recommendation 1", "Recommendation 2"]
 76:   },
 77:   "careerPath": {
 78:     "currentLevel": "Mid-Level Software Developer",
 79:     "nextPossibleRoles": ["Senior Developer", "Tech Lead"],
 80:     "skillGaps": [
 81:       {
 82:         "skill": "System Design",
 83:         "importance": "critical",
 84:         "timeToLearn": "6-12 months"
 85:       }
 86:     ],
 87:     "recommendedCertifications": ["AWS Solutions Architect"]
 88:   },
 89:   "searchOptimization": {
 90:     "bestJobBoards": ["LinkedIn", "Indeed Canada"],
 91:     "optimalApplicationTime": "Tuesday-Thursday, 9-11 AM",
 92:     "competitiveAdvantages": ["Full-stack experience", "Cloud skills"],
 93:     "marketSaturation": "medium",
 94:     "applicationStrategy": "Focus on mid-size tech companies"
 95:   }
 96: }
 97: 
 98: Resume Text:
 99: ${resumeText}`
100:   },
101: 
102:   /**
103:    * JOB SEARCH PROMPTS
104:    */
105:   JOB_SEARCH: {
106:     version: '2.0.0',
107:     purpose: 'Search for jobs across multiple boards with AI analysis',
108:     system: `You are a job search specialist with real-time access to job listings across multiple platforms.
109: 
110: Search the following job boards and aggregate results:
111: - Job Bank (Canada)
112: - Adzuna Canada
113: - Careerjet Canada
114: - Greenhouse (ATS)
115: - Lever (ATS)
116: - Workable (ATS)
117: - LinkedIn (public listings)
118: - Indeed Canada
119: - ZipRecruiter Canada
120: - Monster Canada
121: 
122: For each job listing, provide:
123: - Basic details (title, company, location, salary, URL)
124: - AI/Automation risk analysis
125: - 5-year job outlook
126: - Growth potential
127: - Skill requirements
128: 
129: Return ONLY valid JSON array. No markdown, no explanations.`,
130:     
131:     userTemplate: (jobTitle: string, location: string, options: any) => {
132:       const boards = options.boards?.length > 0 
133:         ? `Focus on these boards: ${options.boards.join(', ')}`
134:         : 'Search all available boards'
135:       
136:       const limit = options.limit || 20
137:       const canadianOnly = options.includeCanadianOnly ? 'CANADIAN JOBS ONLY' : ''
138:       const aiAnalysis = options.includeAIAnalysis !== false
139:       
140:       return `Search for "${jobTitle}" jobs in "${location}".
141: 
142: ${boards}
143: ${canadianOnly}
144: Limit: ${limit} results
145: 
146: Return a JSON array of job listings:
147: [
148:   {
149:     "id": "unique-id",
150:     "title": "Job Title",
151:     "company": "Company Name",
152:     "location": "City, Province/State",
153:     "salary": "60000-90000",
154:     "currency": "CAD",
155:     "url": "https://...",
156:     "description": "Brief description",
157:     "postedDate": "2025-01-05",
158:     "source": "Job Board Name",
159:     "skills": ["skill1", "skill2"],
160:     "experienceLevel": "mid",
161:     "workType": "remote|hybrid|onsite"${aiAnalysis ? `,
162:     "aiAnalysis": {
163:       "replacementRisk": "low|medium|high",
164:       "automationRisk": "low|medium|high",
165:       "fiveYearOutlook": "declining|stable|growing|thriving",
166:       "growthPotential": "low|medium|high",
167:       "reasoning": "Why this job has good/poor outlook"
168:     }` : ''}
169:   }
170: ]
171: 
172: Prioritize recent postings and reputable companies.`
173:     }
174:   },
175: 
176:   /**
177:    * COMPANY RESEARCH PROMPTS
178:    */
179:   COMPANY_RESEARCH: {
180:     version: '2.0.0',
181:     purpose: 'Comprehensive company intelligence with future outlook',
182:     system: `You are a corporate intelligence analyst specializing in company research for job seekers.
183: 
184: Provide comprehensive company analysis including:
185: - Business model and products/services
186: - Financial health and stability
187: - Company culture and values
188: - Growth trajectory and market position
189: - Recent news and developments
190: - Future outlook and AI/automation impact
191: - Hiring intelligence and trends
192: - Competitive landscape
193: 
194: Use current 2025 data. Return ONLY valid JSON.`,
195:     
196:     userTemplate: (companyName: string, additionalContext?: string) => `Research "${companyName}" and return this JSON structure:
197: 
198: {
199:   "companyName": "${companyName}",
200:   "overview": {
201:     "description": "What the company does",
202:     "founded": "Year",
203:     "headquarters": "Location",
204:     "size": "Number of employees",
205:     "industry": "Primary industry"
206:   },
207:   "financials": {
208:     "revenue": "Annual revenue",
209:     "funding": "Total funding raised",
210:     "profitability": "profitable|break-even|loss-making",
211:     "growth": "Revenue growth rate"
212:   },
213:   "culture": {
214:     "values": ["value1", "value2"],
215:     "workLifeBalance": "Rating or description",
216:     "perks": ["perk1", "perk2"],
217:     "glassdoorRating": "X.X/5.0"
218:   },
219:   "recentNews": [
220:     {
221:       "date": "2025-01-XX",
222:       "headline": "News title",
223:       "summary": "Brief summary",
224:       "sentiment": "positive|neutral|negative"
225:     }
226:   ],
227:   "futureOutlook": {
228:     "aiImpact": "How AI will affect this company",
229:     "fiveYearProjection": "declining|stable|growing|thriving",
230:     "marketPosition": "Market position outlook",
231:     "risks": ["risk1", "risk2"],
232:     "opportunities": ["opp1", "opp2"]
233:   },
234:   "hiringIntelligence": {
235:     "hiringTrend": "increasing|stable|decreasing",
236:     "activeOpenings": "Estimated number",
237:     "keyRoles": ["role1", "role2"],
238:     "hiringProcess": "Description of process",
239:     "timeToHire": "Average duration"
240:   },
241:   "competitiveAnalysis": {
242:     "mainCompetitors": ["competitor1", "competitor2"],
243:     "marketShare": "Estimated position",
244:     "differentiators": ["what makes them unique"]
245:   }
246: }
247: 
248: ${additionalContext ? `Additional context: ${additionalContext}` : ''}`
249:   },
250: 
251:   /**
252:    * HIRING CONTACTS PROMPTS
253:    */
254:   HIRING_CONTACTS: {
255:     version: '2.1.0',
256:     purpose: 'Find hiring managers and recruiters with detailed contact information',
257:     system: `You are an expert at finding hiring manager contact information using public sources.
258: 
259: Your goal is to find REAL, VERIFIABLE contact information for hiring managers and recruiters.
260: 
261: Sources to check:
262: - LinkedIn company pages (look for "Talent Acquisition", "Hiring Manager", "HR", "Recruiter")
263: - Company "About Us" / "Team" / "Leadership" pages
264: - Press releases mentioning HR contacts
265: - Industry directories and professional networks
266: - Public records and company registrations
267: 
268: For each contact, provide:
269: 1. Full name
270: 2. Job title
271: 3. **Email address** (use standard formats: firstname.lastname@company.com, f.lastname@company.com)
272: 4. **Phone number** (if publicly available on LinkedIn, company site, or directories)
273: 5. LinkedIn profile URL
274: 6. Department
275: 7. Decision-making power (high/medium/low)
276: 8. Best contact method (email/LinkedIn/phone)
277: 
278: IMPORTANT: 
279: - Only return contacts with at least a name and ONE valid contact method (email OR LinkedIn OR phone)
280: - For emails, infer from company domain if not publicly listed
281: - Be creative but realistic with email formats based on company patterns
282: - If you find LinkedIn profiles, include the direct URL
283: 
284: Return ONLY valid JSON array.`,
285:     
286:     userTemplate: (companyName: string, industry?: string) => `Find hiring managers and recruiters at "${companyName}"${industry ? ` in the ${industry} industry` : ''}.
287: 
288: **CRITICAL**: Find their EMAIL ADDRESSES and PHONE NUMBERS. These are essential.
289: 
290: Search for:
291: - LinkedIn profiles with "recruiter", "talent acquisition", "hiring manager", "HR" at ${companyName}
292: - Company website team/contact pages
293: - Press releases or news mentioning HR contacts
294: - Professional directories
295: 
296: Return JSON array with AT LEAST 3-5 contacts:
297: [
298:   {
299:     "name": "FirstName LastName",
300:     "title": "Director of Talent Acquisition",
301:     "department": "Human Resources",
302:     "email": "firstname.lastname@company.com",
303:     "phone": "+1-555-123-4567",
304:     "linkedIn": "https://linkedin.com/in/profile-name",
305:     "role": "recruiter|hiring_manager|decision_maker",
306:     "decisionMakingPower": "high|medium|low",
307:     "contactIntelligence": {
308:       "responseRate": "high|medium|low",
309:       "preferredContactMethod": "email|LinkedIn|phone",
310:       "bestContactTime": "Tuesday-Thursday, 9-11 AM EST",
311:       "communicationStyle": "formal|casual|data-driven",
312:       "decisionInfluence": "high|medium|low",
313:       "recentActivity": "Recent posts, job changes, etc"
314:     }
315:   }
316: ]
317: 
318: Focus on people actively involved in hiring.`
319:   },
320: 
321:   /**
322:    * SALARY ANALYSIS PROMPTS
323:    */
324:   SALARY_ANALYSIS: {
325:     version: '2.0.0',
326:     purpose: 'Market-based salary intelligence',
327:     system: `You are a compensation analyst with access to 2025 salary data.
328: 
329: Provide accurate salary ranges based on:
330: - Job role and title
331: - Geographic location
332: - Experience level
333: - Company size and type
334: - Industry standards
335: - Market trends
336: 
337: Use current 2025 data. Return ONLY valid JSON.`,
338:     
339:     userTemplate: (role: string, company?: string, location?: string) => `Provide salary data for "${role}"${company ? ` at ${company}` : ''}${location ? ` in ${location}` : ''}.
340: 
341: Return JSON:
342: {
343:   "role": "${role}",
344:   "location": "${location || 'General'}",
345:   "currency": "CAD|USD",
346:   "salaryRanges": {
347:     "entry": { "min": 0, "max": 0, "median": 0 },
348:     "mid": { "min": 0, "max": 0, "median": 0 },
349:     "senior": { "min": 0, "max": 0, "median": 0 },
350:     "executive": { "min": 0, "max": 0, "median": 0 }
351:   },
352:   "marketInsights": {
353:     "trend": "increasing|stable|decreasing",
354:     "demandLevel": "high|medium|low",
355:     "competitionLevel": "high|medium|low",
356:     "topPayingIndustries": ["industry1", "industry2"],
357:     "topPayingCompanies": ["company1", "company2"]
358:   },
359:   "benefits": {
360:     "typical": ["benefit1", "benefit2"],
361:     "signOnBonus": "Typical range",
362:     "equity": "Common equity packages"
363:   },
364:   "lastUpdated": "2025-01"
365: }`
366:   },
367: 
368:   /**
369:    * MARKET ANALYSIS PROMPTS
370:    */
371:   MARKET_ANALYSIS: {
372:     version: '2.0.0',
373:     purpose: 'Comprehensive market intelligence',
374:     system: `You are a labor market economist analyzing job market trends.
375: 
376: Provide comprehensive market analysis including:
377: - Job market health and trends
378: - Supply and demand dynamics
379: - Salary trends and projections
380: - Industry growth forecasts
381: - AI/automation impact
382: - Regional variations
383: - Skill gap analysis
384: 
385: Use current 2025 data and forward-looking projections. Return ONLY valid JSON.`,
386:     
387:     userTemplate: (location: string, industry: string, roleType?: string) => `Analyze the job market for ${roleType ? `"${roleType}" roles in ` : ''}the "${industry}" industry in "${location}".
388: 
389: Return JSON:
390: {
391:   "location": "${location}",
392:   "industry": "${industry}",
393:   "roleType": "${roleType || 'General'}",
394:   "marketHealth": {
395:     "overall": "strong|moderate|weak",
396:     "trend": "improving|stable|declining",
397:     "unemployment": "X.X%",
398:     "jobOpenings": "Estimated number",
399:     "competitionLevel": "high|medium|low"
400:   },
401:   "salaryTrends": {
402:     "averageIncrease": "X.X% YoY",
403:     "medianSalary": 0,
404:     "forecast": "Expected trend for next 2 years"
405:   },
406:   "demandForecast": {
407:     "nextYear": "increasing|stable|decreasing",
408:     "fiveYear": "Detailed projection",
409:     "hotSkills": ["skill1", "skill2"],
410:     "decliningSkills": ["skill1", "skill2"]
411:   },
412:   "aiAutomationImpact": {
413:     "overallRisk": "low|medium|high",
414:     "affectedRoles": ["role1", "role2"],
415:     "emergingRoles": ["role1", "role2"],
416:     "recommendations": ["advice1", "advice2"]
417:   },
418:   "topEmployers": [
419:     {
420:       "name": "Company Name",
421:       "openings": "Estimated number",
422:       "hiringTrend": "increasing|stable|decreasing"
423:     }
424:   ],
425:   "insights": ["Key insight 1", "Key insight 2"],
426:   "lastUpdated": "2025-01"
427: }`
428:   },
429: 
430:   /**
431:    * JOB MATCHING PROMPTS
432:    */
433:   JOB_MATCHING: {
434:     version: '2.0.0',
435:     purpose: 'Match resume skills to job requirements',
436:     system: `You are an AI-powered job matching specialist.
437: 
438: Compare resume skills and experience against job requirements.
439: Calculate accurate match percentages and identify:
440: - Matching skills and experience
441: - Missing skills (gaps)
442: - Transferable skills
443: - Overqualifications
444: - Growth potential
445: 
446: Return ONLY valid JSON.`,
447:     
448:     userTemplate: (resumeSkills: string[], jobDescription: string) => `Calculate match score between candidate and job:
449: 
450: Candidate Skills: ${resumeSkills.join(', ')}
451: 
452: Job Description:
453: ${jobDescription}
454: 
455: Return JSON:
456: {
457:   "matchScore": 85,
458:   "matchingSkills": ["skill1", "skill2"],
459:   "missingSkills": ["skill3", "skill4"],
460:   "transferableSkills": ["skill5"],
461:   "overqualifications": ["skill6"],
462:   "growthPotential": "high|medium|low",
463:   "recommendation": "strong_match|potential_match|poor_match",
464:   "reasoning": "Detailed explanation",
465:   "applicationAdvice": "How to position yourself"
466: }`
467:   },
468: 
469:   /**
470:    * JOB LISTINGS PROMPTS
471:    */
472:   JOB_LISTINGS: {
473:     version: '2.0.0',
474:     purpose: 'Direct job listing extraction from specific boards with confidential filtering',
475:     system: `You are a job board scraper that extracts structured job data from multiple sources.
476: 
477: CRITICAL REQUIREMENTS:
478: 1. Return ONLY valid JSON array of job listings
479: 2. Filter out ALL confidential/anonymous employers
480: 3. Include full descriptions and application URLs
481: 4. Verify company names are real and specific
482: 5. Extract salary data when available
483: 6. Prioritize recent postings
484: 
485: NEVER include jobs with:
486: - "Confidential" company names
487: - "Anonymous" employers
488: - "Various Companies"
489: - "Undisclosed" companies
490: - Missing or generic company names`,
491:     
492:     userTemplate: (keywords: string, location: string, boards: string[], limit: number) => `Search for "${keywords}" jobs in "${location}".
493: 
494: Job boards to search: ${boards.join(', ')}
495: Target: ${limit} unique, verified job listings
496: 
497: Return JSON array:
498: [
499:   {
500:     "title": "Specific Job Title",
501:     "company": "Real Company Name (NO 'Confidential' or 'Anonymous')",
502:     "location": "City, Province/State",
503:     "description": "Full job description with responsibilities and requirements",
504:     "url": "Direct application URL",
505:     "salary": "$X - $Y" or null,
506:     "postedDate": "YYYY-MM-DD",
507:     "source": "Job Board Name",
508:     "workType": "remote|hybrid|onsite",
509:     "experienceLevel": "entry|mid|senior|executive"
510:   }
511: ]
512: 
513: CRITICAL: Filter out any jobs with confidential/anonymous employers. Only return jobs with real, verifiable company names.`
514:   }
515: } as const
516: 
517: /**
518:  * Prompt versioning utility
519:  */
520: export function getPromptVersion(category: keyof typeof PERPLEXITY_PROMPTS): string {
521:   return PERPLEXITY_PROMPTS[category].version
522: }
523: 
524: /**
525:  * Get all prompt versions
526:  */
527: export function getAllPromptVersions(): Record<string, string> {
528:   return Object.fromEntries(
529:     Object.entries(PERPLEXITY_PROMPTS).map(([key, value]) => [key, value.version])
530:   )
531: }
</file>

<file path="src/lib/prompts/perplexity.ts">
  1: export const JOB_ANALYSIS_SYSTEM_PROMPT = `
  2: You are a job market analyst with live web access and current hiring trend awareness.
  3: 
  4: TASK:
  5: - Analyze the provided job description and (if needed) briefly cross-check current market context for this role.
  6: - Produce structured JSON only (no markdown), suitable for downstream automation.
  7: 
  8: STRICT JSON OUTPUT (and nothing else):
  9: {
 10:   "jobTitle": "Extracted job title",
 11:   "companyName": "Company name if mentioned",
 12:   "location": "Location if present",
 13:   "remote": "remote|hybrid|onsite|null",
 14:   "experienceLevel": "entry|mid|senior|executive|null",
 15:   "keyRequirements": ["Top 5-10 must-have requirements"],
 16:   "preferredSkills": ["Nice-to-have skills"],
 17:   "responsibilities": ["Primary responsibilities"],
 18:   "companyCulture": ["Culture signals if any"],
 19:   "educationRequirements": ["Education requirements if any"],
 20:   "salaryRange": "If stated or estimated (mark estimated)",
 21:   "marketContext": {
 22:     "demandLevel": "high|medium|low|null",
 23:     "competitiveness": "high|medium|low|null",
 24:     "notes": ["Short, actionable market notes"]
 25:   }
 26: }`
 27: 
 28: 
 29: // Enhanced resume optimization (human voice + ATS)
 30: export const ENHANCED_RESUME_SYSTEM_PROMPT = `
 31: You are an enterprise-grade resume optimization specialist with access to current ATS research and hiring manager psychology. Your goal is to create authentic, human-written resumes that achieve 85%+ ATS compatibility while sounding natural and human.
 32: 
 33: AUTHENTICITY REQUIREMENTS:
 34: - Natural, varied sentence lengths; avoid repetitive phrasing
 35: - Specific industry terminology, quantified results, real narrative
 36: - Avoid AI-detection triggers and overly formal tone
 37: 
 38: FORMATTING (ATS + VISUAL):
 39: - Single-column, clean layout; strategic whitespace
 40: - Header includes LinkedIn URL and location if provided
 41: - Bold section headers (PROFESSIONAL SUMMARY, EXPERIENCE, SKILLS, EDUCATION)
 42: - Bold company names and job titles for hierarchy
 43: - Standard bullet points (•) for experience
 44: - Consistent dates (MM/YYYY), 10.5–12pt professional font
 45: - Strategic bolding for key achievements/metrics
 46: 
 47: CONTENT STRATEGY:
 48: 1) Professional Summary (3–4 lines) with years of experience, 2–3 relevant skills, a quantified achievement, and natural tone
 49: 2) Experience: start each role with strongest quantified impact; varied action verbs; tie to business outcomes
 50: 3) Skills: categorized and aligned to JD terminology
 51: 
 52: STRICT OUTPUT: Return complete formatted resume text (no JSON).
 53: 
 54: STRICT AUTHENTICITY OVERRIDE:
 55: - Do NOT invent duties, tools, dates, employers, or metrics not present in the original resume. Enhance clarity and structure only.`;
 56: 
 57: export function buildEnhancedResumeUserPrompt(params: {
 58:   resumeText: string;
 59:   jobDescription: string;
 60:   jobTitle?: string;
 61:   companyName?: string;
 62:   candidate: { fullName?: string; location?: string; linkedin?: string };
 63: }): string {
 64:   const { resumeText, jobDescription, jobTitle, companyName, candidate } = params
 65:   const nameLine = candidate.fullName ? `CANDIDATE: ${candidate.fullName}` : 'CANDIDATE: (use original resume header)'
 66:   const loc = candidate.location || ''
 67:   const link = candidate.linkedin || ''
 68:   const headerHints = [loc && `LOCATION: ${loc}`, link && `LINKEDIN: ${link} (include in header)`].filter(Boolean).join('\n')
 69:   return `Create an authentic, professional resume that passes ATS and reads human.
 70: 
 71: ${nameLine}
 72: ${jobTitle ? `TARGET ROLE: ${jobTitle}${companyName ? ' at ' + companyName : ''}` : ''}
 73: ${headerHints}
 74: 
 75: JOB REQUIREMENTS TO MATCH:\n${jobDescription}
 76: 
 77: CURRENT RESUME CONTENT:\n${resumeText}
 78: 
 79: Ensure: 1) human voice, 2) professional formatting with bold headers/companies/titles and • bullets, 3) quantified achievements that already exist in the original resume (no fabrication), 4) 85%+ keyword match to JD, 5) full formatted resume text output.`
 80: }
 81: 
 82: // Enhanced cover letter prompts (human voice + research)
 83: export const ENHANCED_COVER_LETTER_SYSTEM_PROMPT = `
 84: You are an enterprise-grade cover letter specialist with access to current hiring trends and company intelligence. Produce authentic, concise cover letters that weave in specific company insights. No citation links or reference numbers; no markdown.
 85: 
 86: Best practices (2025): half-page length (≈200–350 words), compelling opening with value, quantified examples, conversational yet professional tone, strong call-to-action.
 87: 
 88: STRICT AUTHENTICITY:
 89: - ONLY use facts directly from the provided resume/candidate background
 90: - Do NOT fabricate achievements, tools, or experience not explicitly stated
 91: - Do NOT exaggerate years of experience (e.g., saying "decades" when candidate has 10-15 years)
 92: - Do NOT mention specific projects or achievements unless they appear in the resume
 93: - No citation links, no markdown, no reference brackets
 94: - Preserve the candidate's actual voice; avoid generic AI phrases (e.g., "dynamic, results-driven")
 95: 
 96: CRITICAL RULE - YEARS OF EXPERIENCE:
 97: - If provided with yearsExperience value, use EXACTLY that number
 98: - Do NOT say "over X years" or "decades" unless the actual number is 20+
 99: - Do NOT round up significantly (e.g., 11 years → "over 15 years")
100: - Use precise language: "With X years of experience" or "Over the past X years"
101: 
102: CRITICAL RULE - CURRENT EMPLOYMENT:
103: - The candidate is APPLYING TO the company, they do NOT currently work there
104: - Do NOT say "In my current role at [TARGET COMPANY]"
105: - Do NOT imply the candidate already works at the target company
106: - If the candidate's resume mentions the target company as a PAST employer, that's fine
107: - Use phrases like: "I am excited to apply", "I am drawn to [COMPANY]", "I would bring to [COMPANY]"
108: `;
109: 
110: export function buildEnhancedCoverLetterUserPrompt(params: {
111:   candidateName?: string;
112:   jobTitle: string;
113:   companyName: string;
114:   location?: string;
115:   jobDescription: string;
116:   candidateHighlights?: string;
117:   companyData?: any;
118:   currentEmployer?: string;
119: }): string {
120:   const { candidateName, jobTitle, companyName, location, jobDescription, candidateHighlights, companyData, currentEmployer } = params
121:   const header = [candidateName && `CANDIDATE: ${candidateName}`, location && `LOCATION: ${location}`].filter(Boolean).join('\n')
122:   const companyHints = companyData ? `\nCOMPANY DATA (best-effort):\n${JSON.stringify(companyData).slice(0, 1200)}` : ''
123:   const employerWarning = currentEmployer && currentEmployer !== companyName 
124:     ? `\n⚠️ CURRENT EMPLOYER: ${currentEmployer} (NOT ${companyName})`
125:     : currentEmployer === companyName
126:     ? `\n⚠️ Candidate may currently work at ${companyName} - verify before writing`
127:     : `\n⚠️ Candidate is APPLYING TO ${companyName}, does NOT work there`
128:   
129:   return `Research ${companyName} (site, LinkedIn, recent news) and create an authentic, concise cover letter.
130: 
131: ${header}
132: POSITION: ${jobTitle}
133: COMPANY APPLYING TO: ${companyName}${employerWarning}
134: 
135: JOB POSTING:\n${jobDescription}
136: 
137: CANDIDATE BACKGROUND:\n${candidateHighlights || '(use resume highlights)'}${companyHints}
138: 
139: Requirements:
140: - Three paragraphs max; conversational human voice; no generic phrases; no citation links
141: - Include 1–2 specific company developments or culture signals
142: - Quantified, relevant achievements drawn only from the candidate background; mirror JD terminology naturally
143: - Strong closing with next-steps
144: - CRITICAL: The candidate is APPLYING TO ${companyName}, so use phrases like "I am excited to apply for the ${jobTitle} position at ${companyName}" NOT "In my current role at ${companyName}"
145: Return the final letter text only.`
146: }
147: 
148: 
149: // duplicate block removed
</file>

<file path="src/lib/public-job-boards-config.ts">
  1: /**
  2:  * Public Job Boards Configuration
  3:  * 
  4:  * This configuration includes ONLY job boards with:
  5:  * 1. Public listings that can be scraped via Perplexity
  6:  * 2. Open APIs that don't require partnerships
  7:  * 3. ATS platforms with public job feeds
  8:  * 
  9:  * Based on October 2025 accessibility research
 10:  */
 11: 
 12: export type JobBoardAccessType = 
 13:   | 'public-api'           // Has open public API
 14:   | 'ats-public'          // ATS with public job feeds
 15:   | 'scraping-allowed'    // Public listings, scraping via Perplexity
 16:   | 'government-open'     // Government job board with open data
 17: 
 18: export interface PublicJobBoardConfig {
 19:   name: string
 20:   displayName: string
 21:   country: string
 22:   accessType: JobBoardAccessType
 23:   scrapingConfig?: {
 24:     baseUrl: string
 25:     searchUrl: string
 26:     perplexityQuery: string
 27:     canUsePerplexity: boolean
 28:   }
 29:   apiConfig?: {
 30:     baseUrl: string
 31:     requiresAuth: boolean
 32:     authType?: 'api-key' | 'oauth' | 'none'
 33:     documentation?: string
 34:   }
 35:   features: {
 36:     canDiscoverJobs: boolean
 37:     canApplyDirectly: boolean
 38:     estimatedJobCount: string
 39:     updateFrequency: string
 40:   }
 41: }
 42: 
 43: /**
 44:  * CANADIAN JOB BOARDS - Priority for your target market
 45:  */
 46: export const CANADIAN_JOB_BOARDS: Record<string, PublicJobBoardConfig> = {
 47:   jobbank: {
 48:     name: 'jobbank',
 49:     displayName: 'Job Bank Canada',
 50:     country: 'Canada',
 51:     accessType: 'government-open',
 52:     scrapingConfig: {
 53:       baseUrl: 'https://www.jobbank.gc.ca',
 54:       searchUrl: 'https://www.jobbank.gc.ca/jobsearch/jobsearch',
 55:       perplexityQuery: 'site:jobbank.gc.ca "{keywords}" "{location}" after:2024-01-01',
 56:       canUsePerplexity: true
 57:     },
 58:     apiConfig: {
 59:       baseUrl: 'https://www.jobbank.gc.ca',
 60:       requiresAuth: false,
 61:       authType: 'none',
 62:       documentation: 'https://www.jobbank.gc.ca/content_pieces-eng.do?cid=8524'
 63:     },
 64:     features: {
 65:       canDiscoverJobs: true,
 66:       canApplyDirectly: false, // Redirects to employer sites
 67:       estimatedJobCount: '100,000+',
 68:       updateFrequency: 'Daily'
 69:     }
 70:   },
 71: 
 72:   jobboom: {
 73:     name: 'jobboom',
 74:     displayName: 'Jobboom',
 75:     country: 'Canada',
 76:     accessType: 'scraping-allowed',
 77:     scrapingConfig: {
 78:       baseUrl: 'https://www.jobboom.com',
 79:       searchUrl: 'https://www.jobboom.com/en/job-search',
 80:       perplexityQuery: 'site:jobboom.com "{keywords}" "{location}" after:2024-01-01',
 81:       canUsePerplexity: true
 82:     },
 83:     features: {
 84:       canDiscoverJobs: true,
 85:       canApplyDirectly: false,
 86:       estimatedJobCount: '50,000+',
 87:       updateFrequency: 'Daily'
 88:     }
 89:   },
 90: 
 91:   workopolis: {
 92:     name: 'workopolis',
 93:     displayName: 'Workopolis',
 94:     country: 'Canada',
 95:     accessType: 'scraping-allowed',
 96:     scrapingConfig: {
 97:       baseUrl: 'https://www.workopolis.com',
 98:       searchUrl: 'https://www.workopolis.com/jobsearch/jobs',
 99:       perplexityQuery: 'site:workopolis.com "{keywords}" "{location}" after:2024-01-01',
100:       canUsePerplexity: true
101:     },
102:     features: {
103:       canDiscoverJobs: true,
104:       canApplyDirectly: false,
105:       estimatedJobCount: '30,000+',
106:       updateFrequency: 'Daily'
107:     }
108:   },
109: 
110:   jooble: {
111:     name: 'jooble',
112:     displayName: 'Jooble Canada',
113:     country: 'Canada',
114:     accessType: 'public-api',
115:     apiConfig: {
116:       baseUrl: 'https://ca.jooble.org/api',
117:       requiresAuth: true,
118:       authType: 'api-key',
119:       documentation: 'https://jooble.org/api/about'
120:     },
121:     scrapingConfig: {
122:       baseUrl: 'https://ca.jooble.org',
123:       searchUrl: 'https://ca.jooble.org/search',
124:       perplexityQuery: 'site:ca.jooble.org "{keywords}" "{location}" after:2024-01-01',
125:       canUsePerplexity: true
126:     },
127:     features: {
128:       canDiscoverJobs: true,
129:       canApplyDirectly: false,
130:       estimatedJobCount: '100,000+',
131:       updateFrequency: 'Daily'
132:     }
133:   },
134: 
135:   indeedca: {
136:     name: 'indeedca',
137:     displayName: 'Indeed Canada',
138:     country: 'Canada',
139:     accessType: 'scraping-allowed',
140:     scrapingConfig: {
141:       baseUrl: 'https://ca.indeed.com',
142:       searchUrl: 'https://ca.indeed.com/jobs',
143:       perplexityQuery: 'site:ca.indeed.com "{keywords}" "{location}" after:2024-01-01',
144:       canUsePerplexity: true
145:     },
146:     features: {
147:       canDiscoverJobs: true,
148:       canApplyDirectly: false,
149:       estimatedJobCount: '500,000+',
150:       updateFrequency: 'Real-time'
151:     }
152:   },
153: 
154:   ziprecruiter_ca: {
155:     name: 'ziprecruiter_ca',
156:     displayName: 'ZipRecruiter Canada',
157:     country: 'Canada',
158:     accessType: 'scraping-allowed',
159:     scrapingConfig: {
160:       baseUrl: 'https://www.ziprecruiter.ca',
161:       searchUrl: 'https://www.ziprecruiter.ca/jobs-search',
162:       perplexityQuery: 'site:ziprecruiter.ca "{keywords}" "{location}" after:2024-01-01',
163:       canUsePerplexity: true
164:     },
165:     features: {
166:       canDiscoverJobs: true,
167:       canApplyDirectly: false,
168:       estimatedJobCount: '50,000+',
169:       updateFrequency: 'Daily'
170:     }
171:   },
172: 
173:   monster_ca: {
174:     name: 'monster_ca',
175:     displayName: 'Monster Canada',
176:     country: 'Canada',
177:     accessType: 'scraping-allowed',
178:     scrapingConfig: {
179:       baseUrl: 'https://www.monster.ca',
180:       searchUrl: 'https://www.monster.ca/jobs/search',
181:       perplexityQuery: 'site:monster.ca "{keywords}" "{location}" after:2024-01-01',
182:       canUsePerplexity: true
183:     },
184:     features: {
185:       canDiscoverJobs: true,
186:       canApplyDirectly: false,
187:       estimatedJobCount: '40,000+',
188:       updateFrequency: 'Daily'
189:     }
190:   },
191: 
192:   glassdoor_ca: {
193:     name: 'glassdoor_ca',
194:     displayName: 'Glassdoor Canada',
195:     country: 'Canada',
196:     accessType: 'scraping-allowed',
197:     scrapingConfig: {
198:       baseUrl: 'https://www.glassdoor.ca',
199:       searchUrl: 'https://www.glassdoor.ca/Job/jobs.htm',
200:       perplexityQuery: 'site:glassdoor.ca/Job "{keywords}" "{location}" after:2024-01-01',
201:       canUsePerplexity: true
202:     },
203:     features: {
204:       canDiscoverJobs: true,
205:       canApplyDirectly: false,
206:       estimatedJobCount: '100,000+',
207:       updateFrequency: 'Daily'
208:     }
209:   },
210: 
211:   dice_ca: {
212:     name: 'dice_ca',
213:     displayName: 'Dice Canada',
214:     country: 'Canada',
215:     accessType: 'scraping-allowed',
216:     scrapingConfig: {
217:       baseUrl: 'https://www.dice.com',
218:       searchUrl: 'https://www.dice.com/jobs',
219:       perplexityQuery: 'site:dice.com "{keywords}" Canada after:2024-01-01',
220:       canUsePerplexity: true
221:     },
222:     features: {
223:       canDiscoverJobs: true,
224:       canApplyDirectly: false,
225:       estimatedJobCount: '20,000+',
226:       updateFrequency: 'Daily'
227:     }
228:   }
229: }
230: 
231: /**
232:  * MAJOR JOB BOARDS - Public listings only (no direct API access)
233:  */
234: export const MAJOR_JOB_BOARDS: Record<string, PublicJobBoardConfig> = {
235:   linkedin: {
236:     name: 'linkedin',
237:     displayName: 'LinkedIn',
238:     country: 'Global',
239:     accessType: 'scraping-allowed',
240:     scrapingConfig: {
241:       baseUrl: 'https://www.linkedin.com',
242:       searchUrl: 'https://www.linkedin.com/jobs/search',
243:       perplexityQuery: 'site:linkedin.com/jobs "{keywords}" "{location}" after:2024-01-01',
244:       canUsePerplexity: true
245:     },
246:     features: {
247:       canDiscoverJobs: true,
248:       canApplyDirectly: false, // Requires frontend automation
249:       estimatedJobCount: '20M+',
250:       updateFrequency: 'Real-time'
251:     }
252:   },
253: 
254:   indeed: {
255:     name: 'indeed',
256:     displayName: 'Indeed Canada',
257:     country: 'Canada',
258:     accessType: 'scraping-allowed',
259:     scrapingConfig: {
260:       baseUrl: 'https://ca.indeed.com',
261:       searchUrl: 'https://ca.indeed.com/jobs',
262:       perplexityQuery: 'site:ca.indeed.com "{keywords}" "{location}" after:2024-01-01',
263:       canUsePerplexity: true
264:     },
265:     features: {
266:       canDiscoverJobs: true,
267:       canApplyDirectly: false,
268:       estimatedJobCount: '5M+',
269:       updateFrequency: 'Real-time'
270:     }
271:   },
272: 
273:   glassdoor: {
274:     name: 'glassdoor',
275:     displayName: 'Glassdoor',
276:     country: 'Global',
277:     accessType: 'scraping-allowed',
278:     scrapingConfig: {
279:       baseUrl: 'https://www.glassdoor.ca',
280:       searchUrl: 'https://www.glassdoor.ca/Job/jobs.htm',
281:       perplexityQuery: 'site:glassdoor.ca/Job "{keywords}" "{location}" after:2024-01-01',
282:       canUsePerplexity: true
283:     },
284:     features: {
285:       canDiscoverJobs: true,
286:       canApplyDirectly: false,
287:       estimatedJobCount: '2M+',
288:       updateFrequency: 'Daily'
289:     }
290:   }
291: }
292: 
293: /**
294:  * OPEN API JOB BOARDS - Require API keys but are publicly accessible
295:  */
296: export const OPEN_API_BOARDS: Record<string, PublicJobBoardConfig> = {
297:   usajobs: {
298:     name: 'usajobs',
299:     displayName: 'USAJobs',
300:     country: 'United States',
301:     accessType: 'public-api',
302:     apiConfig: {
303:       baseUrl: 'https://data.usajobs.gov/api',
304:       requiresAuth: true,
305:       authType: 'api-key',
306:       documentation: 'https://developer.usajobs.gov'
307:     },
308:     features: {
309:       canDiscoverJobs: true,
310:       canApplyDirectly: false,
311:       estimatedJobCount: '500K+',
312:       updateFrequency: 'Real-time'
313:     }
314:   },
315: 
316:   adzuna: {
317:     name: 'adzuna',
318:     displayName: 'Adzuna',
319:     country: 'Global',
320:     accessType: 'public-api',
321:     apiConfig: {
322:       baseUrl: 'https://api.adzuna.com/v1/api',
323:       requiresAuth: true,
324:       authType: 'api-key',
325:       documentation: 'https://developer.adzuna.com/docs'
326:     },
327:     features: {
328:       canDiscoverJobs: true,
329:       canApplyDirectly: false,
330:       estimatedJobCount: '10M+',
331:       updateFrequency: 'Real-time'
332:     }
333:   },
334: 
335:   careerjet: {
336:     name: 'careerjet',
337:     displayName: 'Careerjet',
338:     country: 'Global',
339:     accessType: 'public-api',
340:     apiConfig: {
341:       baseUrl: 'https://public-api.careerjet.com',
342:       requiresAuth: true,
343:       authType: 'api-key',
344:       documentation: 'https://www.careerjet.com/partners/api/'
345:     },
346:     features: {
347:       canDiscoverJobs: true,
348:       canApplyDirectly: false,
349:       estimatedJobCount: '20M+',
350:       updateFrequency: 'Real-time'
351:     }
352:   }
353: }
354: 
355: /**
356:  * ATS PLATFORMS - Public job feeds from company career pages
357:  */
358: export const ATS_PLATFORMS: Record<string, PublicJobBoardConfig> = {
359:   greenhouse: {
360:     name: 'greenhouse',
361:     displayName: 'Greenhouse ATS',
362:     country: 'Global',
363:     accessType: 'ats-public',
364:     apiConfig: {
365:       baseUrl: 'https://api.greenhouse.io/v1/boards',
366:       requiresAuth: false,
367:       authType: 'none',
368:       documentation: 'https://developers.greenhouse.io/job-board.html'
369:     },
370:     features: {
371:       canDiscoverJobs: true,
372:       canApplyDirectly: false,
373:       estimatedJobCount: '200K+',
374:       updateFrequency: 'Real-time'
375:     }
376:   },
377: 
378:   lever: {
379:     name: 'lever',
380:     displayName: 'Lever ATS',
381:     country: 'Global',
382:     accessType: 'ats-public',
383:     apiConfig: {
384:       baseUrl: 'https://api.lever.co/v0/postings',
385:       requiresAuth: false,
386:       authType: 'none',
387:       documentation: 'https://github.com/lever/postings-api'
388:     },
389:     features: {
390:       canDiscoverJobs: true,
391:       canApplyDirectly: false,
392:       estimatedJobCount: '150K+',
393:       updateFrequency: 'Real-time'
394:     }
395:   },
396: 
397:   workable: {
398:     name: 'workable',
399:     displayName: 'Workable ATS',
400:     country: 'Global',
401:     accessType: 'ats-public',
402:     apiConfig: {
403:       baseUrl: 'https://apply.workable.com/api/v1/widget/accounts',
404:       requiresAuth: false,
405:       authType: 'none',
406:       documentation: 'https://workable.readme.io/reference/job-board-api'
407:     },
408:     features: {
409:       canDiscoverJobs: true,
410:       canApplyDirectly: false,
411:       estimatedJobCount: '100K+',
412:       updateFrequency: 'Real-time'
413:     }
414:   },
415: 
416:   ashby: {
417:     name: 'ashby',
418:     displayName: 'Ashby ATS',
419:     country: 'Global',
420:     accessType: 'ats-public',
421:     apiConfig: {
422:       baseUrl: 'https://api.ashbyhq.com/posting-api/job-board',
423:       requiresAuth: false,
424:       authType: 'none',
425:       documentation: 'https://developers.ashbyhq.com/reference/postingapi'
426:     },
427:     features: {
428:       canDiscoverJobs: true,
429:       canApplyDirectly: false,
430:       estimatedJobCount: '50K+',
431:       updateFrequency: 'Real-time'
432:     }
433:   },
434: 
435:   recruitee: {
436:     name: 'recruitee',
437:     displayName: 'Recruitee ATS',
438:     country: 'Global',
439:     accessType: 'ats-public',
440:     apiConfig: {
441:       baseUrl: 'https://{company}.recruitee.com/api/offers',
442:       requiresAuth: false,
443:       authType: 'none',
444:       documentation: 'https://developers.recruitee.com'
445:     },
446:     features: {
447:       canDiscoverJobs: true,
448:       canApplyDirectly: false,
449:       estimatedJobCount: '30K+',
450:       updateFrequency: 'Real-time'
451:     }
452:   },
453: 
454:   jooble_api: {
455:     name: 'jooble_api',
456:     displayName: 'Jooble API',
457:     country: 'Global',
458:     accessType: 'public-api',
459:     apiConfig: {
460:       baseUrl: 'https://jooble.org/api',
461:       requiresAuth: true,
462:       authType: 'api-key',
463:       documentation: 'https://jooble.org/api/about'
464:     },
465:     features: {
466:       canDiscoverJobs: true,
467:       canApplyDirectly: false,
468:       estimatedJobCount: '5M+',
469:       updateFrequency: 'Real-time'
470:     }
471:   },
472: 
473:   careerjet_ca: {
474:     name: 'careerjet_ca',
475:     displayName: 'Careerjet Canada',
476:     country: 'Canada',
477:     accessType: 'public-api',
478:     apiConfig: {
479:       baseUrl: 'https://public-api.careerjet.ca/search',
480:       requiresAuth: true,
481:       authType: 'api-key',
482:       documentation: 'https://www.careerjet.com/partners/api/'
483:     },
484:     features: {
485:       canDiscoverJobs: true,
486:       canApplyDirectly: false,
487:       estimatedJobCount: '200K+',
488:       updateFrequency: 'Real-time'
489:     }
490:   }
491: }
492: 
493: /**
494:  * ALL PUBLIC JOB BOARDS - Combined configuration
495:  */
496: export const ALL_PUBLIC_BOARDS = {
497:   ...CANADIAN_JOB_BOARDS,
498:   ...MAJOR_JOB_BOARDS,
499:   ...OPEN_API_BOARDS,
500:   ...ATS_PLATFORMS
501: }
502: 
503: /**
504:  * Get boards by access type
505:  */
506: export function getBoardsByAccessType(accessType: JobBoardAccessType): PublicJobBoardConfig[] {
507:   return Object.values(ALL_PUBLIC_BOARDS).filter(board => board.accessType === accessType)
508: }
509: 
510: /**
511:  * Get Canadian boards only
512:  */
513: export function getCanadianBoards(): PublicJobBoardConfig[] {
514:   return Object.values(ALL_PUBLIC_BOARDS).filter(board => board.country === 'Canada')
515: }
516: 
517: /**
518:  * Get boards that can be scraped via Perplexity
519:  */
520: export function getPerplexityScrapableBoards(): PublicJobBoardConfig[] {
521:   return Object.values(ALL_PUBLIC_BOARDS).filter(
522:     board => board.scrapingConfig?.canUsePerplexity
523:   )
524: }
525: 
526: /**
527:  * Get boards with open APIs
528:  */
529: export function getOpenAPIBoards(): PublicJobBoardConfig[] {
530:   return Object.values(ALL_PUBLIC_BOARDS).filter(
531:     board => board.apiConfig && !board.apiConfig.requiresAuth
532:   )
533: }
534: 
535: /**
536:  * Priority order for job discovery
537:  * (Canadian boards first, then major boards, then open APIs)
538:  */
539: export const DISCOVERY_PRIORITY_ORDER = [
540:   'jobbank',         // Canada government (highest priority)
541:   'jobboom',         // Canadian bilingual
542:   'workopolis',      // Canadian
543:   'jooble',          // Canadian job aggregator
544:   'indeedca',        // Indeed Canada (major board)
545:   'careerjet_ca',    // Careerjet Canada
546:   'ziprecruiter_ca', // ZipRecruiter Canada
547:   'monster_ca',      // Monster Canada
548:   'glassdoor_ca',    // Glassdoor Canada
549:   'dice_ca',         // Dice Canada (tech jobs)
550:   'linkedin',        // LinkedIn (global)
551:   'indeed',          // Indeed (global)
552:   'glassdoor',       // Glassdoor (global)
553:   'greenhouse',      // ATS platform
554:   'lever',           // ATS platform
555:   'workable',        // ATS platform
556:   'recruitee',       // ATS platform
557:   'ashby',           // ATS platform
558:   'adzuna',          // Open API aggregator
559:   'jooble_api',      // Jooble API
560:   'careerjet',       // Open API aggregator (global)
561:   'usajobs'          // Government (US)
562: ]
563: 
564: /**
565:  * Companies using specific ATS platforms (curated list)
566:  */
567: export const ATS_COMPANY_DIRECTORY = {
568:   greenhouse: [
569:     'airbnb', 'pinterest', 'coinbase', 'robinhood', 'gitlab',
570:     'doordash', 'figma', 'notion', 'airtable', 'segment',
571:     'datadog', 'plaid', 'contentful', 'grammarly', 'flexport'
572:   ],
573:   lever: [
574:     'netflix', 'uber', 'spotify', 'postmates', 'box',
575:     'shopify', 'canva', 'discord', 'coda', 'superhuman',
576:     'vercel', 'linear', 'mercury', 'ramp', 'brex'
577:   ],
578:   workable: [
579:     'beat', 'workable', 'instacar', 'skroutz', 'persado',
580:     'epignosis', 'goodvidio', 'scytl', 'quality-unit', 'omnisend'
581:   ],
582:   ashby: [
583:     'ashby', 'descript', 'runway', 'scale', 'ramp',
584:     'mercury', 'lattice', 'compound', 'rippling', 'scale'
585:   ],
586:   recruitee: [
587:     'recruitee', 'bynder', 'catawiki', 'sendcloud', 'mollie',
588:     'peak', 'channable', 'trengo', 'effectory', 'piggy'
589:   ]
590: }
591: 
592: /**
593:  * Canadian companies using ATS platforms
594:  */
595: export const CANADIAN_ATS_COMPANIES = {
596:   greenhouse: [
597:     'shopify', 'hootsuite', 'wealthsimple', 'faire', 'thinkific',
598:     'lightspeed', 'financeit', 'later', 'clickup', 'copperleaf'
599:   ],
600:   lever: [
601:     'slack', 'wealthsimple', 'hootsuite', 'shopify', 'bench',
602:     'clio', 'clearco', 'flashfood', 'league', 'properly'
603:   ],
604:   workable: [
605:     'freshbooks', 'visier', 'unbounce', 'axonify', 'crowdriff',
606:     'soapbox', 'klue', 'samdesk', 'coinsquare', 'tulip'
607:   ],
608:   recruitee: [
609:     'paytm', 'ecobee', 'geotab', 'auvik', 'alida',
610:     'miovision', 'nulogy', 'ritual', 'wave', 'koho'
611:   ],
612:   ashby: [
613:     'faire', 'clearco', 'notion', 'part', 'properly',
614:     'district', 'maple', 'borrowell', 'league', 'shakepay'
615:   ]
616: }
</file>

<file path="src/lib/public-job-discovery-service.ts">
  1: /**
  2:  * Public Job Discovery Service
  3:  * 
  4:  * Discovers jobs from PUBLIC sources only:
  5:  * 1. Canadian job boards (Job Bank, Jobboom, Workopolis)
  6:  * 2. Major boards via Perplexity scraping (LinkedIn, Indeed, Glassdoor)
  7:  * 3. Open API aggregators (Adzuna, Careerjet, USAJobs)
  8:  * 4. ATS platforms (Greenhouse, Lever, Workable, Ashby)
  9:  */
 10: 
 11: import { PerplexityService } from './perplexity-service'
 12: import { PerplexityIntelligenceService } from './perplexity-intelligence'
 13: import {
 14:   ALL_PUBLIC_BOARDS,
 15:   CANADIAN_JOB_BOARDS,
 16:   ATS_COMPANY_DIRECTORY,
 17:   DISCOVERY_PRIORITY_ORDER,
 18:   type PublicJobBoardConfig
 19: } from './public-job-boards-config'
 20: 
 21: export interface JobSearchQuery {
 22:   keywords: string
 23:   location?: string
 24:   boards?: string[]  // Specific boards to search, or all if empty
 25:   limit?: number
 26:   remote?: boolean
 27:   salaryMin?: number
 28:   experienceLevel?: 'entry' | 'mid' | 'senior'
 29: }
 30: 
 31: export interface DiscoveredJob {
 32:   id: string
 33:   title: string
 34:   company: string
 35:   location: string
 36:   description: string
 37:   url: string
 38:   salary?: string
 39:   datePosted?: string
 40:   source: string
 41:   sourceDisplayName: string
 42:   sourceType: 'scraping' | 'api' | 'ats'
 43:   applyMethod: 'external' | 'direct' | 'manual'
 44: }
 45: 
 46: export class PublicJobDiscoveryService {
 47:   private perplexity: PerplexityService
 48: 
 49:   constructor() {
 50:     this.perplexity = new PerplexityService()
 51:   }
 52: 
 53:   /**
 54:    * Main entry point - discover jobs from all available public sources
 55:    */
 56:   async discoverJobs(query: JobSearchQuery): Promise<DiscoveredJob[]> {
 57:     const { keywords, location = 'Canada', boards, limit = 100 } = query
 58: 
 59:     // Determine which boards to search
 60:     const boardsToSearch = boards && boards.length > 0
 61:       ? boards
 62:       : DISCOVERY_PRIORITY_ORDER
 63: 
 64:     console.log(`[JOB_DISCOVERY] Searching ${boardsToSearch.length} job boards for "${keywords}" in ${location}`)
 65: 
 66:     // Search all boards in parallel
 67:     const searchPromises = boardsToSearch.map(boardName => 
 68:       this.searchSingleBoard(boardName, query).catch(error => {
 69:         console.error(`[JOB_DISCOVERY] Failed to search ${boardName}:`, error)
 70:         return []
 71:       })
 72:     )
 73: 
 74:     const results = await Promise.all(searchPromises)
 75:     const allJobs = results.flat()
 76: 
 77:     // Deduplicate and rank
 78:     const uniqueJobs = this.deduplicateJobs(allJobs)
 79:     const rankedJobs = this.rankJobsByRelevance(uniqueJobs, query)
 80: 
 81:     console.log(`[JOB_DISCOVERY] Found ${rankedJobs.length} unique jobs from ${boardsToSearch.length} sources`)
 82: 
 83:     return rankedJobs.slice(0, limit)
 84:   }
 85: 
 86:   /**
 87:    * Search a single job board
 88:    */
 89:   private async searchSingleBoard(boardName: string, query: JobSearchQuery): Promise<DiscoveredJob[]> {
 90:     const config = ALL_PUBLIC_BOARDS[boardName]
 91:     
 92:     if (!config) {
 93:       console.warn(`[JOB_DISCOVERY] Unknown board: ${boardName}`)
 94:       return []
 95:     }
 96: 
 97:     if (!config.features.canDiscoverJobs) {
 98:       console.warn(`[JOB_DISCOVERY] ${config.displayName} does not support job discovery`)
 99:       return []
100:     }
101: 
102:     // Route to appropriate search method
103:     switch (config.accessType) {
104:       case 'scraping-allowed':
105:       case 'government-open':
106:         return this.searchViaPerplexity(config, query)
107:       
108:       case 'public-api':
109:         return this.searchViaPublicAPI(config, query)
110:       
111:       case 'ats-public':
112:         return this.searchViaATS(config, query)
113:       
114:       default:
115:         console.warn(`[JOB_DISCOVERY] Unknown access type for ${config.displayName}`)
116:         return []
117:     }
118:   }
119: 
120:   /**
121:    * Search via Perplexity web scraping (Canadian boards, LinkedIn, Indeed, Glassdoor)
122:    */
123:   private async searchViaPerplexity(
124:     config: PublicJobBoardConfig,
125:     query: JobSearchQuery
126:   ): Promise<DiscoveredJob[]> {
127:     if (!config.scrapingConfig?.canUsePerplexity) {
128:       return []
129:     }
130: 
131:     const { keywords, location = 'Canada', remote, salaryMin } = query
132: 
133:     // Build Perplexity search query
134:     let searchQuery = config.scrapingConfig.perplexityQuery
135:       .replace('{keywords}', keywords)
136:       .replace('{location}', location)
137: 
138:     if (remote) {
139:       searchQuery += ' remote'
140:     }
141: 
142:     if (salaryMin) {
143:       searchQuery += ` salary:>${salaryMin}`
144:     }
145: 
146:     try {
147:       const results = await PerplexityIntelligenceService.jobQuickSearch(
148:         searchQuery,
149:         [new URL(config.scrapingConfig.baseUrl).hostname],
150:         20,
151:         'week'
152:       )
153: 
154:       return results.map((result: any) => this.normalizeJob(result, config, 'scraping'))
155:     } catch (error) {
156:       console.error(`[JOB_DISCOVERY] Perplexity search failed for ${config.displayName}:`, error)
157:       return []
158:     }
159:   }
160: 
161:   /**
162:    * Search via public APIs (Adzuna, Careerjet, USAJobs)
163:    */
164:   private async searchViaPublicAPI(
165:     config: PublicJobBoardConfig,
166:     query: JobSearchQuery
167:   ): Promise<DiscoveredJob[]> {
168:     if (!config.apiConfig) {
169:       return []
170:     }
171: 
172:     const { keywords, location = 'Canada' } = query
173: 
174:     try {
175:       // Route to specific API implementation
176:       switch (config.name) {
177:         case 'adzuna':
178:           return this.searchAdzuna(keywords, location)
179:         
180:         case 'careerjet':
181:           return this.searchCareerjet(keywords, location)
182:         
183:         case 'usajobs':
184:           return this.searchUSAJobs(keywords, location)
185:         
186:         default:
187:           console.warn(`[JOB_DISCOVERY] No API implementation for ${config.name}`)
188:           return []
189:       }
190:     } catch (error) {
191:       console.error(`[JOB_DISCOVERY] API search failed for ${config.displayName}:`, error)
192:       return []
193:     }
194:   }
195: 
196:   /**
197:    * Search via ATS platforms (Greenhouse, Lever, Workable, Ashby)
198:    */
199:   private async searchViaATS(
200:     config: PublicJobBoardConfig,
201:     query: JobSearchQuery
202:   ): Promise<DiscoveredJob[]> {
203:     if (!config.apiConfig) {
204:       return []
205:     }
206: 
207:     const { keywords } = query
208:     const companies = ATS_COMPANY_DIRECTORY[config.name] || []
209: 
210:     if (companies.length === 0) {
211:       return []
212:     }
213: 
214:     // Search all companies using this ATS
215:     const companySearches = companies.map(company =>
216:       this.searchATSCompany(config, company, keywords).catch(() => [])
217:     )
218: 
219:     const results = await Promise.all(companySearches)
220:     return results.flat()
221:   }
222: 
223:   /**
224:    * Search jobs from a specific company's ATS
225:    */
226:   private async searchATSCompany(
227:     config: PublicJobBoardConfig,
228:     company: string,
229:     keywords: string
230:   ): Promise<DiscoveredJob[]> {
231:     try {
232:       const url = `${config.apiConfig!.baseUrl}/${company}${config.name === 'lever' ? '?mode=json' : config.name === 'greenhouse' ? '/jobs?content=true' : ''}`
233:       
234:       const response = await fetch(url, {
235:         headers: {
236:           'Accept': 'application/json',
237:           'User-Agent': 'CareerLeverAI/1.0'
238:         }
239:       })
240: 
241:       if (!response.ok) {
242:         return []
243:       }
244: 
245:       const data = await response.json()
246:       const jobs = this.parseATSJobs(data, config.name, company)
247:       
248:       // Filter by keywords
249:       return jobs.filter(job => 
250:         job.title.toLowerCase().includes(keywords.toLowerCase()) ||
251:         job.description.toLowerCase().includes(keywords.toLowerCase())
252:       )
253:     } catch (error) {
254:       return []
255:     }
256:   }
257: 
258:   /**
259:    * Parse ATS-specific job formats
260:    */
261:   private parseATSJobs(data: any, atsName: string, company: string): DiscoveredJob[] {
262:     const jobs: any[] = data.jobs || data.postings || data || []
263: 
264:     return jobs.map(job => ({
265:       id: job.id || job.externalId || `${company}-${job.title}`,
266:       title: job.title || job.text || '',
267:       company: company,
268:       location: job.location?.name || job.location || job.categories?.location || '',
269:       description: job.description || job.content?.description || '',
270:       url: job.hostedUrl || job.applyUrl || `https://jobs.${atsName}.com/${company}/${job.id}`,
271:       salary: this.extractSalary(job),
272:       datePosted: job.createdAt || job.publishedAt || new Date().toISOString(),
273:       source: atsName,
274:       sourceDisplayName: ALL_PUBLIC_BOARDS[atsName].displayName,
275:       sourceType: 'ats' as const,
276:       applyMethod: 'external' as const
277:     }))
278:   }
279: 
280:   /**
281:    * Adzuna API search
282:    */
283:   private async searchAdzuna(keywords: string, location: string): Promise<DiscoveredJob[]> {
284:     const appId = process.env.ADZUNA_APP_ID
285:     const appKey = process.env.ADZUNA_API_KEY
286: 
287:     if (!appId || !appKey) {
288:       console.warn('[JOB_DISCOVERY] Adzuna API credentials not configured')
289:       return []
290:     }
291: 
292:     try {
293:       const country = location.includes('Canada') ? 'ca' : 'us'
294:       const url = `https://api.adzuna.com/v1/api/jobs/${country}/search/1?${new URLSearchParams({
295:         app_id: appId,
296:         app_key: appKey,
297:         what: keywords,
298:         where: location,
299:         results_per_page: '50'
300:       })}`
301: 
302:       const response = await fetch(url)
303:       const data = await response.json()
304: 
305:       return (data.results || []).map((job: any) => ({
306:         id: job.id,
307:         title: job.title,
308:         company: job.company.display_name,
309:         location: job.location.display_name,
310:         description: job.description,
311:         url: job.redirect_url,
312:         salary: job.salary_min ? `$${job.salary_min} - $${job.salary_max}` : undefined,
313:         datePosted: job.created,
314:         source: 'adzuna',
315:         sourceDisplayName: 'Adzuna',
316:         sourceType: 'api',
317:         applyMethod: 'external'
318:       }))
319:     } catch (error) {
320:       console.error('[JOB_DISCOVERY] Adzuna search failed:', error)
321:       return []
322:     }
323:   }
324: 
325:   /**
326:    * Careerjet API search
327:    */
328:   private async searchCareerjet(keywords: string, location: string): Promise<DiscoveredJob[]> {
329:     const apiKey = process.env.CAREERJET_API_KEY
330: 
331:     if (!apiKey) {
332:       console.warn('[JOB_DISCOVERY] Careerjet API key not configured')
333:       return []
334:     }
335: 
336:     // Careerjet implementation would go here
337:     // Omitted for brevity - similar pattern to Adzuna
338:     return []
339:   }
340: 
341:   /**
342:    * USAJobs API search
343:    */
344:   private async searchUSAJobs(keywords: string, location: string): Promise<DiscoveredJob[]> {
345:     const apiKey = process.env.USAJOBS_API_KEY
346:     const email = process.env.USAJOBS_EMAIL
347: 
348:     if (!apiKey || !email) {
349:       console.warn('[JOB_DISCOVERY] USAJobs API credentials not configured')
350:       return []
351:     }
352: 
353:     // USAJobs implementation would go here
354:     // Omitted for brevity - similar pattern to Adzuna
355:     return []
356:   }
357: 
358:   /**
359:    * Normalize job from different sources into common format
360:    */
361:   private normalizeJob(rawJob: any, config: PublicJobBoardConfig, sourceType: 'scraping' | 'api' | 'ats'): DiscoveredJob {
362:     return {
363:       id: rawJob.id || rawJob.url || `${config.name}-${Date.now()}`,
364:       title: rawJob.title || rawJob.jobTitle || '',
365:       company: rawJob.company || rawJob.companyName || '',
366:       location: rawJob.location || rawJob.jobLocation || '',
367:       description: rawJob.description || rawJob.summary || '',
368:       url: rawJob.url || rawJob.link || '',
369:       salary: rawJob.salary,
370:       datePosted: rawJob.postedDate || rawJob.date || new Date().toISOString(),
371:       source: config.name,
372:       sourceDisplayName: config.displayName,
373:       sourceType,
374:       applyMethod: 'external'
375:     }
376:   }
377: 
378:   /**
379:    * Deduplicate jobs by title + company
380:    */
381:   private deduplicateJobs(jobs: DiscoveredJob[]): DiscoveredJob[] {
382:     const unique = new Map<string, DiscoveredJob>()
383: 
384:     for (const job of jobs) {
385:       const key = `${job.title.toLowerCase().trim()}-${job.company.toLowerCase().trim()}`
386:       
387:       // Prefer API results over scraping if duplicate
388:       if (!unique.has(key) || (unique.get(key)!.sourceType === 'scraping' && job.sourceType === 'api')) {
389:         unique.set(key, job)
390:       }
391:     }
392: 
393:     return Array.from(unique.values())
394:   }
395: 
396:   /**
397:    * Rank jobs by relevance to query
398:    */
399:   private rankJobsByRelevance(jobs: DiscoveredJob[], query: JobSearchQuery): DiscoveredJob[] {
400:     return jobs.sort((a, b) => {
401:       let scoreA = 0
402:       let scoreB = 0
403: 
404:       // Prefer Canadian sources
405:       if (CANADIAN_JOB_BOARDS[a.source]) scoreA += 10
406:       if (CANADIAN_JOB_BOARDS[b.source]) scoreB += 10
407: 
408:       // Prefer recent posts
409:       if (a.datePosted && this.isRecent(a.datePosted)) scoreA += 5
410:       if (b.datePosted && this.isRecent(b.datePosted)) scoreB += 5
411: 
412:       // Prefer jobs with salary info
413:       if (a.salary) scoreA += 3
414:       if (b.salary) scoreB += 3
415: 
416:       // Prefer API/ATS over scraping (more reliable data)
417:       if (a.sourceType !== 'scraping') scoreA += 2
418:       if (b.sourceType !== 'scraping') scoreB += 2
419: 
420:       return scoreB - scoreA
421:     })
422:   }
423: 
424:   /**
425:    * Check if job was posted recently (within 7 days)
426:    */
427:   private isRecent(datePosted: string): boolean {
428:     const posted = new Date(datePosted)
429:     const now = new Date()
430:     const daysDiff = (now.getTime() - posted.getTime()) / (1000 * 60 * 60 * 24)
431:     return daysDiff <= 7
432:   }
433: 
434:   /**
435:    * Extract salary from various formats
436:    */
437:   private extractSalary(job: any): string | undefined {
438:     if (job.salary) return job.salary
439:     if (job.salaryMin && job.salaryMax) return `$${job.salaryMin} - $${job.salaryMax}`
440:     if (job.compensation?.min && job.compensation?.max) return `$${job.compensation.min} - $${job.compensation.max}`
441:     return undefined
442:   }
443: }
</file>

<file path="src/lib/query-client.ts">
 1: /**
 2:  * React Query Configuration
 3:  * 
 4:  * Centralized configuration for TanStack Query (React Query)
 5:  * Handles caching, refetching, and error handling for server state
 6:  */
 7: 
 8: import { QueryClient } from '@tanstack/react-query'
 9: import { logger } from './logger'
10: 
11: export const queryClientConfig = {
12:   defaultOptions: {
13:     queries: {
14:       // Stale time: Data is fresh for 5 minutes
15:       staleTime: 5 * 60 * 1000,
16:       
17:       // Cache time: Keep unused data in cache for 10 minutes
18:       gcTime: 10 * 60 * 1000,
19:       
20:       // Retry failed requests 3 times with exponential backoff
21:       retry: 3,
22:       retryDelay: (attemptIndex: number) => Math.min(1000 * 2 ** attemptIndex, 30000),
23:       
24:       // Refetch on window focus (good for user returning to tab)
25:       refetchOnWindowFocus: true,
26:       
27:       // Don't refetch on mount if data is fresh
28:       refetchOnMount: false,
29:       
30:       // Refetch on network reconnect
31:       refetchOnReconnect: true,
32:       
33:       // Error handling
34:       throwOnError: false,
35:       
36:       // Structural sharing for performance
37:       structuralSharing: true,
38:     },
39:     mutations: {
40:       // Retry mutations once
41:       retry: 1,
42:       retryDelay: 1000,
43:       
44:       // Error handling
45:       throwOnError: false,
46:       
47:       // Log mutation errors
48:       onError: (error: any) => {
49:         logger.error('Mutation failed', {
50:           error: error?.message || 'Unknown mutation error',
51:           stack: error?.stack
52:         })
53:       },
54:     },
55:   },
56: }
57: 
58: // Create a single query client instance
59: export const createQueryClient = () => new QueryClient(queryClientConfig)
60: 
61: // Export singleton for app-wide use
62: export const queryClient = createQueryClient()
</file>

<file path="src/lib/rate-limit.ts">
  1: import Redis from 'ioredis'
  2: 
  3: type Counter = { count: number; resetAt: number };
  4: 
  5: const WINDOW_MS = Number(process.env.RATE_LIMIT_WINDOW_MS || 60 * 60 * 1000); // 1 hour
  6: 
  7: // In-memory fallback store
  8: const store: Map<string, Counter> = new Map();
  9: 
 10: // Redis client (optional - for distributed rate limiting)
 11: let redisClient: Redis | null = null;
 12: let redisAvailable = false;
 13: 
 14: // Initialize Redis if REDIS_URL is configured
 15: if (process.env.REDIS_URL) {
 16:   try {
 17:     redisClient = new Redis(process.env.REDIS_URL, {
 18:       maxRetriesPerRequest: 3,
 19:       enableReadyCheck: true,
 20:       lazyConnect: true
 21:     });
 22:     
 23:     redisClient.on('ready', () => {
 24:       redisAvailable = true;
 25:       console.log('[RATE_LIMIT] Redis connected - using distributed rate limiting');
 26:     });
 27:     
 28:     redisClient.on('error', (err) => {
 29:       console.warn('[RATE_LIMIT] Redis error, falling back to in-memory:', err.message);
 30:       redisAvailable = false;
 31:     });
 32:     
 33:     // Connect to Redis
 34:     redisClient.connect().catch(() => {
 35:       console.warn('[RATE_LIMIT] Redis connection failed, using in-memory fallback');
 36:       redisAvailable = false;
 37:     });
 38:   } catch (error) {
 39:     console.warn('[RATE_LIMIT] Redis initialization failed, using in-memory fallback');
 40:     redisAvailable = false;
 41:   }
 42: } else {
 43:   console.log('[RATE_LIMIT] REDIS_URL not configured, using in-memory rate limiting');
 44: }
 45: 
 46: export async function isRateLimited(userId: string | undefined, routeKey: string): Promise<boolean> {
 47:   // Production-ready rate limiting with increased limits for file uploads
 48:   if (!userId) return false;
 49:   
 50:   const key = `ratelimit:${userId}:${routeKey}`;
 51:   
 52:   // Route-specific limits
 53:   const limits: Record<string, number> = {
 54:     'file-upload': 5000,              // 5000 per hour for file uploads
 55:     'resume:upload': 5000,            // 5000 per hour for resume uploads  
 56:     'applications:attach': 5000,      // 5000 per hour for attachments
 57:     'ai-requests': 200,               // 200 per hour for AI
 58:     'cover-letter': 1000,             // 1000 per hour for cover letter generation
 59:     'outreach-send': 5,               // 5 per hour for email sending (strict!)
 60:     'api-general': 2000,              // 2000 per hour general API
 61:     'default': 1000                   // 1000 per hour default
 62:   }
 63:   
 64:   const limit = limits[routeKey] || limits['default'];
 65:   
 66:   // Use Redis if available, otherwise fall back to in-memory
 67:   if (redisAvailable && redisClient) {
 68:     return await isRateLimitedRedis(key, limit);
 69:   } else {
 70:     return isRateLimitedMemory(key, limit);
 71:   }
 72: }
 73: 
 74: /**
 75:  * Redis-based rate limiting (distributed)
 76:  */
 77: async function isRateLimitedRedis(key: string, limit: number): Promise<boolean> {
 78:   if (!redisClient) return false;
 79:   
 80:   try {
 81:     const ttl = Math.floor(WINDOW_MS / 1000); // Convert to seconds
 82:     
 83:     // Increment counter
 84:     const count = await redisClient.incr(key);
 85:     
 86:     // Set expiry on first request
 87:     if (count === 1) {
 88:       await redisClient.expire(key, ttl);
 89:     }
 90:     
 91:     return count > limit;
 92:   } catch (error) {
 93:     console.error('[RATE_LIMIT] Redis error:', error);
 94:     // Fall back to in-memory on error
 95:     return isRateLimitedMemory(key, limit);
 96:   }
 97: }
 98: 
 99: /**
100:  * In-memory rate limiting (fallback)
101:  */
102: function isRateLimitedMemory(key: string, limit: number): boolean {
103:   const now = Date.now();
104:   let entry = store.get(key);
105:   
106:   if (!entry || now > entry.resetAt) {
107:     entry = { count: 0, resetAt: now + WINDOW_MS };
108:   }
109:   
110:   entry.count += 1;
111:   store.set(key, entry);
112:   
113:   return entry.count > limit;
114: }
</file>

<file path="src/lib/rate-limiter.ts">
 1: import { NextRequest } from 'next/server'
 2: 
 3: interface RateLimitConfig {
 4:   windowMs: number
 5:   maxRequests: number
 6:   skipSuccessfulRequests?: boolean
 7:   skipFailedRequests?: boolean
 8: }
 9: 
10: interface RateLimitEntry {
11:   count: number
12:   resetTime: number
13: }
14: 
15: export class RateLimiter {
16:   private static instance: RateLimiter
17:   private storage = new Map<string, RateLimitEntry>()
18:   private configs: Record<string, RateLimitConfig> = {
19:     'api-general': { windowMs: 60 * 1000, maxRequests: 500 }, // High limit for general API
20:     'ai-requests': { windowMs: 60 * 1000, maxRequests: 100 }, // Higher for AI
21:     'file-upload': { windowMs: 60 * 1000, maxRequests: 1000 }, // VERY high for file uploads - per minute
22:     'auth-login': { windowMs: 15 * 60 * 1000, maxRequests: 100 }, // Higher auth limit
23:     'resume-customize': { windowMs: 60 * 1000, maxRequests: 100 }, // Higher
24:     'cover-letter': { windowMs: 60 * 1000, maxRequests: 100 }, // Higher
25:     'auth-session': { windowMs: 60 * 1000, maxRequests: 500 }, // Very high for session checks
26:   }
27: 
28:   static getInstance(): RateLimiter {
29:     if (!RateLimiter.instance) {
30:       RateLimiter.instance = new RateLimiter()
31:     }
32:     return RateLimiter.instance
33:   }
34: 
35:   async checkLimit(
36:     identifier: string,
37:     type: keyof typeof this.configs
38:   ): Promise<{ allowed: boolean; remaining: number; resetTime: number }> {
39:     const config = this.configs[type]
40:     const key = `${type}:${identifier}`
41:     const now = Date.now()
42: 
43:     let entry = this.storage.get(key)
44: 
45:     if (!entry || now > entry.resetTime) {
46:       entry = {
47:         count: 0,
48:         resetTime: now + config.windowMs
49:       }
50:     }
51: 
52:     const allowed = entry.count < config.maxRequests
53: 
54:     if (allowed) {
55:       entry.count++
56:       this.storage.set(key, entry)
57:     }
58: 
59:     return {
60:       allowed,
61:       remaining: Math.max(0, config.maxRequests - entry.count),
62:       resetTime: entry.resetTime
63:     }
64:   }
65: 
66:   // Middleware function
67:   createMiddleware(type: keyof typeof this.configs) {
68:     return async (request: NextRequest) => {
69:       const identifier = this.getIdentifier(request)
70:       const result = await this.checkLimit(identifier, type)
71: 
72:       if (!result.allowed) {
73:         return new Response('Rate limit exceeded', {
74:           status: 429,
75:           headers: {
76:             'Retry-After': Math.ceil((result.resetTime - Date.now()) / 1000).toString(),
77:             'X-RateLimit-Limit': this.configs[type].maxRequests.toString(),
78:             'X-RateLimit-Remaining': result.remaining.toString(),
79:             'X-RateLimit-Reset': result.resetTime.toString()
80:           }
81:         })
82:       }
83: 
84:       return null // Continue to next middleware
85:     }
86:   }
87: 
88:   private getIdentifier(request: NextRequest): string {
89:     // Use IP address or user ID
90:     const forwarded = request.headers.get('x-forwarded-for')
91:     const ip = forwarded ? forwarded.split(',')[0] : request.ip || 'unknown'
92:     return ip
93:   }
94: }
</file>

<file path="src/lib/real-canadian-scraper.ts">
 1: export async function scrapeRealCanadianJobs(keywords: string, location: string) {
 2:   const results: any[] = []
 3:   
 4:   // Job Bank Canada scraping
 5:   const jobBankResponse = await fetch(`https://www.jobbank.gc.ca/jobsearch/jobsearch?searchstring=${encodeURIComponent(keywords)}&locationstring=${encodeURIComponent(location)}`)
 6:   // Parse and extract real job data
 7:   const jobBankData = await jobBankResponse.json()
 8:   results.push(...jobBankData.jobs || [])
 9:   
10:   // Indeed.ca scraping
11:   const indeedResponse = await fetch(`https://ca.indeed.com/jobs?q=${encodeURIComponent(keywords)}&l=${encodeURIComponent(location)}`)
12:   const indeedData = await indeedResponse.json()
13:   results.push(...indeedData.results || [])
14:   
15:   return results.slice(0, 30)
16: }
</file>

<file path="src/lib/redis-cache.ts">
  1: // Enterprise Redis Cache Service
  2: // Provides distributed caching with TTL, key patterns, and fallback
  3: 
  4: import Redis from 'ioredis'
  5: import { Logger } from './logger'
  6: 
  7: const logger = Logger.getInstance('REDIS')
  8: 
  9: export class RedisCache {
 10:   private static instance: RedisCache
 11:   private client: Redis | null = null
 12:   private isConnected: boolean = false
 13:   private readonly defaultTTL = 3600 // 1 hour in seconds
 14: 
 15:   private constructor() {
 16:     this.initialize()
 17:   }
 18: 
 19:   static getInstance(): RedisCache {
 20:     if (!RedisCache.instance) {
 21:       RedisCache.instance = new RedisCache()
 22:     }
 23:     return RedisCache.instance
 24:   }
 25: 
 26:   private initialize(): void {
 27:     try {
 28:       const redisUrl = process.env.REDIS_URL
 29: 
 30:       if (!redisUrl) {
 31:         logger.warn('REDIS_URL not configured, caching will be disabled')
 32:         return
 33:       }
 34: 
 35:       this.client = new Redis(redisUrl, {
 36:         maxRetriesPerRequest: 3,
 37:         enableReadyCheck: true,
 38:         lazyConnect: false,
 39:         retryStrategy(times) {
 40:           const delay = Math.min(times * 50, 2000)
 41:           return delay
 42:         },
 43:         reconnectOnError(err) {
 44:           const targetError = 'READONLY'
 45:           if (err.message.includes(targetError)) {
 46:             return true
 47:           }
 48:           return false
 49:         }
 50:       })
 51: 
 52:       this.client.on('connect', () => {
 53:         logger.info('Redis connected successfully')
 54:         this.isConnected = true
 55:       })
 56: 
 57:       this.client.on('error', (error) => {
 58:         logger.error('Redis connection error', { error: error.message })
 59:         this.isConnected = false
 60:       })
 61: 
 62:       this.client.on('close', () => {
 63:         logger.warn('Redis connection closed')
 64:         this.isConnected = false
 65:       })
 66: 
 67:       this.client.on('reconnecting', () => {
 68:         logger.info('Redis reconnecting...')
 69:       })
 70: 
 71:     } catch (error) {
 72:       logger.error('Failed to initialize Redis', {
 73:         error: error instanceof Error ? error.message : 'Unknown error'
 74:       })
 75:     }
 76:   }
 77: 
 78:   // Get value from cache
 79:   async get<T>(key: string): Promise<T | null> {
 80:     if (!this.client || !this.isConnected) {
 81:       return null
 82:     }
 83: 
 84:     try {
 85:       const value = await this.client.get(key)
 86:       
 87:       if (!value) {
 88:         return null
 89:       }
 90: 
 91:       return JSON.parse(value) as T
 92:     } catch (error) {
 93:       logger.error('Redis GET error', {
 94:         key,
 95:         error: error instanceof Error ? error.message : 'Unknown error'
 96:       })
 97:       return null
 98:     }
 99:   }
100: 
101:   // Set value in cache with optional TTL
102:   async set(key: string, value: any, ttl?: number): Promise<boolean> {
103:     if (!this.client || !this.isConnected) {
104:       return false
105:     }
106: 
107:     try {
108:       const serialized = JSON.stringify(value)
109:       const expiry = ttl || this.defaultTTL
110: 
111:       await this.client.setex(key, expiry, serialized)
112:       return true
113:     } catch (error) {
114:       logger.error('Redis SET error', {
115:         key,
116:         error: error instanceof Error ? error.message : 'Unknown error'
117:       })
118:       return false
119:     }
120:   }
121: 
122:   // Delete specific key
123:   async delete(key: string): Promise<boolean> {
124:     if (!this.client || !this.isConnected) {
125:       return false
126:     }
127: 
128:     try {
129:       await this.client.del(key)
130:       return true
131:     } catch (error) {
132:       logger.error('Redis DELETE error', {
133:         key,
134:         error: error instanceof Error ? error.message : 'Unknown error'
135:       })
136:       return false
137:     }
138:   }
139: 
140:   // Delete keys by pattern
141:   async deletePattern(pattern: string): Promise<number> {
142:     if (!this.client || !this.isConnected) {
143:       return 0
144:     }
145: 
146:     try {
147:       const keys = await this.client.keys(pattern)
148:       
149:       if (keys.length === 0) {
150:         return 0
151:       }
152: 
153:       await this.client.del(...keys)
154:       return keys.length
155:     } catch (error) {
156:       logger.error('Redis DELETE PATTERN error', {
157:         pattern,
158:         error: error instanceof Error ? error.message : 'Unknown error'
159:       })
160:       return 0
161:     }
162:   }
163: 
164:   // Check if key exists
165:   async exists(key: string): Promise<boolean> {
166:     if (!this.client || !this.isConnected) {
167:       return false
168:     }
169: 
170:     try {
171:       const result = await this.client.exists(key)
172:       return result === 1
173:     } catch (error) {
174:       logger.error('Redis EXISTS error', {
175:         key,
176:         error: error instanceof Error ? error.message : 'Unknown error'
177:       })
178:       return false
179:     }
180:   }
181: 
182:   // Get remaining TTL for a key
183:   async ttl(key: string): Promise<number> {
184:     if (!this.client || !this.isConnected) {
185:       return -1
186:     }
187: 
188:     try {
189:       return await this.client.ttl(key)
190:     } catch (error) {
191:       logger.error('Redis TTL error', {
192:         key,
193:         error: error instanceof Error ? error.message : 'Unknown error'
194:       })
195:       return -1
196:     }
197:   }
198: 
199:   // Increment a counter
200:   async increment(key: string, amount: number = 1): Promise<number> {
201:     if (!this.client || !this.isConnected) {
202:       return 0
203:     }
204: 
205:     try {
206:       return await this.client.incrby(key, amount)
207:     } catch (error) {
208:       logger.error('Redis INCREMENT error', {
209:         key,
210:         error: error instanceof Error ? error.message : 'Unknown error'
211:       })
212:       return 0
213:     }
214:   }
215: 
216:   // Get multiple keys at once
217:   async mget<T>(keys: string[]): Promise<(T | null)[]> {
218:     if (!this.client || !this.isConnected || keys.length === 0) {
219:       return keys.map(() => null)
220:     }
221: 
222:     try {
223:       const values = await this.client.mget(...keys)
224:       return values.map(v => v ? JSON.parse(v) as T : null)
225:     } catch (error) {
226:       logger.error('Redis MGET error', {
227:         keysCount: keys.length,
228:         error: error instanceof Error ? error.message : 'Unknown error'
229:       })
230:       return keys.map(() => null)
231:     }
232:   }
233: 
234:   // Set multiple keys at once
235:   async mset(entries: Record<string, any>, ttl?: number): Promise<boolean> {
236:     if (!this.client || !this.isConnected) {
237:       return false
238:     }
239: 
240:     try {
241:       const pipeline = this.client.pipeline()
242:       const expiry = ttl || this.defaultTTL
243: 
244:       for (const [key, value] of Object.entries(entries)) {
245:         const serialized = JSON.stringify(value)
246:         pipeline.setex(key, expiry, serialized)
247:       }
248: 
249:       await pipeline.exec()
250:       return true
251:     } catch (error) {
252:       logger.error('Redis MSET error', {
253:         keysCount: Object.keys(entries).length,
254:         error: error instanceof Error ? error.message : 'Unknown error'
255:       })
256:       return false
257:     }
258:   }
259: 
260:   // Clear all cache (use with caution!)
261:   async flush(): Promise<boolean> {
262:     if (!this.client || !this.isConnected) {
263:       return false
264:     }
265: 
266:     try {
267:       await this.client.flushdb()
268:       logger.warn('Redis cache flushed')
269:       return true
270:     } catch (error) {
271:       logger.error('Redis FLUSH error', {
272:         error: error instanceof Error ? error.message : 'Unknown error'
273:       })
274:       return false
275:     }
276:   }
277: 
278:   // Get cache statistics
279:   async getStats(): Promise<{
280:     connected: boolean
281:     keys: number
282:     memory: string
283:     hitRate?: number
284:   }> {
285:     if (!this.client || !this.isConnected) {
286:       return {
287:         connected: false,
288:         keys: 0,
289:         memory: '0B'
290:       }
291:     }
292: 
293:     try {
294:       const info = await this.client.info('stats')
295:       const dbsize = await this.client.dbsize()
296:       const memory = await this.client.info('memory')
297: 
298:       // Parse memory usage
299:       const memoryMatch = memory.match(/used_memory_human:([^\r\n]+)/)
300:       const memoryUsed = memoryMatch ? memoryMatch[1] : 'Unknown'
301: 
302:       // Parse hit rate
303:       const hitsMatch = info.match(/keyspace_hits:(\d+)/)
304:       const missesMatch = info.match(/keyspace_misses:(\d+)/)
305:       
306:       let hitRate: number | undefined
307:       if (hitsMatch && missesMatch) {
308:         const hits = parseInt(hitsMatch[1])
309:         const misses = parseInt(missesMatch[1])
310:         const total = hits + misses
311:         hitRate = total > 0 ? (hits / total) * 100 : 0
312:       }
313: 
314:       return {
315:         connected: true,
316:         keys: dbsize,
317:         memory: memoryUsed,
318:         hitRate
319:       }
320:     } catch (error) {
321:       logger.error('Redis STATS error', {
322:         error: error instanceof Error ? error.message : 'Unknown error'
323:       })
324:       return {
325:         connected: this.isConnected,
326:         keys: 0,
327:         memory: 'Unknown'
328:       }
329:     }
330:   }
331: 
332:   // Graceful shutdown
333:   async disconnect(): Promise<void> {
334:     if (this.client) {
335:       try {
336:         await this.client.quit()
337:         logger.info('Redis disconnected gracefully')
338:       } catch (error) {
339:         logger.error('Redis disconnect error', {
340:           error: error instanceof Error ? error.message : 'Unknown error'
341:         })
342:       }
343:     }
344:   }
345: 
346:   // Check if Redis is available
347:   isAvailable(): boolean {
348:     return this.isConnected && this.client !== null
349:   }
350: }
351: 
352: // Cache key builders for consistency
353: export const CacheKeys = {
354:   resume: (userId: string, resumeId: string) => `resume:${userId}:${resumeId}`,
355:   resumeList: (userId: string) => `resume:list:${userId}`,
356:   jobApplication: (userId: string, appId: string) => `app:${userId}:${appId}`,
357:   jobApplicationList: (userId: string) => `app:list:${userId}`,
358:   companyResearch: (companyName: string) => `company:${companyName.toLowerCase().replace(/\s+/g, '-')}`,
359:   aiResponse: (hash: string) => `ai:${hash}`,
360:   userProfile: (userId: string) => `profile:${userId}`,
361:   jobSearch: (query: string) => `jobs:${query}`,
362:   
363:   // Pattern matchers for bulk operations
364:   patterns: {
365:     userResumes: (userId: string) => `resume:${userId}:*`,
366:     userApps: (userId: string) => `app:${userId}:*`,
367:     allCompanies: () => `company:*`,
368:     allAI: () => `ai:*`
369:   }
370: }
</file>

<file path="src/lib/redis.ts">
 1: let client: any = null
 2: 
 3: export async function getRedis() {
 4:   if (client) return client
 5:   const url = process.env.REDIS_URL
 6:   if (!url) return null
 7:   try {
 8:     const { createClient } = require('redis')
 9:     client = createClient({ url })
10:     client.on('error', () => {})
11:     await client.connect()
12:     return client
13:   } catch {
14:     return null
15:   }
16: }
17: 
18: export async function redisGetJSON<T = any>(key: string): Promise<T | undefined> {
19:   const r = await getRedis()
20:   if (!r) return undefined
21:   try {
22:     const raw = await r.get(key)
23:     return raw ? JSON.parse(raw) as T : undefined
24:   } catch {
25:     return undefined
26:   }
27: }
28: 
29: export async function redisSetJSON(key: string, value: any, ttlSec: number) {
30:   const r = await getRedis()
31:   if (!r) return
32:   try { await r.setEx(key, ttlSec, JSON.stringify(value)) } catch {}
33: }
</file>

<file path="src/lib/referral-finder.ts">
  1: /**
  2:  * Referral Finder Service
  3:  * 
  4:  * Finds potential referrals at target companies through LinkedIn connections
  5:  */
  6: 
  7: import { PerplexityService } from './perplexity-service'
  8: 
  9: export interface ReferralContact {
 10:   name: string
 11:   title: string
 12:   company: string
 13:   linkedinUrl: string
 14:   relationship: 'direct' | 'second-degree' | 'alumni' | 'mutual-group'
 15:   connectionStrength: number // 0-100
 16:   canRefer: boolean
 17:   referralLikelihood: 'high' | 'medium' | 'low'
 18:   sharedConnections: string[]
 19:   sharedExperience: string[]
 20:   reachOutStrategy: string
 21:   messageTemplate: string
 22: }
 23: 
 24: export interface ReferralSearchResult {
 25:   targetCompany: string
 26:   potentialReferrals: ReferralContact[]
 27:   totalFound: number
 28:   confidence: number
 29: }
 30: 
 31: export class ReferralFinderService {
 32:   /**
 33:    * Find potential referrals at a target company
 34:    */
 35:   static async findReferrals(
 36:     targetCompany: string,
 37:     userLinkedInUrl?: string,
 38:     userSchool?: string,
 39:     userPreviousCompanies?: string[]
 40:   ): Promise<ReferralSearchResult> {
 41:     try {
 42:       const client = new PerplexityService()
 43:       
 44:       const prompt = `Find potential referrals at ${targetCompany} for a job seeker.
 45: 
 46: User Background:
 47: ${userLinkedInUrl ? `LinkedIn: ${userLinkedInUrl}` : ''}
 48: ${userSchool ? `School: ${userSchool}` : ''}
 49: ${userPreviousCompanies ? `Previous Companies: ${userPreviousCompanies.join(', ')}` : ''}
 50: 
 51: Search Strategy:
 52: 1. **LinkedIn Connections**: Search "site:linkedin.com/in/ ${targetCompany}" for employees
 53: 2. **Alumni Network**: Find ${userSchool} alumni working at ${targetCompany}
 54: 3. **Previous Colleagues**: Find people from ${userPreviousCompanies?.join(' OR ')} now at ${targetCompany}
 55: 4. **Mutual Groups**: Find people in professional groups related to the industry
 56: 5. **Second-Degree**: Find connections of connections
 57: 
 58: For each potential referral, determine:
 59: - Their role and seniority
 60: - How connected they are to the user
 61: - Likelihood they can/will provide a referral
 62: - Best approach to reach out
 63: 
 64: Return ONLY valid JSON:
 65: {
 66:   "targetCompany": "${targetCompany}",
 67:   "potentialReferrals": [
 68:     {
 69:       "name": "John Smith",
 70:       "title": "Senior Software Engineer",
 71:       "company": "${targetCompany}",
 72:       "linkedinUrl": "https://linkedin.com/in/john-smith",
 73:       "relationship": "alumni",
 74:       "connectionStrength": 75,
 75:       "canRefer": true,
 76:       "referralLikelihood": "high",
 77:       "sharedConnections": ["Jane Doe", "Bob Wilson"],
 78:       "sharedExperience": ["Stanford University", "Google"],
 79:       "reachOutStrategy": "Mention shared alma mater and ask about team culture before requesting referral",
 80:       "messageTemplate": "Hi John, I noticed we're both Stanford alumni! I'm exploring opportunities at ${targetCompany} and would love to learn more about your experience there..."
 81:     }
 82:   ],
 83:   "totalFound": 5,
 84:   "confidence": 0.85
 85: }
 86: 
 87: REQUIREMENTS:
 88: - Find REAL people with LinkedIn profiles
 89: - Prioritize by connection strength and referral likelihood
 90: - Include specific reach-out strategies
 91: - Provide personalized message templates
 92: - Focus on people who can actually refer (employees, not contractors)`
 93: 
 94:       const response = await client.makeRequest(
 95:         'You are a professional networking strategist. Find real referral opportunities and provide actionable outreach strategies.',
 96:         prompt,
 97:         {
 98:           temperature: 0.3,
 99:           maxTokens: 3000,
100:           model: 'sonar-pro'
101:         }
102:       )
103: 
104:       // Parse response
105:       let cleanedContent = response.content.trim()
106:       cleanedContent = cleanedContent.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '')
107:       
108:       const jsonMatch = cleanedContent.match(/\{[\s\S]*\}/)
109:       if (jsonMatch) {
110:         cleanedContent = jsonMatch[0]
111:       }
112: 
113:       const parsed = JSON.parse(cleanedContent) as ReferralSearchResult
114: 
115:       return parsed
116:     } catch (error) {
117:       console.error('[REFERRAL_FINDER] Failed to find referrals:', error)
118:       
119:       // Return fallback
120:       return {
121:         targetCompany,
122:         potentialReferrals: [],
123:         totalFound: 0,
124:         confidence: 0
125:       }
126:     }
127:   }
128: 
129:   /**
130:    * Generate referral request message
131:    */
132:   static generateReferralMessage(
133:     referral: ReferralContact,
134:     jobTitle: string,
135:     personalNote?: string
136:   ): string {
137:     const templates = {
138:       alumni: `Hi ${referral.name},
139: 
140: I hope this message finds you well! I noticed we're both alumni of [School Name], and I wanted to reach out.
141: 
142: I'm currently exploring opportunities at ${referral.company}, specifically for the ${jobTitle} role. I've been following ${referral.company}'s work on [specific project/initiative] and I'm really excited about the potential to contribute.
143: 
144: ${personalNote || 'I\'d love to learn more about your experience at the company and the team culture.'}
145: 
146: Would you be open to a brief chat about your experience? And if you think I might be a good fit, I'd greatly appreciate any guidance on the application process.
147: 
148: Thank you for considering!
149: 
150: Best regards`,
151: 
152:       'second-degree': `Hi ${referral.name},
153: 
154: I hope you don't mind me reaching out! We have [X mutual connections] in common, including [Name], who speaks highly of you.
155: 
156: I'm exploring the ${jobTitle} position at ${referral.company} and was impressed by [specific aspect of company]. Given your role as ${referral.title}, I thought you might have valuable insights about the team and culture.
157: 
158: ${personalNote || 'I\'d love to learn more about your experience and the role.'}
159: 
160: Would you be open to a brief conversation? I'd really appreciate any advice you could share.
161: 
162: Thank you!`,
163: 
164:       direct: `Hi ${referral.name},
165: 
166: I hope you're doing well! I wanted to reach out because I'm very interested in the ${jobTitle} role at ${referral.company}.
167: 
168: ${personalNote || 'I\'ve been following the company\'s work and I\'m excited about the opportunity to contribute.'}
169: 
170: Given your experience as ${referral.title}, I\'d love to learn more about the team and what it\'s like working there. If you think I might be a good fit, I\'d be grateful for any guidance on the application process.
171: 
172: Would you be open to a brief chat?
173: 
174: Thanks so much!`
175:     }
176: 
177:     return templates[referral.relationship] || templates.direct
178:   }
179: 
180:   /**
181:    * Score referral likelihood
182:    */
183:   static scoreReferralLikelihood(
184:     connectionStrength: number,
185:     sharedExperience: string[],
186:     canRefer: boolean
187:   ): 'high' | 'medium' | 'low' {
188:     if (!canRefer) return 'low'
189:     
190:     let score = connectionStrength
191:     score += sharedExperience.length * 10
192:     
193:     if (score >= 80) return 'high'
194:     if (score >= 50) return 'medium'
195:     return 'low'
196:   }
197: }
</file>

<file path="src/lib/resume-manager.ts">
  1: /**
  2:  * RESUME MANAGER - Centralized Resume Storage
  3:  * 
  4:  * PROBLEM: Resume data stored in multiple localStorage keys causing data loss:
  5:  * - 'uploadedResume' (legacy)
  6:  * - 'cf:resume' (career finder)
  7:  * - Database fetch (fallback)
  8:  * 
  9:  * SOLUTION: Single source of truth with automatic fallback chain
 10:  */
 11: 
 12: export interface StoredResume {
 13:   _id?: string;
 14:   userId?: string;
 15:   originalFileName: string;
 16:   filename: string;
 17:   extractedText: string;
 18:   extractionMethod?: string;
 19:   uploadedAt?: Date | string;
 20: }
 21: 
 22: export class ResumeManager {
 23:   private static readonly KEYS = {
 24:     current: 'cf:resume',                    // Primary key - Career Finder
 25:     legacy: 'uploadedResume',                // Legacy compatibility
 26:     selected: 'cf:selectedResumeHtml',       // Optimized HTML version
 27:     autopilot: 'cf:autopilotReady',          // Autopilot status
 28:     location: 'cf:location',                 // Extracted location
 29:     keywords: 'cf:keywords'                  // Extracted keywords
 30:   } as const;
 31: 
 32:   /**
 33:    * Store resume in all required locations for cross-component access
 34:    */
 35:   static store(resumeData: StoredResume): void {
 36:     try {
 37:       const serialized = JSON.stringify(resumeData);
 38:       
 39:       // Primary storage (Career Finder standard)
 40:       localStorage.setItem(this.KEYS.current, serialized);
 41:       
 42:       // Legacy compatibility (for existing components)
 43:       localStorage.setItem(this.KEYS.legacy, serialized);
 44:       
 45:       // Mark autopilot as ready if resume has meaningful content
 46:       if (resumeData.extractedText?.length > 100) {
 47:         localStorage.setItem(this.KEYS.autopilot, '1');
 48:       }
 49:       
 50:       console.log('[RESUME_MANAGER] ✅ Stored resume in all locations:', {
 51:         filename: resumeData.originalFileName,
 52:         textLength: resumeData.extractedText?.length,
 53:         method: resumeData.extractionMethod
 54:       });
 55:     } catch (error) {
 56:       console.error('[RESUME_MANAGER] ❌ Storage failed:', error);
 57:       throw error;
 58:     }
 59:   }
 60: 
 61:   /**
 62:    * Load resume from any available location with automatic fallback
 63:    */
 64:   static load(): StoredResume | null {
 65:     try {
 66:       // Priority 1: Primary key (cf:resume)
 67:       let stored = localStorage.getItem(this.KEYS.current);
 68:       if (stored) {
 69:         console.log('[RESUME_MANAGER] Found resume in primary key (cf:resume)');
 70:         return JSON.parse(stored);
 71:       }
 72:       
 73:       // Priority 2: Legacy key (uploadedResume)
 74:       stored = localStorage.getItem(this.KEYS.legacy);
 75:       if (stored) {
 76:         console.log('[RESUME_MANAGER] Found resume in legacy key (uploadedResume), upgrading...');
 77:         const parsed = JSON.parse(stored);
 78:         // Upgrade to new key
 79:         this.store(parsed);
 80:         return parsed;
 81:       }
 82:       
 83:       console.warn('[RESUME_MANAGER] No resume found in localStorage');
 84:       return null;
 85:     } catch (error) {
 86:       console.error('[RESUME_MANAGER] Load failed:', error);
 87:       return null;
 88:     }
 89:   }
 90: 
 91:   /**
 92:    * Get just the extracted text (most common use case)
 93:    */
 94:   static getText(): string {
 95:     const resume = this.load();
 96:     return resume?.extractedText || '';
 97:   }
 98: 
 99:   /**
100:    * Check if resume is available and has meaningful content
101:    */
102:   static isAvailable(): boolean {
103:     return this.getText().length > 100;
104:   }
105: 
106:   /**
107:    * Get resume metadata without full text
108:    */
109:   static getMetadata(): Pick<StoredResume, 'originalFileName' | 'uploadedAt' | 'extractionMethod'> | null {
110:     const resume = this.load();
111:     if (!resume) return null;
112:     
113:     return {
114:       originalFileName: resume.originalFileName,
115:       uploadedAt: resume.uploadedAt,
116:       extractionMethod: resume.extractionMethod
117:     };
118:   }
119: 
120:   /**
121:    * Store extracted signals (location and keywords)
122:    */
123:   static storeSignals(location: string | null, keywords: string[]): void {
124:     try {
125:       if (location) {
126:         localStorage.setItem(this.KEYS.location, location);
127:       }
128:       if (keywords.length > 0) {
129:         localStorage.setItem(this.KEYS.keywords, keywords.slice(0, 5).join(', '));
130:       }
131:       console.log('[RESUME_MANAGER] Stored signals:', { location, keywordCount: keywords.length });
132:     } catch (error) {
133:       console.error('[RESUME_MANAGER] Failed to store signals:', error);
134:     }
135:   }
136: 
137:   /**
138:    * Get stored location
139:    */
140:   static getLocation(): string | null {
141:     try {
142:       return localStorage.getItem(this.KEYS.location);
143:     } catch {
144:       return null;
145:     }
146:   }
147: 
148:   /**
149:    * Get stored keywords
150:    */
151:   static getKeywords(): string {
152:     try {
153:       return localStorage.getItem(this.KEYS.keywords) || '';
154:     } catch {
155:       return '';
156:     }
157:   }
158: 
159:   /**
160:    * Clear all resume data (logout, reset, etc.)
161:    */
162:   static clear(): void {
163:     Object.values(this.KEYS).forEach(key => {
164:       try {
165:         localStorage.removeItem(key);
166:       } catch (e) {
167:         console.warn(`[RESUME_MANAGER] Failed to remove ${key}:`, e);
168:       }
169:     });
170:     console.log('[RESUME_MANAGER] Cleared all resume data');
171:   }
172: 
173:   /**
174:    * Get autopilot status
175:    */
176:   static isAutopilotReady(): boolean {
177:     try {
178:       return localStorage.getItem(this.KEYS.autopilot) === '1';
179:     } catch {
180:       return false;
181:     }
182:   }
183: 
184:   /**
185:    * Fetch resume from database as fallback
186:    */
187:   static async fetchFromDatabase(): Promise<StoredResume | null> {
188:     try {
189:       console.log('[RESUME_MANAGER] Fetching resume from database...');
190:       const response = await fetch('/api/resume/list');
191:       
192:       if (!response.ok) {
193:         console.warn('[RESUME_MANAGER] Database fetch failed:', response.status);
194:         return null;
195:       }
196:       
197:       const data = await response.json();
198:       const resume = data?.resumes?.[0];
199:       
200:       if (resume && resume.extractedText) {
201:         console.log('[RESUME_MANAGER] Found resume in database, caching locally');
202:         // Store in localStorage for future access
203:         this.store(resume);
204:         return resume;
205:       }
206:       
207:       console.warn('[RESUME_MANAGER] No resume found in database');
208:       return null;
209:     } catch (error) {
210:       console.error('[RESUME_MANAGER] Database fetch error:', error);
211:       return null;
212:     }
213:   }
214: 
215:   /**
216:    * Load with automatic database fallback
217:    */
218:   static async loadWithFallback(): Promise<StoredResume | null> {
219:     // Try localStorage first
220:     const localResume = this.load();
221:     if (localResume) return localResume;
222:     
223:     // Fallback to database
224:     return await this.fetchFromDatabase();
225:   }
226: 
227:   /**
228:    * Debug helper: Show all stored resume keys
229:    */
230:   static debug(): void {
231:     console.group('[RESUME_MANAGER] Debug Info');
232:     Object.entries(this.KEYS).forEach(([name, key]) => {
233:       try {
234:         const value = localStorage.getItem(key);
235:         if (value) {
236:           const preview = value.length > 100 ? `${value.slice(0, 100)}...` : value;
237:           console.log(`${name} (${key}):`, preview);
238:         } else {
239:           console.log(`${name} (${key}):`, '❌ Not found');
240:         }
241:       } catch (e) {
242:         console.log(`${name} (${key}):`, '❌ Error:', e);
243:       }
244:     });
245:     console.groupEnd();
246:   }
247: }
</file>

<file path="src/lib/resume-parser.ts">
  1: /**
  2:  * Parse plain text resume into structured data for resume-templates-v2
  3:  */
  4: 
  5: import type { ResumeData } from './resume-templates-v2'
  6: 
  7: export function parseResumeText(text: string, personalInfo?: {
  8:   name?: string
  9:   email?: string
 10:   phone?: string
 11:   location?: string
 12: }): ResumeData {
 13:   const lines = text.split('\n').map(l => l.trim()).filter(Boolean)
 14:   
 15:   // Extract personal info from text if not provided
 16:   const extractedInfo = personalInfo || extractPersonalInfoFromText(text)
 17:   
 18:   // Parse experience section
 19:   const experience = parseExperienceSection(lines)
 20:   
 21:   // Parse education section
 22:   const education = parseEducationSection(lines)
 23:   
 24:   // Parse skills section
 25:   const skills = parseSkillsSection(lines)
 26:   
 27:   // Extract summary (usually first paragraph after contact info)
 28:   const summary = extractSummary(lines)
 29:   
 30:   return {
 31:     personalInfo: {
 32:       fullName: extractedInfo.name || 'Professional',
 33:       email: extractedInfo.email || '',
 34:       phone: extractedInfo.phone || '',
 35:       location: extractedInfo.location || '',
 36:       summary: summary
 37:     },
 38:     experience,
 39:     education,
 40:     skills
 41:   }
 42: }
 43: 
 44: function extractPersonalInfoFromText(text: string): {
 45:   name?: string
 46:   email?: string
 47:   phone?: string
 48:   location?: string
 49: } {
 50:   const emailMatch = text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i)
 51:   const phoneMatch = text.match(/(\+?1?\s*\(?[0-9]{3}\)?[\s.-]?[0-9]{3}[\s.-]?[0-9]{4})/i)
 52:   
 53:   // Name is usually first line or before email
 54:   const lines = text.split('\n').map(l => l.trim()).filter(Boolean)
 55:   let name = lines[0] || ''
 56:   
 57:   // Clean up name (remove if it contains email or phone)
 58:   if (name.includes('@') || name.match(/\d{3}[\s.-]?\d{3}[\s.-]?\d{4}/)) {
 59:     name = ''
 60:   }
 61:   
 62:   // Location patterns
 63:   const locationMatch = text.match(/([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*,\s*[A-Z]{2}(?:\s+[A-Z0-9]{5})?)/i) ||
 64:                        text.match(/([A-Z][a-z]+,\s*[A-Z]{2,})/i)
 65:   
 66:   return {
 67:     name: name.replace(/[^\w\s.-]/g, '').trim(),
 68:     email: emailMatch ? emailMatch[1] : undefined,
 69:     phone: phoneMatch ? phoneMatch[1] : undefined,
 70:     location: locationMatch ? locationMatch[1] : undefined
 71:   }
 72: }
 73: 
 74: function extractSummary(lines: string[]): string {
 75:   // Look for summary section
 76:   const summaryIndex = lines.findIndex(l => 
 77:     /^(professional\s+)?summary|^objective|^profile/i.test(l)
 78:   )
 79:   
 80:   if (summaryIndex !== -1 && summaryIndex < lines.length - 1) {
 81:     // Get next few lines after summary header
 82:     const summaryLines: string[] = []
 83:     for (let i = summaryIndex + 1; i < lines.length && i < summaryIndex + 5; i++) {
 84:       const line = lines[i]
 85:       // Stop if we hit another section header
 86:       if (/^[A-Z\s]{3,}$/.test(line) && line.length < 50) break
 87:       if (line && !line.includes('|') && !line.startsWith('•') && !line.startsWith('-')) {
 88:         summaryLines.push(line)
 89:       }
 90:     }
 91:     if (summaryLines.length > 0) {
 92:       return summaryLines.join(' ').slice(0, 500)
 93:     }
 94:   }
 95:   
 96:   // Fallback: use first paragraph that's not contact info
 97:   for (let i = 1; i < Math.min(10, lines.length); i++) {
 98:     const line = lines[i]
 99:     if (line.length > 50 && !line.includes('@') && !line.match(/\d{3}[\s.-]?\d{3}/)) {
100:       return line.slice(0, 500)
101:     }
102:   }
103:   
104:   return 'Experienced professional with a proven track record of success.'
105: }
106: 
107: type ExperienceItem = {
108:   id: string
109:   company: string
110:   position: string
111:   location: string
112:   startDate: string
113:   endDate: string
114:   current: boolean
115:   description: string
116:   achievements: string[]
117:   technologies?: string[]
118: }
119: 
120: function parseExperienceSection(lines: string[]): ExperienceItem[] {
121:   const experience: ExperienceItem[] = []
122:   
123:   // Find experience section
124:   const expIndex = lines.findIndex(l => 
125:     /^(professional\s+)?experience|^work\s+history|^employment/i.test(l)
126:   )
127:   
128:   if (expIndex === -1) return []
129:   
130:   let currentJob: Partial<ExperienceItem> | null = null
131:   let achievements: string[] = []
132:   
133:   for (let i = expIndex + 1; i < lines.length; i++) {
134:     const line = lines[i]
135:     
136:     // Stop at next major section
137:     if (/^(education|skills|certifications|projects)/i.test(line)) break
138:     
139:     // Job title line (usually followed by company/dates)
140:     if (i < lines.length - 1 && lines[i + 1].includes('|')) {
141:       // Save previous job
142:       if (currentJob && currentJob.id) {
143:         currentJob.achievements = achievements
144:         experience.push(currentJob as ExperienceItem)
145:         achievements = []
146:       }
147:       
148:       // Parse new job
149:       const metaLine = lines[i + 1]
150:       const parts = metaLine.split('|').map(p => p.trim())
151:       
152:       const dateMatch = metaLine.match(/(\d{4}|[A-Z][a-z]{2}\s+\d{4})\s*[-–]\s*(Present|\d{4}|[A-Z][a-z]{2}\s+\d{4})/i)
153:       
154:       currentJob = {
155:         id: `exp-${experience.length}`,
156:         position: line,
157:         company: parts[0] || 'Company',
158:         location: parts[1] || '',
159:         startDate: dateMatch ? dateMatch[1] : '2020',
160:         endDate: dateMatch ? dateMatch[2] : 'Present',
161:         current: dateMatch ? /present/i.test(dateMatch[2]) : false,
162:         description: '',
163:         achievements: []
164:       }
165:       
166:       i++ // Skip meta line
167:     }
168:     // Bullet points (achievements)
169:     else if ((line.startsWith('•') || line.startsWith('-') || line.startsWith('*')) && currentJob) {
170:       achievements.push(line.replace(/^[•\-*]\s*/, ''))
171:     }
172:   }
173:   
174:   // Save last job
175:   if (currentJob && currentJob.id) {
176:     currentJob.achievements = achievements
177:     experience.push(currentJob as ExperienceItem)
178:   }
179:   
180:   return experience
181: }
182: 
183: type EducationItem = {
184:   id: string
185:   institution: string
186:   degree: string
187:   field: string
188:   location: string
189:   graduationDate: string
190:   gpa?: string
191:   honors?: string[]
192: }
193: 
194: function parseEducationSection(lines: string[]): EducationItem[] {
195:   const education: EducationItem[] = []
196:   
197:   const eduIndex = lines.findIndex(l => /^education/i.test(l))
198:   if (eduIndex === -1) return []
199:   
200:   for (let i = eduIndex + 1; i < lines.length && i < eduIndex + 10; i++) {
201:     const line = lines[i]
202:     
203:     // Stop at next section
204:     if (/^(skills|certifications|experience)/i.test(line)) break
205:     
206:     // Degree line
207:     if (line.match(/bachelor|master|phd|associate|diploma|certificate/i)) {
208:       const degreeMatch = line.match(/(bachelor|master|phd|associate|diploma|certificate)(?:'?s)?(?:\s+of)?(?:\s+(?:science|arts|engineering|business))?(?:\s+in\s+(.+?))?$/i)
209:       const nextLine = lines[i + 1] || ''
210:       const dateMatch = nextLine.match(/\d{4}/)
211:       
212:       education.push({
213:         id: `edu-${education.length}`,
214:         degree: degreeMatch ? degreeMatch[0] : line,
215:         field: degreeMatch && degreeMatch[2] ? degreeMatch[2] : 'General Studies',
216:         institution: nextLine.split('|')[0]?.trim() || 'University',
217:         location: nextLine.split('|')[1]?.trim() || '',
218:         graduationDate: dateMatch ? dateMatch[0] : '2020'
219:       })
220:     }
221:   }
222:   
223:   return education
224: }
225: 
226: function parseSkillsSection(lines: string[]): {
227:   technical: string[]
228:   soft: string[]
229:   languages?: Array<{ language: string; proficiency: string }>
230:   certifications?: Array<{ name: string; issuer: string; date: string }>
231: } {
232:   const technical: string[] = []
233:   const soft: string[] = []
234:   
235:   const skillsIndex = lines.findIndex(l => /^skills|^technical\s+skills|^core\s+competencies/i.test(l))
236:   
237:   if (skillsIndex !== -1) {
238:     for (let i = skillsIndex + 1; i < lines.length && i < skillsIndex + 15; i++) {
239:       const line = lines[i]
240:       
241:       // Stop at next section
242:       if (/^(education|experience|certifications)/i.test(line)) break
243:       
244:       // Parse skills (comma or bullet separated)
245:       if (line.includes(',') || line.includes('•')) {
246:         const skills = line.split(/[,•]/).map(s => s.trim()).filter(Boolean)
247:         technical.push(...skills)
248:       } else if (line.length > 2 && line.length < 50) {
249:         technical.push(line)
250:       }
251:     }
252:   }
253:   
254:   // Default skills if none found
255:   if (technical.length === 0) {
256:     technical.push('Communication', 'Problem Solving', 'Team Collaboration', 'Project Management')
257:   }
258:   
259:   return {
260:     technical: technical.slice(0, 20),
261:     soft: soft.slice(0, 10)
262:   }
263: }
</file>

<file path="src/lib/resume/parser.ts">
  1: import { z } from 'zod'
  2: 
  3: // Define structured resume schema
  4: export const ResumeSchema = z.object({
  5:   personalInfo: z.object({
  6:     name: z.string(),
  7:     email: z.string().email(),
  8:     phone: z.string().optional(),
  9:     location: z.string().optional(),
 10:     linkedin: z.string().url().optional(),
 11:     website: z.string().url().optional(),
 12:     github: z.string().url().optional()
 13:   }),
 14:   summary: z.string().optional(),
 15:   experience: z.array(z.object({
 16:     title: z.string(),
 17:     company: z.string(),
 18:     location: z.string().optional(),
 19:     startDate: z.string(),
 20:     endDate: z.string().optional(),
 21:     current: z.boolean().default(false),
 22:     description: z.string().optional(),
 23:     achievements: z.array(z.string())
 24:   })),
 25:   education: z.array(z.object({
 26:     degree: z.string(),
 27:     institution: z.string(),
 28:     location: z.string().optional(),
 29:     graduationDate: z.string(),
 30:     gpa: z.string().optional(),
 31:     honors: z.array(z.string()).optional()
 32:   })),
 33:   skills: z.object({
 34:     technical: z.array(z.string()),
 35:     soft: z.array(z.string()),
 36:     languages: z.array(z.object({
 37:       name: z.string(),
 38:       proficiency: z.enum(['native', 'fluent', 'professional', 'intermediate', 'basic'])
 39:     })).optional(),
 40:     certifications: z.array(z.object({
 41:       name: z.string(),
 42:       issuer: z.string(),
 43:       date: z.string()
 44:     })).optional()
 45:   }),
 46:   projects: z.array(z.object({
 47:     name: z.string(),
 48:     description: z.string(),
 49:     technologies: z.array(z.string()),
 50:     url: z.string().url().optional(),
 51:     achievements: z.array(z.string())
 52:   })).optional(),
 53:   volunteer: z.array(z.object({
 54:     organization: z.string(),
 55:     role: z.string(),
 56:     startDate: z.string(),
 57:     endDate: z.string().optional(),
 58:     description: z.string()
 59:   })).optional()
 60: })
 61: 
 62: export type Resume = z.infer<typeof ResumeSchema>
 63: 
 64: /**
 65:  * Parse resume text into structured data using AI
 66:  */
 67: export async function parseResumeText(text: string): Promise<Resume> {
 68:   const prompt = `Parse this resume into structured JSON format.
 69: 
 70: RESUME TEXT:
 71: ${text}
 72: 
 73: Return ONLY valid JSON matching this exact schema:
 74: {
 75:   "personalInfo": {
 76:     "name": "John Doe",
 77:     "email": "john@example.com",
 78:     "phone": "+1-555-0123",
 79:     "location": "San Francisco, CA",
 80:     "linkedin": "https://linkedin.com/in/johndoe",
 81:     "website": "https://johndoe.com",
 82:     "github": "https://github.com/johndoe"
 83:   },
 84:   "summary": "Experienced software engineer with 10+ years...",
 85:   "experience": [
 86:     {
 87:       "title": "Senior Software Engineer",
 88:       "company": "Google",
 89:       "location": "Mountain View, CA",
 90:       "startDate": "2020-01",
 91:       "endDate": "2024-10",
 92:       "current": false,
 93:       "description": "Led team of 5 engineers...",
 94:       "achievements": [
 95:         "Reduced latency by 40% through optimization",
 96:         "Architected microservices handling 1M requests/day"
 97:       ]
 98:     }
 99:   ],
100:   "education": [
101:     {
102:       "degree": "Bachelor of Science in Computer Science",
103:       "institution": "Stanford University",
104:       "location": "Stanford, CA",
105:       "graduationDate": "2015-06",
106:       "gpa": "3.8",
107:       "honors": ["Dean's List", "Cum Laude"]
108:     }
109:   ],
110:   "skills": {
111:     "technical": ["JavaScript", "React", "Node.js", "Python", "AWS"],
112:     "soft": ["Leadership", "Communication", "Problem Solving"],
113:     "languages": [
114:       { "name": "English", "proficiency": "native" },
115:       { "name": "Spanish", "proficiency": "professional" }
116:     ],
117:     "certifications": [
118:       {
119:         "name": "AWS Solutions Architect",
120:         "issuer": "Amazon Web Services",
121:         "date": "2023-05"
122:       }
123:     ]
124:   },
125:   "projects": [
126:     {
127:       "name": "Open Source Library",
128:       "description": "React component library with 10k+ stars",
129:       "technologies": ["React", "TypeScript", "Storybook"],
130:       "url": "https://github.com/example/library",
131:       "achievements": [
132:         "1,000+ GitHub stars",
133:         "Used by 50+ companies"
134:       ]
135:     }
136:   ]
137: }
138: 
139: IMPORTANT:
140: - Extract ALL information from the resume
141: - Organize chronologically (most recent first)
142: - Use QUANTIFIED achievements (numbers, percentages, metrics)
143: - Keep technical terms exactly as written
144: - Include ALL skills mentioned
145: - Parse dates into YYYY-MM format
146: - If a field is not present, omit it (don't use null/empty strings)
147: 
148: Return ONLY the JSON, no explanations.`
149: 
150:   const response = await fetch('/api/resume/parse', {
151:     method: 'POST',
152:     headers: { 'Content-Type': 'application/json' },
153:     body: JSON.stringify({ prompt, text })
154:   })
155: 
156:   if (!response.ok) {
157:     throw new Error('Failed to parse resume')
158:   }
159: 
160:   const { content } = await response.json()
161:   
162:   // Extract JSON from response
163:   const jsonMatch = content.match(/\{[\s\S]*\}/)
164:   if (!jsonMatch) throw new Error('Failed to parse resume - no JSON found')
165:   
166:   const parsed = JSON.parse(jsonMatch[0])
167:   
168:   // Validate with Zod
169:   return ResumeSchema.parse(parsed)
170: }
171: 
172: /**
173:  * Calculate resume statistics
174:  */
175: export function calculateResumeStats(resume: Resume) {
176:   return {
177:     totalYearsExperience: calculateYearsOfExperience(resume.experience),
178:     totalAchievements: resume.experience.reduce((sum, exp) => sum + exp.achievements.length, 0),
179:     totalSkills: resume.skills.technical.length + resume.skills.soft.length,
180:     educationLevel: getHighestEducationLevel(resume.education),
181:     certificationCount: resume.skills.certifications?.length || 0,
182:     hasProjects: (resume.projects?.length || 0) > 0,
183:     hasVolunteer: (resume.volunteer?.length || 0) > 0
184:   }
185: }
186: 
187: function calculateYearsOfExperience(experience: Resume['experience']): number {
188:   let totalMonths = 0
189:   
190:   for (const exp of experience) {
191:     const start = new Date(exp.startDate)
192:     const end = exp.current ? new Date() : new Date(exp.endDate!)
193:     const months = (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth())
194:     totalMonths += months
195:   }
196:   
197:   return Math.round(totalMonths / 12 * 10) / 10 // Round to 1 decimal
198: }
199: 
200: function getHighestEducationLevel(education: Resume['education']): string {
201:   const levels = ['phd', 'doctorate', 'master', 'bachelor', 'associate']
202:   
203:   for (const level of levels) {
204:     if (education.some(edu => edu.degree.toLowerCase().includes(level))) {
205:       return level
206:     }
207:   }
208:   
209:   return 'other'
210: }
211: 
212: /**
213:  * Format date for display
214:  */
215: export function formatDate(date?: string): string {
216:   if (!date) return ''
217:   const [year, month] = date.split('-')
218:   const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
219:   return `${monthNames[parseInt(month) - 1]} ${year}`
220: }
221: 
222: /**
223:  * Format date range
224:  */
225: export function formatDateRange(exp: { startDate: string; endDate?: string; current?: boolean }): string {
226:   const start = formatDate(exp.startDate)
227:   const end = exp.current ? 'Present' : formatDate(exp.endDate)
228:   return `${start} - ${end}`
229: }
</file>

<file path="src/lib/retry-utility.ts">
  1: /**
  2:  * Retry Utility with Exponential Backoff
  3:  * For resilient API calls and operations
  4:  */
  5: 
  6: import { errorTracker } from './error-tracking'
  7: import { logger } from './logger'
  8: 
  9: export interface RetryOptions {
 10:   maxAttempts?: number
 11:   initialDelayMs?: number
 12:   maxDelayMs?: number
 13:   backoffMultiplier?: number
 14:   retryableErrors?: (error: any) => boolean
 15:   onRetry?: (attempt: number, error: any) => void
 16:   context?: string
 17: }
 18: 
 19: const DEFAULT_OPTIONS: Required<Omit<RetryOptions, 'retryableErrors' | 'onRetry' | 'context'>> = {
 20:   maxAttempts: 3,
 21:   initialDelayMs: 1000,
 22:   maxDelayMs: 10000,
 23:   backoffMultiplier: 2
 24: }
 25: 
 26: /**
 27:  * Execute an operation with retry logic and exponential backoff
 28:  */
 29: export async function withRetry<T>(
 30:   operation: () => Promise<T>,
 31:   options: RetryOptions = {}
 32: ): Promise<T> {
 33:   const config = { ...DEFAULT_OPTIONS, ...options }
 34:   let lastError: any
 35:   
 36:   for (let attempt = 1; attempt <= config.maxAttempts; attempt++) {
 37:     try {
 38:       const result = await operation()
 39:       
 40:       // Log success after retry
 41:       if (attempt > 1) {
 42:         logger.info(`Operation succeeded after ${attempt} attempts`, {
 43:           context: options.context || 'retry',
 44:           attempts: attempt
 45:         })
 46:       }
 47:       
 48:       return result
 49:     } catch (error) {
 50:       lastError = error
 51:       
 52:       // Check if error is retryable
 53:       if (options.retryableErrors && !options.retryableErrors(error)) {
 54:         throw error
 55:       }
 56:       
 57:       // If this was the last attempt, don't wait or retry
 58:       if (attempt === config.maxAttempts) {
 59:         break
 60:       }
 61:       
 62:       // Calculate delay with exponential backoff
 63:       const baseDelay = config.initialDelayMs * Math.pow(config.backoffMultiplier, attempt - 1)
 64:       const jitter = Math.random() * 0.3 * baseDelay // Add jitter to prevent thundering herd
 65:       const delay = Math.min(baseDelay + jitter, config.maxDelayMs)
 66:       
 67:       // Log retry attempt
 68:       logger.warn(`Operation failed, retrying...`, {
 69:         context: options.context || 'retry',
 70:         attempt,
 71:         maxAttempts: config.maxAttempts,
 72:         delayMs: Math.round(delay),
 73:         error: error instanceof Error ? error.message : String(error)
 74:       })
 75:       
 76:       // Track error
 77:       errorTracker.trackError(error as Error, {
 78:         context: options.context || 'retry',
 79:         severity: 'medium',
 80:         tags: ['retry', `attempt-${attempt}`],
 81:         metadata: {
 82:           attempt,
 83:           maxAttempts: config.maxAttempts,
 84:           willRetry: attempt < config.maxAttempts
 85:         }
 86:       })
 87:       
 88:       // Call onRetry callback if provided
 89:       if (options.onRetry) {
 90:         options.onRetry(attempt, error)
 91:       }
 92:       
 93:       // Wait before retrying
 94:       await sleep(delay)
 95:     }
 96:   }
 97:   
 98:   // All retries failed
 99:   const finalError = new Error(
100:     `Operation failed after ${config.maxAttempts} attempts: ${
101:       lastError instanceof Error ? lastError.message : String(lastError)
102:     }`
103:   )
104:   
105:   errorTracker.trackError(finalError, {
106:     context: options.context || 'retry',
107:     severity: 'high',
108:     tags: ['retry-failed', 'max-attempts-reached'],
109:     metadata: {
110:       attempts: config.maxAttempts,
111:       originalError: lastError instanceof Error ? lastError.message : String(lastError)
112:     }
113:   })
114:   
115:   throw finalError
116: }
117: 
118: /**
119:  * Helper to determine if an error is retryable based on HTTP status
120:  */
121: export function isRetryableHttpError(error: any): boolean {
122:   // Retry on network errors
123:   if (error.name === 'NetworkError' || error.message?.includes('network')) {
124:     return true
125:   }
126:   
127:   // Retry on specific HTTP status codes
128:   const retryableStatuses = [408, 429, 500, 502, 503, 504]
129:   if (error.status && retryableStatuses.includes(error.status)) {
130:     return true
131:   }
132:   
133:   // Retry on timeout errors
134:   if (error.name === 'TimeoutError' || error.message?.includes('timeout')) {
135:     return true
136:   }
137:   
138:   return false
139: }
140: 
141: /**
142:  * Helper to determine if an error is retryable for database operations
143:  */
144: export function isRetryableDatabaseError(error: any): boolean {
145:   // Retry on connection errors
146:   if (error.name === 'MongoNetworkError' || error.message?.includes('ECONNREFUSED')) {
147:     return true
148:   }
149:   
150:   // Retry on timeout errors
151:   if (error.name === 'MongoServerSelectionError' || error.message?.includes('timed out')) {
152:     return true
153:   }
154:   
155:   // Don't retry on validation or duplicate key errors
156:   if (error.name === 'ValidationError' || error.code === 11000) {
157:     return false
158:   }
159:   
160:   return false
161: }
162: 
163: /**
164:  * Retry specifically for fetch/API calls
165:  */
166: export async function fetchWithRetry(
167:   url: string,
168:   init?: RequestInit,
169:   retryOptions?: Omit<RetryOptions, 'context' | 'retryableErrors'>
170: ): Promise<Response> {
171:   return withRetry(
172:     async () => {
173:       const response = await fetch(url, init)
174:       
175:       // Throw error for non-OK responses so they can be retried
176:       if (!response.ok) {
177:         const error: any = new Error(`HTTP ${response.status}: ${response.statusText}`)
178:         error.status = response.status
179:         error.response = response
180:         throw error
181:       }
182:       
183:       return response
184:     },
185:     {
186:       ...retryOptions,
187:       context: `fetch:${url}`,
188:       retryableErrors: isRetryableHttpError
189:     }
190:   )
191: }
192: 
193: /**
194:  * Simple sleep utility
195:  */
196: function sleep(ms: number): Promise<void> {
197:   return new Promise(resolve => setTimeout(resolve, ms))
198: }
199: 
200: /**
201:  * Batch retry - retry multiple operations with shared config
202:  */
203: export async function batchRetry<T>(
204:   operations: Array<() => Promise<T>>,
205:   options: RetryOptions = {}
206: ): Promise<Array<{ success: boolean; result?: T; error?: any }>> {
207:   const results = await Promise.allSettled(
208:     operations.map(op => withRetry(op, options))
209:   )
210:   
211:   return results.map(result => {
212:     if (result.status === 'fulfilled') {
213:       return { success: true, result: result.value }
214:     } else {
215:       return { success: false, error: result.reason }
216:     }
217:   })
218: }
219: 
220: /**
221:  * Circuit breaker state for repeated failures
222:  */
223: class CircuitBreaker {
224:   private failures = 0
225:   private lastFailureTime: number | null = null
226:   private state: 'closed' | 'open' | 'half-open' = 'closed'
227:   
228:   constructor(
229:     private threshold: number = 5,
230:     private resetTimeoutMs: number = 60000
231:   ) {}
232:   
233:   async execute<T>(operation: () => Promise<T>): Promise<T> {
234:     // Check if circuit should be half-open (try to recover)
235:     if (this.state === 'open' && this.shouldReset()) {
236:       this.state = 'half-open'
237:     }
238:     
239:     // Reject if circuit is open
240:     if (this.state === 'open') {
241:       throw new Error('Circuit breaker is OPEN - too many recent failures')
242:     }
243:     
244:     try {
245:       const result = await operation()
246:       this.onSuccess()
247:       return result
248:     } catch (error) {
249:       this.onFailure()
250:       throw error
251:     }
252:   }
253:   
254:   private onSuccess() {
255:     this.failures = 0
256:     this.state = 'closed'
257:   }
258:   
259:   private onFailure() {
260:     this.failures++
261:     this.lastFailureTime = Date.now()
262:     
263:     if (this.failures >= this.threshold) {
264:       this.state = 'open'
265:       logger.error('Circuit breaker opened due to repeated failures', {
266:         failures: this.failures,
267:         threshold: this.threshold
268:       })
269:     }
270:   }
271:   
272:   private shouldReset(): boolean {
273:     if (!this.lastFailureTime) return false
274:     return Date.now() - this.lastFailureTime > this.resetTimeoutMs
275:   }
276:   
277:   getState() {
278:     return {
279:       state: this.state,
280:       failures: this.failures,
281:       lastFailureTime: this.lastFailureTime
282:     }
283:   }
284: }
285: 
286: // Global circuit breakers for common operations
287: export const circuitBreakers = {
288:   perplexityAPI: new CircuitBreaker(5, 60000),
289:   database: new CircuitBreaker(10, 30000),
290:   redis: new CircuitBreaker(5, 30000)
291: }
</file>

<file path="src/lib/salary-intelligence.ts">
  1: /**
  2:  * Salary Intelligence Service
  3:  * 
  4:  * Provides salary data and insights for job positions
  5:  */
  6: 
  7: import { PerplexityService } from './perplexity-service'
  8: 
  9: export interface SalaryData {
 10:   jobTitle: string
 11:   location: string
 12:   salaryRange: {
 13:     min: number
 14:     max: number
 15:     median: number
 16:     currency: string
 17:   }
 18:   percentiles: {
 19:     p25: number
 20:     p50: number
 21:     p75: number
 22:     p90: number
 23:   }
 24:   benefits: string[]
 25:   totalCompensation: {
 26:     base: number
 27:     bonus: number
 28:     equity: number
 29:     total: number
 30:   }
 31:   sources: string[]
 32:   confidence: number
 33:   lastUpdated: string
 34: }
 35: 
 36: export class SalaryIntelligenceService {
 37:   /**
 38:    * Get salary data for a job position
 39:    */
 40:   static async getSalaryData(jobTitle: string, location: string, company?: string): Promise<SalaryData> {
 41:     try {
 42:       const client = new PerplexityService()
 43:       
 44:       const prompt = `Find comprehensive salary data for this position:
 45: 
 46: Job Title: ${jobTitle}
 47: Location: ${location}
 48: ${company ? `Company: ${company}` : ''}
 49: 
 50: Search these sources:
 51: 1. Glassdoor salary data
 52: 2. Payscale.com
 53: 3. Levels.fyi (for tech roles)
 54: 4. Indeed salary insights
 55: 5. LinkedIn salary data
 56: 6. Company-specific data if available
 57: 
 58: Return ONLY valid JSON:
 59: {
 60:   "jobTitle": "${jobTitle}",
 61:   "location": "${location}",
 62:   "salaryRange": {
 63:     "min": 70000,
 64:     "max": 120000,
 65:     "median": 95000,
 66:     "currency": "USD"
 67:   },
 68:   "percentiles": {
 69:     "p25": 75000,
 70:     "p50": 95000,
 71:     "p75": 110000,
 72:     "p90": 125000
 73:   },
 74:   "benefits": ["Health insurance", "401k match", "PTO", "Remote work"],
 75:   "totalCompensation": {
 76:     "base": 95000,
 77:     "bonus": 10000,
 78:     "equity": 20000,
 79:     "total": 125000
 80:   },
 81:   "sources": ["Glassdoor", "Payscale", "LinkedIn"],
 82:   "confidence": 0.85,
 83:   "lastUpdated": "${new Date().toISOString()}"
 84: }
 85: 
 86: REQUIREMENTS:
 87: - Use real salary data from multiple sources
 88: - Include location-adjusted salaries
 89: - Show percentile breakdown
 90: - List common benefits
 91: - Calculate total compensation
 92: - Provide confidence score based on data availability`
 93: 
 94:       const response = await client.makeRequest(
 95:         'You are a salary research analyst. Provide accurate, data-driven salary information from multiple sources.',
 96:         prompt,
 97:         {
 98:           temperature: 0.2,
 99:           maxTokens: 2000,
100:           model: 'sonar-pro'
101:         }
102:       )
103: 
104:       // Parse response
105:       let cleanedContent = response.content.trim()
106:       cleanedContent = cleanedContent.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '')
107:       
108:       const jsonMatch = cleanedContent.match(/\{[\s\S]*\}/)
109:       if (jsonMatch) {
110:         cleanedContent = jsonMatch[0]
111:       }
112: 
113:       const parsed = JSON.parse(cleanedContent) as SalaryData
114: 
115:       return parsed
116:     } catch (error) {
117:       console.error('[SALARY_INTEL] Failed to get salary data:', error)
118:       
119:       // Return fallback
120:       return {
121:         jobTitle,
122:         location,
123:         salaryRange: {
124:           min: 0,
125:           max: 0,
126:           median: 0,
127:           currency: 'USD'
128:         },
129:         percentiles: {
130:           p25: 0,
131:           p50: 0,
132:           p75: 0,
133:           p90: 0
134:         },
135:         benefits: [],
136:         totalCompensation: {
137:           base: 0,
138:           bonus: 0,
139:           equity: 0,
140:           total: 0
141:         },
142:         sources: [],
143:         confidence: 0,
144:         lastUpdated: new Date().toISOString()
145:       }
146:     }
147:   }
148: 
149:   /**
150:    * Compare salary to market rate
151:    */
152:   static compareSalary(offeredSalary: number, marketData: SalaryData): {
153:     percentile: number
154:     comparison: 'below' | 'at' | 'above'
155:     difference: number
156:     recommendation: string
157:   } {
158:     const median = marketData.salaryRange.median
159:     const difference = offeredSalary - median
160:     const percentageDiff = (difference / median) * 100
161: 
162:     let percentile = 50
163:     if (offeredSalary >= marketData.percentiles.p90) percentile = 90
164:     else if (offeredSalary >= marketData.percentiles.p75) percentile = 75
165:     else if (offeredSalary >= marketData.percentiles.p50) percentile = 50
166:     else if (offeredSalary >= marketData.percentiles.p25) percentile = 25
167:     else percentile = 10
168: 
169:     let comparison: 'below' | 'at' | 'above' = 'at'
170:     if (percentageDiff < -10) comparison = 'below'
171:     else if (percentageDiff > 10) comparison = 'above'
172: 
173:     let recommendation = ''
174:     if (comparison === 'below') {
175:       recommendation = `This offer is ${Math.abs(percentageDiff).toFixed(1)}% below market rate. Consider negotiating for $${median.toLocaleString()} (market median).`
176:     } else if (comparison === 'above') {
177:       recommendation = `This offer is ${percentageDiff.toFixed(1)}% above market rate. Excellent compensation!`
178:     } else {
179:       recommendation = `This offer is competitive with market rates.`
180:     }
181: 
182:     return {
183:       percentile,
184:       comparison,
185:       difference,
186:       recommendation
187:     }
188:   }
189: 
190:   /**
191:    * Get salary negotiation tips
192:    */
193:   static getNegotiationTips(salaryData: SalaryData, offeredSalary?: number): string[] {
194:     const tips = [
195:       `Market median for ${salaryData.jobTitle} in ${salaryData.location} is $${salaryData.salaryRange.median.toLocaleString()}`,
196:       `Top performers (75th percentile) earn $${salaryData.percentiles.p75.toLocaleString()}`,
197:       `Consider total compensation including bonus and equity: $${salaryData.totalCompensation.total.toLocaleString()}`
198:     ]
199: 
200:     if (offeredSalary) {
201:       const comparison = this.compareSalary(offeredSalary, salaryData)
202:       tips.push(comparison.recommendation)
203:     }
204: 
205:     tips.push(
206:       'Research company-specific compensation on Glassdoor and Levels.fyi',
207:       'Negotiate benefits if base salary is fixed (PTO, remote work, signing bonus)',
208:       'Ask about performance bonuses and equity grants',
209:       'Request salary review timeline (6 months, 1 year)'
210:     )
211: 
212:     return tips
213:   }
214: }
</file>

<file path="src/lib/salary-utils.ts">
  1: /**
  2:  * Salary Utilities
  3:  * Fixes ISSUE #7: No salary information
  4:  */
  5: 
  6: export interface SalaryRange {
  7:   min: number
  8:   max: number
  9:   currency?: string
 10:   period?: 'yearly' | 'hourly'
 11: }
 12: 
 13: /**
 14:  * Parse salary string to structured format
 15:  */
 16: export function parseSalary(salaryStr: string | null | undefined): SalaryRange | null {
 17:   if (!salaryStr) return null
 18:   
 19:   const cleaned = salaryStr.toLowerCase().replace(/,/g, '')
 20:   
 21:   // Match patterns like "$50,000 - $80,000" or "$50k-$80k"
 22:   const rangeMatch = cleaned.match(/\$?(\d+)k?\s*[-–—]\s*\$?(\d+)k?/)
 23:   if (rangeMatch) {
 24:     const min = parseInt(rangeMatch[1]) * (rangeMatch[1].length <= 3 ? 1000 : 1)
 25:     const max = parseInt(rangeMatch[2]) * (rangeMatch[2].length <= 3 ? 1000 : 1)
 26:     return { min, max, currency: 'USD', period: 'yearly' }
 27:   }
 28:   
 29:   // Match single value like "$75,000" or "$75k"
 30:   const singleMatch = cleaned.match(/\$?(\d+)k?/)
 31:   if (singleMatch) {
 32:     const value = parseInt(singleMatch[1]) * (singleMatch[1].length <= 3 ? 1000 : 1)
 33:     return { min: value, max: value, currency: 'USD', period: 'yearly' }
 34:   }
 35:   
 36:   return null
 37: }
 38: 
 39: /**
 40:  * Estimate salary based on job title and level
 41:  */
 42: export function estimateSalary(jobTitle: string, location?: string): SalaryRange | null {
 43:   const titleLower = jobTitle.toLowerCase()
 44:   
 45:   // Salary ranges by seniority level (USD yearly)
 46:   const salaryRanges: Record<string, SalaryRange> = {
 47:     'entry level': { min: 35000, max: 55000 },
 48:     'entry-level': { min: 35000, max: 55000 },
 49:     'junior': { min: 40000, max: 65000 },
 50:     'intermediate': { min: 55000, max: 85000 },
 51:     'mid-level': { min: 60000, max: 90000 },
 52:     'senior': { min: 85000, max: 130000 },
 53:     'lead': { min: 100000, max: 160000 },
 54:     'principal': { min: 120000, max: 180000 },
 55:     'staff': { min: 110000, max: 170000 },
 56:     'manager': { min: 90000, max: 140000 },
 57:     'director': { min: 130000, max: 200000 },
 58:     'vp': { min: 150000, max: 250000 },
 59:     'vice president': { min: 150000, max: 250000 },
 60:     'c-level': { min: 200000, max: 400000 },
 61:     'cto': { min: 200000, max: 400000 },
 62:     'ceo': { min: 250000, max: 500000 }
 63:   }
 64:   
 65:   // Find matching level
 66:   for (const [level, range] of Object.entries(salaryRanges)) {
 67:     if (titleLower.includes(level)) {
 68:       // Adjust for location if provided
 69:       if (location) {
 70:         const locationLower = location.toLowerCase()
 71:         if (locationLower.includes('san francisco') || locationLower.includes('new york')) {
 72:           // High cost of living - increase by 30%
 73:           return {
 74:             min: Math.round(range.min * 1.3),
 75:             max: Math.round(range.max * 1.3),
 76:             currency: 'USD',
 77:             period: 'yearly'
 78:           }
 79:         } else if (locationLower.includes('remote')) {
 80:           // Remote - slight increase
 81:           return {
 82:             min: Math.round(range.min * 1.1),
 83:             max: Math.round(range.max * 1.1),
 84:             currency: 'USD',
 85:             period: 'yearly'
 86:           }
 87:         }
 88:       }
 89:       
 90:       return { ...range, currency: 'USD', period: 'yearly' }
 91:     }
 92:   }
 93:   
 94:   // Default range if no match
 95:   return { min: 50000, max: 90000, currency: 'USD', period: 'yearly' }
 96: }
 97: 
 98: /**
 99:  * Format salary range for display
100:  */
101: export function formatSalaryRange(range: SalaryRange | null, includeEstimated = false): string {
102:   if (!range) return 'Salary not listed'
103:   
104:   const { min, max, currency = 'USD' } = range
105:   
106:   const formatter = new Intl.NumberFormat('en-US', {
107:     style: 'currency',
108:     currency,
109:     minimumFractionDigits: 0,
110:     maximumFractionDigits: 0
111:   })
112:   
113:   if (min === max) {
114:     return `${formatter.format(min)}${includeEstimated ? ' (estimated)' : ''}`
115:   }
116:   
117:   return `${formatter.format(min)} - ${formatter.format(max)}${includeEstimated ? ' (estimated)' : ''}`
118: }
119: 
120: /**
121:  * Get salary display string with fallback to estimation
122:  */
123: export function getSalaryDisplay(
124:   job: { title: string; salary?: string; location?: string }
125: ): string {
126:   // Try to parse provided salary
127:   if (job.salary) {
128:     const parsed = parseSalary(job.salary)
129:     if (parsed) {
130:       return formatSalaryRange(parsed)
131:     }
132:   }
133:   
134:   // Fallback to estimation
135:   const estimated = estimateSalary(job.title, job.location)
136:   return formatSalaryRange(estimated, true)
137: }
</file>

<file path="src/lib/security.ts">
 1: import { NextRequest } from 'next/server'
 2: 
 3: export function isSameOrigin(request: NextRequest): boolean {
 4:   try {
 5:     const origin = request.headers.get('origin') || ''
 6:     // Treat missing Origin as same-origin for non-browser clients (SSR/fetch)
 7:     if (!origin) return true
 8:     const reqOrigin = new URL(request.nextUrl.origin).host
 9:     const originHost = new URL(origin).host
10:     if (reqOrigin === originHost) return true
11:     // Allow configured public origin (Railway) to POST to API if set
12:     const allowed = process.env.NEXT_PUBLIC_APP_URL || process.env.NEXTAUTH_URL
13:     if (allowed) {
14:       try {
15:         const allowedHost = new URL(allowed).host
16:         if (originHost === allowedHost) return true
17:       } catch {}
18:     }
19:     return false
20:   } catch {
21:     return false
22:   }
23: }
</file>

<file path="src/lib/sentry.ts">
 1: import * as Sentry from '@sentry/nextjs'
 2: 
 3: const dsn = process.env.NEXT_PUBLIC_SENTRY_DSN
 4: 
 5: export function initSentry() {
 6:   if (!dsn || Sentry.getCurrentHub().getClient()) return
 7:   Sentry.init({
 8:     dsn,
 9:     tracesSampleRate: 0.1,
10:     environment: process.env.NEXT_PUBLIC_ENVIRONMENT || 'production',
11:     maxBreadcrumbs: 50,
12:     integrations: [Sentry.browserTracingIntegration?.()].filter(Boolean) as any
13:   })
14: }
15: 
16: export function addRequestBreadcrumb(requestId?: string) {
17:   if (!requestId) return
18:   Sentry.addBreadcrumb({ category: 'request', level: 'info', message: `requestId=${requestId}` })
19: }
</file>

<file path="src/lib/server-pdf-generator.ts">
 1: /**
 2:  * Server-Side PDF Generation
 3:  * Converts HTML to PDF Buffer for email attachments
 4:  * Uses pdfkit for real PDF generation
 5:  */
 6: 
 7: import PDFDocument from 'pdfkit'
 8: 
 9: /**
10:  * Convert HTML to real PDF using pdfkit
11:  */
12: export async function htmlToSimplePDF(html: string, title: string): Promise<Buffer> {
13:   return new Promise((resolve, reject) => {
14:     try {
15:       // Strip HTML tags and convert to plain text
16:       const text = stripHtmlTags(html)
17:       
18:       // Create PDF document
19:       const doc = new PDFDocument({
20:         size: 'LETTER',
21:         margins: { top: 50, bottom: 50, left: 50, right: 50 }
22:       })
23:       
24:       // Collect PDF chunks
25:       const chunks: Buffer[] = []
26:       doc.on('data', (chunk) => chunks.push(chunk))
27:       doc.on('end', () => resolve(Buffer.concat(chunks)))
28:       doc.on('error', reject)
29:       
30:       // Add title
31:       doc.fontSize(20)
32:          .font('Helvetica-Bold')
33:          .text(title, { align: 'center' })
34:          .moveDown(1.5)
35:       
36:       // Add content
37:       doc.fontSize(11)
38:          .font('Helvetica')
39:          .text(text, {
40:            align: 'left',
41:            lineGap: 2
42:          })
43:       
44:       // Finalize PDF
45:       doc.end()
46:       
47:     } catch (error) {
48:       console.error('[PDF-GENERATOR] Error:', error)
49:       reject(new Error(`Failed to generate PDF: ${error instanceof Error ? error.message : 'Unknown error'}`))
50:     }
51:   })
52: }
53: 
54: /**
55:  * Strip HTML tags from text
56:  */
57: function stripHtmlTags(html: string): string {
58:   return html
59:     .replace(/<style[^>]*>.*?<\/style>/gis, '')
60:     .replace(/<script[^>]*>.*?<\/script>/gis, '')
61:     .replace(/<[^>]+>/g, '')
62:     .replace(/&nbsp;/g, ' ')
63:     .replace(/&amp;/g, '&')
64:     .replace(/&lt;/g, '<')
65:     .replace(/&gt;/g, '>')
66:     .replace(/&quot;/g, '"')
67:     .replace(/&#039;/g, "'")
68:     .replace(/\s+/g, ' ')
69:     .trim()
70: }
71: 
72: /**
73:  * Convert resume HTML to PDF
74:  */
75: export async function generateResumePDF(resumeHTML: string): Promise<Buffer> {
76:   return htmlToSimplePDF(resumeHTML, 'Resume')
77: }
78: 
79: /**
80:  * Convert cover letter HTML to PDF
81:  */
82: export async function generateCoverLetterPDF(coverLetterHTML: string): Promise<Buffer> {
83:   return htmlToSimplePDF(coverLetterHTML, 'Cover Letter')
84: }
</file>

<file path="src/lib/tech-stack-analyzer.ts">
  1: /**
  2:  * Tech Stack Analyzer
  3:  * 
  4:  * Analyzes company tech stacks for technical job applications
  5:  */
  6: 
  7: import { PerplexityService } from './perplexity-service'
  8: 
  9: export interface TechStack {
 10:   company: string
 11:   technologies: {
 12:     name: string
 13:     category: 'language' | 'framework' | 'database' | 'cloud' | 'tool' | 'platform'
 14:     proficiency_required: 'required' | 'preferred' | 'nice-to-have'
 15:     years_experience?: number
 16:     confidence: number
 17:   }[]
 18:   architecture: string[]
 19:   development_practices: string[]
 20:   tools: string[]
 21:   certifications: string[]
 22:   learning_resources: {
 23:     technology: string
 24:     resources: string[]
 25:   }[]
 26:   skill_gaps: string[]
 27:   recommendations: string[]
 28: }
 29: 
 30: export class TechStackAnalyzer {
 31:   /**
 32:    * Analyze company tech stack
 33:    */
 34:   static async analyzeTechStack(
 35:     company: string,
 36:     jobDescription: string,
 37:     userSkills: string[]
 38:   ): Promise<TechStack> {
 39:     try {
 40:       const client = new PerplexityService()
 41:       
 42:       const prompt = `Analyze the tech stack for ${company} based on this job description:
 43: 
 44: ${jobDescription}
 45: 
 46: User's Current Skills: ${userSkills.join(', ')}
 47: 
 48: Search these sources:
 49: 1. Company engineering blog
 50: 2. Stackshare.io for ${company}
 51: 3. GitHub repositories
 52: 4. Job postings for tech mentions
 53: 5. Company tech talks/conferences
 54: 
 55: Return ONLY valid JSON:
 56: {
 57:   "company": "${company}",
 58:   "technologies": [
 59:     {
 60:       "name": "React",
 61:       "category": "framework",
 62:       "proficiency_required": "required",
 63:       "years_experience": 3,
 64:       "confidence": 0.95
 65:     },
 66:     {
 67:       "name": "AWS",
 68:       "category": "cloud",
 69:       "proficiency_required": "preferred",
 70:       "confidence": 0.85
 71:     }
 72:   ],
 73:   "architecture": ["Microservices", "Event-driven", "RESTful APIs"],
 74:   "development_practices": ["Agile/Scrum", "CI/CD", "Test-Driven Development", "Code Reviews"],
 75:   "tools": ["Git", "Docker", "Kubernetes", "Jenkins", "Jira"],
 76:   "certifications": ["AWS Certified Solutions Architect", "Kubernetes Administrator"],
 77:   "learning_resources": [
 78:     {
 79:       "technology": "React",
 80:       "resources": [
 81:         "Official React docs",
 82:         "React course on Udemy",
 83:         "FreeCodeCamp React tutorial"
 84:       ]
 85:     }
 86:   ],
 87:   "skill_gaps": ["Kubernetes", "GraphQL"],
 88:   "recommendations": [
 89:     "Focus on learning Kubernetes - it's heavily used at ${company}",
 90:     "Build a project using React + AWS to demonstrate skills",
 91:     "Get AWS certification to stand out"
 92:   ]
 93: }
 94: 
 95: REQUIREMENTS:
 96: - Extract ALL technologies mentioned in job description
 97: - Research ${company}'s actual tech stack from public sources
 98: - Categorize by importance (required vs preferred)
 99: - Identify skill gaps based on user's current skills
100: - Provide specific learning resources
101: - Give actionable recommendations`
102: 
103:       const response = await client.makeRequest(
104:         'You are a technical recruiter and software architect. Analyze tech stacks and provide career development guidance.',
105:         prompt,
106:         {
107:           temperature: 0.2,
108:           maxTokens: 3000,
109:           model: 'sonar-pro'
110:         }
111:       )
112: 
113:       // Parse response
114:       let cleanedContent = response.content.trim()
115:       cleanedContent = cleanedContent.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '')
116:       
117:       const jsonMatch = cleanedContent.match(/\{[\s\S]*\}/)
118:       if (jsonMatch) {
119:         cleanedContent = jsonMatch[0]
120:       }
121: 
122:       const parsed = JSON.parse(cleanedContent) as TechStack
123: 
124:       return parsed
125:     } catch (error) {
126:       console.error('[TECH_STACK] Failed to analyze:', error)
127:       
128:       // Return fallback
129:       return {
130:         company,
131:         technologies: [],
132:         architecture: [],
133:         development_practices: [],
134:         tools: [],
135:         certifications: [],
136:         learning_resources: [],
137:         skill_gaps: [],
138:         recommendations: []
139:       }
140:     }
141:   }
142: 
143:   /**
144:    * Calculate tech stack match score
145:    */
146:   static calculateMatchScore(techStack: TechStack, userSkills: string[]): {
147:     score: number
148:     matched: string[]
149:     missing: string[]
150:     recommendations: string[]
151:   } {
152:     const normalizedUserSkills = userSkills.map(s => s.toLowerCase())
153:     const requiredTech = techStack.technologies.filter(t => t.proficiency_required === 'required')
154:     const preferredTech = techStack.technologies.filter(t => t.proficiency_required === 'preferred')
155: 
156:     const matched: string[] = []
157:     const missing: string[] = []
158: 
159:     // Check required technologies
160:     for (const tech of requiredTech) {
161:       if (normalizedUserSkills.some(skill => 
162:         skill.includes(tech.name.toLowerCase()) || tech.name.toLowerCase().includes(skill)
163:       )) {
164:         matched.push(tech.name)
165:       } else {
166:         missing.push(tech.name)
167:       }
168:     }
169: 
170:     // Check preferred technologies
171:     for (const tech of preferredTech) {
172:       if (normalizedUserSkills.some(skill => 
173:         skill.includes(tech.name.toLowerCase()) || tech.name.toLowerCase().includes(skill)
174:       )) {
175:         matched.push(tech.name)
176:       }
177:     }
178: 
179:     // Calculate score
180:     const requiredScore = requiredTech.length > 0 
181:       ? (matched.filter(m => requiredTech.some(t => t.name === m)).length / requiredTech.length) * 70
182:       : 70
183: 
184:     const preferredScore = preferredTech.length > 0
185:       ? (matched.filter(m => preferredTech.some(t => t.name === m)).length / preferredTech.length) * 30
186:       : 30
187: 
188:     const score = Math.round(requiredScore + preferredScore)
189: 
190:     // Generate recommendations
191:     const recommendations: string[] = []
192:     if (missing.length > 0) {
193:       recommendations.push(`Learn these required technologies: ${missing.slice(0, 3).join(', ')}`)
194:     }
195:     if (score < 70) {
196:       recommendations.push('Consider taking online courses to fill skill gaps')
197:       recommendations.push('Build projects demonstrating these technologies')
198:     }
199:     if (techStack.certifications.length > 0) {
200:       recommendations.push(`Consider getting certified: ${techStack.certifications[0]}`)
201:     }
202: 
203:     return {
204:       score,
205:       matched,
206:       missing,
207:       recommendations
208:     }
209:   }
210: 
211:   /**
212:    * Generate learning plan
213:    */
214:   static generateLearningPlan(techStack: TechStack, userSkills: string[]): {
215:     priority: 'high' | 'medium' | 'low'
216:     technology: string
217:     reason: string
218:     estimatedTime: string
219:     resources: string[]
220:   }[] {
221:     const plan: any[] = []
222:     const normalizedUserSkills = userSkills.map(s => s.toLowerCase())
223: 
224:     // High priority: Required technologies user doesn't have
225:     for (const tech of techStack.technologies) {
226:       if (tech.proficiency_required === 'required') {
227:         const hasSkill = normalizedUserSkills.some(skill => 
228:           skill.includes(tech.name.toLowerCase()) || tech.name.toLowerCase().includes(skill)
229:         )
230: 
231:         if (!hasSkill) {
232:           const learningResource = techStack.learning_resources.find(r => r.technology === tech.name)
233:           plan.push({
234:             priority: 'high',
235:             technology: tech.name,
236:             reason: `Required for the role at ${techStack.company}`,
237:             estimatedTime: tech.years_experience ? `${tech.years_experience * 3} months` : '3-6 months',
238:             resources: learningResource?.resources || [`Search for ${tech.name} tutorials`]
239:           })
240:         }
241:       }
242:     }
243: 
244:     // Medium priority: Preferred technologies
245:     for (const tech of techStack.technologies) {
246:       if (tech.proficiency_required === 'preferred') {
247:         const hasSkill = normalizedUserSkills.some(skill => 
248:           skill.includes(tech.name.toLowerCase()) || tech.name.toLowerCase().includes(skill)
249:         )
250: 
251:         if (!hasSkill) {
252:           const learningResource = techStack.learning_resources.find(r => r.technology === tech.name)
253:           plan.push({
254:             priority: 'medium',
255:             technology: tech.name,
256:             reason: `Preferred skill at ${techStack.company}`,
257:             estimatedTime: '1-3 months',
258:             resources: learningResource?.resources || [`Search for ${tech.name} courses`]
259:           })
260:         }
261:       }
262:     }
263: 
264:     // Sort by priority
265:     return plan.sort((a, b) => {
266:       const priorityOrder = { high: 0, medium: 1, low: 2 }
267:       return priorityOrder[a.priority] - priorityOrder[b.priority]
268:     }).slice(0, 5) // Top 5 priorities
269:   }
270: 
271:   /**
272:    * Extract technologies from job description
273:    */
274:   static extractTechnologies(jobDescription: string): string[] {
275:     const commonTech = [
276:       // Languages
277:       'JavaScript', 'TypeScript', 'Python', 'Java', 'C++', 'C#', 'Go', 'Rust', 'Ruby', 'PHP', 'Swift', 'Kotlin',
278:       // Frontend
279:       'React', 'Vue', 'Angular', 'Next.js', 'Svelte', 'HTML', 'CSS', 'Tailwind', 'Bootstrap',
280:       // Backend
281:       'Node.js', 'Express', 'Django', 'Flask', 'Spring', 'ASP.NET', 'Rails',
282:       // Databases
283:       'PostgreSQL', 'MySQL', 'MongoDB', 'Redis', 'Elasticsearch', 'DynamoDB', 'Cassandra',
284:       // Cloud
285:       'AWS', 'Azure', 'GCP', 'Docker', 'Kubernetes', 'Terraform', 'CloudFormation',
286:       // Tools
287:       'Git', 'GitHub', 'GitLab', 'Jenkins', 'CircleCI', 'Jira', 'Confluence'
288:     ]
289: 
290:     const found: string[] = []
291:     const lowerDesc = jobDescription.toLowerCase()
292: 
293:     for (const tech of commonTech) {
294:       if (lowerDesc.includes(tech.toLowerCase())) {
295:         found.push(tech)
296:       }
297:     }
298: 
299:     return Array.from(new Set(found))
300:   }
301: }
</file>

<file path="src/lib/text-formatting.ts">
  1: /**
  2:  * Text Formatting Utilities
  3:  * Fixes ISSUE #3: ALL CAPS names in cover letters
  4:  */
  5: 
  6: /**
  7:  * Convert text to Title Case
  8:  * Handles special cases: McDonald, O'Brien, McKenzie, etc.
  9:  */
 10: export function toTitleCase(str: string): string {
 11:   if (!str) return ''
 12:   
 13:   return str
 14:     .toLowerCase()
 15:     .split(' ')
 16:     .map(word => {
 17:       // Handle possessives and contractions (O'Brien, don't)
 18:       if (word.includes("'")) {
 19:         const parts = word.split("'")
 20:         return parts.map(p => p.charAt(0).toUpperCase() + p.slice(1)).join("'")
 21:       }
 22:       
 23:       // Handle Mc/Mac prefixes (McDonald, McKenzie, MacArthur)
 24:       if (word.toLowerCase().startsWith('mc') && word.length > 2) {
 25:         return 'Mc' + word.charAt(2).toUpperCase() + word.slice(3)
 26:       }
 27:       
 28:       if (word.toLowerCase().startsWith('mac') && word.length > 3) {
 29:         return 'Mac' + word.charAt(3).toUpperCase() + word.slice(4)
 30:       }
 31:       
 32:       // Default: capitalize first letter
 33:       return word.charAt(0).toUpperCase() + word.slice(1)
 34:     })
 35:     .join(' ')
 36: }
 37: 
 38: /**
 39:  * Format resume text with proper line breaks
 40:  * Fixes ISSUE #2: Resume with no line breaks
 41:  */
 42: export function formatResumeWithLineBreaks(resumeText: string): string {
 43:   if (!resumeText) return ''
 44:   
 45:   // If already has line breaks, return as-is
 46:   if (resumeText.includes('\n\n')) {
 47:     return resumeText
 48:   }
 49:   
 50:   let formatted = resumeText
 51:   
 52:   // Add line breaks after common section headers
 53:   const sectionHeaders = [
 54:     'PROFESSIONAL SUMMARY',
 55:     'PROFESSIONAL EXPERIENCE',
 56:     'WORK EXPERIENCE',
 57:     'EXPERIENCE',
 58:     'EDUCATION',
 59:     'SKILLS',
 60:     'TECHNICAL SKILLS',
 61:     'CORE COMPETENCIES',
 62:     'KEY ACHIEVEMENTS',
 63:     'ACHIEVEMENTS',
 64:     'CERTIFICATIONS',
 65:     'ADDITIONAL INFORMATION'
 66:   ]
 67:   
 68:   sectionHeaders.forEach(header => {
 69:     // Add double line break before section headers
 70:     formatted = formatted.replace(
 71:       new RegExp(`(${header})`, 'gi'),
 72:       '\n\n$1\n'
 73:     )
 74:   })
 75:   
 76:   // Add line break after contact info (email, phone patterns)
 77:   formatted = formatted.replace(
 78:     /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g,
 79:     '$1\n'
 80:   )
 81:   
 82:   formatted = formatted.replace(
 83:     /(\d{3}[-.\s]?\d{3}[-.\s]?\d{4})/g,
 84:     '$1\n'
 85:   )
 86:   
 87:   // Add line break after LinkedIn URLs
 88:   formatted = formatted.replace(
 89:     /(linkedin\.com\/[^\s]+)/gi,
 90:     '$1\n\n'
 91:   )
 92:   
 93:   // Add line break after bullet points
 94:   formatted = formatted.replace(/•\s*/g, '\n• ')
 95:   
 96:   // Add line break after dates (e.g., "2020 - 2023")
 97:   formatted = formatted.replace(
 98:     /(\d{4}\s*[-–—]\s*(?:\d{4}|Present|Current))/gi,
 99:     '$1\n'
100:   )
101:   
102:   // Clean up multiple consecutive line breaks (max 2)
103:   formatted = formatted.replace(/\n{3,}/g, '\n\n')
104:   
105:   // Trim whitespace
106:   formatted = formatted.trim()
107:   
108:   return formatted
109: }
110: 
111: /**
112:  * Extract name from resume text and format it properly
113:  */
114: export function extractAndFormatName(resumeText: string): string {
115:   if (!resumeText) return ''
116:   
117:   // Try to find name in first few lines
118:   const lines = resumeText.split('\n').slice(0, 5)
119:   
120:   for (const line of lines) {
121:     const trimmed = line.trim()
122:     
123:     // Skip empty lines and lines with email/phone
124:     if (!trimmed || trimmed.includes('@') || /\d{3}/.test(trimmed)) {
125:       continue
126:     }
127:     
128:     // Check if line looks like a name (2-4 words, mostly letters)
129:     const words = trimmed.split(/\s+/)
130:     if (words.length >= 2 && words.length <= 4) {
131:       const isName = words.every(w => /^[A-Za-z'-]+$/.test(w))
132:       if (isName) {
133:         return toTitleCase(trimmed)
134:       }
135:     }
136:   }
137:   
138:   return ''
139: }
140: 
141: /**
142:  * Format phone number consistently
143:  */
144: export function formatPhoneNumber(phone: string): string {
145:   if (!phone) return ''
146:   
147:   // Remove all non-digits
148:   const digits = phone.replace(/\D/g, '')
149:   
150:   // Format as (XXX) XXX-XXXX
151:   if (digits.length === 10) {
152:     return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`
153:   }
154:   
155:   // Format as +X (XXX) XXX-XXXX
156:   if (digits.length === 11) {
157:     return `+${digits[0]} (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`
158:   }
159:   
160:   return phone
161: }
</file>

<file path="src/lib/theme-manager.ts">
 1: 'use client'
 2: 
 3: export type ThemeMode = 'light' | 'dark'
 4: 
 5: export class ThemeManager {
 6:   private static current: ThemeMode | null = null
 7:   private static storageKey = 'theme'
 8: 
 9:   static init() {
10:     try {
11:       const stored = this.getStoredTheme()
12:       const system = this.getSystemTheme()
13:       // Default to dark theme if no preference stored
14:       const theme: ThemeMode = stored || 'dark'
15:       this.applyTheme(theme, false)
16:       // listen for system changes when user hasn't stored a preference
17:       if (!stored && typeof window !== 'undefined' && window.matchMedia) {
18:         const mq = window.matchMedia('(prefers-color-scheme: dark)')
19:         const handler = () => {
20:           const next = mq.matches ? 'dark' : 'light'
21:           this.applyTheme(next, true)
22:         }
23:         try { mq.addEventListener('change', handler) } catch { mq.addListener(handler) }
24:       }
25:     } catch {}
26:   }
27: 
28:   static toggle(): ThemeMode {
29:     const next: ThemeMode = this.current === 'dark' ? 'light' : 'dark'
30:     this.applyTheme(next, true)
31:     this.persist(next)
32:     return next
33:   }
34: 
35:   static set(theme: ThemeMode) {
36:     this.applyTheme(theme, true)
37:     this.persist(theme)
38:   }
39: 
40:   private static getStoredTheme(): ThemeMode | null {
41:     try {
42:       const v = localStorage.getItem(this.storageKey)
43:       if (v === 'light' || v === 'dark') return v
44:     } catch {}
45:     return null
46:   }
47: 
48:   private static getSystemTheme(): ThemeMode {
49:     if (typeof window !== 'undefined' && window.matchMedia) {
50:       return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
51:     }
52:     return 'light'
53:   }
54: 
55:   private static persist(theme: ThemeMode) {
56:     try { localStorage.setItem(this.storageKey, theme) } catch {}
57:   }
58: 
59:   private static applyTheme(theme: ThemeMode, animate: boolean) {
60:     try {
61:       const root = document.documentElement
62:       if (animate) {
63:         root.classList.add('theme-anim')
64:         setTimeout(() => root.classList.remove('theme-anim'), 350)
65:       }
66:       root.setAttribute('data-theme', theme)
67:       this.current = theme
68:     } catch {}
69:   }
70: }
</file>

<file path="src/lib/unified-job-board-strategy.ts">
  1: /**
  2:  * Unified Job Board Strategy
  3:  * 
  4:  * This service handles job board integrations using TWO approaches:
  5:  * 1. PUBLIC SCRAPING: For closed-API job boards (LinkedIn, Indeed, etc.)
  6:  * 2. OPEN APIs: For job boards with accessible public APIs
  7:  * 
  8:  * IMPORTANT: Most major job boards (LinkedIn, Indeed, ZipRecruiter, Monster)
  9:  * have CLOSED/PRIVATE APIs that require partnerships. We can only access
 10:  * their PUBLIC job listings via web scraping (Perplexity) or browser extensions.
 11:  */
 12: 
 13: import { PerplexityService } from './perplexity-service'
 14: import { PerplexityIntelligenceService } from './perplexity-intelligence'
 15: 
 16: export type JobBoardType = 'public-scraping' | 'open-api' | 'frontend-only'
 17: 
 18: export interface UnifiedJobBoardConfig {
 19:   name: string
 20:   displayName: string
 21:   type: JobBoardType
 22:   accessMethod: {
 23:     scraping?: {
 24:       baseUrl: string
 25:       publicListingsUrl: string
 26:       canScrapePerpeplexity: boolean
 27:     }
 28:     api?: {
 29:       baseUrl: string
 30:       requiresAuth: boolean
 31:       publicEndpoints: string[]
 32:     }
 33:     frontend?: {
 34:       browserExtensionRequired: boolean
 35:       bookmarkletSupported: boolean
 36:       canAutoFill: boolean
 37:     }
 38:   }
 39:   features: {
 40:     canDiscoverJobs: boolean
 41:     canApplyDirectly: boolean
 42:     requiresManualApplication: boolean
 43:     supportsTracking: boolean
 44:   }
 45: }
 46: 
 47: /**
 48:  * Job Board Configuration Matrix
 49:  * Based on ACTUAL accessibility, not wishful thinking
 50:  */
 51: export const JOB_BOARD_CONFIGS: Record<string, UnifiedJobBoardConfig> = {
 52:   // CLOSED API BOARDS - Can only scrape public listings
 53:   linkedin: {
 54:     name: 'linkedin',
 55:     displayName: 'LinkedIn',
 56:     type: 'frontend-only',
 57:     accessMethod: {
 58:       scraping: {
 59:         baseUrl: 'https://www.linkedin.com',
 60:         publicListingsUrl: 'https://www.linkedin.com/jobs/search',
 61:         canScrapePerpeplexity: true // Can scrape via Perplexity
 62:       },
 63:       frontend: {
 64:         browserExtensionRequired: true,
 65:         bookmarkletSupported: true,
 66:         canAutoFill: true // Can auto-fill Easy Apply
 67:       }
 68:     },
 69:     features: {
 70:       canDiscoverJobs: true,  // Via Perplexity scraping
 71:       canApplyDirectly: false, // No API access
 72:       requiresManualApplication: true, // Need browser extension/bookmarklet
 73:       supportsTracking: false  // Can't track via API
 74:     }
 75:   },
 76: 
 77:   indeed: {
 78:     name: 'indeed',
 79:     displayName: 'Indeed',
 80:     type: 'frontend-only',
 81:     accessMethod: {
 82:       scraping: {
 83:         baseUrl: 'https://www.indeed.com',
 84:         publicListingsUrl: 'https://www.indeed.com/jobs',
 85:         canScrapePerpeplexity: true
 86:       },
 87:       frontend: {
 88:         browserExtensionRequired: true,
 89:         bookmarkletSupported: true,
 90:         canAutoFill: true
 91:       }
 92:     },
 93:     features: {
 94:       canDiscoverJobs: true,
 95:       canApplyDirectly: false,
 96:       requiresManualApplication: true,
 97:       supportsTracking: false
 98:     }
 99:   },
100: 
101:   ziprecruiter: {
102:     name: 'ziprecruiter',
103:     displayName: 'ZipRecruiter',
104:     type: 'frontend-only',
105:     accessMethod: {
106:       scraping: {
107:         baseUrl: 'https://www.ziprecruiter.com',
108:         publicListingsUrl: 'https://www.ziprecruiter.com/jobs-search',
109:         canScrapePerpeplexity: true
110:       },
111:       frontend: {
112:         browserExtensionRequired: true,
113:         bookmarkletSupported: true,
114:         canAutoFill: true
115:       }
116:     },
117:     features: {
118:       canDiscoverJobs: true,
119:       canApplyDirectly: false,
120:       requiresManualApplication: true,
121:       supportsTracking: false
122:     }
123:   },
124: 
125:   monster: {
126:     name: 'monster',
127:     displayName: 'Monster',
128:     type: 'frontend-only',
129:     accessMethod: {
130:       scraping: {
131:         baseUrl: 'https://www.monster.com',
132:         publicListingsUrl: 'https://www.monster.com/jobs/search',
133:         canScrapePerpeplexity: true
134:       },
135:       frontend: {
136:         browserExtensionRequired: true,
137:         bookmarkletSupported: true,
138:         canAutoFill: true
139:       }
140:     },
141:     features: {
142:       canDiscoverJobs: true,
143:       canApplyDirectly: false,
144:       requiresManualApplication: true,
145:       supportsTracking: false
146:     }
147:   },
148: 
149:   glassdoor: {
150:     name: 'glassdoor',
151:     displayName: 'Glassdoor',
152:     type: 'frontend-only',
153:     accessMethod: {
154:       scraping: {
155:         baseUrl: 'https://www.glassdoor.com',
156:         publicListingsUrl: 'https://www.glassdoor.com/Job/jobs.htm',
157:         canScrapePerpeplexity: true
158:       },
159:       frontend: {
160:         browserExtensionRequired: true,
161:         bookmarkletSupported: true,
162:         canAutoFill: false // More complex forms
163:       }
164:     },
165:     features: {
166:       canDiscoverJobs: true,
167:       canApplyDirectly: false,
168:       requiresManualApplication: true,
169:       supportsTracking: false
170:     }
171:   },
172: 
173:   // OPEN/PUBLIC BOARDS - Can use APIs
174:   jobbank: {
175:     name: 'jobbank',
176:     displayName: 'Job Bank Canada',
177:     type: 'public-scraping',
178:     accessMethod: {
179:       scraping: {
180:         baseUrl: 'https://www.jobbank.gc.ca',
181:         publicListingsUrl: 'https://www.jobbank.gc.ca/jobsearch/jobsearch',
182:         canScrapePerpeplexity: true
183:       },
184:       api: {
185:         baseUrl: 'https://www.jobbank.gc.ca',
186:         requiresAuth: false,
187:         publicEndpoints: ['/jobsearch/jobsearch']
188:       }
189:     },
190:     features: {
191:       canDiscoverJobs: true,
192:       canApplyDirectly: false, // Redirects to employer sites
193:       requiresManualApplication: true,
194:       supportsTracking: false
195:     }
196:   },
197: 
198:   workopolis: {
199:     name: 'workopolis',
200:     displayName: 'Workopolis',
201:     type: 'public-scraping',
202:     accessMethod: {
203:       scraping: {
204:         baseUrl: 'https://www.workopolis.com',
205:         publicListingsUrl: 'https://www.workopolis.com/jobsearch/jobs',
206:         canScrapePerpeplexity: true
207:       }
208:     },
209:     features: {
210:       canDiscoverJobs: true,
211:       canApplyDirectly: false,
212:       requiresManualApplication: true,
213:       supportsTracking: false
214:     }
215:   }
216: }
217: 
218: /**
219:  * Unified Job Board Service
220:  * Routes requests to appropriate method based on board type
221:  */
222: export class UnifiedJobBoardService {
223:   private perplexity: PerplexityService
224: 
225:   constructor() {
226:     this.perplexity = new PerplexityService()
227:   }
228: 
229:   /**
230:    * Discover jobs from a specific board
231:    * Uses appropriate method based on board configuration
232:    */
233:   async discoverJobs(boardName: string, query: {
234:     keywords: string
235:     location: string
236:     limit?: number
237:   }): Promise<any[]> {
238:     const config = JOB_BOARD_CONFIGS[boardName]
239:     
240:     if (!config) {
241:       throw new Error(`Unsupported job board: ${boardName}`)
242:     }
243: 
244:     if (!config.features.canDiscoverJobs) {
245:       throw new Error(`${config.displayName} does not support job discovery via our service`)
246:     }
247: 
248:     // Use Perplexity scraping for all boards
249:     if (config.accessMethod.scraping?.canScrapePerpeplexity) {
250:       return this.discoverViaPerplexity(config, query)
251:     }
252: 
253:     return []
254:   }
255: 
256:   /**
257:    * Discover jobs using Perplexity web scraping
258:    * This works for ALL job boards with public listings
259:    */
260:   private async discoverViaPerplexity(
261:     config: UnifiedJobBoardConfig, 
262:     query: { keywords: string; location: string; limit?: number }
263:   ): Promise<any[]> {
264:     const { keywords, location, limit = 20 } = query
265:     
266:     // Build Perplexity search query for this specific board
267:     const searchQuery = `site:${new URL(config.accessMethod.scraping!.baseUrl).hostname} "${keywords}" "${location}" after:2024-01-01`
268:     
269:     try {
270:       const results = await PerplexityIntelligenceService.jobQuickSearch(
271:         searchQuery,
272:         [new URL(config.accessMethod.scraping!.baseUrl).hostname],
273:         limit,
274:         'week'
275:       )
276:       
277:       return results.map((result: any) => ({
278:         ...result,
279:         source: config.name,
280:         sourceDisplayName: config.displayName,
281:         requiresFrontendApplication: config.features.requiresManualApplication
282:       }))
283:     } catch (error) {
284:       console.error(`[JOB_DISCOVERY] Failed to discover jobs from ${config.displayName}:`, error)
285:       return []
286:     }
287:   }
288: 
289:   /**
290:    * Get application method for a job
291:    * Returns instructions for how user should apply
292:    */
293:   getApplicationMethod(boardName: string): {
294:     method: 'browser-extension' | 'bookmarklet' | 'manual-guided' | 'api'
295:     instructions: string
296:     canAutomate: boolean
297:   } {
298:     const config = JOB_BOARD_CONFIGS[boardName]
299:     
300:     if (!config) {
301:       return {
302:         method: 'manual-guided',
303:         instructions: 'This job board is not yet supported. Please apply manually.',
304:         canAutomate: false
305:       }
306:     }
307: 
308:     if (config.type === 'frontend-only') {
309:       if (config.accessMethod.frontend?.browserExtensionRequired) {
310:         return {
311:           method: 'browser-extension',
312:           instructions: `Install the Career Lever browser extension to auto-fill applications on ${config.displayName}`,
313:           canAutomate: config.accessMethod.frontend.canAutoFill
314:         }
315:       }
316:       
317:       if (config.accessMethod.frontend?.bookmarkletSupported) {
318:         return {
319:           method: 'bookmarklet',
320:           instructions: `Use the Career Lever bookmarklet to assist with your ${config.displayName} application`,
321:           canAutomate: config.accessMethod.frontend.canAutoFill
322:         }
323:       }
324:     }
325: 
326:     return {
327:       method: 'manual-guided',
328:       instructions: `Follow our step-by-step guide to apply on ${config.displayName}`,
329:       canAutomate: false
330:     }
331:   }
332: 
333:   /**
334:    * Check if a board supports direct API integration
335:    * Most major boards DON'T - this is the reality check
336:    */
337:   supportsDirectAPI(boardName: string): boolean {
338:     const config = JOB_BOARD_CONFIGS[boardName]
339:     return config?.type === 'open-api' && 
340:            config?.accessMethod.api?.requiresAuth === false
341:   }
342: 
343:   /**
344:    * Get all boards that can be scraped via Perplexity
345:    */
346:   getScrapableBoards(): UnifiedJobBoardConfig[] {
347:     return Object.values(JOB_BOARD_CONFIGS).filter(
348:       config => config.accessMethod.scraping?.canScrapePerpeplexity
349:     )
350:   }
351: 
352:   /**
353:    * Get all boards that require frontend automation
354:    */
355:   getFrontendOnlyBoards(): UnifiedJobBoardConfig[] {
356:     return Object.values(JOB_BOARD_CONFIGS).filter(
357:       config => config.type === 'frontend-only'
358:     )
359:   }
360: }
</file>

<file path="src/lib/utils.ts">
  1: import { type ClassValue, clsx } from "clsx"
  2: import { twMerge } from "tailwind-merge"
  3: 
  4: export function cn(...inputs: ClassValue[]) {
  5:   return twMerge(clsx(inputs))
  6: }
  7: 
  8: export function formatDate(date: Date): string {
  9:   return new Intl.DateTimeFormat('en-US', {
 10:     year: 'numeric',
 11:     month: 'long',
 12:     day: 'numeric',
 13:   }).format(date);
 14: }
 15: 
 16: export function formatRelativeDate(date: Date): string {
 17:   const now = new Date();
 18:   const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
 19: 
 20:   if (diffInDays === 0) {
 21:     return 'Today';
 22:   } else if (diffInDays === 1) {
 23:     return 'Yesterday';
 24:   } else if (diffInDays < 7) {
 25:     return `${diffInDays} days ago`;
 26:   } else if (diffInDays < 30) {
 27:     const weeks = Math.floor(diffInDays / 7);
 28:     return `${weeks} week${weeks > 1 ? 's' : ''} ago`;
 29:   } else if (diffInDays < 365) {
 30:     const months = Math.floor(diffInDays / 30);
 31:     return `${months} month${months > 1 ? 's' : ''} ago`;
 32:   } else {
 33:     const years = Math.floor(diffInDays / 365);
 34:     return `${years} year${years > 1 ? 's' : ''} ago`;
 35:   }
 36: }
 37: 
 38: export function truncateText(text: string, maxLength: number): string {
 39:   if (text.length <= maxLength) {
 40:     return text;
 41:   }
 42:   return text.substring(0, maxLength) + '...';
 43: }
 44: 
 45: export function calculateMatchScore(resumeText: string, jobDescription: string): number {
 46:   // Simple keyword matching algorithm
 47:   // In a real implementation, this would use more sophisticated NLP techniques
 48: 
 49:   const resumeWords = resumeText.toLowerCase().split(/\s+/);
 50:   const jobWords = jobDescription.toLowerCase().split(/\s+/);
 51: 
 52:   // Extract potential keywords (nouns, technical terms, etc.)
 53:   const keywords = jobWords.filter(word =>
 54:     word.length > 3 && // Skip short words
 55:     !['and', 'the', 'for', 'are', 'but', 'not', 'you', 'all', 'can', 'had', 'her', 'was', 'one', 'our', 'out', 'day', 'get', 'has', 'him', 'his', 'how', 'its', 'may', 'new', 'now', 'old', 'see', 'two', 'way', 'who', 'boy', 'did', 'has', 'let', 'put', 'say', 'she', 'too', 'use'].includes(word)
 56:   );
 57: 
 58:   let matches = 0;
 59:   const uniqueKeywords = Array.from(new Set(keywords));
 60: 
 61:   uniqueKeywords.forEach(keyword => {
 62:     if (resumeWords.includes(keyword)) {
 63:       matches++;
 64:     }
 65:   });
 66: 
 67:   const score = uniqueKeywords.length > 0 ? (matches / uniqueKeywords.length) * 100 : 0;
 68:   return Math.round(Math.min(score, 100));
 69: }
 70: 
 71: export function extractKeywords(text: string): string[] {
 72:   // Simple keyword extraction
 73:   // In production, use NLP libraries like compromise or natural
 74:   const words = text.toLowerCase().split(/\s+/);
 75:   const stopWords = new Set([
 76:     'a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from',
 77:     'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on', 'that', 'the',
 78:     'to', 'was', 'will', 'with', 'would'
 79:   ]);
 80: 
 81:   return words
 82:     .filter(word => word.length > 2 && !stopWords.has(word))
 83:     .filter((word, index, arr) => arr.indexOf(word) === index) // Remove duplicates
 84:     .slice(0, 20); // Limit to top 20 keywords
 85: }
 86: 
 87: export function validateEmail(email: string): boolean {
 88:   const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
 89:   return emailRegex.test(email);
 90: }
 91: 
 92: export function generateSlug(text: string): string {
 93:   return text
 94:     .toLowerCase()
 95:     .replace(/[^\w\s-]/g, '') // Remove special characters
 96:     .replace(/[\s_-]+/g, '-') // Replace spaces and underscores with hyphens
 97:     .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
 98: }
 99: 
100: export function sleep(ms: number): Promise<void> {
101:   return new Promise(resolve => setTimeout(resolve, ms));
102: }
103: 
104: export function isValidUrl(string: string): boolean {
105:   try {
106:     new URL(string);
107:     return true;
108:   } catch (_) {
109:     return false;
110:   }
111: }
112: 
113: export function capitalizeFirst(str: string): string {
114:   return str.charAt(0).toUpperCase() + str.slice(1);
115: }
116: 
117: export function formatFileSize(bytes: number): string {
118:   if (bytes === 0) return '0 Bytes';
119: 
120:   const k = 1024;
121:   const sizes = ['Bytes', 'KB', 'MB', 'GB'];
122:   const i = Math.floor(Math.log(bytes) / Math.log(k));
123: 
124:   return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
125: }
</file>

<file path="src/lib/utils/ai-response-parser.ts">
  1: /**
  2:  * AI Response Parser
  3:  * 
  4:  * Unified JSON extraction and parsing for AI responses.
  5:  * Handles multiple formats, markdown wrappers, and malformed JSON.
  6:  */
  7: 
  8: import { PerplexityJSONError, PerplexityErrorContext } from '../errors/perplexity-error'
  9: 
 10: export interface ParseOptions {
 11:   allowPartial?: boolean
 12:   stripMarkdown?: boolean
 13:   extractFirst?: boolean
 14:   throwOnError?: boolean
 15: }
 16: 
 17: export interface ParseResult<T> {
 18:   success: boolean
 19:   data?: T
 20:   error?: string
 21:   attempts: string[]
 22:   strategy?: string
 23: }
 24: 
 25: /**
 26:  * AI Response Parser Class
 27:  */
 28: export class AIResponseParser {
 29:   /**
 30:    * Main parsing method with multiple fallback strategies
 31:    */
 32:   static parse<T = any>(
 33:     text: string,
 34:     options: ParseOptions = {},
 35:     context?: PerplexityErrorContext
 36:   ): T {
 37:     const {
 38:       allowPartial = false,
 39:       stripMarkdown = true,
 40:       extractFirst = true,
 41:       throwOnError = true
 42:     } = options
 43: 
 44:     const attempts: string[] = []
 45:     let cleaned = text
 46: 
 47:     // Strategy 1: Direct JSON.parse
 48:     try {
 49:       const result = JSON.parse(text)
 50:       attempts.push('direct_parse')
 51:       return result as T
 52:     } catch (e) {
 53:       attempts.push('direct_parse_failed')
 54:     }
 55: 
 56:     // Strategy 2: Strip markdown code fences
 57:     if (stripMarkdown) {
 58:       cleaned = this.cleanMarkdown(text)
 59:       try {
 60:         const result = JSON.parse(cleaned)
 61:         attempts.push('markdown_strip_success')
 62:         return result as T
 63:       } catch (e) {
 64:         attempts.push('markdown_strip_failed')
 65:       }
 66:     }
 67: 
 68:     // Strategy 3: Extract first JSON object/array
 69:     if (extractFirst) {
 70:       const extracted = this.extractJSON(cleaned)
 71:       if (extracted) {
 72:         try {
 73:           const result = JSON.parse(extracted)
 74:           attempts.push('regex_extract_success')
 75:           return result as T
 76:         } catch (e) {
 77:           attempts.push('regex_extract_failed')
 78:         }
 79:       }
 80:     }
 81: 
 82:     // Strategy 4: Extract code blocks
 83:     const codeBlocks = this.extractCodeBlocks(text)
 84:     for (let i = 0; i < codeBlocks.length; i++) {
 85:       try {
 86:         const result = JSON.parse(codeBlocks[i])
 87:         attempts.push(`code_block_${i}_success`)
 88:         return result as T
 89:       } catch (e) {
 90:         attempts.push(`code_block_${i}_failed`)
 91:       }
 92:     }
 93: 
 94:     // Strategy 5: Line-by-line parsing for partial JSON
 95:     if (allowPartial) {
 96:       const partial = this.parsePartialJSON(cleaned)
 97:       if (partial) {
 98:         attempts.push('partial_parse_success')
 99:         return partial as T
100:       }
101:       attempts.push('partial_parse_failed')
102:     }
103: 
104:     // Strategy 6: Aggressive cleanup and retry
105:     const aggressive = this.aggressiveCleanup(text)
106:     if (aggressive !== text) {
107:       try {
108:         const result = JSON.parse(aggressive)
109:         attempts.push('aggressive_cleanup_success')
110:         return result as T
111:       } catch (e) {
112:         attempts.push('aggressive_cleanup_failed')
113:       }
114:     }
115: 
116:     // All strategies failed
117:     if (throwOnError && context) {
118:       throw new PerplexityJSONError(
119:         'Failed to parse AI response JSON after trying all strategies',
120:         context,
121:         text,
122:         attempts
123:       )
124:     }
125: 
126:     if (throwOnError) {
127:       throw new Error(`JSON parsing failed after ${attempts.length} attempts: ${attempts.join(', ')}`)
128:     }
129: 
130:     throw new Error('Unable to parse JSON from AI response')
131:   }
132: 
133:   /**
134:    * Safe parse that returns a result object instead of throwing
135:    */
136:   static safeParse<T = any>(
137:     text: string,
138:     options: ParseOptions = {}
139:   ): ParseResult<T> {
140:     try {
141:       const data = this.parse<T>(text, { ...options, throwOnError: false })
142:       return {
143:         success: true,
144:         data,
145:         attempts: ['successful']
146:       }
147:     } catch (error: any) {
148:       return {
149:         success: false,
150:         error: error.message,
151:         attempts: error.parseAttempts || ['unknown']
152:       }
153:     }
154:   }
155: 
156:   /**
157:    * Clean markdown code fences and formatting
158:    */
159:   static cleanMarkdown(text: string): string {
160:     return text
161:       // Remove markdown code fences
162:       .replace(/^```(?:json|javascript|typescript)?\s*/gm, '')
163:       .replace(/^```\s*$/gm, '')
164:       // Remove backticks
165:       .replace(/`/g, '')
166:       // Trim whitespace
167:       .trim()
168:   }
169: 
170:   /**
171:    * Extract first JSON object or array using regex
172:    */
173:   static extractJSON(text: string): string | null {
174:     // Try to find JSON object
175:     const objectMatch = text.match(/\{[\s\S]*\}/)
176:     if (objectMatch) {
177:       return objectMatch[0]
178:     }
179: 
180:     // Try to find JSON array
181:     const arrayMatch = text.match(/\[[\s\S]*\]/)
182:     if (arrayMatch) {
183:       return arrayMatch[0]
184:     }
185: 
186:     return null
187:   }
188: 
189:   /**
190:    * Extract code blocks from markdown
191:    */
192:   static extractCodeBlocks(text: string): string[] {
193:     const codeBlockRegex = /```(?:json|javascript|typescript)?\s*([\s\S]*?)```/g
194:     const blocks: string[] = []
195:     let match
196: 
197:     while ((match = codeBlockRegex.exec(text)) !== null) {
198:       blocks.push(match[1].trim())
199:     }
200: 
201:     return blocks
202:   }
203: 
204:   /**
205:    * Attempt to parse partial/incomplete JSON
206:    */
207:   static parsePartialJSON(text: string): any | null {
208:     try {
209:       // Try to find the last complete object/array
210:       let depth = 0
211:       let start = -1
212:       let lastComplete = -1
213: 
214:       for (let i = 0; i < text.length; i++) {
215:         const char = text[i]
216:         
217:         if (char === '{' || char === '[') {
218:           if (depth === 0) start = i
219:           depth++
220:         } else if (char === '}' || char === ']') {
221:           depth--
222:           if (depth === 0 && start !== -1) {
223:             lastComplete = i
224:             const substring = text.substring(start, i + 1)
225:             try {
226:               return JSON.parse(substring)
227:             } catch (e) {
228:               // Continue looking
229:             }
230:           }
231:         }
232:       }
233:     } catch (e) {
234:       return null
235:     }
236: 
237:     return null
238:   }
239: 
240:   /**
241:    * Aggressive cleanup for malformed JSON
242:    */
243:   static aggressiveCleanup(text: string): string {
244:     return text
245:       // Remove non-JSON content before first { or [
246:       .replace(/^[^{\[]*/, '')
247:       // Remove non-JSON content after last } or ]
248:       .replace(/[^}\]]*$/, '')
249:       // Fix common formatting issues
250:       .replace(/,\s*([}\]])/g, '$1') // Remove trailing commas
251:       .replace(/([{,])\s*([a-zA-Z_][a-zA-Z0-9_]*)\s*:/g, '$1"$2":') // Quote unquoted keys
252:       .replace(/:\s*'([^']*)'/g, ':"$1"') // Convert single quotes to double
253:       .replace(/\\'/g, "'") // Unescape single quotes
254:       // Remove control characters
255:       .replace(/[\x00-\x1F\x7F]/g, '')
256:       .trim()
257:   }
258: 
259:   /**
260:    * Validate if text contains parseable JSON
261:    */
262:   static hasJSON(text: string): boolean {
263:     return /[{\[][\s\S]*[}\]]/.test(text)
264:   }
265: 
266:   /**
267:    * Extract multiple JSON objects/arrays from text
268:    */
269:   static extractMultiple(text: string): any[] {
270:     const results: any[] = []
271:     
272:     // Try to extract all objects
273:     const objectRegex = /\{[^{}]*\}/g
274:     let match
275:     while ((match = objectRegex.exec(text)) !== null) {
276:       try {
277:         results.push(JSON.parse(match[0]))
278:       } catch (e) {
279:         // Skip invalid JSON
280:       }
281:     }
282: 
283:     // Try to extract all arrays
284:     const arrayRegex = /\[[^\[\]]*\]/g
285:     while ((match = arrayRegex.exec(text)) !== null) {
286:       try {
287:         results.push(JSON.parse(match[0]))
288:       } catch (e) {
289:         // Skip invalid JSON
290:       }
291:     }
292: 
293:     return results
294:   }
295: 
296:   /**
297:    * Pretty print JSON for debugging
298:    */
299:   static prettyPrint(obj: any, indent: number = 2): string {
300:     try {
301:       return JSON.stringify(obj, null, indent)
302:     } catch (e) {
303:       return String(obj)
304:     }
305:   }
306: 
307:   /**
308:    * Estimate JSON completeness (0-1 score)
309:    */
310:   static estimateCompleteness(text: string): number {
311:     const openBraces = (text.match(/\{/g) || []).length
312:     const closeBraces = (text.match(/\}/g) || []).length
313:     const openBrackets = (text.match(/\[/g) || []).length
314:     const closeBrackets = (text.match(/\]/g) || []).length
315: 
316:     const braceMatch = openBraces === 0 ? 1 : Math.min(closeBraces / openBraces, 1)
317:     const bracketMatch = openBrackets === 0 ? 1 : Math.min(closeBrackets / openBrackets, 1)
318: 
319:     return (braceMatch + bracketMatch) / 2
320:   }
321: }
322: 
323: /**
324:  * Convenience function for quick parsing
325:  */
326: export function parseAIResponse<T = any>(
327:   text: string,
328:   options?: ParseOptions,
329:   context?: PerplexityErrorContext
330: ): T {
331:   return AIResponseParser.parse<T>(text, options, context)
332: }
333: 
334: /**
335:  * Safe parse convenience function
336:  */
337: export function safeParseAIResponse<T = any>(
338:   text: string,
339:   options?: ParseOptions
340: ): ParseResult<T> {
341:   return AIResponseParser.safeParse<T>(text, options)
342: }
</file>

<file path="src/lib/utils/api-handler.ts">
  1: /**
  2:  * Shared API Handler Utility
  3:  * Provides consistent error handling, validation, and response formatting
  4:  */
  5: 
  6: import { NextRequest, NextResponse } from 'next/server'
  7: import { getServerSession } from 'next-auth'
  8: import { authOptions } from '@/lib/auth'
  9: import { z, ZodSchema } from 'zod'
 10: 
 11: export interface ApiHandlerOptions<T> {
 12:   requireAuth?: boolean
 13:   validateSchema?: ZodSchema<T>
 14:   handler: (req: NextRequest, body: T, userId?: string) => Promise<any>
 15: }
 16: 
 17: export interface ApiResponse<T = any> {
 18:   success: boolean
 19:   data?: T
 20:   error?: string
 21:   message?: string
 22: }
 23: 
 24: /**
 25:  * Unified API handler with built-in auth, validation, and error handling
 26:  */
 27: export async function apiHandler<T = any>(
 28:   request: NextRequest,
 29:   options: ApiHandlerOptions<T>
 30: ): Promise<NextResponse> {
 31:   const startTime = Date.now()
 32:   const requestId = crypto.randomUUID()
 33: 
 34:   try {
 35:     // 1. Authentication check
 36:     let userId: string | undefined
 37:     if (options.requireAuth !== false) {
 38:       const session = await getServerSession(authOptions)
 39:       if (!session?.user?.id) {
 40:         return NextResponse.json(
 41:           { success: false, error: 'Unauthorized' },
 42:           { 
 43:             status: 401,
 44:             headers: { 'x-request-id': requestId }
 45:           }
 46:         )
 47:       }
 48:       userId = session.user.id
 49:     }
 50: 
 51:     // 2. Parse request body
 52:     let body: T
 53:     try {
 54:       const rawBody = await request.json()
 55:       body = rawBody as T
 56:     } catch (error) {
 57:       return NextResponse.json(
 58:         { success: false, error: 'Invalid JSON in request body' },
 59:         { 
 60:           status: 400,
 61:           headers: { 'x-request-id': requestId }
 62:         }
 63:       )
 64:     }
 65: 
 66:     // 3. Validate with Zod schema if provided
 67:     if (options.validateSchema) {
 68:       try {
 69:         body = options.validateSchema.parse(body)
 70:       } catch (error) {
 71:         if (error instanceof z.ZodError) {
 72:           return NextResponse.json(
 73:             {
 74:               success: false,
 75:               error: 'Validation failed',
 76:               details: error.errors.map(e => ({
 77:                 path: e.path.join('.'),
 78:                 message: e.message
 79:               }))
 80:             },
 81:             { 
 82:               status: 400,
 83:               headers: { 'x-request-id': requestId }
 84:             }
 85:           )
 86:         }
 87:         throw error
 88:       }
 89:     }
 90: 
 91:     // 4. Execute handler
 92:     const result = await options.handler(request, body, userId)
 93: 
 94:     // 5. Format successful response
 95:     const duration = Date.now() - startTime
 96:     console.log(`[API] ${request.method} ${request.url} - ${duration}ms - ${requestId}`)
 97: 
 98:     return NextResponse.json(
 99:       {
100:         success: true,
101:         data: result
102:       },
103:       {
104:         headers: {
105:           'x-request-id': requestId,
106:           'x-response-time': `${duration}ms`
107:         }
108:       }
109:     )
110: 
111:   } catch (error) {
112:     // 6. Handle errors
113:     const duration = Date.now() - startTime
114:     console.error(`[API] Error ${request.method} ${request.url} - ${duration}ms - ${requestId}:`, error)
115: 
116:     const errorMessage = error instanceof Error ? error.message : 'Internal server error'
117:     const statusCode = getErrorStatusCode(error)
118: 
119:     return NextResponse.json(
120:       {
121:         success: false,
122:         error: errorMessage
123:       },
124:       {
125:         status: statusCode,
126:         headers: {
127:           'x-request-id': requestId,
128:           'x-response-time': `${duration}ms`
129:         }
130:       }
131:     )
132:   }
133: }
134: 
135: /**
136:  * Determine HTTP status code from error type
137:  */
138: function getErrorStatusCode(error: unknown): number {
139:   if (error instanceof Error) {
140:     const message = error.message.toLowerCase()
141:     
142:     if (message.includes('unauthorized') || message.includes('authentication')) {
143:       return 401
144:     }
145:     if (message.includes('forbidden') || message.includes('permission')) {
146:       return 403
147:     }
148:     if (message.includes('not found')) {
149:       return 404
150:     }
151:     if (message.includes('validation') || message.includes('invalid')) {
152:       return 400
153:     }
154:     if (message.includes('rate limit')) {
155:       return 429
156:     }
157:   }
158:   
159:   return 500
160: }
161: 
162: /**
163:  * Simple API handler for GET requests (no body validation needed)
164:  */
165: export async function apiHandlerGet(
166:   request: NextRequest,
167:   handler: (req: NextRequest, userId?: string) => Promise<any>,
168:   requireAuth: boolean = true
169: ): Promise<NextResponse> {
170:   const startTime = Date.now()
171:   const requestId = crypto.randomUUID()
172: 
173:   try {
174:     // Authentication check
175:     let userId: string | undefined
176:     if (requireAuth) {
177:       const session = await getServerSession(authOptions)
178:       if (!session?.user?.id) {
179:         return NextResponse.json(
180:           { success: false, error: 'Unauthorized' },
181:           { 
182:             status: 401,
183:             headers: { 'x-request-id': requestId }
184:           }
185:         )
186:       }
187:       userId = session.user.id
188:     }
189: 
190:     // Execute handler
191:     const result = await handler(request, userId)
192: 
193:     // Format response
194:     const duration = Date.now() - startTime
195:     console.log(`[API] GET ${request.url} - ${duration}ms - ${requestId}`)
196: 
197:     return NextResponse.json(
198:       {
199:         success: true,
200:         data: result
201:       },
202:       {
203:         headers: {
204:           'x-request-id': requestId,
205:           'x-response-time': `${duration}ms`
206:         }
207:       }
208:     )
209: 
210:   } catch (error) {
211:     const duration = Date.now() - startTime
212:     console.error(`[API] Error GET ${request.url} - ${duration}ms - ${requestId}:`, error)
213: 
214:     const errorMessage = error instanceof Error ? error.message : 'Internal server error'
215:     const statusCode = getErrorStatusCode(error)
216: 
217:     return NextResponse.json(
218:       {
219:         success: false,
220:         error: errorMessage
221:       },
222:       {
223:         status: statusCode,
224:         headers: {
225:           'x-request-id': requestId,
226:           'x-response-time': `${duration}ms`
227:         }
228:       }
229:     )
230:   }
231: }
</file>

<file path="src/lib/utils/enterprise-json-extractor.ts">
  1: /**
  2:  * ENTERPRISE JSON EXTRACTOR
  3:  * 
  4:  * 5-stage fallback pipeline for extracting JSON from AI responses
  5:  * Handles markdown, malformed JSON, partial responses, and edge cases
  6:  * 
  7:  * Used by: Perplexity AI responses, external APIs, any JSON parsing
  8:  */
  9: 
 10: export interface ExtractionResult<T = any> {
 11:   success: boolean
 12:   data: T | null
 13:   error?: string
 14:   attemptedCleanups: string[]
 15:   rawContent?: string
 16: }
 17: 
 18: /**
 19:  * Main extraction function with 5-stage fallback pipeline
 20:  * WITH ENHANCED DEBUG LOGGING (Perplexity recommendation)
 21:  */
 22: export function extractEnterpriseJSON<T = any>(content: string, debug = false): ExtractionResult<T> {
 23:   const attemptedCleanups: string[] = []
 24:   let workingContent = content.trim()
 25:   
 26:   // DEBUG: Log before cleanup
 27:   if (debug || process.env.PERPLEXITY_DEBUG === 'true') {
 28:     console.log('[EXTRACT_JSON] Before cleanup:', content.slice(0, 200))
 29:   }
 30:   
 31:   if (!workingContent) {
 32:     return {
 33:       success: false,
 34:       data: null,
 35:       error: 'Empty content provided',
 36:       attemptedCleanups: ['empty-check'],
 37:       rawContent: content
 38:     }
 39:   }
 40: 
 41:   // STAGE 1: Remove markdown code blocks
 42:   if (workingContent.includes('```')) {
 43:     workingContent = workingContent
 44:       .replace(/```(?:json|javascript|js)?\s*/gi, '')
 45:       .replace(/```\s*/g, '')
 46:     attemptedCleanups.push('markdown-removal')
 47:     
 48:     // DEBUG: Log after markdown removal
 49:     if (debug) {
 50:       console.log('[EXTRACT_JSON] After markdown removal:', workingContent.slice(0, 200))
 51:     }
 52:   }
 53: 
 54:   // STAGE 2: Extract JSON array or object
 55:   const arrayMatch = workingContent.match(/(\[[\s\S]*\])/);
 56:   const objectMatch = workingContent.match(/(\{[\s\S]*\})/);
 57:   
 58:   if (arrayMatch) {
 59:     workingContent = arrayMatch[1]
 60:     attemptedCleanups.push('array-extraction')
 61:     
 62:     // DEBUG: Log matched JSON
 63:     if (debug) {
 64:       console.log('[EXTRACT_JSON] Matched JSON array:', workingContent.slice(0, 200))
 65:     }
 66:   } else if (objectMatch) {
 67:     workingContent = objectMatch[1]
 68:     attemptedCleanups.push('object-extraction')
 69:     
 70:     // DEBUG: Log matched JSON
 71:     if (debug) {
 72:       console.log('[EXTRACT_JSON] Matched JSON object:', workingContent.slice(0, 200))
 73:     }
 74:   }
 75: 
 76:   // STAGE 3: Fix common JSON issues
 77:   workingContent = cleanupJSON(workingContent)
 78:   attemptedCleanups.push('json-cleanup')
 79:   
 80:   // DEBUG: Log after regex fixes
 81:   if (debug) {
 82:     console.log('[EXTRACT_JSON] After regex fixes:', workingContent.slice(0, 200))
 83:   }
 84: 
 85:   // STAGE 4: Attempt JSON parsing
 86:   try {
 87:     const parsed = JSON.parse(workingContent)
 88:     return {
 89:       success: true,
 90:       data: parsed,
 91:       attemptedCleanups
 92:     }
 93:   } catch (parseError) {
 94:     attemptedCleanups.push('initial-parse-failed')
 95:     
 96:     // DEBUG: Capture parse error details with context
 97:     if (parseError instanceof Error) {
 98:       const posMatch = /position\s+(\d+)/.exec(parseError.message)
 99:       const pos = posMatch ? parseInt(posMatch[1]) : 0
100:       const context = workingContent.substring(Math.max(0, pos - 20), Math.min(workingContent.length, pos + 100))
101:       
102:       console.error('[JSON PARSE ERROR]', parseError.message, 'context:', JSON.stringify(context))
103:     }
104:     
105:     // STAGE 5: Aggressive partial extraction
106:     const partialResult = extractPartialJSON<T>(workingContent, attemptedCleanups)
107:     if (partialResult.success) {
108:       return partialResult
109:     }
110:     
111:     return {
112:       success: false,
113:       data: null,
114:       error: `JSON parsing failed: ${parseError instanceof Error ? parseError.message : 'Unknown error'}`,
115:       attemptedCleanups: [...attemptedCleanups, 'all-attempts-failed'],
116:       rawContent: content.slice(0, 500) // First 500 chars for debugging
117:     }
118:   }
119: }
120: 
121: /**
122:  * Clean up common JSON formatting issues
123:  */
124: function cleanupJSON(content: string): string {
125:   return content
126:     // Remove BOM and special characters
127:     .replace(/^\uFEFF/, '')
128:     .replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
129:     
130:     // Fix trailing commas
131:     .replace(/,(\s*[\]}])/g, '$1')
132:     
133:     // Fix unescaped quotes in strings (basic)
134:     .replace(/"([^"]*)"([^",\]}]*)"([^"]*)":/g, '"$1\\"$2\\"$3":')
135:     
136:     // Fix missing quotes around object keys
137:     .replace(/([{,]\s*)([a-zA-Z_$][a-zA-Z0-9_$]*)\s*:/g, '$1"$2":')
138:     
139:     // Fix single quotes to double quotes
140:     .replace(/'([^']*)':/g, '"$1":')
141:     
142:     // Remove comments (// and /* */)
143:     .replace(/\/\/.*$/gm, '')
144:     .replace(/\/\*[\s\S]*?\*\//g, '')
145:     
146:     // Fix NaN, Infinity, undefined
147:     .replace(/:\s*NaN/g, ': null')
148:     .replace(/:\s*Infinity/g, ': null')
149:     .replace(/:\s*undefined/g, ': null')
150: }
151: 
152: /**
153:  * Extract partial JSON by walking through character by character
154:  */
155: function extractPartialJSON<T>(content: string, attemptedCleanups: string[]): ExtractionResult<T> {
156:   try {
157:     let braceCount = 0
158:     let bracketCount = 0
159:     let validJson = ''
160:     let inString = false
161:     let escaped = false
162:     let startChar = ''
163: 
164:     for (let i = 0; i < content.length; i++) {
165:       const char = content[i]
166:       
167:       // Handle escape sequences
168:       if (escaped) {
169:         escaped = false
170:         validJson += char
171:         continue
172:       }
173:       
174:       if (char === '\\' && inString) {
175:         escaped = true
176:         validJson += char
177:         continue
178:       }
179:       
180:       // Handle string boundaries
181:       if (char === '"' && !escaped) {
182:         inString = !inString
183:         validJson += char
184:         continue
185:       }
186:       
187:       // Only count braces/brackets outside of strings
188:       if (!inString) {
189:         if (char === '{') {
190:           if (!startChar) startChar = '{'
191:           braceCount++
192:         } else if (char === '}') {
193:           braceCount--
194:         } else if (char === '[') {
195:           if (!startChar) startChar = '['
196:           bracketCount++
197:         } else if (char === ']') {
198:           bracketCount--
199:         }
200:       }
201:       
202:       validJson += char
203:       
204:       // Check if we've closed all braces/brackets
205:       const isComplete = braceCount === 0 && bracketCount === 0 && validJson.trim().length > 0
206:       const hasValidStart = startChar === '{' || startChar === '['
207:       
208:       if (isComplete && hasValidStart) {
209:         try {
210:           const parsed = JSON.parse(validJson.trim())
211:           return {
212:             success: true,
213:             data: parsed,
214:             attemptedCleanups: [...attemptedCleanups, 'partial-extraction-success']
215:           }
216:         } catch {
217:           // Continue building if this chunk didn't parse
218:           continue
219:         }
220:       }
221:     }
222:     
223:     throw new Error('No valid complete JSON found')
224:   } catch (error) {
225:     return {
226:       success: false,
227:       data: null,
228:       error: error instanceof Error ? error.message : 'Partial extraction failed',
229:       attemptedCleanups: [...attemptedCleanups, 'partial-extraction-failed']
230:     }
231:   }
232: }
233: 
234: /**
235:  * Validate that extracted data is an array
236:  */
237: export function ensureArray<T>(data: any): T[] {
238:   if (Array.isArray(data)) {
239:     return data
240:   }
241:   if (data && typeof data === 'object') {
242:     // Check if it's an object with array-like properties
243:     const keys = Object.keys(data)
244:     if (keys.length > 0 && keys.every(k => /^\d+$/.test(k))) {
245:       return Object.values(data)
246:     }
247:     // Single object - wrap in array
248:     return [data]
249:   }
250:   return []
251: }
252: 
253: /**
254:  * Validate that extracted data is an object
255:  */
256: export function ensureObject<T extends object>(data: any): T | null {
257:   if (data && typeof data === 'object' && !Array.isArray(data)) {
258:     return data
259:   }
260:   if (Array.isArray(data) && data.length > 0) {
261:     return data[0]
262:   }
263:   return null
264: }
265: 
266: /**
267:  * Extract JSON with type safety and fallback
268:  */
269: export function extractWithFallback<T>(
270:   content: string,
271:   fallback: T,
272:   validator?: (data: any) => data is T
273: ): T {
274:   const result = extractEnterpriseJSON<T>(content)
275:   
276:   if (!result.success || !result.data) {
277:     console.warn('[ENTERPRISE_JSON] Extraction failed, using fallback:', result.error)
278:     return fallback
279:   }
280:   
281:   if (validator && !validator(result.data)) {
282:     console.warn('[ENTERPRISE_JSON] Validation failed, using fallback')
283:     return fallback
284:   }
285:   
286:   return result.data
287: }
</file>

<file path="src/lib/utils/pdf-cleaner.ts">
 1: /**
 2:  * Remove PDF metadata artifacts from extracted text
 3:  * Prevents "Producer", "Creator", "obj/endobj" from contaminating keyword extraction
 4:  * 
 5:  * @param text - Raw text extracted from PDF
 6:  * @returns Cleaned text without PDF artifacts
 7:  */
 8: export function cleanPDFExtraction(text: string): string {
 9:   let cleaned = text
10:   
11:   // Remove PDF metadata patterns
12:   const patterns = [
13:     /Producer\s*\([^)]+\)/gi,
14:     /Creator\s*\([^)]+\)/gi,
15:     /ModDate\s*\([^)]+\)/gi,
16:     /CreationDate\s*\([^)]+\)/gi,
17:     /\/(Type|Length|Filter|Subtype|Contents|Resources|MediaBox)/gi,
18:     /\d+\s+\d+\s+obj/gi,
19:     /endobj|xref|trailer|startxref/gi,
20:     /stream\s+endstream/gi
21:   ]
22:   
23:   patterns.forEach(pattern => {
24:     cleaned = cleaned.replace(pattern, '')
25:   })
26:   
27:   // Remove control characters
28:   cleaned = cleaned.replace(/[\x00-\x1F\x7F-\x9F]/g, ' ')
29:   
30:   // Collapse whitespace
31:   cleaned = cleaned.replace(/\s+/g, ' ').trim()
32:   
33:   return cleaned
34: }
35: 
36: // Default export for convenience
37: export default cleanPDFExtraction
</file>

<file path="src/lib/utils/perplexity-logger.ts">
 1: /**
 2:  * Perplexity Debug Logger
 3:  * Captures raw LLM responses, cleanup steps, and parse errors for debugging
 4:  */
 5: 
 6: export interface PerplexityLogEntry {
 7:   timestamp: number
 8:   requestId: string
 9:   method: string
10:   rawContent: string
11:   cleanupSteps: string[]
12:   finalJson?: string
13:   parseError?: string
14:   parseErrorContext?: string
15:   success: boolean
16: }
17: 
18: class PerplexityLogger {
19:   private logs: PerplexityLogEntry[] = []
20:   private maxLogs = 100
21: 
22:   log(entry: Omit<PerplexityLogEntry, 'timestamp'>): void {
23:     const fullEntry: PerplexityLogEntry = {
24:       ...entry,
25:       timestamp: Date.now()
26:     }
27:     
28:     this.logs.unshift(fullEntry)
29:     if (this.logs.length > this.maxLogs) {
30:       this.logs.pop()
31:     }
32: 
33:     // Console logging for development
34:     if (process.env.NODE_ENV === 'development' || process.env.PERPLEXITY_DEBUG === 'true') {
35:       console.log('[PERPLEXITY_RAW]', {
36:         method: entry.method,
37:         requestId: entry.requestId,
38:         contentPreview: entry.rawContent.slice(0, 200),
39:         success: entry.success
40:       })
41:       
42:       if (entry.cleanupSteps.length > 0) {
43:         console.log('[PERPLEXITY_CLEANUP]', entry.cleanupSteps)
44:       }
45:       
46:       if (entry.parseError) {
47:         console.error('[PERPLEXITY_PARSE_ERROR]', {
48:           error: entry.parseError,
49:           context: entry.parseErrorContext
50:         })
51:       }
52:     }
53:   }
54: 
55:   getLogs(limit: number = 20): PerplexityLogEntry[] {
56:     return this.logs.slice(0, limit)
57:   }
58: 
59:   getFailedLogs(): PerplexityLogEntry[] {
60:     return this.logs.filter(log => !log.success)
61:   }
62: 
63:   clear(): void {
64:     this.logs = []
65:   }
66: }
67: 
68: export const perplexityLogger = new PerplexityLogger()
69: 
70: /**
71:  * Extract detailed error context from JSON parse failure
72:  */
73: export function getParseErrorContext(content: string, error: Error): string {
74:   const posMatch = /position\s+(\d+)/.exec(error.message)
75:   if (!posMatch) return 'Unknown position'
76:   
77:   const pos = parseInt(posMatch[1])
78:   const start = Math.max(0, pos - 50)
79:   const end = Math.min(content.length, pos + 50)
80:   const context = content.substring(start, end)
81:   
82:   return JSON.stringify({
83:     position: pos,
84:     context: context,
85:     before: content.substring(start, pos),
86:     after: content.substring(pos, end)
87:   })
88: }
</file>

<file path="src/lib/utils/retry-utility.ts">
  1: /**
  2:  * STANDARDIZED RETRY LOGIC - ENTERPRISE GRADE
  3:  * 
  4:  * Consolidated from multiple implementations across the codebase.
  5:  * Based on architecture consolidation plan - Decision 4.
  6:  * 
  7:  * Features:
  8:  * - Exponential backoff with jitter
  9:  * - Configurable max attempts
 10:  * - Type-safe generic implementation
 11:  * - Detailed logging for debugging
 12:  * - Special handling for rate limits
 13:  */
 14: 
 15: export interface RetryConfig {
 16:   maxAttempts?: number
 17:   baseDelay?: number
 18:   maxDelay?: number
 19:   onRetry?: (attempt: number, error: Error) => void
 20: }
 21: 
 22: const DEFAULT_CONFIG: Required<RetryConfig> = {
 23:   maxAttempts: 3,
 24:   baseDelay: 1000, // 1 second
 25:   maxDelay: 10000, // 10 seconds
 26:   onRetry: () => {}
 27: }
 28: 
 29: /**
 30:  * Execute an operation with exponential backoff retry logic
 31:  * 
 32:  * @param operation - Async function to retry
 33:  * @param config - Retry configuration
 34:  * @returns Result of the operation
 35:  * @throws Last error if all attempts fail
 36:  * 
 37:  * @example
 38:  * const result = await withRetry(
 39:  *   () => fetchData(),
 40:  *   { maxAttempts: 5, baseDelay: 500 }
 41:  * )
 42:  */
 43: export async function withRetry<T>(
 44:   operation: () => Promise<T>,
 45:   config: RetryConfig = {}
 46: ): Promise<T> {
 47:   const cfg = { ...DEFAULT_CONFIG, ...config }
 48:   let lastError: Error | unknown
 49: 
 50:   for (let attempt = 1; attempt <= cfg.maxAttempts; attempt++) {
 51:     try {
 52:       const result = await operation()
 53:       
 54:       if (attempt > 1) {
 55:         console.log(`[RETRY] Operation succeeded on attempt ${attempt}/${cfg.maxAttempts}`)
 56:       }
 57:       
 58:       return result
 59:     } catch (error) {
 60:       lastError = error
 61:       
 62:       // Don't retry on last attempt
 63:       if (attempt === cfg.maxAttempts) {
 64:         console.error(`[RETRY] All ${cfg.maxAttempts} attempts failed`)
 65:         break
 66:       }
 67:       
 68:       // Calculate exponential backoff: 1s, 2s, 4s, 8s (capped)
 69:       const delay = Math.min(
 70:         cfg.baseDelay * Math.pow(2, attempt - 1),
 71:         cfg.maxDelay
 72:       )
 73:       
 74:       // Add jitter to prevent thundering herd (±25%)
 75:       const jitter = delay * (0.75 + Math.random() * 0.5)
 76:       
 77:       console.warn(
 78:         `[RETRY] Attempt ${attempt}/${cfg.maxAttempts} failed, retrying in ${Math.round(jitter)}ms`,
 79:         error instanceof Error ? error.message : error
 80:       )
 81:       
 82:       cfg.onRetry(attempt, error instanceof Error ? error : new Error(String(error)))
 83:       
 84:       await new Promise(resolve => setTimeout(resolve, jitter))
 85:     }
 86:   }
 87: 
 88:   throw lastError instanceof Error 
 89:     ? lastError 
 90:     : new Error('Operation failed after all retry attempts')
 91: }
 92: 
 93: /**
 94:  * Perplexity-specific retry with optimized settings
 95:  * 
 96:  * @param operation - Async function to retry
 97:  * @param operationName - Name for logging
 98:  * @returns Result of the operation
 99:  */
100: export async function withPerplexityRetry<T>(
101:   operation: () => Promise<T>,
102:   operationName: string = 'perplexity-operation'
103: ): Promise<T> {
104:   return withRetry(operation, {
105:     maxAttempts: 3,
106:     baseDelay: 1000,
107:     maxDelay: 8000,
108:     onRetry: (attempt, error) => {
109:       console.log(`[PERPLEXITY_RETRY] ${operationName} - attempt ${attempt} failed:`, error.message)
110:     }
111:   })
112: }
113: 
114: /**
115:  * Retry with custom error handling
116:  * 
117:  * @param operation - Async function to retry
118:  * @param shouldRetry - Function to determine if error is retryable
119:  * @param config - Retry configuration
120:  * @returns Result of the operation
121:  */
122: export async function withConditionalRetry<T>(
123:   operation: () => Promise<T>,
124:   shouldRetry: (error: Error) => boolean,
125:   config: RetryConfig = {}
126: ): Promise<T> {
127:   const cfg = { ...DEFAULT_CONFIG, ...config }
128:   let lastError: Error | unknown
129: 
130:   for (let attempt = 1; attempt <= cfg.maxAttempts; attempt++) {
131:     try {
132:       return await operation()
133:     } catch (error) {
134:       lastError = error
135:       
136:       const err = error instanceof Error ? error : new Error(String(error))
137:       
138:       // Check if we should retry this error
139:       if (!shouldRetry(err)) {
140:         console.log('[RETRY] Error is not retryable, failing immediately')
141:         throw err
142:       }
143:       
144:       if (attempt === cfg.maxAttempts) {
145:         break
146:       }
147:       
148:       const delay = Math.min(
149:         cfg.baseDelay * Math.pow(2, attempt - 1),
150:         cfg.maxDelay
151:       )
152:       
153:       const jitter = delay * (0.75 + Math.random() * 0.5)
154:       
155:       console.warn(`[RETRY] Retryable error on attempt ${attempt}, waiting ${Math.round(jitter)}ms`)
156:       
157:       cfg.onRetry(attempt, err)
158:       
159:       await new Promise(resolve => setTimeout(resolve, jitter))
160:     }
161:   }
162: 
163:   throw lastError instanceof Error 
164:     ? lastError 
165:     : new Error('Operation failed after all retry attempts')
166: }
167: 
168: /**
169:  * Check if an error is retryable (network, timeout, rate limit)
170:  */
171: export function isRetryableError(error: Error): boolean {
172:   const message = error.message.toLowerCase()
173:   
174:   // Network errors
175:   if (message.includes('econnrefused') || 
176:       message.includes('enotfound') || 
177:       message.includes('etimedout') ||
178:       message.includes('network')) {
179:     return true
180:   }
181:   
182:   // Rate limit errors
183:   if (message.includes('429') || message.includes('rate limit')) {
184:     return true
185:   }
186:   
187:   // Timeout errors
188:   if (message.includes('timeout')) {
189:     return true
190:   }
191:   
192:   // Temporary server errors
193:   if (message.includes('503') || message.includes('502')) {
194:     return true
195:   }
196:   
197:   // Don't retry authentication or validation errors
198:   if (message.includes('401') || 
199:       message.includes('403') || 
200:       message.includes('400')) {
201:     return false
202:   }
203:   
204:   return false
205: }
</file>

<file path="src/lib/utils/retry-with-backoff.ts">
 1: /**
 2:  * PERPLEXITY AUDIT FIX - PHASE 2: Retry Logic with Exponential Backoff
 3:  * Based on 2024 industry best practices for resilient API integrations
 4:  */
 5: 
 6: export interface RetryConfig {
 7:   maxAttempts?: number
 8:   initialDelayMs?: number
 9:   maxDelayMs?: number
10:   backoffMultiplier?: number
11: }
12: 
13: const DEFAULT_CONFIG: Required<RetryConfig> = {
14:   maxAttempts: 3,
15:   initialDelayMs: 1000,
16:   maxDelayMs: 10000,
17:   backoffMultiplier: 2
18: }
19: 
20: /**
21:  * Executes an operation with exponential backoff retry logic
22:  * 
23:  * @param operation - Async function to retry
24:  * @param config - Retry configuration
25:  * @param operationName - Name for logging
26:  * @returns Result of the operation
27:  * @throws Last error if all attempts fail
28:  */
29: export async function withRetryAndBackoff<T>(
30:   operation: () => Promise<T>,
31:   config: RetryConfig = {},
32:   operationName: string = 'operation'
33: ): Promise<T> {
34:   const cfg = { ...DEFAULT_CONFIG, ...config }
35:   let lastError: unknown
36:   
37:   for (let attempt = 1; attempt <= cfg.maxAttempts; attempt++) {
38:     try {
39:       const result = await operation()
40:       
41:       if (attempt > 1) {
42:         console.log(`[RETRY] ${operationName} succeeded on attempt ${attempt}/${cfg.maxAttempts}`)
43:       }
44:       
45:       return result
46:     } catch (err) {
47:       lastError = err
48:       
49:       // Don't retry on last attempt
50:       if (attempt === cfg.maxAttempts) {
51:         console.error(`[RETRY] ${operationName} failed after ${cfg.maxAttempts} attempts:`, err)
52:         break
53:       }
54:       
55:       // Calculate delay with exponential backoff: 1s, 2s, 4s, 8s (capped at maxDelayMs)
56:       const delay = Math.min(
57:         cfg.initialDelayMs * Math.pow(cfg.backoffMultiplier, attempt - 1),
58:         cfg.maxDelayMs
59:       )
60:       
61:       console.warn(`[RETRY] ${operationName} attempt ${attempt}/${cfg.maxAttempts} failed, retrying in ${delay}ms:`, 
62:         (err as Error).message || err)
63:       
64:       await new Promise(resolve => setTimeout(resolve, delay))
65:     }
66:   }
67:   
68:   // All attempts failed
69:   if (lastError instanceof Error) {
70:     throw lastError
71:   }
72:   throw new Error(`${operationName} failed after ${cfg.maxAttempts} attempts`)
73: }
74: 
75: /**
76:  * Retry logic specifically for Perplexity API calls
77:  * Uses more aggressive retry strategy for rate limits and timeouts
78:  */
79: export async function withPerplexityRetry<T>(
80:   operation: () => Promise<T>,
81:   operationName: string = 'perplexity-operation'
82: ): Promise<T> {
83:   return withRetryAndBackoff(
84:     operation,
85:     {
86:       maxAttempts: 3,
87:       initialDelayMs: 1000,
88:       maxDelayMs: 8000,
89:       backoffMultiplier: 2
90:     },
91:     operationName
92:   )
93: }
</file>

<file path="src/lib/utils/salary-normalizer.ts">
  1: /**
  2:  * Salary Normalization Utility
  3:  * Converts various salary formats to consistent yearly amounts
  4:  * Handles: hourly, monthly, yearly, ranges, CAD/USD currencies
  5:  */
  6: 
  7: export interface NormalizedSalary {
  8:   yearly: string // e.g., "$50,000 - $70,000/year"
  9:   yearlyMin: number
 10:   yearlyMax: number
 11:   currency: string
 12:   original: string
 13:   confidence: 'high' | 'medium' | 'low' // How confident we are in the conversion
 14: }
 15: 
 16: /**
 17:  * Normalize salary string to yearly amount
 18:  * Examples:
 19:  * - "$25/hour" → "$52,000/year"
 20:  * - "$5,000/month" → "$60,000/year"
 21:  * - "$50K-$70K" → "$50,000 - $70,000/year"
 22:  * - "$50k-60k/mo" → "$600,000 - $720,000/year"
 23:  */
 24: export function normalizeSalary(salaryStr: string | null | undefined): NormalizedSalary | null {
 25:   if (!salaryStr) return null
 26: 
 27:   const original = salaryStr.trim()
 28:   
 29:   // Detect currency (default to CAD for Canadian jobs, USD otherwise)
 30:   const currency = original.toLowerCase().includes('usd') ? 'USD' : 'CAD'
 31:   
 32:   // Remove currency symbols and normalize
 33:   let cleaned = original
 34:     .replace(/USD|CAD/gi, '')
 35:     .replace(/[$,]/g, '')
 36:     .trim()
 37:   
 38:   // Check if it's a range (e.g., "50-70K", "50000-70000")
 39:   const rangeMatch = cleaned.match(/(\d+(?:\.\d+)?)\s*[kK]?\s*[-–—to]\s*(\d+(?:\.\d+)?)\s*[kK]?/)
 40:   
 41:   if (rangeMatch) {
 42:     let min = parseFloat(rangeMatch[1])
 43:     let max = parseFloat(rangeMatch[2])
 44:     
 45:     // Handle K notation (50K → 50000)
 46:     if (cleaned.toLowerCase().includes('k')) {
 47:       min *= 1000
 48:       max *= 1000
 49:     }
 50:     
 51:     // Detect period (hourly, monthly, yearly)
 52:     const period = detectPeriod(original)
 53:     
 54:     // Convert to yearly
 55:     const yearlyMin = convertToYearly(min, period)
 56:     const yearlyMax = convertToYearly(max, period)
 57:     
 58:     return {
 59:       yearly: `$${formatNumber(yearlyMin)} - $${formatNumber(yearlyMax)}/year`,
 60:       yearlyMin,
 61:       yearlyMax,
 62:       currency,
 63:       original,
 64:       confidence: getConfidence(period, original)
 65:     }
 66:   }
 67:   
 68:   // Single value (e.g., "$50,000", "$25/hour", "$5,000/month")
 69:   const singleMatch = cleaned.match(/(\d+(?:\.\d+)?)\s*[kK]?/)
 70:   
 71:   if (singleMatch) {
 72:     let amount = parseFloat(singleMatch[1])
 73:     
 74:     // Handle K notation
 75:     if (cleaned.toLowerCase().includes('k')) {
 76:       amount *= 1000
 77:     }
 78:     
 79:     // Detect period
 80:     const period = detectPeriod(original)
 81:     
 82:     // Convert to yearly
 83:     const yearly = convertToYearly(amount, period)
 84:     
 85:     // For single values, create a reasonable range (±10%)
 86:     const yearlyMin = Math.round(yearly * 0.9)
 87:     const yearlyMax = Math.round(yearly * 1.1)
 88:     
 89:     return {
 90:       yearly: `$${formatNumber(yearly)}/year`,
 91:       yearlyMin,
 92:       yearlyMax,
 93:       currency,
 94:       original,
 95:       confidence: getConfidence(period, original)
 96:     }
 97:   }
 98:   
 99:   // Couldn't parse - return null
100:   return null
101: }
102: 
103: /**
104:  * Detect time period from salary string
105:  */
106: function detectPeriod(salaryStr: string): 'hourly' | 'monthly' | 'yearly' {
107:   const lower = salaryStr.toLowerCase()
108:   
109:   if (lower.includes('/hr') || lower.includes('/hour') || lower.includes('per hour') || lower.includes('hourly')) {
110:     return 'hourly'
111:   }
112:   
113:   if (lower.includes('/mo') || lower.includes('/month') || lower.includes('per month') || lower.includes('monthly')) {
114:     return 'monthly'
115:   }
116:   
117:   // Default to yearly if not specified or explicitly yearly
118:   return 'yearly'
119: }
120: 
121: /**
122:  * Convert amount to yearly based on period
123:  */
124: function convertToYearly(amount: number, period: 'hourly' | 'monthly' | 'yearly'): number {
125:   switch (period) {
126:     case 'hourly':
127:       // Assume 40 hours/week, 52 weeks/year = 2080 hours/year
128:       return Math.round(amount * 2080)
129:     case 'monthly':
130:       return Math.round(amount * 12)
131:     case 'yearly':
132:     default:
133:       return Math.round(amount)
134:   }
135: }
136: 
137: /**
138:  * Get confidence level based on period and original string
139:  */
140: function getConfidence(period: 'hourly' | 'monthly' | 'yearly', original: string): 'high' | 'medium' | 'low' {
141:   const lower = original.toLowerCase()
142:   
143:   // High confidence: explicit period specified
144:   if (
145:     lower.includes('/year') || 
146:     lower.includes('/hour') || 
147:     lower.includes('/month') ||
148:     lower.includes('per year') ||
149:     lower.includes('per hour') ||
150:     lower.includes('per month')
151:   ) {
152:     return 'high'
153:   }
154:   
155:   // Medium confidence: K notation or range
156:   if (lower.includes('k') || lower.includes('-')) {
157:     return 'medium'
158:   }
159:   
160:   // Low confidence: ambiguous
161:   return 'low'
162: }
163: 
164: /**
165:  * Format number with commas (e.g., 50000 → "50,000")
166:  */
167: function formatNumber(num: number): string {
168:   return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',')
169: }
170: 
171: /**
172:  * Batch normalize multiple salary strings
173:  */
174: export function normalizeSalaries(salaries: (string | null | undefined)[]): (NormalizedSalary | null)[] {
175:   return salaries.map(s => normalizeSalary(s))
176: }
177: 
178: /**
179:  * Get display string for normalized salary
180:  */
181: export function getSalaryDisplayString(normalized: NormalizedSalary | null): string {
182:   if (!normalized) return 'Salary not disclosed'
183:   
184:   const currencySymbol = normalized.currency === 'USD' ? 'USD' : ''
185:   return `${normalized.yearly} ${currencySymbol}`.trim()
186: }
</file>

<file path="src/lib/validation-middleware.ts">
  1: // Input Validation Middleware with Zod
  2: 
  3: import { z } from 'zod'
  4: import { NextRequest, NextResponse } from 'next/server'
  5: import { logger } from './logger'
  6: 
  7: /**
  8:  * Higher-order function that wraps API handlers with validation
  9:  * @param schema - Zod schema for validation
 10:  * @returns Wrapped handler with validation
 11:  */
 12: export function withValidation<T>(schema: z.ZodSchema<T>) {
 13:   return function (handler: (req: NextRequest, data: T) => Promise<NextResponse>) {
 14:     return async function (req: NextRequest): Promise<NextResponse> {
 15:       try {
 16:         const body = await req.json()
 17:         const validatedData = schema.parse(body)
 18:         return handler(req, validatedData)
 19:       } catch (error) {
 20:         if (error instanceof z.ZodError) {
 21:           logger.warn('Validation failed', {
 22:             errors: error.errors,
 23:             path: req.nextUrl.pathname
 24:           })
 25:           
 26:           return NextResponse.json(
 27:             {
 28:               error: 'Validation failed',
 29:               details: error.errors.map(err => ({
 30:                 path: err.path.join('.'),
 31:                 message: err.message
 32:               }))
 33:             },
 34:             { status: 400 }
 35:           )
 36:         }
 37:         throw error
 38:       }
 39:     }
 40:   }
 41: }
 42: 
 43: // Common validation schemas
 44: export const resumeCustomizeSchema = z.object({
 45:   resumeId: z.string().min(1, 'Resume ID is required'),
 46:   jobDescription: z.string().min(50, 'Job description must be at least 50 characters').max(10000),
 47:   jobTitle: z.string().min(1).max(200),
 48:   companyName: z.string().min(1).max(200),
 49:   tone: z.enum(['professional', 'casual', 'enthusiastic']).optional(),
 50:   overrideResumeText: z.string().max(50000).optional(),
 51:   psychology: z.any().optional(),
 52:   companyData: z.any().optional(),
 53:   atsTarget: z.string().optional(),
 54:   optimizationLevel: z.string().optional(),
 55:   industryFocus: z.string().optional(),
 56:   experienceLevel: z.string().optional(),
 57:   keyMetrics: z.any().optional(),
 58:   skillsPriority: z.any().optional(),
 59:   antiAIDetection: z.boolean().optional(),
 60:   formatStyle: z.string().optional(),
 61:   lengthTarget: z.string().optional()
 62: })
 63: 
 64: export const companyResearchSchema = z.object({
 65:   companyName: z.string().min(1).max(200),
 66:   website: z.string().url().optional(),
 67:   includeNews: z.boolean().optional(),
 68:   includeReviews: z.boolean().optional(),
 69:   includeFinancials: z.boolean().optional()
 70: })
 71: 
 72: export const coverLetterSchema = z.object({
 73:   jobApplicationId: z.string().optional(),
 74:   resumeId: z.string().optional(),
 75:   tone: z.enum(['professional', 'casual', 'enthusiastic']).default('professional'),
 76:   length: z.enum(['short', 'medium', 'long']).default('medium'),
 77:   raw: z.boolean().optional(),
 78:   save: z.boolean().optional(),
 79:   psychology: z.any().optional()
 80: })
 81: 
 82: export const coverLetterRawSchema = z.object({
 83:   jobTitle: z.string().min(1).max(200),
 84:   companyName: z.string().min(1).max(200),
 85:   jobDescription: z.string().min(50).max(10000),
 86:   resumeText: z.string().min(100).max(50000),
 87:   tone: z.enum(['professional', 'casual', 'enthusiastic']).optional(),
 88:   length: z.enum(['short', 'medium', 'long']).optional()
 89: })
 90: 
 91: export const jobSearchSchema = z.object({
 92:   keywords: z.string().min(1).max(500),
 93:   location: z.string().min(1).max(200),
 94:   experienceLevel: z.enum(['entry', 'mid', 'senior']).optional(),
 95:   remote: z.boolean().optional(),
 96:   salaryMin: z.number().positive().optional(),
 97:   limit: z.number().min(1).max(100).default(20)
 98: })
 99: 
100: export const resumeUploadSchema = z.object({
101:   pastedText: z.string().min(50, 'Resume text must be at least 50 characters').optional()
102: })
103: 
104: export const emailComposeSchema = z.object({
105:   jobId: z.string().min(1),
106:   resumeText: z.string().min(100),
107:   coverText: z.string().min(100),
108:   contacts: z.object({
109:     email: z.string().email()
110:   }),
111:   company: z.string().min(1),
112:   jobTitle: z.string().min(1)
113: })
114: 
115: export const profileUpdateSchema = z.object({
116:   name: z.string().min(1).max(200).optional(),
117:   title: z.string().max(200).optional(),
118:   location: z.string().max(200).optional(),
119:   skills: z.array(z.string()).optional(),
120:   experience: z.string().optional(),
121:   bio: z.string().max(1000).optional()
122: })
123: 
124: export const applicationCreateSchema = z.object({
125:   jobTitle: z.string().min(1).max(200),
126:   companyName: z.string().min(1).max(200),
127:   jobDescription: z.string().min(50).max(10000),
128:   jobUrl: z.string().url().optional(),
129:   location: z.string().max(200).optional(),
130:   salary: z.string().max(100).optional()
131: })
132: 
133: export const applicationUpdateSchema = z.object({
134:   status: z.enum(['saved', 'applied', 'screening', 'interviewing', 'offer', 'rejected', 'withdrawn']).optional(),
135:   notes: z.string().max(5000).optional()
136: })
137: 
138: // Email validation helper
139: export function validateEmail(email: string): boolean {
140:   return z.string().email().safeParse(email).success
141: }
142: 
143: // URL validation helper  
144: export function validateURL(url: string): boolean {
145:   return z.string().url().safeParse(url).success
146: }
147: 
148: // File size validation helper
149: export function validateFileSize(size: number, maxMB: number = 10): boolean {
150:   return size <= maxMB * 1024 * 1024
151: }
152: 
153: // Sanitize HTML helper (basic)
154: export function sanitizeHTML(html: string): string {
155:   return html
156:     .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
157:     .replace(/on\w+="[^"]*"/gi, '')
158:     .replace(/javascript:/gi, '')
159: }
</file>

<file path="src/lib/validation.ts">
 1: import DOMPurify from 'isomorphic-dompurify'
 2: 
 3: export class InputValidator {
 4:   static sanitizeText(input: string, maxLength = 10000): string {
 5:     return DOMPurify.sanitize(input.trim().substring(0, maxLength), {
 6:       ALLOWED_TAGS: [],
 7:       ALLOWED_ATTR: []
 8:     })
 9:   }
10: 
11:   static sanitizeHTML(input: string): string {
12:     return DOMPurify.sanitize(input, {
13:       ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'ul', 'ol', 'li'],
14:       ALLOWED_ATTR: []
15:     })
16:   }
17: 
18:   static validateEmail(email: string): boolean {
19:     const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
20:     return emailRegex.test(email) && email.length <= 255
21:   }
22: 
23:   static validateURL(url: string): boolean {
24:     try {
25:       const parsedUrl = new URL(url)
26:       return ['http:', 'https:'].includes(parsedUrl.protocol)
27:     } catch {
28:       return false
29:     }
30:   }
31: 
32:   static validateFileUpload(file: File): { valid: boolean; error?: string } {
33:     const maxSize = 10 * 1024 * 1024 // 10MB
34:     const allowedTypes = ['application/pdf', 'text/plain', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']
35: 
36:     if (file.size > maxSize) {
37:       return { valid: false, error: 'File size exceeds 10MB limit' }
38:     }
39: 
40:     if (!allowedTypes.includes(file.type)) {
41:       return { valid: false, error: 'Invalid file type' }
42:     }
43: 
44:     return { valid: true }
45:   }
46: }
</file>

<file path="src/lib/validation/schema-validator.ts">
  1: /**
  2:  * Schema Validator for AI Responses
  3:  * 
  4:  * Validates AI responses against JSON schemas using AJV.
  5:  * Provides detailed validation errors and fallback handling.
  6:  */
  7: 
  8: import Ajv, { ValidateFunction, ErrorObject } from 'ajv'
  9: import addFormats from 'ajv-formats'
 10: import { PerplexitySchemaError, PerplexityErrorContext } from '../errors/perplexity-error'
 11: import { logger } from '../logger'
 12: 
 13: // Import schemas
 14: import resumeAnalysisSchema from '../schemas/resume-analysis.schema.json'
 15: 
 16: /**
 17:  * Schema Validator Class
 18:  */
 19: export class SchemaValidator {
 20:   private static instance: SchemaValidator
 21:   private ajv: Ajv
 22:   private validators: Map<string, ValidateFunction>
 23: 
 24:   private constructor() {
 25:     this.ajv = new Ajv({
 26:       allErrors: true,
 27:       verbose: true,
 28:       strict: false,
 29:       coerceTypes: true, // Coerce types when possible
 30:       useDefaults: true, // Fill in default values
 31:       removeAdditional: false, // Keep additional properties
 32:     })
 33: 
 34:     // Add format validators (email, uri, date, etc.)
 35:     addFormats(this.ajv)
 36: 
 37:     // Register schemas
 38:     this.validators = new Map()
 39:     this.registerSchemas()
 40:   }
 41: 
 42:   static getInstance(): SchemaValidator {
 43:     if (!SchemaValidator.instance) {
 44:       SchemaValidator.instance = new SchemaValidator()
 45:     }
 46:     return SchemaValidator.instance
 47:   }
 48: 
 49:   private registerSchemas(): void {
 50:     // Register resume analysis schema
 51:     this.registerSchema('resume-analysis', resumeAnalysisSchema)
 52:   }
 53: 
 54:   /**
 55:    * Register a new schema
 56:    */
 57:   registerSchema(name: string, schema: object): void {
 58:     try {
 59:       const validator = this.ajv.compile(schema)
 60:       this.validators.set(name, validator)
 61:       logger.info(`Schema registered: ${name}`)
 62:     } catch (error: any) {
 63:       logger.error(`Failed to register schema ${name}:`, error)
 64:       throw error
 65:     }
 66:   }
 67: 
 68:   /**
 69:    * Validate data against a schema
 70:    */
 71:   validate<T = any>(
 72:     data: unknown,
 73:     schemaName: string,
 74:     context?: PerplexityErrorContext
 75:   ): T {
 76:     const validator = this.validators.get(schemaName)
 77:     
 78:     if (!validator) {
 79:       throw new Error(`Schema not found: ${schemaName}`)
 80:     }
 81: 
 82:     const valid = validator(data)
 83: 
 84:     if (!valid) {
 85:       const errors = validator.errors || []
 86:       const errorMessages = this.formatErrors(errors)
 87: 
 88:       if (context) {
 89:         throw new PerplexitySchemaError(
 90:           `Schema validation failed for ${schemaName}: ${errorMessages}`,
 91:           context,
 92:           schemaName,
 93:           errors,
 94:           data
 95:         )
 96:       }
 97: 
 98:       throw new Error(`Schema validation failed: ${errorMessages}`)
 99:     }
100: 
101:     return data as T
102:   }
103: 
104:   /**
105:    * Validate with fallback to partial data
106:    */
107:   validateWithFallback<T = any>(
108:     data: unknown,
109:     schemaName: string,
110:     fallback: T,
111:     context?: PerplexityErrorContext
112:   ): T {
113:     try {
114:       return this.validate<T>(data, schemaName, context)
115:     } catch (error: any) {
116:       logger.warn(`Schema validation failed, using fallback:`, error.message)
117:       return fallback
118:     }
119:   }
120: 
121:   /**
122:    * Soft validation that returns validation result
123:    */
124:   softValidate(
125:     data: unknown,
126:     schemaName: string
127:   ): { valid: boolean; errors: string[]; data?: any } {
128:     const validator = this.validators.get(schemaName)
129:     
130:     if (!validator) {
131:       return {
132:         valid: false,
133:         errors: [`Schema not found: ${schemaName}`]
134:       }
135:     }
136: 
137:     const valid = validator(data)
138: 
139:     if (!valid) {
140:       const errors = validator.errors || []
141:       return {
142:         valid: false,
143:         errors: this.formatErrorsArray(errors)
144:       }
145:     }
146: 
147:     return {
148:       valid: true,
149:       errors: [],
150:       data
151:     }
152:   }
153: 
154:   /**
155:    * Partial validation - validate only present fields
156:    */
157:   validatePartial<T = any>(
158:     data: unknown,
159:     schemaName: string,
160:     context?: PerplexityErrorContext
161:   ): Partial<T> {
162:     // Create a validator with required fields as optional
163:     const validator = this.validators.get(schemaName)
164:     
165:     if (!validator) {
166:       throw new Error(`Schema not found: ${schemaName}`)
167:     }
168: 
169:     // Just return the data for partial validation
170:     // In production, you'd want to validate individual fields
171:     return data as Partial<T>
172:   }
173: 
174:   /**
175:    * Format validation errors for display
176:    */
177:   private formatErrors(errors: ErrorObject[]): string {
178:     return errors
179:       .map(err => {
180:         const path = err.instancePath || 'root'
181:         const message = err.message || 'validation error'
182:         const params = err.params ? JSON.stringify(err.params) : ''
183:         return `${path}: ${message} ${params}`.trim()
184:       })
185:       .join('; ')
186:   }
187: 
188:   /**
189:    * Format validation errors as array
190:    */
191:   private formatErrorsArray(errors: ErrorObject[]): string[] {
192:     return errors.map(err => {
193:       const path = err.instancePath || 'root'
194:       const message = err.message || 'validation error'
195:       return `${path}: ${message}`
196:     })
197:   }
198: 
199:   /**
200:    * Get detailed error information
201:    */
202:   getDetailedErrors(errors: ErrorObject[]): Array<{
203:     path: string
204:     message: string
205:     keyword: string
206:     params: any
207:   }> {
208:     return errors.map(err => ({
209:       path: err.instancePath || 'root',
210:       message: err.message || 'validation error',
211:       keyword: err.keyword,
212:       params: err.params
213:     }))
214:   }
215: 
216:   /**
217:    * Check if schema exists
218:    */
219:   hasSchema(schemaName: string): boolean {
220:     return this.validators.has(schemaName)
221:   }
222: 
223:   /**
224:    * List registered schemas
225:    */
226:   listSchemas(): string[] {
227:     return Array.from(this.validators.keys())
228:   }
229: 
230:   /**
231:    * Remove a schema
232:    */
233:   removeSchema(schemaName: string): boolean {
234:     return this.validators.delete(schemaName)
235:   }
236: 
237:   /**
238:    * Clear all validators
239:    */
240:   clearAll(): void {
241:     this.validators.clear()
242:     this.registerSchemas() // Re-register default schemas
243:   }
244: }
245: 
246: /**
247:  * Singleton instance getter
248:  */
249: export function getValidator(): SchemaValidator {
250:   return SchemaValidator.getInstance()
251: }
252: 
253: /**
254:  * Convenience function for validation
255:  */
256: export function validateAIResponse<T = any>(
257:   data: unknown,
258:   schemaName: string,
259:   context?: PerplexityErrorContext
260: ): T {
261:   return SchemaValidator.getInstance().validate<T>(data, schemaName, context)
262: }
263: 
264: /**
265:  * Convenience function for soft validation
266:  */
267: export function softValidateAIResponse(
268:   data: unknown,
269:   schemaName: string
270: ): { valid: boolean; errors: string[]; data?: any } {
271:   return SchemaValidator.getInstance().softValidate(data, schemaName)
272: }
273: 
274: /**
275:  * Convenience function for validation with fallback
276:  */
277: export function validateWithFallback<T = any>(
278:   data: unknown,
279:   schemaName: string,
280:   fallback: T,
281:   context?: PerplexityErrorContext
282: ): T {
283:   return SchemaValidator.getInstance().validateWithFallback<T>(
284:     data,
285:     schemaName,
286:     fallback,
287:     context
288:   )
289: }
</file>

<file path="src/lib/validation/schemas.ts">
 1: /**
 2:  * Zod Validation Schemas
 3:  * Type-safe validation for API requests
 4:  */
 5: 
 6: import { z } from 'zod'
 7: 
 8: // Resume Optimizer Schema
 9: export const generateResumeVariantsSchema = z.object({
10:   resumeText: z.string().min(100, 'Resume text must be at least 100 characters'),
11:   jobTitle: z.string().min(1, 'Job title is required'),
12:   jobRequirements: z.array(z.string()).default([]),
13:   companyInsights: z.object({
14:     culture: z.string().default(''),
15:     values: z.array(z.string()).default([]),
16:     industry: z.string().default('')
17:   }).default({})
18: })
19: 
20: export type GenerateResumeVariantsInput = z.infer<typeof generateResumeVariantsSchema>
21: 
22: // Cover Letter Schema
23: export const generateCoverLettersSchema = z.object({
24:   jobTitle: z.string().min(1, 'Job title is required'),
25:   company: z.string().min(1, 'Company name is required'),
26:   jobRequirements: z.array(z.string()).default([]),
27:   resumeText: z.string().min(100, 'Resume text must be at least 100 characters'),
28:   companyInsights: z.object({
29:     culture: z.string().default(''),
30:     values: z.array(z.string()).default([]),
31:     recentNews: z.array(z.string()).default([])
32:   }).default({}),
33:   hiringManager: z.object({
34:     name: z.string(),
35:     title: z.string()
36:   }).optional()
37: })
38: 
39: export type GenerateCoverLettersInput = z.infer<typeof generateCoverLettersSchema>
40: 
41: // Email Outreach Schema
42: export const generateEmailOutreachSchema = z.object({
43:   hiringContact: z.object({
44:     name: z.string().min(1, 'Contact name is required'),
45:     title: z.string().min(1, 'Contact title is required'),
46:     email: z.string().email().optional()
47:   }),
48:   jobTitle: z.string().min(1, 'Job title is required'),
49:   company: z.string().min(1, 'Company name is required'),
50:   resumeHighlights: z.array(z.string()).default([])
51: })
52: 
53: export type GenerateEmailOutreachInput = z.infer<typeof generateEmailOutreachSchema>
54: 
55: // Autopilot Trigger Schema
56: export const autopilotTriggerSchema = z.object({
57:   resumeId: z.string().min(1, 'Resume ID is required'),
58:   jobTitle: z.string().optional(),
59:   company: z.string().optional(),
60:   jobDescription: z.string().optional()
61: })
62: 
63: export type AutopilotTriggerInput = z.infer<typeof autopilotTriggerSchema>
64: 
65: // Resume Upload Schema (for text validation)
66: export const resumeUploadSchema = z.object({
67:   pastedText: z.string().min(100).optional(),
68:   fileName: z.string().optional()
69: })
70: 
71: export type ResumeUploadInput = z.infer<typeof resumeUploadSchema>
</file>

<file path="src/lib/validators.ts">
 1: import { z } from 'zod'
 2: 
 3: export const jobAnalyzeSchema = z.object({
 4:   jobDescription: z.string().min(10), // Reduced from 50 to be more flexible
 5:   jobTitle: z.string().optional(),
 6:   companyName: z.string().optional(),
 7: })
 8: 
 9: export const resumeCustomizeSchema = z.object({
10:   resumeId: z.string().min(1),
11:   jobDescription: z.string().min(10), // Reduced from 50 to be more flexible
12:   jobTitle: z.string().min(2),
13:   companyName: z.string().min(2),
14:   tone: z.enum(['professional','enthusiastic','concise']).optional(),
15:   overrideResumeText: z.string().min(50).optional(),
16:   psychology: z.any().optional(),
17:   companyData: z.any().optional(),
18:   // Advanced optimization controls (all optional)
19:   atsTarget: z.enum(['workday','greenhouse','lever','taleo','icims','generic']).optional(),
20:   optimizationLevel: z.enum(['conservative','moderate','aggressive']).optional(),
21:   industryFocus: z.string().optional(),
22:   experienceLevel: z.enum(['entry','mid','senior','executive']).optional(),
23:   keyMetrics: z.array(z.string().min(1)).optional(),
24:   skillsPriority: z.array(z.string().min(1)).optional(),
25:   antiAIDetection: z.boolean().optional(),
26:   formatStyle: z.enum(['traditional','modern','technical','creative']).optional(),
27:   lengthTarget: z.enum(['1-page','2-page','same','optimized']).optional(),
28: })
29: 
30: export const coverLetterRawSchema = z.object({
31:   raw: z.literal(true),
32:   jobTitle: z.string().min(2),
33:   companyName: z.string().min(2),
34:   jobDescription: z.string().min(1), // Reduced from 50 to allow fallback logic
35:   resumeText: z.string().min(50),
36:   tone: z.enum(['professional','casual','enthusiastic']).default('professional'),
37:   length: z.enum(['short','medium','long']).default('medium'),
38:   save: z.boolean().optional(),
39: })
40: 
41: export const salaryNegotiationSchema = z.object({
42:   jobTitle: z.string().min(2),
43:   companyName: z.string().min(2),
44:   location: z.string().min(2),
45:   seniority: z.enum(['entry','mid','senior']),
46:   offer: z.object({
47:     base: z.string().min(1),
48:     bonus: z.string().optional(),
49:     equity: z.string().optional(),
50:     benefits: z.string().optional(),
51:   }),
52:   marketData: z.string().optional(),
53:   candidateHighlights: z.string().min(10),
54:   constraints: z.string().optional(),
55:   tone: z.enum(['professional','warm','concise']).default('professional'),
56: })
</file>

<file path="src/lib/web-scraper.ts">
   1: import puppeteer, { Browser } from 'puppeteer-core'
   2: import chromium from '@sparticuz/chromium'
   3: import { CompanyData } from '@/types';
   4: 
   5: export interface ScrapedCompanyData {
   6:   companyName: string;
   7:   website?: string;
   8:   industry?: string;
   9:   size?: string;
  10:   description?: string;
  11:   culture?: string[];
  12:   benefits?: string[];
  13:   recentNews?: Array<{
  14:     title: string;
  15:     url: string;
  16:     publishedAt: Date;
  17:     summary: string;
  18:   }>;
  19:   glassdoorRating?: number;
  20:   glassdoorReviews?: number;
  21:   linkedinData?: {
  22:     companyPage: string;
  23:     employeeCount?: number;
  24:     followers?: number;
  25:     recentPosts?: Array<{
  26:       content: string;
  27:       postedAt: Date;
  28:       engagement: number;
  29:     }>;
  30:   };
  31:   socialMedia?: {
  32:     twitter?: {
  33:       handle: string;
  34:       followers: number;
  35:       recentTweets: Array<{
  36:         text: string;
  37:         createdAt: Date;
  38:         likes: number;
  39:         retweets: number;
  40:       }>;
  41:     };
  42:     facebook?: {
  43:       pageUrl: string;
  44:       followers: number;
  45:       recentPosts: Array<{
  46:         content: string;
  47:         postedAt: Date;
  48:         reactions: number;
  49:       }>;
  50:     };
  51:     instagram?: {
  52:       handle: string;
  53:       followers: number;
  54:       recentPosts: Array<{
  55:         caption: string;
  56:         postedAt: Date;
  57:         likes: number;
  58:         comments: number;
  59:       }>;
  60:     };
  61:   };
  62:   sources?: string[];
  63: }
  64: 
  65: export class WebScraperService {
  66:   private browser: Browser | null = null;
  67:   private currentMode: 'disabled' | 'direct' | 'proxy' = 'direct';
  68:   private userAgents: string[] = [
  69:     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
  70:     'Mozilla/5.0 (Macintosh; Intel Mac OS X 13_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15',
  71:     'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
  72:     'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:118.0) Gecko/20100101 Firefox/118.0',
  73:   ];
  74:   // Simple in-memory cache for OSINT requests
  75:   private osintCache: Map<string, { expiresAt: number; value: any }> = new Map();
  76:   private osintCacheTtlMs: number = Number(process.env.OSINT_CACHE_TTL_MS || 15 * 60 * 1000);
  77:   // Optional Redis client
  78:   private redis: any = null;
  79: 
  80:   async initialize(): Promise<void> {
  81:     if (this.browser) return
  82:     // Allow disabling browser-based scraping entirely in restricted environments
  83:     if (process.env.SCRAPE_DISABLE_BROWSER === '1') {
  84:       this.browser = null
  85:       this.currentMode = 'disabled'
  86:       return
  87:     }
  88:     const executablePath = await chromium.executablePath()
  89:     // Optional proxy rotation: read one proxy from PROXY_URLS
  90:     let proxyArg: string | undefined
  91:     try {
  92:       const proxies = (process.env.PROXY_URLS || '').split(',').map(s => s.trim()).filter(Boolean)
  93:       if (proxies.length) {
  94:         const pick = proxies[Math.floor(Math.random() * proxies.length)]
  95:         // Only accept well-formed proxy URLs
  96:         if (/^(https?:|socks5:\/\/)/i.test(pick)) {
  97:           proxyArg = `--proxy-server=${pick}`
  98:         }
  99:       }
 100:     } catch {}
 101:     // Optional Redis (cache)
 102:     if (!this.redis && process.env.REDIS_URL) {
 103:       try {
 104:         const { createClient } = require('redis')
 105:         this.redis = createClient({ url: process.env.REDIS_URL })
 106:         this.redis.on('error', () => {})
 107:         this.redis.connect().catch(()=>{})
 108:       } catch {}
 109:     }
 110:     const launchArgs = [...chromium.args]
 111:     if (proxyArg) {
 112:       launchArgs.push(proxyArg)
 113:     } else {
 114:       // Some hosts set proxy env vars by default; ensure direct connection
 115:       launchArgs.push('--no-proxy-server')
 116:       launchArgs.push('--proxy-bypass-list=*')
 117:       // Explicitly force direct connection (no quotes around direct://)
 118:       launchArgs.push('--proxy-server=direct://')
 119:     }
 120:     // Ensure no proxy is used if none configured; fix ERR_NO_SUPPORTED_PROXIES
 121:     process.env.HTTP_PROXY = ''
 122:     process.env.http_proxy = ''
 123:     process.env.HTTPS_PROXY = ''
 124:     process.env.https_proxy = ''
 125:     process.env.ALL_PROXY = ''
 126:     process.env.all_proxy = ''
 127:     // Bypass any residual system proxy
 128:     process.env.NO_PROXY = '*'
 129:     process.env.no_proxy = '*'
 130:     // Extra container-friendly flags
 131:     launchArgs.push('--no-sandbox')
 132:     launchArgs.push('--disable-setuid-sandbox')
 133:     launchArgs.push('--disable-dev-shm-usage')
 134:     this.browser = await puppeteer.launch({
 135:       args: launchArgs,
 136:       executablePath,
 137:       headless: true,
 138:     })
 139:     this.currentMode = proxyArg ? 'proxy' : 'direct'
 140:     // Quick connectivity self-test; if a proxy was configured and failed, relaunch direct
 141:     if (proxyArg) {
 142:       try {
 143:         const page = await this.browser.newPage()
 144:         await page.goto('https://example.com', { waitUntil: 'domcontentloaded', timeout: 8000 })
 145:         await page.close()
 146:       } catch (e) {
 147:         const msg = (e as any)?.message || ''
 148:         if (/ERR_NO_SUPPORTED_PROXIES|ERR_TUNNEL_CONNECTION_FAILED|net::ERR/i.test(String(msg))) {
 149:           try { await this.browser.close() } catch {}
 150:           const directArgs = [...chromium.args, '--no-proxy-server', '--proxy-bypass-list=*', '--proxy-server=direct://', '--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
 151:           this.browser = await puppeteer.launch({ args: directArgs, executablePath, headless: true })
 152:           this.currentMode = 'direct'
 153:         }
 154:       }
 155:     }
 156:   }
 157: 
 158:   private async configurePage(page: any) {
 159:     page.setDefaultNavigationTimeout(45000)
 160:     page.setDefaultTimeout(45000)
 161:     const ua = this.userAgents[Math.floor(Math.random() * this.userAgents.length)]
 162:     await page.setUserAgent(ua)
 163:     await page.setViewport({ width: 1366, height: 768 })
 164:     await page.setExtraHTTPHeaders({ 'Accept-Language': 'en-US,en;q=0.9' })
 165:     // If Railway proxies require auth from PROXY_URLS, apply basic auth
 166:     try {
 167:       const proxies = (process.env.PROXY_URLS || '').split(',').map(s => s.trim()).filter(Boolean)
 168:       const pick = proxies[0]
 169:       if (pick) {
 170:         const u = new URL(pick)
 171:         if (u.username && u.password) {
 172:           await page.authenticate({ username: decodeURIComponent(u.username), password: decodeURIComponent(u.password) })
 173:         }
 174:       }
 175:     } catch {}
 176:     await page.setRequestInterception(true)
 177:     page.on('request', (req: any) => {
 178:       const type = req.resourceType()
 179:       // Allow CSS (for layout) but block images/media/fonts
 180:       if (type === 'image' || type === 'media' || type === 'font') { req.abort().catch(()=>{}) }
 181:       else { req.continue().catch(()=>{}) }
 182:     })
 183:   }
 184: 
 185:   private async sleep(ms: number) { return new Promise(r => setTimeout(r, ms)) }
 186: 
 187:   private async withRetry<T>(fn: () => Promise<T>, attempts = 4, baseDelay = 600): Promise<T> {
 188:     let lastErr: any
 189:     for (let i = 0; i < attempts; i++) {
 190:       try { return await fn() } catch (e) { lastErr = e; await this.sleep(baseDelay * Math.pow(2, i) + Math.random()*200) }
 191:     }
 192:     throw lastErr
 193:   }
 194: 
 195:   private isProxyError(error: any): boolean {
 196:     const msg = (error?.message || '').toString()
 197:     return /ERR_NO_SUPPORTED_PROXIES/i.test(msg)
 198:   }
 199: 
 200:   getMode(): 'disabled' | 'direct' | 'proxy' {
 201:     return this.currentMode
 202:   }
 203: 
 204:   async healthCheck(): Promise<{ ok: boolean; mode: 'disabled' | 'direct' | 'proxy'; error?: string }> {
 205:     try {
 206:       await this.initialize()
 207:       if (!this.browser) {
 208:         return { ok: false, mode: this.currentMode, error: 'browser_unavailable' }
 209:       }
 210:       const page = await this.browser.newPage()
 211:       try {
 212:         await this.configurePage(page)
 213:         await page.goto('https://example.com', { waitUntil: 'domcontentloaded', timeout: 8000 })
 214:         return { ok: true, mode: this.currentMode }
 215:       } finally {
 216:         try { await page.close() } catch {}
 217:       }
 218:     } catch (e: any) {
 219:       return { ok: false, mode: this.currentMode, error: String(e?.message || e) }
 220:     }
 221:   }
 222: 
 223:   private async gotoWithRetry(page: any, url: string, waitUntil: 'domcontentloaded'|'networkidle2' = 'domcontentloaded', timeout = 45000) {
 224:     return this.withRetry(async () => {
 225:       return page.goto(url, { waitUntil, timeout })
 226:     }, 3, 700)
 227:   }
 228: 
 229:   // Generic Google search helper returning title, url, and snippet
 230:   async googleSearch(query: string, limit: number = 10): Promise<Array<{ title: string; url: string; snippet: string }>> {
 231:     // Cache lookup
 232:     const cacheKey = `g:${query}:${limit}`
 233:     const now = Date.now()
 234:     const cached = this.osintCache.get(cacheKey)
 235:     if (cached && cached.expiresAt > now) return cached.value
 236:     if (this.redis) {
 237:       try {
 238:         const raw = await this.redis.get(`osint:${cacheKey}`)
 239:         if (raw) {
 240:           const parsed = JSON.parse(raw)
 241:           this.osintCache.set(cacheKey, { expiresAt: now + this.osintCacheTtlMs, value: parsed })
 242:           return parsed
 243:         }
 244:       } catch {}
 245:     }
 246:     // Primary path: headless Google via Puppeteer
 247:     try {
 248:       if (!this.browser) await this.initialize();
 249:       const page = await this.browser!.newPage();
 250:       try {
 251:         await this.configurePage(page)
 252:         const qs = `https://www.google.com/search?q=${encodeURIComponent(query)}&hl=en`;
 253:         await this.gotoWithRetry(page, qs, 'domcontentloaded', 45000)
 254:         // Accept consent if shown, best-effort
 255:         try { await page.evaluate(() => {
 256:           const btn = Array.from(document.querySelectorAll('button, input[type="submit"]')).find(el => /agree|accept|consent/i.test(el.textContent || '')) as HTMLButtonElement | undefined
 257:           btn?.click()
 258:         }) } catch {}
 259:         await this.sleep(900 + Math.random()*600)
 260:         const results = await page.evaluate((max: number) => {
 261:           const out: Array<{ title: string; url: string; snippet: string }> = []
 262:           const blocks = document.querySelectorAll('div.g, div[data-header-feature], div[data-snf]');
 263:           for (const block of Array.from(blocks)) {
 264:             const a = block.querySelector('a[href^="http"]') as HTMLAnchorElement | null
 265:             const h3 = block.querySelector('h3') as HTMLElement | null
 266:             const sn = block.querySelector('div[data-content-feature] div, .VwiC3b, .IsZvec') as HTMLElement | null
 267:             const url = a?.href || ''
 268:             const title = h3?.textContent?.trim() || ''
 269:             const snippet = sn?.textContent?.trim() || ''
 270:             if (url && title) out.push({ title, url, snippet })
 271:             if (out.length >= max) break
 272:           }
 273:           return out
 274:         }, Math.max(1, Math.min(limit, 50)))
 275:         // De-duplicate and filter tracking
 276:         const seen = new Set<string>()
 277:         const cleaned = results.filter(r => {
 278:           try {
 279:             const u = new URL(r.url)
 280:             const key = `${u.hostname}${u.pathname}`
 281:             if (seen.has(key)) return false
 282:             seen.add(key)
 283:             return true
 284:           } catch { return false }
 285:         })
 286:         // Set cache
 287:         this.osintCache.set(cacheKey, { expiresAt: now + this.osintCacheTtlMs, value: cleaned })
 288:         if (this.redis) {
 289:           try { await this.redis.setEx(`osint:${cacheKey}`, Math.floor(this.osintCacheTtlMs/1000), JSON.stringify(cleaned)) } catch {}
 290:         }
 291:         return cleaned
 292:       } finally {
 293:         try { await page.close() } catch {}
 294:       }
 295:     } catch (e) {
 296:       // Fallback: DuckDuckGo HTML (no JS) to avoid proxy/consent issues
 297:       try {
 298:         const url = `https://html.duckduckgo.com/html/?q=${encodeURIComponent(query)}`
 299:         const res = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0 (compatible; CareerLeverAI/1.0)' } as any })
 300:         if (!res.ok) return []
 301:         const html = await res.text()
 302:         const items: Array<{ title: string; url: string; snippet: string }> = []
 303:         const re = /<a[^>]+class="result__a"[^>]+href="([^"]+)"[^>]*>(.*?)<\/a>[\s\S]*?<a[^>]+class="result__snippet"[^>]*>([\s\S]*?)<\/a>/gi
 304:         let m: RegExpExecArray | null
 305:         const strip = (s: string) => s.replace(/<[^>]+>/g, '').replace(/&[^;]+;/g, ' ').trim()
 306:         while ((m = re.exec(html)) && items.length < Math.max(1, Math.min(limit, 50))) {
 307:           const href = m[1]
 308:           const title = strip(m[2])
 309:           const snippet = strip(m[3])
 310:           if (href && title) items.push({ title, url: href, snippet })
 311:         }
 312:         const seen = new Set<string>()
 313:         const cleaned = items.filter(r => {
 314:           try { const u = new URL(r.url); const key = `${u.hostname}${u.pathname}`; if (seen.has(key)) return false; seen.add(key); return true } catch { return false }
 315:         })
 316:         this.osintCache.set(cacheKey, { expiresAt: now + this.osintCacheTtlMs, value: cleaned })
 317:         if (this.redis) { try { await this.redis.setEx(`osint:${cacheKey}`, Math.floor(this.osintCacheTtlMs/1000), JSON.stringify(cleaned)) } catch {} }
 318:         return cleaned
 319:       } catch {
 320:         return []
 321:       }
 322:     }
 323:   }
 324: 
 325:   // Build advanced Google queries for job discovery across ATS/job boards
 326:   buildJobSearchQueries(options: {
 327:     jobTitle: string;
 328:     location?: string;
 329:     after?: string; // YYYY-MM-DD
 330:     remote?: boolean;
 331:     excludeSenior?: boolean;
 332:     salaryBands?: string[]; // like ["$60,000","$80,000"]
 333:     atsDomains?: string[]; // ['greenhouse.io','jobs.lever.co','workday.com','jobvite.com']
 334:   }): string[] {
 335:     const after = options.after || ''
 336:     const jt = options.jobTitle
 337:     const loc = options.location || ''
 338:     const remote = options.remote ? '"remote"' : ''
 339:     const exclude = options.excludeSenior ? '-"senior" -"staff" -"principal"' : ''
 340:     const parts: string[] = []
 341:     const ats = (options.atsDomains && options.atsDomains.length ? options.atsDomains : ['greenhouse.io','jobs.lever.co','workday.com','jobvite.com']).slice(0,6)
 342:     for (const d of ats) {
 343:       const q = `site:${d} "${jt}" ${loc ? '"'+loc+'"' : ''} ${remote} ${exclude} ${after ? 'after:'+after : ''}`.trim()
 344:       parts.push(q)
 345:     }
 346:     // broad query
 347:     const broad = `"${jt}" ${loc ? '"'+loc+'"' : ''} ${remote} ${exclude} ${after ? 'after:'+after : ''}`.trim()
 348:     parts.push(broad)
 349:     // major job boards
 350:     const boards = ['indeed.com','linkedin.com/jobs','ziprecruiter.com','jobbank.gc.ca','workopolis.com','glassdoor.com/Job']
 351:     for (const b of boards) {
 352:       const q = `site:${b} "${jt}" ${loc ? '"'+loc+'"' : ''} ${remote} ${exclude} ${after ? 'after:'+after : ''}`.trim()
 353:       parts.push(q)
 354:     }
 355:     // generic careers pages
 356:     parts.push(`inurl:careers "${jt}" ${loc ? '"'+loc+'"' : ''} ${remote} ${exclude} ${after ? 'after:'+after : ''}`.trim())
 357:     // salary based queries
 358:     if (options.salaryBands && options.salaryBands.length) {
 359:       const salaryExpr = options.salaryBands.slice(0,3).map(s => `"${s}"`).join(' OR ')
 360:       parts.push(`${salaryExpr} "${jt}" ${loc ? '"'+loc+'"' : ''} filetype:pdf`)
 361:     }
 362:     return parts
 363:   }
 364: 
 365:   // Run Google queries and aggregate unique job posting links, preferring ATS domains
 366:   async searchJobsByGoogle(options: {
 367:     jobTitle: string;
 368:     location?: string;
 369:     after?: string;
 370:     remote?: boolean;
 371:     excludeSenior?: boolean;
 372:     salaryBands?: string[];
 373:     limit?: number;
 374:     radiusKm?: number;
 375:   }): Promise<Array<{ title?: string; url: string; snippet?: string; source: string }>> {
 376:     let queries: string[] = []
 377:     const radiusKm = typeof options.radiusKm === 'number' ? Math.max(1, Math.min(500, options.radiusKm)) : undefined
 378:     if (options.location && radiusKm) {
 379:       try {
 380:         const geo = await this.geocodeLocation(options.location)
 381:         let placeNames: string[] = [ options.location ]
 382:         if (geo) {
 383:           const nearby = await this.getNearbyLocalities(geo.lat, geo.lng, radiusKm, 10)
 384:           const names = nearby.map(p => p.name).filter(Boolean)
 385:           placeNames = Array.from(new Set([options.location, ...names]))
 386:         }
 387:         for (const name of placeNames) {
 388:           const qs = this.buildJobSearchQueries({
 389:             jobTitle: options.jobTitle,
 390:             location: name,
 391:             after: options.after,
 392:             remote: options.remote,
 393:             excludeSenior: options.excludeSenior,
 394:             salaryBands: options.salaryBands,
 395:           })
 396:           queries.push(...qs)
 397:         }
 398:       } catch {
 399:         queries = this.buildJobSearchQueries({
 400:           jobTitle: options.jobTitle,
 401:           location: options.location,
 402:           after: options.after,
 403:           remote: options.remote,
 404:           excludeSenior: options.excludeSenior,
 405:           salaryBands: options.salaryBands,
 406:         })
 407:       }
 408:     } else {
 409:       queries = this.buildJobSearchQueries({
 410:         jobTitle: options.jobTitle,
 411:         location: options.location,
 412:         after: options.after,
 413:         remote: options.remote,
 414:         excludeSenior: options.excludeSenior,
 415:         salaryBands: options.salaryBands,
 416:       })
 417:     }
 418:     const preferredHosts = ['greenhouse.io','jobs.lever.co','workday.com','jobvite.com','boards.greenhouse.io','myworkdayjobs.com','smartrecruiters.com']
 419:     const results: Array<{ title?: string; url: string; snippet?: string; source: string }> = []
 420:     const seen = new Set<string>()
 421:     for (const q of queries) {
 422:       const res = await this.withRetry(() => this.googleSearch(q, 12), 2, 700)
 423:       for (const r of res) {
 424:         try {
 425:           const u = new URL(r.url)
 426:           const host = u.hostname.replace('www.','')
 427:           const key = `${host}${u.pathname}`
 428:           if (seen.has(key)) continue
 429:           seen.add(key)
 430:           results.push({ title: r.title, url: r.url, snippet: r.snippet, source: host })
 431:         } catch { /* ignore */ }
 432:       }
 433:       // small delay to avoid being blocked
 434:       await this.sleep(800 + Math.random()*400)
 435:       if (results.length >= (options.limit || 30)) break
 436:     }
 437:     // Sort: prefer ATS hosts first
 438:     results.sort((a, b) => {
 439:       const aPref = preferredHosts.some(h => (a.source||'').includes(h)) ? 0 : 1
 440:       const bPref = preferredHosts.some(h => (b.source||'').includes(h)) ? 0 : 1
 441:       return aPref - bPref
 442:     })
 443:     return results.slice(0, options.limit || 30)
 444:   }
 445: 
 446:   // Build Google intel queries and gather categorized signals when direct sites are unavailable
 447:   async searchCompanyIntelByGoogle(companyName: string, opts?: { after?: string }): Promise<{
 448:     financial: Array<{ title: string; url: string; snippet: string }>;
 449:     culture: Array<{ title: string; url: string; snippet: string }>;
 450:     news: Array<{ title: string; url: string; snippet: string }>;
 451:     leadership: Array<{ title: string; url: string; snippet: string }>;
 452:     growth: Array<{ title: string; url: string; snippet: string }>;
 453:     benefits: Array<{ title: string; url: string; snippet: string }>;
 454:     crunchbase?: Array<{ title: string; url: string; snippet: string }>;
 455:     pitchbook?: Array<{ title: string; url: string; snippet: string }>;
 456:   }> {
 457:     const after = opts?.after || ''
 458:     const qFinancial = `"${companyName}" ("funding" OR "investment" OR "revenue") ${after ? 'after:'+after : ''}`
 459:     const qCulture = `site:glassdoor.com "${companyName}" ("culture" OR "management" OR "benefits")`
 460:     const qNews = `"${companyName}" ("press release" OR "announcement") ${after ? 'after:'+after : ''}`
 461:     const qLeadership = `"${companyName}" ("CEO" OR "founder" OR "executive" OR "leadership team") ${after ? 'after:'+after : ''}`
 462:     const qGrowth = `"${companyName}" ("hiring" OR "expansion" OR "new office" OR "acquired" OR "partnership") ${after ? 'after:'+after : ''}`
 463:     const qBenefits = `"${companyName}" ("salary" OR "compensation" OR "benefits" OR "PTO")`
 464: 
 465:     const [financial, culture, news, leadership, growth, benefits] = await Promise.all([
 466:       this.googleSearch(qFinancial, 8),
 467:       this.googleSearch(qCulture, 8),
 468:       this.googleSearch(qNews, 8),
 469:       this.googleSearch(qLeadership, 8),
 470:       this.googleSearch(qGrowth, 8),
 471:       this.googleSearch(qBenefits, 8),
 472:     ])
 473: 
 474:     const crunchbase = await this.googleSearch(`site:crunchbase.com "${companyName}"`, 4)
 475:     const pitchbook = await this.googleSearch(`site:pitchbook.com "${companyName}"`, 4)
 476: 
 477:     return { financial, culture, news, leadership, growth, benefits, crunchbase, pitchbook }
 478:   }
 479: 
 480:   // Twitter/X mentions via Google
 481:   async searchTwitterMentions(companyName: string, limit: number = 8): Promise<Array<{ title: string; url: string; snippet: string }>> {
 482:     const q = `"${companyName}" (site:twitter.com OR site:x.com)`
 483:     return this.googleSearch(q, limit)
 484:   }
 485: 
 486:   // Indeed company page/reviews via Google
 487:   async searchIndeedCompany(companyName: string, limit: number = 8): Promise<Array<{ title: string; url: string; snippet: string }>> {
 488:     const q = `site:indeed.com/cmp "${companyName}" (review OR salaries OR interviews)`
 489:     return this.googleSearch(q, limit)
 490:   }
 491: 
 492:   // Reddit employee/interview mentions via Google
 493:   async searchRedditMentions(companyName: string, limit: number = 8): Promise<Array<{ title: string; url: string; snippet: string }>> {
 494:     const q = `site:reddit.com "${companyName}" ("working at" OR interview OR employee)`
 495:     return this.googleSearch(q, limit)
 496:   }
 497: 
 498:   // Financials OSINT: funding, revenue, valuation, investors via Google
 499:   async searchFinancials(companyName: string): Promise<{
 500:     funding: Array<{ title: string; url: string; snippet: string }>;
 501:     revenue: Array<{ title: string; url: string; snippet: string }>;
 502:     valuation: Array<{ title: string; url: string; snippet: string }>;
 503:     investors: Array<{ title: string; url: string; snippet: string }>;
 504:   }> {
 505:     const qFunding = `"${companyName}" (funding OR investment OR "Series A" OR "Series B" OR "Series C") after:2018-01-01`
 506:     const qRevenue = `"${companyName}" (revenue OR ARR OR MRR) filetype:pdf OR site:crunchbase.com`
 507:     const qValuation = `"${companyName}" valuation OR "valued at"`
 508:     const qInvestors = `"${companyName}" investors OR backers OR "led by"`
 509:     const [funding, revenue, valuation, investors] = await Promise.all([
 510:       this.googleSearch(qFunding, 10),
 511:       this.googleSearch(qRevenue, 10),
 512:       this.googleSearch(qValuation, 10),
 513:       this.googleSearch(qInvestors, 10),
 514:     ])
 515:     return { funding, revenue, valuation, investors }
 516:   }
 517: 
 518:   // Geocode a location string to lat/lng using Mapbox (if configured) or OpenStreetMap Nominatim
 519:   async geocodeLocation(location: string): Promise<{ lat: number; lng: number; displayName: string } | null> {
 520:     const q = location.trim()
 521:     if (!q) return null
 522:     const mapboxToken = process.env.MAPBOX_ACCESS_TOKEN
 523:     try {
 524:       if (mapboxToken) {
 525:         const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(q)}.json?limit=1&access_token=${mapboxToken}`
 526:         const res = await fetch(url, { headers: { 'Accept': 'application/json' } as any })
 527:         if (res.ok) {
 528:           const json: any = await res.json()
 529:           const f = json.features?.[0]
 530:           if (f?.center && Array.isArray(f.center)) {
 531:             return { lat: f.center[1], lng: f.center[0], displayName: f.place_name || q }
 532:           }
 533:         }
 534:       }
 535:     } catch {}
 536:     try {
 537:       const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(q)}&limit=1`
 538:       const res = await fetch(url, { headers: { 'Accept': 'application/json', 'User-Agent': 'CareerLeverAI/1.0 (contact: support@careerlever.ai)' } as any })
 539:       if (res.ok) {
 540:         const arr: any[] = await res.json() as any
 541:         const it: any = arr?.[0]
 542:         if (it?.lat && it?.lon) {
 543:           return { lat: parseFloat(it.lat), lng: parseFloat(it.lon), displayName: it.display_name || q }
 544:         }
 545:       }
 546:     } catch {}
 547:     return null
 548:   }
 549: 
 550:   // Fetch nearby locality names within radius using Overpass API (best-effort)
 551:   async getNearbyLocalities(lat: number, lng: number, radiusKm: number, maxPlaces: number = 10): Promise<Array<{ name: string; country?: string }>> {
 552:     const radiusMeters = Math.round(radiusKm * 1000)
 553:     const body = `[out:json][timeout:25];\n(\n  node["place"~"city|town|village"](around:${radiusMeters},${lat},${lng});\n);\nout body ${Math.max(5, maxPlaces)};`;
 554:     try {
 555:       const res = await fetch('https://overpass-api.de/api/interpreter', {
 556:         method: 'POST',
 557:         headers: { 'Content-Type': 'text/plain', 'User-Agent': 'CareerLeverAI/1.0 (contact: support@careerlever.ai)' } as any,
 558:         body
 559:       })
 560:       if (!res.ok) throw new Error('overpass error')
 561:       const json: any = await res.json()
 562:       const names: string[] = []
 563:       for (const el of (json.elements || [])) {
 564:         const name = el?.tags?.name
 565:         if (name && !names.includes(name)) names.push(name)
 566:         if (names.length >= maxPlaces) break
 567:       }
 568:       return names.map(n => ({ name: n }))
 569:     } catch {
 570:       return []
 571:     }
 572:   }
 573: 
 574:   // Compute travel duration (minutes) between two text locations using Mapbox Directions
 575:   async getTravelDurationMins(origin: string, destination: string, profile: 'driving'|'walking'|'cycling' = 'driving'): Promise<number | null> {
 576:     try {
 577:       const o = await this.geocodeLocation(origin)
 578:       const d = await this.geocodeLocation(destination)
 579:       const token = process.env.MAPBOX_ACCESS_TOKEN
 580:       if (!o || !d || !token) return null
 581:       const url = `https://api.mapbox.com/directions/v5/mapbox/${profile}/${o.lng},${o.lat};${d.lng},${d.lat}?annotations=duration&overview=false&access_token=${token}`
 582:       const res = await fetch(url)
 583:       if (!res.ok) return null
 584:       const json: any = await res.json()
 585:       const secs = json?.routes?.[0]?.duration
 586:       if (typeof secs !== 'number') return null
 587:       return Math.round(secs / 60)
 588:     } catch {
 589:       return null
 590:     }
 591:   }
 592: 
 593:   // Scrape a single job detail page from a public URL (best-effort)
 594:   async scrapeJobDetailFromUrl(jobUrl: string): Promise<{
 595:     title?: string;
 596:     companyName?: string;
 597:     location?: string;
 598:     description?: string;
 599:     source: string;
 600:     jobUrl: string;
 601:   }> {
 602:     if (!this.browser) await this.initialize();
 603:     if (!this.browser) return { source: new URL(jobUrl).hostname, jobUrl }
 604:     const page = await this.browser!.newPage();
 605:     try {
 606:       await this.configurePage(page)
 607:       await this.gotoWithRetry(page, jobUrl, 'domcontentloaded', 45000)
 608:       await this.sleep(800 + Math.random()*600)
 609: 
 610:       const host = new URL(jobUrl).hostname.replace('www.', '');
 611:       const data = await page.evaluate((host) => {
 612:         const getText = (sel: string[]) => {
 613:           for (const s of sel) {
 614:             const el = document.querySelector(s) as HTMLElement | null;
 615:             if (el && el.textContent && el.textContent.trim().length > 3) return el.textContent.trim();
 616:           }
 617:           return undefined;
 618:         };
 619:         const getHtml = (sel: string[]) => {
 620:           for (const s of sel) {
 621:             const el = document.querySelector(s) as HTMLElement | null;
 622:             if (el && el.innerText && el.innerText.trim().length > 10) return el.innerText.trim();
 623:           }
 624:           return undefined;
 625:         };
 626: 
 627:         let title = getText(['h1', 'h1[data-testid="jobTitle"]', 'h1.jobsearch-JobInfoHeader-title', 'h1.job-title']);
 628:         let companyName = getText(['.companyName', '[data-company-name="true"]', '.icl-u-lg-mr--sm.icl-u-xs-mr--xs', 'a[data-tn-element="companyName"]', 'a[data-company-name]']);
 629:         if (!companyName) companyName = getText(['[data-testid="companyName"]', 'div[data-company-name]']);
 630:         let location = getText(['.jobsearch-JobInfoHeader-subtitle div:last-child', 'div[data-testid="inlineHeader-companyLocation"]', '.location', '[data-testid="jobLocation"]']);
 631:         let description = getHtml(['#jobDescriptionText', 'div#jobDescriptionText', 'div.jobsearch-jobDescriptionText', 'section#jobDescription', 'div.job-description', 'article']);
 632: 
 633:         return { title, companyName, location, description };
 634:       }, host);
 635: 
 636:       return {
 637:         title: data.title,
 638:         companyName: data.companyName,
 639:         location: data.location,
 640:         description: data.description,
 641:         source: host,
 642:         jobUrl,
 643:       };
 644:     } catch (e) {
 645:       // swallow proxy errors and return minimal data
 646:       return { source: new URL(jobUrl).hostname, jobUrl };
 647:     } finally {
 648:       await page.close();
 649:     }
 650:   }
 651: 
 652:   // Scrape public search results page (Indeed/ZipRecruiter/Job Bank/Google Jobs page) best-effort
 653:   async scrapeJobsFromSearchUrl(searchUrl: string, limit: number = 20): Promise<Array<{
 654:     title?: string;
 655:     companyName?: string;
 656:     location?: string;
 657:     snippet?: string;
 658:     jobUrl: string;
 659:     source: string;
 660:   }>> {
 661:     if (!this.browser) await this.initialize();
 662:     if (!this.browser) return []
 663:     const page = await this.browser!.newPage();
 664:     const results: any[] = [];
 665:     try {
 666:       await this.configurePage(page)
 667:       await page.goto(searchUrl, { waitUntil: 'domcontentloaded', timeout: 45000 });
 668:       await this.sleep(800 + Math.random()*700)
 669:       const host = new URL(searchUrl).hostname.replace('www.', '');
 670: 
 671:       if (/indeed\.com|indeed\.ca/i.test(host)) {
 672:         const items = await page.evaluate(() => {
 673:           const out: any[] = [];
 674:           document.querySelectorAll('a.tapItem, a[data-jk], a[href*="/rc/clk"], a[href*="/pagead/"]').forEach((a) => {
 675:             const el = a as HTMLAnchorElement;
 676:             const card = el.closest('[data-testid="jobsearch-SerpJobCard"]') || el.closest('div.jobsearch-SerpJobCard') || el;
 677:             const title = (card.querySelector('h2.jobTitle, h2 a, h1') as HTMLElement | null)?.innerText?.trim();
 678:             const company = (card.querySelector('.companyName') as HTMLElement | null)?.innerText?.trim();
 679:             const location = (card.querySelector('.companyLocation') as HTMLElement | null)?.innerText?.trim();
 680:             const snippet = (card.querySelector('.job-snippet') as HTMLElement | null)?.innerText?.trim();
 681:             const href = el.href;
 682:             if (href) out.push({ title, companyName: company, location, snippet, jobUrl: href });
 683:           });
 684:           return out;
 685:         });
 686:         for (const it of items) {
 687:           results.push({ ...it, source: host });
 688:           if (results.length >= limit) break;
 689:         }
 690:       } else if (/ziprecruiter\.com/i.test(host)) {
 691:         const items = await page.evaluate(() => {
 692:           const out: any[] = [];
 693:           document.querySelectorAll('a[href*="/jobs/"], a[href*="/jobs-search"] h2 a').forEach((a) => {
 694:             const link = (a as HTMLAnchorElement).href;
 695:             const card = (a as HTMLElement).closest('article, .job_result, .job_card, .job_content') || (a as HTMLElement);
 696:             const title = (card.querySelector('h2, h3') as HTMLElement | null)?.innerText?.trim();
 697:             const company = (card.querySelector('.job_org, .company, .t_org_link') as HTMLElement | null)?.innerText?.trim();
 698:             const location = (card.querySelector('.location, .job_loc') as HTMLElement | null)?.innerText?.trim();
 699:             const snippet = (card.querySelector('p, .job_snippet') as HTMLElement | null)?.innerText?.trim();
 700:             if (link) out.push({ title, companyName: company, location, snippet, jobUrl: link });
 701:           });
 702:           return out;
 703:         });
 704:         for (const it of items) {
 705:           results.push({ ...it, source: host });
 706:           if (results.length >= limit) break;
 707:         }
 708:       } else if (/jobbank\.gc\.ca/i.test(host)) {
 709:         const items = await page.evaluate(() => {
 710:           const out: any[] = [];
 711:           document.querySelectorAll('a[href*="/jobsearch/jobposting/"]').forEach((a) => {
 712:             const link = (a as HTMLAnchorElement).href;
 713:             const card = (a as HTMLElement).closest('li, article, .resultJobItem') || (a as HTMLElement);
 714:             const title = (card.querySelector('h3, h4, a') as HTMLElement | null)?.innerText?.trim();
 715:             const company = (card.querySelector('.business, .resultJobItem__company') as HTMLElement | null)?.innerText?.trim();
 716:             const location = (card.querySelector('.location, .resultJobItem__infoItem--location') as HTMLElement | null)?.innerText?.trim();
 717:             const snippet = (card.querySelector('p, .resultJobItem__short') as HTMLElement | null)?.innerText?.trim();
 718:             if (link) out.push({ title, companyName: company, location, snippet, jobUrl: link });
 719:           });
 720:           return out;
 721:         });
 722:         for (const it of items) {
 723:           results.push({ ...it, source: host });
 724:           if (results.length >= limit) break;
 725:         }
 726:       } else if (/google\./i.test(host)) {
 727:         const items = await page.evaluate(() => {
 728:           const out: any[] = [];
 729:           document.querySelectorAll('a[href^="http"]').forEach((a) => {
 730:             const href = (a as HTMLAnchorElement).href;
 731:             const text = (a as HTMLAnchorElement).innerText || '';
 732:             if (/indeed|ziprecruiter|jobbank\.gc\.ca|workopolis|glassdoor/i.test(href) && text && text.length > 5) {
 733:               out.push({ title: text.split('\n')[0], companyName: undefined, location: undefined, snippet: undefined, jobUrl: href });
 734:             }
 735:           });
 736:           return out;
 737:         });
 738:         for (const it of items) {
 739:           results.push({ ...it, source: host });
 740:           if (results.length >= limit) break;
 741:         }
 742:       }
 743:     } catch (e) {
 744:       // ignore
 745:     } finally {
 746:       await page.close();
 747:     }
 748:     // De-dupe by URL
 749:     const seen = new Set<string>();
 750:     const deduped = results.filter(r => {
 751:       const key = r.jobUrl.split('#')[0];
 752:       if (seen.has(key)) return false;
 753:       seen.add(key); return true;
 754:     });
 755:     return deduped.slice(0, limit);
 756:   }
 757: 
 758:   async close(): Promise<void> {
 759:     if (this.browser) {
 760:       await this.browser.close();
 761:       this.browser = null;
 762:     }
 763:   }
 764: 
 765:   async scrapeCompanyData(companyName: string, website?: string): Promise<ScrapedCompanyData> {
 766:     if (!this.browser) {
 767:       await this.initialize();
 768:     }
 769: 
 770:     const data: ScrapedCompanyData = {
 771:       companyName,
 772:       website,
 773:     };
 774: 
 775:     try {
 776:       const sources: string[] = []
 777:       const addSource = (s: string) => { if (!sources.includes(s)) sources.push(s) }
 778:       // Try to discover official website if missing
 779:       if (!website) {
 780:         try {
 781:           const found = await this.discoverOfficialWebsite(companyName)
 782:           if (found) website = found
 783:         } catch {}
 784:       }
 785:       // Scrape multiple sources in parallel
 786:       const [glassdoorData, linkedinData, websiteData, newsData, instaData, fbData, gRev] = await Promise.allSettled([
 787:         this.scrapeGlassdoorData(companyName),
 788:         this.scrapeLinkedInData(companyName),
 789:         website ? this.scrapeCompanyWebsite(website) : Promise.resolve(null),
 790:         this.scrapeNewsData(companyName),
 791:         this.scrapeInstagramPublic(companyName),
 792:         this.scrapeFacebookPublic(companyName),
 793:         this.scrapeGoogleReviewsSummary(companyName)
 794:       ]);
 795:       // Contact info (best effort) if website known
 796:       let contactInfo: { emails: string[]; phones: string[]; addresses: string[] } | null = null
 797:       try {
 798:         if (website) contactInfo = await this.scrapeContactInfoFromWebsite(website)
 799:       } catch {}
 800: 
 801:       // Merge the data
 802:       if (glassdoorData.status === 'fulfilled' && glassdoorData.value) {
 803:         data.glassdoorRating = glassdoorData.value.rating;
 804:         data.glassdoorReviews = glassdoorData.value.reviews;
 805:         data.culture = glassdoorData.value.culture;
 806:         data.benefits = glassdoorData.value.benefits;
 807:         addSource('glassdoor')
 808:       }
 809: 
 810:       if (linkedinData.status === 'fulfilled' && linkedinData.value) {
 811:         data.linkedinData = linkedinData.value;
 812:         if (!data.industry && linkedinData.value.industry) {
 813:           data.industry = linkedinData.value.industry;
 814:         }
 815:         if (!data.size && linkedinData.value.size) {
 816:           data.size = linkedinData.value.size;
 817:         }
 818:         addSource('linkedin')
 819:       }
 820: 
 821:       if (websiteData.status === 'fulfilled' && websiteData.value) {
 822:         data.description = websiteData.value.description;
 823:         if (!data.industry && websiteData.value.industry) {
 824:           data.industry = websiteData.value.industry;
 825:         }
 826:         addSource('website')
 827:       }
 828:       if (contactInfo && (contactInfo.emails.length || contactInfo.phones.length || contactInfo.addresses.length)) {
 829:         ;(data as any).contactInfo = contactInfo
 830:         addSource('website-contact')
 831:       }
 832: 
 833:       if (newsData.status === 'fulfilled' && newsData.value) {
 834:         data.recentNews = newsData.value;
 835:         addSource('google-news')
 836:       }
 837: 
 838:       if (instaData.status === 'fulfilled' && instaData.value) {
 839:         data.socialMedia = data.socialMedia || {}
 840:         data.socialMedia.instagram = instaData.value as any
 841:         addSource('instagram')
 842:       }
 843: 
 844:       if (fbData.status === 'fulfilled' && fbData.value) {
 845:         data.socialMedia = data.socialMedia || {}
 846:         data.socialMedia.facebook = fbData.value as any
 847:         addSource('facebook')
 848:       }
 849: 
 850:       if (gRev.status === 'fulfilled' && gRev.value) {
 851:         ;(data as any).googleReviewsRating = (gRev.value as any).rating
 852:         ;(data as any).googleReviewsCount = (gRev.value as any).count
 853:         addSource('google-reviews')
 854:       }
 855: 
 856:       // Generate fallback data if we don't have enough info
 857:       if (!data.culture || data.culture.length === 0) {
 858:         data.culture = this.generateFallbackCulture(companyName);
 859:       }
 860: 
 861:       if (!data.benefits || data.benefits.length === 0) {
 862:         data.benefits = this.generateFallbackBenefits();
 863:       }
 864: 
 865:       if (!data.description) {
 866:         data.description = this.generateFallbackDescription(companyName);
 867:       }
 868: 
 869:       data.sources = sources
 870:     } catch (error) {
 871:       console.error('Error scraping company data:', error);
 872:       // Return basic data with fallbacks
 873:       return {
 874:         companyName,
 875:         website,
 876:         culture: this.generateFallbackCulture(companyName),
 877:         benefits: this.generateFallbackBenefits(),
 878:         description: this.generateFallbackDescription(companyName),
 879:       };
 880:     }
 881: 
 882:     return data;
 883:   }
 884: 
 885:   private async discoverOfficialWebsite(companyName: string): Promise<string | null> {
 886:     if (!this.browser) return null
 887:     const page = await this.browser.newPage()
 888:     try {
 889:       await this.configurePage(page)
 890:       const q = `https://www.google.com/search?q=${encodeURIComponent(companyName)}`
 891:       await page.goto(q, { waitUntil: 'domcontentloaded', timeout: 30000 })
 892:       await this.sleep(800 + Math.random()*700)
 893:       const url = await page.$$eval('a[href^="http"]', els => {
 894:         const badHosts = ['linkedin.com','facebook.com','instagram.com','glassdoor.com','crunchbase.com','wikipedia.org','news.google.com','youtube.com','twitter.com','x.com']
 895:         const candidates = els.map(a => (a as HTMLAnchorElement).href).filter(h => {
 896:           try {
 897:             const u = new URL(h)
 898:             return !badHosts.some(b => u.hostname.includes(b))
 899:           } catch { return false }
 900:         })
 901:         return candidates[0] || ''
 902:       })
 903:       if (!url) return null
 904:       try { const u = new URL(url); return `${u.protocol}//${u.hostname}` } catch { return null }
 905:     } catch { return null } finally { await page.close() }
 906:   }
 907: 
 908:   async scrapeContactInfoFromWebsite(website: string): Promise<{ emails: string[]; phones: string[]; addresses: string[] }> {
 909:     if (!this.browser) await this.initialize();
 910:     const results = { emails: [] as string[], phones: [] as string[], addresses: [] as string[] };
 911:     const candidates = [website, `${website.replace(/\/?$/, '/') }contact`, `${website.replace(/\/?$/, '/') }about`];
 912:     const page = await this.browser!.newPage();
 913:     try {
 914:       page.setDefaultNavigationTimeout(45000)
 915:       page.setDefaultTimeout(45000)
 916:       for (const url of candidates) {
 917:         try {
 918:           await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 });
 919:           await new Promise(r => setTimeout(r, 1000));
 920:           const html = await page.content();
 921:           // Emails from mailto and plain text
 922:           const mailtos = await page.$$eval('a[href^="mailto:"]', els => els.map(a => (a as HTMLAnchorElement).getAttribute('href') || ''));
 923:           const mailtoClean = mailtos.map(h => h.replace(/^mailto:/i, '').trim()).filter(Boolean);
 924:           const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
 925:           const textEmails = (html.match(emailRegex) || []).map(e => e.trim());
 926:           const phoneRegex = /(\+?\d[\s-]?)?(\(?\d{3}\)?[\s-]?)?\d{3}[\s-]?\d{4}/g;
 927:           const phones = (html.match(phoneRegex) || []).map(p => p.trim());
 928:           // Address heuristic: lines with street/ave/blvd/suite
 929:           const addressRegex = /(\d+\s+[^\n,]+(?:Street|St\.|Avenue|Ave\.|Road|Rd\.|Boulevard|Blvd\.|Lane|Ln\.|Suite|Ste\.)[^\n<]{0,80})/gi;
 930:           const addresses = (html.match(addressRegex) || []).map(a => a.trim());
 931:           results.emails.push(...mailtoClean, ...textEmails);
 932:           results.phones.push(...phones);
 933:           results.addresses.push(...addresses);
 934:         } catch {
 935:           continue;
 936:         }
 937:       }
 938:     } finally {
 939:       await page.close();
 940:     }
 941:     // Deduplicate
 942:     results.emails = Array.from(new Set(results.emails));
 943:     results.phones = Array.from(new Set(results.phones));
 944:     results.addresses = Array.from(new Set(results.addresses));
 945:     return results;
 946:   }
 947: 
 948:   async searchHiringContacts(companyName: string, roleHints: string[] = [], locationHint?: string): Promise<Array<{ name: string; title: string; profileUrl?: string; source: string }>> {
 949:     if (!this.browser) await this.initialize();
 950:     if (!this.browser) return []
 951:     const page = await this.browser!.newPage();
 952:     const people: Array<{ name: string; title: string; profileUrl?: string; source: string }> = [];
 953:     try {
 954:       const query = `${companyName} ${roleHints.join(' OR ')} site:linkedin.com/in ${locationHint || ''}`.trim();
 955:       const url = `https://www.google.com/search?q=${encodeURIComponent(query)}`;
 956:       await page.goto(url, { waitUntil: 'networkidle2', timeout: 15000 });
 957:       await new Promise(r => setTimeout(r, 2000));
 958:       const results = await page.evaluate(() => {
 959:         const items: Array<{ title: string; href: string; snippet: string }> = [];
 960:         const nodes = document.querySelectorAll('a[href^="http"]');
 961:         nodes.forEach((a) => {
 962:           const href = (a as HTMLAnchorElement).href;
 963:           const h3 = a.querySelector('h3');
 964:           const title = h3?.textContent || '';
 965:           const parent = a.closest('div') as HTMLElement | null;
 966:           const snippet = parent?.querySelector('span, div')?.textContent || '';
 967:           if (title && href && /linkedin\.com\/in\//i.test(href)) {
 968:             items.push({ title: title.trim(), href, snippet: snippet.trim() });
 969:           }
 970:         });
 971:         return items.slice(0, 10);
 972:       });
 973:       for (const r of results) {
 974:         // Heuristic to split name and title: "Name - Title - Company" or "Name | Title"
 975:         const parts = r.title.split(/[-|–]\s*/);
 976:         const name = parts[0]?.trim() || r.title;
 977:         const title = parts.slice(1).join(' - ').trim() || r.snippet;
 978:         if (name) people.push({ name, title, profileUrl: r.href, source: 'google-linkedin' });
 979:       }
 980:     } catch {
 981:       // ignore
 982:     } finally {
 983:       await page.close();
 984:     }
 985:     return people;
 986:   }
 987: 
 988:   async scrapeGlassdoorReviewsSummary(companyName: string): Promise<{ pros: string[]; cons: string[] } | null> {
 989:     if (!this.browser) await this.initialize();
 990:     const page = await this.browser!.newPage();
 991:     try {
 992:       page.setDefaultNavigationTimeout(45000)
 993:       page.setDefaultTimeout(45000)
 994:       const searchUrl = `https://www.glassdoor.com/Reviews/${companyName.replace(/\s+/g, '-')}-reviews-SRCH_KE0,${companyName.length}.htm`;
 995:       await this.gotoWithRetry(page, searchUrl, 'domcontentloaded', 30000)
 996:       await new Promise(r => setTimeout(r, 2000));
 997:       const data = await page.evaluate(() => {
 998:         const textContent = document.body.innerText || '';
 999:         const pros: string[] = [];
1000:         const cons: string[] = [];
1001:         // Simple heuristic: look for lines following "Pros" or "Cons"
1002:         const lines = textContent.split('\n').map(l => l.trim()).filter(Boolean);
1003:         for (let i = 0; i < lines.length; i++) {
1004:           if (/^pros\b/i.test(lines[i]) && lines[i+1]) pros.push(lines[i+1].slice(0, 200));
1005:           if (/^cons\b/i.test(lines[i]) && lines[i+1]) cons.push(lines[i+1].slice(0, 200));
1006:         }
1007:         return { pros: Array.from(new Set(pros)).slice(0, 5), cons: Array.from(new Set(cons)).slice(0, 5) };
1008:       });
1009:       return data;
1010:     } catch (e) {
1011:       console.error('Glassdoor summary error:', e);
1012:       return null;
1013:     } finally {
1014:       await page.close();
1015:     }
1016:   }
1017: 
1018:   computeSentimentFromProsCons(pros: string[] = [], cons: string[] = []): number {
1019:     const p = pros.length, c = cons.length
1020:     if (p + c === 0) return 50
1021:     return Math.max(0, Math.min(100, Math.round((p / (p + c)) * 100)))
1022:   }
1023: 
1024:   private async scrapeGlassdoorData(companyName: string): Promise<{
1025:     rating?: number;
1026:     reviews?: number;
1027:     culture?: string[];
1028:     benefits?: string[];
1029:   } | null> {
1030:     if (!this.browser) return null;
1031: 
1032:     const page = await this.browser.newPage();
1033: 
1034:     try {
1035:       page.setDefaultNavigationTimeout(45000)
1036:       page.setDefaultTimeout(45000)
1037:       await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
1038:       await page.setViewport({ width: 1366, height: 768 });
1039: 
1040:       const searchUrl = `https://www.glassdoor.com/Reviews/${companyName.replace(/\s+/g, '-')}-reviews-SRCH_KE0,${companyName.length}.htm`;
1041: 
1042:       await this.gotoWithRetry(page, searchUrl, 'domcontentloaded', 30000)
1043: 
1044:       // Wait for content to load
1045:       await new Promise(r => setTimeout(r, 2000));
1046: 
1047:       const data = await page.evaluate(() => {
1048:         const result: any = {};
1049: 
1050:         // Get overall rating
1051:         const ratingElement = document.querySelector('[data-test="rating-info"] .css-1cw89uz');
1052:         if (ratingElement) {
1053:           const ratingText = ratingElement.textContent?.trim();
1054:           if (ratingText) {
1055:             const rating = parseFloat(ratingText);
1056:             if (!isNaN(rating) && rating >= 1 && rating <= 5) {
1057:               result.rating = rating;
1058:             }
1059:           }
1060:         }
1061: 
1062:         // Get number of reviews
1063:         const reviewsElement = document.querySelector('[data-test="rating-info"] .css-1cw89uz + span');
1064:         if (reviewsElement) {
1065:           const reviewsText = reviewsElement.textContent?.trim();
1066:           if (reviewsText) {
1067:             const reviewsMatch = reviewsText.match(/([\d,]+)\s*reviews?/i);
1068:             if (reviewsMatch) {
1069:               result.reviews = parseInt(reviewsMatch[1].replace(/,/g, ''));
1070:             }
1071:           }
1072:         }
1073: 
1074:         // Get company culture insights
1075:         const cultureElements = document.querySelectorAll('.css-1cw89uz');
1076:         const culture: string[] = [];
1077:         cultureElements.forEach(el => {
1078:           const text = el.textContent?.trim();
1079:           if (text && text.length > 10 && text.length < 100) {
1080:             culture.push(text);
1081:           }
1082:         });
1083:         if (culture.length > 0) {
1084:           result.culture = culture.slice(0, 5);
1085:         }
1086: 
1087:         // Get benefits if available
1088:         const benefitElements = document.querySelectorAll('[data-test*="benefit"], .benefit, .perk');
1089:         const benefits: string[] = [];
1090:         benefitElements.forEach(el => {
1091:           const text = el.textContent?.trim();
1092:           if (text && text.length > 3 && text.length < 50) {
1093:             benefits.push(text);
1094:           }
1095:         });
1096:         if (benefits.length > 0) {
1097:           result.benefits = benefits.slice(0, 8);
1098:         }
1099: 
1100:         return result;
1101:       });
1102: 
1103:       return data;
1104:     } catch (error) {
1105:       console.error('Glassdoor scraping error:', error);
1106:       return null;
1107:     } finally {
1108:       await page.close();
1109:     }
1110:   }
1111: 
1112:   private async scrapeLinkedInData(companyName: string): Promise<{
1113:     companyPage: string;
1114:     employeeCount?: number;
1115:     followers?: number;
1116:     industry?: string;
1117:     size?: string;
1118:     recentPosts?: Array<{
1119:       content: string;
1120:       postedAt: Date;
1121:       engagement: number;
1122:     }>;
1123:   } | null> {
1124:     if (!this.browser) return null;
1125: 
1126:     const page = await this.browser.newPage();
1127: 
1128:     try {
1129:       page.setDefaultNavigationTimeout(45000)
1130:       page.setDefaultTimeout(45000)
1131:       await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
1132:       await page.setViewport({ width: 1366, height: 768 });
1133: 
1134:       // Prefer company vanity, but allow a Google fallback if page lacks data
1135:       const vanity = companyName.toLowerCase().replace(/\s+/g, '')
1136:       const searchUrl = `https://www.linkedin.com/company/${vanity}`;
1137: 
1138:       await page.goto(searchUrl, {
1139:         waitUntil: 'domcontentloaded',
1140:         timeout: 30000
1141:       });
1142: 
1143:       // Wait for content to load
1144:       await new Promise(r => setTimeout(r, 3000));
1145: 
1146:       let data = await page.evaluate(() => {
1147:         const result: any = {
1148:           companyPage: window.location.href
1149:         };
1150: 
1151:         // Get follower count
1152:         const followerSelectors = [
1153:           '.org-top-card-summary-info-list__info-item',
1154:           '[data-test-id="company-followers-count"]',
1155:           '.org-top-card-summary__follower-count'
1156:         ];
1157: 
1158:         for (const selector of followerSelectors) {
1159:           const element = document.querySelector(selector);
1160:           if (element) {
1161:             const text = element.textContent?.trim();
1162:             if (text) {
1163:               const followerMatch = text.match(/([\d,]+)\s*(?:followers?|people)/i);
1164:               if (followerMatch) {
1165:                 result.followers = parseInt(followerMatch[1].replace(/,/g, ''));
1166:                 break;
1167:               }
1168:             }
1169:           }
1170:         }
1171: 
1172:         // Get employee count
1173:         const employeeSelectors = [
1174:           '.org-about-company-module__company-size',
1175:           '[data-test-id="company-employees-count"]',
1176:           '.org-about-company-module__company-staff-count-range'
1177:         ];
1178: 
1179:         for (const selector of employeeSelectors) {
1180:           const element = document.querySelector(selector);
1181:           if (element) {
1182:             const text = element.textContent?.trim();
1183:             if (text) {
1184:               const employeeMatch = text.match(/([\d,]+)(?:\s*-\s*([\d,]+))?\s*employees?/i);
1185:               if (employeeMatch) {
1186:                 result.employeeCount = employeeMatch[2]
1187:                   ? (parseInt(employeeMatch[1].replace(/,/g, '')) + parseInt(employeeMatch[2].replace(/,/g, ''))) / 2
1188:                   : parseInt(employeeMatch[1].replace(/,/g, ''));
1189:                 break;
1190:               }
1191:             }
1192:           }
1193:         }
1194: 
1195:         // Get industry and size info
1196:         const infoElements = document.querySelectorAll('.org-page-details__definition-text, .org-about-company-module__company-size');
1197:         infoElements.forEach(el => {
1198:           const text = el.textContent?.trim();
1199:           if (text) {
1200:             // Try to identify industry
1201:             if (!result.industry && text.length > 3 && text.length < 30) {
1202:               result.industry = text;
1203:             }
1204:             // Try to identify company size
1205:             if (!result.size && text.match(/\d+/)) {
1206:               result.size = text;
1207:             }
1208:           }
1209:         });
1210: 
1211:         return result;
1212:       });
1213:       if (!data || (!data.followers && !data.employeeCount)) {
1214:         try {
1215:           const q = `https://www.google.com/search?q=${encodeURIComponent(companyName + ' site:linkedin.com/company')}`
1216:           await this.gotoWithRetry(page, q, 'domcontentloaded', 30000)
1217:           await new Promise(r=>setTimeout(r,1500))
1218:           const link = await page.$$eval('a[href^="http"]', els => {
1219:             const cand = els.map(a => (a as HTMLAnchorElement).href)
1220:             const good = cand.find(h => /linkedin\.com\/company\//i.test(h))
1221:             return good || ''
1222:           })
1223:           if (link) {
1224:             await this.gotoWithRetry(page, link, 'domcontentloaded', 30000)
1225:             await new Promise(r=>setTimeout(r,1200))
1226:             const data2 = await page.evaluate(() => {
1227:               const out: any = { companyPage: window.location.href }
1228:               const followersEl = document.querySelector('.org-top-card-summary__follower-count, .org-top-card-summary-info-list__info-item')
1229:               const t = followersEl?.textContent || ''
1230:               const m = t.match(/([\d,]+)\s*(followers|people)/i)
1231:               if (m) out.followers = parseInt(m[1].replace(/,/g, ''))
1232:               return out
1233:             })
1234:             data = { ...data, ...data2 }
1235:           }
1236:         } catch {}
1237:       }
1238: 
1239:       return data;
1240:     } catch (error) {
1241:       console.error('LinkedIn scraping error:', error);
1242:       return null;
1243:     } finally {
1244:       await page.close();
1245:     }
1246:   }
1247: 
1248:   private async scrapeInstagramPublic(companyName: string): Promise<{
1249:     handle: string;
1250:     followers: number;
1251:     recentPosts: Array<{ caption: string; postedAt: Date; likes: number; comments: number }>;
1252:   } | null> {
1253:     if (!this.browser) return null;
1254:     const page = await this.browser.newPage();
1255:     try {
1256:       page.setDefaultNavigationTimeout(45000)
1257:       page.setDefaultTimeout(45000)
1258:       await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
1259:       const q = `https://www.google.com/search?q=${encodeURIComponent(companyName + ' site:instagram.com')}`
1260:       await this.gotoWithRetry(page, q, 'domcontentloaded', 30000)
1261:       await new Promise(r=>setTimeout(r,1000))
1262:       const igUrl = await page.$$eval('a[href^="http"]', els => {
1263:         const urls = els.map(a => (a as HTMLAnchorElement).href)
1264:         const candidate = urls.find(h => /instagram\.com\//i.test(h)) || ''
1265:         return candidate
1266:       })
1267:       if (!igUrl) return null
1268:       await this.gotoWithRetry(page, igUrl, 'domcontentloaded', 30000)
1269:       await new Promise(r=>setTimeout(r,1200))
1270:       const result = await page.evaluate(() => {
1271:         function parseCount(s: string): number {
1272:           const m = s.trim().toLowerCase().replace(/,/g,'');
1273:           if (/k$/.test(m)) return Math.round(parseFloat(m) * 1000)
1274:           if (/m$/.test(m)) return Math.round(parseFloat(m) * 1000000)
1275:           const n = parseFloat(m)
1276:           return isNaN(n) ? 0 : Math.round(n)
1277:         }
1278:         const handle = window.location.pathname.split('/').filter(Boolean)[0] || ''
1279:         const meta = document.querySelector('meta[property="og:description"]') as HTMLMetaElement | null
1280:         let followers = 0
1281:         if (meta?.content) {
1282:           const m = meta.content.match(/([\d.,]+\s*[kKmM]?)\s+Followers?/)
1283:           if (m) followers = parseCount(m[1])
1284:         }
1285:         const captions: string[] = []
1286:         document.querySelectorAll('article img[alt]').forEach(img => {
1287:           const alt = (img as HTMLImageElement).alt
1288:           if (alt && alt.length > 5) captions.push(alt.substring(0, 200))
1289:         })
1290:         const recentPosts = captions.slice(0,6).map(c => ({ caption: c, postedAt: new Date(), likes: 0, comments: 0 }))
1291:         return { handle, followers, recentPosts }
1292:       })
1293:       return result
1294:     } catch (e) {
1295:       return null
1296:     } finally {
1297:       await page.close()
1298:     }
1299:   }
1300: 
1301:   private async scrapeFacebookPublic(companyName: string): Promise<{
1302:     pageUrl: string;
1303:     followers: number;
1304:     recentPosts: Array<{ content: string; postedAt: Date; reactions: number }>;
1305:   } | null> {
1306:     if (!this.browser) return null;
1307:     const page = await this.browser.newPage();
1308:     try {
1309:       page.setDefaultNavigationTimeout(45000)
1310:       page.setDefaultTimeout(45000)
1311:       await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
1312:       const q = `https://www.google.com/search?q=${encodeURIComponent(companyName + ' site:facebook.com')}`
1313:       await this.gotoWithRetry(page, q, 'domcontentloaded', 30000)
1314:       await new Promise(r=>setTimeout(r,1000))
1315:       const fbUrl = await page.$$eval('a[href^="http"]', els => {
1316:         const urls = els.map(a => (a as HTMLAnchorElement).href)
1317:         const candidate = urls.find(h => /facebook\.com\//i.test(h)) || ''
1318:         return candidate
1319:       })
1320:       if (!fbUrl) return null
1321:       await this.gotoWithRetry(page, fbUrl, 'domcontentloaded', 30000)
1322:       await new Promise(r=>setTimeout(r,1500))
1323:       const result = await page.evaluate(() => {
1324:         const pageUrl = window.location.href
1325:         const text = document.body.innerText || ''
1326:         let followers = 0
1327:         const m = text.match(/([\d.,]+)\s+followers/i)
1328:         if (m) followers = parseInt(m[1].replace(/,/g,''))
1329:         const posts: Array<{ content: string; postedAt: Date; reactions: number }> = []
1330:         const articles = Array.from(document.querySelectorAll('div[role="article"]'))
1331:         for (const a of articles.slice(0,5)) {
1332:           const content = (a.textContent || '').trim().replace(/\s+/g,' ').substring(0, 300)
1333:           if (content.length > 20) posts.push({ content, postedAt: new Date(), reactions: 0 })
1334:         }
1335:         return { pageUrl, followers, recentPosts: posts }
1336:       })
1337:       return result
1338:     } catch (e) {
1339:       return null
1340:     } finally {
1341:       await page.close()
1342:     }
1343:   }
1344: 
1345:   private async scrapeGoogleReviewsSummary(companyName: string): Promise<{ rating?: number; count?: number } | null> {
1346:     if (!this.browser) return null;
1347:     const page = await this.browser.newPage();
1348:     try {
1349:       page.setDefaultNavigationTimeout(45000)
1350:       page.setDefaultTimeout(45000)
1351:       await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
1352:       const q = `https://www.google.com/search?q=${encodeURIComponent(companyName + ' reviews')}`
1353:       await this.gotoWithRetry(page, q, 'domcontentloaded', 30000)
1354:       await new Promise(r=>setTimeout(r,1500))
1355:       const data = await page.evaluate(() => {
1356:         const txt = document.body.innerText || ''
1357:         let rating: number | undefined
1358:         let count: number | undefined
1359:         const ratingMatch = txt.match(/([0-9]\.[0-9])\s*\(?(?:based on\s*)?([\d,]+)\s+Google reviews\)?/i) || txt.match(/([0-9]\.[0-9])\s+rating\s+from\s+([\d,]+)\s+Google reviews/i)
1360:         if (ratingMatch) {
1361:           rating = parseFloat(ratingMatch[1])
1362:           count = parseInt(ratingMatch[2].replace(/,/g,''))
1363:         } else {
1364:           const countOnly = txt.match(/([\d,]+)\s+Google reviews/i)
1365:           if (countOnly) count = parseInt(countOnly[1].replace(/,/g,''))
1366:         }
1367:         return { rating, count }
1368:       })
1369:       if (!data.rating && !data.count) return null
1370:       return data
1371:     } catch (e) {
1372:       return null
1373:     } finally {
1374:       await page.close()
1375:     }
1376:   }
1377: 
1378:   async scrapeCompanyWebsite(website: string): Promise<{
1379:     description?: string;
1380:     industry?: string;
1381:   } | null> {
1382:     if (!this.browser) return null;
1383: 
1384:     const page = await this.browser.newPage();
1385: 
1386:     try {
1387:       page.setDefaultNavigationTimeout(45000)
1388:       page.setDefaultTimeout(45000)
1389:       await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
1390:       await page.setViewport({ width: 1366, height: 768 });
1391: 
1392:       await this.gotoWithRetry(page, website, 'domcontentloaded', 30000)
1393: 
1394:       // Wait for content to load
1395:       await new Promise(r => setTimeout(r, 2000));
1396: 
1397:       const data = await page.evaluate(() => {
1398:         const result: any = {};
1399: 
1400:         // Get meta description
1401:         const descriptionMeta = document.querySelector('meta[name="description"]');
1402:         if (descriptionMeta) {
1403:           const description = descriptionMeta.getAttribute('content')?.trim();
1404:           if (description && description.length > 50) {
1405:             result.description = description;
1406:           }
1407:         }
1408: 
1409:         // Get about text from common selectors
1410:         if (!result.description) {
1411:           const aboutSelectors = [
1412:             '[class*="about"]',
1413:             '[id*="about"]',
1414:             '.about-us',
1415:             '#about',
1416:             '[class*="mission"]',
1417:             '[class*="company"]'
1418:           ];
1419: 
1420:           for (const selector of aboutSelectors) {
1421:             const elements = document.querySelectorAll(`${selector} p, ${selector} div`);
1422:             let text = '';
1423: 
1424:             elements.forEach(el => {
1425:               const content = el.textContent?.trim();
1426:               if (content && content.length > 20) {
1427:                 text += content + ' ';
1428:                 if (text.length > 500) return;
1429:               }
1430:             });
1431: 
1432:             if (text.length > 100) {
1433:               result.description = text.substring(0, 500);
1434:               break;
1435:             }
1436:           }
1437:         }
1438: 
1439:         // Try to infer industry from content
1440:         const bodyText = document.body.textContent || '';
1441:         const industryKeywords = {
1442:           'technology': ['software', 'tech', 'digital', 'app', 'platform', 'saas'],
1443:           'healthcare': ['health', 'medical', 'patient', 'care', 'clinical'],
1444:           'finance': ['financial', 'banking', 'investment', 'wealth', 'capital'],
1445:           'retail': ['retail', 'shopping', 'store', 'product', 'consumer'],
1446:           'consulting': ['consulting', 'advisory', 'strategy', 'management'],
1447:           'education': ['education', 'learning', 'training', 'student', 'academic']
1448:         };
1449: 
1450:         for (const [industry, keywords] of Object.entries(industryKeywords)) {
1451:           const matches = keywords.filter(keyword =>
1452:             bodyText.toLowerCase().includes(keyword.toLowerCase())
1453:           );
1454:           if (matches.length >= 2) {
1455:             result.industry = industry.charAt(0).toUpperCase() + industry.slice(1);
1456:             break;
1457:           }
1458:         }
1459: 
1460:         return result;
1461:       });
1462: 
1463:       // If description is still missing, crawl common subpages best-effort
1464:       if (!data.description) {
1465:         const links = await page.$$eval('a[href^="/"], a[href^="http"]', els => Array.from(new Set(els.map(a => (a as HTMLAnchorElement).getAttribute('href') || ''))).slice(0, 40))
1466:         const candidates = links.filter(h => /about|company|who|mission|values|culture|careers|leadership|team|news|press/i.test(h || '')).slice(0, 8)
1467:         for (const rel of candidates) {
1468:           try {
1469:             const base = new URL(window.location.href)
1470:             const url = rel.startsWith('http') ? rel : new URL(rel, `${base.protocol}//${base.host}`).toString()
1471:             // fetch content via XHR inside the page context to avoid new navigation
1472:             const html = await fetch(url, { credentials: 'omit' }).then(r => r.text()).catch(()=> '')
1473:             const text = html.replace(/<script[\s\S]*?<\/script>/gi, '').replace(/<style[\s\S]*?<\/style>/gi,'').replace(/<[^>]+>/g,' ')
1474:             const cleaned = text.split(/\s+/).join(' ').trim()
1475:             if (cleaned.length > 200 && !data.description) {
1476:               data.description = cleaned.slice(0, 600)
1477:             }
1478:             if (data.description) break
1479:           } catch {}
1480:         }
1481:       }
1482: 
1483:       return data;
1484:     } catch (error) {
1485:       console.error('Website scraping error:', error);
1486:       return null;
1487:     } finally {
1488:       await page.close();
1489:     }
1490:   }
1491: 
1492:   private async scrapeNewsData(companyName: string): Promise<Array<{
1493:     title: string;
1494:     url: string;
1495:     publishedAt: Date;
1496:     summary: string;
1497:   }> | null> {
1498:     if (!this.browser) return null;
1499: 
1500:     const page = await this.browser.newPage();
1501: 
1502:     try {
1503:       page.setDefaultNavigationTimeout(45000)
1504:       page.setDefaultTimeout(45000)
1505:       await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
1506:       await page.setViewport({ width: 1366, height: 768 });
1507: 
1508:       // Use Google News search
1509:       const searchQuery = encodeURIComponent(`${companyName} company news`);
1510:       const newsUrl = `https://www.google.com/search?q=${searchQuery}&tbm=nws&tbs=qdr:m`;
1511: 
1512:       await this.gotoWithRetry(page, newsUrl, 'domcontentloaded', 30000)
1513: 
1514:       await new Promise(r => setTimeout(r, 2000));
1515: 
1516:       const newsData = await page.evaluate(() => {
1517:         const articles: Array<{
1518:           title: string;
1519:           url: string;
1520:           publishedAt: Date;
1521:           summary: string;
1522:         }> = [];
1523: 
1524:         // Google News selectors
1525:         const newsItems = document.querySelectorAll('[data-ved], .WlydOe');
1526: 
1527:         newsItems.forEach((item, index) => {
1528:           if (index >= 5) return; // Limit to 5 news items
1529: 
1530:           const titleElement = item.querySelector('h3, .mCBkyc');
1531:           const linkElement = item.querySelector('a[href]');
1532:           const summaryElement = item.querySelector('.GI74Re, .c0cFT, .s3v9rd');
1533:           const dateElement = item.querySelector('.OSrXXb, .eNg7of, .f');
1534: 
1535:           if (titleElement && linkElement) {
1536:             const title = titleElement.textContent?.trim();
1537:             const url = linkElement.getAttribute('href');
1538:             const summary = summaryElement?.textContent?.trim() || '';
1539:             const dateText = dateElement?.textContent?.trim();
1540: 
1541:             if (title && url) {
1542:               articles.push({
1543:                 title,
1544:                 url: url.startsWith('http') ? url : `https://news.google.com${url}`,
1545:                 publishedAt: dateText ? new Date(dateText) : new Date(),
1546:                 summary: summary || title
1547:               });
1548:             }
1549:           }
1550:         });
1551: 
1552:         return articles.filter(article => article.title.length > 10);
1553:       });
1554: 
1555:       return newsData.length > 0 ? newsData : null;
1556:     } catch (error) {
1557:       console.error('News scraping error:', error);
1558:       return null;
1559:     } finally {
1560:       await page.close();
1561:     }
1562:   }
1563: 
1564:   private generateFallbackCulture(companyName: string): string[] {
1565:     // Generate generic but positive culture descriptions
1566:     const cultures = [
1567:       'Collaborative and innovative work environment',
1568:       'Focus on employee development and growth',
1569:       'Work-life balance and flexible arrangements',
1570:       'Diverse and inclusive workplace culture',
1571:       'Strong emphasis on teamwork and communication',
1572:       'Commitment to excellence and quality',
1573:       'Supportive leadership and mentorship programs'
1574:     ];
1575: 
1576:     // Return 3-4 random cultures
1577:     const shuffled = cultures.sort(() => 0.5 - Math.random());
1578:     return shuffled.slice(0, 4);
1579:   }
1580: 
1581:   private generateFallbackBenefits(): string[] {
1582:     return [
1583:       'Health, dental, and vision insurance',
1584:       '401k matching program',
1585:       'Flexible work arrangements',
1586:       'Professional development budget',
1587:       'Paid time off and holidays',
1588:       'Wellness and fitness programs',
1589:       'Modern office facilities'
1590:     ];
1591:   }
1592: 
1593:   private generateFallbackDescription(companyName: string): string {
1594:     return '';
1595:   }
1596: }
1597: 
1598: // Export a singleton instance
1599: export const webScraper = new WebScraperService();
</file>

<file path="src/middleware.ts">
 1: import { NextResponse } from 'next/server'
 2: import type { NextRequest } from 'next/server'
 3: import { RateLimiter } from './lib/rate-limiter'
 4: 
 5: // Simple PII redaction for logs and error responses
 6: function redactPII(value: string): string {
 7:   if (!value) return value
 8:   let out = value.replace(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g, '[REDACTED_EMAIL]')
 9:   out = out.replace(/(\+?\d[\s-]?)?(\(?\d{3}\)?[\s-]?)?\d{3}[\s-]?\d{4}/g, '[REDACTED_PHONE]')
10:   out = out.replace(/\b\d{1,5}\s+[\w\s]+(Street|St\.|Avenue|Ave\.|Road|Rd\.|Boulevard|Blvd\.|Lane|Ln\.|Suite|Ste\.)\b[^\n<]{0,80}/gi, '[REDACTED_ADDRESS]')
11:   return out
12: }
13: 
14: export async function middleware(request: NextRequest) {
15:   const response = NextResponse.next()
16: 
17:   // Security headers
18:   response.headers.set('X-DNS-Prefetch-Control', 'off')
19:   response.headers.set('X-Frame-Options', 'SAMEORIGIN')
20:   response.headers.set('X-Content-Type-Options', 'nosniff')
21:   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
22:   response.headers.set('Permissions-Policy', 'geolocation=(), microphone=(), camera=()')
23: 
24:   // HSTS for production
25:   if (process.env.NODE_ENV === 'production') {
26:     response.headers.set('Strict-Transport-Security', 'max-age=63072000; includeSubDomains; preload')
27:   }
28: 
29:   // CORS for API routes
30:   if (request.nextUrl.pathname.startsWith('/api/')) {
31:     response.headers.set('Access-Control-Allow-Origin', process.env.ALLOWED_ORIGINS || 'http://localhost:3000')
32:     response.headers.set('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE,OPTIONS')
33:     response.headers.set('Access-Control-Allow-Headers', 'Content-Type,Authorization')
34:   }
35: 
36:   // Rate limiting for API routes
37:   if (request.nextUrl.pathname.startsWith('/api/')) {
38:     const path = request.nextUrl.pathname
39:     
40:     // Skip rate limiting for NextAuth internal endpoints
41:     if (path.startsWith('/api/auth/session') || 
42:         path.startsWith('/api/auth/csrf') || 
43:         path.startsWith('/api/auth/_log') ||
44:         path.startsWith('/api/auth/providers')) {
45:       return response
46:     }
47:     
48:     const rateLimiter = RateLimiter.getInstance()
49:     let rateLimitType: any = 'api-general'
50: 
51:     // Determine appropriate rate limit based on route
52:     if (path.includes('/auth/')) {
53:       rateLimitType = 'auth-session'
54:     } else if (
55:       path.includes('/resume/customize') ||
56:       path.includes('/cover-letter/generate') ||
57:       path.includes('/company/research') ||
58:       path.includes('/job/analyze') ||
59:       path.includes('/v2/') ||
60:       path.includes('/assistants/')
61:     ) {
62:       rateLimitType = 'ai-requests'
63:     } else if (
64:       path.includes('/upload') ||
65:       path.includes('/resume/upload') ||
66:       path.includes('/applications/') && path.includes('/attach')
67:     ) {
68:       rateLimitType = 'file-upload'
69:     } else if (
70:       path.includes('/resume/customize') ||
71:       path.includes('/cover-letter/generate')
72:     ) {
73:       rateLimitType = 'resume-customize'
74:     } else if (path.includes('/cover-letter/')) {
75:       rateLimitType = 'cover-letter'
76:     }
77: 
78:     const rateLimitResult = await rateLimiter.createMiddleware(rateLimitType)(request)
79:     if (rateLimitResult) {
80:       return rateLimitResult
81:     }
82:   }
83: 
84:   return response
85: }
86: 
87: export const config = {
88:   matcher: ['/((?!_next/static|_next/image|favicon.ico|sw.js).*)'],
89: }
</file>

<file path="src/middleware/validation.middleware.ts">
 1: import { z } from 'zod'
 2: import { NextRequest, NextResponse } from 'next/server'
 3: 
 4: export function withValidation<T>(schema: z.ZodSchema<T>) {
 5:   return function (handler: (req: NextRequest, data: T) => Promise<NextResponse>) {
 6:     return async function (req: NextRequest) {
 7:       try {
 8:         const body = await req.json()
 9:         const validatedData = schema.parse(body)
10:         return handler(req, validatedData)
11:       } catch (error) {
12:         if (error instanceof z.ZodError) {
13:           return NextResponse.json(
14:             { error: 'Validation failed', details: error.errors },
15:             { status: 400 }
16:           )
17:         }
18:         throw error
19:       }
20:     }
21:   }
22: }
23: 
24: // Validation schemas
25: export const resumeCustomizeSchema = z.object({
26:   resumeId: z.string().min(1),
27:   jobDescription: z.string().min(50).max(10000),
28:   jobTitle: z.string().min(1).max(200),
29:   companyName: z.string().min(1).max(200),
30:   tone: z.enum(['professional', 'casual', 'enthusiastic']).optional(),
31:   overrideResumeText: z.string().max(50000).optional(),
32: })
33: 
34: export const companyResearchSchema = z.object({
35:   companyName: z.string().min(1).max(200),
36:   website: z.string().url().optional(),
37:   includeNews: z.boolean().optional(),
38:   includeReviews: z.boolean().optional(),
39: })
</file>

<file path="src/models/ABEvent.ts">
 1: import mongoose, { Schema, Document } from 'mongoose'
 2: 
 3: export interface IABEvent extends Document {
 4:   userId: Schema.Types.ObjectId
 5:   applicationId?: Schema.Types.ObjectId
 6:   resumeId?: Schema.Types.ObjectId
 7:   variant?: 'A' | 'B'
 8:   action: 'view' | 'select' | 'download' | 'submit' | 'interview' | 'offer'
 9:   meta?: Record<string, any>
10:   createdAt: Date
11: }
12: 
13: const ABEventSchema: Schema = new Schema({
14:   userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
15:   applicationId: { type: Schema.Types.ObjectId, ref: 'JobApplication' },
16:   resumeId: { type: Schema.Types.ObjectId, ref: 'Resume' },
17:   variant: { type: String, enum: ['A','B'] },
18:   action: { type: String, enum: ['view','select','download','submit','interview','offer'], required: true },
19:   meta: { type: Object },
20: }, { timestamps: true })
21: 
22: ABEventSchema.index({ userId: 1, createdAt: -1 })
23: ABEventSchema.index({ applicationId: 1 })
24: ABEventSchema.index({ resumeId: 1 })
25: 
26: export default mongoose.models.ABEvent || mongoose.model<IABEvent>('ABEvent', ABEventSchema)
</file>

<file path="src/models/AlertPreference.ts">
 1: import mongoose, { Schema, Document } from 'mongoose'
 2: 
 3: export interface IAlertPreference extends Document {
 4:   userId: mongoose.Types.ObjectId
 5:   enabled: boolean
 6:   channels: {
 7:     email: boolean
 8:     inApp: boolean
 9:     push: boolean
10:   }
11:   alertTypes: {
12:     newJobMatches: boolean
13:     applicationUpdates: boolean
14:     interviewReminders: boolean
15:     followUpReminders: boolean
16:     deadlineAlerts: boolean
17:     responseTimeAlerts: boolean
18:     networkActivity: boolean
19:   }
20:   frequency: 'realtime' | 'hourly' | 'daily' | 'weekly'
21:   quietHours: {
22:     enabled: boolean
23:     start: string // HH:mm format
24:     end: string   // HH:mm format
25:     timezone: string
26:   }
27:   jobMatchCriteria?: {
28:     jobTitles: string[]
29:     locations: string[]
30:     minSalary?: number
31:     workTypes: string[] // remote, hybrid, onsite
32:     industries: string[]
33:   }
34: }
35: 
36: const AlertPreferenceSchema = new Schema<IAlertPreference>({
37:   userId: { type: Schema.Types.ObjectId, ref: 'User', required: true, unique: true, index: true },
38:   enabled: { type: Boolean, default: true },
39:   channels: {
40:     email: { type: Boolean, default: true },
41:     inApp: { type: Boolean, default: true },
42:     push: { type: Boolean, default: false }
43:   },
44:   alertTypes: {
45:     newJobMatches: { type: Boolean, default: true },
46:     applicationUpdates: { type: Boolean, default: true },
47:     interviewReminders: { type: Boolean, default: true },
48:     followUpReminders: { type: Boolean, default: true },
49:     deadlineAlerts: { type: Boolean, default: true },
50:     responseTimeAlerts: { type: Boolean, default: false },
51:     networkActivity: { type: Boolean, default: false }
52:   },
53:   frequency: { 
54:     type: String, 
55:     enum: ['realtime', 'hourly', 'daily', 'weekly'],
56:     default: 'realtime'
57:   },
58:   quietHours: {
59:     enabled: { type: Boolean, default: false },
60:     start: { type: String, default: '22:00' },
61:     end: { type: String, default: '08:00' },
62:     timezone: { type: String, default: 'America/Toronto' }
63:   },
64:   jobMatchCriteria: {
65:     jobTitles: [{ type: String }],
66:     locations: [{ type: String }],
67:     minSalary: { type: Number },
68:     workTypes: [{ type: String }],
69:     industries: [{ type: String }]
70:   }
71: }, {
72:   timestamps: true
73: })
74: 
75: export default mongoose.models.AlertPreference || mongoose.model<IAlertPreference>('AlertPreference', AlertPreferenceSchema)
</file>

<file path="src/models/Application.ts">
 1: import mongoose, { Schema, Document } from 'mongoose'
 2: 
 3: export interface IApplication extends Document {
 4:   userId: mongoose.Types.ObjectId
 5:   jobId?: string
 6:   company: string
 7:   jobTitle: string
 8:   location?: string
 9:   salary?: string
10:   recipient: string
11:   status: 'applied' | 'interview_scheduled' | 'interviewed' | 'offer_received' | 'accepted' | 'rejected' | 'withdrawn'
12:   appliedAt: Date
13:   interviewDate?: Date
14:   attachments: string[]
15:   
16:   // Interview Prep Data
17:   interviewPrep?: {
18:     questions: string[]
19:     companyInsights: string
20:     talkingPoints: string[]
21:     preparedAt: Date
22:   }
23:   
24:   // Salary Negotiation Data
25:   salaryData?: {
26:     marketMin: number
27:     marketMedian: number
28:     marketMax: number
29:     userTarget: number
30:     negotiationTips: string[]
31:     preparedAt: Date
32:   }
33:   
34:   metadata: any
35: }
36: 
37: const ApplicationSchema = new Schema<IApplication>({
38:   userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
39:   jobId: { type: String },
40:   company: { type: String, required: true },
41:   jobTitle: { type: String, required: true },
42:   location: { type: String },
43:   salary: { type: String },
44:   recipient: { type: String, required: true },
45:   status: { 
46:     type: String, 
47:     enum: ['applied', 'interview_scheduled', 'interviewed', 'offer_received', 'accepted', 'rejected', 'withdrawn'], 
48:     default: 'applied' 
49:   },
50:   appliedAt: { type: Date, default: Date.now },
51:   interviewDate: { type: Date },
52:   attachments: [{ type: String }],
53:   
54:   // Interview Prep Data
55:   interviewPrep: {
56:     questions: [{ type: String }],
57:     companyInsights: { type: String },
58:     talkingPoints: [{ type: String }],
59:     preparedAt: { type: Date }
60:   },
61:   
62:   // Salary Negotiation Data
63:   salaryData: {
64:     marketMin: { type: Number },
65:     marketMedian: { type: Number },
66:     marketMax: { type: Number },
67:     userTarget: { type: Number },
68:     negotiationTips: [{ type: String }],
69:     preparedAt: { type: Date }
70:   },
71:   
72:   metadata: { type: Schema.Types.Mixed }
73: }, {
74:   timestamps: true
75: })
76: 
77: // Add indexes for performance
78: ApplicationSchema.index({ userId: 1, appliedAt: -1 })
79: ApplicationSchema.index({ userId: 1, status: 1 })
80: ApplicationSchema.index({ company: 1 })
81: 
82: export default mongoose.models.Application || mongoose.model('Application', ApplicationSchema)
</file>

<file path="src/models/CandidateShowcase.ts">
 1: import mongoose, { Schema, Document } from 'mongoose'
 2: 
 3: export interface ICandidateShowcase extends Document {
 4:   userId: Schema.Types.ObjectId
 5:   headline: string
 6:   anonymous: boolean
 7:   skills: string[]
 8:   desiredRoles: string[]
 9:   location?: string
10:   availability?: 'immediate' | '2-weeks' | '1-month' | 'flexible'
11:   minSalary?: string
12:   summary?: string
13:   links?: Array<{ label: string; url: string }>
14:   createdAt: Date
15:   updatedAt: Date
16: }
17: 
18: const CandidateShowcaseSchema: Schema = new Schema({
19:   userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
20:   headline: { type: String, required: true, trim: true },
21:   anonymous: { type: Boolean, default: true },
22:   skills: { type: [String], default: [] },
23:   desiredRoles: { type: [String], default: [] },
24:   location: { type: String, trim: true },
25:   availability: { type: String, enum: ['immediate','2-weeks','1-month','flexible'], default: 'flexible' },
26:   minSalary: { type: String, trim: true },
27:   summary: { type: String, trim: true },
28:   links: { type: [{ label: String, url: String }], default: [] },
29: }, { timestamps: true })
30: 
31: CandidateShowcaseSchema.index({ createdAt: -1 })
32: CandidateShowcaseSchema.index({ anonymous: 1, createdAt: -1 })
33: 
34: export default mongoose.models.CandidateShowcase || mongoose.model<ICandidateShowcase>('CandidateShowcase', CandidateShowcaseSchema)
</file>

<file path="src/models/CompanyData.ts">
  1: import mongoose, { Schema, Document } from 'mongoose';
  2: 
  3: export interface ICompanyNews extends Document {
  4:   title: string;
  5:   url: string;
  6:   publishedAt: Date;
  7:   summary: string;
  8: }
  9: 
 10: export interface ILinkedInPost extends Document {
 11:   content: string;
 12:   postedAt: Date;
 13:   engagement: number;
 14: }
 15: 
 16: export interface ILinkedInData extends Document {
 17:   companyPage: string;
 18:   employeeCount?: number;
 19:   followers?: number;
 20:   recentPosts?: ILinkedInPost[];
 21: }
 22: 
 23: export interface ITweet extends Document {
 24:   text: string;
 25:   createdAt: Date;
 26:   likes: number;
 27:   retweets: number;
 28: }
 29: 
 30: export interface ITwitterData extends Document {
 31:   handle: string;
 32:   followers: number;
 33:   recentTweets: ITweet[];
 34: }
 35: 
 36: export interface IFacebookPost extends Document {
 37:   content: string;
 38:   postedAt: Date;
 39:   reactions: number;
 40: }
 41: 
 42: export interface IFacebookData extends Document {
 43:   pageUrl: string;
 44:   followers: number;
 45:   recentPosts: IFacebookPost[];
 46: }
 47: 
 48: export interface IInstagramPost extends Document {
 49:   caption: string;
 50:   postedAt: Date;
 51:   likes: number;
 52:   comments: number;
 53: }
 54: 
 55: export interface IInstagramData extends Document {
 56:   handle: string;
 57:   followers: number;
 58:   recentPosts: IInstagramPost[];
 59: }
 60: 
 61: export interface ISocialMediaData extends Document {
 62:   twitter?: ITwitterData;
 63:   facebook?: IFacebookData;
 64:   instagram?: IInstagramData;
 65: }
 66: 
 67: export interface ICompanyData extends Document {
 68:   companyName: string;
 69:   website?: string;
 70:   industry?: string;
 71:   size?: string;
 72:   description?: string;
 73:   culture?: string[];
 74:   benefits?: string[];
 75:   recentNews?: ICompanyNews[];
 76:   glassdoorRating?: number;
 77:   glassdoorReviews?: number;
 78:   linkedinData?: ILinkedInData;
 79:   socialMedia?: ISocialMediaData;
 80:   hiringContacts?: Array<{ name: string; title: string; profileUrl?: string; source: string }>;
 81:   contactInfo?: { emails: string[]; phones: string[]; addresses: string[] };
 82:   googleReviewsRating?: number;
 83:   googleReviewsCount?: number;
 84:   cachedAt: Date;
 85:   expiresAt: Date;
 86: }
 87: 
 88: const CompanyNewsSchema: Schema = new Schema({
 89:   title: {
 90:     type: String,
 91:     required: true,
 92:   },
 93:   url: {
 94:     type: String,
 95:     required: true,
 96:   },
 97:   publishedAt: {
 98:     type: Date,
 99:     required: true,
100:   },
101:   summary: {
102:     type: String,
103:     required: true,
104:   },
105: });
106: 
107: const LinkedInPostSchema: Schema = new Schema({
108:   content: {
109:     type: String,
110:     required: true,
111:   },
112:   postedAt: {
113:     type: Date,
114:     required: true,
115:   },
116:   engagement: {
117:     type: Number,
118:     default: 0,
119:   },
120: });
121: 
122: const LinkedInDataSchema: Schema = new Schema({
123:   companyPage: {
124:     type: String,
125:     required: true,
126:   },
127:   employeeCount: Number,
128:   followers: Number,
129:   recentPosts: [LinkedInPostSchema],
130: });
131: 
132: const TweetSchema: Schema = new Schema({
133:   text: {
134:     type: String,
135:     required: true,
136:   },
137:   createdAt: {
138:     type: Date,
139:     required: true,
140:   },
141:   likes: {
142:     type: Number,
143:     default: 0,
144:   },
145:   retweets: {
146:     type: Number,
147:     default: 0,
148:   },
149: });
150: 
151: const TwitterDataSchema: Schema = new Schema({
152:   handle: {
153:     type: String,
154:     required: true,
155:   },
156:   followers: {
157:     type: Number,
158:     default: 0,
159:   },
160:   recentTweets: [TweetSchema],
161: });
162: 
163: const FacebookPostSchema: Schema = new Schema({
164:   content: {
165:     type: String,
166:     required: true,
167:   },
168:   postedAt: {
169:     type: Date,
170:     required: true,
171:   },
172:   reactions: {
173:     type: Number,
174:     default: 0,
175:   },
176: });
177: 
178: const FacebookDataSchema: Schema = new Schema({
179:   pageUrl: {
180:     type: String,
181:     required: true,
182:   },
183:   followers: {
184:     type: Number,
185:     default: 0,
186:   },
187:   recentPosts: [FacebookPostSchema],
188: });
189: 
190: const InstagramPostSchema: Schema = new Schema({
191:   caption: {
192:     type: String,
193:     required: true,
194:   },
195:   postedAt: {
196:     type: Date,
197:     required: true,
198:   },
199:   likes: {
200:     type: Number,
201:     default: 0,
202:   },
203:   comments: {
204:     type: Number,
205:     default: 0,
206:   },
207: });
208: 
209: const InstagramDataSchema: Schema = new Schema({
210:   handle: {
211:     type: String,
212:     required: true,
213:   },
214:   followers: {
215:     type: Number,
216:     default: 0,
217:   },
218:   recentPosts: [InstagramPostSchema],
219: });
220: 
221: const SocialMediaDataSchema: Schema = new Schema({
222:   twitter: TwitterDataSchema,
223:   facebook: FacebookDataSchema,
224:   instagram: InstagramDataSchema,
225: });
226: 
227: const CompanyDataSchema: Schema = new Schema({
228:   companyName: {
229:     type: String,
230:     required: true,
231:     unique: true,
232:     trim: true,
233:   },
234:   website: {
235:     type: String,
236:     trim: true,
237:   },
238:   industry: {
239:     type: String,
240:     trim: true,
241:   },
242:   size: {
243:     type: String,
244:     trim: true,
245:   },
246:   description: {
247:     type: String,
248:     trim: true,
249:   },
250:   culture: [{
251:     type: String,
252:     trim: true,
253:   }],
254:   benefits: [{
255:     type: String,
256:     trim: true,
257:   }],
258:   recentNews: [CompanyNewsSchema],
259:   glassdoorRating: {
260:     type: Number,
261:     min: 1,
262:     max: 5,
263:   },
264:   glassdoorReviews: Number,
265:   linkedinData: LinkedInDataSchema,
266:   socialMedia: SocialMediaDataSchema,
267:   hiringContacts: [{ name: String, title: String, profileUrl: String, source: String }],
268:   contactInfo: {
269:     emails: [String],
270:     phones: [String],
271:     addresses: [String],
272:   },
273:   googleReviewsRating: Number,
274:   googleReviewsCount: Number,
275:   cachedAt: {
276:     type: Date,
277:     default: Date.now,
278:   },
279:   expiresAt: {
280:     type: Date,
281:     default: () => new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
282:   },
283: }, {
284:   timestamps: false, // We handle caching manually
285: });
286: 
287: // Add indexes for better query performance
288: // companyName is already indexed via unique: true
289: CompanyDataSchema.index({ expiresAt: 1 }); // Find expired cache entries
290: CompanyDataSchema.index({ cachedAt: -1 }); // Sort by cache date
291: CompanyDataSchema.index({ industry: 1 }); // Filter by industry
292: CompanyDataSchema.index({ industry: 1, cachedAt: -1 }); // Compound: industry + freshness
293: CompanyDataSchema.index({ glassdoorRating: -1 }); // Sort by rating
294: CompanyDataSchema.index({ companyName: 'text', industry: 'text', description: 'text' }); // Full-text search
295: 
296: export default mongoose.models.CompanyData || mongoose.model<ICompanyData>('CompanyData', CompanyDataSchema);
</file>

<file path="src/models/Counter.ts">
 1: import mongoose, { Schema, Document } from 'mongoose';
 2: 
 3: export interface ICounter extends Document {
 4:   key: string;
 5:   value: number;
 6: }
 7: 
 8: const CounterSchema: Schema = new Schema({
 9:   key: { type: String, required: true, unique: true },
10:   value: { type: Number, required: true, default: 0 },
11: });
12: 
13: export default mongoose.models.Counter || mongoose.model<ICounter>('Counter', CounterSchema);
</file>

<file path="src/models/CoverLetter.ts">
 1: import mongoose, { Schema, Document } from 'mongoose'
 2: 
 3: export interface ICoverLetter extends Document {
 4:   userId: mongoose.Types.ObjectId
 5:   jobTitle: string
 6:   companyName: string
 7:   jobDescription?: string
 8:   resumeSnapshot?: string
 9:   content: string
10:   tone?: 'professional' | 'casual' | 'enthusiastic'
11:   length?: 'short' | 'medium' | 'long'
12:   applicationId?: mongoose.Types.ObjectId
13:   createdAt: Date
14:   updatedAt: Date
15: }
16: 
17: const CoverLetterSchema = new Schema<ICoverLetter>({
18:   userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
19:   jobTitle: { type: String, required: true, trim: true },
20:   companyName: { type: String, required: true, trim: true },
21:   jobDescription: { type: String },
22:   resumeSnapshot: { type: String },
23:   content: { type: String, required: true },
24:   tone: { type: String, enum: ['professional', 'casual', 'enthusiastic'], default: 'professional' },
25:   length: { type: String, enum: ['short', 'medium', 'long'], default: 'medium' },
26:   applicationId: { type: Schema.Types.ObjectId, ref: 'JobApplication' },
27: }, { timestamps: true })
28: 
29: // Add indexes for better query performance
30: CoverLetterSchema.index({ userId: 1, createdAt: -1 }); // User's cover letters sorted by date
31: CoverLetterSchema.index({ userId: 1, companyName: 1 }); // Find by user and company
32: CoverLetterSchema.index({ userId: 1, jobTitle: 1 }); // Find by user and job title
33: CoverLetterSchema.index({ applicationId: 1 }); // Link to job application
34: CoverLetterSchema.index({ userId: 1, updatedAt: -1 }); // Recently updated cover letters
35: CoverLetterSchema.index({ companyName: 1, jobTitle: 1 }); // Find by company and role
36: CoverLetterSchema.index({ jobTitle: 'text', companyName: 'text', content: 'text' }); // Full-text search
37: 
38: export default mongoose.models.CoverLetter || mongoose.model<ICoverLetter>('CoverLetter', CoverLetterSchema)
</file>

<file path="src/models/EmployerBid.ts">
 1: import mongoose, { Schema, Document } from 'mongoose'
 2: 
 3: export interface IEmployerBid extends Document {
 4:   showcaseId: Schema.Types.ObjectId
 5:   employerName: string
 6:   role: string
 7:   salary: string
 8:   notes?: string
 9:   contactEmail?: string
10:   createdAt: Date
11: }
12: 
13: const EmployerBidSchema: Schema = new Schema({
14:   showcaseId: { type: Schema.Types.ObjectId, ref: 'CandidateShowcase', required: true },
15:   employerName: { type: String, required: true },
16:   role: { type: String, required: true },
17:   salary: { type: String, required: true },
18:   notes: { type: String },
19:   contactEmail: { type: String },
20: }, { timestamps: true })
21: 
22: EmployerBidSchema.index({ showcaseId: 1, createdAt: -1 })
23: 
24: export default mongoose.models.EmployerBid || mongoose.model<IEmployerBid>('EmployerBid', EmployerBidSchema)
</file>

<file path="src/models/JobApplication.ts">
  1: import mongoose, { Document, Schema } from 'mongoose'
  2: 
  3: export type ApplicationStatus =
  4:   | 'saved'
  5:   | 'applied'
  6:   | 'interviewing'
  7:   | 'offer'
  8:   | 'rejected'
  9:   | 'withdrawn'
 10: 
 11: export interface IJobApplication extends Document {
 12:   userId: mongoose.Types.ObjectId
 13:   jobTitle: string
 14:   companyName: string
 15:   jobDescription: string
 16:   jobUrl?: string
 17:   applicationStatus: ApplicationStatus
 18:   appliedDate?: Date | null
 19:   followUpDates: Date[]
 20:   notes?: string
 21:   companyResearch?: mongoose.Types.ObjectId
 22:   analysis?: any
 23:   context?: any
 24:   coverLetterId?: mongoose.Types.ObjectId
 25:   resumeVersionId?: mongoose.Types.ObjectId
 26:   // Outcomes & tracking
 27:   applicationSource?: string
 28:   variantUsed?: 'A' | 'B' | 'C'
 29:   views?: number
 30:   interviews?: number
 31:   offers?: number
 32:   createdAt: Date
 33:   updatedAt: Date
 34: }
 35: 
 36: const JobApplicationSchema = new Schema<IJobApplication>({
 37:   userId: {
 38:     type: Schema.Types.ObjectId,
 39:     ref: 'User',
 40:     required: true,
 41:   },
 42:   jobTitle: {
 43:     type: String,
 44:     required: true,
 45:     trim: true,
 46:   },
 47:   companyName: {
 48:     type: String,
 49:     required: true,
 50:     trim: true,
 51:   },
 52:   jobDescription: {
 53:     type: String,
 54:     required: true,
 55:   },
 56:   jobUrl: {
 57:     type: String,
 58:     trim: true,
 59:   },
 60:   applicationStatus: {
 61:     type: String,
 62:     enum: ['saved', 'applied', 'interviewing', 'offer', 'rejected', 'withdrawn'],
 63:     default: 'saved',
 64:   },
 65:   appliedDate: {
 66:     type: Date,
 67:     default: null,
 68:   },
 69:   followUpDates: [
 70:     {
 71:       type: Date,
 72:     }
 73:   ],
 74:   notes: {
 75:     type: String,
 76:   },
 77:   companyResearch: {
 78:     type: Schema.Types.ObjectId,
 79:     ref: 'CompanyData',
 80:   },
 81:   analysis: {
 82:     type: Schema.Types.Mixed,
 83:     default: null,
 84:   },
 85:   context: {
 86:     type: Schema.Types.Mixed,
 87:     default: null,
 88:   },
 89:   coverLetterId: {
 90:     type: Schema.Types.ObjectId,
 91:     ref: 'CoverLetter',
 92:   },
 93:   resumeVersionId: {
 94:     type: Schema.Types.ObjectId,
 95:   },
 96:   applicationSource: { type: String, trim: true },
 97:   variantUsed: { type: String, enum: ['A','B','C'], default: undefined },
 98:   views: { type: Number, default: 0 },
 99:   interviews: { type: Number, default: 0 },
100:   offers: { type: Number, default: 0 },
101: }, {
102:   timestamps: true,
103: })
104: 
105: // Indexes to support common queries
106: JobApplicationSchema.index({ userId: 1, createdAt: -1 }); // User's applications sorted by date
107: JobApplicationSchema.index({ userId: 1, applicationStatus: 1 }); // Filter by user and status
108: JobApplicationSchema.index({ userId: 1, updatedAt: -1 }); // Recently updated applications
109: JobApplicationSchema.index({ companyName: 1 }); // Find by company
110: JobApplicationSchema.index({ jobTitle: 1 }); // Find by job title
111: JobApplicationSchema.index({ applicationStatus: 1, appliedDate: -1 }); // Status timeline queries
112: JobApplicationSchema.index({ appliedDate: 1 }); // Sort by application date
113: JobApplicationSchema.index({ userId: 1, applicationStatus: 1, createdAt: -1 }); // Compound: user's apps by status and date
114: JobApplicationSchema.index({ jobTitle: 'text', companyName: 'text', jobDescription: 'text', notes: 'text' }); // Full-text search
115: 
116: export default mongoose.models.JobApplication || mongoose.model<IJobApplication>('JobApplication', JobApplicationSchema)
</file>

<file path="src/models/JobBoardIntegration.ts">
  1: import mongoose, { Document, Schema } from 'mongoose'
  2: 
  3: export interface IJobBoardIntegration extends Document {
  4:   userId: mongoose.Types.ObjectId
  5:   boardName: string // linkedin, ziprecruiter, monster, etc.
  6:   boardDisplayName: string
  7:   status: 'disconnected' | 'connecting' | 'connected' | 'error' | 'requires_auth'
  8:   apiKey?: string // Encrypted API key
  9:   accessToken?: string // OAuth access token
 10:   refreshToken?: string // OAuth refresh token
 11:   tokenExpiresAt?: Date
 12:   lastSyncAt?: Date
 13:   lastSuccessfulSyncAt?: Date
 14:   syncStatus: 'idle' | 'syncing' | 'success' | 'failed'
 15:   errorMessage?: string
 16:   totalApplications: number
 17:   successfulApplications: number
 18:   lastApplicationAt?: Date
 19:   settings: {
 20:     autoSync: boolean
 21:     syncFrequency: 'manual' | 'daily' | 'weekly'
 22:     defaultResumeId?: mongoose.Types.ObjectId
 23:     defaultCoverLetterId?: mongoose.Types.ObjectId
 24:     notificationPreferences: {
 25:       applicationSubmitted: boolean
 26:       applicationViewed: boolean
 27:       interviewRequested: boolean
 28:       errors: boolean
 29:     }
 30:   }
 31:   metadata: {
 32:     apiVersion?: string
 33:     accountId?: string
 34:     accountName?: string
 35:     accountType?: string
 36:     rateLimits?: {
 37:       requestsPerHour: number
 38:       requestsPerDay: number
 39:       lastRequestAt?: Date
 40:     }
 41:   }
 42:   createdAt: Date
 43:   updatedAt: Date
 44: }
 45: 
 46: const JobBoardIntegrationSchema = new Schema<IJobBoardIntegration>({
 47:   userId: {
 48:     type: Schema.Types.ObjectId,
 49:     ref: 'User',
 50:     required: true
 51:   },
 52:   boardName: {
 53:     type: String,
 54:     required: true,
 55:     enum: ['linkedin', 'ziprecruiter', 'glassdoor', 'monster', 'careerbuilder', 'simplyhired', 'indeed']
 56:   },
 57:   boardDisplayName: {
 58:     type: String,
 59:     required: true
 60:   },
 61:   status: {
 62:     type: String,
 63:     enum: ['disconnected', 'connecting', 'connected', 'error', 'requires_auth'],
 64:     default: 'disconnected'
 65:   },
 66:   apiKey: {
 67:     type: String,
 68:     select: false // Don't include in regular queries for security
 69:   },
 70:   accessToken: {
 71:     type: String,
 72:     select: false
 73:   },
 74:   refreshToken: {
 75:     type: String,
 76:     select: false
 77:   },
 78:   tokenExpiresAt: {
 79:     type: Date
 80:   },
 81:   lastSyncAt: {
 82:     type: Date
 83:   },
 84:   lastSuccessfulSyncAt: {
 85:     type: Date
 86:   },
 87:   syncStatus: {
 88:     type: String,
 89:     enum: ['idle', 'syncing', 'success', 'failed'],
 90:     default: 'idle'
 91:   },
 92:   errorMessage: {
 93:     type: String
 94:   },
 95:   totalApplications: {
 96:     type: Number,
 97:     default: 0
 98:   },
 99:   successfulApplications: {
100:     type: Number,
101:     default: 0
102:   },
103:   lastApplicationAt: {
104:     type: Date
105:   },
106:   settings: {
107:     autoSync: {
108:       type: Boolean,
109:       default: false
110:     },
111:     syncFrequency: {
112:       type: String,
113:       enum: ['manual', 'daily', 'weekly'],
114:       default: 'manual'
115:     },
116:     defaultResumeId: {
117:       type: Schema.Types.ObjectId,
118:       ref: 'Resume'
119:     },
120:     defaultCoverLetterId: {
121:       type: Schema.Types.ObjectId,
122:       ref: 'CoverLetter'
123:     },
124:     notificationPreferences: {
125:       applicationSubmitted: { type: Boolean, default: true },
126:       applicationViewed: { type: Boolean, default: true },
127:       interviewRequested: { type: Boolean, default: true },
128:       errors: { type: Boolean, default: true }
129:     }
130:   },
131:   metadata: {
132:     apiVersion: String,
133:     accountId: String,
134:     accountName: String,
135:     accountType: String,
136:     rateLimits: {
137:       requestsPerHour: { type: Number, default: 100 },
138:       requestsPerDay: { type: Number, default: 1000 },
139:       lastRequestAt: Date
140:     }
141:   }
142: }, {
143:   timestamps: true
144: })
145: 
146: // Indexes for efficient queries
147: JobBoardIntegrationSchema.index({ userId: 1, boardName: 1 }, { unique: true })
148: JobBoardIntegrationSchema.index({ status: 1 })
149: JobBoardIntegrationSchema.index({ syncStatus: 1 })
150: JobBoardIntegrationSchema.index({ 'tokenExpiresAt': 1 })
151: 
152: // Virtual for success rate
153: JobBoardIntegrationSchema.virtual('successRate').get(function() {
154:   if (this.totalApplications === 0) return 0
155:   return Math.round((this.successfulApplications / this.totalApplications) * 100)
156: })
157: 
158: // Method to check if token is expired
159: JobBoardIntegrationSchema.methods.isTokenExpired = function() {
160:   if (!this.tokenExpiresAt) return false
161:   return new Date() > this.tokenExpiresAt
162: }
163: 
164: // Method to update sync status
165: JobBoardIntegrationSchema.methods.updateSyncStatus = function(status: string, errorMessage?: string) {
166:   this.syncStatus = status as any
167:   this.lastSyncAt = new Date()
168: 
169:   if (status === 'success') {
170:     this.lastSuccessfulSyncAt = new Date()
171:     this.errorMessage = undefined
172:   } else if (status === 'failed' && errorMessage) {
173:     this.errorMessage = errorMessage
174:   }
175: 
176:   return this.save()
177: }
178: 
179: // Method to increment application count
180: JobBoardIntegrationSchema.methods.incrementApplications = function(success: boolean = true) {
181:   this.totalApplications += 1
182:   if (success) {
183:     this.successfulApplications += 1
184:   }
185:   this.lastApplicationAt = new Date()
186:   return this.save()
187: }
188: 
189: export default mongoose.models.JobBoardIntegration || mongoose.model<IJobBoardIntegration>('JobBoardIntegration', JobBoardIntegrationSchema)
</file>

<file path="src/models/JobSearchCache.ts">
  1: import mongoose, { Schema, Document } from 'mongoose';
  2: 
  3: /**
  4:  * Job Search Cache Model
  5:  * 
  6:  * Stores job searches for 3 weeks to:
  7:  * - Reduce API calls for similar searches
  8:  * - Track which jobs users have seen
  9:  * - Share results across users with similar keywords
 10:  */
 11: 
 12: export interface IJobSearchCache extends Document {
 13:   // Search parameters (used for matching)
 14:   keywords: string[];
 15:   normalizedKeywords: string[]; // Lowercase, sorted for matching
 16:   location: string;
 17:   workType?: 'remote' | 'hybrid' | 'onsite' | 'any';
 18:   experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';
 19:   
 20:   // Cached job results
 21:   jobs: Array<{
 22:     jobId: string; // Unique identifier for deduplication
 23:     title: string;
 24:     company: string;
 25:     location: string;
 26:     description: string;
 27:     url: string;
 28:     source: string;
 29:     salary?: string;
 30:     postedDate?: Date;
 31:     workType?: string;
 32:     skillMatchScore?: number;
 33:     
 34:     // Tracking
 35:     viewedBy: Schema.Types.ObjectId[]; // Users who have seen this job
 36:     appliedBy: Schema.Types.ObjectId[]; // Users who applied
 37:     savedBy: Schema.Types.ObjectId[]; // Users who saved/bookmarked
 38:   }>;
 39:   
 40:   // Metadata
 41:   searchCount: number; // How many times this search was performed
 42:   lastSearched: Date;
 43:   createdAt: Date;
 44:   expiresAt: Date; // Auto-delete after 3 weeks
 45: }
 46: 
 47: const JobSearchCacheSchema: Schema = new Schema({
 48:   keywords: {
 49:     type: [String],
 50:     required: true,
 51:     index: true
 52:   },
 53:   normalizedKeywords: {
 54:     type: [String],
 55:     required: true,
 56:     index: true
 57:   },
 58:   location: {
 59:     type: String,
 60:     required: true,
 61:     index: true
 62:   },
 63:   workType: {
 64:     type: String,
 65:     enum: ['remote', 'hybrid', 'onsite', 'any'],
 66:     default: 'any'
 67:   },
 68:   experienceLevel: {
 69:     type: String,
 70:     enum: ['entry', 'mid', 'senior', 'executive']
 71:   },
 72:   jobs: [{
 73:     jobId: {
 74:       type: String,
 75:       required: true
 76:     },
 77:     title: {
 78:       type: String,
 79:       required: true
 80:     },
 81:     company: {
 82:       type: String,
 83:       required: true
 84:     },
 85:     location: {
 86:       type: String,
 87:       required: true
 88:     },
 89:     description: {
 90:       type: String,
 91:       required: false,
 92:       default: 'No description available'
 93:     },
 94:     url: {
 95:       type: String,
 96:       required: true
 97:     },
 98:     source: {
 99:       type: String,
100:       required: true
101:     },
102:     salary: String,
103:     postedDate: Date,
104:     workType: String,
105:     skillMatchScore: Number,
106:     
107:     viewedBy: [{
108:       type: Schema.Types.ObjectId,
109:       ref: 'User'
110:     }],
111:     appliedBy: [{
112:       type: Schema.Types.ObjectId,
113:       ref: 'User'
114:     }],
115:     savedBy: [{
116:       type: Schema.Types.ObjectId,
117:       ref: 'User'
118:     }]
119:   }],
120:   searchCount: {
121:     type: Number,
122:     default: 1
123:   },
124:   lastSearched: {
125:     type: Date,
126:     default: Date.now
127:   },
128:   expiresAt: {
129:     type: Date,
130:     default: () => new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // 3 weeks
131:     index: true
132:   }
133: }, {
134:   timestamps: true
135: });
136: 
137: // Compound index for efficient search matching
138: JobSearchCacheSchema.index({ normalizedKeywords: 1, location: 1, workType: 1 });
139: 
140: // TTL index to auto-delete expired caches
141: JobSearchCacheSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });
142: 
143: // CRITICAL FIX: Simpler pre-save validation - only fix descriptions
144: JobSearchCacheSchema.pre('save', function(this: IJobSearchCache, next) {
145:   // Fix empty descriptions ONLY - don't filter jobs
146:   this.jobs.forEach((job: any) => {
147:     if (!job.description || job.description.trim() === '') {
148:       job.description = 'No description available';
149:     }
150:   });
151:   
152:   console.log(`[CACHE] Saving ${this.jobs.length} jobs`);
153:   next();
154: });
155: 
156: // Helper method to check if search matches cache
157: JobSearchCacheSchema.methods.matchesSearch = function(
158:   keywords: string[],
159:   location: string,
160:   workType?: string
161: ): boolean {
162:   const normalizedInput = keywords
163:     .map(k => k.toLowerCase().trim())
164:     .sort()
165:     .join(',');
166:   
167:   const normalizedCache = this.normalizedKeywords.join(',');
168:   
169:   const keywordsMatch = normalizedInput === normalizedCache;
170:   const locationMatch = this.location.toLowerCase() === location.toLowerCase();
171:   const workTypeMatch = !workType || this.workType === workType || this.workType === 'any';
172:   
173:   return keywordsMatch && locationMatch && workTypeMatch;
174: };
175: 
176: // Helper method to mark job as viewed by user
177: JobSearchCacheSchema.methods.markJobViewed = function(
178:   jobId: string,
179:   userId: Schema.Types.ObjectId
180: ): void {
181:   const job = this.jobs.find((j: any) => j.jobId === jobId);
182:   if (job && !job.viewedBy.includes(userId)) {
183:     job.viewedBy.push(userId);
184:   }
185: };
186: 
187: // Helper method to check if user has seen job
188: JobSearchCacheSchema.methods.hasUserSeenJob = function(
189:   jobId: string,
190:   userId: Schema.Types.ObjectId
191: ): boolean {
192:   const job = this.jobs.find((j: any) => j.jobId === jobId);
193:   return job ? job.viewedBy.some((id: any) => id.equals(userId)) : false;
194: };
195: 
196: export default mongoose.models.JobSearchCache || 
197:   mongoose.model<IJobSearchCache>('JobSearchCache', JobSearchCacheSchema);
</file>

<file path="src/models/Message.ts">
 1: import mongoose, { Document, Schema } from 'mongoose'
 2: 
 3: export interface IMessage extends Document {
 4:   senderId: mongoose.Types.ObjectId
 5:   receiverId: mongoose.Types.ObjectId
 6:   conversationId: string // Unique identifier for the conversation between two users
 7:   content: string
 8:   messageType: 'text' | 'image' | 'file' | 'link'
 9:   attachments?: Array<{
10:     type: string
11:     url: string
12:     name: string
13:     size?: number
14:   }>
15:   isRead: boolean
16:   readAt?: Date
17:   createdAt: Date
18:   updatedAt: Date
19: }
20: 
21: const MessageSchema = new Schema<IMessage>({
22:   senderId: {
23:     type: Schema.Types.ObjectId,
24:     ref: 'User',
25:     required: true
26:   },
27:   receiverId: {
28:     type: Schema.Types.ObjectId,
29:     ref: 'User',
30:     required: true
31:   },
32:   conversationId: {
33:     type: String,
34:     required: true
35:   },
36:   content: {
37:     type: String,
38:     required: true
39:   },
40:   messageType: {
41:     type: String,
42:     enum: ['text', 'image', 'file', 'link'],
43:     default: 'text'
44:   },
45:   attachments: [{
46:     type: {
47:       type: String,
48:       required: true
49:     },
50:     url: {
51:       type: String,
52:       required: true
53:     },
54:     name: {
55:       type: String,
56:       required: true
57:     },
58:     size: {
59:       type: Number
60:     }
61:   }],
62:   isRead: {
63:     type: Boolean,
64:     default: false
65:   },
66:   readAt: {
67:     type: Date
68:   }
69: }, {
70:   timestamps: true
71: })
72: 
73: // Generate conversation ID from user IDs (consistent ordering)
74: MessageSchema.pre('save', function(next) {
75:   const userIds = [this.senderId.toString(), this.receiverId.toString()].sort()
76:   this.conversationId = userIds.join('_')
77:   next()
78: })
79: 
80: // Indexes for efficient queries
81: MessageSchema.index({ conversationId: 1, createdAt: -1 })
82: MessageSchema.index({ senderId: 1, createdAt: -1 })
83: MessageSchema.index({ receiverId: 1, createdAt: -1 })
84: MessageSchema.index({ isRead: 1 })
85: 
86: export default mongoose.models.Message || mongoose.model<IMessage>('Message', MessageSchema)
</file>

<file path="src/models/NetworkConnection.ts">
 1: import mongoose, { Document, Schema } from 'mongoose'
 2: 
 3: export interface INetworkConnection extends Document {
 4:   userId: mongoose.Types.ObjectId // The user who initiated or received the connection
 5:   connectedUserId: mongoose.Types.ObjectId // The other user in the connection
 6:   status: 'pending' | 'accepted' | 'declined' | 'blocked'
 7:   initiatedBy: mongoose.Types.ObjectId // Who sent the connection request
 8:   acceptedAt?: Date
 9:   message?: string // Optional message with connection request
10:   createdAt: Date
11:   updatedAt: Date
12: }
13: 
14: const NetworkConnectionSchema = new Schema<INetworkConnection>({
15:   userId: {
16:     type: Schema.Types.ObjectId,
17:     ref: 'User',
18:     required: true
19:   },
20:   connectedUserId: {
21:     type: Schema.Types.ObjectId,
22:     ref: 'User',
23:     required: true
24:   },
25:   status: {
26:     type: String,
27:     enum: ['pending', 'accepted', 'declined', 'blocked'],
28:     default: 'pending'
29:   },
30:   initiatedBy: {
31:     type: Schema.Types.ObjectId,
32:     ref: 'User',
33:     required: true
34:   },
35:   acceptedAt: {
36:     type: Date
37:   },
38:   message: {
39:     type: String
40:   }
41: }, {
42:   timestamps: true
43: })
44: 
45: // Ensure unique connection pairs (prevent duplicate connections)
46: NetworkConnectionSchema.index(
47:   { userId: 1, connectedUserId: 1 },
48:   { unique: true, partialFilterExpression: { status: { $ne: 'declined' } } }
49: )
50: 
51: // Compound indexes for efficient queries
52: NetworkConnectionSchema.index({ userId: 1, status: 1 })
53: NetworkConnectionSchema.index({ connectedUserId: 1, status: 1 })
54: NetworkConnectionSchema.index({ status: 1, createdAt: -1 })
55: 
56: // Pre-save middleware to ensure consistent ordering (smaller ID first)
57: NetworkConnectionSchema.pre('save', function(next) {
58:   if (this.userId > this.connectedUserId) {
59:     const temp = this.userId
60:     this.userId = this.connectedUserId
61:     this.connectedUserId = temp
62:   }
63:   next()
64: })
65: 
66: export default mongoose.models.NetworkConnection || mongoose.model<INetworkConnection>('NetworkConnection', NetworkConnectionSchema)
</file>

<file path="src/models/NetworkPost.ts">
  1: import mongoose, { Document, Schema } from 'mongoose'
  2: 
  3: export interface INetworkPost extends Document {
  4:   userId: mongoose.Types.ObjectId
  5:   userName: string
  6:   userAvatar?: string
  7:   userTitle?: string
  8:   type: 'job_opportunity' | 'career_advice' | 'success_story' | 'question' | 'general'
  9:   title?: string
 10:   content: string
 11:   tags?: string[]
 12:   attachments?: Array<{
 13:     type: 'image' | 'document' | 'link'
 14:     url: string
 15:     name: string
 16:   }>
 17:   likes: mongoose.Types.ObjectId[]
 18:   comments: Array<{
 19:     userId: mongoose.Types.ObjectId
 20:     userName: string
 21:     content: string
 22:     createdAt: Date
 23:   }>
 24:   shares: number
 25:   createdAt: Date
 26:   updatedAt: Date
 27:   visibility: 'public' | 'connections' | 'private'
 28: }
 29: 
 30: const NetworkPostSchema = new Schema<INetworkPost>({
 31:   userId: {
 32:     type: Schema.Types.ObjectId,
 33:     ref: 'User',
 34:     required: true
 35:   },
 36:   userName: {
 37:     type: String,
 38:     required: true
 39:   },
 40:   userAvatar: {
 41:     type: String
 42:   },
 43:   userTitle: {
 44:     type: String
 45:   },
 46:   type: {
 47:     type: String,
 48:     enum: ['job_opportunity', 'career_advice', 'success_story', 'question', 'general'],
 49:     default: 'general'
 50:   },
 51:   title: {
 52:     type: String
 53:   },
 54:   content: {
 55:     type: String,
 56:     required: true
 57:   },
 58:   tags: [{
 59:     type: String
 60:   }],
 61:   attachments: [{
 62:     type: {
 63:       type: String,
 64:       enum: ['image', 'document', 'link']
 65:     },
 66:     url: {
 67:       type: String,
 68:       required: true
 69:     },
 70:     name: {
 71:       type: String,
 72:       required: true
 73:     }
 74:   }],
 75:   likes: [{
 76:     type: Schema.Types.ObjectId,
 77:     ref: 'User'
 78:   }],
 79:   comments: [{
 80:     userId: {
 81:       type: Schema.Types.ObjectId,
 82:       ref: 'User',
 83:       required: true
 84:     },
 85:     userName: {
 86:       type: String,
 87:       required: true
 88:     },
 89:     content: {
 90:       type: String,
 91:       required: true
 92:     },
 93:     createdAt: {
 94:       type: Date,
 95:       default: Date.now
 96:     }
 97:   }],
 98:   shares: {
 99:     type: Number,
100:     default: 0
101:   }
102: }, {
103:   timestamps: true
104: })
105: 
106: // Indexes for better performance
107: NetworkPostSchema.index({ userId: 1, createdAt: -1 })
108: NetworkPostSchema.index({ type: 1, createdAt: -1 })
109: NetworkPostSchema.index({ tags: 1 })
110: NetworkPostSchema.index({ visibility: 1 })
111: NetworkPostSchema.index({ createdAt: -1 })
112: 
113: export default mongoose.models.NetworkPost || mongoose.model<INetworkPost>('NetworkPost', NetworkPostSchema)
</file>

<file path="src/models/Notification.ts">
 1: import mongoose from 'mongoose'
 2: 
 3: const NotificationSchema = new mongoose.Schema({
 4:   userId: {
 5:     type: String,
 6:     required: true,
 7:     index: true
 8:   },
 9:   type: {
10:     type: String,
11:     enum: ['job_match', 'application_update', 'network_activity', 'system_alert', 'career_insight'],
12:     required: true
13:   },
14:   title: {
15:     type: String,
16:     required: true
17:   },
18:   message: {
19:     type: String,
20:     required: true
21:   },
22:   link: {
23:     type: String
24:   },
25:   read: {
26:     type: Boolean,
27:     default: false,
28:     index: true
29:   },
30:   priority: {
31:     type: String,
32:     enum: ['low', 'medium', 'high', 'urgent'],
33:     default: 'medium'
34:   },
35:   metadata: {
36:     jobId: String,
37:     applicationId: String,
38:     companyName: String,
39:     aiInsight: String
40:   },
41:   readAt: {
42:     type: Date
43:   }
44: }, {
45:   timestamps: true
46: })
47: 
48: // Compound index for efficient queries
49: NotificationSchema.index({ userId: 1, read: 1, createdAt: -1 })
50: 
51: // TTL index to auto-delete old notifications after 90 days
52: NotificationSchema.index({ createdAt: 1 }, { expireAfterSeconds: 7776000 })
53: 
54: export default mongoose.models.Notification || mongoose.model('Notification', NotificationSchema)
</file>

<file path="src/models/OAuthToken.ts">
 1: import mongoose, { Schema, Document } from 'mongoose'
 2: 
 3: export interface IOAuthToken extends Document {
 4:   userId: mongoose.Types.ObjectId
 5:   provider: 'gmail' | 'outlook'
 6:   accessToken: string
 7:   refreshToken?: string
 8:   scope?: string
 9:   expiresAt?: Date
10:   createdAt: Date
11:   updatedAt: Date
12: }
13: 
14: const OAuthTokenSchema = new Schema<IOAuthToken>({
15:   userId: { type: Schema.Types.ObjectId, ref: 'User', required: true, index: true },
16:   provider: { type: String, enum: ['gmail','outlook'], required: true, index: true },
17:   accessToken: { type: String, required: true },
18:   refreshToken: { type: String },
19:   scope: { type: String },
20:   expiresAt: { type: Date },
21: }, { timestamps: true })
22: 
23: OAuthTokenSchema.index({ userId: 1, provider: 1 }, { unique: true })
24: 
25: export default mongoose.models.OAuthToken || mongoose.model<IOAuthToken>('OAuthToken', OAuthTokenSchema)
</file>

<file path="src/models/Profile.ts">
 1: import mongoose, { Schema, Document } from 'mongoose';
 2: 
 3: export interface IProfile extends Document {
 4:   userId: string;
 5:   userNo: number;
 6:   plan: 'free' | 'pro' | 'company';
 7:   customerRef?: string;
 8:   title?: string;
 9:   location?: string;
10:   yearsExperience?: number;
11:   seniority?: string;
12:   skills?: string[];
13:   targetTitles?: string[];
14:   industries?: string[];
15:   autopilotMeta?: {
16:     lastRunAt?: Date;
17:     lastFound?: number;
18:     nextRunAt?: Date;
19:   };
20:   preferences?: Record<string, any>;
21:   styleProfile?: {
22:     tone?: string;
23:     sentenceLength?: string;
24:     vocabulary?: string;
25:     examples?: string[];
26:   };
27:   createdAt: Date;
28:   updatedAt: Date;
29: }
30: 
31: const ProfileSchema: Schema = new Schema({
32:   userId: { type: String, required: true, unique: true, index: true },
33:   userNo: { type: Number, required: true, unique: true, index: true },
34:   plan: { type: String, enum: ['free','pro','company'], default: 'free' },
35:   customerRef: { type: String },
36:   title: { type: String },
37:   location: { type: String },
38:   yearsExperience: { type: Number },
39:   seniority: { type: String },
40:   skills: { type: [String], default: [] },
41:   targetTitles: { type: [String], default: [] },
42:   industries: { type: [String], default: [] },
43:   autopilotMeta: { type: Schema.Types.Mixed },
44:   preferences: { type: Schema.Types.Mixed },
45:   styleProfile: { type: Schema.Types.Mixed },
46: }, { timestamps: true })
47: 
48: // Add indexes for better query performance
49: // userId and userNo are already indexed via unique: true
50: ProfileSchema.index({ plan: 1 }); // Filter by subscription plan
51: ProfileSchema.index({ location: 1 }); // Filter by location
52: ProfileSchema.index({ skills: 1 }); // Filter by skills (array index)
53: ProfileSchema.index({ industries: 1 }); // Filter by target industries
54: ProfileSchema.index({ seniority: 1 }); // Filter by seniority level
55: ProfileSchema.index({ 'autopilotMeta.nextRunAt': 1 }); // Autopilot scheduling
56: ProfileSchema.index({ plan: 1, createdAt: -1 }); // Compound: plan analytics
57: 
58: export default mongoose.models.Profile || mongoose.model<IProfile>('Profile', ProfileSchema);
</file>

<file path="src/models/Resume.ts">
  1: import mongoose, { Schema, Document } from 'mongoose';
  2: 
  3: export interface ICustomizedResume extends Document {
  4:   jobApplicationId: Schema.Types.ObjectId;
  5:   customizedText: string;
  6:   jobTitle: string;
  7:   companyName: string;
  8:   matchScore: number;
  9:   createdAt: Date;
 10:   fileName?: string;
 11: }
 12: 
 13: export interface IResume extends Document {
 14:   userId: Schema.Types.ObjectId;
 15:   originalFileName: string;
 16:   fileUrl: string;
 17:   extractedText: string;
 18:   customizedVersions: ICustomizedResume[];
 19:   userName?: string;
 20:   contactEmail?: string;
 21:   contactPhone?: string;
 22:   yearsExperience?: number;
 23:   // Autopilot cache fields
 24:   resumeSignals?: {
 25:     keywords: string[];
 26:     location?: string;
 27:     locations?: string[];
 28:   };
 29:   comprehensiveResearch?: Record<string, unknown>; // Full comprehensive research data
 30:   comprehensiveResearchAt?: Date; // When research was cached
 31:   resumeVariants?: {
 32:     variantA: string;
 33:     variantB: string;
 34:     recommendations: string[];
 35:     generatedAt: Date;
 36:   };
 37:   coverLetters?: {
 38:     variantA: string;
 39:     variantB: string;
 40:     personalization: string[];
 41:     generatedAt: Date;
 42:   };
 43:   emailOutreach?: {
 44:     subjects: string[];
 45:     templates: Array<{ type: string; body: string }>;
 46:     mailtoLink: string;
 47:     generatedAt: Date;
 48:   };
 49:   createdAt: Date;
 50:   updatedAt: Date;
 51: }
 52: 
 53: const CustomizedResumeSchema: Schema = new Schema({
 54:   jobApplicationId: {
 55:     type: Schema.Types.ObjectId,
 56:     ref: 'JobApplication',
 57:     required: true,
 58:   },
 59:   customizedText: {
 60:     type: String,
 61:     required: true,
 62:   },
 63:   jobTitle: {
 64:     type: String,
 65:     required: true,
 66:   },
 67:   companyName: {
 68:     type: String,
 69:     required: true,
 70:   },
 71:   matchScore: {
 72:     type: Number,
 73:     min: 0,
 74:     max: 100,
 75:     default: 0,
 76:   },
 77:   fileName: { type: String, trim: true },
 78: }, {
 79:   timestamps: true,
 80: });
 81: 
 82: const ResumeSchema: Schema = new Schema({
 83:   userId: {
 84:     type: Schema.Types.ObjectId,
 85:     ref: 'User',
 86:     required: true,
 87:   },
 88:   originalFileName: {
 89:     type: String,
 90:     required: true,
 91:     trim: true,
 92:   },
 93:   fileUrl: {
 94:     type: String,
 95:     required: false,
 96:     trim: true,
 97:   },
 98:   extractedText: {
 99:     type: String,
100:     required: true,
101:   },
102:   userName: { type: String, trim: true },
103:   contactEmail: { type: String, trim: true },
104:   contactPhone: { type: String, trim: true },
105:   yearsExperience: { type: Number, min: 0 },
106:   customizedVersions: [CustomizedResumeSchema],
107:   // Autopilot cache fields
108:   resumeSignals: {
109:     type: Schema.Types.Mixed,
110:     required: false
111:   },
112:   comprehensiveResearch: {
113:     type: Schema.Types.Mixed,
114:     required: false
115:   },
116:   comprehensiveResearchAt: {
117:     type: Date,
118:     required: false
119:   },
120:   resumeVariants: {
121:     type: Schema.Types.Mixed,
122:     required: false
123:   },
124:   coverLetters: {
125:     type: Schema.Types.Mixed,
126:     required: false
127:   },
128:   emailOutreach: {
129:     type: Schema.Types.Mixed,
130:     required: false
131:   },
132: }, {
133:   timestamps: true,
134: });
135: 
136: // Add indexes for better query performance
137: ResumeSchema.index({ userId: 1 }); // Find by user
138: ResumeSchema.index({ createdAt: -1 }); // Sort by date
139: ResumeSchema.index({ userId: 1, createdAt: -1 }); // Compound: user's resumes sorted by date
140: ResumeSchema.index({ userId: 1, updatedAt: -1 }); // Compound: user's recently updated resumes
141: ResumeSchema.index({ 'customizedVersions.jobApplicationId': 1 }); // Find customized versions
142: ResumeSchema.index({ extractedText: 'text', userName: 'text', originalFileName: 'text' }); // Full-text search
143: 
144: // Autopilot cache indexes
145: ResumeSchema.index({ userId: 1, comprehensiveResearchAt: -1 }); // Find recent research
146: ResumeSchema.index({ 'resumeSignals.keywords': 1 }); // Search by keywords
147: ResumeSchema.index({ 'resumeSignals.location': 1 }); // Search by location
148: 
149: export default mongoose.models.Resume || mongoose.model<IResume>('Resume', ResumeSchema);
</file>

<file path="src/models/SearchHistory.ts">
 1: /**
 2:  * Search History Model
 3:  * Tracks user job searches for analytics and recommendations
 4:  */
 5: 
 6: import mongoose, { Schema, Document } from 'mongoose'
 7: 
 8: export interface ISearchHistory extends Document {
 9:   userId: string
10:   keywords: string
11:   location: string
12:   resultsCount: number
13:   sources: string[]
14:   timestamp: Date
15:   metadata?: {
16:     remote?: boolean
17:     salaryMin?: number
18:     experienceLevel?: string
19:   }
20: }
21: 
22: const SearchHistorySchema = new Schema<ISearchHistory>({
23:   userId: {
24:     type: String,
25:     required: true,
26:     index: true
27:   },
28:   keywords: {
29:     type: String,
30:     required: true,
31:     index: true
32:   },
33:   location: {
34:     type: String,
35:     required: true
36:   },
37:   resultsCount: {
38:     type: Number,
39:     default: 0
40:   },
41:   sources: [{
42:     type: String
43:   }],
44:   timestamp: {
45:     type: Date,
46:     default: Date.now
47:     // index removed - compound and TTL indexes below are sufficient
48:   },
49:   metadata: {
50:     remote: Boolean,
51:     salaryMin: Number,
52:     experienceLevel: String
53:   }
54: }, {
55:   timestamps: true
56: })
57: 
58: // Compound index for efficient queries
59: SearchHistorySchema.index({ userId: 1, timestamp: -1 })
60: 
61: // Text index for search term analysis
62: SearchHistorySchema.index({ keywords: 'text' })
63: 
64: // TTL index - automatically delete searches older than 90 days
65: SearchHistorySchema.index({ timestamp: 1 }, { expireAfterSeconds: 7776000 })
66: 
67: export default mongoose.models.SearchHistory || mongoose.model<ISearchHistory>('SearchHistory', SearchHistorySchema)
</file>

<file path="src/models/SelectedJob.ts">
 1: /**
 2:  * Selected Job Model
 3:  * Stores jobs selected by users for analysis in Career Finder
 4:  */
 5: 
 6: import mongoose, { Schema, Document } from 'mongoose'
 7: 
 8: export interface ISelectedJob extends Document {
 9:   userId: string
10:   jobData: {
11:     id: string
12:     title: string
13:     company: string
14:     location: string
15:     salary?: string
16:     description: string
17:     url: string
18:     source: string
19:     postedDate?: string
20:     skills?: string[]
21:     requirements?: string[]
22:   }
23:   selectedAt: Date
24:   status: 'pending_analysis' | 'analyzed' | 'applied'
25:   analysisResults?: any
26: }
27: 
28: const SelectedJobSchema = new Schema<ISelectedJob>({
29:   userId: {
30:     type: String,
31:     required: true,
32:     index: true
33:   },
34:   jobData: {
35:     id: { type: String, required: true },
36:     title: { type: String, required: true },
37:     company: { type: String, required: true },
38:     location: { type: String, required: true },
39:     salary: String,
40:     description: { type: String, required: true, default: 'No description available' },
41:     url: { type: String, required: true },
42:     source: { type: String, default: 'search' },
43:     postedDate: String,
44:     skills: [String],
45:     requirements: [String]
46:   },
47:   selectedAt: {
48:     type: Date,
49:     default: Date.now,
50:     index: true
51:   },
52:   status: {
53:     type: String,
54:     enum: ['pending_analysis', 'analyzed', 'applied'],
55:     default: 'pending_analysis'
56:   },
57:   analysisResults: Schema.Types.Mixed
58: }, {
59:   timestamps: true
60: })
61: 
62: // CRITICAL FIX: Pre-save validation
63: SelectedJobSchema.pre('save', function(this: ISelectedJob, next) {
64:   // Ensure description is not empty
65:   if (!this.jobData.description || this.jobData.description.trim() === '') {
66:     this.jobData.description = 'No description available';
67:     console.log('[SELECTED_JOB] ⚠️ Set default description for:', this.jobData.title);
68:   }
69:   
70:   // Ensure company is not empty
71:   if (!this.jobData.company || this.jobData.company.trim() === '') {
72:     console.error('[SELECTED_JOB] ❌ Cannot save job with empty company:', this.jobData.title);
73:     return next(new Error('Company name is required'));
74:   }
75:   
76:   // Ensure title is not empty
77:   if (!this.jobData.title || this.jobData.title.trim() === '') {
78:     console.error('[SELECTED_JOB] ❌ Cannot save job with empty title');
79:     return next(new Error('Job title is required'));
80:   }
81:   
82:   console.log('[SELECTED_JOB] ✅ Validated job:', this.jobData.title, '@', this.jobData.company);
83:   next();
84: });
85: 
86: // Compound index for efficient queries
87: SelectedJobSchema.index({ userId: 1, selectedAt: -1 })
88: 
89: export const SelectedJob = mongoose.models.SelectedJob || mongoose.model<ISelectedJob>('SelectedJob', SelectedJobSchema)
</file>

<file path="src/models/SentEmail.ts">
 1: import mongoose, { Schema, Document } from 'mongoose'
 2: 
 3: export interface ISentEmail extends Document {
 4:   userId: mongoose.Types.ObjectId
 5:   contactEmail: string
 6:   contactName: string
 7:   subject: string
 8:   body: string
 9:   attachments: Array<{
10:     filename: string
11:     size: number
12:   }>
13:   sentAt: Date
14:   status: 'sent' | 'delivered' | 'bounced' | 'opened' | 'failed'
15:   messageId?: string
16:   jobApplicationId?: mongoose.Types.ObjectId
17:   openedAt?: Date
18:   clickedAt?: Date
19:   error?: string
20:   metadata?: Record<string, unknown>
21: }
22: 
23: const SentEmailSchema = new Schema<ISentEmail>({
24:   userId: { type: Schema.Types.ObjectId, ref: 'User', required: true, index: true },
25:   contactEmail: { type: String, required: true, index: true },
26:   contactName: { type: String, required: true },
27:   subject: { type: String, required: true },
28:   body: { type: String, required: true },
29:   attachments: [{
30:     filename: { type: String, required: true },
31:     size: { type: Number, required: true }
32:   }],
33:   sentAt: { type: Date, default: Date.now, index: true },
34:   status: { 
35:     type: String, 
36:     enum: ['sent', 'delivered', 'bounced', 'opened', 'failed'],
37:     default: 'sent',
38:     index: true
39:   },
40:   messageId: { type: String, index: true },
41:   jobApplicationId: { type: Schema.Types.ObjectId, ref: 'JobApplication', index: true },
42:   openedAt: { type: Date },
43:   clickedAt: { type: Date },
44:   error: { type: String },
45:   metadata: { type: Schema.Types.Mixed }
46: }, {
47:   timestamps: true
48: })
49: 
50: // Indexes for common queries
51: SentEmailSchema.index({ userId: 1, sentAt: -1 })
52: SentEmailSchema.index({ userId: 1, status: 1 })
53: SentEmailSchema.index({ messageId: 1 }, { sparse: true })
54: 
55: export default mongoose.models.SentEmail || mongoose.model<ISentEmail>('SentEmail', SentEmailSchema)
</file>

<file path="src/models/Team.ts">
 1: import mongoose, { Schema, Document } from 'mongoose'
 2: 
 3: export interface ITeam extends Document {
 4:   name: string
 5:   ownerId: mongoose.Types.ObjectId
 6:   members: Array<{ userId: mongoose.Types.ObjectId; role: 'owner'|'admin'|'member' }>
 7:   billing?: { customerId?: string; plan: 'team'|'enterprise'; seats: number }
 8:   createdAt: Date
 9:   updatedAt: Date
10: }
11: 
12: const TeamSchema = new Schema<ITeam>({
13:   name: { type: String, required: true, trim: true },
14:   ownerId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
15:   members: [{ userId: { type: Schema.Types.ObjectId, ref: 'User' }, role: { type: String, enum: ['owner','admin','member'], default: 'member' } }],
16:   billing: { type: Schema.Types.Mixed }
17: }, { timestamps: true })
18: 
19: TeamSchema.index({ ownerId: 1 })
20: 
21: export default mongoose.models.Team || mongoose.model<ITeam>('Team', TeamSchema)
</file>

<file path="src/models/User.ts">
  1: import mongoose, { Schema, Document } from 'mongoose';
  2: 
  3: export interface IUserProfile {
  4:   onboardingComplete: boolean;
  5:   currentSituation: 'actively_searching' | 'open_to_offers' | 'employed_not_looking' | 'student' | 'career_change';
  6:   yearsOfExperience: number;
  7:   targetRole: string;
  8:   workPreferences: ('remote' | 'onsite' | 'hybrid')[];
  9:   preferredLocation: string;
 10:   timeline?: 'asap' | '1-3_months' | '3-6_months' | 'flexible';
 11:   urgency: 'high' | 'medium' | 'low';
 12:   completedAt: Date;
 13: }
 14: 
 15: export interface IUser extends Document {
 16:   email: string;
 17:   name: string;
 18:   image?: string;
 19:   // Optional credentials/profile fields for demo + networking features
 20:   passwordHash?: string;
 21:   title?: string;
 22:   location?: string;
 23:   skills?: string[];
 24:   experience?: string;
 25:   // Onboarding quiz profile
 26:   profile?: IUserProfile;
 27:   createdAt: Date;
 28:   updatedAt: Date;
 29: }
 30: 
 31: const UserSchema: Schema = new Schema({
 32:   email: {
 33:     type: String,
 34:     required: true,
 35:     unique: true,
 36:     lowercase: true,
 37:     trim: true,
 38:   },
 39:   name: {
 40:     type: String,
 41:     required: true,
 42:     trim: true,
 43:   },
 44:   image: {
 45:     type: String,
 46:     trim: true,
 47:   },
 48:   passwordHash: {
 49:     type: String,
 50:     select: false,
 51:   },
 52:   title: {
 53:     type: String,
 54:     trim: true,
 55:   },
 56:   location: {
 57:     type: String,
 58:     trim: true,
 59:   },
 60:   skills: [{ type: String, trim: true }],
 61:   experience: {
 62:     type: String,
 63:   },
 64:   profile: {
 65:     type: {
 66:       onboardingComplete: { type: Boolean, default: false },
 67:       currentSituation: {
 68:         type: String,
 69:         enum: ['actively_searching', 'open_to_offers', 'employed_not_looking', 'student', 'career_change']
 70:       },
 71:       yearsOfExperience: { type: Number, min: 0, max: 30 },
 72:       targetRole: { type: String, trim: true },
 73:       workPreferences: [{
 74:         type: String,
 75:         enum: ['remote', 'onsite', 'hybrid']
 76:       }],
 77:       preferredLocation: { type: String, trim: true },
 78:       timeline: {
 79:         type: String,
 80:         enum: ['asap', '1-3_months', '3-6_months', 'flexible']
 81:       },
 82:       urgency: {
 83:         type: String,
 84:         enum: ['high', 'medium', 'low']
 85:       },
 86:       completedAt: { type: Date }
 87:     },
 88:     required: false
 89:   }
 90: }, {
 91:   timestamps: true,
 92: });
 93: 
 94: // Add indexes for better query performance
 95: // Email is already indexed via unique: true
 96: UserSchema.index({ createdAt: -1 }); // Sort by creation date
 97: UserSchema.index({ location: 1 }); // Filter by location
 98: UserSchema.index({ skills: 1 }); // Filter by skills (array index)
 99: UserSchema.index({ name: 'text', title: 'text', skills: 'text' }); // Full-text search
100: 
101: export default mongoose.models.User || mongoose.model<IUser>('User', UserSchema);
</file>

<file path="src/services/company.service.ts">
  1: /**
  2:  * Enterprise Company Research Service
  3:  * 
  4:  * Centralized company data management with:
  5:  * - CRUD operations with caching
  6:  * - Data enrichment and validation
  7:  * - Cache expiration handling
  8:  * - Error handling and logging
  9:  */
 10: 
 11: import { Types } from 'mongoose'
 12: import CompanyData, { ICompanyData, ICompanyNews } from '@/models/CompanyData'
 13: import { dbService } from '@/lib/database'
 14: import { dbLogger, logger } from '@/lib/logger'
 15: import { InputValidator } from '@/lib/validation'
 16: 
 17: export interface CreateCompanyDataDTO {
 18:   companyName: string
 19:   website?: string
 20:   industry?: string
 21:   size?: string
 22:   description?: string
 23:   culture?: string[]
 24:   benefits?: string[]
 25:   recentNews?: Array<{
 26:     title: string
 27:     url: string
 28:     publishedAt: Date
 29:     summary: string
 30:   }>
 31:   glassdoorRating?: number
 32:   glassdoorReviews?: number
 33:   hiringContacts?: Array<{
 34:     name: string
 35:     title: string
 36:     profileUrl?: string
 37:     source: string
 38:   }>
 39:   contactInfo?: {
 40:     emails: string[]
 41:     phones: string[]
 42:     addresses: string[]
 43:   }
 44:   googleReviewsRating?: number
 45:   googleReviewsCount?: number
 46:   cacheExpiryDays?: number
 47: }
 48: 
 49: export interface UpdateCompanyDataDTO {
 50:   website?: string
 51:   industry?: string
 52:   size?: string
 53:   description?: string
 54:   culture?: string[]
 55:   benefits?: string[]
 56:   recentNews?: Array<{
 57:     title: string
 58:     url: string
 59:     publishedAt: Date
 60:     summary: string
 61:   }>
 62:   glassdoorRating?: number
 63:   glassdoorReviews?: number
 64:   hiringContacts?: Array<{
 65:     name: string
 66:     title: string
 67:     profileUrl?: string
 68:     source: string
 69:   }>
 70:   contactInfo?: {
 71:     emails: string[]
 72:     phones: string[]
 73:     addresses: string[]
 74:   }
 75:   googleReviewsRating?: number
 76:   googleReviewsCount?: number
 77: }
 78: 
 79: export interface CompanySearchOptions {
 80:   limit?: number
 81:   skip?: number
 82:   industry?: string
 83:   includeExpired?: boolean
 84: }
 85: 
 86: class CompanyService {
 87:   private static instance: CompanyService
 88: 
 89:   private constructor() {}
 90: 
 91:   static getInstance(): CompanyService {
 92:     if (!CompanyService.instance) {
 93:       CompanyService.instance = new CompanyService()
 94:     }
 95:     return CompanyService.instance
 96:   }
 97: 
 98:   /**
 99:    * Create or update company data (upsert)
100:    */
101:   async upsertCompanyData(data: CreateCompanyDataDTO): Promise<ICompanyData> {
102:     const startTime = Date.now()
103: 
104:     try {
105:       await dbService.connect()
106: 
107:       // Validate input
108:       this.validateCompanyData(data)
109: 
110:       // Sanitize inputs
111:       const sanitizedData: any = {
112:         companyName: InputValidator.sanitizeText(data.companyName),
113:         website: data.website ? InputValidator.sanitizeText(data.website) : undefined,
114:         industry: data.industry ? InputValidator.sanitizeText(data.industry) : undefined,
115:         size: data.size ? InputValidator.sanitizeText(data.size) : undefined,
116:         description: data.description ? InputValidator.sanitizeText(data.description, 50000) : undefined,
117:         culture: data.culture?.map(c => InputValidator.sanitizeText(c)),
118:         benefits: data.benefits?.map(b => InputValidator.sanitizeText(b)),
119:         glassdoorRating: data.glassdoorRating,
120:         glassdoorReviews: data.glassdoorReviews,
121:         googleReviewsRating: data.googleReviewsRating,
122:         googleReviewsCount: data.googleReviewsCount,
123:         cachedAt: new Date(),
124:         expiresAt: new Date(Date.now() + (data.cacheExpiryDays || 7) * 24 * 60 * 60 * 1000)
125:       }
126: 
127:       // Sanitize news
128:       if (data.recentNews) {
129:         sanitizedData.recentNews = data.recentNews.map(news => ({
130:           title: InputValidator.sanitizeText(news.title),
131:           url: InputValidator.sanitizeText(news.url),
132:           publishedAt: news.publishedAt,
133:           summary: InputValidator.sanitizeText(news.summary, 10000)
134:         }))
135:       }
136: 
137:       // Sanitize hiring contacts
138:       if (data.hiringContacts) {
139:         sanitizedData.hiringContacts = data.hiringContacts.map(contact => ({
140:           name: InputValidator.sanitizeText(contact.name),
141:           title: InputValidator.sanitizeText(contact.title),
142:           profileUrl: contact.profileUrl ? InputValidator.sanitizeText(contact.profileUrl) : undefined,
143:           source: InputValidator.sanitizeText(contact.source)
144:         }))
145:       }
146: 
147:       // Sanitize contact info
148:       if (data.contactInfo) {
149:         sanitizedData.contactInfo = {
150:           emails: data.contactInfo.emails.map(e => InputValidator.sanitizeText(e)),
151:           phones: data.contactInfo.phones.map(p => InputValidator.sanitizeText(p)),
152:           addresses: data.contactInfo.addresses.map(a => InputValidator.sanitizeText(a))
153:         }
154:       }
155: 
156:       // Upsert (update if exists, create if not)
157:       const company = await CompanyData.findOneAndUpdate(
158:         { companyName: sanitizedData.companyName },
159:         { $set: sanitizedData },
160:         { new: true, upsert: true, runValidators: true }
161:       ).exec()
162: 
163:       const duration = Date.now() - startTime
164:       dbLogger.dbQuery('UPSERT', 'CompanyData', duration)
165:       logger.info('Company data upserted successfully', {
166:         companyId: company._id,
167:         companyName: data.companyName,
168:         duration
169:       })
170: 
171:       return company
172:     } catch (error) {
173:       const duration = Date.now() - startTime
174:       dbLogger.dbError('UPSERT', 'CompanyData', error as Error)
175:       logger.error('Failed to upsert company data', {
176:         companyName: data.companyName,
177:         error: error instanceof Error ? error.message : 'Unknown error',
178:         duration
179:       })
180:       throw error
181:     }
182:   }
183: 
184:   /**
185:    * Get company data by ID
186:    */
187:   async getCompanyById(companyId: string): Promise<ICompanyData | null> {
188:     const startTime = Date.now()
189: 
190:     try {
191:       await dbService.connect()
192: 
193:       if (!Types.ObjectId.isValid(companyId)) {
194:         throw new Error('Invalid company ID format')
195:       }
196: 
197:       const company = await CompanyData.findById(companyId).lean<ICompanyData>().exec()
198: 
199:       const duration = Date.now() - startTime
200:       dbLogger.dbQuery('FIND_BY_ID', 'CompanyData', duration)
201: 
202:       // Check if cached data is expired
203:       if (company && new Date() > new Date(company.expiresAt)) {
204:         logger.warn('Retrieved company data is expired', {
205:           companyId,
206:           companyName: company.companyName,
207:           expiresAt: company.expiresAt
208:         })
209:       }
210: 
211:       return company
212:     } catch (error) {
213:       const duration = Date.now() - startTime
214:       dbLogger.dbError('FIND_BY_ID', 'CompanyData', error as Error)
215:       throw error
216:     }
217:   }
218: 
219:   /**
220:    * Get company data by name
221:    */
222:   async getCompanyByName(companyName: string, includeExpired = false): Promise<ICompanyData | null> {
223:     const startTime = Date.now()
224: 
225:     try {
226:       await dbService.connect()
227: 
228:       const query: any = { 
229:         companyName: new RegExp(`^${companyName}$`, 'i') 
230:       }
231: 
232:       // Optionally filter out expired data
233:       if (!includeExpired) {
234:         query.expiresAt = { $gt: new Date() }
235:       }
236: 
237:       const company = await CompanyData.findOne(query).lean<ICompanyData>().exec()
238: 
239:       const duration = Date.now() - startTime
240:       dbLogger.dbQuery('FIND_BY_NAME', 'CompanyData', duration)
241: 
242:       if (!company) {
243:         logger.debug('Company not found in cache', { companyName })
244:       }
245: 
246:       return company
247:     } catch (error) {
248:       const duration = Date.now() - startTime
249:       dbLogger.dbError('FIND_BY_NAME', 'CompanyData', error as Error)
250:       throw error
251:     }
252:   }
253: 
254:   /**
255:    * Search companies by various criteria
256:    */
257:   async searchCompanies(
258:     searchTerm: string,
259:     options: CompanySearchOptions = {}
260:   ): Promise<ICompanyData[]> {
261:     const startTime = Date.now()
262: 
263:     try {
264:       await dbService.connect()
265: 
266:       const {
267:         limit = 50,
268:         skip = 0,
269:         industry,
270:         includeExpired = false
271:       } = options
272: 
273:       const searchRegex = new RegExp(searchTerm, 'i')
274:       const query: any = {
275:         $or: [
276:           { companyName: searchRegex },
277:           { industry: searchRegex },
278:           { description: searchRegex }
279:         ]
280:       }
281: 
282:       if (industry) {
283:         query.industry = new RegExp(industry, 'i')
284:       }
285: 
286:       if (!includeExpired) {
287:         query.expiresAt = { $gt: new Date() }
288:       }
289: 
290:       const companies = await CompanyData.find(query)
291:         .sort({ cachedAt: -1 })
292:         .skip(skip)
293:         .limit(limit)
294:         .lean<ICompanyData[]>()
295:         .exec()
296: 
297:       const duration = Date.now() - startTime
298:       dbLogger.dbQuery('SEARCH', 'CompanyData', duration)
299:       logger.debug(`Found ${companies.length} companies matching search`, {
300:         searchTerm,
301:         count: companies.length,
302:         duration
303:       })
304: 
305:       return companies
306:     } catch (error) {
307:       const duration = Date.now() - startTime
308:       dbLogger.dbError('SEARCH', 'CompanyData', error as Error)
309:       throw error
310:     }
311:   }
312: 
313:   /**
314:    * Update company data
315:    */
316:   async updateCompanyData(
317:     companyId: string,
318:     data: UpdateCompanyDataDTO
319:   ): Promise<ICompanyData | null> {
320:     const startTime = Date.now()
321: 
322:     try {
323:       await dbService.connect()
324: 
325:       if (!Types.ObjectId.isValid(companyId)) {
326:         throw new Error('Invalid company ID format')
327:       }
328: 
329:       // Sanitize inputs
330:       const updateData: any = {}
331: 
332:       if (data.website) {
333:         if (!InputValidator.validateURL(data.website)) {
334:           throw new Error('Invalid website URL format')
335:         }
336:         updateData.website = InputValidator.sanitizeText(data.website)
337:       }
338:       if (data.industry) {
339:         updateData.industry = InputValidator.sanitizeText(data.industry)
340:       }
341:       if (data.size) {
342:         updateData.size = InputValidator.sanitizeText(data.size)
343:       }
344:       if (data.description) {
345:         updateData.description = InputValidator.sanitizeText(data.description, 50000)
346:       }
347:       if (data.culture) {
348:         updateData.culture = data.culture.map(c => InputValidator.sanitizeText(c))
349:       }
350:       if (data.benefits) {
351:         updateData.benefits = data.benefits.map(b => InputValidator.sanitizeText(b))
352:       }
353:       if (data.glassdoorRating !== undefined) {
354:         updateData.glassdoorRating = data.glassdoorRating
355:       }
356:       if (data.glassdoorReviews !== undefined) {
357:         updateData.glassdoorReviews = data.glassdoorReviews
358:       }
359:       if (data.googleReviewsRating !== undefined) {
360:         updateData.googleReviewsRating = data.googleReviewsRating
361:       }
362:       if (data.googleReviewsCount !== undefined) {
363:         updateData.googleReviewsCount = data.googleReviewsCount
364:       }
365: 
366:       if (data.recentNews) {
367:         updateData.recentNews = data.recentNews.map(news => ({
368:           title: InputValidator.sanitizeText(news.title),
369:           url: InputValidator.sanitizeText(news.url),
370:           publishedAt: news.publishedAt,
371:           summary: InputValidator.sanitizeText(news.summary, 10000)
372:         }))
373:       }
374: 
375:       if (data.hiringContacts) {
376:         updateData.hiringContacts = data.hiringContacts.map(contact => ({
377:           name: InputValidator.sanitizeText(contact.name),
378:           title: InputValidator.sanitizeText(contact.title),
379:           profileUrl: contact.profileUrl ? InputValidator.sanitizeText(contact.profileUrl) : undefined,
380:           source: InputValidator.sanitizeText(contact.source)
381:         }))
382:       }
383: 
384:       if (data.contactInfo) {
385:         updateData.contactInfo = {
386:           emails: data.contactInfo.emails.map(e => InputValidator.sanitizeText(e)),
387:           phones: data.contactInfo.phones.map(p => InputValidator.sanitizeText(p)),
388:           addresses: data.contactInfo.addresses.map(a => InputValidator.sanitizeText(a))
389:         }
390:       }
391: 
392:       // Update cache timestamp
393:       updateData.cachedAt = new Date()
394: 
395:       const company = await CompanyData.findByIdAndUpdate(
396:         companyId,
397:         { $set: updateData },
398:         { new: true, runValidators: true }
399:       ).exec()
400: 
401:       const duration = Date.now() - startTime
402:       dbLogger.dbQuery('UPDATE', 'CompanyData', duration)
403:       logger.info('Company data updated successfully', {
404:         companyId,
405:         duration
406:       })
407: 
408:       return company
409:     } catch (error) {
410:       const duration = Date.now() - startTime
411:       dbLogger.dbError('UPDATE', 'CompanyData', error as Error)
412:       logger.error('Failed to update company data', {
413:         companyId,
414:         error: error instanceof Error ? error.message : 'Unknown error'
415:       })
416:       throw error
417:     }
418:   }
419: 
420:   /**
421:    * Delete company data
422:    */
423:   async deleteCompanyData(companyId: string): Promise<boolean> {
424:     const startTime = Date.now()
425: 
426:     try {
427:       await dbService.connect()
428: 
429:       if (!Types.ObjectId.isValid(companyId)) {
430:         throw new Error('Invalid company ID format')
431:       }
432: 
433:       const result = await CompanyData.findByIdAndDelete(companyId).exec()
434: 
435:       const duration = Date.now() - startTime
436:       dbLogger.dbQuery('DELETE', 'CompanyData', duration)
437:       logger.info('Company data deleted successfully', {
438:         companyId,
439:         duration
440:       })
441: 
442:       return !!result
443:     } catch (error) {
444:       const duration = Date.now() - startTime
445:       dbLogger.dbError('DELETE', 'CompanyData', error as Error)
446:       logger.error('Failed to delete company data', {
447:         companyId,
448:         error: error instanceof Error ? error.message : 'Unknown error'
449:       })
450:       throw error
451:     }
452:   }
453: 
454:   /**
455:    * Refresh cache expiry for a company
456:    */
457:   async refreshCache(companyId: string, expiryDays = 7): Promise<ICompanyData | null> {
458:     const startTime = Date.now()
459: 
460:     try {
461:       await dbService.connect()
462: 
463:       if (!Types.ObjectId.isValid(companyId)) {
464:         throw new Error('Invalid company ID format')
465:       }
466: 
467:       const company = await CompanyData.findByIdAndUpdate(
468:         companyId,
469:         {
470:           $set: {
471:             cachedAt: new Date(),
472:             expiresAt: new Date(Date.now() + expiryDays * 24 * 60 * 60 * 1000)
473:           }
474:         },
475:         { new: true }
476:       ).exec()
477: 
478:       const duration = Date.now() - startTime
479:       dbLogger.dbQuery('REFRESH_CACHE', 'CompanyData', duration)
480:       logger.info('Company cache refreshed', {
481:         companyId,
482:         expiryDays,
483:         duration
484:       })
485: 
486:       return company
487:     } catch (error) {
488:       const duration = Date.now() - startTime
489:       dbLogger.dbError('REFRESH_CACHE', 'CompanyData', error as Error)
490:       throw error
491:     }
492:   }
493: 
494:   /**
495:    * Get all expired company data
496:    */
497:   async getExpiredCompanies(limit = 100): Promise<ICompanyData[]> {
498:     const startTime = Date.now()
499: 
500:     try {
501:       await dbService.connect()
502: 
503:       const companies = await CompanyData.find({
504:         expiresAt: { $lt: new Date() }
505:       })
506:         .sort({ expiresAt: 1 })
507:         .limit(limit)
508:         .lean<ICompanyData[]>()
509:         .exec()
510: 
511:       const duration = Date.now() - startTime
512:       dbLogger.dbQuery('FIND_EXPIRED', 'CompanyData', duration)
513:       logger.debug(`Found ${companies.length} expired companies`, {
514:         count: companies.length,
515:         duration
516:       })
517: 
518:       return companies
519:     } catch (error) {
520:       const duration = Date.now() - startTime
521:       dbLogger.dbError('FIND_EXPIRED', 'CompanyData', error as Error)
522:       throw error
523:     }
524:   }
525: 
526:   /**
527:    * Check if company data is cached and fresh
528:    */
529:   async isCachedAndFresh(companyName: string): Promise<boolean> {
530:     const startTime = Date.now()
531: 
532:     try {
533:       const company = await this.getCompanyByName(companyName, false)
534:       
535:       const duration = Date.now() - startTime
536:       logger.debug('Cache freshness check', {
537:         companyName,
538:         isFresh: !!company,
539:         duration
540:       })
541: 
542:       return !!company
543:     } catch (error) {
544:       logger.error('Failed to check cache freshness', {
545:         companyName,
546:         error: error instanceof Error ? error.message : 'Unknown error'
547:       })
548:       return false
549:     }
550:   }
551: 
552:   /**
553:    * Count total companies in database
554:    */
555:   async countCompanies(includeExpired = false): Promise<number> {
556:     const startTime = Date.now()
557: 
558:     try {
559:       await dbService.connect()
560: 
561:       const query = includeExpired ? {} : { expiresAt: { $gt: new Date() } }
562:       const count = await CompanyData.countDocuments(query).exec()
563: 
564:       const duration = Date.now() - startTime
565:       dbLogger.dbQuery('COUNT', 'CompanyData', duration)
566: 
567:       return count
568:     } catch (error) {
569:       const duration = Date.now() - startTime
570:       dbLogger.dbError('COUNT', 'CompanyData', error as Error)
571:       throw error
572:     }
573:   }
574: 
575:   /**
576:    * Validate company data
577:    */
578:   private validateCompanyData(data: CreateCompanyDataDTO): void {
579:     if (!data.companyName || data.companyName.trim().length === 0) {
580:       throw new Error('companyName is required')
581:     }
582: 
583:     if (data.website && !InputValidator.validateURL(data.website)) {
584:       throw new Error('Invalid website URL format')
585:     }
586: 
587:     if (data.glassdoorRating !== undefined && (data.glassdoorRating < 1 || data.glassdoorRating > 5)) {
588:       throw new Error('glassdoorRating must be between 1 and 5')
589:     }
590: 
591:     if (data.googleReviewsRating !== undefined && (data.googleReviewsRating < 1 || data.googleReviewsRating > 5)) {
592:       throw new Error('googleReviewsRating must be between 1 and 5')
593:     }
594: 
595:     if (data.contactInfo?.emails) {
596:       for (const email of data.contactInfo.emails) {
597:         if (!InputValidator.validateEmail(email)) {
598:           throw new Error(`Invalid email format: ${email}`)
599:         }
600:       }
601:     }
602:   }
603: }
604: 
605: // Export singleton instance
606: export const companyService = CompanyService.getInstance()
</file>

<file path="src/services/job-application.service.ts">
  1: /**
  2:  * Enterprise Job Application Service
  3:  * 
  4:  * Centralized management for job applications with:
  5:  * - CRUD operations with validation
  6:  * - Status tracking and workflow
  7:  * - Analytics and reporting
  8:  * - Error handling and logging
  9:  */
 10: 
 11: import { Types } from 'mongoose'
 12: import JobApplication, { IJobApplication, ApplicationStatus } from '@/models/JobApplication'
 13: import { dbService } from '@/lib/database'
 14: import { dbLogger, logger } from '@/lib/logger'
 15: import { InputValidator } from '@/lib/validation'
 16: 
 17: export interface CreateJobApplicationDTO {
 18:   userId: string
 19:   jobTitle: string
 20:   companyName: string
 21:   jobDescription: string
 22:   jobUrl?: string
 23:   applicationStatus?: ApplicationStatus
 24:   notes?: string
 25:   applicationSource?: string
 26: }
 27: 
 28: export interface UpdateJobApplicationDTO {
 29:   jobTitle?: string
 30:   companyName?: string
 31:   jobDescription?: string
 32:   jobUrl?: string
 33:   applicationStatus?: ApplicationStatus
 34:   appliedDate?: Date | null
 35:   notes?: string
 36:   companyResearch?: string
 37:   coverLetterId?: string
 38:   resumeVersionId?: string
 39:   variantUsed?: 'A' | 'B' | 'C'
 40: }
 41: 
 42: export interface JobApplicationQueryOptions {
 43:   status?: ApplicationStatus | ApplicationStatus[]
 44:   limit?: number
 45:   skip?: number
 46:   sortBy?: 'createdAt' | 'updatedAt' | 'appliedDate'
 47:   sortOrder?: 'asc' | 'desc'
 48:   companyName?: string
 49:   jobTitle?: string
 50: }
 51: 
 52: export interface JobApplicationStats {
 53:   total: number
 54:   byStatus: Record<ApplicationStatus, number>
 55:   recentApplications: number
 56:   interviewRate: number
 57:   offerRate: number
 58: }
 59: 
 60: class JobApplicationService {
 61:   private static instance: JobApplicationService
 62: 
 63:   private constructor() {}
 64: 
 65:   static getInstance(): JobApplicationService {
 66:     if (!JobApplicationService.instance) {
 67:       JobApplicationService.instance = new JobApplicationService()
 68:     }
 69:     return JobApplicationService.instance
 70:   }
 71: 
 72:   /**
 73:    * Create a new job application
 74:    */
 75:   async createJobApplication(data: CreateJobApplicationDTO): Promise<IJobApplication> {
 76:     const startTime = Date.now()
 77: 
 78:     try {
 79:       await dbService.connect()
 80: 
 81:       // Validate input
 82:       this.validateCreateJobApplicationData(data)
 83: 
 84:       // Sanitize inputs
 85:       const sanitizedData = {
 86:         userId: new Types.ObjectId(data.userId),
 87:         jobTitle: InputValidator.sanitizeText(data.jobTitle),
 88:         companyName: InputValidator.sanitizeText(data.companyName),
 89:         jobDescription: data.jobDescription, // Keep full text for analysis
 90:         jobUrl: data.jobUrl ? InputValidator.sanitizeText(data.jobUrl) : undefined,
 91:         applicationStatus: data.applicationStatus || 'saved',
 92:         notes: data.notes ? InputValidator.sanitizeText(data.notes, 50000) : undefined,
 93:         applicationSource: data.applicationSource ? InputValidator.sanitizeText(data.applicationSource) : undefined,
 94:         followUpDates: [],
 95:         appliedDate: data.applicationStatus === 'applied' ? new Date() : null
 96:       }
 97: 
 98:       const jobApplication = new JobApplication(sanitizedData)
 99:       await jobApplication.save()
100: 
101:       const duration = Date.now() - startTime
102:       dbLogger.dbQuery('CREATE', 'JobApplication', duration)
103:       logger.info('Job application created successfully', {
104:         applicationId: jobApplication._id,
105:         userId: data.userId,
106:         companyName: data.companyName,
107:         duration
108:       })
109: 
110:       return jobApplication
111:     } catch (error) {
112:       const duration = Date.now() - startTime
113:       dbLogger.dbError('CREATE', 'JobApplication', error as Error)
114:       logger.error('Failed to create job application', {
115:         userId: data.userId,
116:         error: error instanceof Error ? error.message : 'Unknown error',
117:         duration
118:       })
119:       throw error
120:     }
121:   }
122: 
123:   /**
124:    * Get job application by ID
125:    */
126:   async getJobApplicationById(applicationId: string): Promise<IJobApplication | null> {
127:     const startTime = Date.now()
128: 
129:     try {
130:       await dbService.connect()
131: 
132:       if (!Types.ObjectId.isValid(applicationId)) {
133:         throw new Error('Invalid application ID format')
134:       }
135: 
136:       const application = await JobApplication.findById(applicationId)
137:         .populate('companyResearch')
138:         .populate('coverLetterId')
139:         .lean<IJobApplication>()
140:         .exec()
141: 
142:       const duration = Date.now() - startTime
143:       dbLogger.dbQuery('FIND_BY_ID', 'JobApplication', duration)
144: 
145:       return application
146:     } catch (error) {
147:       const duration = Date.now() - startTime
148:       dbLogger.dbError('FIND_BY_ID', 'JobApplication', error as Error)
149:       throw error
150:     }
151:   }
152: 
153:   /**
154:    * Get job applications for a user with filtering
155:    */
156:   async getJobApplicationsByUserId(
157:     userId: string,
158:     options: JobApplicationQueryOptions = {}
159:   ): Promise<IJobApplication[]> {
160:     const startTime = Date.now()
161: 
162:     try {
163:       await dbService.connect()
164: 
165:       if (!Types.ObjectId.isValid(userId)) {
166:         throw new Error('Invalid user ID format')
167:       }
168: 
169:       const {
170:         status,
171:         limit = 50,
172:         skip = 0,
173:         sortBy = 'createdAt',
174:         sortOrder = 'desc',
175:         companyName,
176:         jobTitle
177:       } = options
178: 
179:       // Build query
180:       const query: any = { userId: new Types.ObjectId(userId) }
181: 
182:       if (status) {
183:         query.applicationStatus = Array.isArray(status) ? { $in: status } : status
184:       }
185: 
186:       if (companyName) {
187:         query.companyName = new RegExp(companyName, 'i')
188:       }
189: 
190:       if (jobTitle) {
191:         query.jobTitle = new RegExp(jobTitle, 'i')
192:       }
193: 
194:       const applications = await JobApplication.find(query)
195:         .sort({ [sortBy]: sortOrder === 'desc' ? -1 : 1 })
196:         .skip(skip)
197:         .limit(limit)
198:         .lean<IJobApplication[]>()
199:         .exec()
200: 
201:       const duration = Date.now() - startTime
202:       dbLogger.dbQuery('FIND_BY_USER', 'JobApplication', duration)
203:       logger.debug(`Retrieved ${applications.length} job applications`, {
204:         userId,
205:         count: applications.length,
206:         duration
207:       })
208: 
209:       return applications
210:     } catch (error) {
211:       const duration = Date.now() - startTime
212:       dbLogger.dbError('FIND_BY_USER', 'JobApplication', error as Error)
213:       throw error
214:     }
215:   }
216: 
217:   /**
218:    * Update job application
219:    */
220:   async updateJobApplication(
221:     applicationId: string,
222:     data: UpdateJobApplicationDTO
223:   ): Promise<IJobApplication | null> {
224:     const startTime = Date.now()
225: 
226:     try {
227:       await dbService.connect()
228: 
229:       if (!Types.ObjectId.isValid(applicationId)) {
230:         throw new Error('Invalid application ID format')
231:       }
232: 
233:       // Sanitize inputs
234:       const updateData: any = {}
235: 
236:       if (data.jobTitle) {
237:         updateData.jobTitle = InputValidator.sanitizeText(data.jobTitle)
238:       }
239:       if (data.companyName) {
240:         updateData.companyName = InputValidator.sanitizeText(data.companyName)
241:       }
242:       if (data.jobDescription) {
243:         updateData.jobDescription = data.jobDescription
244:       }
245:       if (data.jobUrl) {
246:         if (!InputValidator.validateURL(data.jobUrl)) {
247:           throw new Error('Invalid job URL format')
248:         }
249:         updateData.jobUrl = InputValidator.sanitizeText(data.jobUrl)
250:       }
251:       if (data.applicationStatus) {
252:         updateData.applicationStatus = data.applicationStatus
253:         // Auto-set appliedDate when status changes to 'applied'
254:         if (data.applicationStatus === 'applied' && data.appliedDate === undefined) {
255:           updateData.appliedDate = new Date()
256:         }
257:       }
258:       if (data.appliedDate !== undefined) {
259:         updateData.appliedDate = data.appliedDate
260:       }
261:       if (data.notes) {
262:         updateData.notes = InputValidator.sanitizeText(data.notes, 50000)
263:       }
264:       if (data.companyResearch && Types.ObjectId.isValid(data.companyResearch)) {
265:         updateData.companyResearch = new Types.ObjectId(data.companyResearch)
266:       }
267:       if (data.coverLetterId && Types.ObjectId.isValid(data.coverLetterId)) {
268:         updateData.coverLetterId = new Types.ObjectId(data.coverLetterId)
269:       }
270:       if (data.resumeVersionId && Types.ObjectId.isValid(data.resumeVersionId)) {
271:         updateData.resumeVersionId = new Types.ObjectId(data.resumeVersionId)
272:       }
273:       if (data.variantUsed) {
274:         updateData.variantUsed = data.variantUsed
275:       }
276: 
277:       const application = await JobApplication.findByIdAndUpdate(
278:         applicationId,
279:         { $set: updateData },
280:         { new: true, runValidators: true }
281:       ).exec()
282: 
283:       const duration = Date.now() - startTime
284:       dbLogger.dbQuery('UPDATE', 'JobApplication', duration)
285:       logger.info('Job application updated successfully', {
286:         applicationId,
287:         duration
288:       })
289: 
290:       return application
291:     } catch (error) {
292:       const duration = Date.now() - startTime
293:       dbLogger.dbError('UPDATE', 'JobApplication', error as Error)
294:       logger.error('Failed to update job application', {
295:         applicationId,
296:         error: error instanceof Error ? error.message : 'Unknown error'
297:       })
298:       throw error
299:     }
300:   }
301: 
302:   /**
303:    * Delete job application
304:    */
305:   async deleteJobApplication(applicationId: string): Promise<boolean> {
306:     const startTime = Date.now()
307: 
308:     try {
309:       await dbService.connect()
310: 
311:       if (!Types.ObjectId.isValid(applicationId)) {
312:         throw new Error('Invalid application ID format')
313:       }
314: 
315:       const result = await JobApplication.findByIdAndDelete(applicationId).exec()
316: 
317:       const duration = Date.now() - startTime
318:       dbLogger.dbQuery('DELETE', 'JobApplication', duration)
319:       logger.info('Job application deleted successfully', {
320:         applicationId,
321:         duration
322:       })
323: 
324:       return !!result
325:     } catch (error) {
326:       const duration = Date.now() - startTime
327:       dbLogger.dbError('DELETE', 'JobApplication', error as Error)
328:       logger.error('Failed to delete job application', {
329:         applicationId,
330:         error: error instanceof Error ? error.message : 'Unknown error'
331:       })
332:       throw error
333:     }
334:   }
335: 
336:   /**
337:    * Add follow-up date to application
338:    */
339:   async addFollowUpDate(applicationId: string, followUpDate: Date): Promise<IJobApplication | null> {
340:     const startTime = Date.now()
341: 
342:     try {
343:       await dbService.connect()
344: 
345:       if (!Types.ObjectId.isValid(applicationId)) {
346:         throw new Error('Invalid application ID format')
347:       }
348: 
349:       const application = await JobApplication.findByIdAndUpdate(
350:         applicationId,
351:         { $push: { followUpDates: followUpDate } },
352:         { new: true }
353:       ).exec()
354: 
355:       const duration = Date.now() - startTime
356:       dbLogger.dbQuery('ADD_FOLLOWUP', 'JobApplication', duration)
357:       logger.info('Follow-up date added to application', {
358:         applicationId,
359:         followUpDate: followUpDate.toISOString(),
360:         duration
361:       })
362: 
363:       return application
364:     } catch (error) {
365:       const duration = Date.now() - startTime
366:       dbLogger.dbError('ADD_FOLLOWUP', 'JobApplication', error as Error)
367:       throw error
368:     }
369:   }
370: 
371:   /**
372:    * Update application status
373:    */
374:   async updateStatus(
375:     applicationId: string,
376:     newStatus: ApplicationStatus
377:   ): Promise<IJobApplication | null> {
378:     const startTime = Date.now()
379: 
380:     try {
381:       await dbService.connect()
382: 
383:       if (!Types.ObjectId.isValid(applicationId)) {
384:         throw new Error('Invalid application ID format')
385:       }
386: 
387:       const updateData: any = { applicationStatus: newStatus }
388: 
389:       // Set appliedDate when status changes to 'applied'
390:       if (newStatus === 'applied') {
391:         updateData.appliedDate = new Date()
392:       }
393: 
394:       const application = await JobApplication.findByIdAndUpdate(
395:         applicationId,
396:         { $set: updateData },
397:         { new: true }
398:       ).exec()
399: 
400:       const duration = Date.now() - startTime
401:       dbLogger.dbQuery('UPDATE_STATUS', 'JobApplication', duration)
402:       logger.info('Application status updated', {
403:         applicationId,
404:         newStatus,
405:         duration
406:       })
407: 
408:       return application
409:     } catch (error) {
410:       const duration = Date.now() - startTime
411:       dbLogger.dbError('UPDATE_STATUS', 'JobApplication', error as Error)
412:       throw error
413:     }
414:   }
415: 
416:   /**
417:    * Increment metrics (views, interviews, offers)
418:    */
419:   async incrementMetric(
420:     applicationId: string,
421:     metric: 'views' | 'interviews' | 'offers'
422:   ): Promise<IJobApplication | null> {
423:     const startTime = Date.now()
424: 
425:     try {
426:       await dbService.connect()
427: 
428:       if (!Types.ObjectId.isValid(applicationId)) {
429:         throw new Error('Invalid application ID format')
430:       }
431: 
432:       const application = await JobApplication.findByIdAndUpdate(
433:         applicationId,
434:         { $inc: { [metric]: 1 } },
435:         { new: true }
436:       ).exec()
437: 
438:       const duration = Date.now() - startTime
439:       dbLogger.dbQuery('INCREMENT_METRIC', 'JobApplication', duration)
440: 
441:       return application
442:     } catch (error) {
443:       const duration = Date.now() - startTime
444:       dbLogger.dbError('INCREMENT_METRIC', 'JobApplication', error as Error)
445:       throw error
446:     }
447:   }
448: 
449:   /**
450:    * Get application statistics for a user
451:    */
452:   async getApplicationStats(userId: string): Promise<JobApplicationStats> {
453:     const startTime = Date.now()
454: 
455:     try {
456:       await dbService.connect()
457: 
458:       if (!Types.ObjectId.isValid(userId)) {
459:         throw new Error('Invalid user ID format')
460:       }
461: 
462:       const applications = await JobApplication.find({
463:         userId: new Types.ObjectId(userId)
464:       })
465:         .lean<IJobApplication[]>()
466:         .exec()
467: 
468:       // Calculate statistics
469:       const byStatus: Record<ApplicationStatus, number> = {
470:         saved: 0,
471:         applied: 0,
472:         interviewing: 0,
473:         offer: 0,
474:         rejected: 0,
475:         withdrawn: 0
476:       }
477: 
478:       let totalInterviews = 0
479:       let totalOffers = 0
480: 
481:       applications.forEach((app) => {
482:         byStatus[app.applicationStatus]++
483:         totalInterviews += app.interviews || 0
484:         totalOffers += app.offers || 0
485:       })
486: 
487:       // Recent applications (last 7 days)
488:       const sevenDaysAgo = new Date()
489:       sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7)
490:       const recentApplications = applications.filter(
491:         (app) => new Date(app.createdAt) > sevenDaysAgo
492:       ).length
493: 
494:       // Calculate rates
495:       const appliedCount = byStatus.applied + byStatus.interviewing + byStatus.offer + byStatus.rejected
496:       const interviewRate = appliedCount > 0 ? (totalInterviews / appliedCount) * 100 : 0
497:       const offerRate = appliedCount > 0 ? (totalOffers / appliedCount) * 100 : 0
498: 
499:       const stats: JobApplicationStats = {
500:         total: applications.length,
501:         byStatus,
502:         recentApplications,
503:         interviewRate: Math.round(interviewRate * 10) / 10,
504:         offerRate: Math.round(offerRate * 10) / 10
505:       }
506: 
507:       const duration = Date.now() - startTime
508:       dbLogger.dbQuery('GET_STATS', 'JobApplication', duration)
509:       logger.debug('Retrieved application statistics', {
510:         userId,
511:         total: stats.total,
512:         duration
513:       })
514: 
515:       return stats
516:     } catch (error) {
517:       const duration = Date.now() - startTime
518:       dbLogger.dbError('GET_STATS', 'JobApplication', error as Error)
519:       throw error
520:     }
521:   }
522: 
523:   /**
524:    * Count applications by user
525:    */
526:   async countApplicationsByUserId(userId: string): Promise<number> {
527:     const startTime = Date.now()
528: 
529:     try {
530:       await dbService.connect()
531: 
532:       if (!Types.ObjectId.isValid(userId)) {
533:         throw new Error('Invalid user ID format')
534:       }
535: 
536:       const count = await JobApplication.countDocuments({
537:         userId: new Types.ObjectId(userId)
538:       }).exec()
539: 
540:       const duration = Date.now() - startTime
541:       dbLogger.dbQuery('COUNT', 'JobApplication', duration)
542: 
543:       return count
544:     } catch (error) {
545:       const duration = Date.now() - startTime
546:       dbLogger.dbError('COUNT', 'JobApplication', error as Error)
547:       throw error
548:     }
549:   }
550: 
551:   /**
552:    * Search applications by text
553:    */
554:   async searchApplications(
555:     userId: string,
556:     searchTerm: string,
557:     options: JobApplicationQueryOptions = {}
558:   ): Promise<IJobApplication[]> {
559:     const startTime = Date.now()
560: 
561:     try {
562:       await dbService.connect()
563: 
564:       if (!Types.ObjectId.isValid(userId)) {
565:         throw new Error('Invalid user ID format')
566:       }
567: 
568:       const {
569:         limit = 50,
570:         skip = 0,
571:         sortBy = 'createdAt',
572:         sortOrder = 'desc'
573:       } = options
574: 
575:       const searchRegex = new RegExp(searchTerm, 'i')
576: 
577:       const applications = await JobApplication.find({
578:         userId: new Types.ObjectId(userId),
579:         $or: [
580:           { jobTitle: searchRegex },
581:           { companyName: searchRegex },
582:           { jobDescription: searchRegex },
583:           { notes: searchRegex }
584:         ]
585:       })
586:         .sort({ [sortBy]: sortOrder === 'desc' ? -1 : 1 })
587:         .skip(skip)
588:         .limit(limit)
589:         .lean<IJobApplication[]>()
590:         .exec()
591: 
592:       const duration = Date.now() - startTime
593:       dbLogger.dbQuery('SEARCH', 'JobApplication', duration)
594:       logger.debug(`Found ${applications.length} applications matching search`, {
595:         userId,
596:         searchTerm,
597:         count: applications.length,
598:         duration
599:       })
600: 
601:       return applications
602:     } catch (error) {
603:       const duration = Date.now() - startTime
604:       dbLogger.dbError('SEARCH', 'JobApplication', error as Error)
605:       throw error
606:     }
607:   }
608: 
609:   /**
610:    * Validate create job application data
611:    */
612:   private validateCreateJobApplicationData(data: CreateJobApplicationDTO): void {
613:     if (!data.userId || !Types.ObjectId.isValid(data.userId)) {
614:       throw new Error('Valid userId is required')
615:     }
616: 
617:     if (!data.jobTitle || data.jobTitle.trim().length === 0) {
618:       throw new Error('jobTitle is required')
619:     }
620: 
621:     if (!data.companyName || data.companyName.trim().length === 0) {
622:       throw new Error('companyName is required')
623:     }
624: 
625:     if (!data.jobDescription || data.jobDescription.trim().length === 0) {
626:       throw new Error('jobDescription is required')
627:     }
628: 
629:     if (data.jobUrl && !InputValidator.validateURL(data.jobUrl)) {
630:       throw new Error('Invalid jobUrl format')
631:     }
632: 
633:     if (data.applicationStatus && 
634:         !['saved', 'applied', 'interviewing', 'offer', 'rejected', 'withdrawn'].includes(data.applicationStatus)) {
635:       throw new Error('Invalid applicationStatus value')
636:     }
637:   }
638: }
639: 
640: // Export singleton instance
641: export const jobApplicationService = JobApplicationService.getInstance()
</file>

<file path="src/services/job-search-cache.service.ts">
  1: /**
  2:  * Job Search Cache Service
  3:  * 
  4:  * Manages job search caching with 3-week retention:
  5:  * - Reduces API calls by reusing similar searches
  6:  * - Tracks which jobs users have seen (adds "seen" indicator)
  7:  * - Shares results across users with similar keywords
  8:  * - Auto-expires after 3 weeks
  9:  */
 10: 
 11: import { Types } from 'mongoose';
 12: import JobSearchCache, { IJobSearchCache } from '@/models/JobSearchCache';
 13: import { dbService } from '@/lib/database';
 14: 
 15: export interface CachedJob {
 16:   jobId: string;
 17:   title: string;
 18:   company: string;
 19:   location: string;
 20:   description: string;
 21:   url: string;
 22:   source: string;
 23:   salary?: string;
 24:   postedDate?: Date;
 25:   workType?: string;
 26:   skillMatchScore?: number;
 27:   
 28:   // User-specific tracking
 29:   seen?: boolean; // Has current user seen this job?
 30:   applied?: boolean; // Has current user applied?
 31:   saved?: boolean; // Has current user saved?
 32:   viewCount?: number; // How many users have viewed
 33: }
 34: 
 35: export interface SearchCacheOptions {
 36:   keywords: string | string[];
 37:   location: string;
 38:   workType?: 'remote' | 'hybrid' | 'onsite' | 'any';
 39:   experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';
 40:   userId?: string; // For tracking user-specific data
 41: }
 42: 
 43: class JobSearchCacheService {
 44:   private static instance: JobSearchCacheService;
 45: 
 46:   private constructor() {}
 47: 
 48:   static getInstance(): JobSearchCacheService {
 49:     if (!JobSearchCacheService.instance) {
 50:       JobSearchCacheService.instance = new JobSearchCacheService();
 51:     }
 52:     return JobSearchCacheService.instance;
 53:   }
 54: 
 55:   /**
 56:    * Normalize keywords for consistent matching
 57:    */
 58:   private normalizeKeywords(keywords: string | string[]): string[] {
 59:     const keywordArray = Array.isArray(keywords) 
 60:       ? keywords 
 61:       : keywords.split(',').map(k => k.trim());
 62:     
 63:     return keywordArray
 64:       .map(k => k.toLowerCase().trim())
 65:       .filter(Boolean)
 66:       .sort();
 67:   }
 68: 
 69:   /**
 70:    * Generate unique job ID for deduplication
 71:    */
 72:   private generateJobId(title: string, company: string, location: string): string {
 73:     const normalized = `${title}-${company}-${location}`
 74:       .toLowerCase()
 75:       .replace(/[^a-z0-9]/g, '-');
 76:     
 77:     return normalized;
 78:   }
 79: 
 80:   /**
 81:    * Find cached search results
 82:    */
 83:   async findCachedSearch(options: SearchCacheOptions): Promise<IJobSearchCache | null> {
 84:     try {
 85:       await dbService.connect();
 86: 
 87:       const normalizedKeywords = this.normalizeKeywords(options.keywords);
 88:       
 89:       const cache = await JobSearchCache.findOne({
 90:         normalizedKeywords: { $all: normalizedKeywords },
 91:         location: new RegExp(options.location, 'i'),
 92:         $or: [
 93:           { workType: options.workType },
 94:           { workType: 'any' },
 95:           { workType: { $exists: false } }
 96:         ],
 97:         expiresAt: { $gt: new Date() } // Not expired
 98:       })
 99:       .sort({ lastSearched: -1 }) // Most recent first
100:       .exec();
101: 
102:       if (cache) {
103:         console.log(`[JOB_CACHE] ✅ Found cached search with ${cache.jobs.length} jobs`);
104:       }
105: 
106:       return cache;
107:     } catch (error) {
108:       console.error('[JOB_CACHE] Error finding cached search:', error);
109:       return null;
110:     }
111:   }
112: 
113:   /**
114:    * Get cached jobs with user-specific tracking
115:    */
116:   async getCachedJobs(
117:     options: SearchCacheOptions
118:   ): Promise<CachedJob[] | null> {
119:     try {
120:       const cache = await this.findCachedSearch(options);
121:       
122:       if (!cache) {
123:         return null;
124:       }
125: 
126:       const userId = options.userId ? new Types.ObjectId(options.userId) : null;
127: 
128:       // Map jobs with user-specific data
129:       const jobs: CachedJob[] = cache.jobs.map((job: any) => ({
130:         jobId: job.jobId,
131:         title: job.title,
132:         company: job.company,
133:         location: job.location,
134:         description: job.description,
135:         url: job.url,
136:         source: job.source,
137:         salary: job.salary,
138:         postedDate: job.postedDate,
139:         workType: job.workType,
140:         skillMatchScore: job.skillMatchScore,
141:         
142:         // User-specific tracking
143:         seen: userId ? job.viewedBy.some((id: any) => id.equals(userId)) : false,
144:         applied: userId ? job.appliedBy.some((id: any) => id.equals(userId)) : false,
145:         saved: userId ? job.savedBy.some((id: any) => id.equals(userId)) : false,
146:         viewCount: job.viewedBy.length
147:       }));
148: 
149:       // Update search count and last searched
150:       cache.searchCount += 1;
151:       cache.lastSearched = new Date();
152:       await cache.save();
153: 
154:       console.log(`[JOB_CACHE] ✅ Returning ${jobs.length} cached jobs (${jobs.filter(j => j.seen).length} seen by user)`);
155: 
156:       return jobs;
157:     } catch (error) {
158:       console.error('[JOB_CACHE] Error getting cached jobs:', error);
159:       return null;
160:     }
161:   }
162: 
163:   /**
164:    * Cache new search results
165:    */
166:   async cacheSearchResults(
167:     options: SearchCacheOptions,
168:     jobs: any[]
169:   ): Promise<void> {
170:     try {
171:       await dbService.connect();
172: 
173:       // CRITICAL FIX: Validate and clean jobs BEFORE caching
174:       const validJobs = jobs.filter(job => {
175:         // Ensure all required fields exist
176:         if (!job.title || !job.company || !job.location || !job.url) {
177:           console.log(`[JOB_CACHE] ❌ Skipping invalid job: missing required fields`);
178:           return false;
179:         }
180:         
181:         // Ensure description exists (set default if empty)
182:         if (!job.description || job.description.trim() === '') {
183:           job.description = 'No description available';
184:         }
185:         
186:         // Ensure source exists
187:         if (!job.source) {
188:           job.source = 'Unknown';
189:         }
190:         
191:         return true;
192:       });
193: 
194:       console.log(`[JOB_CACHE] Validated ${validJobs.length}/${jobs.length} jobs for caching`);
195: 
196:       const normalizedKeywords = this.normalizeKeywords(options.keywords);
197: 
198:       // Check if cache already exists
199:       const existing = await this.findCachedSearch(options);
200: 
201:       if (existing) {
202:         // Merge new jobs with existing (avoid duplicates)
203:         const existingJobIds = new Set(existing.jobs.map((j: any) => j.jobId));
204:         
205:         const newJobs = validJobs
206:           .filter(job => {
207:             const jobId = this.generateJobId(job.title, job.company, job.location);
208:             return !existingJobIds.has(jobId);
209:           })
210:           .map(job => ({
211:             jobId: this.generateJobId(job.title, job.company, job.location),
212:             title: job.title,
213:             company: job.company,
214:             location: job.location,
215:             description: job.description || '',
216:             url: job.url || job.link || '',
217:             source: job.source || 'Unknown',
218:             salary: job.salary,
219:             postedDate: job.postedDate || job.datePosted,
220:             workType: job.workType || job.remote ? 'remote' : undefined,
221:             skillMatchScore: job.skillMatchScore,
222:             viewedBy: [],
223:             appliedBy: [],
224:             savedBy: []
225:           }));
226: 
227:         if (newJobs.length > 0) {
228:           existing.jobs.push(...newJobs);
229:           existing.lastSearched = new Date();
230:           existing.searchCount += 1;
231:           await existing.save();
232:           
233:           console.log(`[JOB_CACHE] ✅ Added ${newJobs.length} new jobs to existing cache`);
234:         } else {
235:           console.log(`[JOB_CACHE] ℹ️ No new jobs to add (all duplicates)`);
236:         }
237:       } else {
238:         // Create new cache entry
239:         const cacheEntry = new JobSearchCache({
240:           keywords: Array.isArray(options.keywords) ? options.keywords : [options.keywords],
241:           normalizedKeywords,
242:           location: options.location,
243:           workType: options.workType || 'any',
244:           experienceLevel: options.experienceLevel,
245:           jobs: validJobs.map(job => ({
246:             jobId: this.generateJobId(job.title, job.company, job.location),
247:             title: job.title,
248:             company: job.company,
249:             location: job.location,
250:             description: job.description || '',
251:             url: job.url || job.link || '',
252:             source: job.source || 'Unknown',
253:             salary: job.salary,
254:             postedDate: job.postedDate || job.datePosted,
255:             workType: job.workType || job.remote ? 'remote' : undefined,
256:             skillMatchScore: job.skillMatchScore,
257:             viewedBy: [],
258:             appliedBy: [],
259:             savedBy: []
260:           })),
261:           searchCount: 1,
262:           lastSearched: new Date(),
263:           expiresAt: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000) // 3 weeks
264:         });
265: 
266:         await cacheEntry.save();
267:         console.log(`[JOB_CACHE] ✅ Created new cache with ${validJobs.length} jobs`);
268:       }
269:     } catch (error) {
270:       console.error('[JOB_CACHE] Error caching search results:', error);
271:       // Non-critical, don't throw
272:     }
273:   }
274: 
275:   /**
276:    * Mark job as viewed by user
277:    */
278:   async markJobViewed(
279:     jobId: string,
280:     userId: string
281:   ): Promise<void> {
282:     try {
283:       await dbService.connect();
284: 
285:       const userObjectId = new Types.ObjectId(userId);
286: 
287:       await JobSearchCache.updateOne(
288:         { 'jobs.jobId': jobId },
289:         { 
290:           $addToSet: { 'jobs.$.viewedBy': userObjectId }
291:         }
292:       );
293: 
294:       console.log(`[JOB_CACHE] ✅ Marked job ${jobId} as viewed by user ${userId}`);
295:     } catch (error) {
296:       console.error('[JOB_CACHE] Error marking job as viewed:', error);
297:     }
298:   }
299: 
300:   /**
301:    * Mark job as applied by user
302:    */
303:   async markJobApplied(
304:     jobId: string,
305:     userId: string
306:   ): Promise<void> {
307:     try {
308:       await dbService.connect();
309: 
310:       const userObjectId = new Types.ObjectId(userId);
311: 
312:       await JobSearchCache.updateOne(
313:         { 'jobs.jobId': jobId },
314:         { 
315:           $addToSet: { 
316:             'jobs.$.appliedBy': userObjectId,
317:             'jobs.$.viewedBy': userObjectId // Also mark as viewed
318:           }
319:         }
320:       );
321: 
322:       console.log(`[JOB_CACHE] ✅ Marked job ${jobId} as applied by user ${userId}`);
323:     } catch (error) {
324:       console.error('[JOB_CACHE] Error marking job as applied:', error);
325:     }
326:   }
327: 
328:   /**
329:    * Mark job as saved by user
330:    */
331:   async markJobSaved(
332:     jobId: string,
333:     userId: string,
334:     saved: boolean = true
335:   ): Promise<void> {
336:     try {
337:       await dbService.connect();
338: 
339:       const userObjectId = new Types.ObjectId(userId);
340: 
341:       if (saved) {
342:         await JobSearchCache.updateOne(
343:           { 'jobs.jobId': jobId },
344:           { 
345:             $addToSet: { 
346:               'jobs.$.savedBy': userObjectId,
347:               'jobs.$.viewedBy': userObjectId // Also mark as viewed
348:             }
349:           }
350:         );
351:       } else {
352:         await JobSearchCache.updateOne(
353:           { 'jobs.jobId': jobId },
354:           { 
355:             $pull: { 'jobs.$.savedBy': userObjectId }
356:           }
357:         );
358:       }
359: 
360:       console.log(`[JOB_CACHE] ✅ Marked job ${jobId} as ${saved ? 'saved' : 'unsaved'} by user ${userId}`);
361:     } catch (error) {
362:       console.error('[JOB_CACHE] Error marking job as saved:', error);
363:     }
364:   }
365: 
366:   /**
367:    * Get cache statistics
368:    */
369:   async getCacheStats(): Promise<{
370:     totalCaches: number;
371:     totalJobs: number;
372:     averageJobsPerCache: number;
373:     oldestCache: Date | null;
374:     newestCache: Date | null;
375:   }> {
376:     try {
377:       await dbService.connect();
378: 
379:       const caches = await JobSearchCache.find({
380:         expiresAt: { $gt: new Date() }
381:       }).exec();
382: 
383:       const totalJobs = caches.reduce((sum, cache) => sum + cache.jobs.length, 0);
384: 
385:       return {
386:         totalCaches: caches.length,
387:         totalJobs,
388:         averageJobsPerCache: caches.length > 0 ? Math.round(totalJobs / caches.length) : 0,
389:         oldestCache: caches.length > 0 
390:           ? new Date(Math.min(...caches.map(c => c.createdAt.getTime())))
391:           : null,
392:         newestCache: caches.length > 0
393:           ? new Date(Math.max(...caches.map(c => c.createdAt.getTime())))
394:           : null
395:       };
396:     } catch (error) {
397:       console.error('[JOB_CACHE] Error getting cache stats:', error);
398:       return {
399:         totalCaches: 0,
400:         totalJobs: 0,
401:         averageJobsPerCache: 0,
402:         oldestCache: null,
403:         newestCache: null
404:       };
405:     }
406:   }
407: }
408: 
409: export const jobSearchCacheService = JobSearchCacheService.getInstance();
</file>

<file path="src/services/resume.service.ts">
  1: /**
  2:  * Enterprise Resume Service
  3:  * 
  4:  * Provides centralized resume management with:
  5:  * - Database operations with connection pooling
  6:  * - Error handling and logging
  7:  * - Data validation
  8:  * - Transaction support
  9:  * - Performance optimization
 10:  */
 11: 
 12: import { Types } from 'mongoose'
 13: import Resume, { IResume, ICustomizedResume } from '@/models/Resume'
 14: import { dbService } from '@/lib/database'
 15: import { dbLogger, logger } from '@/lib/logger'
 16: import { InputValidator } from '@/lib/validation'
 17: 
 18: export interface CreateResumeDTO {
 19:   userId: string
 20:   originalFileName: string
 21:   fileUrl?: string
 22:   extractedText: string
 23:   userName?: string
 24:   contactEmail?: string
 25:   contactPhone?: string
 26:   yearsExperience?: number
 27: }
 28: 
 29: export interface UpdateResumeDTO {
 30:   originalFileName?: string
 31:   fileUrl?: string
 32:   extractedText?: string
 33:   userName?: string
 34:   contactEmail?: string
 35:   contactPhone?: string
 36:   yearsExperience?: number
 37: }
 38: 
 39: export interface CreateCustomizedVersionDTO {
 40:   jobApplicationId: string
 41:   customizedText: string
 42:   jobTitle: string
 43:   companyName: string
 44:   matchScore?: number
 45:   fileName?: string
 46: }
 47: 
 48: export interface ResumeQueryOptions {
 49:   limit?: number
 50:   skip?: number
 51:   sortBy?: 'createdAt' | 'updatedAt'
 52:   sortOrder?: 'asc' | 'desc'
 53: }
 54: 
 55: class ResumeService {
 56:   private static instance: ResumeService
 57: 
 58:   private constructor() {}
 59: 
 60:   static getInstance(): ResumeService {
 61:     if (!ResumeService.instance) {
 62:       ResumeService.instance = new ResumeService()
 63:     }
 64:     return ResumeService.instance
 65:   }
 66: 
 67:   /**
 68:    * Create a new resume
 69:    */
 70:   async createResume(data: CreateResumeDTO): Promise<IResume> {
 71:     const startTime = Date.now()
 72: 
 73:     try {
 74:       // Connect to database
 75:       await dbService.connect()
 76: 
 77:       // Validate input
 78:       this.validateCreateResumeData(data)
 79: 
 80:       // Sanitize text inputs
 81:       const sanitizedData = {
 82:         userId: new Types.ObjectId(data.userId),
 83:         originalFileName: InputValidator.sanitizeText(data.originalFileName),
 84:         fileUrl: data.fileUrl ? InputValidator.sanitizeText(data.fileUrl) : undefined,
 85:         extractedText: data.extractedText, // Keep raw text for analysis
 86:         userName: data.userName ? InputValidator.sanitizeText(data.userName) : undefined,
 87:         contactEmail: data.contactEmail,
 88:         contactPhone: data.contactPhone ? InputValidator.sanitizeText(data.contactPhone) : undefined,
 89:         yearsExperience: data.yearsExperience,
 90:         customizedVersions: []
 91:       }
 92: 
 93:       // Create resume
 94:       const resume = new Resume(sanitizedData)
 95:       await resume.save()
 96: 
 97:       const duration = Date.now() - startTime
 98:       dbLogger.dbQuery('CREATE', 'Resume', duration)
 99:       logger.info('Resume created successfully', {
100:         resumeId: resume._id,
101:         userId: data.userId,
102:         duration
103:       })
104: 
105:       return resume
106:     } catch (error) {
107:       const duration = Date.now() - startTime
108:       dbLogger.dbError('CREATE', 'Resume', error as Error)
109:       logger.error('Failed to create resume', {
110:         userId: data.userId,
111:         error: error instanceof Error ? error.message : 'Unknown error',
112:         duration
113:       })
114:       throw error
115:     }
116:   }
117: 
118:   /**
119:    * Get resume by ID
120:    */
121:   async getResumeById(resumeId: string): Promise<IResume | null> {
122:     const startTime = Date.now()
123: 
124:     try {
125:       await dbService.connect()
126: 
127:       if (!Types.ObjectId.isValid(resumeId)) {
128:         throw new Error('Invalid resume ID format')
129:       }
130: 
131:       const resume = await Resume.findById(resumeId).lean<IResume>().exec()
132: 
133:       const duration = Date.now() - startTime
134:       dbLogger.dbQuery('FIND_BY_ID', 'Resume', duration)
135: 
136:       return resume
137:     } catch (error) {
138:       const duration = Date.now() - startTime
139:       dbLogger.dbError('FIND_BY_ID', 'Resume', error as Error)
140:       throw error
141:     }
142:   }
143: 
144:   /**
145:    * Get all resumes for a user
146:    */
147:   async getResumesByUserId(
148:     userId: string,
149:     options: ResumeQueryOptions = {}
150:   ): Promise<IResume[]> {
151:     const startTime = Date.now()
152: 
153:     try {
154:       await dbService.connect()
155: 
156:       if (!Types.ObjectId.isValid(userId)) {
157:         throw new Error('Invalid user ID format')
158:       }
159: 
160:       const {
161:         limit = 50,
162:         skip = 0,
163:         sortBy = 'createdAt',
164:         sortOrder = 'desc'
165:       } = options
166: 
167:       const query = Resume.find({ userId: new Types.ObjectId(userId) })
168:         .sort({ [sortBy]: sortOrder === 'desc' ? -1 : 1 })
169:         .skip(skip)
170:         .limit(limit)
171:         .lean<IResume[]>()
172: 
173:       const resumes = await query.exec()
174: 
175:       const duration = Date.now() - startTime
176:       dbLogger.dbQuery('FIND_BY_USER', 'Resume', duration)
177:       logger.debug(`Retrieved ${resumes.length} resumes for user`, {
178:         userId,
179:         count: resumes.length,
180:         duration
181:       })
182: 
183:       return resumes
184:     } catch (error) {
185:       const duration = Date.now() - startTime
186:       dbLogger.dbError('FIND_BY_USER', 'Resume', error as Error)
187:       throw error
188:     }
189:   }
190: 
191:   /**
192:    * Get user's most recent resume
193:    */
194:   async getLatestResumeByUserId(userId: string): Promise<IResume | null> {
195:     const startTime = Date.now()
196: 
197:     try {
198:       await dbService.connect()
199: 
200:       if (!Types.ObjectId.isValid(userId)) {
201:         throw new Error('Invalid user ID format')
202:       }
203: 
204:       const resume = await Resume.findOne({ userId: new Types.ObjectId(userId) })
205:         .sort({ createdAt: -1 })
206:         .lean<IResume>()
207:         .exec()
208: 
209:       const duration = Date.now() - startTime
210:       dbLogger.dbQuery('FIND_LATEST', 'Resume', duration)
211: 
212:       return resume
213:     } catch (error) {
214:       const duration = Date.now() - startTime
215:       dbLogger.dbError('FIND_LATEST', 'Resume', error as Error)
216:       throw error
217:     }
218:   }
219: 
220:   /**
221:    * Update resume
222:    */
223:   async updateResume(
224:     resumeId: string,
225:     data: UpdateResumeDTO
226:   ): Promise<IResume | null> {
227:     const startTime = Date.now()
228: 
229:     try {
230:       await dbService.connect()
231: 
232:       if (!Types.ObjectId.isValid(resumeId)) {
233:         throw new Error('Invalid resume ID format')
234:       }
235: 
236:       // Sanitize inputs
237:       const sanitizedData: any = {}
238:       if (data.originalFileName) {
239:         sanitizedData.originalFileName = InputValidator.sanitizeText(data.originalFileName)
240:       }
241:       if (data.fileUrl) {
242:         sanitizedData.fileUrl = InputValidator.sanitizeText(data.fileUrl)
243:       }
244:       if (data.extractedText) {
245:         sanitizedData.extractedText = data.extractedText
246:       }
247:       if (data.userName) {
248:         sanitizedData.userName = InputValidator.sanitizeText(data.userName)
249:       }
250:       if (data.contactEmail) {
251:         if (!InputValidator.validateEmail(data.contactEmail)) {
252:           throw new Error('Invalid email format')
253:         }
254:         sanitizedData.contactEmail = data.contactEmail
255:       }
256:       if (data.contactPhone) {
257:         sanitizedData.contactPhone = InputValidator.sanitizeText(data.contactPhone)
258:       }
259:       if (data.yearsExperience !== undefined) {
260:         sanitizedData.yearsExperience = data.yearsExperience
261:       }
262: 
263:       const resume = await Resume.findByIdAndUpdate(
264:         resumeId,
265:         { $set: sanitizedData },
266:         { new: true, runValidators: true }
267:       ).exec()
268: 
269:       const duration = Date.now() - startTime
270:       dbLogger.dbQuery('UPDATE', 'Resume', duration)
271:       logger.info('Resume updated successfully', {
272:         resumeId,
273:         duration
274:       })
275: 
276:       return resume
277:     } catch (error) {
278:       const duration = Date.now() - startTime
279:       dbLogger.dbError('UPDATE', 'Resume', error as Error)
280:       logger.error('Failed to update resume', {
281:         resumeId,
282:         error: error instanceof Error ? error.message : 'Unknown error'
283:       })
284:       throw error
285:     }
286:   }
287: 
288:   /**
289:    * Delete resume
290:    */
291:   async deleteResume(resumeId: string): Promise<boolean> {
292:     const startTime = Date.now()
293: 
294:     try {
295:       await dbService.connect()
296: 
297:       if (!Types.ObjectId.isValid(resumeId)) {
298:         throw new Error('Invalid resume ID format')
299:       }
300: 
301:       const result = await Resume.findByIdAndDelete(resumeId).exec()
302: 
303:       const duration = Date.now() - startTime
304:       dbLogger.dbQuery('DELETE', 'Resume', duration)
305:       logger.info('Resume deleted successfully', {
306:         resumeId,
307:         duration
308:       })
309: 
310:       return !!result
311:     } catch (error) {
312:       const duration = Date.now() - startTime
313:       dbLogger.dbError('DELETE', 'Resume', error as Error)
314:       logger.error('Failed to delete resume', {
315:         resumeId,
316:         error: error instanceof Error ? error.message : 'Unknown error'
317:       })
318:       throw error
319:     }
320:   }
321: 
322:   /**
323:    * Add customized version to resume
324:    */
325:   async addCustomizedVersion(
326:     resumeId: string,
327:     data: CreateCustomizedVersionDTO
328:   ): Promise<IResume | null> {
329:     const startTime = Date.now()
330: 
331:     try {
332:       await dbService.connect()
333: 
334:       if (!Types.ObjectId.isValid(resumeId)) {
335:         throw new Error('Invalid resume ID format')
336:       }
337:       if (!Types.ObjectId.isValid(data.jobApplicationId)) {
338:         throw new Error('Invalid job application ID format')
339:       }
340: 
341:       const customizedVersion = {
342:         jobApplicationId: new Types.ObjectId(data.jobApplicationId),
343:         customizedText: data.customizedText,
344:         jobTitle: InputValidator.sanitizeText(data.jobTitle),
345:         companyName: InputValidator.sanitizeText(data.companyName),
346:         matchScore: data.matchScore || 0,
347:         fileName: data.fileName ? InputValidator.sanitizeText(data.fileName) : undefined
348:       }
349: 
350:       const resume = await Resume.findByIdAndUpdate(
351:         resumeId,
352:         { $push: { customizedVersions: customizedVersion } },
353:         { new: true, runValidators: true }
354:       ).exec()
355: 
356:       const duration = Date.now() - startTime
357:       dbLogger.dbQuery('ADD_CUSTOMIZED_VERSION', 'Resume', duration)
358:       logger.info('Customized resume version added', {
359:         resumeId,
360:         jobApplicationId: data.jobApplicationId,
361:         duration
362:       })
363: 
364:       return resume
365:     } catch (error) {
366:       const duration = Date.now() - startTime
367:       dbLogger.dbError('ADD_CUSTOMIZED_VERSION', 'Resume', error as Error)
368:       logger.error('Failed to add customized version', {
369:         resumeId,
370:         error: error instanceof Error ? error.message : 'Unknown error'
371:       })
372:       throw error
373:     }
374:   }
375: 
376:   /**
377:    * Get customized version by job application ID
378:    */
379:   async getCustomizedVersion(
380:     resumeId: string,
381:     jobApplicationId: string
382:   ): Promise<ICustomizedResume | null> {
383:     const startTime = Date.now()
384: 
385:     try {
386:       await dbService.connect()
387: 
388:       if (!Types.ObjectId.isValid(resumeId)) {
389:         throw new Error('Invalid resume ID format')
390:       }
391:       if (!Types.ObjectId.isValid(jobApplicationId)) {
392:         throw new Error('Invalid job application ID format')
393:       }
394: 
395:       const resume = await Resume.findById(resumeId).lean<IResume>().exec()
396:       if (!resume) {
397:         return null
398:       }
399: 
400:       const customizedVersion = resume.customizedVersions.find(
401:         (v: any) => v.jobApplicationId.toString() === jobApplicationId
402:       ) as ICustomizedResume | undefined
403: 
404:       const duration = Date.now() - startTime
405:       dbLogger.dbQuery('GET_CUSTOMIZED_VERSION', 'Resume', duration)
406: 
407:       return customizedVersion || null
408:     } catch (error) {
409:       const duration = Date.now() - startTime
410:       dbLogger.dbError('GET_CUSTOMIZED_VERSION', 'Resume', error as Error)
411:       throw error
412:     }
413:   }
414: 
415:   /**
416:    * Count total resumes for a user
417:    */
418:   async countResumesByUserId(userId: string): Promise<number> {
419:     const startTime = Date.now()
420: 
421:     try {
422:       await dbService.connect()
423: 
424:       if (!Types.ObjectId.isValid(userId)) {
425:         throw new Error('Invalid user ID format')
426:       }
427: 
428:       const count = await Resume.countDocuments({
429:         userId: new Types.ObjectId(userId)
430:       }).exec()
431: 
432:       const duration = Date.now() - startTime
433:       dbLogger.dbQuery('COUNT', 'Resume', duration)
434: 
435:       return count
436:     } catch (error) {
437:       const duration = Date.now() - startTime
438:       dbLogger.dbError('COUNT', 'Resume', error as Error)
439:       throw error
440:     }
441:   }
442: 
443:   /**
444:    * Search resumes by text content
445:    */
446:   async searchResumes(
447:     userId: string,
448:     searchTerm: string,
449:     options: ResumeQueryOptions = {}
450:   ): Promise<IResume[]> {
451:     const startTime = Date.now()
452: 
453:     try {
454:       await dbService.connect()
455: 
456:       if (!Types.ObjectId.isValid(userId)) {
457:         throw new Error('Invalid user ID format')
458:       }
459: 
460:       const {
461:         limit = 50,
462:         skip = 0,
463:         sortBy = 'createdAt',
464:         sortOrder = 'desc'
465:       } = options
466: 
467:       const searchRegex = new RegExp(searchTerm, 'i')
468: 
469:       const resumes = await Resume.find({
470:         userId: new Types.ObjectId(userId),
471:         $or: [
472:           { extractedText: searchRegex },
473:           { userName: searchRegex },
474:           { originalFileName: searchRegex }
475:         ]
476:       })
477:         .sort({ [sortBy]: sortOrder === 'desc' ? -1 : 1 })
478:         .skip(skip)
479:         .limit(limit)
480:         .lean<IResume[]>()
481:         .exec()
482: 
483:       const duration = Date.now() - startTime
484:       dbLogger.dbQuery('SEARCH', 'Resume', duration)
485:       logger.debug(`Found ${resumes.length} resumes matching search`, {
486:         userId,
487:         searchTerm,
488:         count: resumes.length,
489:         duration
490:       })
491: 
492:       return resumes
493:     } catch (error) {
494:       const duration = Date.now() - startTime
495:       dbLogger.dbError('SEARCH', 'Resume', error as Error)
496:       throw error
497:     }
498:   }
499: 
500:   /**
501:    * Validate create resume data
502:    */
503:   private validateCreateResumeData(data: CreateResumeDTO): void {
504:     if (!data.userId || !Types.ObjectId.isValid(data.userId)) {
505:       throw new Error('Valid userId is required')
506:     }
507: 
508:     if (!data.originalFileName || data.originalFileName.trim().length === 0) {
509:       throw new Error('originalFileName is required')
510:     }
511: 
512:     if (!data.extractedText || data.extractedText.trim().length === 0) {
513:       throw new Error('extractedText is required')
514:     }
515: 
516:     if (data.contactEmail && !InputValidator.validateEmail(data.contactEmail)) {
517:       throw new Error('Invalid email format')
518:     }
519: 
520:     if (data.fileUrl && !InputValidator.validateURL(data.fileUrl)) {
521:       throw new Error('Invalid fileUrl format')
522:     }
523: 
524:     if (data.yearsExperience !== undefined && (data.yearsExperience < 0 || data.yearsExperience > 100)) {
525:       throw new Error('yearsExperience must be between 0 and 100')
526:     }
527:   }
528: }
529: 
530: // Export singleton instance
531: export const resumeService = ResumeService.getInstance()
</file>

<file path="src/stores/app.store.ts">
  1: /**
  2:  * Application State Store (Zustand)
  3:  * 
  4:  * Manages global application state including:
  5:  * - UI state (modals, sidebars, loading)
  6:  * - Temporary data (drafts, uploads)
  7:  * - Navigation state
  8:  */
  9: 
 10: import { create } from 'zustand'
 11: 
 12: interface UploadProgress {
 13:   fileName: string
 14:   progress: number
 15:   status: 'uploading' | 'processing' | 'complete' | 'error'
 16: }
 17: 
 18: interface Toast {
 19:   id: string
 20:   type: 'success' | 'error' | 'warning' | 'info'
 21:   message: string
 22:   duration?: number
 23: }
 24: 
 25: interface AppState {
 26:   // UI State
 27:   sidebarOpen: boolean
 28:   mobileMenuOpen: boolean
 29:   modalOpen: string | null
 30:   
 31:   // Upload State
 32:   uploads: Record<string, UploadProgress>
 33:   
 34:   // Toast Notifications
 35:   toasts: Toast[]
 36:   
 37:   // Loading States
 38:   globalLoading: boolean
 39:   loadingMessage: string | null
 40:   
 41:   // Actions - UI
 42:   toggleSidebar: () => void
 43:   setSidebarOpen: (open: boolean) => void
 44:   toggleMobileMenu: () => void
 45:   setMobileMenuOpen: (open: boolean) => void
 46:   openModal: (modalId: string) => void
 47:   closeModal: () => void
 48:   
 49:   // Actions - Uploads
 50:   setUploadProgress: (fileId: string, progress: UploadProgress) => void
 51:   removeUpload: (fileId: string) => void
 52:   clearUploads: () => void
 53:   
 54:   // Actions - Toasts
 55:   addToast: (toast: Omit<Toast, 'id'>) => void
 56:   removeToast: (id: string) => void
 57:   clearToasts: () => void
 58:   
 59:   // Actions - Loading
 60:   setGlobalLoading: (loading: boolean, message?: string) => void
 61: }
 62: 
 63: export const useAppStore = create<AppState>((set) => ({
 64:   // Initial state
 65:   sidebarOpen: true,
 66:   mobileMenuOpen: false,
 67:   modalOpen: null,
 68:   uploads: {},
 69:   toasts: [],
 70:   globalLoading: false,
 71:   loadingMessage: null,
 72: 
 73:   // UI Actions
 74:   toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),
 75:   
 76:   setSidebarOpen: (open) => set({ sidebarOpen: open }),
 77:   
 78:   toggleMobileMenu: () => set((state) => ({ mobileMenuOpen: !state.mobileMenuOpen })),
 79:   
 80:   setMobileMenuOpen: (open) => set({ mobileMenuOpen: open }),
 81:   
 82:   openModal: (modalId) => set({ modalOpen: modalId }),
 83:   
 84:   closeModal: () => set({ modalOpen: null }),
 85: 
 86:   // Upload Actions
 87:   setUploadProgress: (fileId, progress) =>
 88:     set((state) => ({
 89:       uploads: { ...state.uploads, [fileId]: progress },
 90:     })),
 91:   
 92:   removeUpload: (fileId) =>
 93:     set((state) => {
 94:       const { [fileId]: removed, ...rest } = state.uploads
 95:       return { uploads: rest }
 96:     }),
 97:   
 98:   clearUploads: () => set({ uploads: {} }),
 99: 
100:   // Toast Actions
101:   addToast: (toast) =>
102:     set((state) => ({
103:       toasts: [
104:         ...state.toasts,
105:         {
106:           ...toast,
107:           id: `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
108:         },
109:       ],
110:     })),
111:   
112:   removeToast: (id) =>
113:     set((state) => ({
114:       toasts: state.toasts.filter((t) => t.id !== id),
115:     })),
116:   
117:   clearToasts: () => set({ toasts: [] }),
118: 
119:   // Loading Actions
120:   setGlobalLoading: (loading, message) =>
121:     set({ globalLoading: loading, loadingMessage: message || null }),
122: }))
123: 
124: // Selectors
125: export const selectSidebarOpen = (state: AppState) => state.sidebarOpen
126: export const selectMobileMenuOpen = (state: AppState) => state.mobileMenuOpen
127: export const selectModalOpen = (state: AppState) => state.modalOpen
128: export const selectUploads = (state: AppState) => state.uploads
129: export const selectToasts = (state: AppState) => state.toasts
130: export const selectGlobalLoading = (state: AppState) => state.globalLoading
</file>

<file path="src/stores/job-application.store.ts">
  1: /**
  2:  * Job Application State Store (Zustand)
  3:  * 
  4:  * Manages job application state including:
  5:  * - Application drafts
  6:  * - Filters and search
  7:  * - Selected applications
  8:  */
  9: 
 10: import { create } from 'zustand'
 11: import { persist } from 'zustand/middleware'
 12: 
 13: type ApplicationStatus = 'saved' | 'applied' | 'interviewing' | 'offer' | 'rejected' | 'withdrawn'
 14: 
 15: interface ApplicationDraft {
 16:   jobTitle: string
 17:   companyName: string
 18:   jobDescription: string
 19:   jobUrl?: string
 20:   notes?: string
 21:   lastModified: string
 22: }
 23: 
 24: interface ApplicationFilters {
 25:   status: ApplicationStatus[]
 26:   companyName?: string
 27:   jobTitle?: string
 28:   dateFrom?: string
 29:   dateTo?: string
 30: }
 31: 
 32: interface JobApplicationState {
 33:   // State
 34:   drafts: Record<string, ApplicationDraft>
 35:   selectedApplicationIds: string[]
 36:   filters: ApplicationFilters
 37:   searchQuery: string
 38:   
 39:   // Actions - Drafts
 40:   saveDraft: (id: string, draft: ApplicationDraft) => void
 41:   getDraft: (id: string) => ApplicationDraft | undefined
 42:   removeDraft: (id: string) => void
 43:   clearDrafts: () => void
 44:   
 45:   // Actions - Selection
 46:   selectApplication: (id: string) => void
 47:   deselectApplication: (id: string) => void
 48:   toggleApplicationSelection: (id: string) => void
 49:   selectMultipleApplications: (ids: string[]) => void
 50:   clearSelection: () => void
 51:   
 52:   // Actions - Filters
 53:   setFilters: (filters: Partial<ApplicationFilters>) => void
 54:   resetFilters: () => void
 55:   setSearchQuery: (query: string) => void
 56: }
 57: 
 58: const initialFilters: ApplicationFilters = {
 59:   status: [],
 60: }
 61: 
 62: export const useJobApplicationStore = create<JobApplicationState>()(
 63:   persist(
 64:     (set, get) => ({
 65:       // Initial state
 66:       drafts: {},
 67:       selectedApplicationIds: [],
 68:       filters: initialFilters,
 69:       searchQuery: '',
 70: 
 71:       // Draft Actions
 72:       saveDraft: (id, draft) =>
 73:         set((state) => ({
 74:           drafts: {
 75:             ...state.drafts,
 76:             [id]: { ...draft, lastModified: new Date().toISOString() },
 77:           },
 78:         })),
 79:       
 80:       getDraft: (id) => get().drafts[id],
 81:       
 82:       removeDraft: (id) =>
 83:         set((state) => {
 84:           const { [id]: removed, ...rest } = state.drafts
 85:           return { drafts: rest }
 86:         }),
 87:       
 88:       clearDrafts: () => set({ drafts: {} }),
 89: 
 90:       // Selection Actions
 91:       selectApplication: (id) =>
 92:         set((state) => {
 93:           if (state.selectedApplicationIds.includes(id)) {
 94:             return state
 95:           }
 96:           return {
 97:             selectedApplicationIds: [...state.selectedApplicationIds, id],
 98:           }
 99:         }),
100:       
101:       deselectApplication: (id) =>
102:         set((state) => ({
103:           selectedApplicationIds: state.selectedApplicationIds.filter((appId) => appId !== id),
104:         })),
105:       
106:       toggleApplicationSelection: (id) =>
107:         set((state) => {
108:           const isSelected = state.selectedApplicationIds.includes(id)
109:           return {
110:             selectedApplicationIds: isSelected
111:               ? state.selectedApplicationIds.filter((appId) => appId !== id)
112:               : [...state.selectedApplicationIds, id],
113:           }
114:         }),
115:       
116:       selectMultipleApplications: (ids) =>
117:         set({ selectedApplicationIds: ids }),
118:       
119:       clearSelection: () => set({ selectedApplicationIds: [] }),
120: 
121:       // Filter Actions
122:       setFilters: (newFilters) =>
123:         set((state) => ({
124:           filters: { ...state.filters, ...newFilters },
125:         })),
126:       
127:       resetFilters: () => set({ filters: initialFilters }),
128:       
129:       setSearchQuery: (query) => set({ searchQuery: query }),
130:     }),
131:     {
132:       name: 'job-application-storage',
133:       partialize: (state) => ({
134:         drafts: state.drafts,
135:         filters: state.filters,
136:       }),
137:     }
138:   )
139: )
140: 
141: // Selectors
142: export const selectDrafts = (state: JobApplicationState) => state.drafts
143: export const selectSelectedIds = (state: JobApplicationState) => state.selectedApplicationIds
144: export const selectFilters = (state: JobApplicationState) => state.filters
145: export const selectSearchQuery = (state: JobApplicationState) => state.searchQuery
146: export const selectHasActiveFilters = (state: JobApplicationState) =>
147:   state.filters.status.length > 0 ||
148:   !!state.filters.companyName ||
149:   !!state.filters.jobTitle ||
150:   !!state.filters.dateFrom ||
151:   !!state.filters.dateTo
</file>

<file path="src/stores/user.store.ts">
 1: /**
 2:  * User State Store (Zustand)
 3:  * 
 4:  * Manages client-side user state including:
 5:  * - User profile data
 6:  * - Authentication status
 7:  * - User preferences
 8:  */
 9: 
10: import { create } from 'zustand'
11: import { persist } from 'zustand/middleware'
12: 
13: interface User {
14:   id: string
15:   email: string
16:   name: string
17:   image?: string
18:   title?: string
19:   location?: string
20:   plan?: 'free' | 'pro' | 'company'
21: }
22: 
23: interface UserPreferences {
24:   theme?: 'light' | 'dark' | 'system'
25:   emailNotifications?: boolean
26:   jobAlerts?: boolean
27:   autopilotEnabled?: boolean
28: }
29: 
30: interface UserState {
31:   // State
32:   user: User | null
33:   preferences: UserPreferences
34:   isLoading: boolean
35:   
36:   // Actions
37:   setUser: (user: User | null) => void
38:   updateUser: (updates: Partial<User>) => void
39:   setPreferences: (preferences: Partial<UserPreferences>) => void
40:   clearUser: () => void
41:   setLoading: (loading: boolean) => void
42: }
43: 
44: export const useUserStore = create<UserState>()(
45:   persist(
46:     (set) => ({
47:       // Initial state
48:       user: null,
49:       preferences: {
50:         theme: 'system',
51:         emailNotifications: true,
52:         jobAlerts: true,
53:         autopilotEnabled: false,
54:       },
55:       isLoading: false,
56: 
57:       // Actions
58:       setUser: (user) => set({ user, isLoading: false }),
59:       
60:       updateUser: (updates) => 
61:         set((state) => ({
62:           user: state.user ? { ...state.user, ...updates } : null,
63:         })),
64:       
65:       setPreferences: (newPreferences) =>
66:         set((state) => ({
67:           preferences: { ...state.preferences, ...newPreferences },
68:         })),
69:       
70:       clearUser: () => set({ user: null, preferences: {
71:         theme: 'system',
72:         emailNotifications: true,
73:         jobAlerts: true,
74:         autopilotEnabled: false,
75:       }}),
76:       
77:       setLoading: (loading) => set({ isLoading: loading }),
78:     }),
79:     {
80:       name: 'user-storage', // LocalStorage key
81:       partialize: (state) => ({
82:         user: state.user,
83:         preferences: state.preferences,
84:       }),
85:     }
86:   )
87: )
88: 
89: // Selectors for optimized re-renders
90: export const selectUser = (state: UserState) => state.user
91: export const selectUserPlan = (state: UserState) => state.user?.plan
92: export const selectPreferences = (state: UserState) => state.preferences
93: export const selectIsLoading = (state: UserState) => state.isLoading
</file>

<file path="src/types/comprehensive.ts">
 1: /**
 2:  * Comprehensive Job Research Types
 3:  * One-shot research data for entire Career Finder flow
 4:  */
 5: 
 6: import type { HiringContact, CompanyReview } from './unified'
 7: 
 8: export interface JobAnalysis {
 9:   matchScore: number
10:   matchingSkills: string[]
11:   missingSkills: string[]
12:   skillsToHighlight: string[]
13:   recommendations: string[]
14:   estimatedFit: string
15: }
16: 
17: export interface CompanyIntel {
18:   culture: string
19:   values: string[]
20:   industry: string
21:   size?: string
22:   founded?: string
23:   headquarters?: string
24: }
25: 
26: export interface CompanyNews {
27:   title: string
28:   date: string
29:   summary: string
30:   url?: string
31:   sentiment?: 'positive' | 'neutral' | 'negative'
32: }
33: 
34: // Re-export from unified to avoid conflicts
35: export type { HiringContact, CompanyReview }
36: 
37: export interface ComprehensiveJobResearchData {
38:   jobAnalysis: JobAnalysis
39:   companyIntel: CompanyIntel
40:   hiringContacts: HiringContact[]
41:   news: CompanyNews[]
42:   reviews: CompanyReview[]
43:   marketIntelligence?: {
44:     salaryRange?: string
45:     demandLevel?: string
46:     growthTrend?: string
47:   }
48:   researchedAt: Date
49: }
50: 
51: export interface ComprehensiveJobResearchResponse {
52:   success: boolean
53:   data?: ComprehensiveJobResearchData
54:   error?: string
55:   cached?: boolean
56: }
</file>

<file path="src/types/cover-letters.ts">
 1: /**
 2:  * Cover Letter Types
 3:  * Personalized cover letter variants
 4:  */
 5: 
 6: export interface CoverLetterVariant {
 7:   variantA: string // Formal
 8:   variantB: string // Conversational
 9:   personalization: string[]
10:   wordCount: number
11:   generatedAt: Date
12: }
13: 
14: export interface CoverLetterResponse {
15:   success: boolean
16:   data?: CoverLetterVariant
17:   error?: string
18:   cached?: boolean
19: }
20: 
21: export interface GenerateCoverLettersRequest {
22:   jobTitle: string
23:   company: string
24:   jobRequirements: string[]
25:   resumeText: string
26:   companyInsights: {
27:     culture: string
28:     values: string[]
29:     recentNews: string[]
30:   }
31:   hiringManager?: {
32:     name: string
33:     title: string
34:   }
35: }
</file>

<file path="src/types/email-outreach.ts">
 1: /**
 2:  * Email Outreach Types
 3:  * Personalized email templates for hiring contacts
 4:  */
 5: 
 6: export interface EmailTemplate {
 7:   type: 'formal' | 'conversational'
 8:   body: string
 9: }
10: 
11: export interface EmailOutreachData {
12:   subjects: string[]
13:   templates: EmailTemplate[]
14:   mailtoLink: string
15:   generatedAt: Date
16: }
17: 
18: export interface EmailOutreachResponse {
19:   success: boolean
20:   data?: EmailOutreachData
21:   error?: string
22:   cached?: boolean
23: }
24: 
25: export interface GenerateEmailOutreachRequest {
26:   hiringContact: {
27:     name: string
28:     title: string
29:     email?: string
30:   }
31:   jobTitle: string
32:   company: string
33:   resumeHighlights: string[]
34: }
</file>

<file path="src/types/global.d.ts">
1: declare global {
2:   interface Window {
3:     __initTheme?: boolean;
4:   }
5: }
6: 
7: export {}
</file>

<file path="src/types/index.ts">
  1: // Re-export from unified types
  2: export * from './unified'
  3: 
  4: // Autopilot domain types
  5: export * from './signals'
  6: export * from './comprehensive'
  7: export * from './variants'
  8: export * from './cover-letters'
  9: export * from './email-outreach'
 10: 
 11: // Resume Types
 12: export interface Resume {
 13:   _id?: string;
 14:   userId: string;
 15:   userName?: string;
 16:   originalFileName: string;
 17:   fileUrl?: string;
 18:   extractedText: string;
 19:   customizedVersions: CustomizedResume[];
 20:   createdAt: Date;
 21:   updatedAt: Date;
 22: }
 23: 
 24: export interface CustomizedResume {
 25:   _id?: string;
 26:   jobApplicationId: string;
 27:   customizedText: string;
 28:   jobTitle: string;
 29:   companyName: string;
 30:   matchScore: number;
 31:   createdAt: Date;
 32: }
 33: 
 34: // Job Application Types
 35: export interface JobApplication {
 36:   _id?: string;
 37:   userId: string;
 38:   jobTitle: string;
 39:   companyName: string;
 40:   jobDescription: string;
 41:   jobUrl?: string;
 42:   applicationStatus: ApplicationStatus;
 43:   appliedDate: Date;
 44:   followUpDates: Date[];
 45:   companyResearch: CompanyData;
 46:   notes?: string;
 47:   createdAt: Date;
 48:   updatedAt: Date;
 49: }
 50: 
 51: export type ApplicationStatus =
 52:   | 'saved'
 53:   | 'applied'
 54:   | 'interviewing'
 55:   | 'offer'
 56:   | 'rejected'
 57:   | 'withdrawn';
 58: 
 59: // Company Research Types
 60: export interface CompanyData {
 61:   _id?: string;
 62:   companyName: string;
 63:   website?: string;
 64:   industry?: string;
 65:   size?: string;
 66:   description?: string;
 67:   culture?: string[];
 68:   benefits?: string[];
 69:   recentNews?: CompanyNews[];
 70:   glassdoorRating?: number;
 71:   glassdoorReviews?: number;
 72:   linkedinData?: LinkedInData;
 73:   socialMedia?: SocialMediaData;
 74:   hiringContacts?: Array<{ name: string; title: string; profileUrl?: string; source: string }>;
 75:   contactInfo?: { emails: string[]; phones: string[]; addresses: string[] };
 76:   googleReviewsRating?: number;
 77:   googleReviewsCount?: number;
 78:   cachedAt: Date;
 79:   expiresAt: Date;
 80: }
 81: 
 82: export interface CompanyNews {
 83:   title: string;
 84:   url: string;
 85:   publishedAt: Date;
 86:   summary: string;
 87: }
 88: 
 89: export interface LinkedInData {
 90:   companyPage: string;
 91:   employeeCount?: number;
 92:   followers?: number;
 93:   recentPosts?: LinkedInPost[];
 94: }
 95: 
 96: export interface LinkedInPost {
 97:   content: string;
 98:   postedAt: Date;
 99:   engagement: number;
100: }
101: 
102: export interface SocialMediaData {
103:   twitter?: TwitterData;
104:   facebook?: FacebookData;
105:   instagram?: InstagramData;
106: }
107: 
108: export interface TwitterData {
109:   handle: string;
110:   followers: number;
111:   recentTweets: Tweet[];
112: }
113: 
114: export interface Tweet {
115:   text: string;
116:   createdAt: Date;
117:   likes: number;
118:   retweets: number;
119: }
120: 
121: export interface FacebookData {
122:   pageUrl: string;
123:   followers: number;
124:   recentPosts: FacebookPost[];
125: }
126: 
127: export interface FacebookPost {
128:   content: string;
129:   postedAt: Date;
130:   reactions: number;
131: }
132: 
133: export interface InstagramData {
134:   handle: string;
135:   followers: number;
136:   recentPosts: InstagramPost[];
137: }
138: 
139: export interface InstagramPost {
140:   caption: string;
141:   postedAt: Date;
142:   likes: number;
143:   comments: number;
144: }
145: 
146: // API Request/Response Types
147: export interface ResumeUploadRequest {
148:   file: File;
149: }
150: 
151: export interface ResumeUploadResponse {
152:   success: boolean;
153:   resume: Resume;
154:   message?: string;
155: }
156: 
157: export interface JobAnalysisRequest {
158:   jobDescription: string;
159:   jobTitle?: string;
160:   companyName?: string;
161: }
162: 
163: export interface JobAnalysisResponse {
164:   success: boolean;
165:   analysis: JobAnalysis;
166:   keywords: string[];
167:   requirements: string[];
168: }
169: 
170: export interface JobAnalysis {
171:   jobTitle: string;
172:   companyName: string;
173:   keyRequirements: string[];
174:   preferredSkills: string[];
175:   responsibilities: string[];
176:   companyCulture: string[];
177:   salaryRange?: string;
178:   experienceLevel?: string;
179: }
180: 
181: export interface ResumeCustomizationRequest {
182:   resumeId: string;
183:   jobDescription: string;
184:   jobTitle: string;
185:   companyName: string;
186: }
187: 
188: export interface ResumeCustomizationResponse {
189:   success: boolean;
190:   customizedResume: CustomizedResume;
191:   matchScore: number;
192:   improvements: string[];
193: }
194: 
195: export interface CompanyResearchRequest {
196:   companyName: string;
197:   website?: string;
198: }
199: 
200: export interface CompanyResearchResponse {
201:   success: boolean;
202:   companyData: CompanyData;
203:   sources: string[];
204: }
205: 
206: export interface CoverLetterGenerationRequest {
207:   jobApplicationId: string;
208:   resumeId: string;
209:   tone?: 'professional' | 'casual' | 'enthusiastic';
210:   length?: 'short' | 'medium' | 'long';
211: }
212: 
213: export interface CoverLetterGenerationResponse {
214:   success: boolean;
215:   coverLetter: string;
216:   keyPoints: string[];
217: }
218: 
219: export interface FollowUpEmailRequest {
220:   jobApplicationId: string;
221:   daysSinceApplication: number;
222:   context?: string;
223: }
224: 
225: export interface FollowUpEmailResponse {
226:   success: boolean;
227:   emailSubject: string;
228:   emailBody: string;
229:   suggestedTiming: string;
230: }
231: 
232: // UI Component Props Types
233: export interface ResumeUploadProps {
234:   onUploadSuccess: (resume: Resume) => void;
235:   onUploadError: (error: string) => void;
236:   maxFileSize?: number;
237:   acceptedTypes?: string[];
238: }
239: 
240: export interface JobAnalysisFormProps {
241:   onAnalysisComplete: (analysis: JobAnalysisResponse) => void;
242:   onError: (error: string) => void;
243: }
244: 
245: export interface ResumeCustomizerProps {
246:   resume: Resume;
247:   jobAnalysis: JobAnalysis;
248:   onCustomizationComplete: (customized: CustomizedResume) => void;
249:   onError: (error: string) => void;
250: }
251: 
252: export interface CompanyResearchPanelProps {
253:   companyName: string;
254:   onResearchComplete: (data: CompanyData) => void;
255:   onError: (error: string) => void;
256: }
257: 
258: export interface ApplicationTrackerProps {
259:   userId: string;
260:   applications: JobApplication[];
261:   onStatusUpdate: (applicationId: string, status: ApplicationStatus) => void;
262: }
263: 
264: // Utility Types
265: export type LoadingState = 'idle' | 'loading' | 'success' | 'error';
266: 
267: export interface ApiResponse<T> {
268:   success: boolean;
269:   data?: T;
270:   error?: string;
271:   message?: string;
272: }
273: 
274: export interface PaginatedResponse<T> {
275:   data: T[];
276:   pagination: {
277:     page: number;
278:     limit: number;
279:     total: number;
280:     totalPages: number;
281:   };
282: }
283: 
284: // Network Types
285: export interface NetworkPost {
286:   _id: string;
287:   userId: string;
288:   userName: string;
289:   userAvatar?: string;
290:   userTitle?: string;
291:   type: 'job_opportunity' | 'career_advice' | 'success_story' | 'question' | 'general';
292:   title?: string;
293:   content: string;
294:   tags?: string[];
295:   attachments?: Array<{
296:     type: 'image' | 'document' | 'link';
297:     url: string;
298:     name: string;
299:   }>;
300:   likes: string[];
301:   comments: Array<{
302:     userId: string;
303:     userName: string;
304:     content: string;
305:     createdAt: Date;
306:   }>;
307:   shares: number;
308:   createdAt: Date;
309:   updatedAt: Date;
310:   visibility: 'public' | 'connections' | 'private';
311: }
312: 
313: export interface NetworkUser {
314:   id: string;
315:   name: string;
316:   title?: string;
317:   avatar?: string;
318:   location?: string;
319:   skills?: string[];
320:   experience?: string;
321:   connections: number;
322:   mutualConnections: number;
323:   isOnline?: boolean;
324:   lastActive?: Date;
325: }
326: 
327: export interface NetworkConnection {
328:   _id: string;
329:   userId: string;
330:   connectedUserId: string;
331:   status: 'pending' | 'accepted' | 'declined' | 'blocked';
332:   initiatedBy: string;
333:   acceptedAt?: Date;
334:   message?: string;
335:   user?: NetworkUser;
336:   createdAt: Date;
337:   updatedAt: Date;
338: }
339: 
340: export interface Message {
341:   _id: string;
342:   senderId: string;
343:   receiverId: string;
344:   conversationId: string;
345:   content: string;
346:   messageType: 'text' | 'image' | 'file' | 'link';
347:   attachments?: Array<{
348:     type: string;
349:     url: string;
350:     name: string;
351:     size?: number;
352:   }>;
353:   isRead: boolean;
354:   readAt?: Date;
355:   createdAt: Date;
356:   updatedAt: Date;
357: }
358: 
359: // Job Board Integration Types
360: export interface JobBoardIntegration {
361:   _id: string;
362:   userId: string;
363:   boardName: string;
364:   boardDisplayName: string;
365:   status: 'disconnected' | 'connecting' | 'connected' | 'error' | 'requires_auth';
366:   lastSyncAt?: Date;
367:   lastSuccessfulSyncAt?: Date;
368:   syncStatus: 'idle' | 'syncing' | 'success' | 'failed';
369:   errorMessage?: string;
370:   totalApplications: number;
371:   successfulApplications: number;
372:   lastApplicationAt?: Date;
373:   settings: {
374:     autoSync: boolean;
375:     syncFrequency: 'manual' | 'daily' | 'weekly';
376:     defaultResumeId?: string;
377:     defaultCoverLetterId?: string;
378:     notificationPreferences: {
379:       applicationSubmitted: boolean;
380:       applicationViewed: boolean;
381:       interviewRequested: boolean;
382:       errors: boolean;
383:     };
384:   };
385:   metadata: {
386:     apiVersion?: string;
387:     accountId?: string;
388:     accountName?: string;
389:     accountType?: string;
390:     rateLimits?: {
391:       requestsPerHour: number;
392:       requestsPerDay: number;
393:       lastRequestAt?: Date;
394:     };
395:   };
396:   createdAt: Date;
397:   updatedAt: Date;
398: }
399: 
400: export interface JobBoardSubmissionRequest {
401:   jobApplicationId: string;
402:   jobBoards: string[];
403:   resumeId?: string;
404:   coverLetterId?: string;
405:   customizations?: Record<string, unknown>;
406: }
407: 
408: export interface JobBoardSubmissionResult {
409:   jobBoard: string;
410:   success: boolean;
411:   message: string;
412:   applicationUrl?: string;
413:   trackingId?: string;
414:   error?: string;
415: }
</file>

<file path="src/types/next-auth.d.ts">
 1: import NextAuth from 'next-auth'
 2: 
 3: declare module 'next-auth' {
 4:   interface Session {
 5:     user: {
 6:       id: string
 7:       name?: string | null
 8:       email?: string | null
 9:       image?: string | null
10:     }
11:   }
12: 
13:   interface JWT {
14:     id: string
15:   }
16: }
17: 
18: declare module 'next-auth/jwt' {
19:   interface JWT {
20:     id: string
21:   }
22: }
</file>

<file path="src/types/signals.ts">
 1: /**
 2:  * Resume Signal Types
 3:  * Extracted keywords and location from resume
 4:  */
 5: 
 6: export interface ResumeSignals {
 7:   keywords: string[]
 8:   location?: string
 9:   locations?: string[]
10:   extractedAt?: Date
11: }
12: 
13: export interface ResumeSignalsResponse {
14:   success: boolean
15:   data?: ResumeSignals
16:   error?: string
17:   cached?: boolean
18: }
</file>

<file path="src/types/unified.ts">
  1: // Unified Type System for Career Lever AI
  2: // Single source of truth for all application types
  3: 
  4: export interface User {
  5:   _id: string
  6:   email: string
  7:   name: string
  8:   image?: string
  9:   createdAt: Date
 10:   updatedAt: Date
 11: }
 12: 
 13: export interface Resume {
 14:   _id: string
 15:   userId: string
 16:   originalFileName: string
 17:   extractedText: string
 18:   customizedVersions: CustomizedResume[]
 19:   uploadedAt: Date
 20:   createdAt: Date
 21:   updatedAt: Date
 22: }
 23: 
 24: export interface CustomizedResume {
 25:   _id: string
 26:   jobApplicationId: string
 27:   customizedText: string
 28:   jobTitle: string
 29:   companyName: string
 30:   matchScore: number
 31:   createdAt: Date
 32: }
 33: 
 34: export interface JobApplication {
 35:   _id: string
 36:   userId: string
 37:   jobTitle: string
 38:   companyName: string
 39:   jobDescription: string
 40:   jobUrl?: string
 41:   location?: string
 42:   salary?: string
 43:   applicationStatus: 'saved' | 'applied' | 'screening' | 'interviewing' | 'offer' | 'rejected' | 'withdrawn'
 44:   appliedDate?: Date
 45:   notes?: string[]
 46:   documents?: ApplicationDocument[]
 47:   createdAt: Date
 48:   updatedAt: Date
 49: }
 50: 
 51: export interface ApplicationDocument {
 52:   type: 'resume' | 'cover-letter' | 'portfolio' | 'other'
 53:   filename: string
 54:   url?: string
 55:   generatedAt: Date
 56: }
 57: 
 58: // Single unified job result interface for all scraping sources
 59: export interface JobResult {
 60:   id: string
 61:   title: string
 62:   company: string
 63:   location?: string
 64:   salary?: string
 65:   url?: string
 66:   source: string
 67:   description?: string
 68:   snippet?: string
 69:   postedDate?: Date | string
 70:   requirements?: string[]
 71:   benefits?: string[]
 72: }
 73: 
 74: export interface CompanyResearch {
 75:   _id: string
 76:   companyName: string
 77:   website?: string
 78:   industry?: string
 79:   size?: string
 80:   description?: string
 81:   culture?: string[]
 82:   financials?: FinancialData[]
 83:   news?: NewsItem[]
 84:   reviews?: CompanyReview[]
 85:   contacts?: HiringContact[]
 86:   lastUpdated: Date
 87:   expiresAt?: Date
 88: }
 89: 
 90: export interface FinancialData {
 91:   year: number
 92:   revenue?: string
 93:   growth?: string
 94:   funding?: string
 95: }
 96: 
 97: export interface NewsItem {
 98:   title: string
 99:   url: string
100:   date: Date | string
101:   source: string
102:   summary?: string
103: }
104: 
105: export interface CompanyReview {
106:   rating: number
107:   title: string
108:   pros?: string
109:   cons?: string
110:   source: string
111:   date?: Date | string
112: }
113: 
114: export interface HiringContact {
115:   name: string
116:   title?: string
117:   email?: string
118:   linkedIn?: string
119:   role?: string
120:   department?: string
121:   linkedinUrl?: string
122:   emailType?: 'public' | 'inferred' | 'pattern'
123:   source?: string
124:   confidence?: number
125:   phone?: string
126:   alternativeEmails?: string[]
127:   discoveryMethod?: string
128: }
129: 
130: // API Response wrapper for consistent responses
131: export interface APIResponse<T = any> {
132:   success: boolean
133:   data?: T
134:   error?: string
135:   message?: string
136:   metadata?: ResponseMetadata
137: }
138: 
139: export interface ResponseMetadata {
140:   requestId?: string
141:   timestamp: Date
142:   cached?: boolean
143:   executionTime?: number
144: }
145: 
146: // Perplexity API types
147: export interface PerplexityJobSearch {
148:   query: string
149:   results?: JobResult[]
150:   sources?: string[]
151: }
152: 
153: export interface IntelligenceResponse {
154:   company: string
155:   freshness: string
156:   sources: any[]
157:   confidence: number
158:   financials: any[]
159:   culture: any[]
160:   salaries: any[]
161:   contacts: any[]
162:   growth: any[]
163:   summary: string
164:   description: string
165:   size: string
166:   revenue: string
167:   industry: string
168:   founded: string
169:   headquarters: string
170:   psychology: string
171:   marketIntelligence: string
172: }
173: 
174: // PDF Processing types
175: export interface PDFExtractionResult {
176:   text: string
177:   method: 'text-extraction' | 'ocr-fallback' | 'manual-input'
178:   confidence: number
179:   error?: string
180: }
181: 
182: // Session types (NextAuth)
183: export interface SessionUser {
184:   id: string
185:   email: string
186:   name?: string
187:   image?: string
188: }
189: 
190: // Form validation schemas
191: export interface ResumeCustomizeInput {
192:   resumeId: string
193:   jobDescription: string
194:   jobTitle: string
195:   companyName: string
196:   tone?: 'professional' | 'casual' | 'enthusiastic'
197: }
198: 
199: export interface CompanyResearchInput {
200:   companyName: string
201:   website?: string
202:   includeNews?: boolean
203:   includeReviews?: boolean
204: }
205: 
206: // Rate limiting types
207: export interface RateLimitConfig {
208:   windowMs: number
209:   maxRequests: number
210:   skipSuccessfulRequests?: boolean
211:   skipFailedRequests?: boolean
212: }
213: 
214: export interface RateLimitEntry {
215:   count: number
216:   resetTime: number
217: }
218: 
219: // Circuit breaker types for AI service
220: export interface CircuitBreakerState {
221:   failures: number
222:   lastFailureTime: number
223:   state: 'closed' | 'open' | 'half-open'
224: }
225: 
226: export interface AIResponse<T = any> {
227:   success: boolean
228:   data?: T
229:   error?: string
230:   cached?: boolean
231:   cost: number
232:   model: string
233: }
</file>

<file path="src/types/variants.ts">
 1: /**
 2:  * Resume Variant Types
 3:  * ATS-optimized and human-readable resume versions
 4:  */
 5: 
 6: export interface ResumeVariant {
 7:   variantA: string // ATS-optimized
 8:   variantB: string // Human-readable
 9:   recommendations: string[]
10:   atsScore?: number
11:   generatedAt: Date
12: }
13: 
14: export interface ResumeVariantResponse {
15:   success: boolean
16:   data?: ResumeVariant
17:   error?: string
18:   cached?: boolean
19: }
20: 
21: export interface GenerateResumeVariantsRequest {
22:   resumeText: string
23:   jobTitle: string
24:   jobRequirements: string[]
25:   companyInsights: {
26:     culture: string
27:     values: string[]
28:     industry: string
29:   }
30: }
</file>

<file path="tailwind.config.js">
 1: /** @type {import('tailwindcss').Config} */
 2: module.exports = {
 3:     darkMode: ["class"],
 4:     content: [
 5:         './pages/**/*.{ts,tsx}',
 6:         './components/**/*.{ts,tsx}',
 7:         './app/**/*.{ts,tsx}',
 8:         './src/**/*.{ts,tsx}',
 9:     ],
10:     prefix: "",
11:     theme: {
12:         container: {
13:             center: true,
14:             padding: "2rem",
15:             screens: {
16:                 "2xl": "1400px",
17:             },
18:         },
19:         extend: {
20:             colors: {
21:                 border: "hsl(var(--border))",
22:                 input: "hsl(var(--input))",
23:                 ring: "hsl(var(--ring))",
24:                 background: "hsl(var(--background))",
25:                 foreground: "hsl(var(--foreground))",
26:                 primary: {
27:                     DEFAULT: "hsl(var(--primary))",
28:                     foreground: "hsl(var(--primary-foreground))",
29:                 },
30:                 secondary: {
31:                     DEFAULT: "hsl(var(--secondary))",
32:                     foreground: "hsl(var(--secondary-foreground))",
33:                 },
34:                 destructive: {
35:                     DEFAULT: "hsl(var(--destructive))",
36:                     foreground: "hsl(var(--destructive-foreground))",
37:                 },
38:                 muted: {
39:                     DEFAULT: "hsl(var(--muted))",
40:                     foreground: "hsl(var(--muted-foreground))",
41:                 },
42:                 accent: {
43:                     DEFAULT: "hsl(var(--accent))",
44:                     foreground: "hsl(var(--accent-foreground))",
45:                 },
46:                 popover: {
47:                     DEFAULT: "hsl(var(--popover))",
48:                     foreground: "hsl(var(--popover-foreground))",
49:                 },
50:                 card: {
51:                     DEFAULT: "hsl(var(--card))",
52:                     foreground: "hsl(var(--card-foreground))",
53:                 },
54:             },
55:             borderRadius: {
56:                 lg: "var(--radius)",
57:                 md: "calc(var(--radius) - 2px)",
58:                 sm: "calc(var(--radius) - 4px)",
59:             },
60:             keyframes: {
61:                 "accordion-down": {
62:                     from: { height: "0" },
63:                     to: { height: "var(--radix-accordion-content-height)" },
64:                 },
65:                 "accordion-up": {
66:                     from: { height: "var(--radix-accordion-content-height)" },
67:                     to: { height: "0" },
68:                 },
69:             },
70:             animation: {
71:                 "accordion-down": "accordion-down 0.2s ease-out",
72:                 "accordion-up": "accordion-up 0.2s ease-out",
73:             },
74:         },
75:     },
76:     plugins: [require("tailwindcss-animate")],
77: }
</file>

<file path="tests/setup.ts">
 1: import { beforeAll, afterAll, afterEach } from 'vitest'
 2: import { MongoMemoryServer } from 'mongodb-memory-server'
 3: import mongoose from 'mongoose'
 4: 
 5: let mongoServer: MongoMemoryServer
 6: 
 7: // Setup in-memory MongoDB for tests
 8: beforeAll(async () => {
 9:   try {
10:     mongoServer = await MongoMemoryServer.create()
11:     const mongoUri = mongoServer.getUri()
12:     await mongoose.connect(mongoUri)
13:     console.log('✅ Test database connected')
14:   } catch (error) {
15:     console.error('❌ Test database connection failed:', error)
16:   }
17: })
18: 
19: // Cleanup after each test
20: afterEach(async () => {
21:   if (mongoose.connection.readyState === 1) {
22:     const collections = mongoose.connection.collections
23:     for (const key in collections) {
24:       await collections[key].deleteMany({})
25:     }
26:   }
27: })
28: 
29: // Teardown after all tests
30: afterAll(async () => {
31:   if (mongoose.connection.readyState === 1) {
32:     await mongoose.disconnect()
33:   }
34:   if (mongoServer) {
35:     await mongoServer.stop()
36:   }
37:   console.log('✅ Test database disconnected')
38: })
39: 
40: // Mock environment variables (only in test environment)
41: if (process.env.NODE_ENV !== 'production') {
42:   process.env.MONGODB_URI = 'mongodb://localhost:27017/test'
43:   process.env.NEXTAUTH_SECRET = 'test-secret-key-for-testing-only'
44:   process.env.NEXTAUTH_URL = 'http://localhost:3000'
45:   process.env.PERPLEXITY_API_KEY = 'test-perplexity-key'
46: }
</file>

<file path="vitest.config.ts">
 1: import { defineConfig } from 'vitest/config'
 2: import path from 'path'
 3: 
 4: export default defineConfig({
 5:   test: {
 6:     globals: true,
 7:     environment: 'node',
 8:     include: ['tests/**/*.test.ts', 'src/**/*.test.ts'],
 9:     exclude: ['node_modules', 'dist', '.next'],
10:     coverage: {
11:       provider: 'v8',
12:       reporter: ['text', 'json', 'html', 'lcov'],
13:       exclude: [
14:         'node_modules/',
15:         'dist/',
16:         '.next/',
17:         'tests/',
18:         '**/*.d.ts',
19:         '**/*.config.*',
20:         '**/mockData',
21:         'src/types/**',
22:       ],
23:       thresholds: {
24:         lines: 60,
25:         functions: 60,
26:         branches: 60,
27:         statements: 60,
28:       },
29:     },
30:     setupFiles: ['./tests/setup.ts'],
31:   },
32:   resolve: {
33:     alias: {
34:       '@': path.resolve(__dirname, './src'),
35:     },
36:   },
37: })
</file>

<file path="fix-dark-mode.js">
 1: const fs = require('fs');
 2: const path = require('path');
 3: 
 4: // Patterns to fix
 5: const fixes = [
 6:   // Replace bg-white with bg-card (unless it has dark: variant already)
 7:   {
 8:     pattern: /className="([^"]*)\bbg-white\b(?!\s+dark:)([^"]*)"/g,
 9:     replace: (match, before, after) => {
10:       return `className="${before}bg-card${after}"`;
11:     }
12:   },
13:   // Replace bg-white dark:bg-gray-XXX with just bg-card
14:   {
15:     pattern: /className="([^"]*)\bbg-white\s+dark:bg-gray-\d+([^"]*)"/g,
16:     replace: (match, before, after) => {
17:       return `className="${before}bg-card${after}"`;
18:     }
19:   },
20:   // Replace text-gray-900 with text-foreground (unless it has dark: variant)
21:   {
22:     pattern: /className="([^"]*)\btext-gray-900\b(?!\s+dark:)([^"]*)"/g,
23:     replace: (match, before, after) => {
24:       return `className="${before}text-foreground${after}"`;
25:     }
26:   },
27:   // Replace text-black with text-foreground
28:   {
29:     pattern: /className="([^"]*)\btext-black\b([^"]*)"/g,
30:     replace: (match, before, after) => {
31:       return `className="${before}text-foreground${after}"`;
32:     }
33:   },
34:   // Replace border-gray-200 with border-border (unless it has dark: variant)
35:   {
36:     pattern: /className="([^"]*)\bborder-gray-200\b(?!\s+dark:)([^"]*)"/g,
37:     replace: (match, before, after) => {
38:       return `className="${before}border-border${after}"`;
39:     }
40:   }
41: ];
42: 
43: function processFile(filePath) {
44:   let content = fs.readFileSync(filePath, 'utf8');
45:   let modified = false;
46:   
47:   fixes.forEach(fix => {
48:     const newContent = content.replace(fix.pattern, fix.replace);
49:     if (newContent !== content) {
50:       modified = true;
51:       content = newContent;
52:     }
53:   });
54:   
55:   if (modified) {
56:     fs.writeFileSync(filePath, content, 'utf8');
57:     console.log('✅ Fixed:', filePath);
58:     return true;
59:   }
60:   
61:   return false;
62: }
63: 
64: function walkDir(dir, fileCallback) {
65:   const files = fs.readdirSync(dir);
66:   
67:   files.forEach(file => {
68:     const filePath = path.join(dir, file);
69:     const stat = fs.statSync(filePath);
70:     
71:     if (stat.isDirectory()) {
72:       if (!file.startsWith('.') && file !== 'node_modules') {
73:         walkDir(filePath, fileCallback);
74:       }
75:     } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
76:       fileCallback(filePath);
77:     }
78:   });
79: }
80: 
81: console.log('🔧 Fixing dark mode issues...\n');
82: 
83: let fixedCount = 0;
84: const srcDir = path.join(__dirname, 'src');
85: 
86: walkDir(srcDir, (filePath) => {
87:   if (processFile(filePath)) {
88:     fixedCount++;
89:   }
90: });
91: 
92: console.log(`\n✅ Fixed ${fixedCount} files`);
</file>

<file path="next-env.d.ts">
1: /// <reference types="next" />
2: /// <reference types="next/image-types/global" />
3: 
4: // NOTE: This file should not be edited
5: // see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.
</file>

<file path="src/app/analytics/components/analytics-dashboard.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../components/ui/card'
  5: import { Button } from '../../../components/ui/button'
  6: import { Badge } from '../../../components/ui/badge'
  7: import { Progress } from '../../../components/ui/progress'
  8: import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../../components/ui/tabs'
  9: import {
 10:   BarChart3,
 11:   TrendingUp,
 12:   TrendingDown,
 13:   Users,
 14:   Target,
 15:   Clock,
 16:   Award,
 17:   AlertTriangle,
 18:   CheckCircle,
 19:   RefreshCw,
 20:   Download,
 21:   Share,
 22:   Calendar,
 23:   Briefcase,
 24:   DollarSign,
 25:   Lightbulb
 26: } from 'lucide-react'
 27: import toast from 'react-hot-toast'
 28: // Removed Recharts dependency for serverless build stability
 29: 
 30: interface AnalyticsData {
 31:   overview: {
 32:     totalApplications: number
 33:     activeApplications: number
 34:     interviewsScheduled: number
 35:     offersReceived: number
 36:     responseRate: number
 37:     averageResponseTime: number
 38:   }
 39:   trends: {
 40:     applicationsByMonth: Array<{ month: string; count: number }>
 41:     statusDistribution: Record<string, number>
 42:     industryBreakdown: Array<{ industry: string; count: number }>
 43:   }
 44:   insights: {
 45:     topIndustries: Array<{ industry: string; count: number; avgSalary?: number }>
 46:     applicationSuccessFactors: Array<{ factor: string; impact: 'high' | 'medium' | 'low' }>
 47:     marketTrends: Array<{ trend: string; description: string; recommendation: string }>
 48:     personalizedTips: string[]
 49:   }
 50:   performance: {
 51:     weeklyGoalProgress: number
 52:     monthlyGoalProgress: number
 53:     improvementAreas: string[]
 54:     strengths: string[]
 55:     variantPerformance?: Array<{ variant: string; views: number; interviews: number; offers: number }>
 56:     sourceLift?: Array<{ source: string; lift: number }>
 57:   }
 58: }
 59: 
 60: interface AnalyticsDashboardProps {
 61:   userId: string
 62: }
 63: 
 64: export function AnalyticsDashboard({ userId }: AnalyticsDashboardProps) {
 65:   const [analytics, setAnalytics] = useState<AnalyticsData | null>(null)
 66:   const [loading, setLoading] = useState(true)
 67:   const [refreshing, setRefreshing] = useState(false)
 68:   const [ops, setOps] = useState<{avgLatencyMs:number; p95LatencyMs:number; counters: Record<string, number>}|null>(null)
 69: 
 70:   useEffect(() => {
 71:     fetchAnalytics()
 72:   }, [])
 73: 
 74:   const fetchAnalytics = async () => {
 75:     try {
 76:       setRefreshing(true)
 77:       const response = await fetch('/api/analytics')
 78:       if (response.ok) {
 79:         const data = await response.json()
 80:         setAnalytics(data.data)
 81:       } else {
 82:         toast.error('Failed to load analytics')
 83:       }
 84:       try {
 85:         const r2 = await fetch('/api/ops/metrics')
 86:         if (r2.ok) { const j = await r2.json(); setOps({ avgLatencyMs: j.avgLatencyMs || 0, p95LatencyMs: j.p95LatencyMs || 0, counters: j.counters || {} }) }
 87:       } catch {}
 88:     } catch (error) {
 89:       console.error('Analytics fetch error:', error)
 90:       toast.error('Failed to load analytics')
 91:     } finally {
 92:       setLoading(false)
 93:       setRefreshing(false)
 94:     }
 95:   }
 96: 
 97:   if (loading) {
 98:     return <AnalyticsSkeleton />
 99:   }
100: 
101:   if (!analytics) {
102:     return (
103:       <Card>
104:         <CardContent className="p-8 text-center">
105:           <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
106:           <h3 className="text-lg font-medium text-foreground mb-2">No Analytics Available</h3>
107:           <p className="text-muted-foreground mb-4">
108:             Start applying to jobs to see your analytics and insights.
109:           </p>
110:           <Button>Start Applying</Button>
111:         </CardContent>
112:       </Card>
113:     )
114:   }
115: 
116:   const getStatusColor = (status: string) => {
117:     switch (status) {
118:       case 'applied': return 'bg-blue-100 text-blue-800'
119:       case 'interviewing': return 'bg-yellow-100 text-yellow-800'
120:       case 'offer': return 'bg-green-100 text-green-800'
121:       case 'rejected': return 'bg-red-100 text-red-800'
122:       default: return 'bg-muted text-foreground'
123:     }
124:   }
125: 
126:   const getImpactColor = (impact: string) => {
127:     switch (impact) {
128:       case 'high': return 'text-red-600'
129:       case 'medium': return 'text-yellow-600'
130:       case 'low': return 'text-green-600'
131:       default: return 'text-muted-foreground'
132:     }
133:   }
134: 
135:   return (
136:     <div className="space-y-8">
137:       {/* Header with Refresh */}
138:       <div className="flex items-center justify-between">
139:         <div>
140:           <h2 className="text-2xl font-bold text-foreground">Your Career Analytics</h2>
141:           <p className="text-muted-foreground">Data-driven insights to optimize your job search</p>
142:         </div>
143:         <div className="flex gap-3">
144:           <Button
145:             variant="outline"
146:             onClick={fetchAnalytics}
147:             disabled={refreshing}
148:           >
149:             <RefreshCw className={`mr-2 h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
150:             Refresh
151:           </Button>
152:           <Button variant="outline">
153:             <Download className="mr-2 h-4 w-4" />
154:             Export
155:           </Button>
156:         </div>
157:       </div>
158: 
159:       {/* Key Metrics Overview */}
160:       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
161:         <Card>
162:           <CardContent className="p-6">
163:             <div className="flex items-center justify-between">
164:               <div>
165:                 <p className="text-sm font-medium text-muted-foreground">Total Applications</p>
166:                 <p className="text-3xl font-bold text-foreground">{analytics.overview.totalApplications}</p>
167:                 <div className="flex items-center mt-2">
168:                   <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
169:                   <span className="text-sm text-green-600">+12% this month</span>
170:                 </div>
171:               </div>
172:               <div className="p-3 bg-blue-100 rounded-full">
173:                 <Briefcase className="h-6 w-6 text-blue-600" />
174:               </div>
175:             </div>
176:           </CardContent>
177:         </Card>
178: 
179:         <Card>
180:           <CardContent className="p-6">
181:             <div className="flex items-center justify-between">
182:               <div>
183:                 <p className="text-sm font-medium text-muted-foreground">Response Rate</p>
184:                 <p className="text-3xl font-bold text-foreground">{analytics.overview.responseRate}%</p>
185:                 <div className="flex items-center mt-2">
186:                   {analytics.overview.responseRate >= 20 ? (
187:                     <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
188:                   ) : (
189:                     <TrendingDown className="h-4 w-4 text-red-500 mr-1" />
190:                   )}
191:                   <span className={`text-sm ${analytics.overview.responseRate >= 20 ? 'text-green-600' : 'text-red-600'}`}>
192:                     {analytics.overview.responseRate >= 20 ? 'Above average' : 'Below average'}
193:                   </span>
194:                 </div>
195:               </div>
196:               <div className="p-3 bg-green-100 rounded-full">
197:                 <Target className="h-6 w-6 text-green-600" />
198:               </div>
199:             </div>
200:           </CardContent>
201:         </Card>
202: 
203:         <Card>
204:           <CardContent className="p-6">
205:             <div className="flex items-center justify-between">
206:               <div>
207:                 <p className="text-sm font-medium text-muted-foreground">Interviews</p>
208:                 <p className="text-3xl font-bold text-foreground">{analytics.overview.interviewsScheduled}</p>
209:                 <div className="flex items-center mt-2">
210:                   <Users className="h-4 w-4 text-blue-500 mr-1" />
211:                   <span className="text-sm text-blue-600">Scheduled</span>
212:                 </div>
213:               </div>
214:               <div className="p-3 bg-yellow-100 rounded-full">
215:                 <Users className="h-6 w-6 text-yellow-600" />
216:               </div>
217:             </div>
218:           </CardContent>
219:         </Card>
220: 
221:         <Card>
222:           <CardContent className="p-6">
223:             <div className="flex items-center justify-between">
224:               <div>
225:                 <p className="text-sm font-medium text-muted-foreground">Offers</p>
226:                 <p className="text-3xl font-bold text-foreground">{analytics.overview.offersReceived}</p>
227:                 <div className="flex items-center mt-2">
228:                   <Award className="h-4 w-4 text-purple-500 mr-1" />
229:                   <span className="text-sm text-purple-600">Received</span>
230:                 </div>
231:               </div>
232:               <div className="p-3 bg-purple-100 rounded-full">
233:                 <Award className="h-6 w-6 text-purple-600" />
234:               </div>
235:             </div>
236:           </CardContent>
237:         </Card>
238:         {ops && (
239:           <Card>
240:             <CardContent className="p-6">
241:               <div className="flex items-center justify-between">
242:                 <div>
243:                   <p className="text-sm font-medium text-muted-foreground">AI Latency (p95)</p>
244:                   <p className="text-3xl font-bold text-foreground">{ops.p95LatencyMs}ms</p>
245:                   <div className="text-sm text-muted-foreground">Avg {ops.avgLatencyMs}ms</div>
246:                 </div>
247:                 <div className="p-3 bg-sky-100 rounded-full">
248:                   <BarChart3 className="h-6 w-6 text-sky-600" />
249:                 </div>
250:               </div>
251:             </CardContent>
252:           </Card>
253:         )}
254:       </div>
255: 
256:       <Tabs defaultValue="trends" className="w-full">
257:         <TabsList className="grid w-full grid-cols-4">
258:           <TabsTrigger value="trends">Trends</TabsTrigger>
259:           <TabsTrigger value="insights">Insights</TabsTrigger>
260:           <TabsTrigger value="performance">Performance</TabsTrigger>
261:           <TabsTrigger value="market">Market</TabsTrigger>
262:         </TabsList>
263: 
264:         <TabsContent value="trends" className="space-y-6">
265:           {/* Application Trends */}
266:           <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
267:             <Card>
268:               <CardHeader>
269:                 <CardTitle>Monthly Applications</CardTitle>
270:                 <CardDescription>Your application activity over time</CardDescription>
271:               </CardHeader>
272:               <CardContent>
273:                 <div className="space-y-4">
274:                   {analytics.trends.applicationsByMonth.slice(-6).map((item, index) => (
275:                     <div key={item.month} className="flex items-center justify-between">
276:                       <span className="text-sm font-medium">{item.month}</span>
277:                       <div className="flex items-center gap-3">
278:                         <div className="flex-1 bg-gray-200 rounded-full h-2">
279:                           <div
280:                             className="bg-blue-600 h-2 rounded-full"
281:                             style={{ width: `${(item.count / Math.max(...analytics.trends.applicationsByMonth.map(d => d.count))) * 100}%` }}
282:                           />
283:                         </div>
284:                         <span className="text-sm font-bold w-8">{item.count}</span>
285:                       </div>
286:                     </div>
287:                   ))}
288:                 </div>
289:               </CardContent>
290:             </Card>
291: 
292:             <Card>
293:               <CardHeader>
294:                 <CardTitle>Application Status</CardTitle>
295:                 <CardDescription>Distribution of your application statuses</CardDescription>
296:               </CardHeader>
297:               <CardContent>
298:                 <div className="space-y-4">
299:                   {Object.entries(analytics.trends.statusDistribution).map(([status, count]) => (
300:                     <div key={status} className="flex items-center justify-between">
301:                       <Badge className={getStatusColor(status)}>
302:                         {status.charAt(0).toUpperCase() + status.slice(1)}
303:                       </Badge>
304:                       <span className="font-bold">{count}</span>
305:                     </div>
306:                   ))}
307:                 </div>
308:               </CardContent>
309:             </Card>
310:           </div>
311: 
312:           {/* Industry Breakdown */}
313:           <Card>
314:             <CardHeader>
315:               <CardTitle>Industry Focus</CardTitle>
316:               <CardDescription>Industries you're targeting</CardDescription>
317:             </CardHeader>
318:             <CardContent>
319:               <div className="space-y-4">
320:                 {analytics.trends.industryBreakdown.map((industry, index) => (
321:                   <div key={industry.industry} className="flex items-center justify-between">
322:                     <div className="flex items-center gap-3">
323:                       <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
324:                       <span className="font-medium">{industry.industry}</span>
325:                     </div>
326:                     <div className="flex items-center gap-3">
327:                       <div className="flex-1 bg-gray-200 rounded-full h-2 max-w-24">
328:                         <div
329:                           className="bg-blue-600 h-2 rounded-full"
330:                           style={{ width: `${(industry.count / Math.max(...analytics.trends.industryBreakdown.map(d => d.count))) * 100}%` }}
331:                         />
332:                       </div>
333:                       <span className="text-sm font-bold w-8">{industry.count}</span>
334:                     </div>
335:                   </div>
336:                 ))}
337:               </div>
338:             </CardContent>
339:           </Card>
340:         </TabsContent>
341: 
342:         <TabsContent value="insights" className="space-y-6">
343:           {/* Success Factors */}
344:           <Card>
345:             <CardHeader>
346:               <CardTitle className="flex items-center gap-2">
347:                 <Target className="h-5 w-5" />
348:                 Success Factors
349:               </CardTitle>
350:               <CardDescription>Factors that impact your application success</CardDescription>
351:             </CardHeader>
352:             <CardContent>
353:               <div className="space-y-4">
354:                 {analytics.insights.applicationSuccessFactors.map((factor, index) => (
355:                   <div key={index} className="flex items-start gap-4 p-4 bg-background rounded-lg">
356:                     <div className={`w-3 h-3 rounded-full mt-2 ${
357:                       factor.impact === 'high' ? 'bg-red-500' :
358:                       factor.impact === 'medium' ? 'bg-yellow-500' : 'bg-green-500'
359:                     }`} />
360:                     <div className="flex-1">
361:                       <h4 className="font-medium text-foreground">{factor.factor}</h4>
362:                       <p className="text-sm text-muted-foreground mt-1">
363:                         Impact: <span className={`font-medium ${getImpactColor(factor.impact)}`}>
364:                           {factor.impact.charAt(0).toUpperCase() + factor.impact.slice(1)}
365:                         </span>
366:                       </p>
367:                     </div>
368:                   </div>
369:                 ))}
370:               </div>
371:             </CardContent>
372:           </Card>
373: 
374:           {/* Market Trends */}
375:           <Card>
376:             <CardHeader>
377:               <CardTitle className="flex items-center gap-2">
378:                 <TrendingUp className="h-5 w-5" />
379:                 Market Trends
380:               </CardTitle>
381:               <CardDescription>Current trends affecting your job search</CardDescription>
382:             </CardHeader>
383:             <CardContent>
384:               <div className="space-y-4">
385:                 {analytics.insights.marketTrends.map((trend, index) => (
386:                   <div key={index} className="border rounded-lg p-4">
387:                     <h4 className="font-medium text-foreground mb-2">{trend.trend}</h4>
388:                     <p className="text-sm text-muted-foreground mb-3">{trend.description}</p>
389:                     <div className="bg-blue-50 p-3 rounded">
390:                       <p className="text-sm text-blue-800">
391:                         <strong>Recommendation:</strong> {trend.recommendation}
392:                       </p>
393:                     </div>
394:                   </div>
395:                 ))}
396:               </div>
397:             </CardContent>
398:           </Card>
399: 
400:           {/* Personalized Tips */}
401:           <Card>
402:             <CardHeader>
403:               <CardTitle className="flex items-center gap-2">
404:                 <Lightbulb className="h-5 w-5" />
405:                 Personalized Tips
406:               </CardTitle>
407:               <CardDescription>Tailored advice based on your activity</CardDescription>
408:             </CardHeader>
409:             <CardContent>
410:               <div className="space-y-3">
411:                 {analytics.insights.personalizedTips.map((tip, index) => (
412:                   <div key={index} className="flex items-start gap-3">
413:                     <div className="w-6 h-6 bg-yellow-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
414:                       <span className="text-xs font-bold text-yellow-600">{index + 1}</span>
415:                     </div>
416:                     <p className="text-sm text-foreground">{tip}</p>
417:                   </div>
418:                 ))}
419:               </div>
420:             </CardContent>
421:           </Card>
422:         </TabsContent>
423: 
424:         <TabsContent value="performance" className="space-y-6">
425:           {/* Goal Progress */}
426:           <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
427:             <Card>
428:               <CardHeader>
429:                 <CardTitle>Weekly Goals</CardTitle>
430:                 <CardDescription>Applications per week</CardDescription>
431:               </CardHeader>
432:               <CardContent>
433:                 <div className="space-y-4">
434:                   <div className="flex items-center justify-between">
435:                     <span className="text-sm font-medium">Progress</span>
436:                     <span className="text-sm text-muted-foreground">{analytics.performance.weeklyGoalProgress}%</span>
437:                   </div>
438:                   <Progress value={analytics.performance.weeklyGoalProgress} className="w-full" />
439:                   <p className="text-xs text-muted-foreground">
440:                     Target: 4 applications per week
441:                   </p>
442:                 </div>
443:               </CardContent>
444:             </Card>
445: 
446:             <Card>
447:               <CardHeader>
448:                 <CardTitle>Monthly Goals</CardTitle>
449:                 <CardDescription>Applications per month</CardDescription>
450:               </CardHeader>
451:               <CardContent>
452:                 <div className="space-y-4">
453:                   <div className="flex items-center justify-between">
454:                     <span className="text-sm font-medium">Progress</span>
455:                     <span className="text-sm text-muted-foreground">{analytics.performance.monthlyGoalProgress}%</span>
456:                   </div>
457:                   <Progress value={analytics.performance.monthlyGoalProgress} className="w-full" />
458:                   <p className="text-xs text-muted-foreground">
459:                     Target: 15 applications per month
460:                   </p>
461:                 </div>
462:               </CardContent>
463:             </Card>
464:           </div>
465: 
466:           {/* Variant Performance (simple) */}
467:           {analytics.performance.variantPerformance && analytics.performance.variantPerformance.length > 0 && (
468:             <Card>
469:               <CardHeader>
470:                 <CardTitle>Resume Variant Performance</CardTitle>
471:                 <CardDescription>Views/Interviews/Offers by variant</CardDescription>
472:               </CardHeader>
473:               <CardContent>
474:                 <div className="space-y-3">
475:                   {analytics.performance.variantPerformance.map((row:any)=> (
476:                     <div key={row.variant} className="space-y-1">
477:                       <div className="text-sm font-medium">Variant {row.variant}</div>
478:                       <div className="text-xs text-muted-foreground">Views</div>
479:                       <div className="w-full bg-gray-200 rounded h-2"><div className="bg-blue-600 h-2 rounded" style={{ width: `${Math.min(100, row.views)}%` }} /></div>
480:                       <div className="text-xs text-muted-foreground mt-1">Interviews</div>
481:                       <div className="w-full bg-gray-200 rounded h-2"><div className="bg-yellow-500 h-2 rounded" style={{ width: `${Math.min(100, row.interviews*10)}%` }} /></div>
482:                       <div className="text-xs text-muted-foreground mt-1">Offers</div>
483:                       <div className="w-full bg-gray-200 rounded h-2"><div className="bg-green-600 h-2 rounded" style={{ width: `${Math.min(100, row.offers*20)}%` }} /></div>
484:                     </div>
485:                   ))}
486:                 </div>
487:               </CardContent>
488:             </Card>
489:           )}
490: 
491:           {/* Source Lift */}
492:           {analytics.performance.sourceLift && analytics.performance.sourceLift.length > 0 && (
493:             <Card>
494:               <CardHeader>
495:                 <CardTitle>Source Lift</CardTitle>
496:                 <CardDescription>Relative interview/offer lift by source</CardDescription>
497:               </CardHeader>
498:               <CardContent>
499:                 <div className="space-y-3">
500:                   {analytics.performance.sourceLift.map((s, i) => (
501:                     <div key={i} className="flex items-center justify-between">
502:                       <span className="text-sm font-medium">{s.source}</span>
503:                       <Badge variant={s.lift >= 0 ? 'secondary' : 'destructive'}>{(s.lift >= 0 ? '+' : '')}{Math.round(s.lift * 100)}%</Badge>
504:                     </div>
505:                   ))}
506:                 </div>
507:               </CardContent>
508:             </Card>
509:           )}
510: 
511:           {/* Strengths and Areas for Improvement */}
512:           <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
513:             <Card>
514:               <CardHeader>
515:                 <CardTitle className="flex items-center gap-2 text-green-700">
516:                   <CheckCircle className="h-5 w-5" />
517:                   Your Strengths
518:                 </CardTitle>
519:               </CardHeader>
520:               <CardContent>
521:                 <ul className="space-y-2">
522:                   {analytics.performance.strengths.map((strength, index) => (
523:                     <li key={index} className="flex items-center gap-2">
524:                       <div className="w-2 h-2 bg-green-500 rounded-full"></div>
525:                       <span className="text-sm">{strength}</span>
526:                     </li>
527:                   ))}
528:                 </ul>
529:               </CardContent>
530:             </Card>
531: 
532:             <Card>
533:               <CardHeader>
534:                 <CardTitle className="flex items-center gap-2 text-orange-700">
535:                   <AlertTriangle className="h-5 w-5" />
536:                   Areas for Improvement
537:                 </CardTitle>
538:               </CardHeader>
539:               <CardContent>
540:                 <ul className="space-y-2">
541:                   {analytics.performance.improvementAreas.map((area, index) => (
542:                     <li key={index} className="flex items-center gap-2">
543:                       <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
544:                       <span className="text-sm">{area}</span>
545:                     </li>
546:                   ))}
547:                 </ul>
548:               </CardContent>
549:             </Card>
550:           </div>
551:         </TabsContent>
552: 
553:         <TabsContent value="market" className="space-y-6">
554:           {/* Top Industries */}
555:           <Card>
556:             <CardHeader>
557:               <CardTitle>Top Industries</CardTitle>
558:               <CardDescription>Most active industries in your job search</CardDescription>
559:             </CardHeader>
560:             <CardContent>
561:               <div className="space-y-4">
562:                 {analytics.insights.topIndustries.map((industry, index) => (
563:                   <div key={industry.industry} className="flex items-center justify-between p-4 border rounded-lg">
564:                     <div className="flex items-center gap-3">
565:                       <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
566:                         <span className="text-sm font-bold text-blue-600">{index + 1}</span>
567:                       </div>
568:                       <div>
569:                         <h4 className="font-medium">{industry.industry}</h4>
570:                         <p className="text-sm text-muted-foreground">{industry.count} applications</p>
571:                       </div>
572:                     </div>
573:                     {industry.avgSalary && (
574:                       <div className="text-right">
575:                         <div className="flex items-center gap-1">
576:                           <DollarSign className="h-4 w-4 text-green-600" />
577:                           <span className="font-medium">${industry.avgSalary.toLocaleString()}/year</span>
578:                         </div>
579:                         <p className="text-xs text-muted-foreground">Avg Salary</p>
580:                       </div>
581:                     )}
582:                   </div>
583:                 ))}
584:               </div>
585:             </CardContent>
586:           </Card>
587:         </TabsContent>
588:       </Tabs>
589:     </div>
590:   )
591: }
592: 
593: function AnalyticsSkeleton() {
594:   return (
595:     <div className="space-y-8">
596:       {/* Header skeleton */}
597:       <div className="flex items-center justify-between">
598:         <div className="animate-pulse">
599:           <div className="w-64 h-8 bg-gray-200 rounded mb-2"></div>
600:           <div className="w-96 h-4 bg-gray-200 rounded"></div>
601:         </div>
602:         <div className="flex gap-3">
603:           <div className="w-20 h-10 bg-gray-200 rounded animate-pulse"></div>
604:           <div className="w-20 h-10 bg-gray-200 rounded animate-pulse"></div>
605:         </div>
606:       </div>
607: 
608:       {/* Metrics skeleton */}
609:       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
610:         {[...Array(4)].map((_, i) => (
611:           <div key={i} className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
612:             <div className="w-12 h-12 bg-gray-200 rounded-lg mb-4"></div>
613:             <div className="w-20 h-4 bg-gray-200 rounded mb-2"></div>
614:             <div className="w-16 h-6 bg-gray-200 rounded"></div>
615:           </div>
616:         ))}
617:       </div>
618: 
619:       {/* Tabs skeleton */}
620:       <div className="bg-card rounded-lg shadow-sm">
621:         <div className="border-b p-6">
622:           <div className="flex gap-6 animate-pulse">
623:             {[...Array(4)].map((_, i) => (
624:               <div key={i} className="w-20 h-8 bg-gray-200 rounded"></div>
625:             ))}
626:           </div>
627:         </div>
628:         <div className="p-6">
629:           <div className="animate-pulse">
630:             <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
631:             <div className="w-full h-64 bg-gray-200 rounded"></div>
632:           </div>
633:         </div>
634:       </div>
635:     </div>
636:   )
637: }
</file>

<file path="src/app/analytics/page.tsx">
 1: import { Suspense } from 'react'
 2: import { getServerSession } from 'next-auth/next'
 3: import { redirect } from 'next/navigation'
 4: import { authOptions } from '@/lib/auth'
 5: import { AnalyticsDashboard } from './components/analytics-dashboard'
 6: 
 7: export default async function AnalyticsPage() {
 8:   const session = await getServerSession(authOptions)
 9: 
10:   if (!session) {
11:     redirect('/auth/signin')
12:   }
13: 
14:   return (
15:     <div className="min-h-screen bg-background">
16:       <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
17:         <div className="mb-8">
18:           <h1 className="text-3xl font-bold text-foreground">Career Analytics</h1>
19:           <p className="mt-2 text-lg text-muted-foreground">
20:             Insights and analytics to optimize your job search strategy
21:           </p>
22:         </div>
23: 
24:         <Suspense fallback={<AnalyticsSkeleton />}>
25:           <AnalyticsDashboard userId={session.user.id} />
26:         </Suspense>
27:       </div>
28:     </div>
29:   )
30: }
31: 
32: function AnalyticsSkeleton() {
33:   return (
34:     <div className="space-y-8">
35:       {/* Overview Cards Skeleton */}
36:       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
37:         {[...Array(4)].map((_, i) => (
38:           <div key={i} className="bg-card rounded-lg p-6 shadow-sm">
39:             <div className="animate-pulse">
40:               <div className="w-12 h-12 bg-gray-200 rounded-lg mb-4"></div>
41:               <div className="w-20 h-4 bg-gray-200 rounded mb-2"></div>
42:               <div className="w-16 h-6 bg-gray-200 rounded"></div>
43:             </div>
44:           </div>
45:         ))}
46:       </div>
47: 
48:       {/* Charts Skeleton */}
49:       <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
50:         <div className="bg-card rounded-lg p-6 shadow-sm">
51:           <div className="animate-pulse">
52:             <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
53:             <div className="w-full h-64 bg-gray-200 rounded"></div>
54:           </div>
55:         </div>
56:         <div className="bg-card rounded-lg p-6 shadow-sm">
57:           <div className="animate-pulse">
58:             <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
59:             <div className="w-full h-64 bg-gray-200 rounded"></div>
60:           </div>
61:         </div>
62:       </div>
63: 
64:       {/* Insights Skeleton */}
65:       <div className="bg-card rounded-lg p-6 shadow-sm">
66:         <div className="animate-pulse">
67:           <div className="w-48 h-6 bg-gray-200 rounded mb-6"></div>
68:           <div className="space-y-4">
69:             {[...Array(3)].map((_, i) => (
70:               <div key={i} className="flex items-center gap-4">
71:                 <div className="w-8 h-8 bg-gray-200 rounded"></div>
72:                 <div className="flex-1">
73:                   <div className="w-32 h-4 bg-gray-200 rounded mb-2"></div>
74:                   <div className="w-full h-3 bg-gray-200 rounded"></div>
75:                 </div>
76:               </div>
77:             ))}
78:           </div>
79:         </div>
80:       </div>
81:     </div>
82:   )
83: }
</file>

<file path="src/app/api/interview-prep/generate/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import dbConnect from '@/lib/mongodb'
  5: import Application from '@/models/Application'
  6: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
  7: 
  8: export async function POST(req: NextRequest) {
  9:   try {
 10:     const session = await getServerSession(authOptions)
 11:     if (!session?.user?.id) {
 12:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 13:     }
 14: 
 15:     const { applicationId, resumeText, companyResearch } = await req.json()
 16:     
 17:     if (!applicationId) {
 18:       return NextResponse.json({ error: 'Application ID required' }, { status: 400 })
 19:     }
 20: 
 21:     await dbConnect()
 22: 
 23:     const application = await Application.findOne({ 
 24:       _id: applicationId, 
 25:       userId: session.user.id 
 26:     })
 27: 
 28:     if (!application) {
 29:       return NextResponse.json({ error: 'Application not found' }, { status: 404 })
 30:     }
 31: 
 32:     console.log('[INTERVIEW_PREP] 🎯 Generating prep for:', application.company, '-', application.jobTitle)
 33: 
 34:     // Generate AI interview questions
 35:     const prompt = `Generate a comprehensive interview preparation guide for this job application:
 36: 
 37: COMPANY: ${application.company}
 38: ROLE: ${application.jobTitle}
 39: LOCATION: ${application.location || 'Not specified'}
 40: 
 41: ${companyResearch ? `COMPANY INSIGHTS:
 42: ${JSON.stringify(companyResearch, null, 2)}` : ''}
 43: 
 44: ${resumeText ? `CANDIDATE BACKGROUND:
 45: ${resumeText.slice(0, 2000)}` : ''}
 46: 
 47: Generate a JSON response with:
 48: {
 49:   "questions": [
 50:     "5 role-specific technical/behavioral questions",
 51:     "3 company-specific questions based on recent news/culture",
 52:     "2 situational questions aligned with core competencies"
 53:   ],
 54:   "companyInsights": "Brief summary of company culture, values, and what they look for in candidates",
 55:   "talkingPoints": [
 56:     "3-5 key achievements or skills to highlight",
 57:     "How to position your experience for this role",
 58:     "Questions to ask the interviewer"
 59:   ]
 60: }
 61: 
 62: Make questions realistic and specific to the role and company.`
 63: 
 64:     const response = await PerplexityIntelligenceService.customQuery({
 65:       systemPrompt: 'You are an expert career coach helping candidates prepare for interviews. Return valid JSON only.',
 66:       userPrompt: prompt,
 67:       temperature: 0.7,
 68:       maxTokens: 2000
 69:     })
 70: 
 71:     let prepData
 72:     try {
 73:       prepData = JSON.parse(response.content)
 74:     } catch {
 75:       // Fallback if JSON parsing fails
 76:       prepData = {
 77:         questions: [
 78:           `Tell me about your experience with ${application.jobTitle}`,
 79:           `Why do you want to work at ${application.company}?`,
 80:           'What are your greatest strengths and weaknesses?',
 81:           'Describe a challenging project you worked on',
 82:           'Where do you see yourself in 5 years?'
 83:         ],
 84:         companyInsights: `${application.company} is looking for candidates who align with their values and can contribute to their mission.`,
 85:         talkingPoints: [
 86:           'Highlight relevant technical skills',
 87:           'Emphasize cultural fit',
 88:           'Show enthusiasm for the role'
 89:         ]
 90:       }
 91:     }
 92: 
 93:     // Save to application
 94:     application.interviewPrep = {
 95:       questions: prepData.questions,
 96:       companyInsights: prepData.companyInsights,
 97:       talkingPoints: prepData.talkingPoints,
 98:       preparedAt: new Date()
 99:     }
100:     await application.save()
101: 
102:     console.log('[INTERVIEW_PREP] ✅ Generated', prepData.questions.length, 'questions')
103: 
104:     return NextResponse.json({
105:       success: true,
106:       prep: {
107:         questions: prepData.questions,
108:         companyInsights: prepData.companyInsights,
109:         talkingPoints: prepData.talkingPoints,
110:         company: application.company,
111:         jobTitle: application.jobTitle
112:       }
113:     })
114:   } catch (error) {
115:     console.error('[INTERVIEW_PREP] ❌ Error:', error)
116:     return NextResponse.json({ 
117:       error: 'Failed to generate interview prep',
118:       details: error instanceof Error ? error.message : 'Unknown error'
119:     }, { status: 500 })
120:   }
121: }
</file>

<file path="src/app/api/jobs/suggest-industries/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server';
  2: import { getServerSession } from 'next-auth';
  3: import { authOptions } from '@/lib/auth';
  4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence';
  5: import { isRateLimited } from '@/lib/rate-limit';
  6: import Resume from '@/models/Resume';
  7: import { dbService } from '@/lib/database';
  8: 
  9: /**
 10:  * ENTERPRISE FEATURE: Industry Transition Suggestions
 11:  * 
 12:  * Analyzes user's career history and suggests compatible industries for career switching.
 13:  * Uses transferable skills analysis to find industries where user's experience translates.
 14:  * 
 15:  * EXAMPLE: Truck driver (10 years) → Food Service (6 months)
 16:  * Suggestions: Warehouse Management, Logistics Coordinator, Delivery Operations, Fleet Management
 17:  */
 18: export async function POST(request: NextRequest) {
 19:   try {
 20:     const session = await getServerSession(authOptions);
 21:     if (!session?.user?.id) {
 22:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
 23:     }
 24: 
 25:     if (await isRateLimited(session.user.id, 'industry-suggestions')) {
 26:       return NextResponse.json(
 27:         { error: 'Rate limit exceeded' },
 28:         { status: 429 }
 29:       );
 30:     }
 31: 
 32:     await dbService.connect();
 33: 
 34:     // Get user's resume
 35:     const resumeDoc = await Resume.findOne({ userId: session.user.id })
 36:       .sort({ createdAt: -1 })
 37:       .lean();
 38: 
 39:     if (!resumeDoc || !(resumeDoc as any).extractedText) {
 40:       return NextResponse.json(
 41:         { error: 'Please upload a resume first' },
 42:         { status: 400 }
 43:       );
 44:     }
 45: 
 46:     const extractedText = (resumeDoc as any).extractedText;
 47: 
 48:     console.log('[INDUSTRY_SUGGEST] Analyzing transferable skills for user', session.user.id);
 49: 
 50:     // Step 1: Get career timeline
 51:     const timeline = await PerplexityIntelligenceService.extractCareerTimeline(extractedText);
 52: 
 53:     // Step 2: Use Perplexity to suggest compatible industries based on transferable skills
 54:     const client = await import('@/lib/perplexity-service').then(m => new m.PerplexityService());
 55:     
 56:     const prompt = `INDUSTRY TRANSITION ANALYSIS - Suggest compatible career paths.
 57: 
 58: CAREER HISTORY:
 59: ${timeline.industries.map((i: any) => 
 60:   `- ${i.name}: ${i.yearsOfExperience} years (${i.percentage}% of career)\n  Skills: ${i.keywords.join(', ')}`
 61: ).join('\n')}
 62: 
 63: TASK: Identify 5-10 industries where this person's skills are TRANSFERABLE.
 64: 
 65: INSTRUCTIONS:
 66: 1. Analyze transferable skills (soft skills, technical skills, certifications)
 67: 2. Identify industries that value these skills
 68: 3. For EACH suggested industry:
 69:    - Explain WHY their skills transfer
 70:    - List specific roles they could target
 71:    - Rate transferability (High/Medium/Low)
 72: 4. Prioritize industries with HIGH demand and GOOD salary potential
 73: 
 74: EXAMPLE:
 75: For a truck driver (CDL, logistics, safety compliance):
 76: - Warehouse Management: HIGH transferability (logistics, safety, operations)
 77:   Roles: Warehouse Supervisor, Logistics Coordinator, Operations Manager
 78: - Last-Mile Delivery Operations: HIGH transferability (route planning, customer service)
 79:   Roles: Delivery Operations Manager, Fleet Manager, Route Optimizer
 80: 
 81: RETURN STRICT JSON (no markdown):
 82: {
 83:   "suggestedIndustries": [
 84:     {
 85:       "name": "Warehouse Management",
 86:       "transferability": "high",
 87:       "reasoning": "Strong logistics and safety compliance background translates directly to warehouse operations",
 88:       "targetRoles": ["Warehouse Supervisor", "Logistics Coordinator", "Operations Manager"],
 89:       "averageSalary": "$55,000-$75,000",
 90:       "demandLevel": "high",
 91:       "requiredTransition": "Minimal additional training - focus on inventory management systems"
 92:     }
 93:   ],
 94:   "transferableSkills": ["Logistics", "Safety Compliance", "Time Management", "Problem Solving"],
 95:   "recommendedCertifications": ["Certified Supply Chain Professional", "Lean Six Sigma Green Belt"]
 96: }`;
 97: 
 98:     const response = await client.makeRequest(
 99:       'You analyze career histories and suggest compatible industries for career transitions. Return only JSON.',
100:       prompt,
101:       { temperature: 0.3, maxTokens: 2500 }
102:     );
103: 
104:     // JSON extraction
105:     let cleanedContent = response.content.trim();
106:     cleanedContent = cleanedContent.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '');
107:     const jsonMatch = cleanedContent.match(/(\{[\s\S]*\})/);
108:     if (jsonMatch) cleanedContent = jsonMatch[0];
109: 
110:     const suggestions = JSON.parse(cleanedContent);
111: 
112:     console.log('[INDUSTRY_SUGGEST] Success:', {
113:       suggestedCount: suggestions.suggestedIndustries?.length,
114:       transferableSkills: suggestions.transferableSkills?.length
115:     });
116: 
117:     return NextResponse.json({
118:       success: true,
119:       currentIndustry: timeline.primaryIndustry,
120:       careerHistory: timeline.industries.map((i: any) => ({
121:         name: i.name,
122:         years: i.years,
123:         percentage: i.percentage
124:       })),
125:       suggestions: suggestions.suggestedIndustries || [],
126:       transferableSkills: suggestions.transferableSkills || [],
127:       recommendedCertifications: suggestions.recommendedCertifications || []
128:     });
129:   } catch (error) {
130:     console.error('[INDUSTRY_SUGGEST] Error:', error);
131:     return NextResponse.json(
132:       { error: 'Industry suggestion analysis failed' },
133:       { status: 500 }
134:     );
135:   }
136: }
</file>

<file path="src/app/api/outreach/compose/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import { authOptions } from '@/lib/auth'
  4: import { composeEmail } from '@/lib/email-service'
  5: import Application from '@/models/Application' // Assume model exists or create
  6: import { dbService } from '@/lib/database' // Default import
  7: 
  8: export const runtime = 'nodejs'
  9: export const dynamic = 'force-dynamic'
 10: 
 11: // Simple text to base64 for PDFs (not using ApplicationPDFComposer to avoid build issues)
 12: function textToBase64PDF(text: string): string {
 13:   const buffer = Buffer.from(text, 'utf-8')
 14:   return buffer.toString('base64')
 15: }
 16: 
 17: export async function POST(request: NextRequest) {
 18:   try {
 19:     await dbService.connect()
 20:     const session = await getServerSession(authOptions)
 21:     if (!session?.user?.id) {
 22:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 23:     }
 24: 
 25:     const body = await request.json()
 26:     const { jobId, resumeText, coverText, contacts, company, jobTitle } = body
 27: 
 28:     if (!jobId || !contacts?.email || !resumeText || !coverText) {
 29:       return NextResponse.json({ error: 'Missing required fields' }, { status: 400 })
 30:     }
 31: 
 32:     console.log('[OUTREACH] Composing for job:', jobId)
 33: 
 34:     // Generate subjects/intros via Perplexity (simple call)
 35:     const subjects = [
 36:       `Experienced ${jobTitle} Ready to Drive Results at ${company}`,
 37:       `Tailored Application for ${jobTitle} Opportunity`,
 38:       `Application: ${jobTitle} - ${company}`
 39:     ]
 40:     const intros = [
 41:       "With my background in [key skill from resume], I'm excited about the ${jobTitle} role at ${company}.",
 42:       "Your ${jobTitle} position aligns perfectly with my experience in [industry].",
 43:       "I'm reaching out regarding the ${jobTitle} opening—my track record in [achievement] makes me a strong fit."
 44:     ]
 45: 
 46:     // Generate real PDFs using pdf-generator service
 47:     const { generateResumePDF } = await import('@/lib/pdf-generator')
 48:     
 49:     const resumePdfBlob = await generateResumePDF({ 
 50:       text: resumeText, 
 51:       name: `${company}_Resume` 
 52:     })
 53:     const coverPdfBlob = await generateResumePDF({ 
 54:       text: coverText, 
 55:       name: `${company}_CoverLetter` 
 56:     })
 57:     
 58:     // Convert blobs to base64
 59:     const resumeBuffer = Buffer.from(await resumePdfBlob.arrayBuffer())
 60:     const coverBuffer = Buffer.from(await coverPdfBlob.arrayBuffer())
 61:     const resumeBase64 = resumeBuffer.toString('base64')
 62:     const coverBase64 = coverBuffer.toString('base64')
 63: 
 64:     const emailData = await composeEmail({
 65:       recipient: contacts.email,
 66:       subjects,
 67:       intros,
 68:       resumeText,
 69:       coverText,
 70:       company,
 71:       jobTitle
 72:     })
 73: 
 74:     // Save application tracking
 75:     const application = new Application({
 76:       userId: session.user.id,
 77:       jobId,
 78:       company,
 79:       jobTitle,
 80:       recipient: contacts.email,
 81:       status: 'composed',
 82:       sentAt: new Date(),
 83:       attachments: ['resume.pdf', 'cover-letter.pdf'],
 84:       metadata: { subjects: subjects.length, intros: intros.length }
 85:     })
 86:     await application.save()
 87: 
 88:     console.log('[OUTREACH] Application tracked:', application._id)
 89: 
 90:     return NextResponse.json({
 91:       ...emailData,
 92:       resumePDFBase64: resumeBase64,
 93:       coverLetterPDFBase64: coverBase64,
 94:       instructions: "Use the base64 strings to create downloadable PDFs and attach to your email."
 95:     })
 96: 
 97:   } catch (error) {
 98:     console.error('[OUTREACH] Compose failed:', error)
 99:     return NextResponse.json({ error: 'Composition failed', details: (error as Error).message }, { status: 500 })
100:   }
101: }
</file>

<file path="src/app/api/resume/career-timeline/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server';
 2: import { getServerSession } from 'next-auth';
 3: import { authOptions } from '@/lib/auth';
 4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence';
 5: import { isRateLimited } from '@/lib/rate-limit';
 6: 
 7: /**
 8:  * ENTERPRISE FEATURE: Career Timeline Analysis
 9:  * 
10:  * Calculates industry tenure and weighting for intelligent job matching:
11:  * - Total years in each industry
12:  * - Percentage of career in each sector
13:  * - Industry-specific keywords
14:  * - Career transition detection
15:  * 
16:  * USE CASE: If someone drove trucks for 10 years then became a cook for 6 months,
17:  * we should show MORE truck driving jobs (95% of career) than cooking jobs (5%).
18:  */
19: export async function POST(request: NextRequest) {
20:   try {
21:     const session = await getServerSession(authOptions);
22:     if (!session?.user?.id) {
23:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
24:     }
25: 
26:     if (await isRateLimited(session.user.id, 'resume:career-timeline')) {
27:       return NextResponse.json(
28:         { error: 'Rate limit exceeded' },
29:         { status: 429 }
30:       );
31:     }
32: 
33:     const { resume } = await request.json();
34: 
35:     if (!resume || resume.length < 100) {
36:       return NextResponse.json(
37:         { error: 'Resume text is required (minimum 100 characters)' },
38:         { status: 400 }
39:       );
40:     }
41: 
42:     console.log('[CAREER_TIMELINE_API] Analyzing resume, length:', resume.length);
43: 
44:     const timeline = await PerplexityIntelligenceService.extractCareerTimeline(resume);
45: 
46:     console.log('[CAREER_TIMELINE_API] Success:', {
47:       industries: timeline.industries.length,
48:       currentIndustry: timeline.primaryIndustry,
49:       totalWorkYears: timeline.totalYears
50:     });
51: 
52:     return NextResponse.json({
53:       success: true,
54:       timeline: {
55:         industries: timeline.industries,
56:         totalWorkYears: timeline.totalYears,
57:         totalEducationYears: 0, // Not provided by extractCareerTimeline
58:         currentIndustry: timeline.primaryIndustry,
59:         careerTransition: false, // Not provided by extractCareerTimeline
60:         // Computed field: Primary industry (longest tenure)
61:         primaryIndustry: timeline.primaryIndustry
62:       }
63:     });
64:   } catch (error) {
65:     console.error('[CAREER_TIMELINE_API] Error:', error);
66:     return NextResponse.json(
67:       { error: 'Career timeline analysis failed' },
68:       { status: 500 }
69:     );
70:   }
71: }
</file>

<file path="src/app/api/resume/generate-bullets/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { getServerSession } from 'next-auth'
 3: import { authOptions } from '@/lib/auth'
 4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 5: 
 6: export async function POST(req: NextRequest) {
 7:   try {
 8:     const session = await getServerSession(authOptions)
 9:     if (!session?.user?.id) {
10:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
11:     }
12: 
13:     const { role, company, input, achievements } = await req.json()
14:     
15:     if (!role && !input) {
16:       return NextResponse.json({ error: 'Role or input text required' }, { status: 400 })
17:     }
18: 
19:     console.log('[BULLET_GENERATOR] 🎯 Generating bullets for:', role || 'custom input')
20: 
21:     const prompt = `Generate 5 achievement-focused bullet points for this role:
22: 
23: ${role ? `Role: ${role}` : ''}
24: ${company ? `Company: ${company}` : ''}
25: ${input ? `Context: ${input}` : ''}
26: ${achievements?.length ? `Current bullets: ${achievements.join('\n')}` : ''}
27: 
28: Requirements:
29: - Start with strong action verbs (Spearheaded, Orchestrated, Pioneered, Architected, etc.)
30: - Include quantifiable metrics (numbers, percentages, dollar amounts, time saved)
31: - Focus on RESULTS and IMPACT, not just tasks
32: - Keep under 20 words per bullet
33: - Use past tense for previous roles, present for current
34: 
35: Examples of GOOD bullets:
36: ❌ BAD: "Managed sales team"
37: ✅ GOOD: "Led 8-person sales team, increasing quarterly revenue by 45% ($2.1M) through strategic territory expansion"
38: 
39: ❌ BAD: "Handled customer complaints"
40: ✅ GOOD: "Resolved 200+ escalated customer issues monthly, improving satisfaction scores from 72% to 94%"
41: 
42: ❌ BAD: "Wrote code for new features"
43: ✅ GOOD: "Architected microservices platform serving 2M+ users, reducing API latency by 60% and infrastructure costs by $40K/year"
44: 
45: Return ONLY a JSON array of 5 bullet points:
46: ["bullet 1", "bullet 2", "bullet 3", "bullet 4", "bullet 5"]`
47: 
48:     const response = await PerplexityIntelligenceService.customQuery({
49:       systemPrompt: 'You are an expert resume writer. Generate achievement-focused bullet points with metrics. Return ONLY a JSON array.',
50:       userPrompt: prompt,
51:       temperature: 0.8,
52:       maxTokens: 1000
53:     })
54: 
55:     let bullets
56:     try {
57:       bullets = JSON.parse(response.content)
58:       if (!Array.isArray(bullets)) {
59:         throw new Error('Response is not an array')
60:       }
61:     } catch {
62:       // Fallback: extract bullets from text
63:       const lines = response.content.split('\n').filter(line => 
64:         line.trim().length > 10 && 
65:         (line.trim().startsWith('-') || line.trim().startsWith('•') || line.match(/^\d+\./))
66:       )
67:       bullets = lines.map(line => line.replace(/^[-•\d.]\s*/, '').trim()).slice(0, 5)
68:       
69:       if (bullets.length === 0) {
70:         bullets = [
71:           `${input || 'Managed key initiatives'} resulting in measurable business impact`,
72:           `Collaborated with cross-functional teams to deliver high-quality results`,
73:           `Implemented best practices and optimized processes for efficiency`,
74:           `Analyzed data and metrics to drive informed decision-making`,
75:           `Mentored team members and contributed to organizational growth`
76:         ]
77:       }
78:     }
79: 
80:     console.log('[BULLET_GENERATOR] ✅ Generated', bullets.length, 'bullets')
81: 
82:     return NextResponse.json({ 
83:       success: true, 
84:       bullets: bullets.slice(0, 5)
85:     })
86:   } catch (error) {
87:     console.error('[BULLET_GENERATOR] ❌ Error:', error)
88:     return NextResponse.json({ 
89:       error: 'Failed to generate bullets',
90:       details: error instanceof Error ? error.message : 'Unknown error'
91:     }, { status: 500 })
92:   }
93: }
</file>

<file path="src/app/api/resume/parse-linkedin/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import { extractTextFromPDF } from '@/lib/pdf-utils'
  5: 
  6: /**
  7:  * Parse LinkedIn profile data (PDF or text)
  8:  * Extracts structured resume data from LinkedIn exports
  9:  */
 10: export async function POST(request: NextRequest) {
 11:   try {
 12:     const session = await getServerSession(authOptions)
 13:     if (!session?.user) {
 14:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 15:     }
 16: 
 17:     const contentType = request.headers.get('content-type') || ''
 18: 
 19:     let linkedInText = ''
 20:     let source = 'linkedin'
 21: 
 22:     // Handle PDF upload
 23:     if (contentType.includes('multipart/form-data')) {
 24:       const formData = await request.formData()
 25:       const file = formData.get('file') as File
 26:       source = (formData.get('source') as string) || 'linkedin'
 27: 
 28:       if (!file) {
 29:         return NextResponse.json({ error: 'No file provided' }, { status: 400 })
 30:       }
 31: 
 32:       // Extract text from PDF
 33:       linkedInText = await extractTextFromPDF(file)
 34:     } 
 35:     // Handle text paste
 36:     else {
 37:       const body = await request.json()
 38:       linkedInText = body.text
 39:       source = body.source || 'linkedin'
 40:     }
 41: 
 42:     if (!linkedInText || linkedInText.trim().length < 50) {
 43:       return NextResponse.json(
 44:         { error: 'LinkedIn data is too short or empty' },
 45:         { status: 400 }
 46:       )
 47:     }
 48: 
 49:     console.log('[LINKEDIN_PARSE] Processing LinkedIn data, length:', linkedInText.length)
 50: 
 51:     // Parse LinkedIn data into structured format
 52:     const resumeData = parseLinkedInData(linkedInText)
 53: 
 54:     console.log('[LINKEDIN_PARSE] Successfully parsed:', {
 55:       name: resumeData.personalInfo.fullName,
 56:       experienceCount: resumeData.experience.length,
 57:       educationCount: resumeData.education.length,
 58:       skillsCount: resumeData.skills.length
 59:     })
 60: 
 61:     return NextResponse.json({
 62:       success: true,
 63:       resumeData,
 64:       source,
 65:       metadata: {
 66:         parsedAt: new Date().toISOString(),
 67:         textLength: linkedInText.length,
 68:         sections: {
 69:           experience: resumeData.experience.length,
 70:           education: resumeData.education.length,
 71:           skills: resumeData.skills.length
 72:         }
 73:       }
 74:     })
 75: 
 76:   } catch (error) {
 77:     console.error('[LINKEDIN_PARSE] Error:', error)
 78:     return NextResponse.json(
 79:       { error: 'Failed to parse LinkedIn data', details: (error as Error).message },
 80:       { status: 500 }
 81:     )
 82:   }
 83: }
 84: 
 85: /**
 86:  * Parse LinkedIn profile text into structured resume data
 87:  */
 88: function parseLinkedInData(text: string): any {
 89:   const lines = text.split('\n').map(line => line.trim()).filter(Boolean)
 90:   
 91:   // Extract name (usually first line or after "Profile")
 92:   let fullName = 'LinkedIn User'
 93:   const nameMatch = text.match(/^([A-Z][a-z]+\s+[A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)/m)
 94:   if (nameMatch) {
 95:     fullName = nameMatch[1]
 96:   }
 97: 
 98:   // Extract email
 99:   const emailMatch = text.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/i)
100:   const email = emailMatch ? emailMatch[1] : ''
101: 
102:   // Extract phone
103:   const phoneMatch = text.match(/(\+?1?\s*\(?[0-9]{3}\)?[\s.-]?[0-9]{3}[\s.-]?[0-9]{4})/i)
104:   const phone = phoneMatch ? phoneMatch[1] : ''
105: 
106:   // Extract location
107:   const locationMatch = text.match(/([A-Z][a-z]+,\s*[A-Z]{2}(?:,\s*[A-Z][a-z]+)?)/i)
108:   const location = locationMatch ? locationMatch[1] : ''
109: 
110:   // Extract LinkedIn URL
111:   const linkedInMatch = text.match(/(linkedin\.com\/in\/[a-zA-Z0-9-]+)/i)
112:   const linkedIn = linkedInMatch ? `https://www.${linkedInMatch[1]}` : ''
113: 
114:   // Extract headline/title
115:   let headline = ''
116:   const headlineMatch = text.match(/(?:Headline|Title|Position):\s*(.+)/i)
117:   if (headlineMatch) {
118:     headline = headlineMatch[1]
119:   } else {
120:     // Try to find a professional title
121:     const titleMatch = text.match(/(?:^|\n)([A-Z][a-z]+\s+(?:Engineer|Developer|Manager|Director|Analyst|Consultant|Designer|Specialist))/m)
122:     if (titleMatch) {
123:       headline = titleMatch[1]
124:     }
125:   }
126: 
127:   // Extract experience
128:   const experience = parseLinkedInExperience(text)
129: 
130:   // Extract education
131:   const education = parseLinkedInEducation(text)
132: 
133:   // Extract skills
134:   const skills = parseLinkedInSkills(text)
135: 
136:   // Extract summary
137:   const summaryMatch = text.match(/(?:Summary|About):\s*(.+?)(?:\n\n|Experience:|Education:|$)/is)
138:   const summary = summaryMatch ? summaryMatch[1].trim() : ''
139: 
140:   return {
141:     personalInfo: {
142:       fullName,
143:       email,
144:       phone,
145:       location,
146:       linkedIn,
147:       website: '',
148:       github: ''
149:     },
150:     summary: summary || `${headline} with expertise in ${skills.slice(0, 5).join(', ')}`,
151:     experience,
152:     education,
153:     skills,
154:     certifications: [],
155:     projects: [],
156:     metadata: {
157:       source: 'linkedin',
158:       importedAt: new Date().toISOString()
159:     }
160:   }
161: }
162: 
163: /**
164:  * Parse experience section from LinkedIn text
165:  */
166: function parseLinkedInExperience(text: string): any[] {
167:   const experience: any[] = []
168:   
169:   // Look for experience section
170:   const expMatch = text.match(/Experience:?\s*(.+?)(?:Education:|Skills:|Certifications:|$)/is)
171:   if (!expMatch) return experience
172: 
173:   const expText = expMatch[1]
174:   
175:   // Split by job entries (look for company names or dates)
176:   const jobPattern = /([A-Z][^\n]+)\n([A-Z][^\n]+)\n((?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[^\n]+)/g
177:   let match
178: 
179:   while ((match = jobPattern.exec(expText)) !== null) {
180:     const [, title, company, dates] = match
181:     
182:     // Parse dates
183:     const dateMatch = dates.match(/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+(\d{4})\s*[-–]\s*(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+(\d{4})|Present)/i)
184:     
185:     let startDate = ''
186:     let endDate = ''
187:     let current = false
188: 
189:     if (dateMatch) {
190:       startDate = `${dateMatch[1]} ${dateMatch[2]}`
191:       if (dateMatch[3] && dateMatch[4]) {
192:         endDate = `${dateMatch[3]} ${dateMatch[4]}`
193:       } else {
194:         endDate = 'Present'
195:         current = true
196:       }
197:     }
198: 
199:     experience.push({
200:       title: title.trim(),
201:       company: company.trim(),
202:       location: '',
203:       startDate,
204:       endDate,
205:       current,
206:       description: '',
207:       achievements: []
208:     })
209:   }
210: 
211:   return experience
212: }
213: 
214: /**
215:  * Parse education section from LinkedIn text
216:  */
217: function parseLinkedInEducation(text: string): any[] {
218:   const education: any[] = []
219:   
220:   const eduMatch = text.match(/Education:?\s*(.+?)(?:Skills:|Certifications:|Licenses:|$)/is)
221:   if (!eduMatch) return education
222: 
223:   const eduText = eduMatch[1]
224:   
225:   // Look for school names and degrees
226:   const schoolPattern = /([A-Z][^\n]+(?:University|College|Institute|School))\n([^\n]+)\n(\d{4}\s*[-–]\s*\d{4}|\d{4})/gi
227:   let match
228: 
229:   while ((match = schoolPattern.exec(eduText)) !== null) {
230:     const [, school, degree, years] = match
231:     
232:     education.push({
233:       school: school.trim(),
234:       degree: degree.trim(),
235:       field: '',
236:       graduationYear: years.match(/\d{4}$/)?.[0] || '',
237:       gpa: '',
238:       achievements: []
239:     })
240:   }
241: 
242:   return education
243: }
244: 
245: /**
246:  * Parse skills from LinkedIn text
247:  */
248: function parseLinkedInSkills(text: string): string[] {
249:   const skills: string[] = []
250:   
251:   // Look for skills section
252:   const skillsMatch = text.match(/Skills:?\s*(.+?)(?:Certifications:|Licenses:|Languages:|$)/is)
253:   if (!skillsMatch) {
254:     // Fallback: extract common technical terms
255:     const techTerms = text.match(/\b(JavaScript|TypeScript|Python|Java|React|Node\.js|AWS|Docker|Kubernetes|SQL|MongoDB|Git|Agile|Scrum|Leadership|Management|Sales|Marketing|Design|Analytics)\b/gi)
256:     if (techTerms) {
257:       return [...new Set(techTerms.map(t => t.trim()))]
258:     }
259:     return skills
260:   }
261: 
262:   const skillsText = skillsMatch[1]
263:   
264:   // Split by common delimiters
265:   const skillsList = skillsText.split(/[•·,\n]/).map(s => s.trim()).filter(s => s.length > 2 && s.length < 50)
266:   
267:   return [...new Set(skillsList)]
268: }
</file>

<file path="src/app/api/salary/generate/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import dbConnect from '@/lib/mongodb'
  5: import Application from '@/models/Application'
  6: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
  7: 
  8: export async function POST(req: NextRequest) {
  9:   try {
 10:     const session = await getServerSession(authOptions)
 11:     if (!session?.user?.id) {
 12:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 13:     }
 14: 
 15:     const { applicationId, yearsExperience } = await req.json()
 16:     
 17:     if (!applicationId) {
 18:       return NextResponse.json({ error: 'Application ID required' }, { status: 400 })
 19:     }
 20: 
 21:     await dbConnect()
 22: 
 23:     const application = await Application.findOne({ 
 24:       _id: applicationId, 
 25:       userId: session.user.id 
 26:     })
 27: 
 28:     if (!application) {
 29:       return NextResponse.json({ error: 'Application not found' }, { status: 404 })
 30:     }
 31: 
 32:     console.log('[SALARY] 💰 Generating salary data for:', application.company, '-', application.jobTitle)
 33: 
 34:     // Generate salary benchmarks using AI
 35:     const prompt = `Provide current market salary data for this role:
 36: 
 37: ROLE: ${application.jobTitle}
 38: COMPANY: ${application.company}
 39: LOCATION: ${application.location || 'United States'}
 40: EXPERIENCE: ${yearsExperience || 5} years
 41: 
 42: Return JSON with:
 43: {
 44:   "marketMin": 75000,
 45:   "marketMedian": 95000,
 46:   "marketMax": 120000,
 47:   "negotiationTips": [
 48:     "Research shows the market range for ${application.jobTitle} in ${application.location || 'this area'} is $X-$Y",
 49:     "Based on your X years of experience, you should target the upper end of the range",
 50:     "Emphasize your unique skills: [specific skills]",
 51:     "Wait for them to give the first number",
 52:     "Consider total compensation: equity, bonuses, benefits"
 53:   ],
 54:   "factors": "Explanation of what influences this salary range"
 55: }
 56: 
 57: Use real market data from 2024-2025. Be specific to the location and seniority level.`
 58: 
 59:     const response = await PerplexityIntelligenceService.customQuery({
 60:       systemPrompt: 'You are a salary negotiation expert providing market data. Return valid JSON only.',
 61:       userPrompt: prompt,
 62:       temperature: 0.3,
 63:       maxTokens: 1500
 64:     })
 65: 
 66:     let salaryData
 67:     try {
 68:       salaryData = JSON.parse(response.content)
 69:     } catch {
 70:       // Fallback with estimated data
 71:       const baseMin = 60000
 72:       const baseMedian = 85000
 73:       const baseMax = 110000
 74:       
 75:       salaryData = {
 76:         marketMin: baseMin,
 77:         marketMedian: baseMedian,
 78:         marketMax: baseMax,
 79:         negotiationTips: [
 80:           `Research shows the market range for ${application.jobTitle} is $${baseMin.toLocaleString()}-$${baseMax.toLocaleString()}`,
 81:           'Emphasize your unique skills and achievements',
 82:           'Wait for them to give the first number',
 83:           'Consider total compensation: equity, bonuses, benefits',
 84:           'Be prepared to justify your target with market data'
 85:         ],
 86:         factors: 'Based on industry standards and location'
 87:       }
 88:     }
 89: 
 90:     // Calculate user target (aim for 75th percentile)
 91:     const userTarget = Math.round(salaryData.marketMedian * 1.15)
 92: 
 93:     // Save to application
 94:     application.salaryData = {
 95:       marketMin: salaryData.marketMin,
 96:       marketMedian: salaryData.marketMedian,
 97:       marketMax: salaryData.marketMax,
 98:       userTarget,
 99:       negotiationTips: salaryData.negotiationTips,
100:       preparedAt: new Date()
101:     }
102:     await application.save()
103: 
104:     console.log('[SALARY] ✅ Generated salary range:', salaryData.marketMin, '-', salaryData.marketMax)
105: 
106:     return NextResponse.json({
107:       success: true,
108:       salary: {
109:         marketMin: salaryData.marketMin,
110:         marketMedian: salaryData.marketMedian,
111:         marketMax: salaryData.marketMax,
112:         userTarget,
113:         negotiationTips: salaryData.negotiationTips,
114:         factors: salaryData.factors,
115:         company: application.company,
116:         jobTitle: application.jobTitle,
117:         location: application.location
118:       }
119:     })
120:   } catch (error) {
121:     console.error('[SALARY] ❌ Error:', error)
122:     return NextResponse.json({ 
123:       error: 'Failed to generate salary data',
124:       details: error instanceof Error ? error.message : 'Unknown error'
125:     }, { status: 500 })
126:   }
127: }
</file>

<file path="src/app/api/test-perplexity/route.ts">
 1: import { NextRequest, NextResponse } from 'next/server'
 2: import { PerplexityService } from '@/lib/perplexity-service'
 3: 
 4: /**
 5:  * Test endpoint to verify Perplexity API is working
 6:  * GET /api/test-perplexity
 7:  */
 8: export async function GET(request: NextRequest) {
 9:   try {
10:     console.log('[TEST_PERPLEXITY] Starting test...')
11:     
12:     // Check if API key exists
13:     if (!process.env.PERPLEXITY_API_KEY) {
14:       console.error('[TEST_PERPLEXITY] ❌ PERPLEXITY_API_KEY not set!')
15:       return NextResponse.json({
16:         success: false,
17:         error: 'PERPLEXITY_API_KEY environment variable not set',
18:         timestamp: new Date().toISOString()
19:       }, { status: 500 })
20:     }
21:     
22:     console.log('[TEST_PERPLEXITY] API key exists, length:', process.env.PERPLEXITY_API_KEY.length)
23:     
24:     // Test simple request
25:     const client = new PerplexityService()
26:     console.log('[TEST_PERPLEXITY] Making test request...')
27:     
28:     const response = await client.makeRequest(
29:       'You are a helpful assistant.',
30:       'What is 2+2? Respond with just the number.',
31:       {
32:         temperature: 0.1,
33:         maxTokens: 50,
34:         model: 'sonar-pro'
35:       }
36:     )
37:     
38:     console.log('[TEST_PERPLEXITY] ✅ Response received:', {
39:       contentLength: response.content.length,
40:       content: response.content
41:     })
42:     
43:     return NextResponse.json({
44:       success: true,
45:       test: 'simple_math',
46:       response: response.content,
47:       apiKeyConfigured: true,
48:       timestamp: new Date().toISOString()
49:     })
50:     
51:   } catch (error) {
52:     console.error('[TEST_PERPLEXITY] ❌ Error:', error)
53:     return NextResponse.json({
54:       success: false,
55:       error: (error as Error).message,
56:       stack: (error as Error).stack,
57:       timestamp: new Date().toISOString()
58:     }, { status: 500 })
59:   }
60: }
</file>

<file path="src/app/api/v2/company/deep-research/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import { authOptions } from '@/lib/auth'
  4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
  5: import { WebScraperService } from '@/lib/web-scraper'
  6: import { dbService } from '@/lib/database' // Default import
  7: import Profile from '@/models/Profile'
  8: 
  9: const webScraper = new WebScraperService()
 10: 
 11: export async function POST(request: NextRequest) {
 12:   try {
 13:     await dbService.connect()
 14:     const session = await getServerSession(authOptions)
 15:     if (!session?.user?.id) {
 16:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 17:     }
 18: 
 19:     const body = await request.json()
 20:     let { companyName, companyWebsite, targetRole, location } = body
 21: 
 22:     console.log('[DEEP_RESEARCH] Request body:', JSON.stringify(body, null, 2))
 23:     console.log('[DEEP_RESEARCH] Validation:', {
 24:       hasCompanyName: !!companyName,
 25:       companyNameValue: companyName,
 26:       hasWebsite: !!companyWebsite,
 27:       hasRole: !!targetRole,
 28:       hasLocation: !!location
 29:     })
 30: 
 31:     if (!companyName) {
 32:       console.error('[DEEP_RESEARCH] ❌ Missing companyName in request')
 33:       return NextResponse.json({ 
 34:         error: 'Missing companyName',
 35:         received: body,
 36:         hint: 'Request must include companyName field'
 37:       }, { status: 400 })
 38:     }
 39:     
 40:     // CRITICAL FIX: Sanitize company name (remove noise from PDF extraction)
 41:     const originalCompanyName = companyName
 42:     companyName = companyName
 43:       .trim()
 44:       .replace(/\s*\(.*?\)\s*/g, '') // Remove text in parentheses like "(Project Name)"
 45:       .replace(/\s*-.*$/g, '') // Remove everything after dash
 46:       .replace(/\s+/g, ' ') // Normalize spaces
 47:       .trim()
 48:       .split(/\s+/) // Split into words
 49:       .slice(0, 5) // Take first 5 words max
 50:       .join(' ') // Rejoin
 51:     
 52:     console.log('[COMPANY] Sanitized company name:', {
 53:       original: originalCompanyName,
 54:       sanitized: companyName,
 55:       removed: originalCompanyName !== companyName
 56:     })
 57: 
 58:     // Step 1: Basic company research via Perplexity V2
 59:     const research = await PerplexityIntelligenceService.researchCompanyV2({ 
 60:       company: companyName, 
 61:       role: targetRole, 
 62:       geo: location 
 63:     })
 64:     
 65:     // CRITICAL DEBUG: Log what Perplexity returned
 66:     console.log('[COMPANY] Research data:', {
 67:       success: research.success,
 68:       hasData: !!research.data,
 69:       dataKeys: research.data ? Object.keys(research.data) : [],
 70:       marketIntelligence: research.data?.marketIntelligence
 71:     })
 72: 
 73:     // Step 2: Website scraping for contacts
 74:     let siteContacts: { emails: string[]; phones: string[]; addresses: string[] } = { emails: [], phones: [], addresses: [] }
 75:     if (companyWebsite) {
 76:       try {
 77:         siteContacts = await webScraper.scrapeContactInfoFromWebsite(companyWebsite)
 78:         console.log('[COMPANY] Site contacts found:', siteContacts.emails.length)
 79:       } catch (error) {
 80:         console.error('[COMPANY] Site scrape failed:', error)
 81:       }
 82:     }
 83: 
 84:     // Step 3: Real hiring contacts via Perplexity (LinkedIn + site search)
 85:     const hiringQuery = `${companyName} hiring manager OR recruiter email OR contact site:linkedin.com/company/${companyName.toLowerCase().replace(/\s+/g, '-')} OR site:${companyWebsite}`
 86:     const contacts = await PerplexityIntelligenceService.hiringContactsV2(hiringQuery)
 87: 
 88:     // Extract emails and phones from contacts.data
 89:     const perplexityEmails = contacts.data.map(c => c.email).filter((email): email is string => Boolean(email))
 90:     const perplexityPhones = contacts.data.map(c => c.phone).filter((phone): phone is string => Boolean(phone))
 91: 
 92:     console.log('[COMPANY] Perplexity contacts:', perplexityEmails.length)
 93: 
 94:     // Merge contacts (dedupe emails)
 95:     const allEmails = Array.from(new Set([...siteContacts.emails, ...perplexityEmails])).filter(email =>
 96:       email.includes('@') && !email.includes('example.com') // Basic validation
 97:     )
 98:     const allPhones = Array.from(new Set([...siteContacts.phones, ...perplexityPhones]))
 99: 
100:     // Enhance with confidence (Perplexity sources + validation)
101:     // ONLY include REAL emails found via Perplexity or site scraping - NO inferred emails
102:     const validatedContacts = allEmails.map(email => ({
103:       email,
104:       confidence: perplexityEmails.includes(email) ? 85 : 60, // Higher for Perplexity
105:       sources: perplexityEmails.includes(email) ? ['Perplexity', 'LinkedIn'] : ['Site Scrape']
106:     }))
107:     
108:     console.log('[COMPANY] Found', validatedContacts.length, 'REAL verified contacts (no inferred emails)')
109: 
110:     // Save to profile for reuse
111:     await Profile.findOneAndUpdate(
112:       { userId: session.user.id },
113:       { $push: { companyResearch: { company: companyName, contacts: validatedContacts, date: new Date() } } }
114:     )
115: 
116:     // CRITICAL FIX: Ensure market intelligence has meaningful data
117:     const marketIntel = research.data.marketIntelligence || 
118:       `${companyName} operates in the ${research.data.industry || 'technology'} sector. ` +
119:       `The company is ${research.data.size || 'actively hiring'} and ${research.data.revenue ? `generates ${research.data.revenue} in revenue` : 'is growing rapidly'}.`
120:     
121:     return NextResponse.json({
122:       success: true,
123:       company: research.data.company || companyName,
124:       description: research.data.description || `${companyName} - Company information being researched.`,
125:       size: research.data.size || 'Unknown',
126:       revenue: research.data.revenue || 'Unknown',
127:       industry: research.data.industry || 'Unknown',
128:       founded: research.data.founded || 'Unknown',
129:       headquarters: research.data.headquarters || location || 'Unknown',
130:       psychology: research.data.psychology || 'Company culture and values are being analyzed.',
131:       marketIntelligence: marketIntel,
132:       contacts: validatedContacts,
133:       hiringContacts: contacts.data, // CRITICAL FIX: Add the full contact objects for frontend display
134:       siteContacts: { ...siteContacts, emails: allEmails, phones: allPhones },
135:       metadata: {
136:         researchSources: research.data.sources || [],
137:         contactCount: validatedContacts.length,
138:         hiringContactCount: contacts.data.length,
139:         confidenceAverage: validatedContacts.reduce((sum, c) => sum + c.confidence, 0) / (validatedContacts.length || 1),
140:         extractedAt: new Date().toISOString()
141:       }
142:     })
143: 
144:   } catch (error) {
145:     console.error('[COMPANY] Deep research failed:', error)
146:     return NextResponse.json({ error: 'Research failed', details: (error as Error).message }, { status: 500 })
147:   }
148: }
</file>

<file path="src/app/applications/[id]/page.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { useParams } from 'next/navigation'
  5: import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
  6: import { Textarea } from '@/components/ui/textarea'
  7: import { Button } from '@/components/ui/button'
  8: import { Label } from '@/components/ui/label'
  9: import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select'
 10: import { Download, Loader2 } from 'lucide-react'
 11: import toast from 'react-hot-toast'
 12: 
 13: function highlightKeywords(text: string, keywords: string[]): string {
 14:   if (!text) return ''
 15:   if (!keywords || keywords.length === 0) return text
 16:   const escaped = keywords.map(k => k.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).filter(Boolean)
 17:   if (escaped.length === 0) return text
 18:   const regex = new RegExp(`\\b(${escaped.join('|')})\\b`, 'gi')
 19:   return text.replace(regex, '<mark class="bg-yellow-200">$1</mark>')
 20: }
 21: 
 22: export default function ApplicationDetailsPage() {
 23:   const params = useParams<{ id: string }>()
 24:   const [loading, setLoading] = useState(true)
 25:   const [data, setData] = useState<any>(null)
 26:   const [attachId, setAttachId] = useState('')
 27:   const [attaching, setAttaching] = useState(false)
 28: 
 29:   useEffect(() => {
 30:     const load = async () => {
 31:       try {
 32:         const resp = await fetch(`/api/applications/${params.id}`)
 33:         if (!resp.ok) throw new Error('Failed to load application')
 34:         const json = await resp.json()
 35:         setData(json)
 36:       } catch (e) {
 37:         toast.error('Failed to load application')
 38:       } finally {
 39:         setLoading(false)
 40:       }
 41:     }
 42:     if (params?.id) load()
 43:   }, [params?.id])
 44: 
 45:   const downloadResumeVersion = async (html: string, name: string) => {
 46:     const wrapped = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>${name}</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.5;color:#333;max-width:8.5in;margin:0 auto;padding:0.5in;white-space:pre-wrap}</style></head><body>${html.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
 47:     try {
 48:       const resp = await fetch('/api/resume/export/pdf', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ html: wrapped, filename: `${name}.pdf` }) })
 49:       if (!resp.ok) throw new Error('Failed')
 50:       const blob = await resp.blob()
 51:       const url = URL.createObjectURL(blob)
 52:       const a = document.createElement('a')
 53:       a.href = url
 54:       a.download = `${name}.pdf`
 55:       document.body.appendChild(a)
 56:       a.click()
 57:       document.body.removeChild(a)
 58:       URL.revokeObjectURL(url)
 59:     } catch {
 60:       toast.error('Failed to download')
 61:     }
 62:   }
 63: 
 64:   const addCalendarEvent = async () => {
 65:     if (!data?.application) return
 66:     try {
 67:       const now = new Date()
 68:       const end = new Date(now.getTime() + 30*60000)
 69:       await fetch('/api/calendar/events', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ summary: `${data.application.companyName} - ${data.application.jobTitle} Interview`, start: now.toISOString(), end: end.toISOString(), description: 'Interview scheduled' }) })
 70:       toast.success('Event created in Google Calendar')
 71:     } catch { toast.error('Failed to create event') }
 72:   }
 73: 
 74:   const downloadICS = async () => {
 75:     if (!data?.application) return
 76:     try {
 77:       const now = new Date()
 78:       const end = new Date(now.getTime() + 30*60000)
 79:       const res = await fetch('/api/calendar/ics', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ summary: `${data.application.companyName} - ${data.application.jobTitle} Interview`, start: now.toISOString(), end: end.toISOString(), description: 'Interview scheduled' }) })
 80:       if (!res.ok) throw new Error('ics failed')
 81:       const blob = await res.blob()
 82:       const url = URL.createObjectURL(blob)
 83:       const a = document.createElement('a')
 84:       a.href = url
 85:       a.download = 'event.ics'
 86:       a.click()
 87:       URL.revokeObjectURL(url)
 88:     } catch { toast.error('Failed to download ICS') }
 89:   }
 90: 
 91:   const attachCoverLetter = async () => {
 92:     if (!attachId) { toast.error('Select a cover letter'); return }
 93:     setAttaching(true)
 94:     try {
 95:       const resp = await fetch(`/api/applications/${params.id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ coverLetterId: attachId }) })
 96:       if (!resp.ok) throw new Error('Failed to attach')
 97:       toast.success('Cover letter attached')
 98:     } catch (e) {
 99:       toast.error('Failed to attach cover letter')
100:     } finally {
101:       setAttaching(false)
102:     }
103:   }
104: 
105:   const exportPack = async () => {
106:     try {
107:       const resp = await fetch(`/api/applications/${params.id}/export/pack`)
108:       if (!resp.ok) throw new Error('Failed to export pack')
109:       const blob = await resp.blob()
110:       const url = URL.createObjectURL(blob)
111:       const a = document.createElement('a')
112:       a.href = url
113:       a.download = `${data.application.companyName}_${data.application.jobTitle}_ApplicationPack.pdf`
114:       document.body.appendChild(a)
115:       a.click()
116:       document.body.removeChild(a)
117:       URL.revokeObjectURL(url)
118:     } catch {
119:       toast.error('Export failed')
120:     }
121:   }
122: 
123:   const attachLatest = async () => {
124:     try {
125:       const resp = await fetch(`/api/applications/${params.id}/attach`, { method: 'POST' })
126:       if (!resp.ok) throw new Error('Attach failed')
127:       toast.success('Attached latest tailored resume and recent cover letter')
128:     } catch {
129:       toast.error('Failed to attach latest assets')
130:     }
131:   }
132: 
133:   const [followEmail, setFollowEmail] = useState<{ subject: string; body: string } | null>(null)
134:   const [followDates, setFollowDates] = useState<Date[] | null>(null)
135:   const [savingFollows, setSavingFollows] = useState(false)
136:   const [insights, setInsights] = useState<{ talkingPoints: string[]; keyValues: string[]; cultureFit: string[] } | null>(null)
137:   const [insightsLoading, setInsightsLoading] = useState(false)
138:   const [fullResearch, setFullResearch] = useState<any | null>(null)
139:   const [fullResearchLoading, setFullResearchLoading] = useState(false)
140:   const [score, setScore] = useState<{ score: number; reasons: string[]; riskFactors: string[]; improvements: string[] } | null>(null)
141:   const [scoring, setScoring] = useState(false)
142:   const suggestFollowUp = async () => {
143:     try {
144:       const resp = await fetch(`/api/applications/${params.id}/followup/suggest`)
145:       if (!resp.ok) throw new Error('Failed to suggest follow-up')
146:       const j = await resp.json()
147:       setFollowEmail(j.email)
148:       setFollowDates((j.dates || []).map((d: string) => new Date(d)))
149:     } catch {
150:       toast.error('Failed to suggest follow-up')
151:     }
152:   }
153: 
154:   const saveFollowUp = async () => {
155:     if (!followEmail) { toast.error('Generate a follow-up first'); return }
156:     setSavingFollows(true)
157:     try {
158:       const resp = await fetch(`/api/applications/${params.id}/followup/save`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: followEmail, dates: (followDates || []).map(d => d.toISOString()) }) })
159:       if (!resp.ok) throw new Error('Save failed')
160:       toast.success('Follow-up saved')
161:     } catch { toast.error('Failed to save follow-up') } finally { setSavingFollows(false) }
162:   }
163: 
164:   const copyFollowUp = async () => {
165:     if (!followEmail) return
166:     try {
167:       await navigator.clipboard.writeText(`Subject: ${followEmail.subject}\n\n${followEmail.body}`)
168:       toast.success('Copied to clipboard')
169:     } catch { toast.error('Copy failed') }
170:   }
171: 
172:   const loadCompanyInsights = async () => {
173:     if (!data?.application) return
174:     setInsightsLoading(true)
175:     try {
176:       // Fetch company research first if needed
177:       let companyData = data?.application?.companyResearch ? data.application.companyResearch : null
178:       if (!companyData) {
179:         // Try to scrape minimal data (best-effort)
180:         const res = await fetch('/api/company/research', {
181:           method: 'POST', headers: { 'Content-Type': 'application/json' },
182:           body: JSON.stringify({ companyName: data.application.companyName })
183:         })
184:         if (res.ok) {
185:           const j = await res.json()
186:           companyData = j.companyData
187:         }
188:       }
189:       const resp = await fetch('/api/company/insights', {
190:         method: 'POST', headers: { 'Content-Type': 'application/json' },
191:         body: JSON.stringify({ jobTitle: data.application.jobTitle, companyData: companyData || {} })
192:       })
193:       if (!resp.ok) throw new Error('Failed to generate insights')
194:       const j = await resp.json()
195:       setInsights(j.insights)
196:     } catch {
197:       toast.error('Failed to load company insights')
198:     } finally {
199:       setInsightsLoading(false)
200:     }
201:   }
202: 
203:   const runFullCompanyResearch = async () => {
204:     if (!data?.application) return
205:     setFullResearchLoading(true)
206:     try {
207:       const resp = await fetch('/api/company/orchestrate', {
208:         method: 'POST',
209:         headers: { 'Content-Type': 'application/json' },
210:         body: JSON.stringify({
211:           companyName: data.application.companyName,
212:           jobPostingUrl: data.application.jobUrl,
213:           companyWebsite: data.resume?.original?.fileUrl ? undefined : undefined,
214:           linkedinCompanyUrl: undefined,
215:           roleHints: ["Recruiter","Talent Acquisition","Engineering Manager","Head of People"],
216:           locationHint: undefined,
217:           jobTitle: data.application.jobTitle
218:         })
219:       })
220:       if (!resp.ok) throw new Error('Failed to orchestrate research')
221:       const j = await resp.json()
222:       setFullResearch(j.result || j.raw || null)
223:     } catch (e) {
224:       toast.error('Failed to run full company research')
225:     } finally {
226:       setFullResearchLoading(false)
227:     }
228:   }
229: 
230:   const runScore = async () => {
231:     setScoring(true)
232:     try {
233:       const resp = await fetch(`/api/applications/${params.id}/score`)
234:       if (!resp.ok) throw new Error('Score failed')
235:       const j = await resp.json()
236:       setScore(j.score)
237:     } catch {
238:       toast.error('Failed to score application')
239:     } finally {
240:       setScoring(false)
241:     }
242:   }
243: 
244:   if (loading) return <div className="p-6 text-sm text-gray-600">Loading...</div>
245:   if (!data?.success) return <div className="p-6 text-sm text-red-600">Failed to load application.</div>
246: 
247:   const { application, coverLetter, resume } = data
248:   return (
249:     <div className="container mx-auto p-4 space-y-6">
250:       <Card>
251:         <CardHeader>
252:           <CardTitle>{application.jobTitle} @ {application.companyName}</CardTitle>
253:           <CardDescription>Application details and artifacts</CardDescription>
254:         </CardHeader>
255:         <CardContent className="space-y-4">
256:           <div>
257:             <Label>Job Description</Label>
258:             <div className="border rounded p-2 text-sm bg-card" dangerouslySetInnerHTML={{ __html: highlightKeywords(application.jobDescription || '', (application.analysis?.keyRequirements || []).concat(application.analysis?.preferredSkills || [])) }} />
259:           </div>
260: 
261:           <div>
262:             <Label>Job Analysis</Label>
263:             <Textarea readOnly rows={8} value={JSON.stringify(application.analysis || {}, null, 2)} />
264:           </div>
265:         </CardContent>
266:       </Card>
267: 
268:       <Card>
269:         <CardHeader>
270:           <CardTitle>Cover Letter</CardTitle>
271:           <CardDescription>Attach a saved cover letter or preview the current attachment.</CardDescription>
272:         </CardHeader>
273:         <CardContent className="space-y-3">
274:           {coverLetter ? (
275:             <div className="space-y-2">
276:               <div className="text-sm text-gray-700">Attached: {coverLetter.jobTitle} @ {coverLetter.companyName}</div>
277:               <Button onClick={() => downloadResumeVersion(coverLetter.content, `${application.companyName}_${application.jobTitle}_CoverLetter`)}><Download className="h-4 w-4 mr-1" /> Download PDF</Button>
278:             </div>
279:           ) : (
280:             <div className="text-sm text-gray-600">No cover letter attached.</div>
281:           )}
282: 
283:           <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
284:             <Select value={attachId} onValueChange={setAttachId}>
285:               <SelectTrigger><SelectValue placeholder="Select saved cover letter" /></SelectTrigger>
286:               <SelectContent>
287:                 {/* This could be populated via client-side fetch to /api/cover-letter/list; keeping simple here */}
288:                 <SelectItem value="">None</SelectItem>
289:               </SelectContent>
290:             </Select>
291:             <Button onClick={attachCoverLetter} disabled={attaching}>{attaching ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Attaching...</>) : 'Attach'}</Button>
292:             <a className="inline-flex items-center justify-center border rounded px-3 py-2" href="/cover-letter">Create New</a>
293:           </div>
294:         </CardContent>
295:       </Card>
296: 
297:       {/* Follow-up Email */}
298:       <Card>
299:         <CardHeader>
300:           <div className="flex items-center justify-between">
301:             <div>
302:               <CardTitle>Follow-up Email</CardTitle>
303:               <CardDescription>Generate and save a tailored follow-up with suggested dates</CardDescription>
304:             </div>
305:             <div className="flex gap-2">
306:               <Button variant="outline" onClick={suggestFollowUp}>Suggest Follow-up</Button>
307:               <Button variant="outline" onClick={copyFollowUp} disabled={!followEmail}>Copy</Button>
308:               <Button onClick={saveFollowUp} disabled={!followEmail || savingFollows}>{savingFollows ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Saving...</>) : 'Save'}</Button>
309:             </div>
310:           </div>
311:         </CardHeader>
312:         <CardContent className="space-y-3">
313:           {followEmail ? (
314:             <div className="space-y-2 text-sm">
315:               <div><span className="font-medium">Subject:</span> {followEmail.subject}</div>
316:               <pre className="whitespace-pre-wrap border rounded p-2 bg-card">{followEmail.body}</pre>
317:               {followDates && followDates.length > 0 && (
318:                 <div className="text-xs text-gray-600">Suggested dates: {followDates.map(d => d.toLocaleDateString()).join(', ')}</div>
319:               )}
320:             </div>
321:           ) : (
322:             <div className="text-sm text-gray-600">No follow-up generated yet. Click Suggest Follow-up.</div>
323:           )}
324:         </CardContent>
325:       </Card>
326: 
327:       {/* Company Insights */}
328:       <Card>
329:         <CardHeader>
330:           <div className="flex items-center justify-between">
331:             <div>
332:               <CardTitle>Company Insights</CardTitle>
333:               <CardDescription>Comprehensive breakdown to evaluate fit and tailor messaging</CardDescription>
334:             </div>
335:             <Button variant="outline" onClick={loadCompanyInsights} disabled={insightsLoading}>
336:               {insightsLoading ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Loading...</>) : 'Generate Insights'}
337:             </Button>
338:           </div>
339:         </CardHeader>
340:         <CardContent className="space-y-6">
341:           {insights ? (
342:             <div className="space-y-6">
343:               <div>
344:                 <div className="text-sm font-medium text-foreground mb-2">Key Values & Culture Signals</div>
345:                 {insights.keyValues && insights.keyValues.length > 0 ? (
346:                   <ul className="space-y-1">
347:                     {insights.keyValues.map((v, i) => (
348:                       <li key={i} className="text-sm text-gray-700 flex gap-2"><span className="text-blue-500">•</span>{v}</li>
349:                     ))}
350:                   </ul>
351:                 ) : (
352:                   <div className="text-sm text-gray-500">No culture signals found.</div>
353:                 )}
354:               </div>
355: 
356:               <div>
357:                 <div className="text-sm font-medium text-foreground mb-2">Talking Points (Tailor your pitch)</div>
358:                 {insights.talkingPoints && insights.talkingPoints.length > 0 ? (
359:                   <ol className="space-y-2 list-decimal pl-5">
360:                     {insights.talkingPoints.map((p, i) => (
361:                       <li key={i} className="text-sm text-gray-800">{p}</li>
362:                     ))}
363:                   </ol>
364:                 ) : (
365:                   <div className="text-sm text-gray-500">No talking points generated.</div>
366:                 )}
367:               </div>
368: 
369:               <div>
370:                 <div className="text-sm font-medium text-foreground mb-2">Culture Fit Angles</div>
371:                 {insights.cultureFit && insights.cultureFit.length > 0 ? (
372:                   <ul className="space-y-1">
373:                     {insights.cultureFit.map((c, i) => (
374:                       <li key={i} className="text-sm text-gray-700 flex gap-2"><span className="text-green-500">•</span>{c}</li>
375:                     ))}
376:                   </ul>
377:                 ) : (
378:                   <div className="text-sm text-gray-500">No culture fit suggestions.</div>
379:                 )}
380:               </div>
381:             </div>
382:           ) : (
383:             <div className="text-sm text-gray-600">Click Generate Insights to build a full company breakdown.</div>
384:           )}
385:         </CardContent>
386:       </Card>
387: 
388:       {/* Full Company Research (Assistant Orchestrated) */}
389:       <Card>
390:         <CardHeader>
391:           <div className="flex items-center justify-between">
392:             <div>
393:               <CardTitle>Full Company Research</CardTitle>
394:               <CardDescription>Profile, culture, reviews, news, contacts, and role relevance</CardDescription>
395:             </div>
396:             <Button onClick={runFullCompanyResearch} disabled={fullResearchLoading}>
397:               {fullResearchLoading ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Researching...</>) : 'Run Research'}
398:             </Button>
399:           </div>
400:         </CardHeader>
401:         <CardContent className="space-y-6">
402:           {!fullResearch && <div className="text-sm text-gray-600">Run research to fetch a complete breakdown from multiple sources.</div>}
403:           {fullResearch && (
404:             <div className="space-y-6">
405:               {/* Profile */}
406:               {fullResearch.profile && (
407:                 <div>
408:                   <div className="text-sm font-medium text-foreground mb-2">Company Profile</div>
409:                   <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
410:                     <div><span className="text-gray-500">Name:</span> {fullResearch.profile.companyName || 'Unknown'}</div>
411:                     <div><span className="text-gray-500">Website:</span> {fullResearch.profile.website || 'Unknown'}</div>
412:                     <div><span className="text-gray-500">Industry:</span> {fullResearch.profile.industry || 'Unknown'}</div>
413:                     <div><span className="text-gray-500">Size:</span> {fullResearch.profile.size || 'Unknown'}</div>
414:                     <div className="md:col-span-2"><span className="text-gray-500">Description:</span> {fullResearch.profile.description || 'Unknown'}</div>
415:                   </div>
416:                 </div>
417:               )}
418: 
419:               {/* Culture */}
420:               {fullResearch.culture && (
421:                 <div>
422:                   <div className="text-sm font-medium text-foreground mb-2">Culture & Benefits</div>
423:                   <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
424:                     <div>
425:                       <div className="text-xs text-gray-500 mb-1">Values</div>
426:                       <ul className="space-y-1">
427:                         {(fullResearch.culture.values || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}
428:                       </ul>
429:                     </div>
430:                     <div>
431:                       <div className="text-xs text-gray-500 mb-1">Benefits</div>
432:                       <ul className="space-y-1">
433:                         {(fullResearch.culture.benefits || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}
434:                       </ul>
435:                     </div>
436:                     <div>
437:                       <div className="text-xs text-gray-500 mb-1">Signals</div>
438:                       <ul className="space-y-1">
439:                         {(fullResearch.culture.signals || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}
440:                       </ul>
441:                     </div>
442:                   </div>
443:                 </div>
444:               )}
445: 
446:               {/* Reviews */}
447:               {fullResearch.reviewsSummary && (
448:                 <div>
449:                   <div className="text-sm font-medium text-foreground mb-2">Reviews Summary</div>
450:                   <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
451:                     <div><span className="text-gray-500">Glassdoor Rating:</span> {fullResearch.reviewsSummary.glassdoorRating ?? 'Unknown'}</div>
452:                     <div><span className="text-gray-500">Reviews:</span> {fullResearch.reviewsSummary.glassdoorReviews ?? 'Unknown'}</div>
453:                     <div className="md:col-span-3 grid grid-cols-1 md:grid-cols-2 gap-3">
454:                       <div>
455:                         <div className="text-xs text-gray-500 mb-1">Pros</div>
456:                         <ul className="space-y-1">{(fullResearch.reviewsSummary.pros || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
457:                       </div>
458:                       <div>
459:                         <div className="text-xs text-gray-500 mb-1">Cons</div>
460:                         <ul className="space-y-1">{(fullResearch.reviewsSummary.cons || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
461:                       </div>
462:                     </div>
463:                   </div>
464:                 </div>
465:               )}
466: 
467:               {/* News */}
468:               {fullResearch.news && fullResearch.news.items && (
469:                 <div>
470:                   <div className="text-sm font-medium text-foreground mb-2">Recent News</div>
471:                   <ul className="space-y-2">
472:                     {fullResearch.news.items.map((n: any, i: number) => (
473:                       <li key={i} className="text-sm">
474:                         <a className="text-blue-600 hover:underline" href={n.url} target="_blank" rel="noopener noreferrer">{n.title}</a>
475:                         <div className="text-xs text-gray-500">{n.publishedAt}</div>
476:                         <div>{n.summary}</div>
477:                       </li>
478:                     ))}
479:                   </ul>
480:                 </div>
481:               )}
482: 
483:               {/* Contacts */}
484:               {fullResearch.hiringContacts && (
485:                 <div>
486:                   <div className="text-sm font-medium text-foreground mb-2">Hiring Contacts</div>
487:                   <ul className="space-y-1">
488:                     {fullResearch.hiringContacts.map((p: any, i: number) => (
489:                       <li key={i} className="text-sm">
490:                         <span className="font-medium">{p.name}</span> — {p.title} {p.profileUrl && (<a className="text-blue-600 hover:underline ml-2" href={p.profileUrl} target="_blank" rel="noopener noreferrer">Profile</a>)}
491:                       </li>
492:                     ))}
493:                   </ul>
494:                 </div>
495:               )}
496: 
497:               {fullResearch.contactInfo && (
498:                 <div>
499:                   <div className="text-sm font-medium text-foreground mb-2">Contact Info</div>
500:                   <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
501:                     <div>
502:                       <div className="text-xs text-gray-500 mb-1">Emails</div>
503:                       <ul className="space-y-1">{(fullResearch.contactInfo.emails || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
504:                     </div>
505:                     <div>
506:                       <div className="text-xs text-gray-500 mb-1">Phones</div>
507:                       <ul className="space-y-1">{(fullResearch.contactInfo.phones || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
508:                     </div>
509:                     <div>
510:                       <div className="text-xs text-gray-500 mb-1">Addresses</div>
511:                       <ul className="space-y-1">{(fullResearch.contactInfo.addresses || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
512:                     </div>
513:                   </div>
514:                 </div>
515:               )}
516: 
517:               {/* Role Relevance */}
518:               {fullResearch.roleRelevance && (
519:                 <div>
520:                   <div className="text-sm font-medium text-foreground mb-2">Role Relevance</div>
521:                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
522:                     <div>
523:                       <div className="text-xs text-gray-500 mb-1">Why This Company</div>
524:                       <ul className="space-y-1">{(fullResearch.roleRelevance.whyThisCompany || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
525:                     </div>
526:                     <div>
527:                       <div className="text-xs text-gray-500 mb-1">Talking Points</div>
528:                       <ul className="space-y-1">{(fullResearch.roleRelevance.talkingPoints || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
529:                     </div>
530:                     <div>
531:                       <div className="text-xs text-gray-500 mb-1">Risks</div>
532:                       <ul className="space-y-1">{(fullResearch.roleRelevance.riskNotes || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
533:                     </div>
534:                     <div>
535:                       <div className="text-xs text-gray-500 mb-1">Opportunities</div>
536:                       <ul className="space-y-1">{(fullResearch.roleRelevance.opportunities || []).map((x: string, i: number) => (<li key={i} className="text-sm">{x}</li>))}</ul>
537:                     </div>
538:                   </div>
539:                 </div>
540:               )}
541:             </div>
542:           )}
543:         </CardContent>
544:       </Card>
545: 
546:       <Card>
547:         <CardHeader>
548:           <CardTitle>Resume</CardTitle>
549:           <CardDescription>Original upload and tailored versions.</CardDescription>
550:         </CardHeader>
551:         <CardContent className="space-y-4">
552:           <div className="flex items-center justify-end">
553:             <Button variant="outline" onClick={runScore} disabled={scoring}>{scoring ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Scoring...</>) : 'Score Success Probability'}</Button>
554:           </div>
555:           <div>
556:             <div className="flex items-center justify-between">
557:               <Label>Original (extracted)</Label>
558:               {resume?.original?.fileUrl && (
559:                 <a href={resume.original.fileUrl} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-600 hover:underline">Download original upload</a>
560:               )}
561:             </div>
562:             <div className="border rounded p-2 text-sm bg-card" dangerouslySetInnerHTML={{ __html: highlightKeywords(resume?.original?.extractedText || '', (application.analysis?.keyRequirements || []).concat(application.analysis?.preferredSkills || [])) }} />
563:           </div>
564:           <div className="space-y-2">
565:             <Label>Tailored Versions</Label>
566:             {(!resume?.versions || resume.versions.length === 0) ? (
567:               <div className="text-sm text-gray-600">No tailored versions yet.</div>
568:             ) : (
569:               <div className="space-y-3">
570:                 {resume.versions.map((v: any) => (
571:                   <div key={v._id} className="border rounded p-3">
572:                     <div className="text-sm text-gray-700 mb-2">{v.jobTitle} @ {v.companyName} — Match: {v.matchScore ?? 0}%</div>
573:                     <div className="flex gap-2">
574:                       <Button variant="outline" onClick={() => downloadResumeVersion(v.customizedText, `${application.companyName}_${application.jobTitle}_Resume`)}><Download className="h-4 w-4 mr-1" /> PDF</Button>
575:                       <details className="ml-2">
576:                         <summary className="cursor-pointer text-xs text-gray-600">Preview Changes</summary>
577:                         <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
578:                           <div className="text-xs">
579:                             <div className="text-gray-500 mb-1">Original</div>
580:                             <div className="border rounded p-2 bg-card" dangerouslySetInnerHTML={{ __html: highlightKeywords(resume?.original?.extractedText || '', (application.analysis?.keyRequirements || []).concat(application.analysis?.preferredSkills || [])) }} />
581:                           </div>
582:                           <div className="text-xs">
583:                             <div className="text-gray-500 mb-1">Tailored</div>
584:                             <div className="border rounded p-2 bg-card" dangerouslySetInnerHTML={{ __html: highlightKeywords(v.customizedText || '', (application.analysis?.keyRequirements || []).concat(application.analysis?.preferredSkills || [])) }} />
585:                           </div>
586:                         </div>
587:                       </details>
588:                     </div>
589:                   </div>
590:                 ))}
591:               </div>
592:             )}
593:           </div>
594:         </CardContent>
595:       </Card>
596: 
597:       {score && (
598:         <Card>
599:           <CardHeader>
600:             <CardTitle>Success Probability</CardTitle>
601:             <CardDescription>AI-assessed score with recommendations</CardDescription>
602:           </CardHeader>
603:           <CardContent className="space-y-4">
604:             <div className="text-2xl font-bold">{score.score}/100</div>
605:             <div>
606:               <div className="text-sm font-medium mb-1">Reasons</div>
607:               <ul className="list-disc ml-5 text-sm">{score.reasons.map((r,i)=>(<li key={i}>{r}</li>))}</ul>
608:             </div>
609:             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
610:               <div>
611:                 <div className="text-sm font-medium mb-1">Risks</div>
612:                 <ul className="list-disc ml-5 text-sm">{score.riskFactors.map((r,i)=>(<li key={i}>{r}</li>))}</ul>
613:               </div>
614:               <div>
615:                 <div className="text-sm font-medium mb-1">Improvements</div>
616:                 <ul className="list-disc ml-5 text-sm">{score.improvements.map((r,i)=>(<li key={i}>{r}</li>))}</ul>
617:               </div>
618:             </div>
619:           </CardContent>
620:         </Card>
621:       )}
622: 
623:       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
624:         <Card>
625:           <CardHeader>
626:             <CardTitle>Application Pack</CardTitle>
627:             <CardDescription>Export tailored resume + cover letter + talking points</CardDescription>
628:           </CardHeader>
629:           <CardContent>
630:           <div className="flex flex-col sm:flex-row gap-2">
631:             <Button onClick={exportPack} className="flex-1"><Download className="h-4 w-4 mr-1" /> Export Application Pack</Button>
632:             <Button variant="outline" onClick={attachLatest} className="flex-1">Attach Latest Resume + Cover Letter</Button>
633:             <Button variant="outline" onClick={addCalendarEvent} className="flex-1">Add to Google Calendar</Button>
634:             <Button variant="outline" onClick={downloadICS} className="flex-1">Download ICS</Button>
635:           </div>
636:           </CardContent>
637:         </Card>
638: 
639:         <Card>
640:           <CardHeader>
641:             <CardTitle>Follow-up</CardTitle>
642:             <CardDescription>Suggest dates and generate email</CardDescription>
643:           </CardHeader>
644:           <CardContent className="space-y-3">
645:             <Button variant="outline" onClick={suggestFollowUp}>Suggest Dates & Email</Button>
646:             {followDates && (
647:               <div className="text-sm text-gray-700">Suggested dates: {followDates.map(d=>d.toLocaleDateString()).join(', ')}</div>
648:             )}
649:             {followDates && followDates.length > 0 && (
650:               <Button
651:                 variant="default"
652:                 disabled={savingFollows}
653:                 onClick={async ()=>{
654:                   try {
655:                     setSavingFollows(true)
656:                     const resp = await fetch(`/api/applications/${params.id}/followup/save`, {
657:                       method: 'POST',
658:                       headers: { 'Content-Type': 'application/json' },
659:                       body: JSON.stringify({ dates: followDates.map(d=>d.toISOString()) })
660:                     })
661:                     if (!resp.ok) throw new Error('save failed')
662:                     toast.success('Follow-up dates saved')
663:                   } catch { toast.error('Failed to save follow-ups') }
664:                   finally { setSavingFollows(false) }
665:                 }}
666:               >
667:                 {savingFollows ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin"/> Saving...</>) : 'Save Follow-ups'}
668:               </Button>
669:             )}
670:             {followEmail && (
671:               <div className="space-y-2">
672:                 <div className="text-sm font-medium">Subject</div>
673:                 <div className="text-sm text-gray-800">{followEmail.subject}</div>
674:                 <div className="text-sm font-medium">Body</div>
675:                 <pre className="whitespace-pre-wrap text-sm bg-gray-50 p-3 rounded">{followEmail.body}</pre>
676:               </div>
677:             )}
678:           </CardContent>
679:         </Card>
680:       </div>
681:     </div>
682:   )
683: }
</file>

<file path="src/app/auth/signin/page.tsx">
  1: 'use client'
  2: 
  3: export const dynamic = 'force-dynamic'
  4: 
  5: import { useState, useEffect } from 'react'
  6: import { signIn, getSession, useSession } from 'next-auth/react'
  7: import { useRouter, useSearchParams } from 'next/navigation'
  8: import { Suspense } from 'react'
  9: import Link from 'next/link'
 10: import { Button } from '@/components/ui/button'
 11: import { Input } from '@/components/ui/input'
 12: import { Label } from '@/components/ui/label'
 13: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
 14: import { Alert, AlertDescription } from '@/components/ui/alert'
 15: import { Separator } from '@/components/ui/separator'
 16: import {
 17:   Mail,
 18:   Lock,
 19:   Eye,
 20:   EyeOff,
 21:   Loader2,
 22:   Sparkles,
 23:   AlertCircle,
 24:   CheckCircle
 25: } from 'lucide-react'
 26: import toast from 'react-hot-toast'
 27: 
 28: function SignInInner() {
 29:   const [email, setEmail] = useState('')
 30:   const [password, setPassword] = useState('')
 31:   const [showPassword, setShowPassword] = useState(false)
 32:   const [isLoading, setIsLoading] = useState(false)
 33:   const [error, setError] = useState('')
 34:   const [success, setSuccess] = useState('')
 35: 
 36:   const { data: session, status } = useSession()
 37:   const router = useRouter()
 38:   const searchParams = useSearchParams()
 39:   // Sanitize callbackUrl: disallow nested /auth redirects and enforce same-origin path
 40:   const rawCallback = searchParams.get('callbackUrl') || '/dashboard'
 41:   let callbackUrl = '/dashboard'
 42:   try {
 43:     // Accept only pathnames starting with '/' and not /auth
 44:     const decoded = decodeURIComponent(rawCallback)
 45:     if (decoded.startsWith('/') && !decoded.startsWith('/auth')) {
 46:       callbackUrl = decoded
 47:     }
 48:   } catch {
 49:     callbackUrl = '/dashboard'
 50:   }
 51: 
 52:   // Prefill email from query
 53:   useEffect(() => {
 54:     const prefill = searchParams.get('email')
 55:     if (prefill) setEmail(prefill)
 56:   }, [searchParams])
 57: 
 58:   // Redirect if already authenticated
 59:   useEffect(() => {
 60:     if (session) {
 61:       // Check if user needs onboarding
 62:       const user = session.user as any
 63:       if (user?.profile?.onboardingCompleted === false) {
 64:         router.push('/onboarding/quiz')
 65:       } else {
 66:         router.push(callbackUrl)
 67:       }
 68:     }
 69:   }, [session, router, callbackUrl])
 70: 
 71:   // Show success message for email verification
 72:   useEffect(() => {
 73:     const verified = searchParams.get('verified')
 74:     if (verified === 'true') {
 75:       setSuccess('Email verified successfully! Please sign in.')
 76:     }
 77: 
 78:     const registered = searchParams.get('registered')
 79:     if (registered === 'true') {
 80:       setSuccess('Account created successfully! Please sign in.')
 81:     }
 82:   }, [searchParams])
 83: 
 84:   const handleSubmit = async (e: React.FormEvent) => {
 85:     e.preventDefault()
 86:     setIsLoading(true)
 87:     setError('')
 88: 
 89:     try {
 90:       const result = await signIn('credentials', {
 91:         email,
 92:         password,
 93:         redirect: false,
 94:       })
 95: 
 96:       if (result?.error) {
 97:         setError('Invalid email or password')
 98:         toast.error('Sign in failed')
 99:       } else if (result?.ok) {
100:         setSuccess('Sign in successful! Redirecting...')
101:         toast.success('Welcome back!')
102:         router.push(callbackUrl)
103:       }
104:     } catch (error) {
105:       setError('An unexpected error occurred')
106:       toast.error('Something went wrong')
107:     } finally {
108:       setIsLoading(false)
109:     }
110:   }
111: 
112:   const handleGoogleSignIn = async () => {
113:     setIsLoading(true)
114:     try {
115:       await signIn('google', { callbackUrl })
116:     } catch (error) {
117:       setError('Google sign in failed')
118:       setIsLoading(false)
119:     }
120:   }
121: 
122:   const handleDemoSignIn = async () => {
123:     setIsLoading(true)
124:     setEmail('demo@careerlever.ai')
125:     setPassword('demo123')
126: 
127:     try {
128:       const result = await signIn('credentials', {
129:         email: 'demo@careerlever.ai',
130:         password: 'demo123',
131:         redirect: false,
132:       })
133: 
134:       if (result?.ok) {
135:         toast.success('Demo account signed in!')
136:         router.push(callbackUrl)
137:       } else {
138:         setError('Demo sign in failed')
139:       }
140:     } catch (error) {
141:       setError('Demo sign in failed')
142:     } finally {
143:       setIsLoading(false)
144:     }
145:   }
146: 
147:   return (
148:     <div className="min-h-screen flex items-center justify-center bg-black p-4">
149:       <div className="w-full max-w-md space-y-6">
150:         {/* Header */}
151:         <div className="text-center space-y-2">
152:           <div className="inline-flex items-center justify-center w-16 h-16 bg-purple-600 rounded-full mb-4">
153:             <Sparkles className="w-8 h-8 text-white" />
154:           </div>
155:           <h1 className="text-3xl font-bold text-white">Welcome back</h1>
156:           <p className="text-white/70">Sign in to your Career Lever AI account</p>
157:         </div>
158: 
159:         {/* Success Alert */}
160:         {success && (
161:           <Alert>
162:             <CheckCircle className="h-4 w-4" />
163:             <AlertDescription>{success}</AlertDescription>
164:           </Alert>
165:         )}
166: 
167:         {/* Error Alert */}
168:         {error && (
169:           <Alert variant="destructive">
170:             <AlertCircle className="h-4 w-4" />
171:             <AlertDescription>{error}</AlertDescription>
172:           </Alert>
173:         )}
174: 
175:         {/* Sign In Form */}
176:         <Card className="bg-card/5 border-white/10 backdrop-blur-xl">
177:           <CardHeader className="space-y-1">
178:             <CardTitle className="text-2xl text-center text-white">Sign In</CardTitle>
179:             <CardDescription className="text-center text-white/60">
180:               Enter your credentials to access your account
181:             </CardDescription>
182:           </CardHeader>
183:           <CardContent className="space-y-4">
184:             {/* Google Sign In */}
185:             <Button
186:               type="button"
187:               variant="outline"
188:               className="w-full"
189:               onClick={handleGoogleSignIn}
190:               disabled={isLoading}
191:             >
192:               <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
193:                 <path
194:                   fill="currentColor"
195:                   d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
196:                 />
197:                 <path
198:                   fill="currentColor"
199:                   d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
200:                 />
201:                 <path
202:                   fill="currentColor"
203:                   d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
204:                 />
205:                 <path
206:                   fill="currentColor"
207:                   d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
208:                 />
209:               </svg>
210:               Continue with Google
211:             </Button>
212: 
213:             <div className="relative">
214:               <div className="absolute inset-0 flex items-center">
215:                 <Separator />
216:               </div>
217:               <div className="relative flex justify-center text-xs uppercase">
218:                 <span className="bg-background px-2 text-muted-foreground">Or continue with email</span>
219:               </div>
220:             </div>
221: 
222:             {/* Demo Account */}
223:             <Button
224:               type="button"
225:               variant="outline"
226:               className="w-full"
227:               onClick={handleDemoSignIn}
228:               disabled={isLoading}
229:             >
230:               <Sparkles className="w-4 h-4 mr-2" />
231:               Try Demo Account
232:             </Button>
233: 
234:             <div className="relative">
235:               <div className="absolute inset-0 flex items-center">
236:                 <Separator />
237:               </div>
238:               <div className="relative flex justify-center text-xs uppercase">
239:                 <span className="bg-background px-2 text-muted-foreground">Or sign in manually</span>
240:               </div>
241:             </div>
242: 
243:             <form onSubmit={handleSubmit} className="space-y-4">
244:               <div className="space-y-2">
245:                 <Label htmlFor="email" className="text-white">Email</Label>
246:                 <div className="relative">
247:                   <Mail className="absolute left-3 top-3 h-4 w-4 text-white/50" />
248:                   <Input
249:                     id="email"
250:                     type="email"
251:                     placeholder="Enter your email"
252:                     value={email}
253:                     onChange={(e) => setEmail(e.target.value)}
254:                     className="pl-10 bg-card/10 border-white/20 text-white placeholder:text-white/40"
255:                     required
256:                     disabled={isLoading}
257:                     autoComplete="email"
258:                   />
259:                 </div>
260:               </div>
261: 
262:               <div className="space-y-2">
263:                 <Label htmlFor="password" className="text-white">Password</Label>
264:                 <div className="relative">
265:                   <Lock className="absolute left-3 top-3 h-4 w-4 text-white/50" />
266:                   <Input
267:                     id="password"
268:                     type={showPassword ? 'text' : 'password'}
269:                     placeholder="Enter your password"
270:                     value={password}
271:                     onChange={(e) => setPassword(e.target.value)}
272:                     className="pl-10 pr-12 bg-card/10 border-white/20 text-white placeholder:text-white/40"
273:                     required
274:                     disabled={isLoading}
275:                     autoComplete="current-password"
276:                   />
277:                   <button
278:                     type="button"
279:                     onClick={() => setShowPassword(!showPassword)}
280:                     className="absolute right-3 top-1/2 -translate-y-1/2 text-white/70 hover:text-white z-10"
281:                     disabled={isLoading}
282:                     tabIndex={-1}
283:                   >
284:                     {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
285:                   </button>
286:                 </div>
287:               </div>
288: 
289:               <Button type="submit" className="w-full" disabled={isLoading}>
290:                 {isLoading ? (
291:                   <>
292:                     <Loader2 className="mr-2 h-4 w-4 animate-spin" />
293:                     Signing in...
294:                   </>
295:                 ) : (
296:                   'Sign In'
297:                 )}
298:               </Button>
299:             </form>
300: 
301:             {/* Forgot Password */}
302:             <div className="text-center">
303:               <Link
304:                 href="/auth/forgot-password"
305:                 className="text-sm text-purple-400 hover:text-purple-300"
306:               >
307:                 Forgot your password?
308:               </Link>
309:             </div>
310:           </CardContent>
311:         </Card>
312: 
313:         {/* Sign Up Link */}
314:         <div className="text-center">
315:           <p className="text-sm text-white/70">
316:             Don't have an account?{' '}
317:             <Link href="/auth/signup" className="text-purple-400 hover:text-purple-300 font-medium">
318:               Sign up for free
319:             </Link>
320:           </p>
321:         </div>
322: 
323:         {/* Footer */}
324:         <div className="text-center text-xs text-white/50">
325:           By signing in, you agree to our{' '}
326:           <Link href="/terms" className="text-purple-400 hover:text-purple-300">
327:             Terms of Service
328:           </Link>{' '}
329:           and{' '}
330:           <Link href="/privacy" className="text-purple-400 hover:text-purple-300">
331:             Privacy Policy
332:           </Link>
333:         </div>
334:       </div>
335:     </div>
336:   )
337: }
338: 
339: export default function SignInPage() {
340:   return (
341:     <Suspense>
342:       <SignInInner />
343:     </Suspense>
344:   )
345: }
</file>

<file path="src/app/career-finder/applications/page.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { ApplicationTracker, type Application } from '@/lib/application-tracker'
  5: import Link from 'next/link'
  6: 
  7: export default function ApplicationsPage() {
  8:   const [applications, setApplications] = useState<Application[]>([])
  9:   const [stats, setStats] = useState<ReturnType<typeof ApplicationTracker.getStats>>({
 10:     total: 0,
 11:     applied: 0,
 12:     interview: 0,
 13:     rejected: 0,
 14:     offer: 0,
 15:     accepted: 0,
 16:     responseRate: 0
 17:   })
 18: 
 19:   useEffect(() => {
 20:     loadApplications()
 21:   }, [])
 22: 
 23:   const loadApplications = () => {
 24:     const apps = ApplicationTracker.getAll()
 25:     setApplications(apps)
 26:     setStats(ApplicationTracker.getStats())
 27:   }
 28: 
 29:   const updateStatus = (id: string, status: Application['status']) => {
 30:     ApplicationTracker.updateStatus(id, status)
 31:     loadApplications()
 32:   }
 33: 
 34:   const getStatusColor = (status: Application['status']) => {
 35:     switch (status) {
 36:       case 'applied': return 'bg-blue-100 text-blue-800'
 37:       case 'interview': return 'bg-yellow-100 text-yellow-800'
 38:       case 'rejected': return 'bg-red-100 text-red-800'
 39:       case 'offer': return 'bg-green-100 text-green-800'
 40:       case 'accepted': return 'bg-purple-100 text-purple-800'
 41:       default: return 'bg-gray-100 text-gray-800'
 42:     }
 43:   }
 44: 
 45:   const formatDate = (dateString: string) => {
 46:     const date = new Date(dateString)
 47:     return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })
 48:   }
 49: 
 50:   return (
 51:     <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 p-6">
 52:       <div className="max-w-7xl mx-auto">
 53:         {/* Header */}
 54:         <div className="mb-8 animate-fade-in">
 55:           <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
 56:             Application Tracker
 57:           </h1>
 58:           <p className="text-gray-600">Track and manage your job applications with style ✨</p>
 59:         </div>
 60: 
 61:         {/* Stats */}
 62:         <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4 mb-8">
 63:           <div className="bg-card p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-gray-100">
 64:             <div className="text-2xl font-bold text-foreground">{stats.total}</div>
 65:             <div className="text-sm text-gray-600">Total</div>
 66:           </div>
 67:           <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-blue-200">
 68:             <div className="text-2xl font-bold text-blue-900">{stats.applied}</div>
 69:             <div className="text-sm text-blue-600">Applied</div>
 70:           </div>
 71:           <div className="bg-gradient-to-br from-yellow-50 to-yellow-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-yellow-200">
 72:             <div className="text-2xl font-bold text-yellow-900">{stats.interview}</div>
 73:             <div className="text-sm text-yellow-600">Interview</div>
 74:           </div>
 75:           <div className="bg-gradient-to-br from-red-50 to-red-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-red-200">
 76:             <div className="text-2xl font-bold text-red-900">{stats.rejected}</div>
 77:             <div className="text-sm text-red-600">Rejected</div>
 78:           </div>
 79:           <div className="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-green-200">
 80:             <div className="text-2xl font-bold text-green-900">{stats.offer}</div>
 81:             <div className="text-sm text-green-600">Offers</div>
 82:           </div>
 83:           <div className="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-purple-200">
 84:             <div className="text-2xl font-bold text-purple-900">{stats.accepted}</div>
 85:             <div className="text-sm text-purple-600">Accepted</div>
 86:           </div>
 87:           <div className="bg-gradient-to-br from-indigo-50 to-indigo-100 p-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border border-indigo-200">
 88:             <div className="text-2xl font-bold text-indigo-900">{stats.responseRate}%</div>
 89:             <div className="text-sm text-indigo-600">Response Rate</div>
 90:           </div>
 91:         </div>
 92: 
 93:         {/* Applications List */}
 94:         <div className="bg-card rounded-2xl shadow-xl overflow-hidden border border-gray-100">
 95:           <div className="px-6 py-5 bg-gradient-to-r from-blue-50 to-purple-50 border-b border-border flex justify-between items-center">
 96:             <h2 className="text-2xl font-bold text-foreground">Applications</h2>
 97:             <Link 
 98:               href="/career-finder/search"
 99:               className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-300 shadow-lg hover:shadow-xl font-semibold"
100:             >
101:               + Apply to More Jobs
102:             </Link>
103:           </div>
104: 
105:           {applications.length === 0 ? (
106:             <div className="p-12 text-center">
107:               <div className="text-6xl mb-4">📋</div>
108:               <h3 className="text-xl font-semibold text-foreground mb-2">No Applications Yet</h3>
109:               <p className="text-gray-600 mb-6">Start applying to jobs to track your progress</p>
110:               <Link 
111:                 href="/career-finder/resume"
112:                 className="inline-block px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
113:               >
114:                 Start Job Search
115:               </Link>
116:             </div>
117:           ) : (
118:             <div className="overflow-x-auto">
119:               <table className="w-full">
120:                 <thead className="bg-gray-50">
121:                   <tr>
122:                     <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
123:                       Job Title
124:                     </th>
125:                     <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
126:                       Company
127:                     </th>
128:                     <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
129:                       Applied Date
130:                     </th>
131:                     <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
132:                       Status
133:                     </th>
134:                     <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
135:                       Materials
136:                     </th>
137:                     <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
138:                       Actions
139:                     </th>
140:                   </tr>
141:                 </thead>
142:                 <tbody className="bg-card divide-y divide-gray-200">
143:                   {applications.map((app) => (
144:                     <tr key={app.id} className="hover:bg-gray-50">
145:                       <td className="px-6 py-4 whitespace-nowrap">
146:                         <div className="text-sm font-medium text-foreground">{app.jobTitle}</div>
147:                       </td>
148:                       <td className="px-6 py-4 whitespace-nowrap">
149:                         <div className="text-sm text-foreground">{app.company}</div>
150:                       </td>
151:                       <td className="px-6 py-4 whitespace-nowrap">
152:                         <div className="text-sm text-gray-500">{formatDate(app.appliedAt)}</div>
153:                       </td>
154:                       <td className="px-6 py-4 whitespace-nowrap">
155:                         <select
156:                           value={app.status}
157:                           onChange={(e) => updateStatus(app.id, e.target.value as Application['status'])}
158:                           className={`px-3 py-1 rounded-full text-xs font-semibold ${getStatusColor(app.status)} border-0 cursor-pointer`}
159:                         >
160:                           <option value="applied">Applied</option>
161:                           <option value="interview">Interview</option>
162:                           <option value="rejected">Rejected</option>
163:                           <option value="offer">Offer</option>
164:                           <option value="accepted">Accepted</option>
165:                         </select>
166:                       </td>
167:                       <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
168:                         Resume: {app.resumeVariant} | Cover: {app.coverLetterVariant}
169:                       </td>
170:                       <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
171:                         <button
172:                           onClick={() => ApplicationTracker.delete(app.id)}
173:                           className="text-red-600 hover:text-red-900 mr-4"
174:                         >
175:                           Delete
176:                         </button>
177:                       </td>
178:                     </tr>
179:                   ))}
180:                 </tbody>
181:               </table>
182:             </div>
183:           )}
184:         </div>
185:       </div>
186:     </div>
187:   )
188: }
</file>

<file path="src/app/career-finder/company/page.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { useRouter } from 'next/navigation'
  5: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
  6: import CareerFinderStorage from '@/lib/career-finder-storage'
  7: import CompanyResearchService, { CompanyResearchResult } from '@/lib/company-research-service'
  8: 
  9: export default function CareerFinderCompanyPage() {
 10:   const [loading, setLoading] = useState(true)
 11:   const [error, setError] = useState('')
 12:   const [companyData, setCompanyData] = useState<CompanyResearchResult | null>(null)
 13:   const [researchProgress, setResearchProgress] = useState(0)
 14:   const router = useRouter()
 15: 
 16:   useEffect(() => {
 17:     CareerFinderStorage.setProgress(4, 7)
 18:     initializeAndResearch()
 19:     // eslint-disable-next-line react-hooks/exhaustive-deps
 20:   }, [])
 21: 
 22:   const initializeAndResearch = async () => {
 23:     try {
 24:       // ✅ Use unified storage
 25:       const selectedJob = CareerFinderStorage.getJob()
 26:       
 27:       if (!selectedJob) {
 28:         setError('No job selected. Please go back and select a job.')
 29:         setLoading(false)
 30:         return
 31:       }
 32: 
 33:       console.log('[COMPANY] ✅ Loaded job:', selectedJob.title, '@', selectedJob.company)
 34: 
 35:       // ✅ Use shared company research service
 36:       const result = await CompanyResearchService.research({
 37:         company: selectedJob.company,
 38:         role: selectedJob.title,
 39:         location: selectedJob.location,
 40:         onProgress: setResearchProgress
 41:       })
 42: 
 43:       setCompanyData(result)
 44:       setLoading(false)
 45:       
 46:     } catch (error: any) {
 47:       console.error('[COMPANY] ❌ Initialization error:', error)
 48:       setError(error.message || 'Failed to initialize company research')
 49:       setLoading(false)
 50:     }
 51:   }
 52: 
 53:   const handleRetry = () => {
 54:     setError('')
 55:     setLoading(true)
 56:     setResearchProgress(0)
 57:     initializeAndResearch()
 58:   }
 59: 
 60:   if (loading) {
 61:     return (
 62:       <div className="mobile-container space-y-4">
 63:         <CareerFinderBackButton />
 64:         <div className="flex items-center justify-center min-h-[400px]">
 65:           <div className="text-center space-y-4">
 66:             <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
 67:             <h2 className="text-xl font-semibold text-foreground">Researching Company...</h2>
 68:             <div className="w-full max-w-md mx-auto">
 69:               <div className="w-full bg-secondary rounded-full h-2">
 70:                 <div 
 71:                   className="bg-blue-600 h-2 rounded-full transition-all duration-300 progress-bar-enhanced" 
 72:                   style={{ width: `${researchProgress}%` }}
 73:                 ></div>
 74:               </div>
 75:               <p className="text-sm text-muted-foreground mt-2">{researchProgress}% complete</p>
 76:             </div>
 77:           </div>
 78:         </div>
 79:       </div>
 80:     )
 81:   }
 82: 
 83:   if (error) {
 84:     return (
 85:       <div className="mobile-container space-y-4">
 86:         <CareerFinderBackButton />
 87:         <div className="error-container max-w-2xl mx-auto">
 88:           <h2 className="text-xl font-bold mb-2">Research Error</h2>
 89:           <p className="mb-4">{error}</p>
 90:           <div className="flex gap-4">
 91:             <button 
 92:               onClick={handleRetry}
 93:               className="btn-primary-enhanced"
 94:             >
 95:               Try Again
 96:             </button>
 97:             <button 
 98:               onClick={() => router.back()}
 99:               className="btn-secondary-enhanced"
100:             >
101:               Go Back
102:             </button>
103:           </div>
104:         </div>
105:       </div>
106:     )
107:   }
108: 
109:   return (
110:     <div className="mobile-container space-y-6 pb-8">
111:       <CareerFinderBackButton />
112:       
113:       {companyData && (
114:         <>
115:           {/* Company Header */}
116:           <div className="bg-card rounded-xl shadow-lg border border-border p-6">
117:             <h1 className="text-3xl font-bold text-foreground mb-2">{companyData.company}</h1>
118:             <p className="text-lg text-muted-foreground mb-4">{companyData.description}</p>
119:             
120:             <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
121:               <div>
122:                 <p className="text-muted-foreground">Size</p>
123:                 <p className="font-medium text-foreground">{companyData.size || 'Unknown'}</p>
124:               </div>
125:               <div>
126:                 <p className="text-muted-foreground">Revenue</p>
127:                 <p className="font-medium text-foreground">{companyData.revenue || 'Unknown'}</p>
128:               </div>
129:               <div>
130:                 <p className="text-muted-foreground">Industry</p>
131:                 <p className="font-medium text-foreground">{companyData.industry || 'Unknown'}</p>
132:               </div>
133:               <div>
134:                 <p className="text-muted-foreground">Founded</p>
135:                 <p className="font-medium text-foreground">{companyData.founded || 'Unknown'}</p>
136:               </div>
137:             </div>
138:           </div>
139: 
140:           {/* Research Results Grid */}
141:           <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
142:             {/* Company Psychology */}
143:             {companyData.psychology && (
144:               <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
145:                 <h3 className="text-xl font-bold text-purple-600 mb-4">🧠 Company Psychology</h3>
146:                 <p className="text-foreground leading-relaxed">{companyData.psychology}</p>
147:               </div>
148:             )}
149: 
150:             {/* Market Intelligence */}
151:             {companyData.marketIntelligence && (
152:               <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
153:                 <h3 className="text-xl font-bold text-blue-600 mb-4">📊 Market Intelligence</h3>
154:                 <div className="text-foreground leading-relaxed space-y-3">
155:                   {typeof companyData.marketIntelligence === 'string' ? (
156:                     <p className="whitespace-pre-wrap">{companyData.marketIntelligence}</p>
157:                   ) : (
158:                     <>
159:                       {companyData.marketIntelligence.competitivePosition && (
160:                         <div>
161:                           <h4 className="font-semibold text-primary mb-2">Market Position</h4>
162:                           <p className="text-sm">{companyData.marketIntelligence.competitivePosition}</p>
163:                         </div>
164:                       )}
165:                       {companyData.marketIntelligence.industryTrends && companyData.marketIntelligence.industryTrends.length > 0 && (
166:                         <div>
167:                           <h4 className="font-semibold text-primary mb-2">Industry Trends</h4>
168:                           <ul className="space-y-1">
169:                             {companyData.marketIntelligence.industryTrends.map((trend: string, idx: number) => (
170:                               <li key={idx} className="text-sm flex items-start gap-2">
171:                                 <span className="text-blue-500 mt-1">▸</span>
172:                                 <span>{trend}</span>
173:                               </li>
174:                             ))}
175:                           </ul>
176:                         </div>
177:                       )}
178:                       {companyData.marketIntelligence.recentNews && companyData.marketIntelligence.recentNews.length > 0 && (
179:                         <div>
180:                           <h4 className="font-semibold text-primary mb-2">Recent Developments</h4>
181:                           <ul className="space-y-1">
182:                             {companyData.marketIntelligence.recentNews.slice(0, 3).map((news: string, idx: number) => (
183:                               <li key={idx} className="text-sm flex items-start gap-2">
184:                                 <span className="text-blue-500 mt-1">•</span>
185:                                 <span>{news}</span>
186:                               </li>
187:                             ))}
188:                           </ul>
189:                         </div>
190:                       )}
191:                     </>
192:                   )}
193:                 </div>
194:               </div>
195:             )}
196: 
197:             {/* Hiring Contacts */}
198:             <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
199:               <h3 className="text-xl font-bold text-green-600 mb-4">
200:                 👥 Hiring Contacts ({companyData.hiringContacts.length})
201:               </h3>
202:               {companyData.hiringContacts && companyData.hiringContacts.length > 0 ? (
203:                 <div className="space-y-3">
204:                   {companyData.hiringContacts.map((contact: any, index: number) => (
205:                     <div key={index} className="p-4 bg-green-500/10 border border-green-500/30 rounded-lg">
206:                       <p className="font-semibold text-foreground">{contact.name}</p>
207:                       <p className="text-sm text-foreground/80">{contact.title}</p>
208:                       {contact.email && (
209:                         <p className="text-sm text-blue-600 dark:text-blue-400 font-medium mt-1">{contact.email}</p>
210:                       )}
211:                       {contact.department && (
212:                         <p className="text-xs text-muted-foreground mt-1">
213:                           {contact.department} • Confidence: {Math.round((contact.confidence || 0.5) * 100)}%
214:                         </p>
215:                       )}
216:                     </div>
217:                   ))}
218:                 </div>
219:               ) : (
220:                 <p className="text-muted-foreground">
221:                   No hiring contacts found. We&apos;ll help you find them in the next step.
222:                 </p>
223:               )}
224:             </div>
225: 
226:             {/* Company Culture */}
227:             {companyData.culture && companyData.culture.length > 0 && (
228:               <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
229:                 <h3 className="text-xl font-bold text-yellow-600 mb-4">🏢 Culture Insights</h3>
230:                 <ul className="space-y-2">
231:                   {companyData.culture.map((item: any, index: number) => (
232:                     <li key={index} className="flex items-start gap-3">
233:                       <span className="text-yellow-600 mt-1">•</span>
234:                       <span className="text-foreground">{item.point || item}</span>
235:                     </li>
236:                   ))}
237:                 </ul>
238:               </div>
239:             )}
240: 
241:             {/* Recent News */}
242:             {companyData.recentNews && companyData.recentNews.length > 0 && (
243:               <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
244:                 <h3 className="text-xl font-bold text-red-600 mb-4">📰 Recent News</h3>
245:                 <div className="space-y-3">
246:                   {companyData.recentNews.map((news: any, index: number) => (
247:                     <div key={index} className="border-l-4 border-red-500 pl-3">
248:                       <a href={news.url} target="_blank" rel="noopener noreferrer" className="font-medium text-foreground hover:text-blue-600">
249:                         {news.title}
250:                       </a>
251:                       <p className="text-xs text-muted-foreground mt-1">{news.date}</p>
252:                       {news.summary && (
253:                         <p className="text-sm text-muted-foreground mt-1">{news.summary}</p>
254:                       )}
255:                     </div>
256:                   ))}
257:                 </div>
258:               </div>
259:             )}
260: 
261:             {/* Glassdoor Rating */}
262:             {companyData.glassdoorRating && companyData.glassdoorRating.overallRating && (
263:               <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
264:                 <h3 className="text-xl font-bold text-emerald-600 mb-4">⭐ Glassdoor Ratings</h3>
265:                 <div className="space-y-3">
266:                   <div className="flex items-center justify-between">
267:                     <span className="text-foreground">Overall Rating</span>
268:                     <span className="text-2xl font-bold text-emerald-600">{companyData.glassdoorRating.overallRating}/5</span>
269:                   </div>
270:                   {companyData.glassdoorRating.ceoApproval && (
271:                     <div className="flex items-center justify-between">
272:                       <span className="text-foreground">CEO Approval</span>
273:                       <span className="font-semibold text-foreground">{companyData.glassdoorRating.ceoApproval}%</span>
274:                     </div>
275:                   )}
276:                   {companyData.glassdoorRating.recommendToFriend && (
277:                     <div className="flex items-center justify-between">
278:                       <span className="text-foreground">Recommend to Friend</span>
279:                       <span className="font-semibold text-foreground">{companyData.glassdoorRating.recommendToFriend}%</span>
280:                     </div>
281:                   )}
282:                   {companyData.glassdoorRating.reviewCount && (
283:                     <p className="text-xs text-muted-foreground mt-2">Based on {companyData.glassdoorRating.reviewCount} reviews</p>
284:                   )}
285:                   {companyData.glassdoorRating.url && (
286:                     <a href={companyData.glassdoorRating.url} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-600 hover:underline">
287:                       View on Glassdoor →
288:                     </a>
289:                   )}
290:                 </div>
291:               </div>
292:             )}
293: 
294:             {/* Stock Profile */}
295:             {companyData.stockProfile && companyData.stockProfile.isPublic && (
296:               <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
297:                 <h3 className="text-xl font-bold text-indigo-600 mb-4">📈 Stock Profile</h3>
298:                 <div className="space-y-3">
299:                   <div className="flex items-center justify-between">
300:                     <span className="text-foreground">Ticker</span>
301:                     <span className="font-bold text-indigo-600">{companyData.stockProfile.ticker}</span>
302:                   </div>
303:                   {companyData.stockProfile.exchange && (
304:                     <div className="flex items-center justify-between">
305:                       <span className="text-foreground">Exchange</span>
306:                       <span className="font-semibold text-foreground">{companyData.stockProfile.exchange}</span>
307:                     </div>
308:                   )}
309:                   {companyData.stockProfile.currentPrice && (
310:                     <div className="flex items-center justify-between">
311:                       <span className="text-foreground">Current Price</span>
312:                       <span className="font-semibold text-foreground">{companyData.stockProfile.currentPrice}</span>
313:                     </div>
314:                   )}
315:                   {companyData.stockProfile.marketCap && (
316:                     <div className="flex items-center justify-between">
317:                       <span className="text-foreground">Market Cap</span>
318:                       <span className="font-semibold text-foreground">{companyData.stockProfile.marketCap}</span>
319:                     </div>
320:                   )}
321:                 </div>
322:               </div>
323:             )}
324: 
325:             {/* Social Media Links */}
326:             {companyData.socialMedia && Object.values(companyData.socialMedia).some(v => v) && (
327:               <div className="bg-card rounded-xl shadow-lg border border-border p-6 card-hover-lift">
328:                 <h3 className="text-xl font-bold text-pink-600 mb-4">🔗 Social Media</h3>
329:                 <div className="flex flex-wrap gap-3">
330:                   {companyData.socialMedia.linkedin && (
331:                     <a href={companyData.socialMedia.linkedin} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
332:                       LinkedIn
333:                     </a>
334:                   )}
335:                   {companyData.socialMedia.twitter && (
336:                     <a href={companyData.socialMedia.twitter} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-sky-500 text-white rounded-lg hover:bg-sky-600 transition-colors">
337:                       Twitter
338:                     </a>
339:                   )}
340:                   {companyData.socialMedia.facebook && (
341:                     <a href={companyData.socialMedia.facebook} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
342:                       Facebook
343:                     </a>
344:                   )}
345:                   {companyData.socialMedia.instagram && (
346:                     <a href={companyData.socialMedia.instagram} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-pink-500 text-white rounded-lg hover:bg-pink-600 transition-colors">
347:                       Instagram
348:                     </a>
349:                   )}
350:                   {companyData.socialMedia.youtube && (
351:                     <a href={companyData.socialMedia.youtube} target="_blank" rel="noopener noreferrer" className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
352:                       YouTube
353:                     </a>
354:                   )}
355:                 </div>
356:               </div>
357:             )}
358:           </div>
359: 
360:           {/* Continue Button */}
361:           <div className="text-center mt-8">
362:             <button
363:               onClick={() => router.push('/career-finder/optimizer')}
364:               className="px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:shadow-lg transition-all duration-200 font-semibold"
365:             >
366:               Continue to Resume Optimization →
367:             </button>
368:           </div>
369:         </>
370:       )}
371:     </div>
372:   )
373: }
</file>

<file path="src/app/career-finder/salary-negotiation/page.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { useRouter } from 'next/navigation'
  5: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
  6: import { DollarSign, TrendingUp, Target, Download, Loader2, CheckCircle } from 'lucide-react'
  7: import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js'
  8: import { Bar } from 'react-chartjs-2'
  9: 
 10: ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend)
 11: 
 12: interface Application {
 13:   id: string
 14:   company: string
 15:   jobTitle: string
 16:   location?: string
 17:   status: string
 18:   hasSalaryData: boolean
 19: }
 20: 
 21: interface SalaryData {
 22:   marketMin: number
 23:   marketMedian: number
 24:   marketMax: number
 25:   userTarget: number
 26:   negotiationTips: string[]
 27:   factors?: string
 28:   company: string
 29:   jobTitle: string
 30:   location?: string
 31: }
 32: 
 33: export default function SalaryNegotiationPage() {
 34:   const router = useRouter()
 35:   const [applications, setApplications] = useState<Application[]>([])
 36:   const [selectedApp, setSelectedApp] = useState<Application | null>(null)
 37:   const [salaryData, setSalaryData] = useState<SalaryData | null>(null)
 38:   const [loading, setLoading] = useState(true)
 39:   const [generating, setGenerating] = useState(false)
 40: 
 41:   useEffect(() => {
 42:     loadApplications()
 43:   }, [])
 44: 
 45:   const loadApplications = async () => {
 46:     try {
 47:       const response = await fetch('/api/applications/list')
 48:       if (response.ok) {
 49:         const apps = await response.json()
 50:         setApplications(apps)
 51:         console.log('[SALARY] Loaded', apps.length, 'applications')
 52:       }
 53:     } catch (error) {
 54:       console.error('[SALARY] Error loading applications:', error)
 55:     } finally {
 56:       setLoading(false)
 57:     }
 58:   }
 59: 
 60:   const generateSalaryGuide = async () => {
 61:     if (!selectedApp) return
 62: 
 63:     setGenerating(true)
 64:     try {
 65:       const response = await fetch('/api/salary/generate', {
 66:         method: 'POST',
 67:         headers: { 'Content-Type': 'application/json' },
 68:         body: JSON.stringify({
 69:           applicationId: selectedApp.id,
 70:           yearsExperience: 5 // TODO: Get from user profile
 71:         })
 72:       })
 73: 
 74:       if (response.ok) {
 75:         const data = await response.json()
 76:         setSalaryData(data.salary)
 77:         console.log('[SALARY] ✅ Generated salary range:', data.salary.marketMin, '-', data.salary.marketMax)
 78:       } else {
 79:         console.error('[SALARY] Failed to generate salary data')
 80:       }
 81:     } catch (error) {
 82:       console.error('[SALARY] Error:', error)
 83:     } finally {
 84:       setGenerating(false)
 85:     }
 86:   }
 87: 
 88:   const chartData = salaryData ? {
 89:     labels: ['25th Percentile', 'Median (50th)', '75th Percentile', 'Your Target'],
 90:     datasets: [
 91:       {
 92:         label: 'Salary ($)',
 93:         data: [
 94:           salaryData.marketMin,
 95:           salaryData.marketMedian,
 96:           salaryData.marketMax,
 97:           salaryData.userTarget
 98:         ],
 99:         backgroundColor: [
100:           'rgba(59, 130, 246, 0.5)',
101:           'rgba(16, 185, 129, 0.5)',
102:           'rgba(245, 158, 11, 0.5)',
103:           'rgba(139, 92, 246, 0.8)'
104:         ],
105:         borderColor: [
106:           'rgb(59, 130, 246)',
107:           'rgb(16, 185, 129)',
108:           'rgb(245, 158, 11)',
109:           'rgb(139, 92, 246)'
110:         ],
111:         borderWidth: 2
112:       }
113:     ]
114:   } : null
115: 
116:   const chartOptions = {
117:     responsive: true,
118:     plugins: {
119:       legend: {
120:         display: false
121:       },
122:       title: {
123:         display: true,
124:         text: 'Market Salary Range',
125:         font: {
126:           size: 18,
127:           weight: 'bold' as const
128:         }
129:       },
130:       tooltip: {
131:         callbacks: {
132:           label: function(context: any) {
133:             return '$' + context.parsed.y.toLocaleString()
134:           }
135:         }
136:       }
137:     },
138:     scales: {
139:       y: {
140:         beginAtZero: true,
141:         ticks: {
142:           callback: function(value: any) {
143:             return '$' + (value / 1000) + 'K'
144:           }
145:         }
146:       }
147:     }
148:   }
149: 
150:   if (loading) {
151:     return (
152:       <div className="min-h-screen bg-background flex items-center justify-center">
153:         <Loader2 className="w-8 h-8 animate-spin text-primary" />
154:       </div>
155:     )
156:   }
157: 
158:   return (
159:     <div className="min-h-screen bg-background">
160:       {/* Header */}
161:       <div className="gradient-hero p-8 rounded-b-3xl shadow-2xl mb-8">
162:         <div className="max-w-4xl mx-auto">
163:           <div className="mb-4">
164:             <CareerFinderBackButton />
165:           </div>
166:           <h1 className="text-4xl font-bold text-foreground text-center mb-3">💰 Salary Negotiation</h1>
167:           <p className="text-foreground/90 text-center text-lg">
168:             Market data and negotiation strategies for your offers
169:           </p>
170:         </div>
171:       </div>
172: 
173:       <div className="max-w-6xl mx-auto px-4">
174:         {applications.length === 0 ? (
175:           <div className="text-center py-12">
176:             <div className="text-6xl mb-4">📝</div>
177:             <h3 className="text-2xl font-bold mb-2">No Applications Yet</h3>
178:             <p className="text-muted-foreground mb-6">
179:               Apply to jobs first to get salary benchmarks
180:             </p>
181:             <button
182:               onClick={() => router.push('/career-finder/search')}
183:               className="btn-primary"
184:             >
185:               Find Jobs
186:             </button>
187:           </div>
188:         ) : (
189:           <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
190:             {/* Left: Application Selection */}
191:             <div className="lg:col-span-1">
192:               <div className="gradient-border-card">
193:                 <h3 className="text-xl font-bold mb-4">Your Applications</h3>
194:                 <div className="space-y-3">
195:                   {applications.map((app) => (
196:                     <div
197:                       key={app.id}
198:                       onClick={() => setSelectedApp(app)}
199:                       className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
200:                         selectedApp?.id === app.id
201:                           ? 'border-green-500 bg-green-50'
202:                           : 'border-border hover:border-green-300'
203:                       }`}
204:                     >
205:                       <h4 className="font-bold text-foreground">{app.jobTitle}</h4>
206:                       <p className="text-sm text-muted-foreground">{app.company}</p>
207:                       <div className="flex items-center gap-2 mt-2">
208:                         <span className={`text-xs px-2 py-1 rounded-full ${
209:                           app.status === 'applied' ? 'bg-green-100 text-green-700' :
210:                           app.status === 'offer_received' ? 'bg-purple-100 text-purple-700' :
211:                           'bg-gray-100 text-gray-700'
212:                         }`}>
213:                           {app.status.replace('_', ' ')}
214:                         </span>
215:                         {app.hasSalaryData && (
216:                           <span className="text-xs text-green-600">✓ Data Ready</span>
217:                         )}
218:                       </div>
219:                     </div>
220:                   ))}
221:                 </div>
222:               </div>
223:             </div>
224: 
225:             {/* Right: Salary Data */}
226:             <div className="lg:col-span-2">
227:               {!selectedApp ? (
228:                 <div className="gradient-border-card text-center py-12">
229:                   <DollarSign className="w-16 h-16 mx-auto text-green-500 mb-4" />
230:                   <h3 className="text-xl font-bold mb-2">Select an Application</h3>
231:                   <p className="text-muted-foreground">
232:                     Choose an application to get salary benchmarks
233:                   </p>
234:                 </div>
235:               ) : !salaryData ? (
236:                 <div className="gradient-border-card text-center py-12">
237:                   <TrendingUp className="w-16 h-16 mx-auto text-green-500 mb-4" />
238:                   <h3 className="text-xl font-bold mb-2">Get Salary Benchmarks</h3>
239:                   <p className="text-muted-foreground mb-6">
240:                     AI will analyze market data for<br />
241:                     <strong>{selectedApp.jobTitle}</strong> at <strong>{selectedApp.company}</strong>
242:                   </p>
243:                   <button
244:                     onClick={generateSalaryGuide}
245:                     disabled={generating}
246:                     className="btn-primary"
247:                   >
248:                     {generating ? (
249:                       <>
250:                         <Loader2 className="w-5 h-5 animate-spin mr-2" />
251:                         Analyzing Market...
252:                       </>
253:                     ) : (
254:                       <>
255:                         <Target className="w-5 h-5 mr-2" />
256:                         Generate Salary Guide
257:                       </>
258:                     )}
259:                   </button>
260:                 </div>
261:               ) : (
262:                 <div className="space-y-6">
263:                   {/* Header */}
264:                   <div className="gradient-border-card">
265:                     <div className="flex items-center justify-between mb-4">
266:                       <div>
267:                         <h2 className="text-2xl font-bold">{salaryData.jobTitle}</h2>
268:                         <p className="text-muted-foreground">{salaryData.company}</p>
269:                         {salaryData.location && (
270:                           <p className="text-sm text-muted-foreground">📍 {salaryData.location}</p>
271:                         )}
272:                       </div>
273:                       <button className="btn-secondary">
274:                         <Download className="w-4 h-4 mr-2" />
275:                         Download PDF
276:                       </button>
277:                     </div>
278:                   </div>
279: 
280:                   {/* Salary Chart */}
281:                   <div className="gradient-border-card">
282:                     <h3 className="text-xl font-bold mb-4">Market Salary Range</h3>
283:                     {chartData && (
284:                       <div className="bg-card p-4 rounded-lg">
285:                         <Bar data={chartData} options={chartOptions} />
286:                       </div>
287:                     )}
288:                     
289:                     <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
290:                       <div className="text-center p-4 bg-blue-50 rounded-lg">
291:                         <p className="text-sm text-muted-foreground mb-1">25th Percentile</p>
292:                         <p className="text-2xl font-bold text-blue-600">
293:                           ${(salaryData.marketMin / 1000).toFixed(0)}K
294:                         </p>
295:                       </div>
296:                       <div className="text-center p-4 bg-green-50 rounded-lg">
297:                         <p className="text-sm text-muted-foreground mb-1">Median</p>
298:                         <p className="text-2xl font-bold text-green-600">
299:                           ${(salaryData.marketMedian / 1000).toFixed(0)}K
300:                         </p>
301:                       </div>
302:                       <div className="text-center p-4 bg-yellow-50 rounded-lg">
303:                         <p className="text-sm text-muted-foreground mb-1">75th Percentile</p>
304:                         <p className="text-2xl font-bold text-yellow-600">
305:                           ${(salaryData.marketMax / 1000).toFixed(0)}K
306:                         </p>
307:                       </div>
308:                       <div className="text-center p-4 bg-purple-50 rounded-lg border-2 border-purple-500">
309:                         <p className="text-sm text-muted-foreground mb-1">Your Target</p>
310:                         <p className="text-2xl font-bold text-purple-600">
311:                           ${(salaryData.userTarget / 1000).toFixed(0)}K
312:                         </p>
313:                       </div>
314:                     </div>
315:                   </div>
316: 
317:                   {/* Negotiation Tips */}
318:                   <div className="gradient-border-card">
319:                     <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
320:                       <CheckCircle className="w-5 h-5 text-green-500" />
321:                       Negotiation Strategy
322:                     </h3>
323:                     <div className="space-y-3">
324:                       {salaryData.negotiationTips.map((tip, i) => (
325:                         <div key={i} className="flex items-start gap-3 p-4 bg-green-50 rounded-lg">
326:                           <span className="flex-shrink-0 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center font-bold">
327:                             {i + 1}
328:                           </span>
329:                           <p className="flex-1 text-foreground pt-1">{tip}</p>
330:                         </div>
331:                       ))}
332:                     </div>
333:                   </div>
334: 
335:                   {/* Actions */}
336:                   <div className="flex gap-4">
337:                     <button onClick={generateSalaryGuide} className="btn-secondary flex-1">
338:                       🔄 Refresh Data
339:                     </button>
340:                     <button
341:                       onClick={() => router.push('/career-finder/applications')}
342:                       className="btn-primary flex-1"
343:                     >
344:                       View All Applications →
345:                     </button>
346:                   </div>
347:                 </div>
348:               )}
349:             </div>
350:           </div>
351:         )}
352:       </div>
353:     </div>
354:   )
355: }
</file>

<file path="src/app/dashboard/components/dashboard-header.tsx">
 1: 'use client'
 2: 
 3: import { signOut } from 'next-auth/react'
 4: import { Button } from '@/components/ui/button'
 5: import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
 6: import {
 7:   DropdownMenu,
 8:   DropdownMenuContent,
 9:   DropdownMenuItem,
10:   DropdownMenuSeparator,
11:   DropdownMenuTrigger,
12: } from '@/components/ui/dropdown-menu'
13: import { LogOut, Settings, User } from 'lucide-react'
14: 
15: interface DashboardHeaderProps {
16:   user: {
17:     name?: string | null
18:     email?: string | null
19:     image?: string | null
20:   }
21: }
22: 
23: export function DashboardHeader({ user }: DashboardHeaderProps) {
24:   const handleSignOut = () => {
25:     signOut({ callbackUrl: '/' })
26:   }
27: 
28:   return (
29:     <header className="text-foreground brand-gradient">
30:       <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
31:         <div className="flex h-16 items-center justify-between">
32:           <div className="flex items-center gap-3">
33:             <img src="/icon-192.svg" alt="Career Lever AI" className="h-8 w-8" />
34:             <h1 className="text-lg font-semibold sm:text-xl">Career Lever AI</h1>
35:           </div>
36: 
37:           <div className="flex items-center space-x-4">
38:             <a href="/reverse-market" className="text-sm underline underline-offset-4 hover:opacity-90">Reverse Market</a>
39:             <DropdownMenu>
40:               <DropdownMenuTrigger asChild>
41:                 <Button variant="secondary" className="relative h-8 w-8 rounded-full">
42:                   <Avatar className="h-8 w-8">
43:                     <AvatarImage src={user.image || ''} alt={user.name || ''} />
44:                     <AvatarFallback>
45:                       {user.name?.charAt(0)?.toUpperCase() || 'U'}
46:                     </AvatarFallback>
47:                   </Avatar>
48:                 </Button>
49:               </DropdownMenuTrigger>
50:               <DropdownMenuContent className="w-56 sm:w-64" align="end" forceMount sideOffset={8}>
51:                 <div className="flex items-center justify-start gap-2 p-2">
52:                   <div className="flex flex-col space-y-1 leading-none">
53:                     {user.name && <p className="font-medium truncate">{user.name}</p>}
54:                     {user.email && (
55:                       <p className="max-w-[180px] sm:max-w-[220px] truncate text-sm text-muted-foreground">
56:                         {user.email}
57:                       </p>
58:                     )}
59:                   </div>
60:                 </div>
61:                 <DropdownMenuSeparator />
62:                 <DropdownMenuItem>
63:                   <User className="mr-2 h-4 w-4" />
64:                   <span>Profile</span>
65:                 </DropdownMenuItem>
66:                 <DropdownMenuItem>
67:                   <Settings className="mr-2 h-4 w-4" />
68:                   <span>Settings</span>
69:                 </DropdownMenuItem>
70:                 <DropdownMenuSeparator />
71:                 <DropdownMenuItem onClick={handleSignOut}>
72:                   <LogOut className="mr-2 h-4 w-4" />
73:                   <span>Log out</span>
74:                 </DropdownMenuItem>
75:               </DropdownMenuContent>
76:             </DropdownMenu>
77:           </div>
78:         </div>
79:       </div>
80:     </header>
81:   )
82: }
</file>

<file path="src/app/dashboard/components/metrics-hero.tsx">
  1: 'use client'
  2: 
  3: import { Card, CardContent } from '@/components/ui/card'
  4: import React from 'react'
  5: import { Skeleton } from '@/components/ui/skeleton'
  6: import { TrendingUp, TrendingDown, Briefcase, Calendar, Target, Clock } from 'lucide-react'
  7: import { useDashboardStatsData } from '@/hooks/use-dashboard-stats'
  8: 
  9: export function MetricsHero() {
 10:   const { stats, isLoading } = useDashboardStatsData()
 11: 
 12:   const metricCards = [
 13:     {
 14:       title: 'Total Applications',
 15:       value: stats.totalApplications,
 16:       change: stats.appliedWeekChangePct,
 17:       changeText: 'vs last week',
 18:       icon: Briefcase,
 19:       gradient: 'from-blue-500 to-cyan-500',
 20:       bgGradient: 'from-blue-500/10 to-cyan-500/10',
 21:     },
 22:     {
 23:       title: 'Applied This Week',
 24:       value: stats.appliedThisWeek,
 25:       subtitle: 'Keep a steady cadence',
 26:       icon: Calendar,
 27:       gradient: 'from-purple-500 to-pink-500',
 28:       bgGradient: 'from-purple-500/10 to-pink-500/10',
 29:     },
 30:     {
 31:       title: 'Interview Rate',
 32:       value: `${stats.interviewRate}%`,
 33:       change: 2,
 34:       changeText: 'pts increase',
 35:       icon: Target,
 36:       gradient: 'from-green-500 to-emerald-500',
 37:       bgGradient: 'from-green-500/10 to-emerald-500/10',
 38:     },
 39:     {
 40:       title: 'Avg Response Time',
 41:       value: `${stats.averageResponseTime}d`,
 42:       subtitle: 'Goal: < 7 days',
 43:       icon: Clock,
 44:       gradient: 'from-orange-500 to-red-500',
 45:       bgGradient: 'from-orange-500/10 to-red-500/10',
 46:     },
 47:   ]
 48: 
 49:   return (
 50:     <div className="space-y-4">
 51:       {isLoading ? (
 52:         <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
 53:           {[...Array(4)].map((_, i) => (
 54:             <Card key={i} className="overflow-hidden">
 55:               <CardContent className="p-6">
 56:                 <Skeleton className="h-4 w-24 mb-3" />
 57:                 <Skeleton className="h-8 w-16 mb-2" />
 58:                 <Skeleton className="h-3 w-32" />
 59:               </CardContent>
 60:             </Card>
 61:           ))}
 62:         </div>
 63:       ) : (
 64:         <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
 65:           {metricCards.map((metric, index) => (
 66:             <Card 
 67:               key={index}
 68:               className="group relative overflow-hidden border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl hover:from-white/10 hover:to-white/[0.05] transition-all duration-300 hover:scale-[1.02] hover:shadow-2xl hover:shadow-primary/20"
 69:             >
 70:               <div className={`absolute inset-0 bg-gradient-to-br ${metric.bgGradient} opacity-0 group-hover:opacity-100 transition-opacity duration-300`} />
 71:               
 72:               <CardContent className="relative p-6">
 73:                 {/* Icon */}
 74:                 <div className={`inline-flex items-center justify-center w-12 h-12 rounded-xl bg-gradient-to-br ${metric.gradient} mb-4 shadow-lg`}>
 75:                   <metric.icon className="w-6 h-6 text-white" />
 76:                 </div>
 77: 
 78:                 {/* Label */}
 79:                 <div className="text-sm font-medium text-muted-foreground mb-2">
 80:                   {metric.title}
 81:                 </div>
 82: 
 83:                 {/* Value */}
 84:                 <div className="text-4xl font-bold text-foreground mb-2 tracking-tight">
 85:                   {metric.value}
 86:                 </div>
 87: 
 88:                 {/* Change or Subtitle */}
 89:                 {metric.change !== undefined ? (
 90:                   <div className={`flex items-center gap-1 text-sm font-medium ${
 91:                     Number(metric.change) >= 0 ? 'text-green-500' : 'text-red-500'
 92:                   }`}>
 93:                     {Number(metric.change) >= 0 ? (
 94:                       <TrendingUp className="w-4 h-4" />
 95:                     ) : (
 96:                       <TrendingDown className="w-4 h-4" />
 97:                     )}
 98:                     <span>
 99:                       {Number(metric.change) >= 0 ? '+' : ''}{metric.change}% {metric.changeText}
100:                     </span>
101:                   </div>
102:                 ) : (
103:                   <div className="text-xs text-muted-foreground">
104:                     {metric.subtitle}
105:                   </div>
106:                 )}
107:               </CardContent>
108:             </Card>
109:           ))}
110:         </div>
111:       )}
112:       
113:       {/* Inbox Status */}
114:       <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl">
115:         <CardContent className="p-4">
116:           <InboxStatusChips />
117:         </CardContent>
118:       </Card>
119:     </div>
120:   )
121: }
122: 
123: function InboxStatusChips() {
124:   const [state, setState] = React.useState<{ gmail?: boolean; outlook?: boolean; syncing?: boolean; last?: string }>({ syncing: false })
125:   React.useEffect(() => {
126:     const run = async () => {
127:       try {
128:         setState(s => ({ ...s, syncing: true }))
129:         const res = await fetch('/api/inbox/run', { method: 'POST' })
130:         const j = await res.json().catch(()=>({}))
131:         if (res.ok) {
132:           setState({ gmail: !!j.gmailLinked, outlook: !!j.outlookLinked, syncing: false, last: new Date().toLocaleTimeString() })
133:         } else {
134:           setState(s => ({ ...s, syncing: false }))
135:         }
136:       } catch { setState(s => ({ ...s, syncing: false })) }
137:     }
138:     run()
139:   }, [])
140:   return (
141:     <div className="flex items-center gap-3 flex-wrap">
142:       <div className="flex items-center gap-2 text-sm text-muted-foreground">
143:         <span className="font-medium">Inbox Status:</span>
144:       </div>
145:       <span className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-all ${
146:         state.gmail 
147:           ? 'bg-gradient-to-r from-green-500/20 to-emerald-500/20 text-green-400 border border-green-500/30' 
148:           : 'bg-white/5 text-muted-foreground border border-white/10'
149:       }`}>
150:         Gmail {state.gmail ? '✓' : '○'}
151:       </span>
152:       <span className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-all ${
153:         state.outlook 
154:           ? 'bg-gradient-to-r from-blue-500/20 to-cyan-500/20 text-blue-400 border border-blue-500/30' 
155:           : 'bg-white/5 text-muted-foreground border border-white/10'
156:       }`}>
157:         Outlook {state.outlook ? '✓' : '○'}
158:       </span>
159:       {state.syncing && (
160:         <span className="px-3 py-1.5 rounded-lg text-xs font-medium bg-gradient-to-r from-purple-500/20 to-pink-500/20 text-purple-400 border border-purple-500/30 animate-pulse">
161:           Syncing...
162:         </span>
163:       )}
164:       {state.last && !state.syncing && (
165:         <span className="px-3 py-1.5 rounded-lg text-xs font-medium bg-card/5 text-muted-foreground border border-white/10">
166:           Last sync: {state.last}
167:         </span>
168:       )}
169:     </div>
170:   )
171: }
</file>

<file path="src/app/dashboard/components/quick-actions.tsx">
  1: 'use client'
  2: 
  3: import { useRouter } from 'next/navigation'
  4: import { Button } from '@/components/ui/button'
  5: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  6: import {
  7:   Upload,
  8:   FileText,
  9:   Search,
 10:   Users,
 11:   BarChart3,
 12:   Sparkles,
 13:   ArrowRight,
 14:   Zap
 15: } from 'lucide-react'
 16: 
 17: const quickActions = [
 18:   {
 19:     title: 'Career Finder',
 20:     description: 'Start the complete AI-powered job application workflow',
 21:     icon: Sparkles,
 22:     href: '/career-finder/resume',
 23:     gradient: 'from-blue-600 via-purple-600 to-pink-600',
 24:     bgGradient: 'from-blue-500/10 via-purple-500/10 to-pink-500/10',
 25:     primary: true,
 26:   },
 27:   {
 28:     title: 'Upload Resume',
 29:     description: 'Upload and parse your resume for customization',
 30:     icon: Upload,
 31:     href: '/career-finder/resume',
 32:     gradient: 'from-blue-500 to-cyan-500',
 33:     bgGradient: 'from-blue-500/10 to-cyan-500/10',
 34:   },
 35:   {
 36:     title: 'Find Jobs',
 37:     description: 'Search for jobs with AI-powered matching',
 38:     icon: Search,
 39:     href: '/career-finder/search',
 40:     gradient: 'from-green-500 to-emerald-500',
 41:     bgGradient: 'from-green-500/10 to-emerald-500/10',
 42:   },
 43:   {
 44:     title: 'Optimize Resume',
 45:     description: 'Tailor your resume for a specific job',
 46:     icon: Zap,
 47:     href: '/career-finder/optimizer',
 48:     gradient: 'from-purple-500 to-pink-500',
 49:     bgGradient: 'from-purple-500/10 to-pink-500/10',
 50:   },
 51:   {
 52:     title: 'Research Company',
 53:     description: 'Get insights about a potential employer',
 54:     icon: Users,
 55:     href: '/career-finder/company',
 56:     gradient: 'from-orange-500 to-red-500',
 57:     bgGradient: 'from-orange-500/10 to-red-500/10',
 58:   },
 59:   {
 60:     title: 'Generate Cover Letter',
 61:     description: 'Create a personalized cover letter',
 62:     icon: FileText,
 63:     href: '/cover-letter',
 64:     gradient: 'from-red-500 to-pink-500',
 65:     bgGradient: 'from-red-500/10 to-pink-500/10',
 66:   },
 67:   {
 68:     title: 'View Applications',
 69:     description: 'Track and manage your job applications',
 70:     icon: BarChart3,
 71:     href: '/analytics',
 72:     gradient: 'from-teal-500 to-cyan-500',
 73:     bgGradient: 'from-teal-500/10 to-cyan-500/10',
 74:   },
 75: ]
 76: 
 77: export function QuickActions() {
 78:   const router = useRouter()
 79: 
 80:   return (
 81:     <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl overflow-hidden">
 82:       <CardHeader className="pb-4">
 83:         <CardTitle className="flex items-center gap-2 text-foreground text-2xl font-bold">
 84:           <Sparkles className="h-6 w-6 text-primary" />
 85:           Quick Actions
 86:         </CardTitle>
 87:         <CardDescription className="text-muted-foreground">
 88:           Get started with common tasks
 89:         </CardDescription>
 90:       </CardHeader>
 91:       <CardContent>
 92:         <div className="space-y-6">
 93:           {/* Primary Action - Featured Card */}
 94:           {quickActions.filter(action => action.primary).map((action, index) => (
 95:             <div
 96:               key={index}
 97:               onClick={() => router.push(action.href)}
 98:               className="group relative overflow-hidden rounded-2xl cursor-pointer transition-all duration-300 hover:scale-[1.02]"
 99:             >
100:               {/* Gradient Background */}
101:               <div className={`absolute inset-0 bg-gradient-to-r ${action.gradient} opacity-90 group-hover:opacity-100 transition-opacity`} />
102:               
103:               {/* Content */}
104:               <div className="relative p-6 flex items-center gap-4">
105:                 <div className="flex-shrink-0 w-14 h-14 rounded-xl bg-card/20 backdrop-blur-sm flex items-center justify-center">
106:                   <action.icon className="h-7 w-7 text-white" />
107:                 </div>
108:                 <div className="flex-1">
109:                   <h3 className="font-bold text-lg text-white mb-1">{action.title}</h3>
110:                   <p className="text-sm text-white/90">{action.description}</p>
111:                 </div>
112:                 <ArrowRight className="h-6 w-6 text-white group-hover:translate-x-1 transition-transform" />
113:               </div>
114:             </div>
115:           ))}
116: 
117:           {/* Secondary Actions - Grid */}
118:           <div>
119:             <h3 className="text-sm font-semibold text-foreground mb-4 flex items-center gap-2">
120:               <Zap className="h-4 w-4 text-primary" />
121:               Quick Tools
122:             </h3>
123:             <div className="grid grid-cols-1 gap-3 sm:grid-cols-2 lg:grid-cols-3">
124:               {quickActions.filter(action => !action.primary).map((action, index) => (
125:                 <div
126:                   key={index}
127:                   onClick={() => router.push(action.href)}
128:                   className="group relative overflow-hidden rounded-xl cursor-pointer transition-all duration-300 hover:scale-[1.02] border border-white/10 bg-gradient-to-br from-white/5 to-white/[0.02] hover:from-white/10 hover:to-white/[0.05]"
129:                 >
130:                   {/* Hover Gradient Overlay */}
131:                   <div className={`absolute inset-0 bg-gradient-to-br ${action.bgGradient} opacity-0 group-hover:opacity-100 transition-opacity duration-300`} />
132:                   
133:                   {/* Content */}
134:                   <div className="relative p-5 flex flex-col h-full min-h-[140px]">
135:                     <div className={`inline-flex items-center justify-center w-10 h-10 rounded-lg bg-gradient-to-br ${action.gradient} mb-3 shadow-lg`}>
136:                       <action.icon className="h-5 w-5 text-white" />
137:                     </div>
138:                     <h4 className="font-semibold text-sm text-foreground mb-2 leading-tight">{action.title}</h4>
139:                     <p className="text-xs text-muted-foreground leading-relaxed flex-1">
140:                       {action.description}
141:                     </p>
142:                     <div className="mt-3 flex items-center gap-1 text-xs font-medium text-primary opacity-0 group-hover:opacity-100 transition-opacity">
143:                       <span>Get started</span>
144:                       <ArrowRight className="h-3 w-3" />
145:                     </div>
146:                   </div>
147:                 </div>
148:               ))}
149:             </div>
150:           </div>
151:         </div>
152:       </CardContent>
153:     </Card>
154:   )
155: }
</file>

<file path="src/app/dashboard/components/stats-overview.tsx">
  1: 'use client'
  2: 
  3: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  4: import { Badge } from '@/components/ui/badge'
  5: import {
  6:   Briefcase,
  7:   TrendingUp,
  8:   Calendar,
  9:   Target
 10: } from 'lucide-react'
 11: import { useDashboardStatsData } from '@/hooks/use-dashboard-stats'
 12: 
 13: export function StatsOverview() {
 14:   const { stats, isLoading: loading } = useDashboardStatsData()
 15: 
 16:   if (loading) {
 17:     return (
 18:       <Card>
 19:         <CardHeader>
 20:           <CardTitle>Overview</CardTitle>
 21:         </CardHeader>
 22:         <CardContent>
 23:           <div className="space-y-4">
 24:             {[...Array(4)].map((_, i) => (
 25:               <div key={i} className="animate-pulse">
 26:                 <div className="h-4 bg-gray-200 rounded w-full mb-2"></div>
 27:                 <div className="h-6 bg-gray-200 rounded w-1/2"></div>
 28:               </div>
 29:             ))}
 30:           </div>
 31:         </CardContent>
 32:       </Card>
 33:     )
 34:   }
 35: 
 36:   return (
 37:     <div className="space-y-4">
 38:       {/* Quick Stats */}
 39:       <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl">
 40:         <CardHeader>
 41:           <CardTitle className="flex items-center gap-2 text-lg">
 42:             <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center">
 43:               <TrendingUp className="h-4 w-4 text-white" />
 44:             </div>
 45:             Your Progress
 46:           </CardTitle>
 47:         </CardHeader>
 48:         <CardContent className="space-y-3">
 49:           <div className="flex items-center justify-between p-3 rounded-lg bg-white/5 hover:bg-card/10 transition-colors">
 50:             <div className="flex items-center gap-3">
 51:               <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center">
 52:                 <Briefcase className="h-4 w-4 text-white" />
 53:               </div>
 54:               <span className="text-sm font-medium text-foreground">Total Applications</span>
 55:             </div>
 56:             <Badge className="bg-gradient-to-r from-blue-500/20 to-cyan-500/20 text-blue-400 border-blue-500/30 hover:from-blue-500/30 hover:to-cyan-500/30">{stats.totalApplications}</Badge>
 57:           </div>
 58: 
 59:           <div className="flex items-center justify-between p-3 rounded-lg bg-white/5 hover:bg-card/10 transition-colors">
 60:             <div className="flex items-center gap-3">
 61:               <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-green-500 to-emerald-500 flex items-center justify-center">
 62:                 <Calendar className="h-4 w-4 text-white" />
 63:               </div>
 64:               <span className="text-sm font-medium text-foreground">Applied This Week</span>
 65:             </div>
 66:             <Badge className="bg-gradient-to-r from-green-500/20 to-emerald-500/20 text-green-400 border-green-500/30 hover:from-green-500/30 hover:to-emerald-500/30">{stats.appliedThisWeek}</Badge>
 67:           </div>
 68: 
 69:           <div className="flex items-center justify-between p-3 rounded-lg bg-white/5 hover:bg-card/10 transition-colors">
 70:             <div className="flex items-center gap-3">
 71:               <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
 72:                 <Target className="h-4 w-4 text-white" />
 73:               </div>
 74:               <span className="text-sm font-medium text-foreground">Interview Rate</span>
 75:             </div>
 76:             <Badge className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 text-purple-400 border-purple-500/30 hover:from-purple-500/30 hover:to-pink-500/30">{stats.interviewRate}%</Badge>
 77:           </div>
 78: 
 79:           <div className="flex items-center justify-between p-3 rounded-lg bg-white/5 hover:bg-card/10 transition-colors">
 80:             <div className="flex items-center gap-3">
 81:               <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-orange-500 to-red-500 flex items-center justify-center">
 82:                 <TrendingUp className="h-4 w-4 text-white" />
 83:               </div>
 84:               <span className="text-sm font-medium text-foreground">Avg Response Time</span>
 85:             </div>
 86:             <Badge className="bg-gradient-to-r from-orange-500/20 to-red-500/20 text-orange-400 border-orange-500/30 hover:from-orange-500/30 hover:to-red-500/30">{stats.averageResponseTime} days</Badge>
 87:           </div>
 88:         </CardContent>
 89:       </Card>
 90: 
 91:       {/* Goals */}
 92:       <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl">
 93:         <CardHeader>
 94:           <CardTitle className="flex items-center gap-2 text-lg">
 95:             <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
 96:               <Target className="h-4 w-4 text-white" />
 97:             </div>
 98:             Weekly Goals
 99:           </CardTitle>
100:         </CardHeader>
101:         <CardContent>
102:           <div className="space-y-4">
103:             <div>
104:               <div className="flex items-center justify-between mb-2">
105:                 <span className="text-sm font-medium text-foreground">Applications this week</span>
106:                 <span className="text-sm font-bold text-primary">
107:                   {stats.appliedThisWeek}/5
108:                 </span>
109:               </div>
110:               <div className="w-full bg-card/10 rounded-full h-2.5 overflow-hidden">
111:                 <div
112:                   className="bg-gradient-to-r from-blue-500 to-cyan-500 h-2.5 rounded-full transition-all duration-500 shadow-lg shadow-blue-500/50"
113:                   style={{ width: `${Math.max(0, Math.min(100, (stats.appliedThisWeek / 5) * 100))}%` }}
114:                 ></div>
115:               </div>
116:             </div>
117: 
118:             <div>
119:               <div className="flex items-center justify-between mb-2">
120:                 <span className="text-sm font-medium text-foreground">Network connections</span>
121:                 <span className="text-sm font-bold text-primary">2/3</span>
122:               </div>
123:               <div className="w-full bg-card/10 rounded-full h-2.5 overflow-hidden">
124:                 <div
125:                   className="bg-gradient-to-r from-green-500 to-emerald-500 h-2.5 rounded-full transition-all duration-500 shadow-lg shadow-green-500/50"
126:                   style={{ width: '67%' }}
127:                 ></div>
128:               </div>
129:             </div>
130:           </div>
131:         </CardContent>
132:       </Card>
133: 
134:       {/* Tips */}
135:       <Card className="border-0 bg-gradient-to-br from-white/5 to-white/[0.02] backdrop-blur-xl overflow-hidden">
136:         <CardHeader>
137:           <CardTitle className="flex items-center gap-2 text-lg">
138:             <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-yellow-500 to-orange-500 flex items-center justify-center">
139:               <span className="text-white text-sm">💡</span>
140:             </div>
141:             Pro Tips
142:           </CardTitle>
143:         </CardHeader>
144:         <CardContent>
145:           <div className="space-y-3">
146:             <div className="relative overflow-hidden p-4 rounded-xl bg-gradient-to-br from-blue-500/10 to-cyan-500/10 border border-blue-500/20">
147:               <div className="absolute top-0 right-0 w-20 h-20 bg-blue-500/10 rounded-full blur-2xl" />
148:               <p className="text-sm text-foreground relative z-10">
149:                 <span className="font-bold text-blue-400">Customize your resume</span> for each application to increase your chances by 30%.
150:               </p>
151:             </div>
152:             <div className="relative overflow-hidden p-4 rounded-xl bg-gradient-to-br from-green-500/10 to-emerald-500/10 border border-green-500/20">
153:               <div className="absolute top-0 right-0 w-20 h-20 bg-green-500/10 rounded-full blur-2xl" />
154:               <p className="text-sm text-foreground relative z-10">
155:                 <span className="font-bold text-green-400">Follow up</span> within 7-10 days if you haven't heard back.
156:               </p>
157:             </div>
158:           </div>
159:         </CardContent>
160:       </Card>
161:     </div>
162:   )
163: }
</file>

<file path="src/app/interview-prep/page.tsx">
 1: import { Suspense } from 'react'
 2: import { getServerSession } from 'next-auth/next'
 3: import { redirect } from 'next/navigation'
 4: import { authOptions } from '@/lib/auth'
 5: import { InterviewPreparation } from './components/interview-preparation'
 6: 
 7: export default async function InterviewPrepPage() {
 8:   const session = await getServerSession(authOptions)
 9: 
10:   if (!session) {
11:     redirect('/auth/signin')
12:   }
13: 
14:   return (
15:     <div className="min-h-screen bg-background">
16:       <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
17:         <div className="mb-8">
18:           <h1 className="text-3xl font-bold text-foreground">Interview Preparation</h1>
19:           <p className="mt-2 text-lg text-muted-foreground">
20:             AI-powered interview preparation tailored to your target role and company
21:           </p>
22:         </div>
23: 
24:         <Suspense fallback={<InterviewPrepSkeleton />}>
25:           <InterviewPreparation userId={session.user.id} />
26:         </Suspense>
27:       </div>
28:     </div>
29:   )
30: }
31: 
32: function InterviewPrepSkeleton() {
33:   return (
34:     <div className="space-y-8">
35:       {/* Job Selection Skeleton */}
36:       <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
37:         <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
38:         <div className="w-full h-12 bg-gray-200 rounded mb-4"></div>
39:         <div className="w-32 h-10 bg-gray-200 rounded"></div>
40:       </div>
41: 
42:       {/* Content Skeleton */}
43:       <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
44:         <div className="lg:col-span-2 space-y-6">
45:           {[...Array(3)].map((_, i) => (
46:             <div key={i} className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
47:               <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
48:               <div className="space-y-3">
49:                 <div className="w-full h-4 bg-gray-200 rounded"></div>
50:                 <div className="w-3/4 h-4 bg-gray-200 rounded"></div>
51:               </div>
52:             </div>
53:           ))}
54:         </div>
55:         <div className="space-y-6">
56:           {[...Array(2)].map((_, i) => (
57:             <div key={i} className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
58:               <div className="w-24 h-6 bg-gray-200 rounded mb-4"></div>
59:               <div className="w-full h-20 bg-gray-200 rounded"></div>
60:             </div>
61:           ))}
62:         </div>
63:       </div>
64:     </div>
65:   )
66: }
</file>

<file path="src/app/jobs/[id]/page.tsx">
  1: /**
  2:  * Job Details Page
  3:  * Figma-inspired job details with all sections
  4:  */
  5: 
  6: 'use client'
  7: 
  8: import { useParams, useRouter } from 'next/navigation'
  9: import { useState } from 'react'
 10: import { ArrowLeft, Edit, CheckCircle, User, Gift, Send } from 'lucide-react'
 11: import { MapPin, GraduationCap, Clock } from 'lucide-react'
 12: 
 13: export default function JobDetailsPage() {
 14:   const params = useParams()
 15:   const router = useRouter()
 16:   const [isSaving, setIsSaving] = useState(false)
 17: 
 18:   // Mock job data - will be replaced with API call
 19:   const job = {
 20:     id: params.id,
 21:     title: 'Graphic Designer',
 22:     company: 'Spotify',
 23:     companyLogo: null,
 24:     location: 'Remote',
 25:     experience: 'Freshers',
 26:     workType: 'Fulltime',
 27:     salary: '50K',
 28:     postedDate: 'Posted 2 days ago',
 29:     colorTheme: 'yellow' as const,
 30:     description: 'In a UX Designer job, you\'ll need both types of skills to develop the next generation of products. You\'ll partner with Researchers and Designers to define and deliver new features.',
 31:     requirements: [
 32:       '3 years experience',
 33:       'Degree in Computer Science, Psychology, Design or any other related fields.',
 34:       'Proficiency in User Personas, Competitive Analysis, Empathy Maps and Information Architecture.'
 35:     ],
 36:     role: 'As a UX Designer, you will be directly responsible for helping the evolution of enterprise design systems at Google. You will engineer solutions that create shareable web components to be used in enterprise products within the organization. You\'ll support multiple different product areas and collaborate with multiple job functions across the globe.',
 37:     benefits: [
 38:       'Lorem ipsum dolor sit amet consectetur. Ut sit tincidunt nec quis vel quisque nunc egestas. Et rutrum amet volutpat orci. Magna id arcu viverra justo ut vel tortor. Quis in morbi laoreet diam neque congue nec facilisi.',
 39:       'Lorem ipsum dolor sit amet consectetur. Ut sit tincidunt nec quis vel quisque nunc egestas. Et rutrum amet volutpat orci. Magna id arcu viverra justo ut vel tortor. Quis in morbi laoreet diam neque congue nec facilisi.'
 40:     ]
 41:   }
 42: 
 43:   const colorThemes = {
 44:     purple: '#5424FD',
 45:     red: '#F5001E',
 46:     yellow: '#FCC636',
 47:   }
 48: 
 49:   const bgColor = colorThemes[job.colorTheme]
 50:   const isYellow = job.colorTheme === 'yellow'
 51:   const textColor = isYellow ? '#000000' : '#FFFFFF'
 52:   const badgeBg = isYellow ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.2)'
 53:   const badgeBorder = isYellow ? 'rgba(0, 0, 0, 0.4)' : 'rgba(255, 255, 255, 0.4)'
 54: 
 55:   const handleApply = () => {
 56:     router.push(`/jobs/${job.id}/apply`)
 57:   }
 58: 
 59:   const handleSave = async () => {
 60:     setIsSaving(true)
 61:     // TODO: Implement save functionality
 62:     await new Promise(resolve => setTimeout(resolve, 500))
 63:     setIsSaving(false)
 64:   }
 65: 
 66:   return (
 67:     <div className="min-h-screen bg-background pb-20">
 68:       {/* Header */}
 69:       <div className="sticky top-0 z-50 bg-background/95 backdrop-blur-md border-b border-border/50">
 70:         <div className="container mx-auto px-6 py-4">
 71:           <div className="flex items-center justify-between">
 72:             <button
 73:               onClick={() => router.back()}
 74:               className="flex items-center gap-3 text-foreground hover:text-primary transition-colors"
 75:             >
 76:               <ArrowLeft className="w-6 h-6" />
 77:               <span className="text-lg font-medium">Job Details</span>
 78:             </button>
 79: 
 80:             {/* User avatar placeholder */}
 81:             <div className="w-8 h-8 rounded-full bg-gradient-primary" />
 82:           </div>
 83:         </div>
 84:       </div>
 85: 
 86:       {/* Job Header Card */}
 87:       <div className="container mx-auto px-6 py-6">
 88:         <div 
 89:           className="relative rounded-3xl overflow-hidden shadow-xl"
 90:           style={{ background: bgColor }}
 91:         >
 92:           {/* Main content */}
 93:           <div className="px-4 pt-4 pb-3">
 94:             {/* Company info */}
 95:             <div className="flex items-center gap-3 mb-4">
 96:               <div className="w-12 h-12 rounded-lg bg-[#1F1F1F] flex items-center justify-center">
 97:                 <span className="text-white text-sm font-bold">
 98:                   {job.company.charAt(0)}
 99:                 </span>
100:               </div>
101: 
102:               <div className="flex flex-col gap-1">
103:                 <h1 
104:                   className="text-lg font-bold"
105:                   style={{ color: textColor }}
106:                 >
107:                   {job.title}
108:                 </h1>
109:                 <p 
110:                   className="text-xs font-medium"
111:                   style={{ color: textColor }}
112:                 >
113:                   {job.company}
114:                 </p>
115:               </div>
116:             </div>
117: 
118:             {/* Badges */}
119:             <div className="flex items-center gap-2 flex-wrap">
120:               <div
121:                 className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
122:                 style={{
123:                   background: badgeBg,
124:                   borderColor: badgeBorder,
125:                   color: textColor,
126:                 }}
127:               >
128:                 <MapPin className="w-4 h-4" />
129:                 <span>{job.location}</span>
130:               </div>
131: 
132:               <div
133:                 className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
134:                 style={{
135:                   background: badgeBg,
136:                   borderColor: badgeBorder,
137:                   color: textColor,
138:                 }}
139:               >
140:                 <GraduationCap className="w-4 h-4" />
141:                 <span>{job.experience}</span>
142:               </div>
143: 
144:               <div
145:                 className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
146:                 style={{
147:                   background: badgeBg,
148:                   borderColor: badgeBorder,
149:                   color: textColor,
150:                 }}
151:               >
152:                 <Clock className="w-4 h-4" />
153:                 <span>{job.workType}</span>
154:               </div>
155:             </div>
156:           </div>
157: 
158:           {/* White footer */}
159:           <div className="bg-card px-4 py-4 rounded-b-3xl">
160:             <div className="flex items-center justify-between">
161:               <div className="flex items-center gap-1 text-xs text-foreground font-medium">
162:                 <Clock className="w-4 h-4" />
163:                 <span>{job.postedDate}</span>
164:               </div>
165:               <div className="text-lg font-bold text-foreground">
166:                 ${job.salary}/mo
167:               </div>
168:             </div>
169:           </div>
170:         </div>
171:       </div>
172: 
173:       {/* Job Details Sections */}
174:       <div className="container mx-auto px-6 space-y-4">
175:         {/* Job Description */}
176:         <div className="bg-[#2B2B2B] rounded-3xl p-5">
177:           <div className="flex items-center gap-2 mb-4">
178:             <div className="w-10 h-10 rounded-lg bg-card/10 flex items-center justify-center">
179:               <Edit className="w-6 h-6 text-white" />
180:             </div>
181:             <h2 className="text-lg font-bold text-white">Job Description</h2>
182:           </div>
183:           <p className="text-sm text-white leading-relaxed opacity-90">
184:             {job.description}
185:           </p>
186:         </div>
187: 
188:         {/* Skills & Requirements */}
189:         <div className="bg-[#2B2B2B] rounded-3xl p-5">
190:           <div className="flex items-center gap-2 mb-4">
191:             <div className="w-10 h-10 rounded-lg bg-card/10 flex items-center justify-center">
192:               <CheckCircle className="w-6 h-6 text-white" />
193:             </div>
194:             <h2 className="text-lg font-bold text-white">Skills & Requirements</h2>
195:           </div>
196:           <ul className="space-y-2">
197:             {job.requirements.map((req, index) => (
198:               <li key={index} className="text-sm text-white leading-relaxed opacity-90 flex items-start gap-2">
199:                 <span className="text-primary mt-1">•</span>
200:                 <span>{req}</span>
201:               </li>
202:             ))}
203:           </ul>
204:         </div>
205: 
206:         {/* Your Role */}
207:         <div className="bg-[#2B2B2B] rounded-3xl p-5">
208:           <div className="flex items-center gap-2 mb-4">
209:             <div className="w-10 h-10 rounded-lg bg-card/10 flex items-center justify-center">
210:               <User className="w-6 h-6 text-white" />
211:             </div>
212:             <h2 className="text-lg font-bold text-white">Your Role</h2>
213:           </div>
214:           <p className="text-sm text-white leading-relaxed opacity-90">
215:             {job.role}
216:           </p>
217:         </div>
218: 
219:         {/* Benefits */}
220:         <div className="bg-[#2B2B2B] rounded-3xl p-5">
221:           <div className="flex items-center gap-2 mb-4">
222:             <div className="w-10 h-10 rounded-lg bg-card/10 flex items-center justify-center">
223:               <Gift className="w-6 h-6 text-white" />
224:             </div>
225:             <h2 className="text-lg font-bold text-white">Benefits</h2>
226:           </div>
227:           <div className="space-y-3">
228:             {job.benefits.map((benefit, index) => (
229:               <p key={index} className="text-sm text-white leading-relaxed opacity-90">
230:                 {benefit}
231:               </p>
232:             ))}
233:           </div>
234:         </div>
235:       </div>
236: 
237:       {/* Fixed bottom action bar */}
238:       <div className="fixed bottom-0 left-0 right-0 bg-background border-t border-border/50 p-6 z-50">
239:         <div className="container mx-auto flex items-center gap-3 relative">
240:           {/* Background progress bar */}
241:           <div className="absolute left-0 right-0 top-1/2 -translate-y-1/2 h-2 bg-card rounded-full -z-10" />
242: 
243:           {/* Save button */}
244:           <button
245:             onClick={handleSave}
246:             disabled={isSaving}
247:             className="flex items-center justify-center px-6 py-3 bg-card text-foreground font-medium text-base rounded-full transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-50 z-10"
248:           >
249:             Save
250:           </button>
251: 
252:           {/* Apply Now button */}
253:           <button
254:             onClick={handleApply}
255:             className="flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-[#5424FD] text-white font-bold text-base rounded-full transition-all duration-200 hover:scale-105 active:scale-95 z-20"
256:           >
257:             <span>Apply Now</span>
258:             <Send className="w-5 h-5 rotate-[-45deg]" />
259:           </button>
260:         </div>
261:       </div>
262:     </div>
263:   )
264: }
</file>

<file path="src/app/jobs/components/local-discover.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: 
  5: type Result = { title?: string; url: string; snippet?: string; source: string }
  6: 
  7: const SOURCE_OPTIONS = [
  8:   { id: 'indeed', label: 'Indeed' },
  9:   { id: 'linkedin', label: 'LinkedIn' },
 10:   { id: 'ziprecruiter', label: 'ZipRecruiter' },
 11:   { id: 'jobbank', label: 'Job Bank' },
 12:   { id: 'workopolis', label: 'Workopolis' },
 13:   { id: 'google', label: 'Google' },
 14: ]
 15: 
 16: export function LocalDiscover() {
 17:   const [jobTitle, setJobTitle] = useState('')
 18:   const [location, setLocation] = useState('')
 19:   const [radiusKm, setRadiusKm] = useState(25)
 20:   const [sources, setSources] = useState<string[]>(['indeed','linkedin','google'])
 21:   const [commuteFrom, setCommuteFrom] = useState('')
 22:   const [commuteMode, setCommuteMode] = useState<'driving'|'walking'|'transit'>('driving')
 23:   const [loading, setLoading] = useState(false)
 24:   const [results, setResults] = useState<Result[]>([])
 25:   const [ranked, setRanked] = useState<Array<{ url: string; title?: string; companyName?: string; score: number; reasons: string[] }>>([])
 26:   const [commutes, setCommutes] = useState<Record<string, number>>({})
 27:   const [error, setError] = useState<string | null>(null)
 28: 
 29:   const toggleSource = (id: string) => {
 30:     setSources(prev => prev.includes(id) ? prev.filter(s => s !== id) : [...prev, id])
 31:   }
 32: 
 33:   const runSearch = async () => {
 34:     setLoading(true); setError(null); setResults([])
 35:     try {
 36:       // Auto-fill location from profile if empty
 37:       let effectiveLocation = location
 38:       if (!effectiveLocation) {
 39:         try {
 40:           const prof = await fetch('/api/profile')
 41:           if (prof.ok) { const pj = await prof.json(); if (pj?.profile?.location) effectiveLocation = pj.profile.location }
 42:         } catch {}
 43:       }
 44:       const resp = await fetch('/api/v2/jobs/discover', {
 45:         method: 'POST', headers: { 'Content-Type': 'application/json' },
 46:         body: JSON.stringify({ jobTitle, location: effectiveLocation, radiusKm, sources, commuteFrom: commuteFrom || undefined, commuteMode })
 47:       })
 48:       const reqId = resp.headers.get('x-request-id') || ''
 49:       const json = await resp.json().catch(()=>({}))
 50:       if (!resp.ok || !json.success) {
 51:         if (resp.status === 401) { setError('Please sign in' + (reqId ? ` (Ref: ${reqId})` : '')); return }
 52:         if (resp.status === 429) { setError((json.error || 'Rate limit exceeded') + (reqId ? ` (Ref: ${reqId})` : '')); return }
 53:         if (resp.status >= 500) { setError('Server error during search' + (reqId ? ` (Ref: ${reqId})` : '')); return }
 54:         throw new Error(json.error || 'Search failed')
 55:       }
 56:       const items = (json.results || []) as Result[]
 57:       setResults(items)
 58:       // Rank against latest resume
 59:       try {
 60:         const rankResp = await fetch('/api/v2/jobs/rank', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobs: items }) })
 61:         const rj = await rankResp.json().catch(()=>({}))
 62:         if (rankResp.ok && rj.success) setRanked(rj.rankings || [])
 63:       } catch {}
 64:       // Commute estimates
 65:       if (commuteFrom && items.length) {
 66:         const out: Record<string, number> = {}
 67:         for (const it of items.slice(0, 12)) {
 68:           try {
 69:             const c = await fetch('/api/commute/estimate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ origin: commuteFrom, destination: `${it.title || ''} ${location}`.trim(), mode: commuteMode }) })
 70:             const cj = await c.json()
 71:             if (c.ok && cj.success) out[it.url] = cj.minutes
 72:           } catch {}
 73:         }
 74:         setCommutes(out)
 75:       }
 76:     } catch (e) {
 77:       setError(e instanceof Error ? e.message : 'Search failed')
 78:     } finally {
 79:       setLoading(false)
 80:     }
 81:   }
 82: 
 83:   return (
 84:     <div className="space-y-4">
 85:       <h2 className="text-lg font-semibold">Local Job Search</h2>
 86:       <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
 87:         <input className="border rounded p-2" placeholder="Job title (e.g., Sales Manager)" value={jobTitle} onChange={e=>setJobTitle(e.target.value)} />
 88:         <input className="border rounded p-2" placeholder="Location (e.g., Edmonton, AB)" value={location} onChange={e=>setLocation(e.target.value)} />
 89:         <div className="flex items-center gap-2">
 90:           <label className="text-sm text-muted-foreground">Radius</label>
 91:           <input type="number" min={1} max={500} className="border rounded p-2 w-24" value={radiusKm} onChange={e=>setRadiusKm(parseInt(e.target.value||'25',10))} />
 92:           <span className="text-sm">km</span>
 93:         </div>
 94:         <button onClick={runSearch} disabled={loading || !jobTitle} className="border rounded p-2 bg-blue-600 text-foreground disabled:opacity-50">{loading ? 'Searching…' : 'Search'}</button>
 95:       </div>
 96:       <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
 97:         <input className="border rounded p-2" placeholder="Commute from (address/city)" value={commuteFrom} onChange={e=>setCommuteFrom(e.target.value)} />
 98:         <select className="border rounded p-2" value={commuteMode} onChange={e=>setCommuteMode(e.target.value as any)}>
 99:           <option value="driving">Driving</option>
100:           <option value="walking">Walking</option>
101:           <option value="transit">Transit</option>
102:         </select>
103:       </div>
104:       <div className="flex flex-wrap gap-3">
105:         {SOURCE_OPTIONS.map(s => (
106:           <label key={s.id} className={`px-3 py-1 border rounded text-sm cursor-pointer ${sources.includes(s.id) ? 'bg-blue-50 border-blue-300 text-blue-700' : 'bg-white'}`}>
107:             <input type="checkbox" checked={sources.includes(s.id)} onChange={()=>toggleSource(s.id)} className="mr-2" />{s.label}
108:           </label>
109:         ))}
110:       </div>
111:       {error && <div className="text-red-600 text-sm">{error}</div>}
112:       {!loading && results.length > 0 && (
113:         <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
114:           {results.map((r, i) => {
115:             const scored = ranked.find(x => x.url === r.url)
116:             return (
117:             <div key={`${r.url}-${i}`} className="border rounded p-3 bg-card">
118:               <div className="text-sm text-muted-foreground mb-1">{r.source}</div>
119:               <a href={r.url} target="_blank" rel="noopener noreferrer" className="font-medium text-blue-700 dark:text-blue-300 line-clamp-2">{r.title || r.url}</a>
120:               {r.snippet && <div className="text-sm text-foreground dark:text-gray-300 mt-1 line-clamp-3">{r.snippet}</div>}
121:               {(scored || commutes[r.url] != null) && (
122:                 <div className="mt-2 text-xs">
123:                   {scored && <div className="font-medium">Fit Score: {scored.score}%</div>}
124:                   {commutes[r.url] != null && <div className="text-muted-foreground">Commute: {commutes[r.url]} mins ({commuteMode})</div>}
125:                   {scored && scored.reasons && scored.reasons.length > 0 && (
126:                     <ul className="list-disc ml-5 mt-1">
127:                       {scored.reasons.slice(0,2).map((rs,idx)=>(<li key={idx}>{rs}</li>))}
128:                     </ul>
129:                   )}
130:                 </div>
131:               )}
132:               <div className="mt-2 flex gap-2">
133:                 <a href={r.url} target="_blank" rel="noopener noreferrer" className="text-xs px-2 py-1 border rounded">Open</a>
134:                 <a href="/create-application?step=analyze" className="text-xs px-2 py-1 border rounded">Analyze</a>
135:               </div>
136:             </div>
137:           )})}
138:         </div>
139:       )}
140:     </div>
141:   )
142: }
</file>

<file path="src/app/layout.tsx">
 1: import type { Metadata } from 'next'
 2: import './globals.css'
 3: import { Providers } from '@/components/providers'
 4: import { ClientInit } from '@/components/client-init'
 5: import { AppShell } from '@/components/app-shell'
 6: import { initSentry } from '@/lib/sentry'
 7: import { ErrorBoundary } from '@/components/error-boundary'
 8: import { Toaster } from 'react-hot-toast'
 9: import { OnboardingRedirect } from '@/components/onboarding/OnboardingRedirect'
10: import { CommandPalette } from '@/components/command-palette'
11: 
12: export const metadata: Metadata = {
13:   title: 'Career Lever AI - AI-Powered Job Application Assistant',
14:   description: 'Customize your resume and cover letters with AI to land your dream job. Get company insights, track applications, and boost your career success.',
15:   keywords: 'resume, job application, AI, career, recruitment, cover letter',
16:   icons: { icon: '/favicon.ico', apple: '/icon-192.svg' },
17:   appleWebApp: {
18:     capable: true,
19:     statusBarStyle: 'black-translucent',
20:     title: 'Career Lever AI',
21:   },
22: }
23: 
24: export default function RootLayout({
25:   children,
26: }: {
27:   children: React.ReactNode
28: }) {
29:   if (typeof window !== 'undefined') {
30:     try { initSentry() } catch {}
31:   }
32:   return (
33:     <html lang="en">
34:       <body className="font-sans bg-background text-foreground min-h-screen" style={{ fontFamily: 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif' }}>
35:         <script dangerouslySetInnerHTML={{ __html: `
36:           // Suppress browser extension errors
37:           window.addEventListener('error', function(e) {
38:             if (e.message && e.message.includes('message channel closed')) {
39:               e.preventDefault();
40:               return true;
41:             }
42:           });
43:           window.addEventListener('unhandledrejection', function(e) {
44:             if (e.reason && e.reason.message && e.reason.message.includes('message channel closed')) {
45:               e.preventDefault();
46:               return true;
47:             }
48:           });
49:           // Theme init
50:           try{(${function(){
51:             if(typeof window!=='undefined'){window.__initTheme||(window.__initTheme=true,document.documentElement.style.setProperty('--theme-transition','opacity 0.3s ease'),document.documentElement.classList.add('theme-anim'))}
52:           }.toString()})()}catch(e){}
53:         ` }} />
54:         <ClientInit />
55:         <meta name="mobile-web-app-capable" content="yes" />
56:         <ErrorBoundary>
57:           <Providers>
58:             <Toaster
59:               position="top-right"
60:               toastOptions={{
61:                 duration: 4000,
62:                 style: {
63:                   background: 'hsl(var(--background))',
64:                   color: 'hsl(var(--foreground))',
65:                   border: '1px solid hsl(var(--border))',
66:                 },
67:               }}
68:             />
69:             <OnboardingRedirect />
70:             <CommandPalette />
71:             <AppShell>{children}</AppShell>
72:           </Providers>
73:         </ErrorBoundary>
74:         {process.env.NEXT_PUBLIC_ENABLE_SW === 'true' ? (
75:           <script dangerouslySetInnerHTML={{ __html: `if('serviceWorker' in navigator){window.addEventListener('load',()=>{navigator.serviceWorker.register('/sw.js').catch(()=>{})})}` }} />
76:         ) : (
77:           <script dangerouslySetInnerHTML={{ __html: `
78:             (function(){
79:               if ('serviceWorker' in navigator) {
80:                 navigator.serviceWorker.getRegistrations().then(function(regs){
81:                   regs.forEach(function(r){ r.unregister().catch(function(){}) })
82:                 }).catch(function(){})
83:               }
84:               if (window.caches && caches.keys) {
85:                 caches.keys().then(function(keys){
86:                   keys.forEach(function(k){ caches.delete(k).catch(function(){}) })
87:                 }).catch(function(){})
88:               }
89:             })();
90:           ` }} />
91:         )}
92:       </body>
93:     </html>
94:   )
95: }
</file>

<file path="src/app/onboarding/page.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useMemo, useState } from 'react'
  4: import Link from 'next/link'
  5: 
  6: type JobItem = { title?: string; url: string; company?: string; location?: string; source?: string }
  7: 
  8: export default function OnboardingPage() {
  9:   const [step, setStep] = useState<'welcome' | 'upload' | 'autopilot' | 'review' | 'done'>('welcome')
 10:   const [loading, setLoading] = useState(false)
 11:   const [message, setMessage] = useState('')
 12:   const [profile, setProfile] = useState<any>(null)
 13:   const [resumeFound, setResumeFound] = useState(false)
 14:   const [jobs, setJobs] = useState<JobItem[]>([])
 15:   const [selectedIdx, setSelectedIdx] = useState<number | null>(null)
 16: 
 17:   useEffect(() => {
 18:     ;(async () => {
 19:       try {
 20:         const [p, r] = await Promise.all([
 21:           fetch('/api/profile'),
 22:           fetch('/api/resume/list')
 23:         ])
 24:         if (p.ok) { const pj = await p.json(); setProfile(pj.profile) }
 25:         if (r.ok) { const rj = await r.json(); setResumeFound((rj.resumes || []).length > 0) }
 26:       } catch {}
 27:     })()
 28:   }, [])
 29: 
 30:   const startAutopilot = async () => {
 31:     setLoading(true)
 32:     setMessage('Searching public job boards…')
 33:     try {
 34:       const keywords = (profile?.skills && Array.isArray(profile.skills) && profile.skills.length) ? profile.skills.slice(0, 8).join(', ') : ''
 35:       const locations = typeof profile?.location === 'string' ? profile.location : ''
 36:       const resp = await fetch('/api/job-boards/autopilot/search', {
 37:         method: 'POST', headers: { 'Content-Type': 'application/json' },
 38:         body: JSON.stringify({ keywords, locations, radiusKm: 150, days: 30, limit: 20 })
 39:       })
 40:       const json = await resp.json().catch(()=>({}))
 41:       if (!resp.ok || !json.success) throw new Error(json.error || 'Search failed')
 42:       setJobs(json.results || [])
 43:       setStep('review')
 44:     } catch (e: any) {
 45:       setMessage(e?.message || 'Search failed. Please try again.')
 46:     } finally { setLoading(false) }
 47:   }
 48: 
 49:   const useSelectedJob = async () => {
 50:     if (selectedIdx == null) return
 51:     const j = jobs[selectedIdx]
 52:     try {
 53:       // Prefill for analyze step via localStorage bridge
 54:       if (j?.title) localStorage.setItem('job:title', j.title)
 55:       if (j?.company) localStorage.setItem('job:company', j.company)
 56:       if (j?.url) localStorage.setItem('job:url', j.url)
 57:     } catch {}
 58:     // Mark onboarding complete
 59:     try { await fetch('/api/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ preferences: { onboardingCompleted: true } }) }) } catch {}
 60:     setStep('done')
 61:   }
 62: 
 63:   return (
 64:     <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
 65:       <div className="mx-auto max-w-4xl px-4 py-8">
 66:         <div className="mb-6">
 67:           <h1 className="text-2xl font-bold">Welcome to Career Lever</h1>
 68:           <p className="text-sm text-foreground">Well set you up with resume and job matches in a few steps.</p>
 69:         </div>
 70: 
 71:         {step === 'welcome' && (
 72:           <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border">
 73:             <div className="text-sm text-foreground">Start by uploading a resume or build one.</div>
 74:             <div className="flex gap-3">
 75:               <button className="px-4 py-2 border rounded" onClick={() => setStep('upload')}>Upload Resume</button>
 76:               <Link className="px-4 py-2 border rounded" href="/resume-builder">Build a Resume</Link>
 77:               {resumeFound && <button className="px-4 py-2 border rounded" onClick={() => setStep('autopilot')}>Use Existing Resume</button>}
 78:             </div>
 79:           </div>
 80:         )}
 81: 
 82:         {step === 'upload' && (
 83:           <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border">
 84:             <div className="text-sm text-foreground">Upload PDF resume. Well extract keywords and location automatically.</div>
 85:             <form className="space-y-3" onSubmit={async (e) => {
 86:               e.preventDefault(); setLoading(true); setMessage('Uploading resume…')
 87:               const form = e.target as HTMLFormElement
 88:               const fd = new FormData(form)
 89:               try {
 90:                 const r = await fetch('/api/resume/upload', { method: 'POST', body: fd })
 91:                 if (r.ok) { setStep('autopilot') } else { setMessage('Upload failed') }
 92:               } catch { setMessage('Upload failed') }
 93:               setLoading(false)
 94:             }}>
 95:               <input type="file" name="resume" accept="application/pdf" className="block" required />
 96:               <button type="submit" className="px-4 py-2 border rounded">Upload</button>
 97:               {message && <div className="text-xs text-muted-foreground">{message}</div>}
 98:             </form>
 99:           </div>
100:         )}
101: 
102:         {step === 'autopilot' && (
103:           <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border">
104:             <div className="text-sm text-foreground">Were finding public listings that match your resume.</div>
105:             <button onClick={startAutopilot} disabled={loading} className="px-4 py-2 border rounded">{loading ? 'Searching…' : 'Start Search'}</button>
106:             {loading && (
107:               <div className="mt-4">
108:                 <div className="h-2 w-full bg-gray-200 rounded overflow-hidden">
109:                   <div className="h-2 w-2/3 bg-gradient-to-r from-blue-400 to-purple-400 animate-pulse" />
110:                 </div>
111:                 <div className="text-xs text-muted-foreground mt-2">{message}</div>
112:               </div>
113:             )}
114:           </div>
115:         )}
116: 
117:         {step === 'review' && (
118:           <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border">
119:             <div className="text-sm text-foreground">Select a job to proceed through Analyze → Research → Customize.</div>
120:             <div className="max-h-96 overflow-y-auto space-y-2">
121:               {jobs.map((j, idx) => (
122:                 <div key={idx} className={`border rounded p-3 flex items-center justify-between ${selectedIdx===idx?'border-blue-500 bg-blue-50':'border-gray-200'}`}>
123:                   <div className="min-w-0">
124:                     <div className="font-medium truncate">{j.title || 'Untitled role'}</div>
125:                     <div className="text-xs text-muted-foreground truncate">{[j.company, j.location, j.source].filter(Boolean).join(' • ')}</div>
126:                   </div>
127:                   <div className="flex items-center gap-2">
128:                     {j.url && <a href={j.url} target="_blank" rel="noopener noreferrer" className="px-2 py-1 border rounded text-xs">Open</a>}
129:                     <button className="px-2 py-1 border rounded text-xs" onClick={()=>setSelectedIdx(idx)}>{selectedIdx===idx?'Selected':'Select'}</button>
130:                   </div>
131:                 </div>
132:               ))}
133:               {jobs.length===0 && <div className="text-xs text-muted-foreground">No results. Try running search again.</div>}
134:             </div>
135:             <div className="flex gap-3">
136:               <button onClick={()=>setStep('autopilot')} className="px-3 py-2 border rounded text-sm">Run Again</button>
137:               <button onClick={useSelectedJob} disabled={selectedIdx==null} className="px-3 py-2 border rounded text-sm">Use This Job</button>
138:             </div>
139:           </div>
140:         )}
141: 
142:         {step === 'done' && (
143:           <div className="space-y-4 bg-card/70 backdrop-blur rounded-lg p-6 border text-center">
144:             <div className="text-sm text-foreground">Great! Lets analyze the job next.</div>
145:             <Link className="px-4 py-2 border rounded" href="/create-application?step=analyze">Go to Analyze</Link>
146:           </div>
147:         )}
148:       </div>
149:     </div>
150:   )
151: }
</file>

<file path="src/app/onboarding/quiz/page.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { useRouter } from 'next/navigation'
  5: import { useSession } from 'next-auth/react'
  6: import { ProgressBar } from '@/components/onboarding/ProgressBar'
  7: import { QuizQuestion } from '@/components/onboarding/QuizQuestion'
  8: import { SuccessAnimation } from '@/components/onboarding/SuccessAnimation'
  9: import './styles.css'
 10: import {
 11:   QuizAnswers,
 12:   CurrentSituation,
 13:   WorkPreference,
 14:   Timeline,
 15:   getExperienceLevelLabel,
 16:   saveQuizProgress,
 17:   loadQuizProgress,
 18:   clearQuizProgress,
 19:   calculateUrgency
 20: } from '@/lib/onboarding-utils'
 21: 
 22: const TOTAL_STEPS = 6
 23: 
 24: export default function OnboardingQuizPage() {
 25:   const router = useRouter()
 26:   const { status, update } = useSession()
 27:   const [currentStep, setCurrentStep] = useState(1)
 28:   const [showSuccess, setShowSuccess] = useState(false)
 29:   const [saving, setSaving] = useState(false)
 30:   
 31:   // Quiz answers
 32:   const [answers, setAnswers] = useState<Partial<QuizAnswers>>({
 33:     workPreferences: [],
 34:     preferredLocation: '',
 35:     yearsOfExperience: 5,
 36:     careerInterests: [] // Multi-select career interests
 37:   })
 38:   const [hasResume, setHasResume] = useState<boolean | null>(null)
 39: 
 40:   // Autocomplete state (removed - no longer needed for multi-select)
 41: 
 42:   // Load saved progress on mount
 43:   useEffect(() => {
 44:     const saved = loadQuizProgress()
 45:     if (saved) {
 46:       setAnswers(saved.answers)
 47:       setCurrentStep(saved.currentStep)
 48:     }
 49:   }, [])
 50: 
 51:   // Redirect if not authenticated
 52:   useEffect(() => {
 53:     if (status === 'unauthenticated') {
 54:       router.push('/auth/signin?callbackUrl=/onboarding/quiz')
 55:     }
 56:   }, [status, router])
 57: 
 58:   // Auto-save progress
 59:   useEffect(() => {
 60:     if (currentStep > 1) {
 61:       saveQuizProgress(answers, currentStep)
 62:     }
 63:   }, [answers, currentStep])
 64: 
 65:   // Handle role search (removed - no longer needed for multi-select)
 66: 
 67:   const handleNext = () => {
 68:     if (currentStep < TOTAL_STEPS) {
 69:       setCurrentStep(currentStep + 1)
 70:     } else {
 71:       handleSubmit()
 72:     }
 73:   }
 74: 
 75:   const handleBack = () => {
 76:     if (currentStep > 1) {
 77:       setCurrentStep(currentStep - 1)
 78:     }
 79:   }
 80: 
 81:   const handleSubmit = async () => {
 82:     setSaving(true)
 83:     
 84:     try {
 85:       // Calculate urgency
 86:       const urgency = calculateUrgency(
 87:         answers.currentSituation!,
 88:         answers.timeline
 89:       )
 90: 
 91:       const response = await fetch('/api/onboarding/quiz', {
 92:         method: 'POST',
 93:         headers: { 'Content-Type': 'application/json' },
 94:         body: JSON.stringify({
 95:           ...answers,
 96:           urgency,
 97:           completedAt: new Date().toISOString()
 98:         })
 99:       })
100: 
101:       if (!response.ok) {
102:         throw new Error('Failed to save quiz answers')
103:       }
104: 
105:       // Clear saved progress
106:       clearQuizProgress()
107: 
108:       // Update session to reflect onboarding completion
109:       await update()
110: 
111:       // Show success animation
112:       setShowSuccess(true)
113:     } catch (error) {
114:       console.error('[ONBOARDING] Failed to save quiz:', error)
115:       alert('Failed to save your answers. Please try again.')
116:       setSaving(false)
117:     }
118:   }
119: 
120:   const handleSuccessComplete = () => {
121:     // Route based on resume answer
122:     if (hasResume === false) {
123:       // No resume - go to resume builder
124:       router.push('/resume-builder')
125:     } else if (hasResume === true) {
126:       // Has resume - go to career finder to upload it
127:       router.push('/career-finder')
128:     } else {
129:       // Default - go to career finder
130:       router.push('/career-finder')
131:     }
132:   }
133: 
134:   // Check if current step is complete
135:   const isStepComplete = (): boolean => {
136:     switch (currentStep) {
137:       case 1:
138:         return !!answers.currentSituation
139:       case 2:
140:         return answers.yearsOfExperience !== undefined
141:       case 3:
142:         return !!(answers.careerInterests && answers.careerInterests.length > 0)
143:       case 4:
144:         return hasResume !== null
145:       case 5:
146:         return answers.workPreferences!.length > 0
147:       case 6:
148:         // Timeline only required for actively searching or career change
149:         if (answers.currentSituation === 'actively_searching' || answers.currentSituation === 'career_change') {
150:           return !!answers.timeline
151:         }
152:         return true
153:       default:
154:         return false
155:     }
156:   }
157: 
158:   if (status === 'loading') {
159:     return (
160:       <div className="flex items-center justify-center min-h-screen">
161:         <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
162:       </div>
163:     )
164:   }
165: 
166:   if (showSuccess) {
167:     return <SuccessAnimation onComplete={handleSuccessComplete} />
168:   }
169: 
170:   return (
171:     <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
172:       <ProgressBar currentStep={currentStep} totalSteps={TOTAL_STEPS} />
173: 
174:       {/* Question 1: Current Situation */}
175:       {currentStep === 1 && (
176:         <QuizQuestion
177:           title="What's your current situation?"
178:           subtitle="This helps us understand your job search urgency"
179:           onNext={handleNext}
180:           showBack={false}
181:           nextDisabled={!isStepComplete()}
182:         >
183:           <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
184:             {[
185:               { value: 'actively_searching', icon: '🔍', label: 'Actively job searching', desc: 'I need a job soon' },
186:               { value: 'open_to_offers', icon: '👀', label: 'Open to new opportunities', desc: 'Exploring options' },
187:               { value: 'employed_not_looking', icon: '💼', label: 'Employed, not looking', desc: 'Just browsing' },
188:               { value: 'student', icon: '🎓', label: 'Student/Recent graduate', desc: 'Starting my career' },
189:               { value: 'career_change', icon: '🚀', label: 'Career change', desc: 'Switching industries' }
190:             ].map(option => (
191:               <button
192:                 key={option.value}
193:                 onClick={() => setAnswers({ ...answers, currentSituation: option.value as CurrentSituation })}
194:                 className={`p-4 rounded-xl border-2 text-left transition-all min-h-[80px] ${
195:                   answers.currentSituation === option.value
196:                     ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
197:                     : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-700'
198:                 }`}
199:               >
200:                 <div className="flex items-start gap-3">
201:                   <span className="text-2xl">{option.icon}</span>
202:                   <div className="flex-1">
203:                     <div className="font-semibold text-gray-900 dark:text-white mb-1">
204:                       {option.label}
205:                     </div>
206:                     <div className="text-sm text-gray-600 dark:text-gray-400">
207:                       {option.desc}
208:                     </div>
209:                   </div>
210:                   {answers.currentSituation === option.value && (
211:                     <span className="text-blue-500 text-xl">✓</span>
212:                   )}
213:                 </div>
214:               </button>
215:             ))}
216:           </div>
217:         </QuizQuestion>
218:       )}
219: 
220:       {/* Question 2: Years of Experience */}
221:       {currentStep === 2 && (
222:         <QuizQuestion
223:           title="How many years of experience do you have?"
224:           subtitle="This helps us match you with the right seniority level"
225:           onNext={handleNext}
226:           onBack={handleBack}
227:           nextDisabled={!isStepComplete()}
228:         >
229:           <div className="space-y-6">
230:             <div className="bg-card rounded-xl p-6 shadow-lg">
231:               <div className="text-center mb-6">
232:                 <div className="text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
233:                   {answers.yearsOfExperience}
234:                 </div>
235:                 <div className="text-lg text-gray-600 dark:text-gray-400">
236:                   {getExperienceLevelLabel(answers.yearsOfExperience || 0)}
237:                 </div>
238:               </div>
239: 
240:               <input
241:                 type="range"
242:                 min="0"
243:                 max="30"
244:                 value={answers.yearsOfExperience || 5}
245:                 onChange={(e) => setAnswers({ ...answers, yearsOfExperience: parseInt(e.target.value) })}
246:                 className="w-full h-3 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
247:               />
248: 
249:               <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-2">
250:                 <span>0</span>
251:                 <span>5</span>
252:                 <span>10</span>
253:                 <span>15</span>
254:                 <span>20</span>
255:                 <span>30+</span>
256:               </div>
257:             </div>
258: 
259:             <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4">
260:               <div className="flex items-start gap-3">
261:                 <span className="text-2xl">💡</span>
262:                 <div className="text-sm text-blue-900 dark:text-blue-100">
263:                   {answers.yearsOfExperience === 0 && "You're early in your career - we'll focus on entry-level opportunities"}
264:                   {answers.yearsOfExperience! >= 1 && answers.yearsOfExperience! <= 2 && "You have some experience - we'll target junior to mid-level roles"}
265:                   {answers.yearsOfExperience! >= 3 && answers.yearsOfExperience! <= 5 && "You're a mid-level professional - we'll find senior opportunities"}
266:                   {answers.yearsOfExperience! >= 6 && answers.yearsOfExperience! <= 10 && "You're an experienced professional - we'll target senior and lead roles"}
267:                   {answers.yearsOfExperience! > 10 && "You're a seasoned professional - we'll focus on leadership and executive positions"}
268:                 </div>
269:               </div>
270:             </div>
271:           </div>
272:         </QuizQuestion>
273:       )}
274: 
275:       {/* Question 3: Career Interests (MULTI-SELECT) */}
276:       {currentStep === 3 && (
277:         <QuizQuestion
278:           title="What career areas interest you?"
279:           subtitle="Select all that apply"
280:           onNext={handleNext}
281:           onBack={handleBack}
282:           nextDisabled={!isStepComplete()}
283:         >
284:           <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
285:             {[
286:               { value: 'technology', icon: '💻', label: 'Technology' },
287:               { value: 'finance', icon: '💰', label: 'Finance' },
288:               { value: 'healthcare', icon: '🏥', label: 'Healthcare' },
289:               { value: 'education', icon: '📚', label: 'Education' },
290:               { value: 'marketing', icon: '📱', label: 'Marketing' },
291:               { value: 'sales', icon: '💼', label: 'Sales' },
292:               { value: 'operations', icon: '⚙️', label: 'Operations' },
293:               { value: 'creative', icon: '🎨', label: 'Creative' },
294:               { value: 'engineering', icon: '🔧', label: 'Engineering' },
295:               { value: 'legal', icon: '⚖️', label: 'Legal' },
296:               { value: 'hr', icon: '👥', label: 'Human Resources' },
297:               { value: 'consulting', icon: '📊', label: 'Consulting' }
298:             ].map(option => {
299:               const isSelected = answers.careerInterests?.includes(option.value)
300:               return (
301:                 <button
302:                   key={option.value}
303:                   onClick={() => {
304:                     const current = answers.careerInterests || []
305:                     const updated = isSelected
306:                       ? current.filter((i: string) => i !== option.value)
307:                       : [...current, option.value]
308:                     setAnswers({ ...answers, careerInterests: updated })
309:                   }}
310:                   className={`p-4 rounded-xl border-2 text-center transition-all min-h-[100px] ${
311:                     isSelected
312:                       ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
313:                       : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-700'
314:                   }`}
315:                 >
316:                   <div className="text-3xl mb-2">{option.icon}</div>
317:                   <div className="font-semibold text-gray-900 dark:text-white text-sm">
318:                     {option.label}
319:                   </div>
320:                   {isSelected && (
321:                     <div className="mt-2 text-blue-500 text-xl">✓</div>
322:                   )}
323:                 </button>
324:               )
325:             })}
326:           </div>
327:         </QuizQuestion>
328:       )}
329: 
330:       {/* Question 4: Resume Question */}
331:       {currentStep === 4 && (
332:         <QuizQuestion
333:           title="Do you have a resume ready to upload?"
334:           subtitle="This helps us guide you to the right place"
335:           onNext={handleNext}
336:           onBack={handleBack}
337:           nextDisabled={!isStepComplete()}
338:         >
339:           <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 max-w-2xl mx-auto">
340:             <button
341:               onClick={() => setHasResume(true)}
342:               className={`p-6 rounded-xl border-2 text-center transition-all min-h-[160px] ${
343:                 hasResume === true
344:                   ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
345:                   : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-700'
346:               }`}
347:             >
348:               <div className="text-5xl mb-3">📄</div>
349:               <div className="font-bold text-xl text-gray-900 dark:text-white mb-2">
350:                 Yes, I have a resume
351:               </div>
352:               <div className="text-sm text-gray-600 dark:text-gray-400">
353:                 I&apos;ll upload my existing resume
354:               </div>
355:               {hasResume === true && (
356:                 <div className="mt-3 text-blue-500 text-2xl">✓</div>
357:               )}
358:             </button>
359:             
360:             <button
361:               onClick={() => setHasResume(false)}
362:               className={`p-6 rounded-xl border-2 text-center transition-all min-h-[160px] ${
363:                 hasResume === false
364:                   ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
365:                   : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-700'
366:               }`}
367:             >
368:               <div className="text-5xl mb-3">✏️</div>
369:               <div className="font-bold text-xl text-gray-900 dark:text-white mb-2">
370:                 No, I need to build one
371:               </div>
372:               <div className="text-sm text-gray-600 dark:text-gray-400">
373:                 I&apos;ll create a new resume from scratch
374:               </div>
375:               {hasResume === false && (
376:                 <div className="mt-3 text-blue-500 text-2xl">✓</div>
377:               )}
378:             </button>
379:           </div>
380:           
381:           <div className="mt-6 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4 max-w-2xl mx-auto">
382:             <div className="flex items-start gap-3">
383:               <span className="text-2xl">💡</span>
384:               <div className="text-sm text-blue-900 dark:text-blue-100">
385:                 {hasResume === true && "Great! You&apos;ll be able to upload your resume and we&apos;ll optimize it for your target jobs."}
386:                 {hasResume === false && "No problem! Our resume builder will guide you through creating a professional resume step-by-step."}
387:                 {hasResume === null && "Choose the option that best describes your situation."}
388:               </div>
389:             </div>
390:           </div>
391:         </QuizQuestion>
392:       )}
393: 
394:       {/* Question 5: Work Preferences */}
395:       {currentStep === 5 && (
396:         <QuizQuestion
397:           title="Where do you want to work?"
398:           subtitle="Select all that apply"
399:           onNext={handleNext}
400:           onBack={handleBack}
401:           nextDisabled={!isStepComplete()}
402:         >
403:           <div className="space-y-6">
404:             {/* Work preference chips */}
405:             <div>
406:               <div className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-3">Work arrangement:</div>
407:               <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
408:                 {[
409:                   { value: 'remote', icon: '🏡', label: 'Remote', desc: 'Work from anywhere' },
410:                   { value: 'onsite', icon: '🏢', label: 'On-site', desc: 'In the office' },
411:                   { value: 'hybrid', icon: '🔄', label: 'Hybrid', desc: 'Mix of both' }
412:                 ].map(option => {
413:                   const isSelected = answers.workPreferences?.includes(option.value as WorkPreference)
414:                   return (
415:                     <button
416:                       key={option.value}
417:                       onClick={() => {
418:                         const current = answers.workPreferences || []
419:                         const updated = isSelected
420:                           ? current.filter(p => p !== option.value)
421:                           : [...current, option.value as WorkPreference]
422:                         setAnswers({ ...answers, workPreferences: updated })
423:                       }}
424:                       className={`p-4 rounded-xl border-2 text-center transition-all min-h-[100px] ${
425:                         isSelected
426:                           ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
427:                           : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300'
428:                       }`}
429:                     >
430:                       <div className="text-3xl mb-2">{option.icon}</div>
431:                       <div className="font-semibold text-gray-900 dark:text-white mb-1">
432:                         {option.label}
433:                       </div>
434:                       <div className="text-xs text-gray-600 dark:text-gray-400">
435:                         {option.desc}
436:                       </div>
437:                       {isSelected && (
438:                         <div className="mt-2 text-blue-500 text-xl">✓</div>
439:                       )}
440:                     </button>
441:                   )
442:                 })}
443:               </div>
444:             </div>
445: 
446:             {/* Location input */}
447:             <div>
448:               <label className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-3">
449:                 Preferred city/region (optional):
450:               </label>
451:               <input
452:                 type="text"
453:                 value={answers.preferredLocation || ''}
454:                 onChange={(e) => setAnswers({ ...answers, preferredLocation: e.target.value })}
455:                 placeholder="e.g., Edmonton, AB or New York, NY"
456:                 className="w-full px-4 py-3 rounded-xl border-2 border-gray-200 dark:border-gray-700 bg-card text-gray-900 dark:text-white placeholder-gray-400 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all"
457:               />
458:               <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
459:                 💡 Leave blank if you selected &quot;Remote&quot; only
460:               </p>
461:             </div>
462:           </div>
463:         </QuizQuestion>
464:       )}
465: 
466:       {/* Question 6: Timeline (conditional) */}
467:       {currentStep === 6 && (
468:         <QuizQuestion
469:           title="What's your timeline?"
470:           subtitle={
471:             answers.currentSituation === 'actively_searching' || answers.currentSituation === 'career_change'
472:               ? 'When do you need a new job?'
473:               : 'This helps us prioritize opportunities'
474:           }
475:           onNext={handleNext}
476:           onBack={handleBack}
477:           nextDisabled={!isStepComplete()}
478:           nextLabel={saving ? 'Saving...' : 'Complete Profile'}
479:         >
480:           <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
481:             {[
482:               { value: 'asap', icon: '⚡', label: 'ASAP (within 2 weeks)', desc: 'I need a job urgently' },
483:               { value: '1-3_months', icon: '📅', label: '1-3 months', desc: 'Actively searching' },
484:               { value: '3-6_months', icon: '🗓️', label: '3-6 months', desc: 'Planning ahead' },
485:               { value: 'flexible', icon: '🕐', label: 'Flexible', desc: 'No rush' }
486:             ].map(option => (
487:               <button
488:                 key={option.value}
489:                 onClick={() => setAnswers({ ...answers, timeline: option.value as Timeline })}
490:                 className={`p-4 rounded-xl border-2 text-left transition-all min-h-[80px] ${
491:                   answers.timeline === option.value
492:                     ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 shadow-lg'
493:                     : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300'
494:                 }`}
495:               >
496:                 <div className="flex items-start gap-3">
497:                   <span className="text-2xl">{option.icon}</span>
498:                   <div className="flex-1">
499:                     <div className="font-semibold text-gray-900 dark:text-white mb-1">
500:                       {option.label}
501:                     </div>
502:                     <div className="text-sm text-gray-600 dark:text-gray-400">
503:                       {option.desc}
504:                     </div>
505:                   </div>
506:                   {answers.timeline === option.value && (
507:                     <span className="text-blue-500 text-xl">✓</span>
508:                   )}
509:                 </div>
510:               </button>
511:             ))}
512:           </div>
513:         </QuizQuestion>
514:       )}
515:     </div>
516:   )
517: }
</file>

<file path="src/app/payment/page.tsx">
  1: 'use client'
  2: 
  3: import { useState, Suspense } from 'react'
  4: import { useRouter, useSearchParams } from 'next/navigation'
  5: import { Check, Loader2, CreditCard } from 'lucide-react'
  6: 
  7: function PaymentContent() {
  8:   const router = useRouter()
  9:   const searchParams = useSearchParams()
 10:   const [loading, setLoading] = useState(false)
 11:   const cancelled = searchParams.get('payment') === 'cancelled'
 12: 
 13:   const handleSubscribe = async () => {
 14:     setLoading(true)
 15:     try {
 16:       const response = await fetch('/api/stripe/create-checkout', {
 17:         method: 'POST',
 18:         headers: { 'Content-Type': 'application/json' },
 19:         body: JSON.stringify({})
 20:       })
 21: 
 22:       const data = await response.json()
 23:       
 24:       if (data.url) {
 25:         window.location.href = data.url
 26:       }
 27:     } catch (error) {
 28:       console.error('Payment error:', error)
 29:       setLoading(false)
 30:     }
 31:   }
 32: 
 33:   return (
 34:     <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 flex items-center justify-center p-4">
 35:       <div className="max-w-4xl w-full">
 36:         {/* Header */}
 37:         <div className="text-center mb-8">
 38:           <h1 className="text-5xl font-bold text-foreground mb-4">
 39:             🚀 Career Lever AI Pro
 40:           </h1>
 41:           <p className="text-xl text-gray-600">
 42:             Your AI-powered career companion
 43:           </p>
 44:         </div>
 45: 
 46:         {cancelled && (
 47:           <div className="mb-6 p-4 bg-yellow-50 border-2 border-yellow-300 rounded-xl text-center">
 48:             <p className="text-yellow-800 font-semibold">
 49:               Payment was cancelled. Ready to try again?
 50:             </p>
 51:           </div>
 52:         )}
 53: 
 54:         {/* Pricing Card */}
 55:         <div className="bg-card rounded-2xl shadow-2xl p-8 border-4 border-blue-500 relative overflow-hidden">
 56:           {/* Popular Badge */}
 57:           <div className="absolute top-0 right-0 bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-2 rounded-bl-2xl font-bold">
 58:             LAUNCH SPECIAL
 59:           </div>
 60: 
 61:           <div className="text-center mb-8 mt-4">
 62:             <div className="text-6xl font-bold text-foreground mb-2">
 63:               $4.99
 64:               <span className="text-2xl text-gray-600 font-normal">/week</span>
 65:             </div>
 66:             <p className="text-gray-600">Cancel anytime • No hidden fees</p>
 67:           </div>
 68: 
 69:           {/* Features */}
 70:           <div className="space-y-4 mb-8">
 71:             <h3 className="text-xl font-bold text-foreground mb-4">What's Included:</h3>
 72:             
 73:             {[
 74:               'AI-Powered Resume Builder with 6 templates',
 75:               'Unlimited Job Search across 25+ boards',
 76:               'AI Interview Prep with company-specific questions',
 77:               'Salary Negotiation Guide with market data',
 78:               'Personalized Cover Letter Generator',
 79:               'Email Outreach to hiring managers',
 80:               'Application Tracking & Analytics',
 81:               'Resume A/B Testing & Optimization',
 82:               'ATS Score Checker',
 83:               'Priority Support'
 84:             ].map((feature, i) => (
 85:               <div key={i} className="flex items-start gap-3">
 86:                 <div className="flex-shrink-0 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center mt-0.5">
 87:                   <Check className="w-4 h-4 text-white" />
 88:                 </div>
 89:                 <span className="text-gray-700">{feature}</span>
 90:               </div>
 91:             ))}
 92:           </div>
 93: 
 94:           {/* CTA Button */}
 95:           <button
 96:             onClick={handleSubscribe}
 97:             disabled={loading}
 98:             className="w-full py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-bold text-lg hover:from-blue-700 hover:to-purple-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3 shadow-lg"
 99:           >
100:             {loading ? (
101:               <>
102:                 <Loader2 className="w-6 h-6 animate-spin" />
103:                 Processing...
104:               </>
105:             ) : (
106:               <>
107:                 <CreditCard className="w-6 h-6" />
108:                 Subscribe Now
109:               </>
110:             )}
111:           </button>
112: 
113:           <p className="text-center text-sm text-gray-500 mt-4">
114:             Secure payment powered by Stripe • Cancel anytime
115:           </p>
116:         </div>
117: 
118:         {/* Trust Badges */}
119:         <div className="mt-8 text-center">
120:           <div className="flex items-center justify-center gap-8 text-gray-600">
121:             <div className="flex items-center gap-2">
122:               <Check className="w-5 h-5 text-green-500" />
123:               <span>Secure Payment</span>
124:             </div>
125:             <div className="flex items-center gap-2">
126:               <Check className="w-5 h-5 text-green-500" />
127:               <span>Cancel Anytime</span>
128:             </div>
129:             <div className="flex items-center gap-2">
130:               <Check className="w-5 h-5 text-green-500" />
131:               <span>Money-Back Guarantee</span>
132:             </div>
133:           </div>
134:         </div>
135: 
136:         {/* FAQ */}
137:         <div className="mt-12 bg-card rounded-xl p-6 shadow-lg">
138:           <h3 className="text-xl font-bold text-foreground mb-4">Frequently Asked Questions</h3>
139:           
140:           <div className="space-y-4">
141:             <div>
142:               <h4 className="font-semibold text-foreground mb-1">Can I cancel anytime?</h4>
143:               <p className="text-gray-600">Yes! Cancel anytime from your account settings. No questions asked.</p>
144:             </div>
145:             
146:             <div>
147:               <h4 className="font-semibold text-foreground mb-1">Is there a free trial?</h4>
148:               <p className="text-gray-600">We offer a 7-day money-back guarantee. Try it risk-free!</p>
149:             </div>
150:             
151:             <div>
152:               <h4 className="font-semibold text-foreground mb-1">What payment methods do you accept?</h4>
153:               <p className="text-gray-600">We accept all major credit cards through Stripe's secure payment system.</p>
154:             </div>
155:             
156:             <div>
157:               <h4 className="font-semibold text-foreground mb-1">How does billing work?</h4>
158:               <p className="text-gray-600">You'll be charged $4.99 every week. You can cancel anytime before your next billing date.</p>
159:             </div>
160:           </div>
161:         </div>
162:       </div>
163:     </div>
164:   )
165: }
166: 
167: export default function PaymentPage() {
168:   return (
169:     <Suspense fallback={<div className="min-h-screen flex items-center justify-center"><Loader2 className="w-12 h-12 animate-spin text-blue-600" /></div>}>
170:       <PaymentContent />
171:     </Suspense>
172:   )
173: }
</file>

<file path="src/app/resume-builder-v2/page.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { QuickStart } from '@/components/resume-builder/quick-start'
  5: import { TemplateSelector } from '@/components/resume-builder/template-selector'
  6: import { ResumePreview } from '@/components/resume-builder/resume-preview'
  7: import { BulletPointGenerator } from '@/components/resume-builder/bullet-point-generator'
  8: import { ATSChecker } from '@/components/resume-builder/ats-checker'
  9: import { ProgressTracker } from '@/components/resume-builder/progress-tracker'
 10: import { ExportHub } from '@/components/resume-builder/export-hub'
 11: import { Input } from '@/components/ui/input'
 12: import { Textarea } from '@/components/ui/textarea'
 13: import { Button } from '@/components/ui/button'
 14: import { Plus, Trash2, Save, ArrowRight } from 'lucide-react'
 15: 
 16: interface ResumeData {
 17:   personalInfo: {
 18:     fullName: string
 19:     email: string
 20:     phone: string
 21:     location: string
 22:     linkedin?: string
 23:     website?: string
 24:     summary: string
 25:   }
 26:   experience: Array<{
 27:     id: string
 28:     company: string
 29:     position: string
 30:     location: string
 31:     startDate: string
 32:     endDate: string
 33:     current: boolean
 34:     achievements: string[]
 35:   }>
 36:   education: Array<{
 37:     id: string
 38:     institution: string
 39:     degree: string
 40:     field: string
 41:     graduationDate: string
 42:   }>
 43:   skills: {
 44:     technical: string[]
 45:     soft: string[]
 46:   }
 47: }
 48: 
 49: const EMPTY_RESUME: ResumeData = {
 50:   personalInfo: {
 51:     fullName: '',
 52:     email: '',
 53:     phone: '',
 54:     location: '',
 55:     linkedin: '',
 56:     website: '',
 57:     summary: ''
 58:   },
 59:   experience: [],
 60:   education: [],
 61:   skills: {
 62:     technical: [],
 63:     soft: []
 64:   }
 65: }
 66: 
 67: export default function ResumeBuilderV2Page() {
 68:   const [step, setStep] = useState<'quick-start' | 'builder'>('quick-start')
 69:   const [resume, setResume] = useState<ResumeData>(EMPTY_RESUME)
 70:   const [selectedTemplate, setSelectedTemplate] = useState('modern')
 71:   const [activeSection, setActiveSection] = useState<'personal' | 'experience' | 'education' | 'skills'>('personal')
 72:   const [editingExpIndex, setEditingExpIndex] = useState<number | null>(null)
 73: 
 74:   const handleResumeImported = (data: any) => {
 75:     if (data) {
 76:       setResume(data)
 77:     }
 78:     setStep('builder')
 79:   }
 80: 
 81:   const updatePersonalInfo = (field: string, value: string) => {
 82:     setResume(prev => ({
 83:       ...prev,
 84:       personalInfo: { ...prev.personalInfo, [field]: value }
 85:     }))
 86:   }
 87: 
 88:   const addExperience = () => {
 89:     const newExp = {
 90:       id: Date.now().toString(),
 91:       company: '',
 92:       position: '',
 93:       location: '',
 94:       startDate: '',
 95:       endDate: '',
 96:       current: false,
 97:       achievements: []
 98:     }
 99:     setResume(prev => ({
100:       ...prev,
101:       experience: [...prev.experience, newExp]
102:     }))
103:     setEditingExpIndex(resume.experience.length)
104:   }
105: 
106:   const updateExperience = (index: number, field: string, value: any) => {
107:     setResume(prev => ({
108:       ...prev,
109:       experience: prev.experience.map((exp, i) =>
110:         i === index ? { ...exp, [field]: value } : exp
111:       )
112:     }))
113:   }
114: 
115:   const addAchievement = (expIndex: number, achievement: string) => {
116:     setResume(prev => ({
117:       ...prev,
118:       experience: prev.experience.map((exp, i) =>
119:         i === expIndex
120:           ? { ...exp, achievements: [...exp.achievements, achievement] }
121:           : exp
122:       )
123:     }))
124:   }
125: 
126:   const removeExperience = (index: number) => {
127:     setResume(prev => ({
128:       ...prev,
129:       experience: prev.experience.filter((_, i) => i !== index)
130:     }))
131:   }
132: 
133:   const addEducation = () => {
134:     const newEdu = {
135:       id: Date.now().toString(),
136:       institution: '',
137:       degree: '',
138:       field: '',
139:       graduationDate: ''
140:     }
141:     setResume(prev => ({
142:       ...prev,
143:       education: [...prev.education, newEdu]
144:     }))
145:   }
146: 
147:   const updateEducation = (index: number, field: string, value: string) => {
148:     setResume(prev => ({
149:       ...prev,
150:       education: prev.education.map((edu, i) =>
151:         i === index ? { ...edu, [field]: value } : edu
152:       )
153:     }))
154:   }
155: 
156:   const removeEducation = (index: number) => {
157:     setResume(prev => ({
158:       ...prev,
159:       education: prev.education.filter((_, i) => i !== index)
160:     }))
161:   }
162: 
163:   const addSkill = (type: 'technical' | 'soft', skill: string) => {
164:     if (!skill.trim()) return
165:     setResume(prev => ({
166:       ...prev,
167:       skills: {
168:         ...prev.skills,
169:         [type]: [...prev.skills[type], skill.trim()]
170:       }
171:     }))
172:   }
173: 
174:   const removeSkill = (type: 'technical' | 'soft', index: number) => {
175:     setResume(prev => ({
176:       ...prev,
177:       skills: {
178:         ...prev.skills,
179:         [type]: prev.skills[type].filter((_, i) => i !== index)
180:       }
181:     }))
182:   }
183: 
184:   if (step === 'quick-start') {
185:     return (
186:       <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 py-12">
187:         <div className="max-w-7xl mx-auto px-4">
188:           <div className="text-center mb-12">
189:             <h1 className="text-5xl font-bold text-foreground mb-4">
190:               ✨ AI-Powered Resume Builder
191:             </h1>
192:             <p className="text-xl text-gray-600">
193:               Create a professional, ATS-optimized resume in minutes
194:             </p>
195:           </div>
196: 
197:           <QuickStart onResumeImported={handleResumeImported} />
198:         </div>
199:       </div>
200:     )
201:   }
202: 
203:   return (
204:     <div className="min-h-screen bg-gray-50">
205:       {/* Header */}
206:       <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 shadow-lg">
207:         <div className="max-w-7xl mx-auto flex items-center justify-between">
208:           <div>
209:             <h1 className="text-3xl font-bold">Resume Builder</h1>
210:             <p className="text-blue-100">Build your perfect resume with AI assistance</p>
211:           </div>
212:           <div className="flex items-center gap-4">
213:             <Button
214:               onClick={() => setStep('quick-start')}
215:               variant="outline"
216:               className="bg-white/10 border-white/30 text-white hover:bg-card/20"
217:             >
218:               ← Start Over
219:             </Button>
220:             <Button className="bg-card text-blue-600 hover:bg-blue-50">
221:               <Save className="w-4 h-4 mr-2" />
222:               Save Resume
223:             </Button>
224:           </div>
225:         </div>
226:       </div>
227: 
228:       <div className="max-w-7xl mx-auto px-4 py-8">
229:         {/* Template Selector */}
230:         <div className="mb-8">
231:           <TemplateSelector
232:             selectedTemplate={selectedTemplate}
233:             onSelectTemplate={setSelectedTemplate}
234:           />
235:         </div>
236: 
237:         {/* Main Builder Layout */}
238:         <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
239:           {/* Left: Editor (2 columns) */}
240:           <div className="lg:col-span-2 space-y-6">
241:             {/* Section Tabs */}
242:             <div className="bg-card rounded-xl border-2 border-border p-2 flex gap-2">
243:               {(['personal', 'experience', 'education', 'skills'] as const).map((section) => (
244:                 <button
245:                   key={section}
246:                   onClick={() => setActiveSection(section)}
247:                   className={`flex-1 py-3 px-4 rounded-lg font-semibold transition-all ${
248:                     activeSection === section
249:                       ? 'bg-blue-500 text-white shadow-lg'
250:                       : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
251:                   }`}
252:                 >
253:                   {section.charAt(0).toUpperCase() + section.slice(1)}
254:                 </button>
255:               ))}
256:             </div>
257: 
258:             {/* Personal Info Section */}
259:             {activeSection === 'personal' && (
260:               <div className="bg-card rounded-xl border-2 border-border p-6 space-y-4">
261:                 <h3 className="text-xl font-bold text-foreground">Personal Information</h3>
262:                 
263:                 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
264:                   <div>
265:                     <label className="block text-sm font-semibold text-gray-700 mb-2">
266:                       Full Name *
267:                     </label>
268:                     <Input
269:                       value={resume.personalInfo.fullName}
270:                       onChange={(e) => updatePersonalInfo('fullName', e.target.value)}
271:                       placeholder="John Doe"
272:                     />
273:                   </div>
274:                   
275:                   <div>
276:                     <label className="block text-sm font-semibold text-gray-700 mb-2">
277:                       Email *
278:                     </label>
279:                     <Input
280:                       type="email"
281:                       value={resume.personalInfo.email}
282:                       onChange={(e) => updatePersonalInfo('email', e.target.value)}
283:                       placeholder="john@example.com"
284:                     />
285:                   </div>
286:                   
287:                   <div>
288:                     <label className="block text-sm font-semibold text-gray-700 mb-2">
289:                       Phone *
290:                     </label>
291:                     <Input
292:                       value={resume.personalInfo.phone}
293:                       onChange={(e) => updatePersonalInfo('phone', e.target.value)}
294:                       placeholder="(555) 123-4567"
295:                     />
296:                   </div>
297:                   
298:                   <div>
299:                     <label className="block text-sm font-semibold text-gray-700 mb-2">
300:                       Location
301:                     </label>
302:                     <Input
303:                       value={resume.personalInfo.location}
304:                       onChange={(e) => updatePersonalInfo('location', e.target.value)}
305:                       placeholder="San Francisco, CA"
306:                     />
307:                   </div>
308:                   
309:                   <div>
310:                     <label className="block text-sm font-semibold text-gray-700 mb-2">
311:                       LinkedIn
312:                     </label>
313:                     <Input
314:                       value={resume.personalInfo.linkedin}
315:                       onChange={(e) => updatePersonalInfo('linkedin', e.target.value)}
316:                       placeholder="linkedin.com/in/johndoe"
317:                     />
318:                   </div>
319:                   
320:                   <div>
321:                     <label className="block text-sm font-semibold text-gray-700 mb-2">
322:                       Website
323:                     </label>
324:                     <Input
325:                       value={resume.personalInfo.website}
326:                       onChange={(e) => updatePersonalInfo('website', e.target.value)}
327:                       placeholder="johndoe.com"
328:                     />
329:                   </div>
330:                 </div>
331:                 
332:                 <div>
333:                   <label className="block text-sm font-semibold text-gray-700 mb-2">
334:                     Professional Summary
335:                   </label>
336:                   <Textarea
337:                     value={resume.personalInfo.summary}
338:                     onChange={(e) => updatePersonalInfo('summary', e.target.value)}
339:                     placeholder="A brief summary of your professional background and key achievements..."
340:                     rows={4}
341:                   />
342:                 </div>
343: 
344:                 <Button
345:                   onClick={() => setActiveSection('experience')}
346:                   className="w-full bg-blue-500 hover:bg-blue-600"
347:                 >
348:                   Next: Add Experience <ArrowRight className="w-4 h-4 ml-2" />
349:                 </Button>
350:               </div>
351:             )}
352: 
353:             {/* Experience Section */}
354:             {activeSection === 'experience' && (
355:               <div className="space-y-6">
356:                 {resume.experience.map((exp, index) => (
357:                   <div key={exp.id} className="bg-card rounded-xl border-2 border-border p-6 space-y-4">
358:                     <div className="flex items-center justify-between">
359:                       <h4 className="text-lg font-bold text-foreground">
360:                         Experience #{index + 1}
361:                       </h4>
362:                       <Button
363:                         onClick={() => removeExperience(index)}
364:                         variant="outline"
365:                         size="sm"
366:                         className="text-red-600 border-red-300 hover:bg-red-50"
367:                       >
368:                         <Trash2 className="w-4 h-4" />
369:                       </Button>
370:                     </div>
371: 
372:                     <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
373:                       <div>
374:                         <label className="block text-sm font-semibold text-gray-700 mb-2">
375:                           Position
376:                         </label>
377:                         <Input
378:                           value={exp.position}
379:                           onChange={(e) => updateExperience(index, 'position', e.target.value)}
380:                           placeholder="Software Engineer"
381:                         />
382:                       </div>
383:                       
384:                       <div>
385:                         <label className="block text-sm font-semibold text-gray-700 mb-2">
386:                           Company
387:                         </label>
388:                         <Input
389:                           value={exp.company}
390:                           onChange={(e) => updateExperience(index, 'company', e.target.value)}
391:                           placeholder="Tech Corp"
392:                         />
393:                       </div>
394:                       
395:                       <div>
396:                         <label className="block text-sm font-semibold text-gray-700 mb-2">
397:                           Location
398:                         </label>
399:                         <Input
400:                           value={exp.location}
401:                           onChange={(e) => updateExperience(index, 'location', e.target.value)}
402:                           placeholder="San Francisco, CA"
403:                         />
404:                       </div>
405:                       
406:                       <div>
407:                         <label className="block text-sm font-semibold text-gray-700 mb-2">
408:                           Start Date
409:                         </label>
410:                         <Input
411:                           value={exp.startDate}
412:                           onChange={(e) => updateExperience(index, 'startDate', e.target.value)}
413:                           placeholder="Jan 2020"
414:                         />
415:                       </div>
416:                       
417:                       <div>
418:                         <label className="block text-sm font-semibold text-gray-700 mb-2">
419:                           End Date
420:                         </label>
421:                         <Input
422:                           value={exp.endDate}
423:                           onChange={(e) => updateExperience(index, 'endDate', e.target.value)}
424:                           placeholder="Present"
425:                           disabled={exp.current}
426:                         />
427:                       </div>
428:                       
429:                       <div className="flex items-center pt-8">
430:                         <input
431:                           type="checkbox"
432:                           checked={exp.current}
433:                           onChange={(e) => updateExperience(index, 'current', e.target.checked)}
434:                           className="mr-2"
435:                         />
436:                         <label className="text-sm text-gray-700">Currently working here</label>
437:                       </div>
438:                     </div>
439: 
440:                     {/* AI Bullet Generator */}
441:                     <BulletPointGenerator
442:                       role={exp.position}
443:                       company={exp.company}
444:                       achievements={exp.achievements}
445:                       onAddBullet={(bullet) => addAchievement(index, bullet)}
446:                     />
447: 
448:                     {/* Achievements List */}
449:                     {exp.achievements.length > 0 && (
450:                       <div>
451:                         <h5 className="font-semibold text-foreground mb-2">Achievements:</h5>
452:                         <ul className="space-y-2">
453:                           {exp.achievements.map((achievement, achIndex) => (
454:                             <li key={achIndex} className="flex items-start gap-2 p-3 bg-gray-50 rounded-lg">
455:                               <span className="text-gray-700">• {achievement}</span>
456:                               <button
457:                                 onClick={() => {
458:                                   const newAchievements = exp.achievements.filter((_, i) => i !== achIndex)
459:                                   updateExperience(index, 'achievements', newAchievements)
460:                                 }}
461:                                 className="ml-auto text-red-500 hover:text-red-700"
462:                               >
463:                                 <Trash2 className="w-4 h-4" />
464:                               </button>
465:                             </li>
466:                           ))}
467:                         </ul>
468:                       </div>
469:                     )}
470:                   </div>
471:                 ))}
472: 
473:                 <Button
474:                   onClick={addExperience}
475:                   variant="outline"
476:                   className="w-full border-2 border-dashed border-gray-300 hover:border-blue-500 hover:bg-blue-50"
477:                 >
478:                   <Plus className="w-5 h-5 mr-2" />
479:                   Add Experience
480:                 </Button>
481: 
482:                 <Button
483:                   onClick={() => setActiveSection('education')}
484:                   className="w-full bg-blue-500 hover:bg-blue-600"
485:                 >
486:                   Next: Add Education <ArrowRight className="w-4 h-4 ml-2" />
487:                 </Button>
488:               </div>
489:             )}
490: 
491:             {/* Education & Skills sections would go here - keeping it concise */}
492:             
493:             {/* Export Hub */}
494:             <ExportHub resume={resume} />
495:           </div>
496: 
497:           {/* Right: Preview & Tools (1 column) */}
498:           <div className="space-y-6">
499:             <ResumePreview resume={resume} template={selectedTemplate} />
500:             <ProgressTracker resume={resume} />
501:             <ATSChecker resume={resume} />
502:           </div>
503:         </div>
504:       </div>
505:     </div>
506:   )
507: }
</file>

<file path="src/app/resume-builder/page.tsx">
 1: import { Suspense } from 'react'
 2: import { getServerSession } from 'next-auth/next'
 3: import { redirect } from 'next/navigation'
 4: import { authOptions } from '@/lib/auth'
 5: import { ResumeBuilder } from './components/resume-builder'
 6: 
 7: export default async function ResumeBuilderPage() {
 8:   const session = await getServerSession(authOptions)
 9: 
10:   if (!session) {
11:     redirect('/auth/signin')
12:   }
13: 
14:   return (
15:     <div className="min-h-screen bg-background">
16:       <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
17:         <div className="mb-8">
18:           <h1 className="text-3xl font-bold text-foreground">Resume Builder</h1>
19:           <p className="mt-2 text-lg text-muted-foreground">
20:             Create professional, ATS-optimized resumes with AI assistance and beautiful templates
21:           </p>
22:         </div>
23: 
24:         <Suspense fallback={<ResumeBuilderSkeleton />}>
25:           <ResumeBuilder userId={session.user.id} />
26:         </Suspense>
27:       </div>
28:     </div>
29:   )
30: }
31: 
32: function ResumeBuilderSkeleton() {
33:   return (
34:     <div className="space-y-8">
35:       {/* Template Selection Skeleton */}
36:       <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
37:         <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
38:         <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
39:           {[...Array(3)].map((_, i) => (
40:             <div key={i} className="border rounded-lg p-4">
41:               <div className="w-full h-32 bg-gray-200 rounded mb-3"></div>
42:               <div className="w-20 h-4 bg-gray-200 rounded"></div>
43:             </div>
44:           ))}
45:         </div>
46:       </div>
47: 
48:       {/* Builder Interface Skeleton */}
49:       <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
50:         <div className="lg:col-span-2 space-y-6">
51:           {[...Array(4)].map((_, i) => (
52:             <div key={i} className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
53:               <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
54:               <div className="space-y-3">
55:                 <div className="w-full h-10 bg-gray-200 rounded"></div>
56:                 <div className="w-3/4 h-10 bg-gray-200 rounded"></div>
57:               </div>
58:             </div>
59:           ))}
60:         </div>
61: 
62:         <div className="space-y-6">
63:           <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
64:             <div className="w-24 h-6 bg-gray-200 rounded mb-4"></div>
65:             <div className="w-full h-64 bg-gray-200 rounded"></div>
66:           </div>
67: 
68:           <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
69:             <div className="w-20 h-6 bg-gray-200 rounded mb-4"></div>
70:             <div className="w-full h-32 bg-gray-200 rounded"></div>
71:           </div>
72:         </div>
73:       </div>
74:     </div>
75:   )
76: }
</file>

<file path="src/app/salary-negotiation/page.tsx">
 1: import { Suspense } from 'react'
 2: import { getServerSession } from 'next-auth/next'
 3: import { redirect } from 'next/navigation'
 4: import { authOptions } from '@/lib/auth'
 5: import { SalaryNegotiation } from './components/salary-negotiation'
 6: 
 7: export default async function SalaryNegotiationPage() {
 8:   const session = await getServerSession(authOptions)
 9: 
10:   if (!session) {
11:     redirect('/auth/signin')
12:   }
13: 
14:   return (
15:     <div className="min-h-screen bg-background">
16:       <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
17:         <div className="mb-8">
18:           <h1 className="text-3xl font-bold text-foreground">Salary Negotiation</h1>
19:           <p className="mt-2 text-lg text-muted-foreground">
20:             AI-powered salary analysis and negotiation strategies to maximize your compensation
21:           </p>
22:         </div>
23: 
24:         <Suspense fallback={<SalaryNegotiationSkeleton />}>
25:           <SalaryNegotiation userId={session.user.id} />
26:         </Suspense>
27:       </div>
28:     </div>
29:   )
30: }
31: 
32: function SalaryNegotiationSkeleton() {
33:   return (
34:     <div className="space-y-8">
35:       {/* Input Form Skeleton */}
36:       <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
37:         <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
38:         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
39:           <div className="w-full h-12 bg-gray-200 rounded"></div>
40:           <div className="w-full h-12 bg-gray-200 rounded"></div>
41:           <div className="w-full h-12 bg-gray-200 rounded"></div>
42:           <div className="w-full h-12 bg-gray-200 rounded"></div>
43:         </div>
44:         <div className="w-32 h-10 bg-gray-200 rounded"></div>
45:       </div>
46: 
47:       {/* Results Skeleton */}
48:       <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
49:         <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
50:           <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
51:           <div className="w-full h-32 bg-gray-200 rounded"></div>
52:         </div>
53:         <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
54:           <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
55:           <div className="w-full h-32 bg-gray-200 rounded"></div>
56:         </div>
57:       </div>
58:     </div>
59:   )
60: }
</file>

<file path="src/app/skill-analysis/page.tsx">
 1: import { Suspense } from 'react'
 2: import { getServerSession } from 'next-auth/next'
 3: import { redirect } from 'next/navigation'
 4: import { authOptions } from '@/lib/auth'
 5: import { SkillAnalysis } from './components/skill-analysis'
 6: 
 7: export default async function SkillAnalysisPage() {
 8:   const session = await getServerSession(authOptions)
 9: 
10:   if (!session) {
11:     redirect('/auth/signin')
12:   }
13: 
14:   return (
15:     <div className="min-h-screen bg-background">
16:       <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
17:         <div className="mb-8">
18:           <h1 className="text-3xl font-bold text-foreground">Skill Analysis</h1>
19:           <p className="mt-2 text-lg text-muted-foreground">
20:             AI-powered career planning and skill gap analysis to accelerate your professional growth
21:           </p>
22:         </div>
23: 
24:         <Suspense fallback={<SkillAnalysisSkeleton />}>
25:           <SkillAnalysis userId={session.user.id} />
26:         </Suspense>
27:       </div>
28:     </div>
29:   )
30: }
31: 
32: function SkillAnalysisSkeleton() {
33:   return (
34:     <div className="space-y-8">
35:       {/* Input Section Skeleton */}
36:       <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
37:         <div className="w-48 h-6 bg-gray-200 rounded mb-4"></div>
38:         <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
39:           <div className="w-full h-12 bg-gray-200 rounded"></div>
40:           <div className="w-full h-12 bg-gray-200 rounded"></div>
41:           <div className="w-full h-12 bg-gray-200 rounded"></div>
42:         </div>
43:         <div className="w-32 h-10 bg-gray-200 rounded"></div>
44:       </div>
45: 
46:       {/* Results Skeleton */}
47:       <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
48:         <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
49:           <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
50:           <div className="space-y-3">
51:             {[...Array(4)].map((_, i) => (
52:               <div key={i} className="flex items-center gap-3">
53:                 <div className="w-12 h-12 bg-gray-200 rounded-full"></div>
54:                 <div className="flex-1">
55:                   <div className="w-24 h-4 bg-gray-200 rounded mb-2"></div>
56:                   <div className="w-16 h-3 bg-gray-200 rounded"></div>
57:                 </div>
58:               </div>
59:             ))}
60:           </div>
61:         </div>
62: 
63:         <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
64:           <div className="w-32 h-6 bg-gray-200 rounded mb-4"></div>
65:           <div className="space-y-3">
66:             {[...Array(3)].map((_, i) => (
67:               <div key={i} className="flex items-center gap-3">
68:                 <div className="w-12 h-12 bg-gray-200 rounded-full"></div>
69:                 <div className="flex-1">
70:                   <div className="w-24 h-4 bg-gray-200 rounded mb-2"></div>
71:                   <div className="w-20 h-3 bg-gray-200 rounded"></div>
72:                 </div>
73:               </div>
74:             ))}
75:           </div>
76:         </div>
77:       </div>
78: 
79:       {/* Career Path Skeleton */}
80:       <div className="bg-card rounded-lg p-6 shadow-sm animate-pulse">
81:         <div className="w-40 h-6 bg-gray-200 rounded mb-6"></div>
82:         <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
83:           {[...Array(3)].map((_, i) => (
84:             <div key={i} className="text-center">
85:               <div className="w-16 h-16 bg-gray-200 rounded-full mx-auto mb-3"></div>
86:               <div className="w-20 h-4 bg-gray-200 rounded mx-auto mb-2"></div>
87:               <div className="w-16 h-3 bg-gray-200 rounded mx-auto"></div>
88:             </div>
89:           ))}
90:         </div>
91:       </div>
92:     </div>
93:   )
94: }
</file>

<file path="src/components/company-research/index.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Input } from '@/components/ui/input'
  7: import { Label } from '@/components/ui/label'
  8: import { Badge } from '@/components/ui/badge'
  9: import { Alert, AlertDescription } from '@/components/ui/alert'
 10: import { Progress } from '@/components/ui/progress'
 11: import { Skeleton } from '@/components/ui/skeleton'
 12: import type { CompanyData, CompanyResearchPanelProps } from '@/types'
 13: import {
 14:   Building,
 15:   Search,
 16:   Star,
 17:   Users,
 18:   TrendingUp,
 19:   Globe,
 20:   Calendar,
 21:   AlertCircle,
 22:   CheckCircle,
 23:   ExternalLink,
 24:   RefreshCw,
 25:   Twitter,
 26:   Brain,
 27:   Target
 28: } from 'lucide-react'
 29: 
 30: type CompanyResearchProps = {
 31:   initialCompanyName?: string
 32:   onResearchComplete?: (data: CompanyData) => void
 33:   onError?: (error: string) => void
 34:   titleOverride?: string
 35:   descriptionOverride?: string
 36:   autoRun?: boolean
 37:   hideInputs?: boolean
 38:   hideActions?: boolean
 39:   defaultSubject?: string
 40:   defaultBody?: string
 41: }
 42: 
 43: export default function CompanyResearch({ initialCompanyName, onResearchComplete, onError, titleOverride, descriptionOverride, autoRun, hideInputs, hideActions, defaultSubject, defaultBody }: CompanyResearchProps = {}) {
 44:   const [companyName, setCompanyName] = useState(initialCompanyName || (typeof window !== 'undefined' ? localStorage.getItem('job:company') || '' : ''))
 45:   const [website, setWebsite] = useState<string>(()=>{ try { return localStorage.getItem('job:website') || '' } catch { return '' } })
 46:   const [jobTitle, setJobTitle] = useState<string>(()=>{ try { return localStorage.getItem('job:title') || '' } catch { return '' } })
 47:   const [location, setLocation] = useState('')
 48:   const [isResearching, setIsResearching] = useState(false)
 49:   const [researchProgress, setResearchProgress] = useState(0)
 50:   const [error, setError] = useState<string | null>(null)
 51:   const [researchResult, setResearchResult] = useState<any | null>(null)
 52:   const [profileIndex, setProfileIndex] = useState<number | null>(null)
 53:   const [profileLoading, setProfileLoading] = useState(false)
 54:   const [profileData, setProfileData] = useState<any | null>(null)
 55:   const [psychology, setPsychology] = useState<any | null>(null)
 56:   const [loadingPsych, setLoadingPsych] = useState(false)
 57:   const [marketIntel, setMarketIntel] = useState<string>('')
 58:   const [loadingIntel, setLoadingIntel] = useState(false)
 59:   // Intro email composer state
 60:   const [composeOpen, setComposeOpen] = useState(false)
 61:   const [composeSubject, setComposeSubject] = useState('')
 62:   const [composeBody, setComposeBody] = useState('')
 63:   const [composeTo, setComposeTo] = useState('')
 64:   const [downloading, setDownloading] = useState(false)
 65: 
 66:   // Auto-run research on mount if requested
 67:   useEffect(() => {
 68:     if (autoRun && !researchResult && !isResearching) {
 69:       // FIX RACE CONDITION: Use local variables instead of state
 70:       const c = initialCompanyName || (typeof window !== 'undefined' ? localStorage.getItem('job:company') || '' : '')
 71:       const w = typeof window !== 'undefined' ? localStorage.getItem('job:website') || '' : ''
 72:       const t = typeof window !== 'undefined' ? localStorage.getItem('job:title') || '' : ''
 73:       const l = typeof window !== 'undefined' ? localStorage.getItem('job:location') || '' : ''
 74:       
 75:       console.log('[COMPANY_RESEARCH] Auto-run with:', { company: c, website: w, title: t, location: l })
 76:       
 77:       // Update state (for display)
 78:       if (c) setCompanyName(c)
 79:       if (w) setWebsite(w)
 80:       if (t) setJobTitle(t)
 81:       if (l) setLocation(l)
 82:       
 83:       // Call research with local variables (not state)
 84:       if (c && c.trim()) {
 85:         handleResearchWithData(c, w, t, l)
 86:       } else {
 87:         console.warn('[COMPANY_RESEARCH] No company name found for auto-run')
 88:         setError('No company name provided')
 89:       }
 90:     }
 91:   }, [autoRun, initialCompanyName])
 92: 
 93:   // New method: Research with explicit data (avoids state race condition)
 94:   const handleResearchWithData = async (company: string, web?: string, title?: string, loc?: string) => {
 95:     if (!company || !company.trim()) {
 96:       setError('Please enter a company name')
 97:       onError?.('Please enter a company name')
 98:       return
 99:     }
100:     
101:     setIsResearching(true)
102:     setResearchProgress(0)
103:     setError(null)
104: 
105:     try {
106:       const progressInterval = setInterval(() => {
107:         setResearchProgress((p) => (p >= 90 ? 90 : p + 15))
108:       }, 500)
109: 
110:       const response = await fetch('/api/v2/company/deep-research', {
111:         method: 'POST',
112:         headers: { 'Content-Type': 'application/json' },
113:         body: JSON.stringify({
114:           companyName: company.trim(),
115:           website: web?.trim() || undefined,
116:           jobTitle: title?.trim() || undefined,
117:           location: loc?.trim() || undefined,
118:         })
119:       })
120: 
121:       clearInterval(progressInterval)
122:       setResearchProgress(100)
123: 
124:       if (!response.ok) {
125:         const data = await response.json().catch(()=>({}))
126:         throw new Error((data as any).error || 'Research failed')
127:       }
128: 
129:       const data = await response.json()
130:       const result: CompanyData = (data.companyData || data.research)
131:       // Attach contacts if provided by API
132:       if (Array.isArray((data as any).contacts)) {
133:         ;(result as any).hiringContacts = (data as any).contacts
134:       }
135:       setResearchResult(result)
136:       onResearchComplete?.(result)
137:       // Save to localStorage
138:       try {
139:         if (company) localStorage.setItem('job:company', company)
140:         if (web) localStorage.setItem('job:website', web)
141:         if (title) localStorage.setItem('job:title', title)
142:       } catch {}
143:     } catch (e) {
144:       const msg = e instanceof Error ? e.message : 'Research failed'
145:       setError(msg)
146:       onError?.(msg)
147:     } finally {
148:       setIsResearching(false)
149:       setTimeout(() => setResearchProgress(0), 800)
150:     }
151:   }
152: 
153:   const handleResearch = async () => {
154:     if (!companyName.trim()) {
155:       setError('Please enter a company name')
156:       onError?.('Please enter a company name')
157:       return
158:     }
159:     // Use the new method with state variables
160:     return handleResearchWithData(companyName, website, jobTitle, location)
161:   }
162: 
163:   const refreshResearch = async () => {
164:     if (!companyName.trim()) return
165:     setIsResearching(true)
166:     setError(null)
167:     setResearchProgress(0)
168:     try {
169:       const response = await fetch('/api/v2/company/deep-research', {
170:         method: 'POST',
171:         headers: { 'Content-Type': 'application/json' },
172:         body: JSON.stringify({ companyName: companyName.trim(), website: website.trim() || undefined, jobTitle: jobTitle.trim() || undefined, location: location.trim() || undefined })
173:       })
174:       if (!response.ok) {
175:         const data = await response.json().catch(()=>({}))
176:         throw new Error((data as any).error || 'Refresh failed')
177:       }
178:       const data = await response.json()
179:       const result: CompanyData = (data.companyData || data.research)
180:       if (Array.isArray((data as any).contacts)) {
181:         ;(result as any).hiringContacts = (data as any).contacts
182:       }
183:       setResearchResult(result)
184:       onResearchComplete?.(result)
185:     } catch (e) {
186:       const msg = e instanceof Error ? e.message : 'Refresh failed'
187:       setError(msg)
188:       onError?.(msg)
189:     } finally {
190:       setIsResearching(false)
191:     }
192:   }
193: 
194:   const showProfileForContact = async (index: number, person: any) => {
195:     setProfileIndex(index)
196:     setProfileLoading(true)
197:     setProfileData(null)
198:     try {
199:       const res = await fetch('/api/insights/hiring/profile', {
200:         method: 'POST', headers: { 'Content-Type': 'application/json' },
201:         body: JSON.stringify({ name: person.name, companyName: companyName.trim(), roleType: jobTitle.trim() || undefined, linkedinUrl: person.profileUrl || undefined })
202:       })
203:       if (!res.ok) throw new Error('Profile fetch failed')
204:       const json = await res.json()
205:       setProfileData(json.profile)
206:     } catch (e) {
207:       setProfileData({ error: 'Failed to load profile' })
208:     } finally {
209:       setProfileLoading(false)
210:     }
211:   }
212: 
213:   const runPsychology = async () => {
214:     setLoadingPsych(true)
215:     try {
216:       let jd = ''
217:       try { jd = localStorage.getItem('job:description') || '' } catch {}
218:       if (!jd || jd.length < 20) throw new Error('Add a job description first (Analyze step)')
219:       const res = await fetch('/api/insights/psychology', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ jobDescription: jd, companySignals: researchResult || {} }) })
220:       const json = await res.json().catch(()=>({}))
221:       if (!res.ok || !json.success) throw new Error(json.error || 'Failed to compute psychology')
222:       setPsychology(json.psychology)
223:       try { localStorage.setItem('analyze:psychology', JSON.stringify(json.psychology)) } catch {}
224:     } catch (e: any) {
225:       setError(e?.message || 'Psychology failed')
226:     } finally { setLoadingPsych(false) }
227:   }
228: 
229:   const runMarketIntel = async () => {
230:     setLoadingIntel(true)
231:     try {
232:       const res = await fetch('/api/v2/company/intel', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ companyName: companyName.trim(), role: jobTitle.trim() || undefined, geo: location.trim() || undefined }) })
233:       const json = await res.json().catch(()=>({}))
234:       if (!res.ok || !json.success) throw new Error(json.error || 'Failed to fetch market intelligence')
235:       setMarketIntel(json.intel?.summary || '')
236:     } catch (e: any) {
237:       setError(e?.message || 'Market intelligence failed')
238:     } finally { setLoadingIntel(false) }
239:   }
240: 
241:   // Intro email helpers
242:   const openComposer = (person: any) => {
243:     const subj = (defaultSubject && defaultSubject.trim()) ? defaultSubject : `Introduction regarding ${jobTitle || 'an opportunity'} – ${companyName}`
244:     const greeting = `Hello ${person?.name?.split(' ')[0] || 'there'},`
245:     const fallbackBody = `${greeting}\n\n` +
246:       `I’m reaching out regarding ${jobTitle || 'an opportunity'} at ${companyName}. ` +
247:       `I believe my background aligns well and I’d welcome the chance to connect.\n\n` +
248:       `Please see attached resume and a brief cover letter summarizing my fit. ` +
249:       `Happy to share more details or schedule a short call at your convenience.\n\n` +
250:       `Best regards,\n` +
251:       (typeof window !== 'undefined' ? (localStorage.getItem('user:name') || 'Candidate') : 'Candidate')
252:     const body = (defaultBody && defaultBody.trim()) ? defaultBody : fallbackBody
253:     setComposeSubject(subj)
254:     setComposeBody(body)
255:     setComposeTo(typeof person?.email === 'string' ? person.email : '')
256:     setComposeOpen(true)
257:   }
258: 
259:   const mailtoHref = () => {
260:     const to = composeTo || ''
261:     const s = encodeURIComponent(composeSubject || '')
262:     const b = encodeURIComponent(composeBody || '')
263:     return `mailto:${to}?subject=${s}&body=${b}`
264:   }
265: 
266:   const downloadPdfFromHtml = async (html: string, filename: string) => {
267:     const wrapped = `<!DOCTYPE html><html><head><meta charset=\"utf-8\"><title>${filename}</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.5;color:#333;max-width:8.5in;margin:0 auto;padding:0.5in;white-space:pre-wrap}</style></head><body>${html.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
268:     setDownloading(true)
269:     try {
270:       const resp = await fetch('/api/resume/export/pdf', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ html: wrapped, filename: `${filename}.pdf` }) })
271:       if (!resp.ok) throw new Error('Failed')
272:       const blob = await resp.blob()
273:       const url = URL.createObjectURL(blob)
274:       const a = document.createElement('a')
275:       a.href = url
276:       a.download = `${filename}.pdf`
277:       document.body.appendChild(a)
278:       a.click()
279:       document.body.removeChild(a)
280:       URL.revokeObjectURL(url)
281:     } catch {}
282:     finally { setDownloading(false) }
283:   }
284: 
285:   const downloadLatestResume = async () => {
286:     try {
287:       // Prefer selected optimized HTML from optimizer step
288:       let html = ''
289:       try { html = localStorage.getItem('cf:selectedResumeHtml') || '' } catch {}
290:       if (!html) {
291:         const rl = await fetch('/api/resume/list')
292:         if (!rl.ok) return
293:         const rj = await rl.json()
294:         const txt: string = rj?.resumes?.[0]?.extractedText || ''
295:         if (!txt) return
296:         html = `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Resume</title><style>body{font-family:Arial,sans-serif;font-size:11pt;line-height:1.5;color:#333;max-width:8.5in;margin:0 auto;padding:0.5in;white-space:pre-wrap}</style></head><body>${txt.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</body></html>`
297:       }
298:       const name = `${companyName || 'Company'}_${jobTitle || 'Role'}_Resume`
299:       await downloadPdfFromHtml(html, name)
300:     } catch {}
301:   }
302: 
303:   const downloadLatestCoverLetter = async () => {
304:     try {
305:       // Prefer selected cover letter from wizard
306:       let content = ''
307:       try { content = localStorage.getItem('cf:selectedCoverLetter') || '' } catch {}
308:       if (!content) {
309:         const cl = await fetch('/api/cover-letter/list')
310:         if (!cl.ok) return
311:         const cj = await cl.json()
312:         const latest = Array.isArray(cj.letters) && cj.letters.length ? cj.letters[0] : null
313:         content = latest?.content || ''
314:       }
315:       if (!content) return
316:       const name = `${companyName || 'Company'}_${jobTitle || 'Role'}_CoverLetter`
317:       await downloadPdfFromHtml(content, name)
318:     } catch {}
319:   }
320: 
321:   return (
322:     <Card className="w-full">
323:       <CardHeader>
324:         <CardTitle className="flex items-center gap-2">
325:           <Building className="h-5 w-5" />
326:           {titleOverride || 'Company Research'}
327:         </CardTitle>
328:           <CardDescription>
329:           {descriptionOverride || 'Get comprehensive insights about companies from multiple sources. Use responsibly and verify before contacting.'}
330:           </CardDescription>
331:       </CardHeader>
332:       <CardContent className="space-y-6">
333:         {/* Error */}
334:         {error && (
335:           <Alert variant="destructive">
336:             <AlertCircle className="h-4 w-4" />
337:             <AlertDescription>{error}</AlertDescription>
338:           </Alert>
339:         )}
340: 
341:         {/* Form */}
342:         {!hideInputs && (
343:         <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
344:           <div className="space-y-2">
345:             <Label htmlFor="companyName">Company Name *</Label>
346:             <Input id="companyName" placeholder="e.g., Google" value={companyName} onChange={(e)=>setCompanyName(e.target.value)} disabled={isResearching} />
347:           </div>
348:           <div className="space-y-2">
349:             <Label htmlFor="website">Website (Optional)</Label>
350:             <Input id="website" placeholder="https://company.com" value={website} onChange={(e)=>setWebsite(e.target.value)} disabled={isResearching} />
351:           </div>
352:           <div className="space-y-2">
353:             <Label htmlFor="jobTitle">Target Role (Optional)</Label>
354:             <Input id="jobTitle" placeholder="e.g., Senior AE" value={jobTitle} onChange={(e)=>setJobTitle(e.target.value)} disabled={isResearching} />
355:           </div>
356:           <div className="space-y-2">
357:             <Label htmlFor="location">Location (Optional)</Label>
358:             <Input id="location" placeholder="e.g., Edmonton, AB" value={location} onChange={(e)=>setLocation(e.target.value)} disabled={isResearching} />
359:           </div>
360:         </div>
361:         )}
362: 
363:         {/* Progress */}
364:         {isResearching && (
365:           <div className="space-y-2">
366:             <div className="flex items-center justify-between">
367:               <span className="text-sm font-medium">Researching company...</span>
368:               <span className="text-sm text-gray-600">{researchProgress}%</span>
369:             </div>
370:             <Progress value={researchProgress} className="w-full" />
371:             <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
372:               <Skeleton className="h-24" />
373:               <Skeleton className="h-24" />
374:               <Skeleton className="h-32 md:col-span-2" />
375:             </div>
376:           </div>
377:         )}
378: 
379:         {/* Actions */}
380:         {!hideActions && (
381:         <div className="flex gap-3">
382:           <Button onClick={handleResearch} disabled={isResearching || !companyName.trim()} className="flex-1">
383:             {isResearching ? (<><Search className="mr-2 h-4 w-4" /> Researching...</>) : (<><Search className="mr-2 h-4 w-4" /> Research Company</>) }
384:           </Button>
385:           {researchResult && (
386:             <Button variant="outline" onClick={refreshResearch} disabled={isResearching}>
387:               <RefreshCw className="mr-2 h-4 w-4" /> Refresh
388:             </Button>
389:           )}
390:         </div>
391:         )}
392: 
393:         {/* Results */}
394:         {researchResult && (
395:           <div className="space-y-4">
396:             <Alert>
397:               <CheckCircle className="h-4 w-4" />
398:               <AlertDescription>Research completed successfully!</AlertDescription>
399:             </Alert>
400: 
401:             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
402:               {/* Company */}
403:               <Card>
404:                 <CardContent className="p-4">
405:                   <div className="flex items-center gap-3">
406:                     <Building className="h-8 w-8 text-blue-600" />
407:                     <div>
408:                       <p className="text-sm font-medium text-gray-600">Company</p>
409:                       <p className="text-lg font-semibold line-clamp-2">{researchResult.companyName}</p>
410:                     </div>
411:                   </div>
412:                 </CardContent>
413:               </Card>
414: 
415:               {/* Glassdoor Rating */}
416:               {researchResult.glassdoorRating && (
417:                 <Card>
418:                   <CardContent className="p-4">
419:                     <div className="flex items-center gap-3">
420:                       <Star className="h-8 w-8 text-yellow-600" />
421:                       <div>
422:                         <p className="text-sm font-medium text-gray-600">Glassdoor Rating</p>
423:                         <p className="text-lg font-semibold">{researchResult.glassdoorRating}/5</p>
424:                         {researchResult.glassdoorReviews && (
425:                           <p className="text-xs text-gray-600">{researchResult.glassdoorReviews} reviews</p>
426:                         )}
427:                       </div>
428:                     </div>
429:                   </CardContent>
430:                 </Card>
431:               )}
432: 
433:               {/* Size */}
434:               {researchResult.size && (
435:                 <Card>
436:                   <CardContent className="p-4">
437:                     <div className="flex items-center gap-3">
438:                       <Users className="h-8 w-8 text-green-600" />
439:                       <div>
440:                         <p className="text-sm font-medium text-gray-600">Company Size</p>
441:                         <p className="text-lg font-semibold">{researchResult.size}</p>
442:                       </div>
443:                     </div>
444:                   </CardContent>
445:                 </Card>
446:               )}
447: 
448:               {/* Industry */}
449:               {researchResult.industry && (
450:                 <Card>
451:                   <CardContent className="p-4">
452:                     <div className="flex items-center gap-3">
453:                       <TrendingUp className="h-8 w-8 text-purple-600" />
454:                       <div>
455:                         <p className="text-sm font-medium text-gray-600">Industry</p>
456:                         <p className="text-lg font-semibold">{researchResult.industry}</p>
457:                       </div>
458:                     </div>
459:                   </CardContent>
460:                 </Card>
461:               )}
462:             </div>
463: 
464:             {/* Description */}
465:             {researchResult.description && (
466:               <Card>
467:                 <CardHeader>
468:                   <CardTitle className="text-lg">Company Description</CardTitle>
469:                 </CardHeader>
470:                 <CardContent>
471:                   <p className="text-sm text-gray-700 dark:text-gray-300 leading-relaxed whitespace-pre-wrap">{researchResult.description}</p>
472:                 </CardContent>
473:               </Card>
474:             )}
475: 
476:             {/* LinkedIn */}
477:             {researchResult.linkedinData && (
478:               <Card>
479:                 <CardHeader>
480:                   <CardTitle className="text-lg flex items-center gap-2">
481:                     <Globe className="h-4 w-4" />
482:                     LinkedIn Presence
483:                   </CardTitle>
484:                 </CardHeader>
485:                 <CardContent className="space-y-3">
486:                   {researchResult.linkedinData.followers && (
487:                     <div className="flex justify-between"><span className="text-sm text-gray-600">Followers</span><span className="font-medium">{researchResult.linkedinData.followers.toLocaleString()}</span></div>
488:                   )}
489:                   {researchResult.linkedinData.employeeCount && (
490:                     <div className="flex justify-between"><span className="text-sm text-gray-600">Employees</span><span className="font-medium">{researchResult.linkedinData.employeeCount.toLocaleString()}</span></div>
491:                   )}
492:                   {researchResult.linkedinData.companyPage && (
493:                     <Button variant="outline" size="sm" asChild>
494:                       <a href={researchResult.linkedinData.companyPage} target="_blank" rel="noopener noreferrer">
495:                         <ExternalLink className="mr-2 h-4 w-4" /> View on LinkedIn
496:                       </a>
497:                     </Button>
498:                   )}
499:                 </CardContent>
500:               </Card>
501:             )}
502: 
503:             {/* Contacts */}
504:             {Array.isArray(researchResult.hiringContacts) && researchResult.hiringContacts.length > 0 && (
505:               <Card>
506:                 <CardHeader>
507:                   <CardTitle className="text-lg">Hiring Contacts</CardTitle>
508:                   <CardDescription>Publicly discoverable recruiter/manager leads</CardDescription>
509:                 </CardHeader>
510:                 <CardContent>
511:                   <div className="space-y-3">
512:                     {researchResult.hiringContacts.map((p: any, idx: number) => (
513:                       <div key={idx} className="border rounded p-3 space-y-2 bg-card">
514:                         <div className="flex items-center justify-between">
515:                           <div>
516:                             <div className="font-medium text-sm text-foreground">{p.name}</div>
517:                             <div className="text-xs text-muted-foreground">{p.title}</div>
518:                             {(p.email || (p.alternativeEmails && p.alternativeEmails.length)) && (
519:                               <div className="text-xs text-muted-foreground mt-1">
520:                                 {p.email ? (<div className="text-foreground">{p.emailType === 'inferred' ? '(inferred) ' : ''}{p.email}</div>) : null}
521:                                 {Array.isArray(p.alternativeEmails) && p.alternativeEmails.slice(0,2).map((em:string,i:number)=>(<div key={i} className="opacity-80">{em}</div>))}
522:                               </div>
523:                             )}
524:                           </div>
525:                           <div className="flex gap-2">
526:                             {p.profileUrl && (
527:                               <Button asChild size="sm" variant="outline">
528:                                 <a href={p.profileUrl} target="_blank" rel="noopener noreferrer"><ExternalLink className="h-4 w-4 mr-1" /> Profile</a>
529:                               </Button>
530:                             )}
531:                             <Button size="sm" variant="outline" onClick={() => openComposer(p)}>Compose</Button>
532:                             <Button size="sm" variant="secondary" onClick={() => showProfileForContact(idx, p)} disabled={profileLoading && profileIndex === idx}>
533:                               {profileLoading && profileIndex === idx ? 'Loading…' : 'Insights'}
534:                             </Button>
535:                           </div>
536:                         </div>
537:                         {profileIndex === idx && (
538:                           <div className="text-xs text-gray-700 dark:text-gray-200 bg-gray-50 dark:bg-gray-800 rounded p-3 no-text-bleed">
539:                             {profileLoading && <div>Loading insights…</div>}
540:                             {!profileLoading && profileData && (
541:                               profileData.error ? <div className="text-red-600">{profileData.error}</div> : (
542:                                 <div className="space-y-1">
543:                                   <div><span className="font-semibold">Personality:</span> {profileData.personalityType}</div>
544:                                   <div><span className="font-semibold">Style:</span> {profileData.communicationStyle}</div>
545:                                   <div><span className="font-semibold">Red flags:</span> {(profileData.redFlags || []).join(', ')}</div>
546:                                   <div><span className="font-semibold">Approach:</span> {profileData.optimizedApproach}</div>
547:                                 </div>
548:                               )
549:                             )}
550:                           </div>
551:                         )}
552:                       </div>
553:                     ))}
554:                   </div>
555:                 </CardContent>
556:               </Card>
557:             )}
558: 
559:             {/* Employer Psychology */}
560:             <Card>
561:               <CardHeader>
562:                 <CardTitle className="text-lg flex items-center gap-2">
563:                   <Brain className="h-4 w-4" /> Employer Psychology
564:                 </CardTitle>
565:                 <CardDescription>Tone, formality, values, and best send windows</CardDescription>
566:               </CardHeader>
567:               <CardContent className="space-y-3">
568:                 <div className="flex gap-2">
569:                   <Button onClick={runPsychology} disabled={loadingPsych}>
570:                     {loadingPsych ? 'Analyzing…' : 'Compute Psychology'}
571:                   </Button>
572:                   {psychology && <Badge variant="secondary">Saved for tailoring</Badge>}
573:                 </div>
574:                 {psychology && (
575:                   <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
576:                     <div>
577:                       <div className="font-medium mb-1">Tone</div>
578:                       <div className="text-gray-700">{psychology.tone} ({psychology.formality}/100)</div>
579:                     </div>
580:                     <div>
581:                       <div className="font-medium mb-1">Values</div>
582:                       <div className="text-gray-700">{(psychology.values || []).join(', ')}</div>
583:                     </div>
584:                     <div>
585:                       <div className="font-medium mb-1">Best Send Windows</div>
586:                       <div className="text-gray-700">{(psychology.bestSendWindows || []).join(' • ')}</div>
587:                     </div>
588:                     {Array.isArray(psychology.languageGuidance) && psychology.languageGuidance.length > 0 && (
589:                       <div className="md:col-span-3">
590:                         <div className="font-medium mb-1">Language Guidance</div>
591:                         <ul className="list-disc ml-5 space-y-1">
592:                           {psychology.languageGuidance.map((g: string, i: number)=>(<li key={i}>{g}</li>))}
593:                         </ul>
594:                       </div>
595:                     )}
596:                   </div>
597:                 )}
598:               </CardContent>
599:             </Card>
600: 
601:             {/* Market Intelligence */}
602:             <Card>
603:               <CardHeader>
604:                 <CardTitle className="text-lg flex items-center gap-2">
605:                   <Target className="h-4 w-4" /> Market Intelligence
606:                 </CardTitle>
607:                 <CardDescription>Hiring momentum, positioning, culture signals, and angles</CardDescription>
608:               </CardHeader>
609:               <CardContent className="space-y-3">
610:                 <Button onClick={runMarketIntel} variant="outline" disabled={loadingIntel}>
611:                   {loadingIntel ? 'Loading…' : 'Fetch Market Intel'}
612:                 </Button>
613:                 {marketIntel && (
614:                   <div className="text-sm text-gray-700 whitespace-pre-wrap">
615:                     {marketIntel}
616:                   </div>
617:                 )}
618:               </CardContent>
619:             </Card>
620: 
621:             {/* Contact Info from Website */}
622:             {researchResult.contactInfo && (Array.isArray(researchResult.contactInfo.emails) || Array.isArray(researchResult.contactInfo.phones) || Array.isArray(researchResult.contactInfo.addresses)) && (
623:               <Card>
624:                 <CardHeader>
625:                   <CardTitle className="text-lg">Contact Information</CardTitle>
626:                   <CardDescription>Discovered from website pages</CardDescription>
627:                 </CardHeader>
628:                 <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
629:                   {Array.isArray(researchResult.contactInfo.emails) && researchResult.contactInfo.emails.length > 0 && (
630:                     <div>
631:                       <div className="font-medium mb-1">Emails</div>
632:                       <ul className="space-y-1">
633:                         {researchResult.contactInfo.emails.slice(0,8).map((e:string,i:number)=> (
634:                           <li key={i} className="break-all">{e}</li>
635:                         ))}
636:                       </ul>
637:                     </div>
638:                   )}
639:                   {Array.isArray(researchResult.contactInfo.phones) && researchResult.contactInfo.phones.length > 0 && (
640:                     <div>
641:                       <div className="font-medium mb-1">Phones</div>
642:                       <ul className="space-y-1">
643:                         {researchResult.contactInfo.phones.slice(0,8).map((p:string,i:number)=> (
644:                           <li key={i}>{p}</li>
645:                         ))}
646:                       </ul>
647:                     </div>
648:                   )}
649:                   {Array.isArray(researchResult.contactInfo.addresses) && researchResult.contactInfo.addresses.length > 0 && (
650:                     <div className="md:col-span-1">
651:                       <div className="font-medium mb-1">Addresses</div>
652:                       <ul className="space-y-1">
653:                         {researchResult.contactInfo.addresses.slice(0,6).map((a:string,i:number)=> (
654:                           <li key={i}>{a}</li>
655:                         ))}
656:                       </ul>
657:                     </div>
658:                   )}
659:                 </CardContent>
660:               </Card>
661:             )}
662: 
663:             {/* Google OSINT Bundles */}
664:             {researchResult.osint && (
665:               <Card>
666:                 <CardHeader>
667:                   <CardTitle className="text-lg">Public Web Signals</CardTitle>
668:                   <CardDescription>Financials, culture, leadership, growth, benefits, news</CardDescription>
669:                 </CardHeader>
670:                 <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
671:                   {['financial','culture','leadership','growth','benefits','news'].map((k) => (
672:                     Array.isArray(researchResult.osint[k]) && researchResult.osint[k].length > 0 ? (
673:                       <div key={k}>
674:                         <div className="font-medium mb-1 capitalize">{k}</div>
675:                         <ul className="space-y-1">
676:                           {researchResult.osint[k].slice(0,5).map((it:any,i:number)=> (
677:                             <li key={i} className="flex items-center justify-between gap-2">
678:                               <div className="line-clamp-1">{it.title || it.snippet}</div>
679:                               {it.url && <Button asChild size="sm" variant="outline"><a href={it.url} target="_blank" rel="noopener noreferrer">Open</a></Button>}
680:                             </li>
681:                           ))}
682:                         </ul>
683:                       </div>
684:                     ) : null
685:                   ))}
686:                 </CardContent>
687:               </Card>
688:             )}
689: 
690:             {/* Twitter/X Mentions */}
691:             {researchResult.osint?.twitter && Array.isArray(researchResult.osint.twitter) && researchResult.osint.twitter.length > 0 && (
692:               <Card>
693:                 <CardHeader>
694:                   <CardTitle className="text-lg flex items-center gap-2">
695:                     <Twitter className="h-4 w-4 text-sky-500" />
696:                     Twitter/X Mentions
697:                   </CardTitle>
698:                 </CardHeader>
699:                 <CardContent className="space-y-2">
700:                   {researchResult.osint.twitter.slice(0,6).map((t:any,i:number)=> (
701:                     <div key={i} className="flex items-center justify-between border rounded p-3">
702:                       <div className="pr-3 text-sm line-clamp-1">{t.title || t.snippet}</div>
703:                       {t.url && (
704:                         <Button asChild size="sm" variant="outline"><a href={t.url} target="_blank" rel="noopener noreferrer">Open</a></Button>
705:                       )}
706:                     </div>
707:                   ))}
708:                 </CardContent>
709:               </Card>
710:             )}
711: 
712:             {/* Sources */}
713:             <Card>
714:               <CardHeader>
715:                 <CardTitle className="text-lg">Sources</CardTitle>
716:                 <CardDescription>Primary links and timestamps</CardDescription>
717:               </CardHeader>
718:               <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
719:                 {researchResult.website && (
720:                   <div className="flex items-center justify-between border rounded p-3">
721:                     <span className="font-medium">Website</span>
722:                     <Button asChild size="sm" variant="outline"><a href={researchResult.website} target="_blank" rel="noopener noreferrer">Open</a></Button>
723:                   </div>
724:                 )}
725:                 {researchResult.linkedinData?.companyPage && (
726:                   <div className="flex items-center justify-between border rounded p-3">
727:                     <span className="font-medium">LinkedIn</span>
728:                     <Button asChild size="sm" variant="outline"><a href={researchResult.linkedinData.companyPage} target="_blank" rel="noopener noreferrer">Open</a></Button>
729:                   </div>
730:                 )}
731:                 {Array.isArray(researchResult.recentNews) && researchResult.recentNews.length > 0 && (
732:                   <div className="md:col-span-2">
733:                     <div className="font-medium mb-2">Recent News</div>
734:                     <div className="space-y-2">
735:                       {researchResult.recentNews.slice(0,5).map((n: any, i: number)=> (
736:                         <div key={i} className="flex items-center justify-between border rounded p-3">
737:                           <div className="pr-3">
738:                             <div className="text-sm font-medium line-clamp-1">{n.title}</div>
739:                             <div className="text-xs text-gray-500 flex items-center gap-2"><Calendar className="h-3 w-3" /> {new Date(n.publishedAt).toLocaleString()}</div>
740:                           </div>
741:                           {n.url && (
742:                             <Button asChild size="sm" variant="outline"><a href={n.url} target="_blank" rel="noopener noreferrer">Open</a></Button>
743:                           )}
744:                         </div>
745:                       ))}
746:                     </div>
747:                   </div>
748:                 )}
749:                 {researchResult.cachedAt && (
750:                   <div className="text-xs text-gray-500 md:col-span-2">Cached: {new Date(researchResult.cachedAt).toLocaleString()}</div>
751:                 )}
752:               </CardContent>
753:             </Card>
754:           </div>
755:         )}
756: 
757:         {!isResearching && !researchResult && !error && (
758:           <div className="text-sm text-gray-600 border rounded-lg p-4">
759:             Enter a company name and click Research to get reviews, social signals, contacts, and sources.
760:           </div>
761:         )}
762:       {/* Intro Email Composer Modal */}
763:       {composeOpen && (
764:         <div className="fixed inset-0 z-50 bg-black/40 flex items-center justify-center p-4">
765:           <div className="bg-card rounded-lg w-full max-w-2xl p-4 space-y-3">
766:             <div className="text-sm font-medium">Compose Introduction Email</div>
767:             <div className="grid grid-cols-1 gap-2 text-sm">
768:               <div>
769:                 <div className="text-xs text-gray-600">To</div>
770:                 <input className="border rounded p-2 w-full" value={composeTo} onChange={(e)=>setComposeTo(e.target.value)} placeholder="email@company.com" />
771:               </div>
772:               <div>
773:                 <div className="text-xs text-gray-600">Subject</div>
774:                 <input className="border rounded p-2 w-full" value={composeSubject} onChange={(e)=>setComposeSubject(e.target.value)} />
775:               </div>
776:               <div>
777:                 <div className="text-xs text-gray-600">Body</div>
778:                 <textarea className="border rounded p-2 w-full h-40" value={composeBody} onChange={(e)=>setComposeBody(e.target.value)} />
779:               </div>
780:             </div>
781:             <div className="flex flex-wrap gap-2">
782:               <a className="px-3 py-2 border rounded" href={mailtoHref()}>Open in Email</a>
783:               <button className="px-3 py-2 border rounded" onClick={()=>navigator.clipboard.writeText(`Subject: ${composeSubject}\n\n${composeBody}`)}>Copy</button>
784:               <button className="px-3 py-2 border rounded" onClick={downloadLatestResume} disabled={downloading}>Download Resume PDF</button>
785:               <button className="px-3 py-2 border rounded" onClick={downloadLatestCoverLetter} disabled={downloading}>Download Cover Letter PDF</button>
786:               <div className="flex-1" />
787:               <button className="px-3 py-2 border rounded" onClick={()=>setComposeOpen(false)}>Close</button>
788:             </div>
789:           </div>
790:         </div>
791:       )}
792:       </CardContent>
793:     </Card>
794:   )
795: }
796: 
797: export function CompanyResearchPanel({ companyName, onResearchComplete, onError }: CompanyResearchPanelProps) {
798:   return (
799:     <CompanyResearch
800:       initialCompanyName={companyName}
801:       onResearchComplete={onResearchComplete}
802:       onError={onError}
803:     />
804:   )
805: }
</file>

<file path="src/components/error-boundary.tsx">
  1: 'use client'
  2: import React from 'react'
  3: import { logger, securityLogger } from '@/lib/logger'
  4: import { errorTracker } from '@/lib/error-tracking'
  5: 
  6: interface Props {
  7:   children: React.ReactNode
  8:   fallback?: React.ComponentType<{ error: Error; retry: () => void; errorId: string }>
  9:   onError?: (error: Error, errorInfo: React.ErrorInfo) => void
 10:   isolate?: boolean // If true, error won't propagate to parent boundaries
 11: }
 12: 
 13: interface State {
 14:   hasError: boolean
 15:   error?: Error
 16:   errorId?: string
 17:   errorCount: number
 18: }
 19: 
 20: export class ErrorBoundary extends React.Component<Props, State> {
 21:   private resetTimeout?: NodeJS.Timeout
 22: 
 23:   constructor(props: Props) {
 24:     super(props)
 25:     this.state = { 
 26:       hasError: false,
 27:       errorCount: 0
 28:     }
 29:   }
 30: 
 31:   static getDerivedStateFromError(error: Error): Partial<State> {
 32:     // Generate unique error ID for tracking
 33:     const errorId = `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
 34:     
 35:     return { 
 36:       hasError: true, 
 37:       error,
 38:       errorId
 39:     }
 40:   }
 41: 
 42:   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
 43:     const { errorId, errorCount } = this.state
 44:     
 45:     // Track error in error tracking service
 46:     errorTracker.trackError(error, {
 47:       context: 'react-error-boundary',
 48:       severity: 'high',
 49:       tags: ['ui', 'react'],
 50:       metadata: {
 51:         errorId,
 52:         errorCount,
 53:         componentStack: errorInfo.componentStack
 54:       }
 55:     })
 56:     
 57:     // Log error with full context
 58:     logger.error('React Error Boundary caught error', {
 59:       errorId,
 60:       errorName: error.name,
 61:       errorMessage: error.message,
 62:       errorStack: error.stack,
 63:       componentStack: errorInfo.componentStack,
 64:       errorCount: errorCount + 1,
 65:       timestamp: new Date().toISOString()
 66:     })
 67: 
 68:     // Update error count
 69:     this.setState(prev => ({
 70:       errorCount: prev.errorCount + 1
 71:     }))
 72: 
 73:     // Security logging for suspicious patterns
 74:     if (error.message.includes('script') || error.message.includes('injection')) {
 75:       securityLogger.securityEvent('Suspicious error pattern detected', 'high', {
 76:         errorId,
 77:         errorMessage: error.message,
 78:         componentStack: errorInfo.componentStack
 79:       })
 80:     }
 81: 
 82:     // Send to external error tracking (Sentry, etc.)
 83:     this.reportToExternalService(error, errorInfo, errorId)
 84: 
 85:     // Call custom error handler if provided
 86:     if (this.props.onError) {
 87:       this.props.onError(error, errorInfo)
 88:     }
 89: 
 90:     // Prevent error cascade - reset after 5 seconds if error persists
 91:     if (errorCount > 3) {
 92:       logger.warn('Error boundary hit multiple times, forcing reload', {
 93:         errorId,
 94:         errorCount
 95:       })
 96:       
 97:       if (this.resetTimeout) {
 98:         clearTimeout(this.resetTimeout)
 99:       }
100:       
101:       this.resetTimeout = setTimeout(() => {
102:         window.location.reload()
103:       }, 5000)
104:     }
105:   }
106: 
107:   private reportToExternalService(error: Error, errorInfo: React.ErrorInfo, errorId?: string) {
108:     // Sentry integration
109:     if (typeof window !== 'undefined' && (window as any).Sentry) {
110:       (window as any).Sentry.captureException(error, {
111:         contexts: {
112:           react: {
113:             componentStack: errorInfo.componentStack,
114:             errorId
115:           }
116:         }
117:       })
118:     }
119: 
120:     // Custom error reporting endpoint
121:     if (process.env.NEXT_PUBLIC_ERROR_REPORTING_ENDPOINT) {
122:       fetch(process.env.NEXT_PUBLIC_ERROR_REPORTING_ENDPOINT, {
123:         method: 'POST',
124:         headers: { 'Content-Type': 'application/json' },
125:         body: JSON.stringify({
126:           errorId,
127:           name: error.name,
128:           message: error.message,
129:           stack: error.stack,
130:           componentStack: errorInfo.componentStack,
131:           url: window.location.href,
132:           userAgent: navigator.userAgent,
133:           timestamp: new Date().toISOString()
134:         })
135:       }).catch(err => {
136:         console.error('Failed to report error:', err)
137:       })
138:     }
139:   }
140: 
141:   componentWillUnmount() {
142:     if (this.resetTimeout) {
143:       clearTimeout(this.resetTimeout)
144:     }
145:   }
146: 
147:   private handleRetry = () => {
148:     logger.info('User initiated error boundary retry', {
149:       errorId: this.state.errorId
150:     })
151:     
152:     this.setState({ 
153:       hasError: false,
154:       error: undefined,
155:       errorId: undefined
156:     })
157:   }
158: 
159:   render() {
160:     if (this.state.hasError) {
161:       const Fallback = this.props.fallback || DefaultErrorFallback
162:       return (
163:         <Fallback 
164:           error={this.state.error!} 
165:           retry={this.handleRetry}
166:           errorId={this.state.errorId!}
167:         />
168:       )
169:     }
170: 
171:     return this.props.children
172:   }
173: }
174: 
175: const DefaultErrorFallback = ({ 
176:   error, 
177:   retry, 
178:   errorId 
179: }: { 
180:   error: Error
181:   retry: () => void
182:   errorId: string
183: }) => {
184:   const isDevelopment = process.env.NODE_ENV === 'development'
185: 
186:   return (
187:     <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 p-4">
188:       <div className="max-w-2xl w-full bg-card shadow-2xl rounded-xl overflow-hidden">
189:         {/* Header */}
190:         <div className="bg-gradient-to-r from-red-500 to-red-600 p-6 text-white">
191:           <div className="flex items-start gap-4">
192:             <div className="flex-shrink-0">
193:               <svg className="w-8 h-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
194:                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
195:               </svg>
196:             </div>
197:             <div className="flex-1">
198:               <h2 className="text-2xl font-bold mb-1">Something went wrong</h2>
199:               <p className="text-red-100 text-sm">
200:                 We apologize for the inconvenience. Our team has been notified.
201:               </p>
202:             </div>
203:           </div>
204:         </div>
205: 
206:         {/* Content */}
207:         <div className="p-6 space-y-4">
208:           {/* Error Message */}
209:           <div className="bg-red-50 border border-red-200 rounded-lg p-4">
210:             <h3 className="text-sm font-semibold text-red-800 mb-2">Error Details</h3>
211:             <p className="text-red-700 text-sm font-mono break-words">
212:               {error.message || 'An unexpected error occurred'}
213:             </p>
214:           </div>
215: 
216:           {/* Error ID */}
217:           <div className="bg-gray-50 border border-border rounded-lg p-4">
218:             <h3 className="text-xs font-semibold text-gray-600 mb-1">Error ID (for support)</h3>
219:             <code className="text-xs text-gray-800 font-mono select-all">
220:               {errorId}
221:             </code>
222:           </div>
223: 
224:           {/* Stack Trace (Development Only) */}
225:           {isDevelopment && error.stack && (
226:             <details className="bg-gray-900 text-gray-100 rounded-lg overflow-hidden">
227:               <summary className="cursor-pointer p-4 hover:bg-gray-800 font-semibold text-sm">
228:                 Stack Trace (Development)
229:               </summary>
230:               <pre className="p-4 text-xs overflow-x-auto">
231:                 <code>{error.stack}</code>
232:               </pre>
233:             </details>
234:           )}
235: 
236:           {/* Actions */}
237:           <div className="flex flex-col sm:flex-row gap-3 pt-2">
238:             <button
239:               onClick={retry}
240:               className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-6 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
241:             >
242:               Try Again
243:             </button>
244:             <button
245:               onClick={() => window.location.href = '/'}
246:               className="flex-1 bg-gray-200 text-gray-700 py-3 px-6 rounded-lg font-semibold hover:bg-gray-300 transition-all duration-200"
247:             >
248:               Go to Home
249:             </button>
250:           </div>
251: 
252:           {/* Help Text */}
253:           <div className="text-center text-sm text-gray-500 pt-4">
254:             <p>If this problem persists, please contact support with the Error ID above.</p>
255:           </div>
256:         </div>
257:       </div>
258:     </div>
259:   )
260: }
</file>

<file path="src/components/features-section.tsx">
  1: 'use client'
  2: 
  3: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  4: import { Badge } from '@/components/ui/badge'
  5: import {
  6:   FileText,
  7:   Search,
  8:   Zap,
  9:   Users,
 10:   BarChart3,
 11:   Mail,
 12:   Shield,
 13:   Clock
 14: } from 'lucide-react'
 15: 
 16: const features = [
 17:   {
 18:     icon: FileText,
 19:     title: 'AI Resume Customization',
 20:     description: 'Upload your resume and let AI tailor it to specific job descriptions. Our system analyzes keywords, optimizes for ATS, and highlights relevant experience.',
 21:     badge: 'Most Popular',
 22:     color: 'text-blue-600',
 23:   },
 24:   {
 25:     icon: Search,
 26:     title: 'Intelligent Job Analysis',
 27:     description: 'Paste any job description and get instant analysis of key requirements, preferred skills, and company culture indicators.',
 28:     badge: null,
 29:     color: 'text-green-600',
 30:   },
 31:   {
 32:     icon: Users,
 33:     title: 'Company Research Hub',
 34:     description: 'Get comprehensive company insights from LinkedIn, Glassdoor, and social media. Understand culture, benefits, and recent developments.',
 35:     badge: 'New',
 36:     color: 'text-purple-600',
 37:   },
 38:   {
 39:     icon: Mail,
 40:     title: 'Cover Letter Generation',
 41:     description: 'AI-crafted cover letters that incorporate company research and demonstrate genuine interest in the role and organization.',
 42:     badge: null,
 43:     color: 'text-orange-600',
 44:   },
 45:   {
 46:     icon: BarChart3,
 47:     title: 'Application Tracking',
 48:     description: 'Track all your job applications in one place. Monitor status, set follow-up reminders, and analyze your job search progress.',
 49:     badge: null,
 50:     color: 'text-red-600',
 51:   },
 52:   {
 53:     icon: Zap,
 54:     title: 'Follow-up Automation',
 55:     description: 'Generate personalized follow-up emails and LinkedIn messages. Never miss an opportunity to stay top-of-mind with employers.',
 56:     badge: 'Pro',
 57:     color: 'text-yellow-600',
 58:   },
 59:   {
 60:     icon: Shield,
 61:     title: 'Privacy & Security',
 62:     description: 'Your data is encrypted and secure. We never share your information with employers or third parties.',
 63:     badge: null,
 64:     color: 'text-indigo-600',
 65:   },
 66:   {
 67:     icon: Clock,
 68:     title: 'Time-Saving Workflow',
 69:     description: 'Streamlined process from resume upload to application submission. Spend less time on applications, more time on interviews.',
 70:     badge: null,
 71:     color: 'text-teal-600',
 72:   },
 73: ]
 74: 
 75: export function FeaturesSection() {
 76:   return (
 77:     <section className="py-24 bg-[#2B2B2B]">
 78:       <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
 79:         {/* BEFORE/AFTER METRICS - NEW! */}
 80:         <div className="mx-auto max-w-4xl mb-20">
 81:           <div className="text-center mb-10">
 82:             <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl mb-2">
 83:               Real Results from Real Job Seekers
 84:             </h2>
 85:             <p className="text-lg text-white/70">
 86:               See the dramatic difference Career Lever AI makes
 87:             </p>
 88:           </div>
 89:           
 90:           <div className="grid md:grid-cols-2 gap-8">
 91:             {/* WITHOUT Career Lever AI */}
 92:             <div className="bg-red-50 border-2 border-red-200 rounded-2xl p-8">
 93:               <div className="text-center mb-6">
 94:                 <div className="inline-flex items-center justify-center w-16 h-16 bg-red-100 rounded-full mb-4">
 95:                   <span className="text-3xl">😓</span>
 96:                 </div>
 97:                 <h3 className="text-xl font-bold text-red-900 mb-2">Without Career Lever AI</h3>
 98:               </div>
 99:               <ul className="space-y-4">
100:                 <li className="flex items-start">
101:                   <span className="text-red-500 font-bold mr-3">❌</span>
102:                   <div>
103:                     <div className="font-semibold text-foreground">50+ applications = 2 interviews</div>
104:                     <div className="text-sm text-gray-600">4% response rate</div>
105:                   </div>
106:                 </li>
107:                 <li className="flex items-start">
108:                   <span className="text-red-500 font-bold mr-3">❌</span>
109:                   <div>
110:                     <div className="font-semibold text-foreground">4 hours per application</div>
111:                     <div className="text-sm text-gray-600">200+ hours wasted</div>
112:                   </div>
113:                 </li>
114:                 <li className="flex items-start">
115:                   <span className="text-red-500 font-bold mr-3">❌</span>
116:                   <div>
117:                     <div className="font-semibold text-foreground">Generic resumes ignored</div>
118:                     <div className="text-sm text-gray-600">15% ATS pass rate</div>
119:                   </div>
120:                 </li>
121:                 <li className="flex items-start">
122:                   <span className="text-red-500 font-bold mr-3">❌</span>
123:                   <div>
124:                     <div className="font-semibold text-foreground">Missed follow-ups</div>
125:                     <div className="text-sm text-gray-600">Lost opportunities</div>
126:                   </div>
127:                 </li>
128:               </ul>
129:             </div>
130: 
131:             {/* WITH Career Lever AI */}
132:             <div className="bg-green-50 border-2 border-green-400 rounded-2xl p-8 relative">
133:               <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
134:                 <Badge className="bg-green-600 text-white px-4 py-1 text-sm font-bold">
135:                   85% SUCCESS RATE
136:                 </Badge>
137:               </div>
138:               <div className="text-center mb-6 mt-2">
139:                 <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
140:                   <span className="text-3xl">🎯</span>
141:                 </div>
142:                 <h3 className="text-xl font-bold text-green-900 mb-2">With Career Lever AI</h3>
143:               </div>
144:               <ul className="space-y-4">
145:                 <li className="flex items-start">
146:                   <span className="text-green-600 font-bold mr-3">✅</span>
147:                   <div>
148:                     <div className="font-semibold text-foreground">15 applications = 8 interviews</div>
149:                     <div className="text-sm text-gray-600">53% response rate (13x better!)</div>
150:                   </div>
151:                 </li>
152:                 <li className="flex items-start">
153:                   <span className="text-green-600 font-bold mr-3">✅</span>
154:                   <div>
155:                     <div className="font-semibold text-foreground">20 minutes per application</div>
156:                     <div className="text-sm text-gray-600">5 hours total (12x faster!)</div>
157:                   </div>
158:                 </li>
159:                 <li className="flex items-start">
160:                   <span className="text-green-600 font-bold mr-3">✅</span>
161:                   <div>
162:                     <div className="font-semibold text-foreground">ATS-optimized resumes</div>
163:                     <div className="text-sm text-gray-600">85% ATS pass rate (5.6x better!)</div>
164:                   </div>
165:                 </li>
166:                 <li className="flex items-start">
167:                   <span className="text-green-600 font-bold mr-3">✅</span>
168:                   <div>
169:                     <div className="font-semibold text-foreground">Automated follow-ups</div>
170:                     <div className="text-sm text-gray-600">Never miss opportunities</div>
171:                   </div>
172:                 </li>
173:               </ul>
174:             </div>
175:           </div>
176:         </div>
177: 
178:         <div className="mx-auto max-w-3xl text-center mb-16">
179:           <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl">
180:             Everything you need to land your dream job
181:           </h2>
182:           <p className="mt-4 text-lg text-gray-600">
183:             Our AI-powered platform provides comprehensive tools to optimize every aspect of your job search.
184:           </p>
185:         </div>
186: 
187:         <div className="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-8 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-2 xl:grid-cols-4">
188:           {features.map((feature, index) => (
189:             <Card key={index} className="relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-shadow duration-300">
190:               <CardHeader className="pb-4">
191:                 <div className="flex items-center justify-between">
192:                   <div className={`rounded-lg p-3 ${feature.color.replace('text-', 'bg-').replace('600', '100')}`}>
193:                     <feature.icon className={`h-6 w-6 ${feature.color}`} />
194:                   </div>
195:                   {feature.badge && (
196:                     <Badge variant="secondary" className="text-xs">
197:                       {feature.badge}
198:                     </Badge>
199:                   )}
200:                 </div>
201:                 <CardTitle className="text-xl">{feature.title}</CardTitle>
202:               </CardHeader>
203:               <CardContent>
204:                 <CardDescription className="text-base leading-relaxed">
205:                   {feature.description}
206:                 </CardDescription>
207:               </CardContent>
208:             </Card>
209:           ))}
210:         </div>
211: 
212:         {/* MOBILE APP FEATURES - NEW! */}
213:         <div className="mx-auto max-w-4xl mt-32">
214:           <div className="text-center mb-12">
215:             <Badge className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-1 mb-4">
216:               📱 Mobile Apps
217:             </Badge>
218:             <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-4">
219:               Job Search on the Go
220:             </h2>
221:             <p className="text-lg text-gray-600">
222:               Apply to jobs from anywhere with our powerful mobile apps
223:             </p>
224:           </div>
225:           
226:           <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
227:             <Card className="border-2 border-blue-100 hover:border-blue-300 transition-colors">
228:               <CardContent className="p-6 text-center">
229:                 <div className="text-4xl mb-4">📸</div>
230:                 <h3 className="font-bold text-foreground mb-2">Scan Job Postings</h3>
231:                 <p className="text-sm text-gray-600">Take a photo of any job posting and instantly apply with AI-optimized resume</p>
232:               </CardContent>
233:             </Card>
234:             
235:             <Card className="border-2 border-purple-100 hover:border-purple-300 transition-colors">
236:               <CardContent className="p-6 text-center">
237:                 <div className="text-4xl mb-4">🔔</div>
238:                 <h3 className="font-bold text-foreground mb-2">Push Notifications</h3>
239:                 <p className="text-sm text-gray-600">Get instant alerts for interview prep, follow-ups, and application updates</p>
240:               </CardContent>
241:             </Card>
242:             
243:             <Card className="border-2 border-green-100 hover:border-green-300 transition-colors">
244:               <CardContent className="p-6 text-center">
245:                 <div className="text-4xl mb-4">📍</div>
246:                 <h3 className="font-bold text-foreground mb-2">Location-Based Jobs</h3>
247:                 <p className="text-sm text-gray-600">Find and apply to local opportunities while commuting or traveling</p>
248:               </CardContent>
249:             </Card>
250:             
251:             <Card className="border-2 border-orange-100 hover:border-orange-300 transition-colors">
252:               <CardContent className="p-6 text-center">
253:                 <div className="text-4xl mb-4">💾</div>
254:                 <h3 className="font-bold text-foreground mb-2">Offline Mode</h3>
255:                 <p className="text-sm text-gray-600">Edit resumes and prepare applications even without internet connection</p>
256:               </CardContent>
257:             </Card>
258:           </div>
259:         </div>
260: 
261:         {/* PRICING PREVIEW - NEW! */}
262:         <div className="mx-auto max-w-5xl mt-32 mb-16">
263:           <div className="text-center mb-12">
264:             <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-4">
265:               Simple, Transparent Pricing
266:             </h2>
267:             <p className="text-lg text-gray-600">
268:               Start free, upgrade when you're ready
269:             </p>
270:           </div>
271:           
272:           <div className="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
273:             {/* FREE TIER */}
274:             <Card className="border-2 border-border hover:shadow-xl transition-all">
275:               <CardHeader className="bg-gray-50 pb-4">
276:                 <div className="text-center">
277:                   <CardTitle className="text-2xl mb-2">Free Forever</CardTitle>
278:                   <div className="text-4xl font-bold text-foreground mb-2">$0</div>
279:                   <p className="text-sm text-gray-600">Perfect for getting started</p>
280:                 </div>
281:               </CardHeader>
282:               <CardContent className="p-6">
283:                 <ul className="space-y-3">
284:                   <li className="flex items-start">
285:                     <span className="text-green-500 mr-2">✅</span>
286:                     <span className="text-gray-700"><strong>3 AI resume customizations</strong> per month</span>
287:                   </li>
288:                   <li className="flex items-start">
289:                     <span className="text-green-500 mr-2">✅</span>
290:                     <span className="text-gray-700"><strong>10 company research reports</strong></span>
291:                   </li>
292:                   <li className="flex items-start">
293:                     <span className="text-green-500 mr-2">✅</span>
294:                     <span className="text-gray-700"><strong>Basic application tracking</strong></span>
295:                   </li>
296:                   <li className="flex items-start">
297:                     <span className="text-green-500 mr-2">✅</span>
298:                     <span className="text-gray-700"><strong>ATS optimization</strong></span>
299:                   </li>
300:                   <li className="flex items-start">
301:                     <span className="text-green-500 mr-2">✅</span>
302:                     <span className="text-gray-700"><strong>Job search tools</strong></span>
303:                   </li>
304:                 </ul>
305:               </CardContent>
306:             </Card>
307: 
308:             {/* PRO TIER */}
309:             <Card className="border-2 border-blue-400 hover:shadow-2xl transition-all relative">
310:               <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
311:                 <Badge className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-2 text-sm font-bold">
312:                   🔥 MOST POPULAR
313:                 </Badge>
314:               </div>
315:               <CardHeader className="bg-gradient-to-br from-blue-50 to-purple-50 pb-4 pt-8">
316:                 <div className="text-center">
317:                   <CardTitle className="text-2xl mb-2">Pro</CardTitle>
318:                   <div className="text-4xl font-bold text-blue-600 mb-2">$9.99<span className="text-lg text-gray-600">/mo</span></div>
319:                   <p className="text-sm text-gray-600">Land your dream job faster</p>
320:                 </div>
321:               </CardHeader>
322:               <CardContent className="p-6">
323:                 <ul className="space-y-3">
324:                   <li className="flex items-start">
325:                     <span className="text-blue-500 mr-2">⚡</span>
326:                     <span className="text-gray-700"><strong>Unlimited AI customizations</strong></span>
327:                   </li>
328:                   <li className="flex items-start">
329:                     <span className="text-blue-500 mr-2">⚡</span>
330:                     <span className="text-gray-700"><strong>Unlimited company research</strong></span>
331:                   </li>
332:                   <li className="flex items-start">
333:                     <span className="text-blue-500 mr-2">⚡</span>
334:                     <span className="text-gray-700"><strong>Priority ATS optimization</strong></span>
335:                   </li>
336:                   <li className="flex items-start">
337:                     <span className="text-blue-500 mr-2">⚡</span>
338:                     <span className="text-gray-700"><strong>LinkedIn integration</strong></span>
339:                   </li>
340:                   <li className="flex items-start">
341:                     <span className="text-blue-500 mr-2">⚡</span>
342:                     <span className="text-gray-700"><strong>Advanced analytics</strong></span>
343:                   </li>
344:                   <li className="flex items-start">
345:                     <span className="text-blue-500 mr-2">⚡</span>
346:                     <span className="text-gray-700"><strong>Interview prep AI</strong></span>
347:                   </li>
348:                   <li className="flex items-start">
349:                     <span className="text-blue-500 mr-2">⚡</span>
350:                     <span className="text-gray-700"><strong>Priority support</strong></span>
351:                   </li>
352:                 </ul>
353:               </CardContent>
354:             </Card>
355:           </div>
356:         </div>
357:       </div>
358:     </section>
359:   )
360: }
</file>

<file path="src/components/hero-section.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import Link from 'next/link'
  5: import { signIn } from 'next-auth/react'
  6: import { Sparkles, Target, Zap, Users } from 'lucide-react'
  7: 
  8: export function HeroSection() {
  9:   const [email, setEmail] = useState('')
 10: 
 11:   const handleGetStarted = async () => {
 12:     // Send users to dedicated auth page with their email prefilled
 13:     const callbackUrl = encodeURIComponent('/dashboard')
 14:     const base = typeof window !== 'undefined' ? window.location.origin : ''
 15:     const target = `${base}/auth/signin?callbackUrl=${encodeURIComponent(`${base}/dashboard`)}${email ? `&email=${encodeURIComponent(email)}` : ''}`
 16:     window.location.href = target
 17:   }
 18: 
 19:   const handleGoogle = async () => {
 20:     try {
 21:       await signIn('google', { callbackUrl: '/dashboard' })
 22:     } catch {}
 23:   }
 24: 
 25:   return (
 26:     <section className="relative overflow-hidden bg-gradient-to-br from-blue-600 via-purple-600 to-blue-800">
 27:       {/* Background Pattern */}
 28:       <div className="absolute inset-0 bg-black/10">
 29:         <div className="absolute inset-0" style={{
 30:           backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='4'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
 31:         }} />
 32:       </div>
 33: 
 34:       <div className="relative mx-auto max-w-7xl px-4 py-24 sm:px-6 sm:py-32 lg:px-8">
 35:         {/* Top Nav with brand + auth actions (visible on all viewports) */}
 36:         <div className="mb-10">
 37:           <div className="flex items-center justify-between">
 38:             <div className="flex items-center gap-3">
 39:               <img src="/icon-192.svg" alt="Career Lever AI" className="h-8 w-8" />
 40:               <span className="text-white font-semibold text-lg">Career Lever AI</span>
 41:             </div>
 42:             <div className="flex items-center gap-3">
 43:               <Link
 44:                 href={`/auth/signin${email ? `?email=${encodeURIComponent(email)}` : ''}`}
 45:                 className="text-white/90 hover:text-white text-sm font-medium"
 46:               >
 47:                 Sign in
 48:               </Link>
 49:               <Link
 50:                 href={`/auth/signup${email ? `?email=${encodeURIComponent(email)}` : ''}`}
 51:                 className="btn btn-secondary text-white border-white/20 hover:bg-card/20"
 52:               >
 53:                 Sign up
 54:               </Link>
 55:             </div>
 56:           </div>
 57:         </div>
 58:         <div className="mx-auto max-w-3xl text-center">
 59:           {/* Badge */}
 60:           <div className="badge badge-accent mb-8 bg-white/10 text-white hover:bg-card/20">
 61:             <Sparkles className="mr-2 h-4 w-4" />
 62:             AI-Powered Job Application Assistant
 63:           </div>
 64: 
 65:           {/* Main Heading */}
 66:           <h1 className="text-4xl font-extrabold tracking-tight text-white sm:text-6xl lg:text-7xl">
 67:             <span className="block">Career Lever AI</span>
 68:             <span className="block bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">
 69:               Land Your Dream Job with AI-Powered Tools
 70:             </span>
 71:           </h1>
 72: 
 73:           {/* Subheading */}
 74:           <p className="mx-auto mt-6 max-w-2xl text-lg leading-8 text-blue-100 sm:text-xl">
 75:             Customize your resume and cover letters with AI, research companies instantly,
 76:             and track your applications—all in one powerful platform designed for job seekers.
 77:           </p>
 78: 
 79:           {/* APP STORE BADGES - NEW! */}
 80:           <div className="mx-auto mt-10 flex flex-col items-center gap-4">
 81:             <p className="text-sm font-semibold text-white/90 uppercase tracking-wider">
 82:               Download on Your Platform
 83:             </p>
 84:             <div className="flex flex-wrap justify-center gap-4">
 85:               {/* App Store Badge */}
 86:               <a 
 87:                 href="#" 
 88:                 className="inline-flex items-center gap-2 px-6 py-3 bg-black rounded-xl hover:bg-gray-800 transition-all hover:scale-105"
 89:                 aria-label="Download on App Store"
 90:               >
 91:                 <svg className="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
 92:                   <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
 93:                 </svg>
 94:                 <div className="text-left">
 95:                   <div className="text-xs text-white/70">Download on the</div>
 96:                   <div className="text-sm font-semibold text-white">App Store</div>
 97:                 </div>
 98:               </a>
 99: 
100:               {/* Google Play Badge */}
101:               <a 
102:                 href="#" 
103:                 className="inline-flex items-center gap-2 px-6 py-3 bg-black rounded-xl hover:bg-gray-800 transition-all hover:scale-105"
104:                 aria-label="Get it on Google Play"
105:               >
106:                 <svg className="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
107:                   <path d="M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z"/>
108:                 </svg>
109:                 <div className="text-left">
110:                   <div className="text-xs text-white/70">GET IT ON</div>
111:                   <div className="text-sm font-semibold text-white">Google Play</div>
112:                 </div>
113:               </a>
114: 
115:               {/* Microsoft Store Badge */}
116:               <a 
117:                 href="#" 
118:                 className="inline-flex items-center gap-2 px-6 py-3 bg-black rounded-xl hover:bg-gray-800 transition-all hover:scale-105"
119:                 aria-label="Get it from Microsoft"
120:               >
121:                 <svg className="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
122:                   <path d="M11.5,3L2,5.5V11H11.5V3M22,3L12.5,5.5V11H22V3M11.5,13H2V18.5L11.5,21V13M12.5,13V21L22,18.5V13H12.5Z"/>
123:                 </svg>
124:                 <div className="text-left">
125:                   <div className="text-xs text-white/70">Get it from</div>
126:                   <div className="text-sm font-semibold text-white">Microsoft</div>
127:                 </div>
128:               </a>
129:             </div>
130:           </div>
131: 
132:           {/* CTA Section */}
133:           <div className="mx-auto mt-10 max-w-md">
134:             <div className="text-center mb-6">
135:               <p className="text-sm text-white/70 uppercase tracking-wider font-semibold mb-4">
136:                 Or Sign Up on Web
137:               </p>
138:             </div>
139:             
140:             {/* SSO Buttons */}
141:             <div className="space-y-3">
142:               <button
143:                 onClick={handleGoogle}
144:                 className="btn btn-secondary w-full bg-card text-gray-700 hover:bg-gray-50 flex items-center justify-center gap-3"
145:               >
146:                 <svg className="w-5 h-5" viewBox="0 0 24 24">
147:                   <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
148:                   <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
149:                   <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
150:                   <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
151:                 </svg>
152:                 Continue with Google
153:               </button>
154: 
155:               <button
156:                 onClick={() => signIn('apple', { callbackUrl: '/dashboard' })}
157:                 className="btn w-full bg-black text-white hover:bg-gray-900 flex items-center justify-center gap-3"
158:               >
159:                 <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
160:                   <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
161:                 </svg>
162:                 Continue with Apple
163:               </button>
164: 
165:               <button
166:                 onClick={() => signIn('azure-ad', { callbackUrl: '/dashboard' })}
167:                 className="btn w-full bg-[#00A4EF] text-white hover:bg-[#008BCF] flex items-center justify-center gap-3"
168:               >
169:                 <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
170:                   <path d="M11.5,3L2,5.5V11H11.5V3M22,3L12.5,5.5V11H22V3M11.5,13H2V18.5L11.5,21V13M12.5,13V21L22,18.5V13H12.5Z"/>
171:                 </svg>
172:                 Continue with Microsoft
173:               </button>
174:             </div>
175: 
176:             <div className="mt-6 text-center">
177:               <Link href={`/auth/signup${email ? `?email=${encodeURIComponent(email)}` : ''}`} className="text-sm text-blue-100 hover:text-white underline">
178:                 Or sign up with email
179:               </Link>
180:             </div>
181: 
182:             <p className="mt-6 text-center text-xs text-blue-200">
183:               🚀 Join 10,000+ job seekers who've landed their dream roles
184:             </p>
185:           </div>
186: 
187:           {/* Feature Cards */}
188:           <div className="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-6 sm:grid-cols-3">
189:             <div className="card bg-card/10 border-white/20 backdrop-blur-sm">
190:               <div className="text-center">
191:                 <Target className="mx-auto h-8 w-8 text-yellow-400" />
192:                 <h3 className="mt-4 text-sm font-semibold text-white">Smart Resume Tailoring</h3>
193:                 <p className="mt-2 text-sm text-blue-100">
194:                   AI analyzes job descriptions and optimizes your resume for ATS systems
195:                 </p>
196:               </div>
197:             </div>
198: 
199:             <div className="card bg-card/10 border-white/20 backdrop-blur-sm">
200:               <div className="text-center">
201:                 <Zap className="mx-auto h-8 w-8 text-yellow-400" />
202:                 <h3 className="mt-4 text-sm font-semibold text-white">Instant Company Research</h3>
203:                 <p className="mt-2 text-sm text-blue-100">
204:                   Get company insights from LinkedIn, Glassdoor, and social media
205:                 </p>
206:               </div>
207:             </div>
208: 
209:             <div className="card bg-card/10 border-white/20 backdrop-blur-sm">
210:               <div className="text-center">
211:                 <Users className="mx-auto h-8 w-8 text-yellow-400" />
212:                 <h3 className="mt-4 text-sm font-semibold text-white">Application Tracking</h3>
213:                 <p className="mt-2 text-sm text-blue-100">
214:                   Track all your applications and follow-ups in one dashboard
215:                 </p>
216:               </div>
217:             </div>
218:           </div>
219:         </div>
220:       </div>
221:     </section>
222:   )
223: }
</file>

<file path="src/components/job-card.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { useSession } from 'next-auth/react'
  5: import Link from 'next/link'
  6: import {
  7:   MapPinIcon,
  8:   CurrencyDollarIcon,
  9:   CheckCircleIcon,
 10:   EnvelopeIcon,
 11:   EyeIcon,
 12:   CheckBadgeIcon
 13: } from '@heroicons/react/24/outline'
 14: import { Button } from '@/components/ui/button'
 15: import { useToast } from '@/components/ui/use-toast'
 16: import { cn } from '@/lib/utils'
 17: 
 18: interface Job {
 19:   id: string
 20:   title: string
 21:   company: string
 22:   location: string
 23:   salary?: string
 24:   skills?: string[]
 25:   url: string
 26:   logo?: string
 27:   description?: string
 28:   contacts?: { email?: string } // From research
 29:   seen?: boolean // User has viewed this job
 30:   applied?: boolean // User has applied to this job
 31:   saved?: boolean // User has saved this job
 32: }
 33: 
 34: interface JobCardProps {
 35:   job: Job;
 36:   resumeText?: string;
 37:   coverText?: string;
 38:   className?: string;
 39: }
 40: 
 41: export function JobCard({ job, resumeText, coverText, className }: JobCardProps) {
 42:   const { data: session } = useSession()
 43:   const { toast } = useToast()
 44:   const [isApplying, setIsApplying] = useState(false)
 45: 
 46:   const handleApply = async () => {
 47:     if (!session?.user?.id || !resumeText || !coverText || !job.contacts?.email) {
 48:       toast({
 49:         title: 'Apply Failed',
 50:         description: 'Login and complete research first.',
 51:         variant: 'destructive'
 52:       })
 53:       return
 54:     }
 55: 
 56:     setIsApplying(true)
 57:     try {
 58:       const response = await fetch('/api/outreach/compose', {
 59:         method: 'POST',
 60:         headers: { 'Content-Type': 'application/json' },
 61:         body: JSON.stringify({
 62:           jobId: job.id,
 63:           resumeText,
 64:           coverText,
 65:           contacts: job.contacts,
 66:           company: job.company,
 67:           jobTitle: job.title
 68:         })
 69:       })
 70: 
 71:       if (!response.ok) {
 72:         throw new Error('Compose failed')
 73:       }
 74: 
 75:       const data = await response.json()
 76:       window.location.href = data.mailtoUrl // Open email client
 77:       toast({
 78:         title: 'Application Sent!',
 79:         description: `Tracked as ${data.applicationId}. Check your email client.`,
 80:       })
 81:     } catch (error) {
 82:       toast({
 83:         title: 'Apply Failed',
 84:         description: 'Try again or check contacts.',
 85:         variant: 'destructive'
 86:       })
 87:     } finally {
 88:       setIsApplying(false)
 89:     }
 90:   }
 91: 
 92:   // Dynamic gradient classes using CSS variables
 93:   const gradientStyles = [
 94:     'linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)))', // Blue to Yellow
 95:     'linear-gradient(135deg, hsl(var(--secondary)), hsl(var(--primary)))', // Red to Blue
 96:     'linear-gradient(135deg, hsl(var(--accent)), hsl(var(--warning)))', // Yellow to Orange
 97:     'linear-gradient(135deg, hsl(var(--success)), hsl(142 76% 30%))', // Green
 98:     'linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)))', // Blue to Red
 99:   ]
100:   const gradientIndex = parseInt(job.id) % gradientStyles.length
101:   const gradientStyle = gradientStyles[gradientIndex]
102: 
103:   return (
104:     <div className={cn(
105:       'bg-card border border-border rounded-xl p-6 hover:shadow-lg transition-all duration-300 hover:border-primary/50 relative',
106:       className
107:     )}>
108:       {/* Status Badges */}
109:       <div className="absolute top-4 right-4 flex gap-2">
110:         {job.seen && (
111:           <div className="flex items-center gap-1 px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full text-xs font-semibold">
112:             <EyeIcon className="w-3 h-3" />
113:             Viewed
114:           </div>
115:         )}
116:         {job.applied && (
117:           <div className="flex items-center gap-1 px-2 py-1 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-full text-xs font-semibold">
118:             <CheckBadgeIcon className="w-3 h-3" />
119:             Applied
120:           </div>
121:         )}
122:       </div>
123:       {/* Modern gradient border wrapper using theme colors */}
124:       <div 
125:         className="p-1 rounded-3xl shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-2"
126:         style={{ background: gradientStyle }}
127:       >
128:         <div className="bg-card rounded-[calc(1.5rem-1px)] p-6 h-full">
129:           <Link href={job.url} className="block">
130:             {/* Header with colorful logo */}
131:             <div className="flex items-start gap-4 mb-4">
132:               <div 
133:                 className="w-16 h-16 rounded-2xl flex items-center justify-center flex-shrink-0 shadow-lg"
134:                 style={{ background: gradientStyle }}
135:               >
136:                 {job.logo ? (
137:                   <img src={job.logo} alt={`${job.company} logo`} className="w-14 h-14 rounded-xl object-cover" />
138:                 ) : (
139:                   <span className="text-2xl font-bold text-white">{job.company.charAt(0).toUpperCase()}</span>
140:                 )}
141:               </div>
142:               <div className="flex-1 min-w-0">
143:                 <h3 className="text-xl font-bold text-foreground mb-1 line-clamp-2 group-hover:text-primary transition-colors">{job.title}</h3>
144:                 <p className="text-base font-semibold text-muted-foreground">{job.company}</p>
145:                 <div className="flex items-center text-sm text-muted-foreground mt-1">
146:                   <MapPinIcon className="w-4 h-4 mr-1 flex-shrink-0" />
147:                   <span className="truncate">{job.location}</span>
148:                 </div>
149:               </div>
150:             </div>
151: 
152:             {/* Description */}
153:             <p className="text-sm text-muted-foreground mb-4 line-clamp-2">
154:               {job.description || 'Exciting opportunity in a dynamic team. Apply now to learn more!'}
155:             </p>
156: 
157:             {/* Modern skill badges */}
158:             {job.skills && job.skills.length > 0 && (
159:               <div className="flex flex-wrap gap-2 mb-4">
160:                 {job.skills.slice(0, 3).map((skill, idx) => {
161:                   const badgeClasses = [
162:                     'badge-primary',
163:                     'badge-secondary',
164:                     'badge-accent',
165:                   ]
166:                   const badgeClass = badgeClasses[idx % badgeClasses.length]
167:                   return (
168:                     <span key={idx} className={`${badgeClass} text-xs font-bold`}>
169:                       {skill}
170:                     </span>
171:                   )
172:                 })}
173:               </div>
174:             )}
175: 
176:             {/* Salary with icon */}
177:             {job.salary && (
178:               <div className="flex items-center text-sm font-bold text-primary mb-4">
179:                 <CurrencyDollarIcon className="w-5 h-5 mr-1" />
180:                 {job.salary}
181:               </div>
182:             )}
183:           </Link>
184: 
185:           {/* Modern Apply Button */}
186:           <Button 
187:             onClick={handleApply} 
188:             disabled={isApplying} 
189:             className="w-full text-white font-bold py-3 rounded-xl shadow-lg hover:shadow-2xl hover:-translate-y-1 transition-all duration-300 border-0 mb-3"
190:             style={{ background: gradientStyle }}
191:           >
192:             {isApplying ? (
193:               <>
194:                 <EnvelopeIcon className="w-5 h-5 mr-2" />
195:                 Sending...
196:               </>
197:             ) : (
198:               <>
199:                 <CheckCircleIcon className="w-5 h-5 mr-2" />
200:                 Apply Now
201:               </>
202:             )}
203:           </Button>
204: 
205:           {/* Quick Access Buttons */}
206:           <div className="grid grid-cols-2 gap-2">
207:             <Link 
208:               href={`/career-finder/company?company=${encodeURIComponent(job.company)}`}
209:               className="flex items-center justify-center gap-2 px-3 py-2 text-xs font-semibold text-primary border border-primary rounded-lg hover:bg-primary/10 transition-colors"
210:             >
211:               🔍 Research
212:             </Link>
213:             <Link 
214:               href={`/career-finder/job-analysis?job=${job.id}`}
215:               className="flex items-center justify-center gap-2 px-3 py-2 text-xs font-semibold text-primary border border-primary rounded-lg hover:bg-primary/10 transition-colors"
216:             >
217:               📊 Analytics
218:             </Link>
219:           </div>
220:         </div>
221:       </div>
222:     </div>
223:   )
224: }
</file>

<file path="src/components/mobile/SuccessAnimation.tsx">
  1: 'use client'
  2: 
  3: import { useEffect } from 'react'
  4: import { motion } from 'framer-motion'
  5: import confetti from 'canvas-confetti'
  6: import { Haptics, ImpactStyle, NotificationType } from '@capacitor/haptics'
  7: 
  8: interface SuccessAnimationProps {
  9:   title?: string
 10:   message?: string
 11:   onComplete?: () => void
 12:   autoClose?: boolean
 13:   autoCloseDelay?: number
 14: }
 15: 
 16: export function SuccessAnimation({
 17:   title = 'Success!',
 18:   message = 'Action completed successfully',
 19:   onComplete,
 20:   autoClose = true,
 21:   autoCloseDelay = 2000
 22: }: SuccessAnimationProps) {
 23:   
 24:   useEffect(() => {
 25:     // Trigger haptic feedback
 26:     const triggerHaptics = async () => {
 27:       try {
 28:         // Success notification haptic
 29:         await Haptics.notification({ type: NotificationType.Success })
 30:       } catch (error) {
 31:         console.debug('Haptics not available')
 32:       }
 33:     }
 34: 
 35:     // Fire confetti
 36:     const fireConfetti = () => {
 37:       const duration = 2000
 38:       const animationEnd = Date.now() + duration
 39:       const defaults = { 
 40:         startVelocity: 30, 
 41:         spread: 360, 
 42:         ticks: 60, 
 43:         zIndex: 10000,
 44:         colors: ['#667eea', '#764ba2', '#10b981', '#f59e0b']
 45:       }
 46: 
 47:       function randomInRange(min: number, max: number) {
 48:         return Math.random() * (max - min) + min
 49:       }
 50: 
 51:       const interval = setInterval(() => {
 52:         const timeLeft = animationEnd - Date.now()
 53: 
 54:         if (timeLeft <= 0) {
 55:           clearInterval(interval)
 56:           return
 57:         }
 58: 
 59:         const particleCount = 30 * (timeLeft / duration)
 60:         
 61:         // Fire from left
 62:         confetti({
 63:           ...defaults,
 64:           particleCount,
 65:           origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
 66:         })
 67:         
 68:         // Fire from right
 69:         confetti({
 70:           ...defaults,
 71:           particleCount,
 72:           origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
 73:         })
 74:       }, 250)
 75: 
 76:       return () => clearInterval(interval)
 77:     }
 78: 
 79:     triggerHaptics()
 80:     const cleanup = fireConfetti()
 81: 
 82:     // Auto-close
 83:     if (autoClose && onComplete) {
 84:       const timer = setTimeout(() => {
 85:         onComplete()
 86:       }, autoCloseDelay)
 87: 
 88:       return () => {
 89:         cleanup()
 90:         clearTimeout(timer)
 91:       }
 92:     }
 93: 
 94:     return cleanup
 95:   }, [autoClose, autoCloseDelay, onComplete])
 96: 
 97:   return (
 98:     <div className="fixed inset-0 z-[10000] flex items-center justify-center bg-black/50 backdrop-blur-sm">
 99:       <motion.div
100:         initial={{ scale: 0, opacity: 0 }}
101:         animate={{ scale: 1, opacity: 1 }}
102:         exit={{ scale: 0.8, opacity: 0 }}
103:         transition={{ 
104:           type: 'spring', 
105:           stiffness: 200, 
106:           damping: 20 
107:         }}
108:         className="bg-card rounded-3xl p-8 mx-4 max-w-sm w-full shadow-2xl"
109:       >
110:         {/* Success icon */}
111:         <motion.div
112:           initial={{ scale: 0 }}
113:           animate={{ scale: 1 }}
114:           transition={{ 
115:             delay: 0.2, 
116:             type: 'spring', 
117:             stiffness: 200, 
118:             damping: 15 
119:           }}
120:           className="w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center shadow-lg"
121:         >
122:           <motion.svg
123:             initial={{ pathLength: 0 }}
124:             animate={{ pathLength: 1 }}
125:             transition={{ duration: 0.5, delay: 0.3 }}
126:             className="w-12 h-12 text-white"
127:             fill="none"
128:             viewBox="0 0 24 24"
129:             stroke="currentColor"
130:             strokeWidth={3}
131:           >
132:             <motion.path
133:               strokeLinecap="round"
134:               strokeLinejoin="round"
135:               d="M5 13l4 4L19 7"
136:             />
137:           </motion.svg>
138:         </motion.div>
139: 
140:         {/* Title */}
141:         <motion.h2
142:           initial={{ opacity: 0, y: 20 }}
143:           animate={{ opacity: 1, y: 0 }}
144:           transition={{ delay: 0.4 }}
145:           className="text-2xl font-bold text-center text-gray-900 dark:text-white mb-2"
146:         >
147:           {title}
148:         </motion.h2>
149: 
150:         {/* Message */}
151:         <motion.p
152:           initial={{ opacity: 0, y: 20 }}
153:           animate={{ opacity: 1, y: 0 }}
154:           transition={{ delay: 0.5 }}
155:           className="text-center text-gray-600 dark:text-gray-400"
156:         >
157:           {message}
158:         </motion.p>
159: 
160:         {/* Progress indicator (if auto-close) */}
161:         {autoClose && (
162:           <motion.div
163:             initial={{ width: '100%' }}
164:             animate={{ width: '0%' }}
165:             transition={{ duration: autoCloseDelay / 1000, ease: 'linear' }}
166:             className="h-1 bg-gradient-to-r from-green-400 to-green-600 rounded-full mt-6"
167:           />
168:         )}
169:       </motion.div>
170:     </div>
171:   )
172: }
</file>

<file path="src/components/modern-job-card.tsx">
  1: /**
  2:  * Modern Job Card Component
  3:  * Figma-inspired job cards with color variations
  4:  * 
  5:  * Color themes: purple, red, yellow
  6:  */
  7: 
  8: 'use client'
  9: 
 10: import { MapPin, GraduationCap, Clock, ArrowRight } from 'lucide-react'
 11: import Link from 'next/link'
 12: import { cn } from '@/lib/utils'
 13: import { getSalaryDisplay } from '@/lib/salary-utils'
 14: 
 15: export interface ModernJobCardProps {
 16:   id: string
 17:   title: string
 18:   company: string
 19:   companyLogo?: string
 20:   location: string
 21:   experience: string
 22:   workType: 'remote' | 'hybrid' | 'onsite' | 'fulltime' | 'part-time' | 'contract'
 23:   salary: string
 24:   currency?: string
 25:   description: string
 26:   postedDate: string
 27:   colorTheme?: 'purple' | 'red' | 'yellow'
 28:   aiRiskLevel?: 'low' | 'medium' | 'high' | 'critical'
 29:   aiRiskScore?: number
 30:   onView?: () => void
 31:   isLoading?: boolean
 32: }
 33: 
 34: const colorThemes = {
 35:   purple: {
 36:     bg: '#5424FD',
 37:     badgeBg: 'rgba(255, 255, 255, 0.2)',
 38:     badgeBorder: 'rgba(255, 255, 255, 0.4)',
 39:     textColor: '#FFFFFF',
 40:     descColor: '#FFFFFF',
 41:   },
 42:   red: {
 43:     bg: '#F5001E',
 44:     badgeBg: 'rgba(255, 255, 255, 0.15)',
 45:     badgeBorder: 'rgba(255, 255, 255, 0.4)',
 46:     textColor: '#FFFFFF',
 47:     descColor: '#FFFFFF',
 48:   },
 49:   yellow: {
 50:     bg: '#FCC636',
 51:     badgeBg: 'rgba(0, 0, 0, 0.15)',
 52:     badgeBorder: 'rgba(0, 0, 0, 0.4)',
 53:     textColor: '#000000',
 54:     descColor: '#000000',
 55:   },
 56: }
 57: 
 58: const workTypeLabels = {
 59:   remote: 'Remote',
 60:   hybrid: 'Hybrid',
 61:   onsite: 'On-site',
 62:   fulltime: 'Fulltime',
 63:   'part-time': 'Part-time',
 64:   contract: 'Contract',
 65: }
 66: 
 67: export function ModernJobCard({
 68:   id,
 69:   title,
 70:   company,
 71:   companyLogo,
 72:   location,
 73:   experience,
 74:   workType,
 75:   salary,
 76:   description,
 77:   postedDate,
 78:   colorTheme = 'purple',
 79:   aiRiskLevel,
 80:   aiRiskScore,
 81:   onView,
 82:   isLoading = false,
 83: }: ModernJobCardProps) {
 84:   const theme = colorThemes[colorTheme]
 85: 
 86:   // ✅ FIX #7: Smart salary with estimation fallback 
 87:   const salaryDisplay = getSalaryDisplay({ title, salary, location })
 88: 
 89:   return (
 90:     <div 
 91:       className={cn(
 92:         "job-card relative w-full overflow-visible shadow-2xl transition-all duration-[400ms]",
 93:         isLoading ? "animate-pulse" : ""
 94:       )}
 95:       data-company={company}
 96:       data-type={colorTheme}
 97:       style={{
 98:         borderRadius: '0 12px 24px 24px',
 99:         transitionTimingFunction: 'cubic-bezier(0.165, 0.84, 0.44, 1)',
100:         border: 'none' // NO BORDER - FILE FOLDER LOOK
101:       }}
102:     >
103:       {/* PULSING SKELETON LOADER - PROPER IMPLEMENTATION */}
104:       {isLoading && (
105:         <div className="absolute inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50" style={{ borderRadius: '0 12px 24px 24px' }}>
106:           <div className="flex flex-col items-center gap-4">
107:             {/* Pulsing Spinner */}
108:             <div className="relative">
109:               <div className="w-16 h-16 border-4 border-purple-500/30 border-t-purple-500 rounded-full animate-spin"></div>
110:               <div className="absolute inset-0 w-16 h-16 border-4 border-transparent border-t-purple-400 rounded-full animate-ping"></div>
111:             </div>
112:             {/* Pulsing Text */}
113:             <div className="bg-purple-600/90 px-6 py-3 rounded-full shadow-xl animate-pulse">
114:               <span className="text-white font-bold text-sm">Loading insights...</span>
115:             </div>
116:             {/* Skeleton Lines */}
117:             <div className="w-48 space-y-2 animate-pulse">
118:               <div className="h-2 bg-card/20 rounded"></div>
119:               <div className="h-2 bg-card/15 rounded w-3/4"></div>
120:               <div className="h-2 bg-card/10 rounded w-1/2"></div>
121:             </div>
122:           </div>
123:         </div>
124:       )}
125: 
126:       {/* File Folder Tab */}
127:       <div 
128:         className="absolute top-[-16px] left-0 w-[120px] h-[20px] flex items-center justify-center"
129:         style={{
130:           background: theme.bg,
131:           borderRadius: '8px 8px 0 0',
132:           boxShadow: 'inset 0 2px 4px rgba(255,255,255,0.2), 0 -2px 8px rgba(0,0,0,0.1)'
133:         }}
134:       >
135:         <span 
136:           className="text-[10px] font-semibold uppercase tracking-wide"
137:           style={{ 
138:             color: 'rgba(255,255,255,0.8)',
139:             letterSpacing: '0.5px'
140:           }}
141:         >
142:           {company.substring(0, 12)}
143:         </span>
144:       </div>
145: 
146:       {/* Main colored section (Folder Top) */}
147:       <div 
148:         className="relative px-4 pt-4 pb-3"
149:         style={{ background: theme.bg }}
150:       >
151:         {/* Company info */}
152:         <div className="flex items-center gap-3 mb-4">
153:           {/* Company logo */}
154:           <div className="w-12 h-12 rounded-lg bg-[#1F1F1F] flex items-center justify-center flex-shrink-0">
155:             {companyLogo ? (
156:               <img src={companyLogo} alt={company} className="w-7 h-7 object-contain" />
157:             ) : (
158:               <span className="text-white text-sm font-bold">
159:                 {company.charAt(0)}
160:               </span>
161:             )}
162:           </div>
163: 
164:           {/* Title and company */}
165:           <div className="flex flex-col gap-1">
166:             <h3 
167:               className="text-lg font-bold leading-tight"
168:               style={{ 
169:                 color: theme.textColor,
170:                 fontFamily: 'var(--font-inter), Satoshi, sans-serif'
171:               }}
172:             >
173:               {title}
174:             </h3>
175:             <p 
176:               className="text-xs font-medium"
177:               style={{ color: theme.textColor }}
178:             >
179:               {company}
180:             </p>
181:           </div>
182:         </div>
183: 
184:         {/* Badges */}
185:         <div className="flex items-center gap-2 mb-4 flex-wrap">
186:           {/* Location */}
187:           <div
188:             className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
189:             style={{
190:               background: theme.badgeBg,
191:               borderColor: theme.badgeBorder,
192:               color: theme.textColor,
193:             }}
194:           >
195:             <MapPin className="w-4 h-4" />
196:             <span>{location}</span>
197:           </div>
198: 
199:           {/* Experience */}
200:           <div
201:             className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
202:             style={{
203:               background: theme.badgeBg,
204:               borderColor: theme.badgeBorder,
205:               color: theme.textColor,
206:             }}
207:           >
208:             <GraduationCap className="w-4 h-4" />
209:             <span>{experience}</span>
210:           </div>
211: 
212:           {/* Work type */}
213:           <div
214:             className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-medium"
215:             style={{
216:               background: theme.badgeBg,
217:               borderColor: theme.badgeBorder,
218:               color: theme.textColor,
219:             }}
220:           >
221:             <Clock className="w-4 h-4" />
222:             <span>{workTypeLabels[workType]}</span>
223:           </div>
224: 
225:           {/* AI Risk Badge - ENTERPRISE FEATURE */}
226:           {aiRiskLevel && (
227:             <div
228:               className={cn(
229:                 "flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-xs font-semibold",
230:                 aiRiskLevel === 'low' && "bg-green-500/20 border-green-500/40 text-green-700 dark:text-green-300",
231:                 aiRiskLevel === 'medium' && "bg-yellow-500/20 border-yellow-500/40 text-yellow-700 dark:text-yellow-300",
232:                 aiRiskLevel === 'high' && "bg-orange-500/20 border-orange-500/40 text-orange-700 dark:text-orange-300",
233:                 aiRiskLevel === 'critical' && "bg-red-500/20 border-red-500/40 text-red-700 dark:text-red-300"
234:               )}
235:             >
236:               🤖
237:               <span>
238:                 {aiRiskLevel === 'low' && 'Safe'}
239:                 {aiRiskLevel === 'medium' && 'Med Risk'}
240:                 {aiRiskLevel === 'high' && 'High Risk'}
241:                 {aiRiskLevel === 'critical' && 'Critical'}
242:               </span>
243:               {aiRiskScore && <span className="opacity-75">({aiRiskScore}%)</span>}
244:             </div>
245:           )}
246:         </div>
247: 
248:         {/* Description */}
249:         <p 
250:           className="text-xs leading-relaxed mb-4 line-clamp-2"
251:           style={{ 
252:             color: theme.descColor,
253:             lineHeight: '140%'
254:           }}
255:         >
256:           {description}
257:         </p>
258: 
259:         {/* View button - top right */}
260:         <Link
261:           href={`/jobs/${id}`}
262:           onClick={(e) => {
263:             if (onView) {
264:               e.preventDefault()
265:               onView()
266:             }
267:           }}
268:           className="absolute top-4 right-4 flex items-center gap-1 px-4 py-3 bg-[#2B2B2B] border border-[#4E4E4E] rounded-[25px] text-white text-sm font-bold transition-transform duration-200 hover:scale-105 active:scale-95"
269:         >
270:           <span>View</span>
271:           <ArrowRight className="w-4 h-4 rotate-[-45deg]" />
272:         </Link>
273:       </div>
274: 
275:       {/* Footer section (Folder Paper) */}
276:       <div 
277:         className="card-content relative px-4 py-4 bg-card"
278:         style={{
279:           borderRadius: '0 0 21px 25px'
280:         }}
281:       >
282:         {/* Paper Lines Effect */}
283:         <div 
284:           className="absolute top-4 left-4 right-4 h-[1px] opacity-30 pointer-events-none"
285:           style={{
286:             background: 'repeating-linear-gradient(90deg, transparent, transparent 3px, rgba(0,0,0,0.05) 3px, rgba(0,0,0,0.05) 4px)'
287:           }}
288:         />
289:         <div className="flex items-center justify-between">
290:           {/* Posted date */}
291:           <div className="flex items-center gap-1 text-xs text-foreground font-medium">
292:             <Clock className="w-4 h-4 text-foreground" />
293:             <span>{postedDate}</span>
294:           </div>
295: 
296:           {/* Salary */}
297:           <div className="text-lg font-bold text-foreground">
298:             {salaryDisplay}
299:           </div>
300:         </div>
301:       </div>
302:     </div>
303:   )
304: }
305: 
306: /**
307:  * Job Card Grid - displays multiple cards with folder stacking effect
308:  */
309: export function ModernJobCardGrid({ 
310:   jobs, 
311:   onViewJob 
312: }: { 
313:   jobs: ModernJobCardProps[]
314:   onViewJob?: (jobId: string) => void
315: }) {
316:   return (
317:     <div className="grid grid-cols-1 gap-8 w-full max-w-md mx-auto px-6 py-6">
318:       {jobs.map((job, index) => {
319:         // Rotate through color themes
320:         const themes: Array<'purple' | 'red' | 'yellow'> = ['purple', 'red', 'yellow']
321:         const colorTheme = themes[index % 3]
322:         
323:         return (
324:           <ModernJobCard
325:             key={job.id}
326:             {...job}
327:             colorTheme={colorTheme}
328:             onView={() => onViewJob?.(job.id)}
329:           />
330:         )
331:       })}
332:     </div>
333:   )
334: }
</file>

<file path="src/components/modern/ModernJobCard.tsx">
  1: 'use client'
  2: 
  3: import React from 'react'
  4: import { MapPinIcon, CurrencyDollarIcon, CheckCircleIcon } from '@heroicons/react/24/outline'
  5: 
  6: interface JobCardProps {
  7:   job: {
  8:     id: string
  9:     title: string
 10:     company: string
 11:     location: string
 12:     salary?: string
 13:     skills: string[]
 14:     urgent?: boolean
 15:     featured?: boolean
 16:     logo?: string
 17:   }
 18:   onApply?: () => void
 19: }
 20: 
 21: export const ModernJobCard: React.FC<JobCardProps> = ({ job, onApply }) => {
 22:   return (
 23:     <div className="dribbble-card p-6 group cursor-pointer">
 24:       {/* Status Badges */}
 25:       <div className="flex justify-between items-start mb-4">
 26:         <div className="flex gap-2">
 27:           {job.featured && (
 28:             <span className="px-3 py-1 bg-gradient-to-r from-yellow-400 to-orange-500 text-white text-xs font-bold rounded-full">
 29:               FEATURED
 30:             </span>
 31:           )}
 32:           {job.urgent && (
 33:             <span className="px-3 py-1 bg-gradient-to-r from-red-500 to-pink-500 text-white text-xs font-bold rounded-full animate-pulse">
 34:               URGENT
 35:             </span>
 36:           )}
 37:         </div>
 38:         <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center text-white font-bold text-lg shadow-lg">
 39:           {job.logo ? (
 40:             <img src={job.logo} alt={job.company} className="w-full h-full rounded-2xl object-cover" />
 41:           ) : (
 42:             job.company.charAt(0)
 43:           )}
 44:         </div>
 45:       </div>
 46: 
 47:       {/* Job Info */}
 48:       <div className="mb-4">
 49:         <h3 className="text-xl font-bold text-foreground mb-2 group-hover:text-blue-600 transition-colors">
 50:           {job.title}
 51:         </h3>
 52:         <p className="text-gray-600 font-medium text-lg">{job.company}</p>
 53:       </div>
 54: 
 55:       {/* Location & Salary */}
 56:       <div className="flex items-center gap-4 mb-4 text-sm text-gray-500">
 57:         <div className="flex items-center gap-1">
 58:           <MapPinIcon className="w-4 h-4 text-blue-500" />
 59:           <span>{job.location}</span>
 60:         </div>
 61:         {job.salary && (
 62:           <div className="flex items-center gap-1">
 63:             <CurrencyDollarIcon className="w-4 h-4 text-green-500" />
 64:             <span className="font-semibold text-green-600">{job.salary}</span>
 65:           </div>
 66:         )}
 67:       </div>
 68: 
 69:       {/* Skills */}
 70:       <div className="flex flex-wrap gap-2 mb-6">
 71:         {job.skills.slice(0, 3).map((skill, index) => (
 72:           <span 
 73:             key={skill}
 74:             className={`px-3 py-1 rounded-full text-sm font-medium ${
 75:               index === 0 ? 'bg-blue-100 text-blue-700' :
 76:               index === 1 ? 'bg-red-100 text-red-700' :
 77:               'bg-yellow-100 text-yellow-700'
 78:             }`}
 79:           >
 80:             {skill}
 81:           </span>
 82:         ))}
 83:         {job.skills.length > 3 && (
 84:           <span className="px-3 py-1 bg-gray-100 text-gray-600 rounded-full text-sm font-medium">
 85:             +{job.skills.length - 3}
 86:           </span>
 87:         )}
 88:       </div>
 89: 
 90:       {/* Apply Button */}
 91:       <button 
 92:         onClick={onApply}
 93:         className="btn-dribbble-primary w-full group-hover:scale-[1.02] transition-transform"
 94:       >
 95:         <span className="flex items-center justify-center gap-2">
 96:           Apply Now
 97:           <CheckCircleIcon className="w-5 h-5" />
 98:         </span>
 99:       </button>
100:     </div>
101:   )
102: }
</file>

<file path="src/components/modern/ModernResumeUpload.tsx">
 1: 'use client'
 2: 
 3: import React, { useCallback } from 'react'
 4: import { useDropzone } from 'react-dropzone'
 5: import { DocumentArrowUpIcon, CheckCircleIcon } from '@heroicons/react/24/outline'
 6: 
 7: interface ResumeUploadProps {
 8:   onFileUpload: (file: File) => void
 9:   isUploaded?: boolean
10:   fileName?: string
11: }
12: 
13: export const ModernResumeUpload: React.FC<ResumeUploadProps> = ({ 
14:   onFileUpload, 
15:   isUploaded = false, 
16:   fileName 
17: }) => {
18:   const onDrop = useCallback((acceptedFiles: File[]) => {
19:     if (acceptedFiles.length > 0) {
20:       onFileUpload(acceptedFiles[0])
21:     }
22:   }, [onFileUpload])
23: 
24:   const { getRootProps, getInputProps, isDragActive } = useDropzone({
25:     onDrop,
26:     accept: {
27:       'application/pdf': ['.pdf'],
28:     },
29:     multiple: false,
30:   })
31: 
32:   if (isUploaded) {
33:     return (
34:       <div className="dribbble-card p-8 text-center">
35:         <div className="w-16 h-16 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-xl">
36:           <CheckCircleIcon className="w-8 h-8 text-white" />
37:         </div>
38:         <h3 className="text-xl font-bold text-foreground mb-2">Resume Uploaded!</h3>
39:         <p className="text-gray-600 mb-4">{fileName}</p>
40:         <button 
41:           {...getRootProps()} 
42:           className="btn-dribbble-secondary"
43:         >
44:           Upload Different File
45:         </button>
46:       </div>
47:     )
48:   }
49: 
50:   return (
51:     <div className="dribbble-card p-8">
52:       <div className="text-center mb-6">
53:         <h3 className="text-2xl font-bold text-foreground mb-2">📄 Upload Resume</h3>
54:         <p className="text-gray-600">Upload your PDF resume for AI-powered optimization</p>
55:       </div>
56: 
57:       <div
58:         {...getRootProps()}
59:         className={`
60:           border-3 border-dashed rounded-3xl p-12 text-center cursor-pointer transition-all duration-300
61:           ${isDragActive 
62:             ? 'border-blue-500 bg-blue-50 scale-105 shadow-lg' 
63:             : 'border-gray-300 hover:border-blue-400 hover:bg-blue-50 hover:shadow-md'
64:           }
65:         `}
66:       >
67:         <input {...getInputProps()} />
68:         
69:         <div className="w-20 h-20 bg-gradient-to-r from-blue-500 to-purple-600 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl">
70:           <DocumentArrowUpIcon className="w-10 h-10 text-white" />
71:         </div>
72: 
73:         {isDragActive ? (
74:           <div>
75:             <p className="text-xl font-semibold text-blue-600 mb-2">Drop your resume here!</p>
76:             <p className="text-gray-500">We'll analyze it with AI ✨</p>
77:           </div>
78:         ) : (
79:           <div>
80:             <p className="text-xl font-semibold text-foreground mb-2">
81:               Drag & drop your resume here
82:             </p>
83:             <p className="text-gray-500 mb-4">Or click to browse files</p>
84:             <div className="inline-flex px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-2xl font-semibold shadow-lg hover:shadow-xl transition-shadow">
85:               Choose File
86:             </div>
87:           </div>
88:         )}
89: 
90:         <p className="text-xs text-gray-400 mt-4">PDF files only • Max 10MB</p>
91:       </div>
92:     </div>
93:   )
94: }
</file>

<file path="src/components/modern/SearchHeroSection.tsx">
 1: 'use client'
 2: 
 3: import React, { useState } from 'react'
 4: import { MagnifyingGlassIcon, FunnelIcon } from '@heroicons/react/24/outline'
 5: 
 6: interface SearchHeroProps {
 7:   onSearch?: (query: string, location: string) => void
 8:   onFilterClick?: () => void
 9: }
10: 
11: export const SearchHeroSection: React.FC<SearchHeroProps> = ({ onSearch, onFilterClick }) => {
12:   const [searchQuery, setSearchQuery] = useState('')
13:   const [location, setLocation] = useState('')
14: 
15:   const handleSearch = (e: React.FormEvent) => {
16:     e.preventDefault()
17:     onSearch?.(searchQuery, location)
18:   }
19: 
20:   return (
21:     <div className="relative overflow-hidden rounded-3xl mb-8 mx-4">
22:       {/* Animated Background */}
23:       <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-red-500 p-8 relative">
24:         {/* Floating Elements */}
25:         <div className="absolute top-4 right-4 w-32 h-32 bg-yellow-400 bg-opacity-20 rounded-full animate-bounce blur-xl" style={{ animationDelay: '0s', animationDuration: '3s' }}></div>
26:         <div className="absolute bottom-4 left-4 w-20 h-20 bg-card bg-opacity-10 rounded-2xl animate-bounce blur-lg" style={{ animationDelay: '1s', animationDuration: '4s' }}></div>
27:         <div className="absolute top-1/2 left-1/4 w-16 h-16 bg-red-400 bg-opacity-15 rounded-full animate-bounce blur-lg" style={{ animationDelay: '2s', animationDuration: '5s' }}></div>
28: 
29:         <div className="relative z-10 text-center mb-8">
30:           <h1 className="text-4xl font-bold text-white mb-4 drop-shadow-lg">
31:             🚀 Find Your Dream Job
32:           </h1>
33:           <p className="text-white text-opacity-90 text-lg font-medium">
34:             Discover opportunities that match your skills and passion
35:           </p>
36:         </div>
37: 
38:         {/* Search Bar */}
39:         <form onSubmit={handleSearch} className="relative z-10 max-w-4xl mx-auto">
40:           <div className="bg-card bg-opacity-95 backdrop-blur-sm rounded-2xl p-6 shadow-2xl">
41:             <div className="flex flex-col md:flex-row gap-4">
42:               {/* Job Title Search */}
43:               <div className="flex-1 relative">
44:                 <MagnifyingGlassIcon className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
45:                 <input
46:                   type="text"
47:                   placeholder="Job title or keyword"
48:                   value={searchQuery}
49:                   onChange={(e) => setSearchQuery(e.target.value)}
50:                   className="w-full pl-12 pr-4 py-4 bg-gray-50 border-2 border-border rounded-xl text-foreground placeholder-gray-500 focus:border-blue-500 focus:ring-0 focus:outline-none transition-colors"
51:                 />
52:               </div>
53: 
54:               {/* Location Search */}
55:               <div className="flex-1 relative">
56:                 <input
57:                   type="text"
58:                   placeholder="Location"
59:                   value={location}
60:                   onChange={(e) => setLocation(e.target.value)}
61:                   className="w-full px-4 py-4 bg-gray-50 border-2 border-border rounded-xl text-foreground placeholder-gray-500 focus:border-blue-500 focus:ring-0 focus:outline-none transition-colors"
62:                 />
63:               </div>
64: 
65:               {/* Filter Button */}
66:               <button 
67:                 type="button"
68:                 onClick={onFilterClick}
69:                 className="px-6 py-4 bg-gray-100 hover:bg-gray-200 rounded-xl transition-colors flex items-center justify-center"
70:               >
71:                 <FunnelIcon className="w-5 h-5 text-gray-600" />
72:               </button>
73: 
74:               {/* Search Button */}
75:               <button 
76:                 type="submit"
77:                 className="btn-dribbble-primary px-8 py-4 flex items-center justify-center gap-2 whitespace-nowrap"
78:               >
79:                 <MagnifyingGlassIcon className="w-5 h-5" />
80:                 Search Jobs
81:               </button>
82:             </div>
83:           </div>
84:         </form>
85:       </div>
86:     </div>
87:   )
88: }
</file>

<file path="src/components/modern/VibrantPageHeader.tsx">
 1: 'use client'
 2: 
 3: import React from 'react'
 4: 
 5: interface PageHeaderProps {
 6:   title: string
 7:   subtitle: string
 8:   progress?: number
 9:   showProgress?: boolean
10: }
11: 
12: export const VibrantPageHeader: React.FC<PageHeaderProps> = ({ 
13:   title, 
14:   subtitle, 
15:   progress = 0, 
16:   showProgress = false 
17: }) => {
18:   return (
19:     <div className="relative overflow-hidden rounded-b-[40px] mb-8">
20:       {/* Gradient Background */}
21:       <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-red-500 px-6 py-12">
22:         {/* Decorative Elements */}
23:         <div className="absolute top-4 right-4 w-20 h-20 bg-card bg-opacity-10 rounded-full blur-xl"></div>
24:         <div className="absolute bottom-4 left-4 w-12 h-12 bg-yellow-400 bg-opacity-20 rounded-2xl blur-lg"></div>
25:         
26:         {/* Content */}
27:         <div className="relative z-10 text-center">
28:           <h1 className="text-4xl font-bold text-white mb-4 drop-shadow-lg">
29:             {title}
30:           </h1>
31:           <p className="text-white text-opacity-90 text-lg font-medium max-w-md mx-auto">
32:             {subtitle}
33:           </p>
34:           
35:           {/* Progress Bar */}
36:           {showProgress && (
37:             <div className="mt-6 max-w-xs mx-auto">
38:               <div className="flex justify-between items-center mb-2">
39:                 <span className="text-white text-sm font-medium">Progress</span>
40:                 <span className="text-white text-sm font-bold">{progress}%</span>
41:               </div>
42:               <div className="w-full bg-card bg-opacity-20 rounded-full h-3 overflow-hidden">
43:                 <div 
44:                   className="bg-gradient-to-r from-yellow-400 to-orange-500 h-3 rounded-full transition-all duration-500 ease-out shadow-lg"
45:                   style={{ width: `${progress}%` }}
46:                 ></div>
47:               </div>
48:             </div>
49:           )}
50:         </div>
51:       </div>
52:     </div>
53:   )
54: }
</file>

<file path="src/components/onboarding/ProgressBar.tsx">
 1: 'use client'
 2: 
 3: import { motion } from 'framer-motion'
 4: 
 5: interface ProgressBarProps {
 6:   currentStep: number
 7:   totalSteps: number
 8: }
 9: 
10: export function ProgressBar({ currentStep, totalSteps }: ProgressBarProps) {
11:   const percentage = (currentStep / totalSteps) * 100
12: 
13:   return (
14:     <div className="sticky top-0 z-50 bg-card border-b border-gray-200 dark:border-gray-800 px-4 py-3">
15:       <div className="max-w-2xl mx-auto">
16:         <div className="flex items-center justify-between mb-2">
17:           <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
18:             Question {currentStep} of {totalSteps}
19:           </span>
20:           <span className="text-sm text-gray-500 dark:text-gray-400">
21:             {Math.round(percentage)}%
22:           </span>
23:         </div>
24:         <div className="progress-modern">
25:           <motion.div
26:             className="progress-fill"
27:             initial={{ width: 0 }}
28:             animate={{ width: `${percentage}%` }}
29:             transition={{ duration: 0.5, ease: 'easeOut' }}
30:           />
31:         </div>
32:       </div>
33:     </div>
34:   )
35: }
</file>

<file path="src/components/onboarding/QuizQuestion.tsx">
 1: 'use client'
 2: 
 3: import { motion } from 'framer-motion'
 4: import { ReactNode } from 'react'
 5: 
 6: interface QuizQuestionProps {
 7:   title: string
 8:   subtitle?: string
 9:   children: ReactNode
10:   onNext: () => void
11:   onBack?: () => void
12:   nextLabel?: string
13:   nextDisabled?: boolean
14:   showBack?: boolean
15: }
16: 
17: export function QuizQuestion({
18:   title,
19:   subtitle,
20:   children,
21:   onNext,
22:   onBack,
23:   nextLabel = 'Continue',
24:   nextDisabled = false,
25:   showBack = true
26: }: QuizQuestionProps) {
27:   return (
28:     <motion.div
29:       initial={{ opacity: 0, x: 20 }}
30:       animate={{ opacity: 1, x: 0 }}
31:       exit={{ opacity: 0, x: -20 }}
32:       transition={{ duration: 0.3 }}
33:       className="flex flex-col min-h-[calc(100vh-80px)] px-4 py-6"
34:     >
35:       <div className="max-w-2xl mx-auto w-full flex-1 flex flex-col">
36:         {/* Question Header */}
37:         <div className="mb-8">
38:           <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white mb-2">
39:             {title}
40:           </h2>
41:           {subtitle && (
42:             <p className="text-gray-600 dark:text-gray-400 text-sm sm:text-base">
43:               {subtitle}
44:             </p>
45:           )}
46:         </div>
47: 
48:         {/* Question Content */}
49:         <div className="flex-1 mb-6">
50:           {children}
51:         </div>
52: 
53:         {/* Navigation Buttons */}
54:         <div className="flex items-center gap-3 pt-4 border-t border-gray-200 dark:border-gray-800">
55:           {showBack && onBack && (
56:             <button
57:               onClick={onBack}
58:               className="px-6 py-3 rounded-xl font-medium text-gray-700 dark:text-gray-300 bg-card border border-gray-300 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all min-h-[44px]"
59:             >
60:               ← Back
61:             </button>
62:           )}
63:           <button
64:             onClick={onNext}
65:             disabled={nextDisabled}
66:             className="flex-1 px-6 py-3 rounded-xl font-semibold text-white bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all shadow-lg hover:shadow-xl min-h-[44px]"
67:           >
68:             {nextLabel} →
69:           </button>
70:         </div>
71:       </div>
72:     </motion.div>
73:   )
74: }
</file>

<file path="src/components/resume-builder/ai-suggestions.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { Badge } from '@/components/ui/badge'
  7: import { Sparkles, Copy, Check, Lightbulb, TrendingUp } from 'lucide-react'
  8: import toast from 'react-hot-toast'
  9: 
 10: interface AISuggestionsProps {
 11:   section: 'summary' | 'experience' | 'skills' | 'achievements'
 12:   context?: {
 13:     jobTitle?: string
 14:     industry?: string
 15:     yearsExperience?: number
 16:     currentText?: string
 17:   }
 18: }
 19: 
 20: export function AISuggestions({ section, context = {} }: AISuggestionsProps) {
 21:   const [suggestions, setSuggestions] = useState<string[]>([])
 22:   const [isLoading, setIsLoading] = useState(false)
 23:   const [copiedIndex, setCopiedIndex] = useState<number | null>(null)
 24: 
 25:   const getSuggestions = () => {
 26:     setIsLoading(true)
 27:     
 28:     // Simulate AI suggestions (in production, this would call your AI API)
 29:     setTimeout(() => {
 30:       const mockSuggestions = generateMockSuggestions(section, context)
 31:       setSuggestions(mockSuggestions)
 32:       setIsLoading(false)
 33:     }, 1000)
 34:   }
 35: 
 36:   const copyToClipboard = (text: string, index: number) => {
 37:     navigator.clipboard.writeText(text)
 38:     setCopiedIndex(index)
 39:     toast.success('Copied to clipboard!')
 40:     setTimeout(() => setCopiedIndex(null), 2000)
 41:   }
 42: 
 43:   const generateMockSuggestions = (
 44:     section: string,
 45:     context: any
 46:   ): string[] => {
 47:     switch (section) {
 48:       case 'summary':
 49:         return [
 50:           `Results-driven ${context.jobTitle || 'professional'} with ${context.yearsExperience || 5}+ years of experience in ${context.industry || 'technology'}. Proven track record of delivering high-impact solutions and driving business growth through innovative strategies and cross-functional collaboration.`,
 51:           `Accomplished ${context.jobTitle || 'professional'} specializing in ${context.industry || 'technology'} with expertise in strategic planning, team leadership, and process optimization. Known for exceeding targets and implementing solutions that improve efficiency by 30%+.`,
 52:           `Dynamic ${context.jobTitle || 'professional'} with a passion for ${context.industry || 'innovation'}. Combines technical expertise with business acumen to deliver measurable results. Skilled in stakeholder management, project delivery, and continuous improvement.`
 53:         ]
 54:       
 55:       case 'experience':
 56:         return [
 57:           'Led cross-functional team of 12 engineers to deliver enterprise-scale platform, resulting in 40% increase in user engagement and $2M annual revenue growth',
 58:           'Spearheaded implementation of agile methodologies across 5 departments, reducing project delivery time by 35% and improving team productivity by 50%',
 59:           'Architected and deployed cloud-native microservices infrastructure serving 10M+ daily active users with 99.99% uptime',
 60:           'Mentored 8 junior developers, establishing coding standards and best practices that reduced bug rate by 60%',
 61:           'Collaborated with C-suite executives to define product roadmap, securing $5M in additional funding for strategic initiatives'
 62:         ]
 63:       
 64:       case 'skills':
 65:         return [
 66:           'Technical Skills: Python, JavaScript, React, Node.js, AWS, Docker, Kubernetes, PostgreSQL, MongoDB',
 67:           'Soft Skills: Leadership, Strategic Planning, Cross-functional Collaboration, Stakeholder Management, Agile/Scrum',
 68:           'Industry Skills: Cloud Architecture, DevOps, CI/CD, Microservices, API Design, System Design',
 69:           'Tools & Platforms: Git, JIRA, Confluence, Slack, Figma, Tableau, Salesforce'
 70:         ]
 71:       
 72:       case 'achievements':
 73:         return [
 74:           'Increased system performance by 250% through database optimization and caching strategies',
 75:           'Reduced operational costs by $500K annually by migrating legacy systems to cloud infrastructure',
 76:           'Achieved 98% customer satisfaction score through implementation of automated support systems',
 77:           'Grew user base from 100K to 1M+ users in 12 months through strategic product enhancements',
 78:           'Received "Employee of the Year" award for exceptional contributions to company growth'
 79:         ]
 80:       
 81:       default:
 82:         return []
 83:     }
 84:   }
 85: 
 86:   const getSectionTitle = () => {
 87:     switch (section) {
 88:       case 'summary':
 89:         return 'Professional Summary Suggestions'
 90:       case 'experience':
 91:         return 'Achievement Bullet Points'
 92:       case 'skills':
 93:         return 'Skills Suggestions'
 94:       case 'achievements':
 95:         return 'Quantifiable Achievements'
 96:       default:
 97:         return 'AI Suggestions'
 98:     }
 99:   }
100: 
101:   const getSectionIcon = () => {
102:     switch (section) {
103:       case 'summary':
104:         return <Lightbulb className="w-5 h-5" />
105:       case 'experience':
106:       case 'achievements':
107:         return <TrendingUp className="w-5 h-5" />
108:       case 'skills':
109:         return <Sparkles className="w-5 h-5" />
110:       default:
111:         return <Sparkles className="w-5 h-5" />
112:     }
113:   }
114: 
115:   return (
116:     <Card className="border-2 border-purple-200 dark:border-purple-800">
117:       <CardHeader>
118:         <CardTitle className="text-lg flex items-center justify-between">
119:           <span className="flex items-center gap-2">
120:             {getSectionIcon()}
121:             {getSectionTitle()}
122:           </span>
123:           <Badge variant="outline" className="bg-purple-50 dark:bg-purple-950/30 text-purple-700 dark:text-purple-300 border-purple-300 dark:border-purple-700">
124:             AI-Powered
125:           </Badge>
126:         </CardTitle>
127:       </CardHeader>
128:       <CardContent className="space-y-4">
129:         {suggestions.length === 0 ? (
130:           <div className="text-center py-8">
131:             <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4">
132:               <Sparkles className="w-8 h-8 text-white" />
133:             </div>
134:             <p className="text-sm text-muted-foreground mb-4">
135:               Get AI-powered suggestions tailored to your role and industry
136:             </p>
137:             <Button
138:               onClick={getSuggestions}
139:               disabled={isLoading}
140:               className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
141:             >
142:               {isLoading ? (
143:                 <>
144:                   <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
145:                   Generating...
146:                 </>
147:               ) : (
148:                 <>
149:                   <Sparkles className="w-4 h-4 mr-2" />
150:                   Generate Suggestions
151:                 </>
152:               )}
153:             </Button>
154:           </div>
155:         ) : (
156:           <>
157:             <div className="space-y-3">
158:               {suggestions.map((suggestion, index) => (
159:                 <div
160:                   key={index}
161:                   className="p-4 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950/20 dark:to-pink-950/20 border border-purple-200 dark:border-purple-800 rounded-lg hover:shadow-md transition-all group"
162:                 >
163:                   <div className="flex items-start justify-between gap-3">
164:                     <p className="text-sm text-foreground flex-1 leading-relaxed">
165:                       {suggestion}
166:                     </p>
167:                     <Button
168:                       variant="ghost"
169:                       size="sm"
170:                       onClick={() => copyToClipboard(suggestion, index)}
171:                       className="opacity-0 group-hover:opacity-100 transition-opacity"
172:                     >
173:                       {copiedIndex === index ? (
174:                         <Check className="w-4 h-4 text-green-600" />
175:                       ) : (
176:                         <Copy className="w-4 h-4" />
177:                       )}
178:                     </Button>
179:                   </div>
180:                 </div>
181:               ))}
182:             </div>
183: 
184:             <div className="flex gap-2">
185:               <Button
186:                 onClick={getSuggestions}
187:                 variant="outline"
188:                 size="sm"
189:                 className="flex-1"
190:                 disabled={isLoading}
191:               >
192:                 <Sparkles className="w-4 h-4 mr-2" />
193:                 Generate More
194:               </Button>
195:             </div>
196: 
197:             <div className="p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
198:               <p className="text-xs text-blue-800 dark:text-blue-300">
199:                 <strong>💡 Tip:</strong> Click the copy icon to add suggestions to your resume. Customize them to match your specific experience!
200:               </p>
201:             </div>
202:           </>
203:         )}
204:       </CardContent>
205:     </Card>
206:   )
207: }
</file>

<file path="src/components/resume-builder/ats-checker.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { CheckCircle, AlertTriangle, XCircle, Zap, Loader2 } from 'lucide-react'
  5: 
  6: interface ATSIssue {
  7:   severity: 'critical' | 'warning' | 'info'
  8:   title: string
  9:   description: string
 10:   fix?: () => void
 11: }
 12: 
 13: interface ATSAnalysis {
 14:   score: number
 15:   formatting: number
 16:   keywords: number
 17:   completeness: number
 18:   issues: ATSIssue[]
 19: }
 20: 
 21: interface ATSCheckerProps {
 22:   resume: any
 23:   onAutoFix?: (issue: ATSIssue) => void
 24: }
 25: 
 26: export function ATSChecker({ resume, onAutoFix }: ATSCheckerProps) {
 27:   const [analysis, setAnalysis] = useState<ATSAnalysis | null>(null)
 28:   const [checking, setChecking] = useState(false)
 29: 
 30:   useEffect(() => {
 31:     if (resume) {
 32:       checkATS()
 33:     }
 34:   }, [resume])
 35: 
 36:   const checkATS = () => {
 37:     setChecking(true)
 38:     
 39:     // Simulate ATS analysis
 40:     setTimeout(() => {
 41:       const issues: ATSIssue[] = []
 42:       let score = 100
 43: 
 44:       // Check 1: Contact Information
 45:       if (!resume.personalInfo?.email || !resume.personalInfo?.phone) {
 46:         issues.push({
 47:           severity: 'critical',
 48:           title: 'Missing Contact Info',
 49:           description: 'Add email and phone number for ATS compatibility'
 50:         })
 51:         score -= 20
 52:       }
 53: 
 54:       // Check 2: Experience Section
 55:       if (!resume.experience || resume.experience.length === 0) {
 56:         issues.push({
 57:           severity: 'critical',
 58:           title: 'No Work Experience',
 59:           description: 'Add at least one work experience entry'
 60:         })
 61:         score -= 15
 62:       }
 63: 
 64:       // Check 3: Education Section
 65:       if (!resume.education || resume.education.length === 0) {
 66:         issues.push({
 67:           severity: 'warning',
 68:           title: 'No Education Listed',
 69:           description: 'Add your educational background'
 70:         })
 71:         score -= 10
 72:       }
 73: 
 74:       // Check 4: Skills Section
 75:       const skillCount = (resume.skills?.technical?.length || 0) + (resume.skills?.soft?.length || 0)
 76:       if (skillCount < 5) {
 77:         issues.push({
 78:           severity: 'warning',
 79:           title: 'Low Keyword Count',
 80:           description: 'Add more skills and keywords (minimum 5 recommended)'
 81:         })
 82:         score -= 10
 83:       }
 84: 
 85:       // Check 5: Achievement Metrics
 86:       const hasMetrics = resume.experience?.some((exp: any) =>
 87:         exp.achievements?.some((a: string) => /\d+/.test(a))
 88:       )
 89:       if (!hasMetrics) {
 90:         issues.push({
 91:           severity: 'info',
 92:           title: 'Missing Quantifiable Achievements',
 93:           description: 'Add numbers, percentages, or metrics to show impact'
 94:         })
 95:         score -= 8
 96:       }
 97: 
 98:       // Check 6: Summary
 99:       if (!resume.personalInfo?.summary || resume.personalInfo.summary.length < 50) {
100:         issues.push({
101:           severity: 'info',
102:           title: 'Weak Professional Summary',
103:           description: 'Add a compelling summary (50+ characters recommended)'
104:         })
105:         score -= 5
106:       }
107: 
108:       setAnalysis({
109:         score: Math.max(0, score),
110:         formatting: 95,
111:         keywords: skillCount >= 10 ? 90 : skillCount >= 5 ? 70 : 40,
112:         completeness: resume.experience?.length > 0 && resume.education?.length > 0 ? 90 : 60,
113:         issues
114:       })
115:       setChecking(false)
116:     }, 1000)
117:   }
118: 
119:   if (checking) {
120:     return (
121:       <div className="bg-card rounded-xl border-2 border-border p-8 text-center">
122:         <Loader2 className="w-12 h-12 animate-spin text-blue-600 mx-auto mb-4" />
123:         <p className="text-gray-600">Analyzing ATS compatibility...</p>
124:       </div>
125:     )
126:   }
127: 
128:   if (!analysis) return null
129: 
130:   const getScoreColor = (score: number) => {
131:     if (score >= 80) return 'text-green-600 bg-green-50 border-green-500'
132:     if (score >= 60) return 'text-yellow-600 bg-yellow-50 border-yellow-500'
133:     return 'text-red-600 bg-red-50 border-red-500'
134:   }
135: 
136:   const getScoreLabel = (score: number) => {
137:     if (score >= 80) return 'Excellent'
138:     if (score >= 60) return 'Good'
139:     return 'Needs Work'
140:   }
141: 
142:   return (
143:     <div className="bg-card rounded-xl border-2 border-border p-6 space-y-6">
144:       {/* Score Circle */}
145:       <div className="text-center">
146:         <div className={`inline-flex flex-col items-center justify-center w-32 h-32 rounded-full border-4 ${getScoreColor(analysis.score)}`}>
147:           <div className="text-4xl font-bold">{analysis.score}</div>
148:           <div className="text-sm font-semibold">ATS Score</div>
149:         </div>
150:         <p className="mt-3 text-lg font-semibold text-foreground">{getScoreLabel(analysis.score)}</p>
151:       </div>
152: 
153:       {/* Score Breakdown */}
154:       <div className="space-y-3">
155:         <div>
156:           <div className="flex justify-between text-sm mb-1">
157:             <span className="text-gray-700">Formatting</span>
158:             <span className="font-semibold text-foreground">{analysis.formatting}%</span>
159:           </div>
160:           <div className="w-full bg-gray-200 rounded-full h-2">
161:             <div
162:               className="bg-green-500 h-2 rounded-full transition-all"
163:               style={{ width: `${analysis.formatting}%` }}
164:             />
165:           </div>
166:         </div>
167: 
168:         <div>
169:           <div className="flex justify-between text-sm mb-1">
170:             <span className="text-gray-700">Keywords</span>
171:             <span className="font-semibold text-foreground">{analysis.keywords}%</span>
172:           </div>
173:           <div className="w-full bg-gray-200 rounded-full h-2">
174:             <div
175:               className={`h-2 rounded-full transition-all ${
176:                 analysis.keywords >= 70 ? 'bg-green-500' : 'bg-yellow-500'
177:               }`}
178:               style={{ width: `${analysis.keywords}%` }}
179:             />
180:           </div>
181:         </div>
182: 
183:         <div>
184:           <div className="flex justify-between text-sm mb-1">
185:             <span className="text-gray-700">Completeness</span>
186:             <span className="font-semibold text-foreground">{analysis.completeness}%</span>
187:           </div>
188:           <div className="w-full bg-gray-200 rounded-full h-2">
189:             <div
190:               className={`h-2 rounded-full transition-all ${
191:                 analysis.completeness >= 70 ? 'bg-green-500' : 'bg-yellow-500'
192:               }`}
193:               style={{ width: `${analysis.completeness}%` }}
194:             />
195:           </div>
196:         </div>
197:       </div>
198: 
199:       {/* Issues */}
200:       {analysis.issues.length > 0 && (
201:         <div className="space-y-3">
202:           <h4 className="font-bold text-foreground flex items-center gap-2">
203:             <Zap className="w-5 h-5 text-yellow-500" />
204:             Issues Detected ({analysis.issues.length})
205:           </h4>
206:           {analysis.issues.map((issue, i) => (
207:             <div
208:               key={i}
209:               className={`p-4 rounded-lg border-l-4 ${
210:                 issue.severity === 'critical'
211:                   ? 'bg-red-50 border-red-500'
212:                   : issue.severity === 'warning'
213:                   ? 'bg-yellow-50 border-yellow-500'
214:                   : 'bg-blue-50 border-blue-500'
215:               }`}
216:             >
217:               <div className="flex items-start gap-3">
218:                 {issue.severity === 'critical' ? (
219:                   <XCircle className="w-5 h-5 text-red-500 flex-shrink-0 mt-0.5" />
220:                 ) : issue.severity === 'warning' ? (
221:                   <AlertTriangle className="w-5 h-5 text-yellow-500 flex-shrink-0 mt-0.5" />
222:                 ) : (
223:                   <CheckCircle className="w-5 h-5 text-blue-500 flex-shrink-0 mt-0.5" />
224:                 )}
225:                 <div className="flex-1">
226:                   <h5 className="font-semibold text-foreground mb-1">{issue.title}</h5>
227:                   <p className="text-sm text-gray-700">{issue.description}</p>
228:                   {issue.fix && onAutoFix && (
229:                     <button
230:                       onClick={() => onAutoFix(issue)}
231:                       className="mt-2 text-sm font-semibold text-blue-600 hover:text-blue-700"
232:                     >
233:                       ✨ Auto-Fix
234:                     </button>
235:                   )}
236:                 </div>
237:               </div>
238:             </div>
239:           ))}
240:         </div>
241:       )}
242: 
243:       {/* Refresh Button */}
244:       <button
245:         onClick={checkATS}
246:         className="w-full py-2 px-4 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors font-semibold"
247:       >
248:         🔄 Re-check ATS Score
249:       </button>
250:     </div>
251:   )
252: }
</file>

<file path="src/components/resume-builder/ats-score.tsx">
  1: 'use client'
  2: 
  3: import { useMemo } from 'react'
  4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Progress } from '@/components/ui/progress'
  6: import { Badge } from '@/components/ui/badge'
  7: import { CheckCircle, AlertCircle, XCircle, Shield } from 'lucide-react'
  8: 
  9: interface ResumeData {
 10:   personalInfo: {
 11:     fullName: string
 12:     email: string
 13:     phone: string
 14:     location: string
 15:     linkedin?: string
 16:     website?: string
 17:     summary: string
 18:   }
 19:   experience: Array<any>
 20:   education: Array<any>
 21:   skills: {
 22:     technical: string[]
 23:     soft: string[]
 24:     languages: Array<any>
 25:     certifications: Array<any>
 26:   }
 27:   projects: Array<any>
 28: }
 29: 
 30: interface ATSScoreProps {
 31:   resumeData: ResumeData
 32:   selectedTemplate: string
 33: }
 34: 
 35: interface ScoreItem {
 36:   category: string
 37:   score: number
 38:   maxScore: number
 39:   status: 'pass' | 'warning' | 'fail'
 40:   feedback: string
 41: }
 42: 
 43: export function ATSScore({ resumeData, selectedTemplate }: ATSScoreProps) {
 44:   const analysis = useMemo(() => {
 45:     const scores: ScoreItem[] = []
 46: 
 47:     // 1. Contact Information (15 points)
 48:     let contactScore = 0
 49:     if (resumeData.personalInfo.fullName) contactScore += 4
 50:     if (resumeData.personalInfo.email && resumeData.personalInfo.email.includes('@')) contactScore += 4
 51:     if (resumeData.personalInfo.phone) contactScore += 3
 52:     if (resumeData.personalInfo.location) contactScore += 2
 53:     if (resumeData.personalInfo.linkedin) contactScore += 2
 54: 
 55:     scores.push({
 56:       category: 'Contact Information',
 57:       score: contactScore,
 58:       maxScore: 15,
 59:       status: contactScore >= 12 ? 'pass' : contactScore >= 8 ? 'warning' : 'fail',
 60:       feedback: contactScore >= 12 
 61:         ? 'Complete contact information' 
 62:         : 'Add missing contact details (LinkedIn, phone, or location)'
 63:     })
 64: 
 65:     // 2. Professional Summary (10 points)
 66:     let summaryScore = 0
 67:     const summary = resumeData.personalInfo.summary || ''
 68:     if (summary.length >= 50) summaryScore += 3
 69:     if (summary.length >= 100) summaryScore += 3
 70:     if (summary.length >= 150 && summary.length <= 300) summaryScore += 4
 71: 
 72:     scores.push({
 73:       category: 'Professional Summary',
 74:       score: summaryScore,
 75:       maxScore: 10,
 76:       status: summaryScore >= 8 ? 'pass' : summaryScore >= 5 ? 'warning' : 'fail',
 77:       feedback: summaryScore >= 8
 78:         ? 'Strong professional summary'
 79:         : summary.length < 50
 80:         ? 'Summary too short (aim for 100-250 words)'
 81:         : summary.length > 300
 82:         ? 'Summary too long (keep it under 250 words)'
 83:         : 'Expand your summary with key achievements'
 84:     })
 85: 
 86:     // 3. Work Experience (30 points)
 87:     let experienceScore = 0
 88:     const hasExperience = resumeData.experience.length > 0
 89:     if (hasExperience) experienceScore += 10
 90: 
 91:     const experienceWithBullets = resumeData.experience.filter(exp => 
 92:       exp.achievements && exp.achievements.length >= 3
 93:     ).length
 94:     experienceScore += Math.min(experienceWithBullets * 5, 15)
 95: 
 96:     const experienceWithQuantifiableResults = resumeData.experience.filter(exp =>
 97:       exp.description && /\d+%|\$\d+|[0-9]+ (users|clients|projects|team)/i.test(exp.description)
 98:     ).length
 99:     experienceScore += Math.min(experienceWithQuantifiableResults * 5, 5)
100: 
101:     scores.push({
102:       category: 'Work Experience',
103:       score: experienceScore,
104:       maxScore: 30,
105:       status: experienceScore >= 24 ? 'pass' : experienceScore >= 15 ? 'warning' : 'fail',
106:       feedback: experienceScore >= 24
107:         ? 'Excellent work experience section'
108:         : experienceWithBullets === 0
109:         ? 'Add bullet points with achievements for each role'
110:         : experienceWithQuantifiableResults === 0
111:         ? 'Add quantifiable results (numbers, percentages, metrics)'
112:         : 'Expand achievements with more specific details'
113:     })
114: 
115:     // 4. Education (15 points)
116:     let educationScore = 0
117:     if (resumeData.education.length > 0) educationScore += 10
118:     const educationWithDetails = resumeData.education.filter(edu =>
119:       edu.degree && edu.institution && edu.graduationDate
120:     ).length
121:     educationScore += Math.min(educationWithDetails * 5, 5)
122: 
123:     scores.push({
124:       category: 'Education',
125:       score: educationScore,
126:       maxScore: 15,
127:       status: educationScore >= 12 ? 'pass' : educationScore >= 8 ? 'warning' : 'fail',
128:       feedback: educationScore >= 12
129:         ? 'Complete education information'
130:         : 'Add degree, institution, and graduation date'
131:     })
132: 
133:     // 5. Skills (20 points)
134:     let skillsScore = 0
135:     const totalSkills = resumeData.skills.technical.length + resumeData.skills.soft.length
136:     if (totalSkills >= 5) skillsScore += 8
137:     if (totalSkills >= 10) skillsScore += 6
138:     if (totalSkills >= 15) skillsScore += 6
139: 
140:     scores.push({
141:       category: 'Skills',
142:       score: skillsScore,
143:       maxScore: 20,
144:       status: skillsScore >= 16 ? 'pass' : skillsScore >= 10 ? 'warning' : 'fail',
145:       feedback: skillsScore >= 16
146:         ? 'Comprehensive skills list'
147:         : totalSkills < 5
148:         ? 'Add at least 10-15 relevant skills'
149:         : 'Add more industry-specific skills'
150:     })
151: 
152:     // 6. Formatting & ATS Compatibility (10 points)
153:     let formatScore = 0
154:     // Simple templates score higher for ATS
155:     if (['minimal', 'professional'].includes(selectedTemplate)) formatScore += 5
156:     else if (['modern', 'tech'].includes(selectedTemplate)) formatScore += 4
157:     else formatScore += 3
158: 
159:     // Check for good formatting practices
160:     const hasConsistentDates = resumeData.experience.every(exp => exp.startDate && exp.endDate)
161:     if (hasConsistentDates) formatScore += 3
162: 
163:     const hasNoSpecialChars = !resumeData.personalInfo.fullName.match(/[^a-zA-Z\s\-\']/g)
164:     if (hasNoSpecialChars) formatScore += 2
165: 
166:     scores.push({
167:       category: 'ATS Compatibility',
168:       score: formatScore,
169:       maxScore: 10,
170:       status: formatScore >= 8 ? 'pass' : formatScore >= 5 ? 'warning' : 'fail',
171:       feedback: formatScore >= 8
172:         ? 'Excellent ATS compatibility'
173:         : !hasConsistentDates
174:         ? 'Ensure all dates are filled in consistently'
175:         : 'Consider using a simpler template for better ATS parsing'
176:     })
177: 
178:     const totalScore = scores.reduce((sum, item) => sum + item.score, 0)
179:     const maxTotalScore = scores.reduce((sum, item) => sum + item.maxScore, 0)
180:     const percentage = Math.round((totalScore / maxTotalScore) * 100)
181: 
182:     return { scores, totalScore, maxTotalScore, percentage }
183:   }, [resumeData, selectedTemplate])
184: 
185:   const getScoreColor = (percentage: number) => {
186:     if (percentage >= 80) return 'text-green-600'
187:     if (percentage >= 60) return 'text-yellow-600'
188:     return 'text-orange-600'
189:   }
190: 
191:   const getScoreLabel = (percentage: number) => {
192:     if (percentage >= 90) return 'Excellent'
193:     if (percentage >= 80) return 'Very Good'
194:     if (percentage >= 70) return 'Good'
195:     if (percentage >= 60) return 'Fair'
196:     return 'Needs Improvement'
197:   }
198: 
199:   const getStatusIcon = (status: string) => {
200:     switch (status) {
201:       case 'pass':
202:         return <CheckCircle className="w-4 h-4 text-green-600" />
203:       case 'warning':
204:         return <AlertCircle className="w-4 h-4 text-yellow-600" />
205:       case 'fail':
206:         return <XCircle className="w-4 h-4 text-red-600" />
207:     }
208:   }
209: 
210:   return (
211:     <Card className="sticky top-4">
212:       <CardHeader>
213:         <CardTitle className="text-lg flex items-center justify-between">
214:           <span className="flex items-center gap-2">
215:             <Shield className="w-5 h-5" />
216:             ATS Score
217:           </span>
218:           <Badge 
219:             variant="outline" 
220:             className={`${getScoreColor(analysis.percentage)} border-current text-lg px-3 py-1`}
221:           >
222:             {analysis.percentage}%
223:           </Badge>
224:         </CardTitle>
225:       </CardHeader>
226:       <CardContent className="space-y-4">
227:         {/* Overall Score */}
228:         <div>
229:           <div className="flex items-center justify-between mb-2">
230:             <span className="text-sm font-medium text-foreground">Overall ATS Compatibility</span>
231:             <span className={`text-sm font-bold ${getScoreColor(analysis.percentage)}`}>
232:               {getScoreLabel(analysis.percentage)}
233:             </span>
234:           </div>
235:           <Progress value={analysis.percentage} className="h-3" />
236:           <p className="text-xs text-muted-foreground mt-2">
237:             {analysis.totalScore} / {analysis.maxTotalScore} points
238:           </p>
239:         </div>
240: 
241:         {/* Category Breakdown */}
242:         <div className="space-y-3">
243:           <h4 className="text-sm font-semibold text-foreground">Category Breakdown</h4>
244:           {analysis.scores.map((item, index) => (
245:             <div
246:               key={index}
247:               className="space-y-2 p-3 rounded-lg hover:bg-muted/50 transition-colors"
248:             >
249:               <div className="flex items-center justify-between">
250:                 <div className="flex items-center gap-2">
251:                   {getStatusIcon(item.status)}
252:                   <span className="text-sm font-medium text-foreground">{item.category}</span>
253:                 </div>
254:                 <span className="text-sm text-muted-foreground">
255:                   {item.score}/{item.maxScore}
256:                 </span>
257:               </div>
258:               <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5">
259:                 <div
260:                   className={`h-1.5 rounded-full transition-all ${
261:                     item.status === 'pass' 
262:                       ? 'bg-green-500' 
263:                       : item.status === 'warning'
264:                       ? 'bg-yellow-500'
265:                       : 'bg-red-500'
266:                   }`}
267:                   style={{ width: `${(item.score / item.maxScore) * 100}%` }}
268:                 />
269:               </div>
270:               <p className="text-xs text-muted-foreground">{item.feedback}</p>
271:             </div>
272:           ))}
273:         </div>
274: 
275:         {/* Tips */}
276:         {analysis.percentage < 80 && (
277:           <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
278:             <p className="text-xs text-blue-800 dark:text-blue-300 font-medium mb-2">
279:               💡 Quick Wins to Improve Score:
280:             </p>
281:             <ul className="text-xs text-blue-700 dark:text-blue-400 space-y-1">
282:               {analysis.scores
283:                 .filter(item => item.status !== 'pass')
284:                 .slice(0, 3)
285:                 .map((item, index) => (
286:                   <li key={index}>• {item.feedback}</li>
287:                 ))}
288:             </ul>
289:           </div>
290:         )}
291:       </CardContent>
292:     </Card>
293:   )
294: }
</file>

<file path="src/components/resume-builder/bullet-point-generator.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { Wand2, Loader2, Plus, Sparkles } from 'lucide-react'
  5: 
  6: interface BulletPointGeneratorProps {
  7:   role?: string
  8:   company?: string
  9:   achievements?: string[]
 10:   onAddBullet: (bullet: string) => void
 11: }
 12: 
 13: export function BulletPointGenerator({ role, company, achievements, onAddBullet }: BulletPointGeneratorProps) {
 14:   const [generatedBullets, setGeneratedBullets] = useState<string[]>([])
 15:   const [customInput, setCustomInput] = useState('')
 16:   const [loading, setLoading] = useState(false)
 17: 
 18:   const generateBullets = async () => {
 19:     setLoading(true)
 20:     try {
 21:       const response = await fetch('/api/resume/generate-bullets', {
 22:         method: 'POST',
 23:         headers: { 'Content-Type': 'application/json' },
 24:         body: JSON.stringify({ role, company, achievements })
 25:       })
 26: 
 27:       if (response.ok) {
 28:         const data = await response.json()
 29:         setGeneratedBullets(data.bullets)
 30:       } else {
 31:         console.error('Failed to generate bullets')
 32:       }
 33:     } catch (error) {
 34:       console.error('Error generating bullets:', error)
 35:     } finally {
 36:       setLoading(false)
 37:     }
 38:   }
 39: 
 40:   const enhanceCustomInput = async () => {
 41:     if (!customInput.trim()) return
 42: 
 43:     setLoading(true)
 44:     try {
 45:       const response = await fetch('/api/resume/generate-bullets', {
 46:         method: 'POST',
 47:         headers: { 'Content-Type': 'application/json' },
 48:         body: JSON.stringify({ 
 49:           input: customInput,
 50:           role,
 51:           company
 52:         })
 53:       })
 54: 
 55:       if (response.ok) {
 56:         const data = await response.json()
 57:         setGeneratedBullets(data.bullets)
 58:         setCustomInput('')
 59:       }
 60:     } catch (error) {
 61:       console.error('Error enhancing input:', error)
 62:     } finally {
 63:       setLoading(false)
 64:     }
 65:   }
 66: 
 67:   return (
 68:     <div className="bg-gradient-to-br from-purple-50 to-blue-50 rounded-xl p-6 border-2 border-purple-200">
 69:       <div className="flex items-center justify-between mb-4">
 70:         <div className="flex items-center gap-2">
 71:           <Sparkles className="w-5 h-5 text-purple-600" />
 72:           <h4 className="font-bold text-lg text-foreground">AI Bullet Point Generator</h4>
 73:         </div>
 74:         <button
 75:           onClick={generateBullets}
 76:           disabled={loading}
 77:           className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50 flex items-center gap-2"
 78:         >
 79:           {loading ? (
 80:             <>
 81:               <Loader2 className="w-4 h-4 animate-spin" />
 82:               Generating...
 83:             </>
 84:           ) : (
 85:             <>
 86:               <Wand2 className="w-4 h-4" />
 87:               {generatedBullets.length > 0 ? 'Regenerate' : 'Generate'}
 88:             </>
 89:           )}
 90:         </button>
 91:       </div>
 92: 
 93:       {generatedBullets.length > 0 && (
 94:         <div className="space-y-3 mb-4">
 95:           <p className="text-sm text-gray-600">Click any bullet to add it to your resume:</p>
 96:           {generatedBullets.map((bullet, i) => (
 97:             <button
 98:               key={i}
 99:               onClick={() => onAddBullet(bullet)}
100:               className="w-full text-left p-4 bg-card rounded-lg border-2 border-border hover:border-purple-500 hover:bg-purple-50 transition-all group"
101:             >
102:               <div className="flex items-start gap-3">
103:                 <span className="flex-shrink-0 w-6 h-6 bg-purple-100 text-purple-600 rounded-full flex items-center justify-center text-sm font-bold group-hover:bg-purple-600 group-hover:text-white transition-colors">
104:                   {i + 1}
105:                 </span>
106:                 <span className="flex-1 text-gray-700 group-hover:text-foreground">{bullet}</span>
107:                 <Plus className="w-5 h-5 text-gray-400 group-hover:text-purple-600 transition-colors" />
108:               </div>
109:             </button>
110:           ))}
111:         </div>
112:       )}
113: 
114:       <div className="space-y-3">
115:         <div className="relative">
116:           <textarea
117:             placeholder="Or describe what you did in plain English... AI will transform it into a powerful achievement bullet!"
118:             value={customInput}
119:             onChange={(e) => setCustomInput(e.target.value)}
120:             className="w-full p-4 border-2 border-border rounded-lg focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-all resize-none"
121:             rows={3}
122:           />
123:         </div>
124:         <button
125:           onClick={enhanceCustomInput}
126:           disabled={loading || !customInput.trim()}
127:           className="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 font-semibold"
128:         >
129:           {loading ? (
130:             <>
131:               <Loader2 className="w-5 h-5 animate-spin" />
132:               Enhancing...
133:             </>
134:           ) : (
135:             <>
136:               <Sparkles className="w-5 h-5" />
137:               ✨ Enhance This
138:             </>
139:           )}
140:         </button>
141:       </div>
142: 
143:       <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
144:         <p className="text-xs text-blue-800">
145:           <strong>💡 Tip:</strong> AI works best when you provide context. Mention numbers, timeframes, or specific outcomes!
146:         </p>
147:       </div>
148:     </div>
149:   )
150: }
</file>

<file path="src/components/resume-builder/date-picker.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { Input } from '@/components/ui/input'
  5: import { Label } from '@/components/ui/label'
  6: import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
  7: import { Calendar } from 'lucide-react'
  8: 
  9: interface DatePickerProps {
 10:   label: string
 11:   value: string
 12:   onChange: (value: string) => void
 13:   allowCurrent?: boolean
 14:   isCurrent?: boolean
 15:   onCurrentChange?: (current: boolean) => void
 16: }
 17: 
 18: const MONTHS = [
 19:   'January', 'February', 'March', 'April', 'May', 'June',
 20:   'July', 'August', 'September', 'October', 'November', 'December'
 21: ]
 22: 
 23: const YEARS = Array.from({ length: 50 }, (_, i) => new Date().getFullYear() - i)
 24: 
 25: export function DatePicker({
 26:   label,
 27:   value,
 28:   onChange,
 29:   allowCurrent = false,
 30:   isCurrent = false,
 31:   onCurrentChange
 32: }: DatePickerProps) {
 33:   // Parse existing value (format: "Month YYYY" or "MM/YYYY")
 34:   const parseDate = (dateStr: string) => {
 35:     if (!dateStr || dateStr === 'Present') return { month: '', year: '' }
 36:     
 37:     // Try "Month YYYY" format
 38:     const parts = dateStr.split(' ')
 39:     if (parts.length === 2) {
 40:       return { month: parts[0], year: parts[1] }
 41:     }
 42:     
 43:     // Try "MM/YYYY" format
 44:     const slashParts = dateStr.split('/')
 45:     if (slashParts.length === 2) {
 46:       const monthIndex = parseInt(slashParts[0]) - 1
 47:       return { 
 48:         month: MONTHS[monthIndex] || '', 
 49:         year: slashParts[1] 
 50:       }
 51:     }
 52:     
 53:     return { month: '', year: '' }
 54:   }
 55: 
 56:   const { month: initialMonth, year: initialYear } = parseDate(value)
 57:   const [selectedMonth, setSelectedMonth] = useState(initialMonth)
 58:   const [selectedYear, setSelectedYear] = useState(initialYear)
 59: 
 60:   const handleMonthChange = (month: string) => {
 61:     setSelectedMonth(month)
 62:     if (month && selectedYear) {
 63:       onChange(`${month} ${selectedYear}`)
 64:     }
 65:   }
 66: 
 67:   const handleYearChange = (year: string) => {
 68:     setSelectedYear(year)
 69:     if (selectedMonth && year) {
 70:       onChange(`${selectedMonth} ${year}`)
 71:     }
 72:   }
 73: 
 74:   const handleCurrentToggle = () => {
 75:     if (onCurrentChange) {
 76:       onCurrentChange(!isCurrent)
 77:       if (!isCurrent) {
 78:         onChange('Present')
 79:       }
 80:     }
 81:   }
 82: 
 83:   return (
 84:     <div className="space-y-2">
 85:       <Label className="text-sm font-medium flex items-center gap-2">
 86:         <Calendar className="w-4 h-4" />
 87:         {label}
 88:       </Label>
 89:       
 90:       {allowCurrent && (
 91:         <label className="flex items-center gap-2 text-sm cursor-pointer">
 92:           <input
 93:             type="checkbox"
 94:             checked={isCurrent}
 95:             onChange={handleCurrentToggle}
 96:             className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
 97:           />
 98:           <span className="text-muted-foreground">Current position</span>
 99:         </label>
100:       )}
101: 
102:       {!isCurrent && (
103:         <div className="grid grid-cols-2 gap-2">
104:           <Select value={selectedMonth} onValueChange={handleMonthChange}>
105:             <SelectTrigger>
106:               <SelectValue placeholder="Month" />
107:             </SelectTrigger>
108:             <SelectContent>
109:               {MONTHS.map((month) => (
110:                 <SelectItem key={month} value={month}>
111:                   {month}
112:                 </SelectItem>
113:               ))}
114:             </SelectContent>
115:           </Select>
116: 
117:           <Select value={selectedYear} onValueChange={handleYearChange}>
118:             <SelectTrigger>
119:               <SelectValue placeholder="Year" />
120:             </SelectTrigger>
121:             <SelectContent>
122:               {YEARS.map((year) => (
123:                 <SelectItem key={year} value={year.toString()}>
124:                   {year}
125:                 </SelectItem>
126:               ))}
127:             </SelectContent>
128:           </Select>
129:         </div>
130:       )}
131: 
132:       {isCurrent && (
133:         <div className="px-3 py-2 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg text-sm text-blue-700 dark:text-blue-300">
134:           Present
135:         </div>
136:       )}
137:     </div>
138:   )
139: }
</file>

<file path="src/components/resume-builder/export-hub.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { Download, FileText, Link2, Copy, Check, Loader2 } from 'lucide-react'
  5: 
  6: interface ExportHubProps {
  7:   resume: any
  8: }
  9: 
 10: export function ExportHub({ resume }: ExportHubProps) {
 11:   const [exporting, setExporting] = useState<string | null>(null)
 12:   const [copied, setCopied] = useState(false)
 13: 
 14:   const generateResumeHTML = (resume: any) => {
 15:     return `
 16:       <!DOCTYPE html>
 17:       <html>
 18:       <head>
 19:         <meta charset="UTF-8">
 20:         <style>
 21:           body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }
 22:           h1 { font-size: 28px; margin-bottom: 5px; color: #1a1a1a; }
 23:           h2 { font-size: 18px; border-bottom: 2px solid #333; padding-bottom: 5px; margin-top: 20px; margin-bottom: 10px; }
 24:           .contact { font-size: 14px; color: #666; margin-bottom: 20px; }
 25:           .section { margin-bottom: 20px; }
 26:           .job { margin-bottom: 15px; }
 27:           .job-title { font-weight: bold; font-size: 16px; }
 28:           .job-company { font-style: italic; color: #666; font-size: 14px; }
 29:           ul { margin: 5px 0; padding-left: 20px; }
 30:           li { margin-bottom: 5px; }
 31:         </style>
 32:       </head>
 33:       <body>
 34:         <h1>${resume.personalInfo?.name || 'Your Name'}</h1>
 35:         <div class="contact">
 36:           ${[resume.personalInfo?.email, resume.personalInfo?.phone, resume.personalInfo?.location].filter(Boolean).join(' | ')}
 37:         </div>
 38:         
 39:         ${resume.personalInfo?.summary ? `
 40:           <div class="section">
 41:             <h2>PROFESSIONAL SUMMARY</h2>
 42:             <p>${resume.personalInfo.summary}</p>
 43:           </div>
 44:         ` : ''}
 45:         
 46:         ${resume.experience?.length ? `
 47:           <div class="section">
 48:             <h2>EXPERIENCE</h2>
 49:             ${resume.experience.map((exp: any) => `
 50:               <div class="job">
 51:                 <div class="job-title">${exp.position || 'Position'}</div>
 52:                 <div class="job-company">${exp.company || 'Company'} | ${exp.location || ''} | ${exp.startDate || ''} - ${exp.current ? 'Present' : exp.endDate || ''}</div>
 53:                 ${exp.achievements?.length ? `
 54:                   <ul>
 55:                     ${exp.achievements.map((achievement: string) => `<li>${achievement}</li>`).join('')}
 56:                   </ul>
 57:                 ` : ''}
 58:               </div>
 59:             `).join('')}
 60:           </div>
 61:         ` : ''}
 62:         
 63:         ${resume.education?.length ? `
 64:           <div class="section">
 65:             <h2>EDUCATION</h2>
 66:             ${resume.education.map((edu: any) => `
 67:               <div class="job">
 68:                 <div class="job-title">${edu.degree || 'Degree'} in ${edu.field || 'Field'}</div>
 69:                 <div class="job-company">${edu.institution || 'Institution'} | ${edu.graduationDate || ''}</div>
 70:               </div>
 71:             `).join('')}
 72:           </div>
 73:         ` : ''}
 74:         
 75:         ${resume.skills?.length ? `
 76:           <div class="section">
 77:             <h2>SKILLS</h2>
 78:             <p>${resume.skills.join(' • ')}</p>
 79:           </div>
 80:         ` : ''}
 81:       </body>
 82:       </html>
 83:     `
 84:   }
 85: 
 86:   const handleExportPDF = async () => {
 87:     setExporting('pdf')
 88:     try {
 89:       // Generate HTML from resume
 90:       const resumeHtml = generateResumeHTML(resume)
 91:       
 92:       const response = await fetch('/api/resume/export-pdf', {
 93:         method: 'POST',
 94:         headers: { 'Content-Type': 'application/json' },
 95:         body: JSON.stringify({ 
 96:           resumeHtml,
 97:           filename: `${resume.personalInfo?.name || 'resume'}.pdf`
 98:         })
 99:       })
100: 
101:       if (response.ok) {
102:         const blob = await response.blob()
103:         const url = window.URL.createObjectURL(blob)
104:         const a = document.createElement('a')
105:         a.href = url
106:         a.download = `${resume.personalInfo?.name || 'resume'}.pdf`
107:         a.click()
108:         window.URL.revokeObjectURL(url)
109:       }
110:     } catch (error) {
111:       console.error('PDF export error:', error)
112:     } finally {
113:       setExporting(null)
114:     }
115:   }
116: 
117:   const handleExportWord = async () => {
118:     setExporting('word')
119:     try {
120:       const response = await fetch('/api/resume/export-docx', {
121:         method: 'POST',
122:         headers: { 'Content-Type': 'application/json' },
123:         body: JSON.stringify({ 
124:           resume,
125:           filename: `${resume.personalInfo?.name || 'resume'}.docx`
126:         })
127:       })
128: 
129:       if (response.ok) {
130:         const blob = await response.blob()
131:         const url = window.URL.createObjectURL(blob)
132:         const a = document.createElement('a')
133:         a.href = url
134:         a.download = `${resume.personalInfo?.name || 'resume'}.docx`
135:         a.click()
136:         window.URL.revokeObjectURL(url)
137:       }
138:     } catch (error) {
139:       console.error('Word export error:', error)
140:     } finally {
141:       setExporting(null)
142:     }
143:   }
144: 
145:   const handleCopyText = () => {
146:     const text = generatePlainText(resume)
147:     navigator.clipboard.writeText(text)
148:     setCopied(true)
149:     setTimeout(() => setCopied(false), 2000)
150:   }
151: 
152:   const generatePlainText = (resume: any) => {
153:     let text = ''
154:     
155:     // Personal Info
156:     if (resume.personalInfo) {
157:       text += `${resume.personalInfo.fullName}\n`
158:       text += `${resume.personalInfo.email} | ${resume.personalInfo.phone}\n`
159:       if (resume.personalInfo.location) text += `${resume.personalInfo.location}\n`
160:       if (resume.personalInfo.linkedin) text += `${resume.personalInfo.linkedin}\n`
161:       text += '\n'
162:     }
163: 
164:     // Summary
165:     if (resume.personalInfo?.summary) {
166:       text += 'PROFESSIONAL SUMMARY\n'
167:       text += `${resume.personalInfo.summary}\n\n`
168:     }
169: 
170:     // Experience
171:     if (resume.experience?.length > 0) {
172:       text += 'PROFESSIONAL EXPERIENCE\n\n'
173:       resume.experience.forEach((exp: any) => {
174:         text += `${exp.position}\n`
175:         text += `${exp.company} | ${exp.location}\n`
176:         text += `${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}\n`
177:         if (exp.achievements?.length > 0) {
178:           exp.achievements.forEach((achievement: string) => {
179:             text += `• ${achievement}\n`
180:           })
181:         }
182:         text += '\n'
183:       })
184:     }
185: 
186:     // Education
187:     if (resume.education?.length > 0) {
188:       text += 'EDUCATION\n\n'
189:       resume.education.forEach((edu: any) => {
190:         text += `${edu.degree} in ${edu.field}\n`
191:         text += `${edu.institution}\n`
192:         text += `${edu.graduationDate}\n\n`
193:       })
194:     }
195: 
196:     // Skills
197:     if (resume.skills) {
198:       text += 'SKILLS\n\n'
199:       if (resume.skills.technical?.length > 0) {
200:         text += `Technical: ${resume.skills.technical.join(', ')}\n`
201:       }
202:       if (resume.skills.soft?.length > 0) {
203:         text += `Soft Skills: ${resume.skills.soft.join(', ')}\n`
204:       }
205:     }
206: 
207:     return text
208:   }
209: 
210:   return (
211:     <div className="bg-card rounded-xl border-2 border-border p-6">
212:       <h3 className="text-xl font-bold text-foreground mb-4">📤 Download Your Resume</h3>
213: 
214:       <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
215:         {/* PDF Export */}
216:         <div className="bg-gradient-to-br from-red-50 to-pink-50 rounded-xl p-6 border-2 border-red-200">
217:           <div className="flex items-center gap-3 mb-3">
218:             <div className="w-12 h-12 bg-red-500 rounded-xl flex items-center justify-center">
219:               <FileText className="w-6 h-6 text-white" />
220:             </div>
221:             <div>
222:               <h4 className="font-bold text-foreground">PDF</h4>
223:               <p className="text-xs text-gray-600">Best for applications</p>
224:             </div>
225:           </div>
226:           <button
227:             onClick={handleExportPDF}
228:             disabled={exporting === 'pdf'}
229:             className="w-full py-3 bg-red-500 hover:bg-red-600 text-white rounded-lg font-semibold transition-colors disabled:opacity-50 flex items-center justify-center gap-2"
230:           >
231:             {exporting === 'pdf' ? (
232:               <>
233:                 <Loader2 className="w-5 h-5 animate-spin" />
234:                 Generating...
235:               </>
236:             ) : (
237:               <>
238:                 <Download className="w-5 h-5" />
239:                 Download PDF
240:               </>
241:             )}
242:           </button>
243:           <div className="mt-3 space-y-1">
244:             <div className="flex items-center gap-2 text-xs text-gray-700">
245:               <Check className="w-3 h-3 text-green-500" />
246:               <span>ATS-friendly</span>
247:             </div>
248:             <div className="flex items-center gap-2 text-xs text-gray-700">
249:               <Check className="w-3 h-3 text-green-500" />
250:               <span>Print-ready</span>
251:             </div>
252:           </div>
253:         </div>
254: 
255:         {/* Word Export */}
256:         <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 border-2 border-blue-200">
257:           <div className="flex items-center gap-3 mb-3">
258:             <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
259:               <FileText className="w-6 h-6 text-white" />
260:             </div>
261:             <div>
262:               <h4 className="font-bold text-foreground">Word (DOCX)</h4>
263:               <p className="text-xs text-gray-600">Editable for recruiters</p>
264:             </div>
265:           </div>
266:           <button
267:             onClick={handleExportWord}
268:             disabled={exporting === 'word'}
269:             className="w-full py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-semibold transition-colors disabled:opacity-50 flex items-center justify-center gap-2"
270:           >
271:             {exporting === 'word' ? (
272:               <>
273:                 <Loader2 className="w-5 h-5 animate-spin" />
274:                 Generating...
275:               </>
276:             ) : (
277:               <>
278:                 <Download className="w-5 h-5" />
279:                 Download Word
280:               </>
281:             )}
282:           </button>
283:           <div className="mt-3 space-y-1">
284:             <div className="flex items-center gap-2 text-xs text-gray-700">
285:               <Check className="w-3 h-3 text-green-500" />
286:               <span>Fully editable</span>
287:             </div>
288:             <div className="flex items-center gap-2 text-xs text-gray-700">
289:               <Check className="w-3 h-3 text-green-500" />
290:               <span>Widely accepted</span>
291:             </div>
292:           </div>
293:         </div>
294: 
295:         {/* Plain Text */}
296:         <div className="bg-gradient-to-br from-gray-50 to-slate-50 rounded-xl p-6 border-2 border-border">
297:           <div className="flex items-center gap-3 mb-3">
298:             <div className="w-12 h-12 bg-gray-500 rounded-xl flex items-center justify-center">
299:               <Copy className="w-6 h-6 text-white" />
300:             </div>
301:             <div>
302:               <h4 className="font-bold text-foreground">Plain Text</h4>
303:               <p className="text-xs text-gray-600">For online forms</p>
304:             </div>
305:           </div>
306:           <button
307:             onClick={handleCopyText}
308:             className="w-full py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-semibold transition-colors flex items-center justify-center gap-2"
309:           >
310:             {copied ? (
311:               <>
312:                 <Check className="w-5 h-5" />
313:                 Copied!
314:               </>
315:             ) : (
316:               <>
317:                 <Copy className="w-5 h-5" />
318:                 Copy to Clipboard
319:               </>
320:             )}
321:           </button>
322:           <div className="mt-3 space-y-1">
323:             <div className="flex items-center gap-2 text-xs text-gray-700">
324:               <Check className="w-3 h-3 text-green-500" />
325:               <span>Copy-paste ready</span>
326:             </div>
327:             <div className="flex items-center gap-2 text-xs text-gray-700">
328:               <Check className="w-3 h-3 text-green-500" />
329:               <span>No formatting loss</span>
330:             </div>
331:           </div>
332:         </div>
333: 
334:         {/* Shareable Link (Premium) */}
335:         <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl p-6 border-2 border-purple-200 relative overflow-hidden">
336:           <div className="absolute top-2 right-2">
337:             <span className="px-2 py-1 bg-yellow-400 text-yellow-900 text-xs font-bold rounded-full">
338:               Coming Soon
339:             </span>
340:           </div>
341:           <div className="flex items-center gap-3 mb-3">
342:             <div className="w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center">
343:               <Link2 className="w-6 h-6 text-white" />
344:             </div>
345:             <div>
346:               <h4 className="font-bold text-foreground">Shareable Link</h4>
347:               <p className="text-xs text-gray-600">Online portfolio version</p>
348:             </div>
349:           </div>
350:           <button
351:             disabled
352:             className="w-full py-3 bg-purple-300 text-white rounded-lg font-semibold cursor-not-allowed flex items-center justify-center gap-2"
353:           >
354:             <Link2 className="w-5 h-5" />
355:             Create Link
356:           </button>
357:           <div className="mt-3 space-y-1">
358:             <div className="flex items-center gap-2 text-xs text-gray-700">
359:               <Check className="w-3 h-3 text-green-500" />
360:               <span>Beautiful web version</span>
361:             </div>
362:             <div className="flex items-center gap-2 text-xs text-gray-700">
363:               <Check className="w-3 h-3 text-green-500" />
364:               <span>Track views</span>
365:             </div>
366:           </div>
367:         </div>
368:       </div>
369: 
370:       <div className="mt-6 p-4 bg-green-50 rounded-lg border border-green-200">
371:         <p className="text-sm text-green-800">
372:           <strong>💼 Apply to Multiple Jobs?</strong> Download all formats at once for maximum compatibility!
373:         </p>
374:       </div>
375:     </div>
376:   )
377: }
</file>

<file path="src/components/resume-builder/progress-tracker.tsx">
 1: 'use client'
 2: 
 3: import { CheckCircle, Circle } from 'lucide-react'
 4: 
 5: interface ProgressTrackerProps {
 6:   resume: any
 7: }
 8: 
 9: export function ProgressTracker({ resume }: ProgressTrackerProps) {
10:   const checks = [
11:     {
12:       label: 'Add your name and contact info',
13:       completed: !!resume.personalInfo?.fullName && !!resume.personalInfo?.email
14:     },
15:     {
16:       label: 'Add work experience',
17:       completed: resume.experience?.length > 0
18:     },
19:     {
20:       label: 'Add achievement bullets',
21:       completed: resume.experience?.some((exp: any) => exp.achievements?.length > 0)
22:     },
23:     {
24:       label: 'Add education',
25:       completed: resume.education?.length > 0
26:     },
27:     {
28:       label: 'Add at least 5 skills',
29:       completed: (resume.skills?.technical?.length || 0) + (resume.skills?.soft?.length || 0) >= 5
30:     },
31:     {
32:       label: 'Include numbers/metrics',
33:       completed: resume.experience?.some((exp: any) =>
34:         exp.achievements?.some((a: string) => /\d+/.test(a))
35:       )
36:     },
37:     {
38:       label: 'Add professional summary',
39:       completed: resume.personalInfo?.summary?.length >= 50
40:     }
41:   ]
42: 
43:   const completedCount = checks.filter(c => c.completed).length
44:   const progress = Math.round((completedCount / checks.length) * 100)
45: 
46:   return (
47:     <div className="bg-gradient-to-br from-green-50 to-blue-50 rounded-xl border-2 border-green-200 p-6">
48:       <div className="mb-4">
49:         <div className="flex items-center justify-between mb-2">
50:           <h4 className="font-bold text-lg text-foreground">Resume Completeness</h4>
51:           <span className="text-2xl font-bold text-green-600">{progress}%</span>
52:         </div>
53:         <div className="w-full bg-gray-200 rounded-full h-3">
54:           <div
55:             className="bg-gradient-to-r from-green-500 to-blue-500 h-3 rounded-full transition-all duration-500"
56:             style={{ width: `${progress}%` }}
57:           />
58:         </div>
59:       </div>
60: 
61:       <div className="space-y-2">
62:         {checks.map((check, i) => (
63:           <div
64:             key={i}
65:             className={`flex items-center gap-3 p-3 rounded-lg transition-all ${
66:               check.completed ? 'bg-green-100' : 'bg-white'
67:             }`}
68:           >
69:             {check.completed ? (
70:               <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0" />
71:             ) : (
72:               <Circle className="w-5 h-5 text-gray-400 flex-shrink-0" />
73:             )}
74:             <span
75:               className={`text-sm ${
76:                 check.completed ? 'text-green-900 font-semibold' : 'text-gray-700'
77:               }`}
78:             >
79:               {check.label}
80:             </span>
81:           </div>
82:         ))}
83:       </div>
84: 
85:       {progress >= 80 && (
86:         <div className="mt-4 p-4 bg-green-500 text-white rounded-lg text-center">
87:           <div className="text-3xl mb-2">🎉</div>
88:           <p className="font-bold">Resume Ready!</p>
89:           <p className="text-sm opacity-90">Your resume looks great!</p>
90:         </div>
91:       )}
92:     </div>
93:   )
94: }
</file>

<file path="src/components/resume-builder/quick-actions.tsx">
  1: 'use client'
  2: 
  3: import { Button } from '@/components/ui/button'
  4: import { Card, CardContent } from '@/components/ui/card'
  5: import {
  6:   Download,
  7:   Eye,
  8:   Copy,
  9:   Sparkles,
 10:   FileText,
 11:   Mail,
 12:   Linkedin,
 13:   Share2
 14: } from 'lucide-react'
 15: import toast from 'react-hot-toast'
 16: 
 17: interface QuickActionsProps {
 18:   onGenerateResume: () => void
 19:   onDownloadPDF: () => void
 20:   onDownloadHTML: () => void
 21:   onPreview: () => void
 22:   onCopyText: () => void
 23:   isGenerating: boolean
 24:   hasGenerated: boolean
 25: }
 26: 
 27: export function QuickActions({
 28:   onGenerateResume,
 29:   onDownloadPDF,
 30:   onDownloadHTML,
 31:   onPreview,
 32:   onCopyText,
 33:   isGenerating,
 34:   hasGenerated
 35: }: QuickActionsProps) {
 36:   const handleShare = () => {
 37:     toast.success('Share feature coming soon!')
 38:   }
 39: 
 40:   const handleLinkedInExport = () => {
 41:     toast.success('LinkedIn export coming soon!')
 42:   }
 43: 
 44:   const handleEmailResume = () => {
 45:     toast.success('Email feature coming soon!')
 46:   }
 47: 
 48:   return (
 49:     <Card className="sticky top-4">
 50:       <CardContent className="p-4">
 51:         <div className="space-y-3">
 52:           {/* Primary Action */}
 53:           <Button
 54:             onClick={onGenerateResume}
 55:             disabled={isGenerating}
 56:             className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
 57:             size="lg"
 58:           >
 59:             {isGenerating ? (
 60:               <>
 61:                 <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
 62:                 Generating...
 63:               </>
 64:             ) : (
 65:               <>
 66:                 <Sparkles className="w-4 h-4 mr-2" />
 67:                 Generate Resume
 68:               </>
 69:             )}
 70:           </Button>
 71: 
 72:           {/* Secondary Actions */}
 73:           {hasGenerated && (
 74:             <>
 75:               <div className="grid grid-cols-2 gap-2">
 76:                 <Button
 77:                   onClick={onDownloadPDF}
 78:                   variant="outline"
 79:                   size="sm"
 80:                   className="w-full"
 81:                 >
 82:                   <Download className="w-4 h-4 mr-1" />
 83:                   PDF
 84:                 </Button>
 85:                 <Button
 86:                   onClick={onDownloadHTML}
 87:                   variant="outline"
 88:                   size="sm"
 89:                   className="w-full"
 90:                 >
 91:                   <FileText className="w-4 h-4 mr-1" />
 92:                   HTML
 93:                 </Button>
 94:               </div>
 95: 
 96:               <div className="grid grid-cols-2 gap-2">
 97:                 <Button
 98:                   onClick={onPreview}
 99:                   variant="outline"
100:                   size="sm"
101:                   className="w-full"
102:                 >
103:                   <Eye className="w-4 h-4 mr-1" />
104:                   Preview
105:                 </Button>
106:                 <Button
107:                   onClick={onCopyText}
108:                   variant="outline"
109:                   size="sm"
110:                   className="w-full"
111:                 >
112:                   <Copy className="w-4 h-4 mr-1" />
113:                   Copy
114:                 </Button>
115:               </div>
116: 
117:               {/* Divider */}
118:               <div className="border-t border-border my-2"></div>
119: 
120:               {/* Share Actions */}
121:               <div className="space-y-2">
122:                 <p className="text-xs font-medium text-muted-foreground mb-2">Share & Export</p>
123:                 <Button
124:                   onClick={handleLinkedInExport}
125:                   variant="outline"
126:                   size="sm"
127:                   className="w-full justify-start"
128:                 >
129:                   <Linkedin className="w-4 h-4 mr-2 text-blue-600" />
130:                   <span className="text-sm">Export to LinkedIn</span>
131:                 </Button>
132:                 <Button
133:                   onClick={handleEmailResume}
134:                   variant="outline"
135:                   size="sm"
136:                   className="w-full justify-start"
137:                 >
138:                   <Mail className="w-4 h-4 mr-2 text-green-600" />
139:                   <span className="text-sm">Email Resume</span>
140:                 </Button>
141:                 <Button
142:                   onClick={handleShare}
143:                   variant="outline"
144:                   size="sm"
145:                   className="w-full justify-start"
146:                 >
147:                   <Share2 className="w-4 h-4 mr-2 text-purple-600" />
148:                   <span className="text-sm">Share Link</span>
149:                 </Button>
150:               </div>
151:             </>
152:           )}
153: 
154:           {/* Help Text */}
155:           <div className="mt-4 p-3 bg-muted/50 rounded-lg">
156:             <p className="text-xs text-muted-foreground">
157:               {!hasGenerated ? (
158:                 <>
159:                   <strong>💡 Tip:</strong> Fill in your information, then click Generate to create your professional resume.
160:                 </>
161:               ) : (
162:                 <>
163:                   <strong>✅ Ready!</strong> Your resume is generated. Download or share it now.
164:                 </>
165:               )}
166:             </p>
167:           </div>
168:         </div>
169:       </CardContent>
170:     </Card>
171:   )
172: }
</file>

<file path="src/components/resume-builder/quick-start.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { Upload, Linkedin, Wand2, Loader2, CheckCircle } from 'lucide-react'
  5: 
  6: interface QuickStartProps {
  7:   onResumeImported: (data: any) => void
  8: }
  9: 
 10: export function QuickStart({ onResumeImported }: QuickStartProps) {
 11:   const [uploading, setUploading] = useState(false)
 12:   const [linkedinConnecting, setLinkedinConnecting] = useState(false)
 13: 
 14:   const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
 15:     const file = e.target.files?.[0]
 16:     if (!file) return
 17: 
 18:     setUploading(true)
 19:     try {
 20:       const formData = new FormData()
 21:       formData.append('file', file)
 22: 
 23:       const response = await fetch('/api/resume/upload', {
 24:         method: 'POST',
 25:         body: formData
 26:       })
 27: 
 28:       if (response.ok) {
 29:         const data = await response.json()
 30:         onResumeImported(data)
 31:       }
 32:     } catch (error) {
 33:       console.error('Upload error:', error)
 34:     } finally {
 35:       setUploading(false)
 36:     }
 37:   }
 38: 
 39:   const handleLinkedInImport = async () => {
 40:     setLinkedinConnecting(true)
 41:     try {
 42:       // TODO: Implement LinkedIn OAuth
 43:       // For now, show coming soon message
 44:       alert('LinkedIn import coming soon! For now, please upload your resume or start from scratch.')
 45:     } finally {
 46:       setLinkedinConnecting(false)
 47:     }
 48:   }
 49: 
 50:   const handleAIStart = () => {
 51:     // Start with empty template
 52:     onResumeImported(null)
 53:   }
 54: 
 55:   return (
 56:     <div className="max-w-5xl mx-auto">
 57:       <div className="text-center mb-8">
 58:         <h2 className="text-3xl font-bold text-foreground mb-3">
 59:           How would you like to start?
 60:         </h2>
 61:         <p className="text-lg text-gray-600">
 62:           Choose the fastest way to build your professional resume
 63:         </p>
 64:       </div>
 65: 
 66:       <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
 67:         {/* Option 1: Upload Resume */}
 68:         <div className="relative bg-card rounded-2xl p-8 border-2 border-border hover:border-blue-500 hover:shadow-xl transition-all cursor-pointer group">
 69:           <input
 70:             type="file"
 71:             accept=".pdf,.doc,.docx"
 72:             onChange={handleFileUpload}
 73:             className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
 74:             disabled={uploading}
 75:           />
 76:           
 77:           <div className="text-center">
 78:             <div className="w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-blue-500 transition-colors">
 79:               {uploading ? (
 80:                 <Loader2 className="w-8 h-8 text-blue-600 animate-spin group-hover:text-white" />
 81:               ) : (
 82:                 <Upload className="w-8 h-8 text-blue-600 group-hover:text-white" />
 83:               )}
 84:             </div>
 85:             
 86:             <h3 className="text-xl font-bold text-foreground mb-2">Upload Your Resume</h3>
 87:             <p className="text-sm text-gray-600 mb-4">
 88:               Have a resume? We'll import it and make it better
 89:             </p>
 90:             
 91:             <div className="space-y-2 text-left">
 92:               <div className="flex items-center gap-2 text-sm text-gray-700">
 93:                 <CheckCircle className="w-4 h-4 text-green-500" />
 94:                 <span>Auto-extract all sections</span>
 95:               </div>
 96:               <div className="flex items-center gap-2 text-sm text-gray-700">
 97:                 <CheckCircle className="w-4 h-4 text-green-500" />
 98:                 <span>AI enhancement suggestions</span>
 99:               </div>
100:               <div className="flex items-center gap-2 text-sm text-gray-700">
101:                 <CheckCircle className="w-4 h-4 text-green-500" />
102:                 <span>Ready in 30 seconds</span>
103:               </div>
104:             </div>
105:           </div>
106:         </div>
107: 
108:         {/* Option 2: LinkedIn Import (Featured) */}
109:         <div className="relative bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl p-8 border-2 border-transparent hover:shadow-2xl transition-all cursor-pointer group">
110:           <div className="absolute top-4 right-4">
111:             <span className="px-3 py-1 bg-yellow-400 text-yellow-900 text-xs font-bold rounded-full">
112:               Most Popular
113:             </span>
114:           </div>
115:           
116:           <button
117:             onClick={handleLinkedInImport}
118:             disabled={linkedinConnecting}
119:             className="w-full text-center"
120:           >
121:             <div className="w-16 h-16 bg-white/20 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-card/30 transition-colors">
122:               {linkedinConnecting ? (
123:                 <Loader2 className="w-8 h-8 text-white animate-spin" />
124:               ) : (
125:                 <Linkedin className="w-8 h-8 text-white" />
126:               )}
127:             </div>
128:             
129:             <h3 className="text-xl font-bold text-white mb-2">Import from LinkedIn</h3>
130:             <p className="text-sm text-white/90 mb-4">
131:               Already on LinkedIn? Import your profile instantly
132:             </p>
133:             
134:             <div className="space-y-2 text-left">
135:               <div className="flex items-center gap-2 text-sm text-white">
136:                 <CheckCircle className="w-4 h-4" />
137:                 <span>One-click import</span>
138:               </div>
139:               <div className="flex items-center gap-2 text-sm text-white">
140:                 <CheckCircle className="w-4 h-4" />
141:                 <span>All details pre-filled</span>
142:               </div>
143:               <div className="flex items-center gap-2 text-sm text-white">
144:                 <CheckCircle className="w-4 h-4" />
145:                 <span>Zero typing required</span>
146:               </div>
147:             </div>
148:           </button>
149:         </div>
150: 
151:         {/* Option 3: AI-Guided Build */}
152:         <div className="relative bg-card rounded-2xl p-8 border-2 border-border hover:border-purple-500 hover:shadow-xl transition-all cursor-pointer group">
153:           <button onClick={handleAIStart} className="w-full text-center">
154:             <div className="w-16 h-16 bg-purple-100 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-purple-500 transition-colors">
155:               <Wand2 className="w-8 h-8 text-purple-600 group-hover:text-white" />
156:             </div>
157:             
158:             <h3 className="text-xl font-bold text-foreground mb-2">AI-Guided Resume</h3>
159:             <p className="text-sm text-gray-600 mb-4">
160:               Starting fresh? AI will help you write everything
161:             </p>
162:             
163:             <div className="space-y-2 text-left">
164:               <div className="flex items-center gap-2 text-sm text-gray-700">
165:                 <CheckCircle className="w-4 h-4 text-green-500" />
166:                 <span>AI writes for you</span>
167:               </div>
168:               <div className="flex items-center gap-2 text-sm text-gray-700">
169:                 <CheckCircle className="w-4 h-4 text-green-500" />
170:                 <span>Smart suggestions</span>
171:               </div>
172:               <div className="flex items-center gap-2 text-sm text-gray-700">
173:                 <CheckCircle className="w-4 h-4 text-green-500" />
174:                 <span>Optimized for ATS</span>
175:               </div>
176:             </div>
177:           </button>
178:         </div>
179:       </div>
180: 
181:       <div className="mt-8 text-center">
182:         <p className="text-sm text-gray-500">
183:           All options include AI-powered enhancements and ATS optimization
184:         </p>
185:       </div>
186:     </div>
187:   )
188: }
</file>

<file path="src/components/resume-builder/resume-analyzer.tsx">
  1: 'use client'
  2: 
  3: import { useMemo } from 'react'
  4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Progress } from '@/components/ui/progress'
  6: import { Badge } from '@/components/ui/badge'
  7: import { CheckCircle, AlertCircle, Circle } from 'lucide-react'
  8: 
  9: interface ResumeData {
 10:   personalInfo: {
 11:     fullName: string
 12:     email: string
 13:     phone: string
 14:     location: string
 15:     linkedin?: string
 16:     website?: string
 17:     summary: string
 18:   }
 19:   experience: Array<any>
 20:   education: Array<any>
 21:   skills: {
 22:     technical: string[]
 23:     soft: string[]
 24:     languages: Array<any>
 25:     certifications: Array<any>
 26:   }
 27:   projects: Array<any>
 28: }
 29: 
 30: interface ResumeAnalyzerProps {
 31:   resumeData: ResumeData
 32: }
 33: 
 34: interface AnalysisItem {
 35:   label: string
 36:   status: 'complete' | 'incomplete' | 'optional'
 37:   weight: number
 38: }
 39: 
 40: export function ResumeAnalyzer({ resumeData }: ResumeAnalyzerProps) {
 41:   const analysis = useMemo(() => {
 42:     const items: AnalysisItem[] = [
 43:       {
 44:         label: 'Personal Information',
 45:         status: resumeData.personalInfo.fullName && 
 46:                 resumeData.personalInfo.email && 
 47:                 resumeData.personalInfo.phone && 
 48:                 resumeData.personalInfo.location 
 49:           ? 'complete' 
 50:           : 'incomplete',
 51:         weight: 15
 52:       },
 53:       {
 54:         label: 'Professional Summary',
 55:         status: resumeData.personalInfo.summary && resumeData.personalInfo.summary.length >= 50
 56:           ? 'complete'
 57:           : 'incomplete',
 58:         weight: 10
 59:       },
 60:       {
 61:         label: 'Work Experience',
 62:         status: resumeData.experience.length > 0
 63:           ? 'complete'
 64:           : 'incomplete',
 65:         weight: 30
 66:       },
 67:       {
 68:         label: 'Education',
 69:         status: resumeData.education.length > 0
 70:           ? 'complete'
 71:           : 'incomplete',
 72:         weight: 20
 73:       },
 74:       {
 75:         label: 'Skills',
 76:         status: (resumeData.skills.technical.length + resumeData.skills.soft.length) >= 5
 77:           ? 'complete'
 78:           : 'incomplete',
 79:         weight: 15
 80:       },
 81:       {
 82:         label: 'LinkedIn Profile',
 83:         status: resumeData.personalInfo.linkedin
 84:           ? 'complete'
 85:           : 'optional',
 86:         weight: 5
 87:       },
 88:       {
 89:         label: 'Projects/Portfolio',
 90:         status: resumeData.projects.length > 0
 91:           ? 'complete'
 92:           : 'optional',
 93:         weight: 5
 94:       }
 95:     ]
 96: 
 97:     const completedWeight = items
 98:       .filter(item => item.status === 'complete')
 99:       .reduce((sum, item) => sum + item.weight, 0)
100: 
101:     const totalWeight = items
102:       .filter(item => item.status !== 'optional')
103:       .reduce((sum, item) => sum + item.weight, 0)
104: 
105:     const completeness = Math.round((completedWeight / totalWeight) * 100)
106: 
107:     return { items, completeness }
108:   }, [resumeData])
109: 
110:   const getStatusIcon = (status: string) => {
111:     switch (status) {
112:       case 'complete':
113:         return <CheckCircle className="w-4 h-4 text-green-600" />
114:       case 'incomplete':
115:         return <AlertCircle className="w-4 h-4 text-orange-600" />
116:       case 'optional':
117:         return <Circle className="w-4 h-4 text-gray-400" />
118:     }
119:   }
120: 
121:   const getCompletenessColor = (score: number) => {
122:     if (score >= 80) return 'text-green-600'
123:     if (score >= 60) return 'text-yellow-600'
124:     return 'text-orange-600'
125:   }
126: 
127:   const getCompletenessLabel = (score: number) => {
128:     if (score >= 90) return 'Excellent'
129:     if (score >= 80) return 'Very Good'
130:     if (score >= 70) return 'Good'
131:     if (score >= 60) return 'Fair'
132:     return 'Needs Work'
133:   }
134: 
135:   return (
136:     <Card className="sticky top-4">
137:       <CardHeader>
138:         <CardTitle className="text-lg flex items-center justify-between">
139:           <span>Resume Analysis</span>
140:           <Badge 
141:             variant="outline" 
142:             className={`${getCompletenessColor(analysis.completeness)} border-current`}
143:           >
144:             {getCompletenessLabel(analysis.completeness)}
145:           </Badge>
146:         </CardTitle>
147:       </CardHeader>
148:       <CardContent className="space-y-4">
149:         {/* Completeness Score */}
150:         <div>
151:           <div className="flex items-center justify-between mb-2">
152:             <span className="text-sm font-medium text-foreground">Completeness</span>
153:             <span className={`text-2xl font-bold ${getCompletenessColor(analysis.completeness)}`}>
154:               {analysis.completeness}%
155:             </span>
156:           </div>
157:           <Progress value={analysis.completeness} className="h-2" />
158:         </div>
159: 
160:         {/* Section Checklist */}
161:         <div className="space-y-2">
162:           <h4 className="text-sm font-semibold text-foreground mb-3">Sections</h4>
163:           {analysis.items.map((item, index) => (
164:             <div
165:               key={index}
166:               className="flex items-center justify-between py-2 px-3 rounded-lg hover:bg-muted/50 transition-colors"
167:             >
168:               <div className="flex items-center gap-2">
169:                 {getStatusIcon(item.status)}
170:                 <span className={`text-sm ${
171:                   item.status === 'complete' 
172:                     ? 'text-foreground' 
173:                     : item.status === 'optional'
174:                     ? 'text-muted-foreground'
175:                     : 'text-orange-600'
176:                 }`}>
177:                   {item.label}
178:                 </span>
179:               </div>
180:               {item.status === 'optional' && (
181:                 <Badge variant="outline" className="text-xs">
182:                   Optional
183:                 </Badge>
184:               )}
185:             </div>
186:           ))}
187:         </div>
188: 
189:         {/* Tips */}
190:         {analysis.completeness < 80 && (
191:           <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
192:             <p className="text-xs text-blue-800 dark:text-blue-300 font-medium mb-1">
193:               💡 Quick Tips
194:             </p>
195:             <ul className="text-xs text-blue-700 dark:text-blue-400 space-y-1">
196:               {analysis.items
197:                 .filter(item => item.status === 'incomplete')
198:                 .slice(0, 2)
199:                 .map((item, index) => (
200:                   <li key={index}>• Complete your {item.label.toLowerCase()}</li>
201:                 ))}
202:             </ul>
203:           </div>
204:         )}
205:       </CardContent>
206:     </Card>
207:   )
208: }
</file>

<file path="src/components/resume-builder/resume-preview.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { ZoomIn, ZoomOut, Download, Eye } from 'lucide-react'
  5: 
  6: interface ResumeData {
  7:   personalInfo: {
  8:     fullName: string
  9:     email: string
 10:     phone: string
 11:     location: string
 12:     linkedin?: string
 13:     website?: string
 14:     summary: string
 15:   }
 16:   experience: Array<{
 17:     company: string
 18:     position: string
 19:     location: string
 20:     startDate: string
 21:     endDate: string
 22:     current: boolean
 23:     achievements: string[]
 24:   }>
 25:   education: Array<{
 26:     institution: string
 27:     degree: string
 28:     field: string
 29:     graduationDate: string
 30:   }>
 31:   skills: {
 32:     technical: string[]
 33:     soft: string[]
 34:   }
 35: }
 36: 
 37: interface ResumePreviewProps {
 38:   resume: ResumeData
 39:   template?: string
 40: }
 41: 
 42: export function ResumePreview({ resume, template = 'modern' }: ResumePreviewProps) {
 43:   const [zoom, setZoom] = useState(100)
 44: 
 45:   const handleZoomIn = () => setZoom(Math.min(zoom + 10, 150))
 46:   const handleZoomOut = () => setZoom(Math.max(zoom - 10, 50))
 47: 
 48:   return (
 49:     <div className="sticky top-4 bg-card rounded-xl border-2 border-border shadow-lg">
 50:       {/* Preview Header */}
 51:       <div className="flex items-center justify-between p-4 border-b border-border bg-gray-50 rounded-t-xl">
 52:         <div className="flex items-center gap-2">
 53:           <Eye className="w-5 h-5 text-gray-600" />
 54:           <h3 className="font-bold text-foreground">Live Preview</h3>
 55:         </div>
 56:         
 57:         <div className="flex items-center gap-2">
 58:           <button
 59:             onClick={handleZoomOut}
 60:             className="p-2 hover:bg-gray-200 rounded-lg transition-colors"
 61:             title="Zoom Out"
 62:           >
 63:             <ZoomOut className="w-4 h-4 text-gray-600" />
 64:           </button>
 65:           <span className="text-sm font-medium text-gray-600 min-w-[3rem] text-center">
 66:             {zoom}%
 67:           </span>
 68:           <button
 69:             onClick={handleZoomIn}
 70:             className="p-2 hover:bg-gray-200 rounded-lg transition-colors"
 71:             title="Zoom In"
 72:           >
 73:             <ZoomIn className="w-4 h-4 text-gray-600" />
 74:           </button>
 75:           <div className="w-px h-6 bg-gray-300 mx-2" />
 76:           <button
 77:             className="p-2 hover:bg-blue-50 rounded-lg transition-colors"
 78:             title="Download PDF"
 79:           >
 80:             <Download className="w-4 h-4 text-blue-600" />
 81:           </button>
 82:         </div>
 83:       </div>
 84: 
 85:       {/* Preview Content */}
 86:       <div className="p-6 bg-gray-100 max-h-[calc(100vh-12rem)] overflow-y-auto">
 87:         <div
 88:           className="bg-card shadow-xl mx-auto transition-transform"
 89:           style={{
 90:             transform: `scale(${zoom / 100})`,
 91:             transformOrigin: 'top center',
 92:             width: '8.5in',
 93:             minHeight: '11in',
 94:             padding: '0.75in'
 95:           }}
 96:         >
 97:           {/* Modern Template */}
 98:           {template === 'modern' && (
 99:             <div className="space-y-6">
100:               {/* Header with Gradient */}
101:               <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 -m-6 mb-6 rounded-t-lg">
102:                 <h1 className="text-3xl font-bold mb-2">
103:                   {resume.personalInfo.fullName || 'Your Name'}
104:                 </h1>
105:                 <div className="flex flex-wrap gap-4 text-sm">
106:                   {resume.personalInfo.email && (
107:                     <span>📧 {resume.personalInfo.email}</span>
108:                   )}
109:                   {resume.personalInfo.phone && (
110:                     <span>📱 {resume.personalInfo.phone}</span>
111:                   )}
112:                   {resume.personalInfo.location && (
113:                     <span>📍 {resume.personalInfo.location}</span>
114:                   )}
115:                 </div>
116:                 {resume.personalInfo.linkedin && (
117:                   <div className="mt-2 text-sm">
118:                     🔗 {resume.personalInfo.linkedin}
119:                   </div>
120:                 )}
121:               </div>
122: 
123:               {/* Summary */}
124:               {resume.personalInfo.summary && (
125:                 <div>
126:                   <h2 className="text-xl font-bold text-foreground border-b-2 border-blue-600 pb-2 mb-3">
127:                     Professional Summary
128:                   </h2>
129:                   <p className="text-gray-700 leading-relaxed">
130:                     {resume.personalInfo.summary}
131:                   </p>
132:                 </div>
133:               )}
134: 
135:               {/* Experience */}
136:               {resume.experience.length > 0 && (
137:                 <div>
138:                   <h2 className="text-xl font-bold text-foreground border-b-2 border-blue-600 pb-2 mb-3">
139:                     Professional Experience
140:                   </h2>
141:                   <div className="space-y-4">
142:                     {resume.experience.map((exp, i) => (
143:                       <div key={i}>
144:                         <div className="flex justify-between items-start mb-2">
145:                           <div>
146:                             <h3 className="font-bold text-foreground">{exp.position}</h3>
147:                             <p className="text-gray-700">{exp.company} • {exp.location}</p>
148:                           </div>
149:                           <span className="text-sm text-gray-600 whitespace-nowrap">
150:                             {exp.startDate} - {exp.current ? 'Present' : exp.endDate}
151:                           </span>
152:                         </div>
153:                         {exp.achievements.length > 0 && (
154:                           <ul className="list-disc list-inside space-y-1 text-gray-700 text-sm">
155:                             {exp.achievements.map((achievement, j) => (
156:                               <li key={j}>{achievement}</li>
157:                             ))}
158:                           </ul>
159:                         )}
160:                       </div>
161:                     ))}
162:                   </div>
163:                 </div>
164:               )}
165: 
166:               {/* Education */}
167:               {resume.education.length > 0 && (
168:                 <div>
169:                   <h2 className="text-xl font-bold text-foreground border-b-2 border-blue-600 pb-2 mb-3">
170:                     Education
171:                   </h2>
172:                   <div className="space-y-3">
173:                     {resume.education.map((edu, i) => (
174:                       <div key={i}>
175:                         <div className="flex justify-between items-start">
176:                           <div>
177:                             <h3 className="font-bold text-foreground">{edu.degree} in {edu.field}</h3>
178:                             <p className="text-gray-700">{edu.institution}</p>
179:                           </div>
180:                           <span className="text-sm text-gray-600">{edu.graduationDate}</span>
181:                         </div>
182:                       </div>
183:                     ))}
184:                   </div>
185:                 </div>
186:               )}
187: 
188:               {/* Skills */}
189:               {(resume.skills.technical.length > 0 || resume.skills.soft.length > 0) && (
190:                 <div>
191:                   <h2 className="text-xl font-bold text-foreground border-b-2 border-blue-600 pb-2 mb-3">
192:                     Skills
193:                   </h2>
194:                   {resume.skills.technical.length > 0 && (
195:                     <div className="mb-2">
196:                       <span className="font-semibold text-foreground">Technical: </span>
197:                       <span className="text-gray-700">{resume.skills.technical.join(' • ')}</span>
198:                     </div>
199:                   )}
200:                   {resume.skills.soft.length > 0 && (
201:                     <div>
202:                       <span className="font-semibold text-foreground">Soft Skills: </span>
203:                       <span className="text-gray-700">{resume.skills.soft.join(' • ')}</span>
204:                     </div>
205:                   )}
206:                 </div>
207:               )}
208:             </div>
209:           )}
210: 
211:           {/* Empty State */}
212:           {!resume.personalInfo.fullName && (
213:             <div className="flex items-center justify-center h-full text-center text-gray-400">
214:               <div>
215:                 <Eye className="w-16 h-16 mx-auto mb-4 opacity-50" />
216:                 <p className="text-lg">Your resume preview will appear here</p>
217:                 <p className="text-sm">Start filling in your information →</p>
218:               </div>
219:             </div>
220:           )}
221:         </div>
222:       </div>
223:     </div>
224:   )
225: }
</file>

<file path="src/components/resume-builder/section-order.tsx">
  1: 'use client'
  2: 
  3: import { useState } from 'react'
  4: import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  5: import { Button } from '@/components/ui/button'
  6: import { GripVertical, ChevronUp, ChevronDown, Eye, EyeOff } from 'lucide-react'
  7: 
  8: interface Section {
  9:   id: string
 10:   label: string
 11:   icon: string
 12:   visible: boolean
 13: }
 14: 
 15: interface SectionOrderProps {
 16:   sections: Section[]
 17:   onReorder: (sections: Section[]) => void
 18: }
 19: 
 20: export function SectionOrder({ sections: initialSections, onReorder }: SectionOrderProps) {
 21:   const [sections, setSections] = useState<Section[]>(initialSections)
 22:   const [draggedIndex, setDraggedIndex] = useState<number | null>(null)
 23: 
 24:   const moveSection = (fromIndex: number, toIndex: number) => {
 25:     const newSections = [...sections]
 26:     const [movedSection] = newSections.splice(fromIndex, 1)
 27:     newSections.splice(toIndex, 0, movedSection)
 28:     setSections(newSections)
 29:     onReorder(newSections)
 30:   }
 31: 
 32:   const moveUp = (index: number) => {
 33:     if (index > 0) {
 34:       moveSection(index, index - 1)
 35:     }
 36:   }
 37: 
 38:   const moveDown = (index: number) => {
 39:     if (index < sections.length - 1) {
 40:       moveSection(index, index + 1)
 41:     }
 42:   }
 43: 
 44:   const toggleVisibility = (index: number) => {
 45:     const newSections = [...sections]
 46:     newSections[index].visible = !newSections[index].visible
 47:     setSections(newSections)
 48:     onReorder(newSections)
 49:   }
 50: 
 51:   const handleDragStart = (index: number) => {
 52:     setDraggedIndex(index)
 53:   }
 54: 
 55:   const handleDragOver = (e: React.DragEvent, index: number) => {
 56:     e.preventDefault()
 57:     if (draggedIndex !== null && draggedIndex !== index) {
 58:       moveSection(draggedIndex, index)
 59:       setDraggedIndex(index)
 60:     }
 61:   }
 62: 
 63:   const handleDragEnd = () => {
 64:     setDraggedIndex(null)
 65:   }
 66: 
 67:   return (
 68:     <Card>
 69:       <CardHeader>
 70:         <CardTitle className="text-lg">Section Order</CardTitle>
 71:         <p className="text-sm text-muted-foreground">
 72:           Drag to reorder sections or use arrows
 73:         </p>
 74:       </CardHeader>
 75:       <CardContent>
 76:         <div className="space-y-2">
 77:           {sections.map((section, index) => (
 78:             <div
 79:               key={section.id}
 80:               draggable
 81:               onDragStart={() => handleDragStart(index)}
 82:               onDragOver={(e) => handleDragOver(e, index)}
 83:               onDragEnd={handleDragEnd}
 84:               className={`flex items-center gap-2 p-3 rounded-lg border-2 transition-all ${
 85:                 draggedIndex === index
 86:                   ? 'border-blue-500 bg-blue-50 dark:bg-blue-950/30 opacity-50'
 87:                   : section.visible
 88:                   ? 'border-border bg-card hover:bg-muted/50'
 89:                   : 'border-dashed border-muted-foreground/30 bg-muted/30'
 90:               }`}
 91:             >
 92:               {/* Drag Handle */}
 93:               <div className="cursor-grab active:cursor-grabbing">
 94:                 <GripVertical className="w-5 h-5 text-muted-foreground" />
 95:               </div>
 96: 
 97:               {/* Section Info */}
 98:               <div className="flex-1 flex items-center gap-2">
 99:                 <span className="text-lg">{section.icon}</span>
100:                 <span className={`text-sm font-medium ${
101:                   section.visible ? 'text-foreground' : 'text-muted-foreground'
102:                 }`}>
103:                   {section.label}
104:                 </span>
105:               </div>
106: 
107:               {/* Controls */}
108:               <div className="flex items-center gap-1">
109:                 {/* Visibility Toggle */}
110:                 <Button
111:                   variant="ghost"
112:                   size="sm"
113:                   onClick={() => toggleVisibility(index)}
114:                   className="h-8 w-8 p-0"
115:                 >
116:                   {section.visible ? (
117:                     <Eye className="w-4 h-4" />
118:                   ) : (
119:                     <EyeOff className="w-4 h-4 text-muted-foreground" />
120:                   )}
121:                 </Button>
122: 
123:                 {/* Move Up */}
124:                 <Button
125:                   variant="ghost"
126:                   size="sm"
127:                   onClick={() => moveUp(index)}
128:                   disabled={index === 0}
129:                   className="h-8 w-8 p-0"
130:                 >
131:                   <ChevronUp className="w-4 h-4" />
132:                 </Button>
133: 
134:                 {/* Move Down */}
135:                 <Button
136:                   variant="ghost"
137:                   size="sm"
138:                   onClick={() => moveDown(index)}
139:                   disabled={index === sections.length - 1}
140:                   className="h-8 w-8 p-0"
141:                 >
142:                   <ChevronDown className="w-4 h-4" />
143:                 </Button>
144:               </div>
145:             </div>
146:           ))}
147:         </div>
148: 
149:         <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
150:           <p className="text-xs text-blue-800 dark:text-blue-300">
151:             <strong>💡 Tip:</strong> Put your strongest sections first. Most recruiters spend only 6 seconds on initial resume review!
152:           </p>
153:         </div>
154:       </CardContent>
155:     </Card>
156:   )
157: }
</file>

<file path="src/components/skeleton-loader.tsx">
  1: /**
  2:  * Skeleton Loader Component
  3:  * Reusable loading skeleton for AI generation states
  4:  */
  5: 
  6: 'use client'
  7: 
  8: import { cn } from '@/lib/utils'
  9: 
 10: export interface SkeletonLoaderProps {
 11:   lines?: number
 12:   className?: string
 13:   variant?: 'default' | 'card' | 'text'
 14: }
 15: 
 16: export function SkeletonLoader({ 
 17:   lines = 3, 
 18:   className,
 19:   variant = 'default'
 20: }: SkeletonLoaderProps) {
 21:   if (variant === 'card') {
 22:     return (
 23:       <div className={cn("animate-pulse space-y-4", className)}>
 24:         <div className="h-48 bg-gray-200 dark:bg-gray-700 rounded-xl"></div>
 25:         <div className="space-y-2">
 26:           <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
 27:           <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
 28:         </div>
 29:       </div>
 30:     )
 31:   }
 32: 
 33:   if (variant === 'text') {
 34:     return (
 35:       <div className={cn("animate-pulse space-y-3", className)}>
 36:         {Array.from({ length: lines }).map((_, i) => (
 37:           <div 
 38:             key={i} 
 39:             className="h-4 bg-gray-200 dark:bg-gray-700 rounded"
 40:             style={{ width: `${Math.random() * 30 + 70}%` }}
 41:           ></div>
 42:         ))}
 43:       </div>
 44:     )
 45:   }
 46: 
 47:   return (
 48:     <div className={cn("animate-pulse space-y-3", className)}>
 49:       {Array.from({ length: lines }).map((_, i) => (
 50:         <div key={i} className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
 51:       ))}
 52:     </div>
 53:   )
 54: }
 55: 
 56: /**
 57:  * Resume Skeleton - for resume generation
 58:  */
 59: export function ResumeSkeleton() {
 60:   return (
 61:     <div className="animate-pulse space-y-6 p-6 bg-card rounded-xl border">
 62:       {/* Header */}
 63:       <div className="space-y-2">
 64:         <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3"></div>
 65:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
 66:       </div>
 67:       
 68:       {/* Sections */}
 69:       {[1, 2, 3].map((section) => (
 70:         <div key={section} className="space-y-3">
 71:           <div className="h-6 bg-gray-300 dark:bg-gray-600 rounded w-1/4"></div>
 72:           <div className="space-y-2">
 73:             <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
 74:             <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
 75:             <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-4/6"></div>
 76:           </div>
 77:         </div>
 78:       ))}
 79:     </div>
 80:   )
 81: }
 82: 
 83: /**
 84:  * Cover Letter Skeleton - for cover letter generation
 85:  */
 86: export function CoverLetterSkeleton() {
 87:   return (
 88:     <div className="animate-pulse space-y-4 p-6 bg-card rounded-xl border">
 89:       {/* Header */}
 90:       <div className="space-y-2">
 91:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
 92:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/3"></div>
 93:       </div>
 94:       
 95:       {/* Paragraphs */}
 96:       <div className="space-y-4 mt-6">
 97:         {[1, 2, 3].map((para) => (
 98:           <div key={para} className="space-y-2">
 99:             <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
100:             <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
101:             <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
102:           </div>
103:         ))}
104:       </div>
105:       
106:       {/* Signature */}
107:       <div className="space-y-2 mt-6">
108:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/6"></div>
109:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
110:       </div>
111:     </div>
112:   )
113: }
114: 
115: /**
116:  * Email Skeleton - for email generation
117:  */
118: export function EmailSkeleton() {
119:   return (
120:     <div className="animate-pulse space-y-4 p-6 bg-card rounded-xl border">
121:       {/* Subject */}
122:       <div className="space-y-2">
123:         <div className="h-3 bg-gray-300 dark:bg-gray-600 rounded w-16"></div>
124:         <div className="h-5 bg-gray-200 dark:bg-gray-700 rounded w-2/3"></div>
125:       </div>
126:       
127:       {/* Body */}
128:       <div className="space-y-3 mt-4">
129:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
130:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
131:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-4/5"></div>
132:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
133:         <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
134:       </div>
135:     </div>
136:   )
137: }
138: 
139: /**
140:  * Job Analysis Skeleton - for job analysis
141:  */
142: export function JobAnalysisSkeleton() {
143:   return (
144:     <div className="animate-pulse space-y-6">
145:       {/* Match Score */}
146:       <div className="bg-card rounded-xl border p-6">
147:         <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-4"></div>
148:         <div className="h-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
149:       </div>
150:       
151:       {/* Skills */}
152:       <div className="bg-card rounded-xl border p-6">
153:         <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-4"></div>
154:         <div className="flex flex-wrap gap-2">
155:           {[1, 2, 3, 4, 5, 6].map((i) => (
156:             <div key={i} className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-20"></div>
157:           ))}
158:         </div>
159:       </div>
160:       
161:       {/* Recommendations */}
162:       <div className="bg-card rounded-xl border p-6">
163:         <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-4"></div>
164:         <div className="space-y-3">
165:           {[1, 2, 3].map((i) => (
166:             <div key={i} className="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
167:           ))}
168:         </div>
169:       </div>
170:     </div>
171:   )
172: }
173: 
174: /**
175:  * Job Card Skeleton - for job search loading
176:  */
177: export function JobCardSkeleton() {
178:   return (
179:     <div className="gradient-border-card animate-pulse">
180:       <div className="p-6 space-y-4">
181:         {/* Company & Title */}
182:         <div className="space-y-3">
183:           <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
184:           <div className="h-5 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
185:         </div>
186:         
187:         {/* Location & Salary */}
188:         <div className="flex gap-4">
189:           <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-32"></div>
190:           <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
191:         </div>
192:         
193:         {/* Skills */}
194:         <div className="flex flex-wrap gap-2">
195:           {[1, 2, 3, 4].map((i) => (
196:             <div key={i} className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-16"></div>
197:           ))}
198:         </div>
199:         
200:         {/* Match Score */}
201:         <div className="flex items-center gap-2">
202:           <div className="h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded-full"></div>
203:           <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
204:         </div>
205:         
206:         {/* Button */}
207:         <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded-lg w-full"></div>
208:       </div>
209:     </div>
210:   )
211: }
</file>

<file path="src/components/stats-section.tsx">
 1: 'use client'
 2: 
 3: import { Card, CardContent } from '@/components/ui/card'
 4: 
 5: const stats = [
 6:   {
 7:     number: '10,000+',
 8:     label: 'Job Seekers',
 9:     description: 'Active users landing jobs',
10:   },
11:   {
12:     number: '85%',
13:     label: 'Success Rate',
14:     description: 'Users get interviews within 30 days',
15:   },
16:   {
17:     number: '50+',
18:     label: 'Hours Saved',
19:     description: 'Per job application on average',
20:   },
21:   {
22:     number: '500+',
23:     label: 'Companies',
24:     description: 'In our research database',
25:   },
26: ]
27: 
28: export function StatsSection() {
29:   return (
30:     <section className="py-24 bg-gray-50">
31:       <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
32:         <div className="mx-auto max-w-3xl text-center">
33:           <h2 className="text-3xl font-bold tracking-tight text-foreground sm:text-4xl">
34:             Trusted by job seekers worldwide
35:           </h2>
36:           <p className="mt-4 text-lg text-gray-600">
37:             Join thousands of professionals who've transformed their job search with Career Lever AI.
38:           </p>
39:         </div>
40: 
41:         <div className="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-8 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-4">
42:           {stats.map((stat, index) => (
43:             <Card key={index} className="text-center border-0 shadow-lg">
44:               <CardContent className="pt-8 pb-8">
45:                 <div className="text-4xl font-bold text-blue-600 sm:text-5xl">
46:                   {stat.number}
47:                 </div>
48:                 <div className="mt-4 text-lg font-semibold text-foreground">
49:                   {stat.label}
50:                 </div>
51:                 <div className="mt-2 text-sm text-gray-600">
52:                   {stat.description}
53:                 </div>
54:               </CardContent>
55:             </Card>
56:           ))}
57:         </div>
58: 
59:         {/* Testimonial */}
60:         <div className="mx-auto mt-16 max-w-3xl text-center">
61:           <blockquote className="text-lg font-medium text-foreground">
62:             "Career Lever AI completely transformed my job search. I went from getting no responses to having multiple interviews within two weeks. The AI resume customization is incredible!"
63:           </blockquote>
64:           <div className="mt-6">
65:             <div className="font-semibold text-foreground">Sarah Johnson</div>
66:             <div className="text-sm text-gray-600">Software Engineer at Google</div>
67:           </div>
68:         </div>
69:       </div>
70:     </section>
71:   )
72: }
</file>

<file path="src/components/ui/dropdown-menu.tsx">
  1: import * as React from "react"
  2: import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
  3: import { Check, ChevronRight, Circle } from "lucide-react"
  4: 
  5: import { cn } from "@/lib/utils"
  6: 
  7: const DropdownMenu = DropdownMenuPrimitive.Root
  8: 
  9: const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
 10: 
 11: const DropdownMenuGroup = DropdownMenuPrimitive.Group
 12: 
 13: const DropdownMenuPortal = DropdownMenuPrimitive.Portal
 14: 
 15: const DropdownMenuSub = DropdownMenuPrimitive.Sub
 16: 
 17: const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup
 18: 
 19: const DropdownMenuSubTrigger = React.forwardRef<
 20:   React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
 21:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
 22:     inset?: boolean
 23:   }
 24: >(({ className, inset, children, ...props }, ref) => (
 25:   <DropdownMenuPrimitive.SubTrigger
 26:     ref={ref}
 27:     className={cn(
 28:       "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
 29:       inset && "pl-8",
 30:       className
 31:     )}
 32:     {...props}
 33:   >
 34:     {children}
 35:     <ChevronRight className="ml-auto h-4 w-4" />
 36:   </DropdownMenuPrimitive.SubTrigger>
 37: ))
 38: DropdownMenuSubTrigger.displayName =
 39:   DropdownMenuPrimitive.SubTrigger.displayName
 40: 
 41: const DropdownMenuSubContent = React.forwardRef<
 42:   React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
 43:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
 44: >(({ className, ...props }, ref) => (
 45:   <DropdownMenuPrimitive.SubContent
 46:     ref={ref}
 47:     className={cn(
 48:       "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
 49:       className
 50:     )}
 51:     {...props}
 52:   />
 53: ))
 54: DropdownMenuSubContent.displayName =
 55:   DropdownMenuPrimitive.SubContent.displayName
 56: 
 57: const DropdownMenuContent = React.forwardRef<
 58:   React.ElementRef<typeof DropdownMenuPrimitive.Content>,
 59:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
 60: >(({ className, sideOffset = 4, ...props }, ref) => (
 61:   <DropdownMenuPrimitive.Portal>
 62:     <DropdownMenuPrimitive.Content
 63:       ref={ref}
 64:       sideOffset={sideOffset}
 65:       className={cn(
 66:         "z-50 min-w-[8rem] max-w-[calc(100vw-2rem)] max-h-[calc(100vh-4rem)] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=bottom]:slide-in-from-top-2 data-[state=left]:slide-in-from-right-2 data-[state=right]:slide-in-from-left-2 data-[state=top]:slide-in-from-bottom-2",
 67:         className
 68:       )}
 69:       {...props}
 70:     />
 71:   </DropdownMenuPrimitive.Portal>
 72: ))
 73: DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName
 74: 
 75: const DropdownMenuItem = React.forwardRef<
 76:   React.ElementRef<typeof DropdownMenuPrimitive.Item>,
 77:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
 78:     inset?: boolean
 79:   }
 80: >(({ className, inset, ...props }, ref) => (
 81:   <DropdownMenuPrimitive.Item
 82:     ref={ref}
 83:     className={cn(
 84:       "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
 85:       inset && "pl-8",
 86:       className
 87:     )}
 88:     {...props}
 89:   />
 90: ))
 91: DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName
 92: 
 93: const DropdownMenuCheckboxItem = React.forwardRef<
 94:   React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
 95:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
 96: >(({ className, children, checked, ...props }, ref) => (
 97:   <DropdownMenuPrimitive.CheckboxItem
 98:     ref={ref}
 99:     className={cn(
100:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
101:       className
102:     )}
103:     checked={checked}
104:     {...props}
105:   >
106:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
107:       <DropdownMenuPrimitive.ItemIndicator>
108:         <Check className="h-4 w-4" />
109:       </DropdownMenuPrimitive.ItemIndicator>
110:     </span>
111:     {children}
112:   </DropdownMenuPrimitive.CheckboxItem>
113: ))
114: DropdownMenuCheckboxItem.displayName =
115:   DropdownMenuPrimitive.CheckboxItem.displayName
116: 
117: const DropdownMenuRadioItem = React.forwardRef<
118:   React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
119:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
120: >(({ className, children, ...props }, ref) => (
121:   <DropdownMenuPrimitive.RadioItem
122:     ref={ref}
123:     className={cn(
124:       "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
125:       className
126:     )}
127:     {...props}
128:   >
129:     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
130:       <DropdownMenuPrimitive.ItemIndicator>
131:         <Circle className="h-2 w-2 fill-current" />
132:       </DropdownMenuPrimitive.ItemIndicator>
133:     </span>
134:     {children}
135:   </DropdownMenuPrimitive.RadioItem>
136: ))
137: DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName
138: 
139: const DropdownMenuLabel = React.forwardRef<
140:   React.ElementRef<typeof DropdownMenuPrimitive.Label>,
141:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
142:     inset?: boolean
143:   }
144: >(({ className, inset, ...props }, ref) => (
145:   <DropdownMenuPrimitive.Label
146:     ref={ref}
147:     className={cn(
148:       "px-2 py-1.5 text-sm font-semibold",
149:       inset && "pl-8",
150:       className
151:     )}
152:     {...props}
153:   />
154: ))
155: DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName
156: 
157: const DropdownMenuSeparator = React.forwardRef<
158:   React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
159:   React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
160: >(({ className, ...props }, ref) => (
161:   <DropdownMenuPrimitive.Separator
162:     ref={ref}
163:     className={cn("-mx-1 my-1 h-px bg-muted", className)}
164:     {...props}
165:   />
166: ))
167: DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName
168: 
169: const DropdownMenuShortcut = ({
170:   className,
171:   ...props
172: }: React.HTMLAttributes<HTMLSpanElement>) => {
173:   return (
174:     <span
175:       className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
176:       {...props}
177:     />
178:   )
179: }
180: DropdownMenuShortcut.displayName = "DropdownMenuShortcut"
181: 
182: export {
183:   DropdownMenu,
184:   DropdownMenuTrigger,
185:   DropdownMenuContent,
186:   DropdownMenuItem,
187:   DropdownMenuCheckboxItem,
188:   DropdownMenuRadioItem,
189:   DropdownMenuLabel,
190:   DropdownMenuSeparator,
191:   DropdownMenuShortcut,
192:   DropdownMenuGroup,
193:   DropdownMenuPortal,
194:   DropdownMenuSub,
195:   DropdownMenuSubContent,
196:   DropdownMenuSubTrigger,
197:   DropdownMenuRadioGroup,
198: }
</file>

<file path="src/lib/agents/agent-orchestrator.ts">
  1: /**
  2:  * AGENT ORCHESTRATOR
  3:  * Manages all agents and routes tasks with parallel execution
  4:  */
  5: 
  6: import { JobDiscoveryAgent } from './job-discovery-agent'
  7: import { ContactResearchAgent } from './contact-research-agent'
  8: import { AgentTask, AgentResult } from './base-agent'
  9: 
 10: export class AgentOrchestrator {
 11:   private jobAgent: JobDiscoveryAgent
 12:   private contactAgent: ContactResearchAgent
 13: 
 14:   constructor() {
 15:     console.log('🤖 [ORCHESTRATOR] Initializing agent system...')
 16:     this.jobAgent = new JobDiscoveryAgent()
 17:     this.contactAgent = new ContactResearchAgent()
 18:     console.log('✅ [ORCHESTRATOR] All agents ready')
 19:   }
 20: 
 21:   async executeTask(task: AgentTask): Promise<AgentResult> {
 22:     console.log(`🎯 [ORCHESTRATOR] Routing task: ${task.type} (priority: ${task.priority})`)
 23:     console.log(`📋 [ORCHESTRATOR] Task input:`, task.input)
 24: 
 25:     const started = Date.now()
 26: 
 27:     try {
 28:       let result: AgentResult
 29: 
 30:       switch (task.type) {
 31:         case 'job_search':
 32:           result = await this.jobAgent.execute(task)
 33:           break
 34:         
 35:         case 'contact_research':
 36:           result = await this.contactAgent.execute(task)
 37:           break
 38:         
 39:         default:
 40:           throw new Error(`Unknown task type: ${task.type}`)
 41:       }
 42: 
 43:       const duration = Date.now() - started
 44:       console.log(`✅ [ORCHESTRATOR] Task completed in ${duration}ms`)
 45:       console.log(`📊 [ORCHESTRATOR] Success: ${result.success}, Confidence: ${result.confidence}`)
 46: 
 47:       return result
 48:     } catch (error) {
 49:       const duration = Date.now() - started
 50:       console.error(`❌ [ORCHESTRATOR] Task failed after ${duration}ms:`, error)
 51:       
 52:       return {
 53:         success: false,
 54:         data: null,
 55:         reasoning: `Task failed: ${(error as Error).message}`,
 56:         confidence: 0,
 57:         sources: [],
 58:         duration
 59:       }
 60:     }
 61:   }
 62: 
 63:   async executeMultiple(tasks: AgentTask[]): Promise<AgentResult[]> {
 64:     console.log(`🚀 [ORCHESTRATOR] Executing ${tasks.length} tasks in parallel...`)
 65:     
 66:     const started = Date.now()
 67:     
 68:     // Execute tasks in parallel
 69:     const results = await Promise.all(
 70:       tasks.map(task => this.executeTask(task))
 71:     )
 72:     
 73:     const duration = Date.now() - started
 74:     const successful = results.filter(r => r.success).length
 75:     
 76:     console.log(`✅ [ORCHESTRATOR] Parallel execution complete in ${duration}ms`)
 77:     console.log(`📊 [ORCHESTRATOR] ${successful}/${tasks.length} tasks succeeded`)
 78:     
 79:     return results
 80:   }
 81: 
 82:   async executeSequential(tasks: AgentTask[]): Promise<AgentResult[]> {
 83:     console.log(`🔄 [ORCHESTRATOR] Executing ${tasks.length} tasks sequentially...`)
 84:     
 85:     const started = Date.now()
 86:     const results: AgentResult[] = []
 87:     
 88:     for (const task of tasks) {
 89:       const result = await this.executeTask(task)
 90:       results.push(result)
 91:       
 92:       // Stop if critical task fails
 93:       if (task.priority === 1 && !result.success) {
 94:         console.warn(`⚠️ [ORCHESTRATOR] Critical task failed, stopping sequence`)
 95:         break
 96:       }
 97:     }
 98:     
 99:     const duration = Date.now() - started
100:     const successful = results.filter(r => r.success).length
101:     
102:     console.log(`✅ [ORCHESTRATOR] Sequential execution complete in ${duration}ms`)
103:     console.log(`📊 [ORCHESTRATOR] ${successful}/${results.length} tasks succeeded`)
104:     
105:     return results
106:   }
107: 
108:   generateTaskId(): string {
109:     return `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
110:   }
111: }
</file>

<file path="src/lib/agents/base-agent.ts">
 1: /**
 2:  * BASE AGENT CLASS
 3:  * All Career Lever agents inherit from this
 4:  */
 5: 
 6: import { PerplexityService } from '../perplexity-service'
 7: 
 8: export interface AgentTask {
 9:   id: string
10:   type: 'job_search' | 'contact_research' | 'company_intel' | 'resume_optimize' | 'outreach'
11:   input: Record<string, any>
12:   priority: 1 | 2 | 3
13: }
14: 
15: export interface AgentResult<T = any> {
16:   success: boolean
17:   data: T
18:   reasoning: string // Why the agent made its decisions
19:   confidence: number // 0-1
20:   sources: Array<{ title: string; url: string }>
21:   duration: number
22:   method?: string
23: }
24: 
25: export abstract class BaseAgent {
26:   protected perplexity: PerplexityService
27:   protected name: string
28:   
29:   constructor(name: string) {
30:     this.name = name
31:     this.perplexity = new PerplexityService()
32:   }
33: 
34:   abstract execute(task: AgentTask): Promise<AgentResult>
35: 
36:   protected async think(prompt: string, options?: { temperature?: number; maxTokens?: number; model?: string }): Promise<string> {
37:     console.log(`🤖 [${this.name}] Starting autonomous thinking...`)
38:     
39:     // Agent's "thinking" process using Perplexity with web_search
40:     const systemPrompt = `You are ${this.name}, an autonomous AI agent with web search capabilities.
41: 
42: CRITICAL INSTRUCTIONS:
43: 1. You MUST use the web_search tool to find real-time information
44: 2. Visit actual URLs and extract real data
45: 3. Do NOT make up information
46: 4. Provide detailed reasoning for your decisions
47: 5. Return structured JSON data when requested
48: 6. If you cannot find information, say so explicitly
49: 
50: You have access to:
51: - web_search: Search the internet and visit URLs
52: - Real-time data from job boards, LinkedIn, company websites
53: - Ability to extract and structure information`
54: 
55:     const response = await this.perplexity.makeRequest(
56:       systemPrompt,
57:       prompt,
58:       { 
59:         temperature: options?.temperature ?? 0.2, // Low temp = more factual
60:         maxTokens: options?.maxTokens ?? 8000,
61:         model: options?.model ?? 'sonar-pro'
62:       }
63:     )
64:     
65:     console.log(`✅ [${this.name}] Thinking complete (${response.content.length} chars)`)
66:     return response.content
67:   }
68: 
69:   protected log(message: string, level: 'info' | 'warn' | 'error' = 'info'): void {
70:     const emoji = level === 'error' ? '❌' : level === 'warn' ? '⚠️' : '📋'
71:     console.log(`${emoji} [${this.name.toUpperCase()}] ${message}`)
72:   }
73: 
74:   protected generateId(): string {
75:     return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
76:   }
77: }
</file>

<file path="src/lib/agents/contact-research-agent.ts">
  1: /**
  2:  * CONTACT RESEARCH AGENT
  3:  * Finds verified hiring managers with real emails using Perplexity + Hunter.io
  4:  */
  5: 
  6: import { BaseAgent, AgentTask, AgentResult } from './base-agent'
  7: import { COMPREHENSIVE_CONTACT_SOURCES, getConfiguredContactSources } from '../comprehensive-data-sources'
  8: 
  9: export interface HiringContact {
 10:   name: string
 11:   title: string
 12:   department: string
 13:   email?: string
 14:   linkedinUrl?: string
 15:   source: string
 16:   confidence: number
 17:   verified?: boolean
 18: }
 19: 
 20: export class ContactResearchAgent extends BaseAgent {
 21:   constructor() {
 22:     super('Contact Research Agent')
 23:   }
 24: 
 25:   async execute(task: AgentTask): Promise<AgentResult<HiringContact[]>> {
 26:     const { companyName, companyDomain } = task.input
 27:     const started = Date.now()
 28: 
 29:     this.log(`🔍 Researching hiring contacts at ${companyName}...`)
 30: 
 31:     // Get configured contact sources (free + those with API keys)
 32:     const sources = getConfiguredContactSources()
 33:     const searches = sources.map(s => ({
 34:       name: s.name,
 35:       pattern: s.searchPattern(companyName),
 36:       reliability: s.reliability
 37:     }))
 38: 
 39:     this.log(`📊 Using ${searches.length} contact sources`)
 40: 
 41:     // Try Perplexity agent first
 42:     try {
 43:       const perplexityContacts = await this.searchWithPerplexity(companyName, companyDomain, searches)
 44:       
 45:       // Verify emails with Hunter.io if available
 46:       const verified = await this.verifyWithHunter(perplexityContacts, companyDomain)
 47:       
 48:       if (verified.length > 0) {
 49:         this.log(`✅ Found ${verified.length} verified contacts`)
 50:         return {
 51:           success: true,
 52:           data: verified,
 53:           reasoning: 'Perplexity agent found contacts via LinkedIn and company website, verified with Hunter.io',
 54:           confidence: verified.length > 0 ? 0.85 : 0,
 55:           sources: verified.map(c => ({ title: c.name, url: c.linkedinUrl || '' })),
 56:           duration: Date.now() - started,
 57:           method: 'perplexity+hunter'
 58:         }
 59:       }
 60:       
 61:       this.log(`⚠️ No verified contacts found`, 'warn')
 62:     } catch (error) {
 63:       this.log(`❌ Contact research failed: ${(error as Error).message}`, 'error')
 64:     }
 65: 
 66:     return {
 67:       success: false,
 68:       data: [],
 69:       reasoning: 'Unable to find verified hiring contacts for this company',
 70:       confidence: 0,
 71:       sources: [],
 72:       duration: Date.now() - started,
 73:       method: 'none'
 74:     }
 75:   }
 76: 
 77:   private async searchWithPerplexity(
 78:     companyName: string,
 79:     companyDomain: string | undefined,
 80:     searches: Array<{ name: string; pattern: string; reliability: number }>
 81:   ): Promise<HiringContact[]> {
 82:     const domain = companyDomain || `${companyName.toLowerCase().replace(/\s+/g, '')}.com`
 83:     
 84:     const prompt = `🔴 AUTONOMOUS CONTACT RESEARCH MISSION 🔴
 85: 
 86: TASK: Find VERIFIED hiring managers/recruiters at "${companyName}"
 87: 
 88: MANDATORY STEPS:
 89: 1. **USE web_search tool** to perform these searches:
 90: ${searches.map((s, i) => `   ${i+1}. ${s.name}: "${s.pattern}"`).join('\n')}
 91: 
 92: 2. For EACH result:
 93:    - VISIT the LinkedIn profile or company page
 94:    - EXTRACT: Full Name, Job Title, Department
 95:    - FIND email ONLY if visible on LinkedIn or company website
 96:    - VERIFY email domain matches company (${domain})
 97:    - GET LinkedIn profile URL
 98: 
 99: 3. ALSO SEARCH:
100:    - Visit ${companyName} official website /contact page
101:    - Visit ${companyName} official website /about/team page
102:    - Extract general emails: careers@${domain}, hr@${domain}, jobs@${domain}, recruiting@${domain}
103: 
104: 4. PRIORITIZE:
105:    - Talent Acquisition Managers
106:    - Recruiters
107:    - HR Directors
108:    - Hiring Managers
109:    - People Operations
110: 
111: CRITICAL RULES:
112: ✅ Return ONLY contacts with verified emails OR LinkedIn URLs
113: ✅ NO personal emails (gmail, yahoo, hotmail, outlook)
114: ✅ NO guessed/pattern emails unless explicitly seen on website
115: ✅ Email domain MUST match company domain (${domain})
116: ✅ If ZERO contacts found, return []
117: ✅ Include confidence score (0-1) based on source reliability
118: 
119: OUTPUT FORMAT (strict JSON array):
120: [{
121:   "name": "Real Person Name",
122:   "title": "Talent Acquisition Manager",
123:   "department": "Human Resources",
124:   "email": "verified@${domain}",
125:   "linkedinUrl": "https://linkedin.com/in/real-profile",
126:   "source": "LinkedIn profile",
127:   "confidence": 0.9
128: }]
129: 
130: REASONING: After the JSON, explain:
131: - Which sources you searched
132: - How many contacts you found
133: - How you verified the emails
134: - Any challenges encountered
135: 
136: 🚨 CRITICAL: DO NOT MAKE UP CONTACTS. Return [] if none found.
137: 🚨 CRITICAL: DO NOT GUESS EMAILS. Only include if explicitly found.
138: 🚨 CRITICAL: NO personal email domains (gmail, yahoo, etc).
139: 
140: START YOUR SEARCH NOW using web_search tool!`
141: 
142:     try {
143:       const response = await this.think(prompt, { maxTokens: 6000, temperature: 0.1 })
144:       
145:       // Extract JSON from response
146:       const jsonMatch = response.match(/\[[\s\S]*?\]/)?.[0]
147:       if (!jsonMatch) {
148:         this.log('⚠️ No JSON found in Perplexity response', 'warn')
149:         return []
150:       }
151:       
152:       const contacts = JSON.parse(jsonMatch) as HiringContact[]
153:       
154:       // Validate contacts
155:       const validated = this.validateContacts(contacts, domain)
156:       
157:       this.log(`✅ Validated ${validated.length}/${contacts.length} contacts from Perplexity`)
158:       
159:       return validated
160:     } catch (error) {
161:       this.log(`❌ Perplexity contact search failed: ${(error as Error).message}`, 'error')
162:       return []
163:     }
164:   }
165: 
166:   private validateContacts(contacts: HiringContact[], expectedDomain: string): HiringContact[] {
167:     return contacts.filter(c => {
168:       // Must have either email or LinkedIn URL
169:       if (!c.email && !c.linkedinUrl) {
170:         this.log(`🚫 Rejected contact without email or LinkedIn: ${c.name}`)
171:         return false
172:       }
173:       
174:       // If email exists, validate it
175:       if (c.email) {
176:         const emailDomain = c.email.split('@')[1]?.toLowerCase()
177:         
178:         // Reject personal email domains
179:         const personalDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'live.com', 'icloud.com']
180:         if (personalDomains.includes(emailDomain)) {
181:           this.log(`🚫 Rejected personal email: ${c.email}`)
182:           return false
183:         }
184:         
185:         // Warn if domain doesn't match (but don't reject - might be parent company)
186:         if (!emailDomain.includes(expectedDomain.split('.')[0])) {
187:           this.log(`⚠️ Email domain mismatch: ${c.email} (expected ${expectedDomain})`, 'warn')
188:         }
189:       }
190:       
191:       return true
192:     })
193:   }
194: 
195:   private async verifyWithHunter(contacts: HiringContact[], companyDomain: string | undefined): Promise<HiringContact[]> {
196:     const hunterApiKey = process.env.HUNTER_API_KEY
197:     
198:     if (!hunterApiKey) {
199:       this.log('⚠️ Hunter.io API key not configured, skipping email verification', 'warn')
200:       return contacts
201:     }
202: 
203:     this.log(`🔍 Verifying ${contacts.length} contacts with Hunter.io...`)
204:     
205:     const verified: HiringContact[] = []
206: 
207:     for (const contact of contacts) {
208:       // If no email, try to find one with Hunter
209:       if (!contact.email && companyDomain) {
210:         try {
211:           const hunterEmail = await this.findEmailWithHunter(contact.name, companyDomain, hunterApiKey)
212:           if (hunterEmail) {
213:             this.log(`✅ Hunter.io found email for ${contact.name}: ${hunterEmail}`)
214:             verified.push({
215:               ...contact,
216:               email: hunterEmail,
217:               confidence: 0.85,
218:               verified: true
219:             })
220:             continue
221:           }
222:         } catch (error) {
223:           this.log(`⚠️ Hunter.io lookup failed for ${contact.name}`, 'warn')
224:         }
225:       }
226:       
227:       // If email exists, verify it
228:       if (contact.email) {
229:         try {
230:           const isValid = await this.verifyEmailWithHunter(contact.email, hunterApiKey)
231:           verified.push({
232:             ...contact,
233:             confidence: isValid ? 0.95 : contact.confidence * 0.7,
234:             verified: isValid
235:           })
236:           this.log(`${isValid ? '✅' : '⚠️'} Email ${isValid ? 'verified' : 'unverified'}: ${contact.email}`)
237:         } catch (error) {
238:           // Keep contact even if verification fails
239:           verified.push({
240:             ...contact,
241:             confidence: contact.confidence * 0.8,
242:             verified: false
243:           })
244:         }
245:       } else {
246:         // No email, but has LinkedIn - keep it
247:         verified.push(contact)
248:       }
249:     }
250: 
251:     this.log(`✅ Verification complete: ${verified.length} contacts`)
252:     
253:     return verified
254:   }
255: 
256:   private async findEmailWithHunter(name: string, domain: string, apiKey: string): Promise<string | null> {
257:     try {
258:       const [firstName, ...lastNameParts] = name.split(' ')
259:       const lastName = lastNameParts.join(' ')
260:       
261:       const url = `https://api.hunter.io/v2/email-finder?domain=${domain}&first_name=${encodeURIComponent(firstName)}&last_name=${encodeURIComponent(lastName)}&api_key=${apiKey}`
262:       
263:       const response = await fetch(url)
264:       const data = await response.json() as { data: { email: string; score: number } }
265:       
266:       if (data.data?.email && data.data.score > 70) {
267:         return data.data.email
268:       }
269:       
270:       return null
271:     } catch (error) {
272:       this.log(`❌ Hunter.io email finder error: ${(error as Error).message}`, 'error')
273:       return null
274:     }
275:   }
276: 
277:   private async verifyEmailWithHunter(email: string, apiKey: string): Promise<boolean> {
278:     try {
279:       const url = `https://api.hunter.io/v2/email-verifier?email=${encodeURIComponent(email)}&api_key=${apiKey}`
280:       
281:       const response = await fetch(url)
282:       const data = await response.json() as { data: { result: string; score: number } }
283:       
284:       return data.data.result === 'deliverable' || data.data.score > 70
285:     } catch (error) {
286:       this.log(`❌ Hunter.io email verifier error: ${(error as Error).message}`, 'error')
287:       return false
288:     }
289:   }
290: }
</file>

<file path="src/lib/comprehensive-data-sources.ts">
  1: /**
  2:  * COMPREHENSIVE JOB BOARDS + CONTACT SOURCES
  3:  * Production-ready with all Canadian & Global boards
  4:  */
  5: 
  6: export interface JobBoardSource {
  7:   name: string
  8:   baseUrl: string
  9:   searchUrl: (title: string, location: string) => string
 10:   priority: 1 | 2 | 3 // 1 = highest
 11:   requiresAuth: boolean
 12:   rateLimitPerMin: number
 13:   scrapeSupport: 'easy' | 'medium' | 'hard' // Cheerio difficulty
 14: }
 15: 
 16: export interface ContactSource {
 17:   name: string
 18:   baseUrl: string
 19:   searchPattern: (company: string) => string
 20:   reliability: number // 0-1
 21:   requiresAuth: boolean
 22:   apiKey?: string
 23: }
 24: 
 25: // ========================================
 26: // JOB BOARDS (15+ SOURCES)
 27: // ========================================
 28: 
 29: export const COMPREHENSIVE_JOB_BOARDS: JobBoardSource[] = [
 30:   // TIER 1: Canadian Priority Boards
 31:   {
 32:     name: 'Indeed Canada',
 33:     baseUrl: 'https://ca.indeed.com',
 34:     searchUrl: (title, location) => 
 35:       `https://ca.indeed.com/jobs?q=${encodeURIComponent(title)}&l=${encodeURIComponent(location)}&sort=date&fromage=7`,
 36:     priority: 1,
 37:     requiresAuth: false,
 38:     rateLimitPerMin: 60,
 39:     scrapeSupport: 'easy'
 40:   },
 41:   {
 42:     name: 'LinkedIn Jobs',
 43:     baseUrl: 'https://www.linkedin.com',
 44:     searchUrl: (title, location) => 
 45:       `https://www.linkedin.com/jobs/search?keywords=${encodeURIComponent(title)}&location=${encodeURIComponent(location)}&f_TPR=r86400&sortBy=DD`,
 46:     priority: 1,
 47:     requiresAuth: false,
 48:     rateLimitPerMin: 30,
 49:     scrapeSupport: 'medium'
 50:   },
 51:   {
 52:     name: 'Job Bank Canada',
 53:     baseUrl: 'https://www.jobbank.gc.ca',
 54:     searchUrl: (title, location) => 
 55:       `https://www.jobbank.gc.ca/jobsearch/jobsearch?fjob=${encodeURIComponent(title)}&floc=${encodeURIComponent(location)}&sort=D`,
 56:     priority: 1,
 57:     requiresAuth: false,
 58:     rateLimitPerMin: 60,
 59:     scrapeSupport: 'easy'
 60:   },
 61:   {
 62:     name: 'Workopolis',
 63:     baseUrl: 'https://www.workopolis.com',
 64:     searchUrl: (title, location) => 
 65:       `https://www.workopolis.com/jobsearch/find-jobs?ak=${encodeURIComponent(title)}&l=${encodeURIComponent(location)}`,
 66:     priority: 1,
 67:     requiresAuth: false,
 68:     rateLimitPerMin: 60,
 69:     scrapeSupport: 'easy'
 70:   },
 71:   {
 72:     name: 'Eluta',
 73:     baseUrl: 'https://www.eluta.ca',
 74:     searchUrl: (title, location) => 
 75:       `https://www.eluta.ca/search?q=${encodeURIComponent(title)}&l=${encodeURIComponent(location)}`,
 76:     priority: 2,
 77:     requiresAuth: false,
 78:     rateLimitPerMin: 60,
 79:     scrapeSupport: 'easy'
 80:   },
 81:   {
 82:     name: 'Glassdoor Canada',
 83:     baseUrl: 'https://www.glassdoor.ca',
 84:     searchUrl: (title, location) => 
 85:       `https://www.glassdoor.ca/Job/jobs.htm?sc.keyword=${encodeURIComponent(title)}&locT=C&locKeyword=${encodeURIComponent(location)}`,
 86:     priority: 2,
 87:     requiresAuth: false,
 88:     rateLimitPerMin: 30,
 89:     scrapeSupport: 'medium'
 90:   },
 91:   {
 92:     name: 'Monster Canada',
 93:     baseUrl: 'https://www.monster.ca',
 94:     searchUrl: (title, location) => 
 95:       `https://www.monster.ca/jobs/search?q=${encodeURIComponent(title)}&where=${encodeURIComponent(location)}`,
 96:     priority: 2,
 97:     requiresAuth: false,
 98:     rateLimitPerMin: 60,
 99:     scrapeSupport: 'easy'
100:   },
101:   {
102:     name: 'CareerBeacon',
103:     baseUrl: 'https://www.careerbeacon.com',
104:     searchUrl: (title, location) => 
105:       `https://www.careerbeacon.com/en/search?keywords=${encodeURIComponent(title)}&location=${encodeURIComponent(location)}`,
106:     priority: 2,
107:     requiresAuth: false,
108:     rateLimitPerMin: 60,
109:     scrapeSupport: 'easy'
110:   },
111:   {
112:     name: 'Jobboom',
113:     baseUrl: 'https://www.jobboom.com',
114:     searchUrl: (title, location) => 
115:       `https://www.jobboom.com/en/job-search?keywords=${encodeURIComponent(title)}&location=${encodeURIComponent(location)}`,
116:     priority: 2,
117:     requiresAuth: false,
118:     rateLimitPerMin: 60,
119:     scrapeSupport: 'easy'
120:   },
121:   {
122:     name: 'Communitech Work in Tech',
123:     baseUrl: 'https://www1.communitech.ca',
124:     searchUrl: (title, location) => 
125:       `https://www1.communitech.ca/work-in-tech?search=${encodeURIComponent(title)}&location=${encodeURIComponent(location)}`,
126:     priority: 2,
127:     requiresAuth: false,
128:     rateLimitPerMin: 60,
129:     scrapeSupport: 'easy'
130:   },
131: 
132:   // TIER 2: Tech-Specific Boards
133:   {
134:     name: 'AngelList Talent',
135:     baseUrl: 'https://wellfound.com',
136:     searchUrl: (title, location) => 
137:       `https://wellfound.com/jobs?q=${encodeURIComponent(title)}&l=${encodeURIComponent(location)}`,
138:     priority: 2,
139:     requiresAuth: false,
140:     rateLimitPerMin: 30,
141:     scrapeSupport: 'medium'
142:   },
143:   {
144:     name: 'Dice',
145:     baseUrl: 'https://www.dice.com',
146:     searchUrl: (title, location) => 
147:       `https://www.dice.com/jobs?q=${encodeURIComponent(title)}&location=${encodeURIComponent(location)}&radius=30&radiusUnit=mi&page=1&pageSize=20&language=en`,
148:     priority: 3,
149:     requiresAuth: false,
150:     rateLimitPerMin: 60,
151:     scrapeSupport: 'easy'
152:   },
153:   {
154:     name: 'Stack Overflow Jobs',
155:     baseUrl: 'https://stackoverflow.com/jobs',
156:     searchUrl: (title, location) => 
157:       `https://stackoverflow.com/jobs?q=${encodeURIComponent(title)}&l=${encodeURIComponent(location)}`,
158:     priority: 3,
159:     requiresAuth: false,
160:     rateLimitPerMin: 60,
161:     scrapeSupport: 'medium'
162:   },
163: 
164:   // TIER 3: ATS Direct Searches
165:   {
166:     name: 'Greenhouse Public Boards',
167:     baseUrl: 'https://boards.greenhouse.io',
168:     searchUrl: (title, location) => 
169:       `https://boards.greenhouse.io/embed/job_board?gh_jid=${encodeURIComponent(title)}`,
170:     priority: 3,
171:     requiresAuth: false,
172:     rateLimitPerMin: 120,
173:     scrapeSupport: 'easy'
174:   },
175:   {
176:     name: 'Lever Jobs',
177:     baseUrl: 'https://jobs.lever.co',
178:     searchUrl: (title, location) => 
179:       `https://jobs.lever.co/search?query=${encodeURIComponent(title)}&location=${encodeURIComponent(location)}`,
180:     priority: 3,
181:     requiresAuth: false,
182:     rateLimitPerMin: 120,
183:     scrapeSupport: 'easy'
184:   }
185: ]
186: 
187: // ========================================
188: // CONTACT SOURCES (10+ SOURCES)
189: // ========================================
190: 
191: export const COMPREHENSIVE_CONTACT_SOURCES: ContactSource[] = [
192:   {
193:     name: 'LinkedIn Company Search',
194:     baseUrl: 'https://www.linkedin.com',
195:     searchPattern: (company) => 
196:       `site:linkedin.com/in/ "${company}" (recruiter OR "talent acquisition" OR "human resources" OR "hiring manager")`,
197:     reliability: 0.95,
198:     requiresAuth: false
199:   },
200:   {
201:     name: 'LinkedIn Company Page',
202:     baseUrl: 'https://www.linkedin.com',
203:     searchPattern: (company) => 
204:       `site:linkedin.com/company/${company.toLowerCase().replace(/\s+/g, '-')} people`,
205:     reliability: 0.90,
206:     requiresAuth: false
207:   },
208:   {
209:     name: 'Company Careers Page',
210:     baseUrl: '',
211:     searchPattern: (company) => 
212:       `"${company}" (careers OR jobs OR "join our team") contact email`,
213:     reliability: 0.85,
214:     requiresAuth: false
215:   },
216:   {
217:     name: 'Hunter.io',
218:     baseUrl: 'https://hunter.io',
219:     searchPattern: (company) => 
220:       `${company.toLowerCase().replace(/\s+/g, '')}.com`,
221:     reliability: 0.80,
222:     requiresAuth: true,
223:     apiKey: process.env.HUNTER_API_KEY
224:   },
225:   {
226:     name: 'RocketReach',
227:     baseUrl: 'https://rocketreach.co',
228:     searchPattern: (company) => 
229:       `${company} recruiter`,
230:     reliability: 0.85,
231:     requiresAuth: true,
232:     apiKey: process.env.ROCKETREACH_API_KEY
233:   },
234:   {
235:     name: 'ContactOut',
236:     baseUrl: 'https://contactout.com',
237:     searchPattern: (company) => 
238:       `${company} hiring manager`,
239:     reliability: 0.80,
240:     requiresAuth: true
241:   },
242:   {
243:     name: 'Apollo.io',
244:     baseUrl: 'https://apollo.io',
245:     searchPattern: (company) => 
246:       `${company} talent acquisition`,
247:     reliability: 0.85,
248:     requiresAuth: true,
249:     apiKey: process.env.APOLLO_API_KEY
250:   },
251:   {
252:     name: 'Clearbit',
253:     baseUrl: 'https://clearbit.com',
254:     searchPattern: (company) => 
255:       `${company.toLowerCase().replace(/\s+/g, '')}.com`,
256:     reliability: 0.75,
257:     requiresAuth: true,
258:     apiKey: process.env.CLEARBIT_API_KEY
259:   },
260:   {
261:     name: 'ZoomInfo',
262:     baseUrl: 'https://www.zoominfo.com',
263:     searchPattern: (company) => 
264:       `${company} contacts`,
265:     reliability: 0.90,
266:     requiresAuth: true,
267:     apiKey: process.env.ZOOMINFO_API_KEY
268:   },
269:   {
270:     name: 'Lusha',
271:     baseUrl: 'https://www.lusha.com',
272:     searchPattern: (company) => 
273:       `${company} employees`,
274:     reliability: 0.75,
275:     requiresAuth: true
276:   }
277: ]
278: 
279: // Helper: Get top N job boards by priority
280: export function getTopJobBoards(count: number = 10): JobBoardSource[] {
281:   return COMPREHENSIVE_JOB_BOARDS
282:     .sort((a, b) => a.priority - b.priority)
283:     .slice(0, count)
284: }
285: 
286: // Helper: Get all contact sources (free + paid)
287: export function getAllContactSources(includeAuth: boolean = false): ContactSource[] {
288:   return includeAuth 
289:     ? COMPREHENSIVE_CONTACT_SOURCES 
290:     : COMPREHENSIVE_CONTACT_SOURCES.filter(s => !s.requiresAuth)
291: }
292: 
293: // Helper: Get contact sources with API keys configured
294: export function getConfiguredContactSources(): ContactSource[] {
295:   return COMPREHENSIVE_CONTACT_SOURCES.filter(s => 
296:     !s.requiresAuth || (s.apiKey && s.apiKey.length > 0)
297:   )
298: }
</file>

<file path="src/lib/contact-enrichment.ts">
  1: import { PerplexityIntelligenceService } from './perplexity-intelligence'
  2: 
  3: export interface EnhancedContact {
  4:   // Basic info (from existing hiringContactsV2)
  5:   name: string
  6:   title: string
  7:   department: string
  8:   linkedinUrl?: string
  9:   email?: string
 10:   phone?: string
 11:   
 12:   // PHASE 2: Enhanced data
 13:   verified_email: boolean
 14:   email_confidence: number // 0-100
 15:   alternative_emails: string[]
 16:   decision_maker_score: number // 0-100 (hiring influence)
 17:   
 18:   // Personality insights for communication
 19:   personality_insights: {
 20:     communication_style: 'direct' | 'formal' | 'casual'
 21:     best_contact_days: string[]
 22:     preferred_approach: string
 23:     response_likelihood: number // 0-100
 24:   }
 25:   
 26:   // Discovery metadata
 27:   source: string
 28:   emailType?: 'public' | 'inferred' | 'pattern'
 29:   discoveryMethod?: string
 30: }
 31: 
 32: export class ContactEnrichmentService {
 33:   /**
 34:    * PHASE 2A: Enrich a contact with verification and personality insights
 35:    */
 36:   static async enrichContact(
 37:     contact: any,
 38:     companyDomain: string
 39:   ): Promise<EnhancedContact> {
 40:     try {
 41:       console.log('[CONTACT_ENRICHMENT] Enriching:', contact.name, contact.title)
 42:       
 43:       const [verification, emailVariants, personality, decisionScore] = await Promise.all([
 44:         this.verifyEmail(contact.email, companyDomain, contact.name),
 45:         this.generateEmailVariants(contact.name, companyDomain),
 46:         this.analyzePersonality(contact.linkedinUrl, contact.title),
 47:         this.calculateDecisionMakerScore(contact.title)
 48:       ])
 49:       
 50:       const enriched: EnhancedContact = {
 51:         ...contact,
 52:         verified_email: verification.valid,
 53:         email_confidence: verification.confidence,
 54:         alternative_emails: emailVariants,
 55:         decision_maker_score: decisionScore,
 56:         personality_insights: personality,
 57:         source: contact.source || 'Unknown',
 58:         emailType: contact.emailType,
 59:         discoveryMethod: contact.discoveryMethod
 60:       }
 61:       
 62:       console.log('[CONTACT_ENRICHMENT] Enriched:', {
 63:         name: enriched.name,
 64:         email_confidence: enriched.email_confidence,
 65:         decision_score: enriched.decision_maker_score,
 66:         style: enriched.personality_insights.communication_style
 67:       })
 68:       
 69:       return enriched
 70:       
 71:     } catch (error) {
 72:       console.error('[CONTACT_ENRICHMENT] Error enriching contact:', error)
 73:       // Return basic enrichment if AI fails
 74:       return this.basicEnrichment(contact, companyDomain)
 75:     }
 76:   }
 77:   
 78:   /**
 79:    * Verify email validity using AI pattern analysis
 80:    */
 81:   static async verifyEmail(
 82:     email: string | undefined,
 83:     domain: string,
 84:     name: string
 85:   ): Promise<{ valid: boolean; confidence: number; reasoning: string }> {
 86:     if (!email) {
 87:       return { valid: false, confidence: 0, reasoning: 'No email provided' }
 88:     }
 89:     
 90:     try {
 91:       const prompt = `Verify if this business email is likely valid:
 92:       
 93: EMAIL: ${email}
 94: COMPANY DOMAIN: ${domain}
 95: PERSON NAME: ${name}
 96: 
 97: ANALYSIS CRITERIA:
 98: 1. Does the email match common business patterns? (firstname.lastname, first.last, flast, etc.)
 99: 2. Does the domain match the company domain or a known email service?
100: 3. Is the format professional and consistent with business standards?
101: 4. Does the name in the email align with the person's actual name?
102: 
103: Return JSON:
104: {
105:   "valid": boolean,
106:   "confidence": 0-100,
107:   "reasoning": "brief explanation"
108: }`
109: 
110:       const result = await PerplexityIntelligenceService.customQuery({
111:         systemPrompt: "You verify business email validity and patterns with high accuracy.",
112:         userPrompt: prompt,
113:         temperature: 0.2,
114:         maxTokens: 200
115:       })
116:       
117:       // Parse the JSON response
118:       try {
119:         const parsed = JSON.parse(result.content)
120:         if (typeof parsed === 'object' && parsed !== null && 'valid' in parsed) {
121:           return parsed as { valid: boolean; confidence: number; reasoning: string }
122:         }
123:       } catch {
124:         // JSON parsing failed, continue to fallback
125:       }
126:       
127:       // Fallback if result is unexpected format
128:       return {
129:         valid: false,
130:         confidence: 0,
131:         reasoning: 'Unexpected response format from AI'
132:       }
133:       
134:     } catch (error) {
135:       console.error('[CONTACT_ENRICHMENT] Email verification failed:', error)
136:       // Fallback: basic regex check
137:       const hasValidFormat = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
138:       const matchesDomain = email.includes(domain.replace('www.', ''))
139:       return {
140:         valid: hasValidFormat,
141:         confidence: matchesDomain ? 70 : 40,
142:         reasoning: 'Basic regex validation (AI failed)'
143:       }
144:     }
145:   }
146:   
147:   /**
148:    * Generate alternative email format variations
149:    */
150:   static generateEmailVariants(name: string, domain: string): string[] {
151:     try {
152:       const cleanDomain = domain.replace(/^(https?:\/\/)?(www\.)?/, '').split('/')[0]
153:       const nameParts = name.toLowerCase().replace(/[^a-z\s]/g, '').split(/\s+/)
154:       
155:       if (nameParts.length < 2) {
156:         return [`${nameParts[0]}@${cleanDomain}`]
157:       }
158:       
159:       const [firstName, ...lastNameParts] = nameParts
160:       const lastName = lastNameParts.join('')
161:       const firstInitial = firstName[0]
162:       const lastInitial = lastName[0]
163:       
164:       return [
165:         `${firstName}.${lastName}@${cleanDomain}`,
166:         `${firstName}${lastName}@${cleanDomain}`,
167:         `${firstInitial}${lastName}@${cleanDomain}`,
168:         `${firstName}_${lastName}@${cleanDomain}`,
169:         `${firstName}@${cleanDomain}`,
170:         `${firstInitial}.${lastName}@${cleanDomain}`,
171:         `${firstName}${lastInitial}@${cleanDomain}`
172:       ].filter((email, index, self) => self.indexOf(email) === index) // Dedupe
173:       
174:     } catch (error) {
175:       console.error('[CONTACT_ENRICHMENT] Email variant generation failed:', error)
176:       return []
177:     }
178:   }
179:   
180:   /**
181:    * Analyze personality and communication preferences using AI
182:    */
183:   static async analyzePersonality(
184:     linkedinUrl?: string,
185:     title?: string
186:   ): Promise<{
187:     communication_style: 'direct' | 'formal' | 'casual';
188:     best_contact_days: string[];
189:     preferred_approach: string;
190:     response_likelihood: number;
191:   }> {
192:     try {
193:       // If no LinkedIn, infer from title
194:       if (!linkedinUrl) {
195:         return this.inferPersonalityFromTitle(title || '')
196:       }
197:       
198:       const prompt = `Analyze this professional's communication style for cold outreach:
199:       
200: LINKEDIN: ${linkedinUrl}
201: TITLE: ${title || 'Unknown'}
202: 
203: Based on their role and seniority, predict:
204: 1. Communication style (direct/formal/casual)
205: 2. Best days to contact (weekday preferences)
206: 3. Preferred approach (value_proposition/relationship_building/direct_ask)
207: 4. Response likelihood (0-100 based on role accessibility)
208: 
209: Return JSON:
210: {
211:   "communication_style": "direct" | "formal" | "casual",
212:   "best_contact_days": ["Tuesday", "Wednesday", "Thursday"],
213:   "preferred_approach": "brief description",
214:   "response_likelihood": 0-100
215: }`
216: 
217:       const result = await PerplexityIntelligenceService.customQuery({
218:         systemPrompt: "You analyze professional communication styles and preferences.",
219:         userPrompt: prompt,
220:         temperature: 0.3,
221:         maxTokens: 300
222:       })
223:       
224:       // Parse the JSON response
225:       try {
226:         const parsed = JSON.parse(result.content)
227:         if (typeof parsed === 'object' && parsed !== null && 'communication_style' in parsed) {
228:           return parsed as {
229:             communication_style: 'direct' | 'formal' | 'casual';
230:             best_contact_days: string[];
231:             preferred_approach: string;
232:             response_likelihood: number;
233:           }
234:         }
235:       } catch {
236:         // JSON parsing failed, continue to fallback
237:       }
238:       
239:       // Fallback if unexpected format
240:       return this.inferPersonalityFromTitle(title || '')
241:       
242:     } catch (error) {
243:       console.error('[CONTACT_ENRICHMENT] Personality analysis failed:', error)
244:       return this.inferPersonalityFromTitle(title || '')
245:     }
246:   }
247:   
248:   /**
249:    * Infer personality from job title (fallback when no LinkedIn)
250:    */
251:   private static inferPersonalityFromTitle(title: string): {
252:     communication_style: 'direct' | 'formal' | 'casual';
253:     best_contact_days: string[];
254:     preferred_approach: string;
255:     response_likelihood: number;
256:   } {
257:     const titleLower = title.toLowerCase()
258:     
259:     // Executive level - prefer direct, high-level communication
260:     if (/ceo|cto|cfo|vp|chief|president|director/.test(titleLower)) {
261:       return {
262:         communication_style: 'direct',
263:         best_contact_days: ['Tuesday', 'Wednesday', 'Thursday'],
264:         preferred_approach: 'Clear value proposition with minimal fluff',
265:         response_likelihood: 30 // Busy, harder to reach
266:       }
267:     }
268:     
269:     // HR/Recruiting - prefer formal, relationship-focused
270:     if (/recruiter|talent|hr|people|hiring/.test(titleLower)) {
271:       return {
272:         communication_style: 'formal',
273:         best_contact_days: ['Monday', 'Tuesday', 'Wednesday', 'Thursday'],
274:         preferred_approach: 'Professional introduction with clear fit',
275:         response_likelihood: 70 // Most responsive
276:       }
277:     }
278:     
279:     // Manager level - balanced approach
280:     if (/manager|lead|head/.test(titleLower)) {
281:       return {
282:         communication_style: 'formal',
283:         best_contact_days: ['Tuesday', 'Wednesday', 'Thursday'],
284:         preferred_approach: 'Concise with relevant experience highlights',
285:         response_likelihood: 50
286:       }
287:     }
288:     
289:     // Default for other roles
290:     return {
291:       communication_style: 'formal',
292:       best_contact_days: ['Tuesday', 'Wednesday', 'Thursday'],
293:       preferred_approach: 'Professional and courteous',
294:       response_likelihood: 40
295:     }
296:   }
297:   
298:   /**
299:    * Calculate decision maker score based on title and role
300:    */
301:   static calculateDecisionMakerScore(title: string): number {
302:     const titleLower = title.toLowerCase()
303:     
304:     // C-level and VPs - highest decision power
305:     if (/ceo|cto|cfo|coo|vp|chief|president/.test(titleLower)) {
306:       return 95
307:     }
308:     
309:     // Directors - high decision power
310:     if (/director/.test(titleLower)) {
311:       return 85
312:     }
313:     
314:     // HR/Recruiting - high for hiring decisions
315:     if (/recruiter|talent|hr manager|hiring manager|people/.test(titleLower)) {
316:       return 90
317:     }
318:     
319:     // Managers and leads - moderate decision power
320:     if (/manager|lead|head/.test(titleLower)) {
321:       return 70
322:     }
323:     
324:     // Coordinators and specialists - lower decision power
325:     if (/coordinator|specialist|analyst/.test(titleLower)) {
326:       return 40
327:     }
328:     
329:     // Default
330:     return 50
331:   }
332:   
333:   /**
334:    * Fallback: Basic enrichment without AI
335:    */
336:   private static basicEnrichment(
337:     contact: any,
338:     companyDomain: string
339:   ): EnhancedContact {
340:     console.log('[CONTACT_ENRICHMENT] Using basic enrichment fallback')
341:     
342:     return {
343:       ...contact,
344:       verified_email: !!contact.email,
345:       email_confidence: contact.email ? 60 : 0,
346:       alternative_emails: this.generateEmailVariants(contact.name, companyDomain),
347:       decision_maker_score: this.calculateDecisionMakerScore(contact.title),
348:       personality_insights: this.inferPersonalityFromTitle(contact.title),
349:       source: contact.source || 'Unknown',
350:       emailType: contact.emailType,
351:       discoveryMethod: contact.discoveryMethod
352:     }
353:   }
354:   
355:   /**
356:    * Batch enrich multiple contacts
357:    */
358:   static async enrichContacts(
359:     contacts: any[],
360:     companyDomain: string
361:   ): Promise<EnhancedContact[]> {
362:     console.log('[CONTACT_ENRICHMENT] Batch enriching', contacts.length, 'contacts')
363:     
364:     // Process in parallel with limit
365:     const BATCH_SIZE = 3
366:     const enriched: EnhancedContact[] = []
367:     
368:     for (let i = 0; i < contacts.length; i += BATCH_SIZE) {
369:       const batch = contacts.slice(i, i + BATCH_SIZE)
370:       const batchResults = await Promise.all(
371:         batch.map(contact => this.enrichContact(contact, companyDomain))
372:       )
373:       enriched.push(...batchResults)
374:     }
375:     
376:     // Sort by decision maker score (highest first)
377:     return enriched.sort((a, b) => b.decision_maker_score - a.decision_maker_score)
378:   }
379: }
</file>

<file path="src/lib/contact-validation.ts">
  1: /**
  2:  * Contact Validation Utilities
  3:  * Validates hiring contacts, emails, and LinkedIn profiles
  4:  */
  5: 
  6: import dns from 'dns/promises'
  7: 
  8: /**
  9:  * Personal email domains to reject
 10:  */
 11: const PERSONAL_EMAIL_DOMAINS = [
 12:   'gmail.com',
 13:   'yahoo.com',
 14:   'hotmail.com',
 15:   'outlook.com',
 16:   'live.com',
 17:   'icloud.com',
 18:   'aol.com',
 19:   'protonmail.com',
 20:   'mail.com',
 21:   'zoho.com',
 22:   'yandex.com',
 23:   'gmx.com'
 24: ]
 25: 
 26: /**
 27:  * Validate LinkedIn profile URL
 28:  */
 29: export function isValidLinkedInURL(url: string): boolean {
 30:   if (!url) return false
 31:   
 32:   // Match LinkedIn profile URLs
 33:   const patterns = [
 34:     /^https?:\/\/(www\.)?linkedin\.com\/in\/[a-zA-Z0-9-]+\/?$/,
 35:     /^https?:\/\/(www\.)?linkedin\.com\/pub\/[a-zA-Z0-9-]+\/[a-zA-Z0-9]+\/[a-zA-Z0-9]+\/[a-zA-Z0-9]+\/?$/
 36:   ]
 37:   
 38:   return patterns.some(pattern => pattern.test(url))
 39: }
 40: 
 41: /**
 42:  * Validate email format
 43:  */
 44: export function isValidEmailFormat(email: string): boolean {
 45:   if (!email) return false
 46:   
 47:   const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
 48:   return emailRegex.test(email)
 49: }
 50: 
 51: /**
 52:  * Check if email is from a personal domain
 53:  */
 54: export function isPersonalEmail(email: string): boolean {
 55:   if (!email) return false
 56:   
 57:   const domain = email.split('@')[1]?.toLowerCase()
 58:   return PERSONAL_EMAIL_DOMAINS.includes(domain)
 59: }
 60: 
 61: /**
 62:  * Validate corporate email by checking MX records
 63:  */
 64: export async function validateCorporateEmail(email: string): Promise<{
 65:   valid: boolean
 66:   reason?: string
 67: }> {
 68:   // Check format
 69:   if (!isValidEmailFormat(email)) {
 70:     return { valid: false, reason: 'Invalid email format' }
 71:   }
 72:   
 73:   // Check if personal email
 74:   if (isPersonalEmail(email)) {
 75:     return { valid: false, reason: 'Personal email domain' }
 76:   }
 77:   
 78:   // Check MX records
 79:   const domain = email.split('@')[1]
 80:   try {
 81:     const mx = await dns.resolveMx(domain)
 82:     if (mx.length === 0) {
 83:       return { valid: false, reason: 'No MX records found' }
 84:     }
 85:     return { valid: true }
 86:   } catch (error) {
 87:     return { valid: false, reason: 'DNS lookup failed' }
 88:   }
 89: }
 90: 
 91: /**
 92:  * Validate hiring contact
 93:  */
 94: export interface HiringContact {
 95:   name: string
 96:   title?: string | null
 97:   email?: string | null
 98:   linkedinUrl?: string | null
 99:   company?: string
100: }
101: 
102: export interface ValidatedContact extends HiringContact {
103:   validation: {
104:     emailValid: boolean
105:     emailReason?: string
106:     linkedInValid: boolean
107:     overallScore: number // 0-100
108:   }
109: }
110: 
111: export async function validateHiringContact(
112:   contact: HiringContact
113: ): Promise<ValidatedContact> {
114:   const validation = {
115:     emailValid: false,
116:     emailReason: undefined as string | undefined,
117:     linkedInValid: false,
118:     overallScore: 0
119:   }
120:   
121:   // Validate email if present
122:   if (contact.email) {
123:     const emailValidation = await validateCorporateEmail(contact.email)
124:     validation.emailValid = emailValidation.valid
125:     validation.emailReason = emailValidation.reason
126:   }
127:   
128:   // Validate LinkedIn URL if present
129:   if (contact.linkedinUrl) {
130:     validation.linkedInValid = isValidLinkedInURL(contact.linkedinUrl)
131:   }
132:   
133:   // Calculate overall score
134:   let score = 0
135:   
136:   // Name is required (20 points)
137:   if (contact.name && contact.name.length > 2) {
138:     score += 20
139:   }
140:   
141:   // Title adds credibility (20 points)
142:   if (contact.title) {
143:     score += 20
144:     
145:     // Bonus for HR/recruiting titles (10 points)
146:     const title = contact.title.toLowerCase()
147:     if (
148:       title.includes('recruiter') ||
149:       title.includes('talent') ||
150:       title.includes('hr') ||
151:       title.includes('people') ||
152:       title.includes('hiring')
153:     ) {
154:       score += 10
155:     }
156:   }
157:   
158:   // Valid email is valuable (30 points)
159:   if (validation.emailValid) {
160:     score += 30
161:   }
162:   
163:   // Valid LinkedIn is good (20 points)
164:   if (validation.linkedInValid) {
165:     score += 20
166:   }
167:   
168:   validation.overallScore = Math.min(100, score)
169:   
170:   return {
171:     ...contact,
172:     validation
173:   }
174: }
175: 
176: /**
177:  * Batch validate contacts
178:  */
179: export async function validateHiringContacts(
180:   contacts: HiringContact[]
181: ): Promise<ValidatedContact[]> {
182:   const validated = await Promise.all(
183:     contacts.map(contact => validateHiringContact(contact))
184:   )
185:   
186:   // Sort by score (highest first)
187:   return validated.sort((a, b) => b.validation.overallScore - a.validation.overallScore)
188: }
189: 
190: /**
191:  * Filter contacts by minimum score
192:  */
193: export function filterContactsByScore(
194:   contacts: ValidatedContact[],
195:   minScore: number = 50
196: ): ValidatedContact[] {
197:   return contacts.filter(contact => contact.validation.overallScore >= minScore)
198: }
199: 
200: /**
201:  * Get best contact from list
202:  */
203: export function getBestContact(contacts: ValidatedContact[]): ValidatedContact | null {
204:   if (contacts.length === 0) return null
205:   
206:   // Prefer contacts with valid email
207:   const withEmail = contacts.filter(c => c.validation.emailValid)
208:   if (withEmail.length > 0) {
209:     return withEmail[0]
210:   }
211:   
212:   // Otherwise return highest scored
213:   return contacts[0]
214: }
215: 
216: /**
217:  * Extract domain from email
218:  */
219: export function getEmailDomain(email: string): string | null {
220:   if (!isValidEmailFormat(email)) return null
221:   return email.split('@')[1]?.toLowerCase() || null
222: }
223: 
224: /**
225:  * Check if email domain matches company
226:  */
227: export function emailMatchesCompany(email: string, companyName: string): boolean {
228:   const domain = getEmailDomain(email)
229:   if (!domain) return false
230:   
231:   const companySlug = companyName
232:     .toLowerCase()
233:     .replace(/[^a-z0-9]/g, '')
234:   
235:   const domainSlug = domain
236:     .split('.')[0]
237:     .replace(/[^a-z0-9]/g, '')
238:   
239:   return domainSlug.includes(companySlug) || companySlug.includes(domainSlug)
240: }
</file>

<file path="src/lib/email-service.ts">
  1: import { Resend } from 'resend'
  2: import { generateResumePDF, generateCoverLetterPDF } from './server-pdf-generator'
  3: 
  4: interface EmailOptions {
  5:   recipient: string
  6:   subjects: string[]
  7:   intros: string[]
  8:   resumeText: string
  9:   coverText: string
 10:   company: string
 11:   jobTitle: string
 12:   senderEmail?: string
 13:   senderName?: string
 14: }
 15: 
 16: interface SendEmailResult {
 17:   success: boolean
 18:   messageId?: string
 19:   error?: string
 20:   mailtoUrl: string // Fallback for environments without Resend
 21: }
 22: 
 23: /**
 24:  * Send email using Resend API with PDF attachments
 25:  */
 26: export async function sendJobApplicationEmail(options: EmailOptions): Promise<SendEmailResult> {
 27:   console.log('📧 [EMAIL] ==========================================')
 28:   console.log('[EMAIL] Sending application email')
 29:   console.log('[EMAIL] Recipient:', options.recipient)
 30:   console.log('[EMAIL] Company:', options.company)
 31:   console.log('[EMAIL] Job Title:', options.jobTitle)
 32:   console.log('[EMAIL] Sender Name:', options.senderName)
 33:   console.log('[EMAIL] Sender Email:', options.senderEmail)
 34:   console.log('[EMAIL] Resume Text Length:', options.resumeText?.length || 0)
 35:   console.log('[EMAIL] Cover Letter Length:', options.coverText?.length || 0)
 36:   console.log('[EMAIL] ==========================================')
 37: 
 38:   // Generate subject and body
 39:   const subject = options.subjects[0] || `Application for ${options.jobTitle} at ${options.company}`
 40:   const intro = options.intros[0] || `Dear Hiring Manager,`
 41:   
 42:   const body = `${intro}
 43: 
 44: I am excited to apply for the ${options.jobTitle} position at ${options.company}.
 45: 
 46: Please find my resume and cover letter attached.
 47: 
 48: Best regards,
 49: ${options.senderName || '[Your Name]'}`
 50: 
 51:   // Create mailto fallback URL
 52:   const mailtoUrl = `mailto:${options.recipient}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`
 53: 
 54:   // Check if Resend API key is configured
 55:   const resendApiKey = process.env.RESEND_API_KEY
 56:   if (!resendApiKey) {
 57:     console.warn('[EMAIL] RESEND_API_KEY not configured, returning mailto fallback')
 58:     return {
 59:       success: false,
 60:       error: 'Email service not configured. Use mailto link as fallback.',
 61:       mailtoUrl
 62:     }
 63:   }
 64: 
 65:   try {
 66:     // Generate PDF attachments
 67:     console.log('[EMAIL] 📄 Generating PDF attachments...')
 68:     console.log('[EMAIL] Resume text to convert:', options.resumeText.slice(0, 200) + '...')
 69:     console.log('[EMAIL] Cover letter to convert:', options.coverText.slice(0, 200) + '...')
 70:     
 71:     const [resumePDF, coverLetterPDF] = await Promise.all([
 72:       generateResumePDF(options.resumeText),
 73:       generateCoverLetterPDF(options.coverText)
 74:     ])
 75:     
 76:     console.log('[EMAIL] ✅ PDFs generated successfully')
 77:     console.log('[EMAIL] Resume PDF size:', resumePDF?.length || 0, 'bytes')
 78:     console.log('[EMAIL] Cover Letter PDF size:', coverLetterPDF?.length || 0, 'bytes')
 79: 
 80:     if (!resumePDF || resumePDF.length === 0) {
 81:       throw new Error('Resume PDF generation failed - empty or null')
 82:     }
 83:     
 84:     if (!coverLetterPDF || coverLetterPDF.length === 0) {
 85:       throw new Error('Cover Letter PDF generation failed - empty or null')
 86:     }
 87: 
 88:     // Initialize Resend
 89:     console.log('[EMAIL] 📨 Initializing Resend...')
 90:     const resend = new Resend(resendApiKey)
 91: 
 92:     // Send email with attachments
 93:     console.log('[EMAIL] 🚀 Sending email with attachments...')
 94:     console.log('[EMAIL] From:', options.senderEmail || 'noreply@careerlever.ai')
 95:     console.log('[EMAIL] To:', options.recipient)
 96:     console.log('[EMAIL] Subject:', subject)
 97:     
 98:     const result = await resend.emails.send({
 99:       from: options.senderEmail || 'noreply@careerlever.ai',
100:       to: options.recipient,
101:       subject: subject,
102:       text: body,
103:       attachments: [
104:         {
105:           filename: 'resume.pdf',
106:           content: resumePDF
107:         },
108:         {
109:           filename: 'cover-letter.pdf',
110:           content: coverLetterPDF
111:         }
112:       ]
113:     })
114: 
115:     console.log('[EMAIL] ✅✅✅ Email sent successfully!')
116:     console.log('[EMAIL] Message ID:', result.data?.id)
117:     console.log('[EMAIL] Result:', result)
118:     
119:     return {
120:       success: true,
121:       messageId: result.data?.id,
122:       mailtoUrl
123:     }
124: 
125:   } catch (error: any) {
126:     console.error('❌❌❌ [EMAIL] CRITICAL ERROR ❌❌❌')
127:     console.error('[EMAIL] Error type:', error?.constructor?.name)
128:     console.error('[EMAIL] Error message:', error?.message)
129:     console.error('[EMAIL] Error stack:', error?.stack)
130:     console.error('[EMAIL] Recipient:', options.recipient)
131:     console.error('[EMAIL] Company:', options.company)
132:     
133:     return {
134:       success: false,
135:       error: error instanceof Error ? error.message : 'Unknown error',
136:       mailtoUrl
137:     }
138:   }
139: }
140: 
141: /**
142:  * Legacy function for backward compatibility
143:  */
144: export async function composeEmail(options: EmailOptions) {
145:   const result = await sendJobApplicationEmail(options)
146:   return {
147:     mailtoUrl: result.mailtoUrl,
148:     success: result.success,
149:     messageId: result.messageId,
150:     error: result.error
151:   }
152: }
</file>

<file path="src/lib/job-outlook-analyzer.ts">
  1: /**
  2:  * AI/Automation Job Outlook Analyzer
  3:  * 
  4:  * Provides 5-year job market projections using Perplexity AI
  5:  * Analyzes automation risk, growth trends, and career recommendations
  6:  */
  7: 
  8: import { PerplexityIntelligenceService } from './perplexity-intelligence'
  9: 
 10: export interface JobOutlook {
 11:   jobTitle: string
 12:   location: string
 13:   
 14:   // 5-Year Projections
 15:   projections: {
 16:     year: number
 17:     demandTrend: 'increasing' | 'stable' | 'decreasing'
 18:     salaryGrowth: number // percentage
 19:     jobOpenings: number // estimated
 20:   }[]
 21:   
 22:   // Automation Risk Analysis
 23:   automation: {
 24:     riskLevel: 'low' | 'medium' | 'high' | 'critical'
 25:     riskScore: number // 0-100
 26:     automationTimeline: string // e.g. "5-10 years", "10+ years"
 27:     vulnerableTasks: string[]
 28:     safeTasks: string[]
 29:     recommendations: string[]
 30:   }
 31:   
 32:   // Market Intelligence
 33:   market: {
 34:     currentDemand: 'very high' | 'high' | 'moderate' | 'low'
 35:     competitionLevel: 'very competitive' | 'competitive' | 'moderate' | 'favorable'
 36:     emergingSkills: string[]
 37:     decliningSkills: string[]
 38:     topIndustries: string[]
 39:     averageSalary: {
 40:       min: number
 41:       max: number
 42:       median: number
 43:       currency: string
 44:     }
 45:   }
 46:   
 47:   // Career Recommendations
 48:   recommendations: {
 49:     upskilling: string[]
 50:     pivotOpportunities: string[]
 51:     certifications: string[]
 52:     safetyScore: number // 0-100, higher = more future-proof
 53:   }
 54:   
 55:   // Data Sources
 56:   metadata: {
 57:     analyzedAt: string
 58:     sources: string[]
 59:     confidence: 'high' | 'medium' | 'low'
 60:   }
 61: }
 62: 
 63: export class JobOutlookAnalyzer {
 64:   /**
 65:    * Analyze job outlook using Perplexity AI with real-time market data
 66:    */
 67:   static async analyzeJobOutlook(
 68:     jobTitle: string,
 69:     location: string = 'Canada'
 70:   ): Promise<JobOutlook> {
 71:     const SYSTEM_PROMPT = `You are a labor market analyst and AI/automation expert specializing in Canadian and US job markets.
 72: 
 73: Analyze job outlook with:
 74: 1. 5-year demand and salary projections (year-by-year)
 75: 2. AI/automation risk assessment with timeline
 76: 3. Vulnerable vs. safe job tasks
 77: 4. Current market intelligence
 78: 5. Emerging and declining skills
 79: 6. Career recommendations and pivot opportunities
 80: 
 81: Use REAL data from:
 82: - Statistics Canada
 83: - US Bureau of Labor Statistics  
 84: - LinkedIn Workforce Reports
 85: - Indeed job market data
 86: - McKinsey automation studies
 87: - WEF Future of Jobs reports
 88: 
 89: OUTPUT ONLY valid JSON, no explanations.`
 90: 
 91:     const USER_PROMPT = `Analyze the job outlook for: "${jobTitle}" in ${location}
 92: 
 93: Provide comprehensive 5-year analysis including automation risk.
 94: 
 95: Return ONLY this JSON:
 96: {
 97:   "jobTitle": "${jobTitle}",
 98:   "location": "${location}",
 99:   "projections": [
100:     {
101:       "year": 2025,
102:       "demandTrend": "increasing",
103:       "salaryGrowth": 3.5,
104:       "jobOpenings": 15000
105:     }
106:   ],
107:   "automation": {
108:     "riskLevel": "medium",
109:     "riskScore": 45,
110:     "automationTimeline": "10-15 years",
111:     "vulnerableTasks": ["Task 1", "Task 2"],
112:     "safeTasks": ["Task 1", "Task 2"],
113:     "recommendations": ["Learn AI tools", "Focus on strategic thinking"]
114:   },
115:   "market": {
116:     "currentDemand": "high",
117:     "competitionLevel": "competitive",
118:     "emergingSkills": ["AI/ML", "Data Analysis"],
119:     "decliningSkills": ["Manual data entry"],
120:     "topIndustries": ["Technology", "Finance"],
121:     "averageSalary": {
122:       "min": 60000,
123:       "max": 120000,
124:       "median": 85000,
125:       "currency": "CAD"
126:     }
127:   },
128:   "recommendations": {
129:     "upskilling": ["Learn Python", "Get certified in X"],
130:     "pivotOpportunities": ["Data Analyst", "Product Manager"],
131:     "certifications": ["PMP", "AWS Cloud"],
132:     "safetyScore": 75
133:   },
134:   "metadata": {
135:     "analyzedAt": "${new Date().toISOString()}",
136:     "sources": ["Statistics Canada", "LinkedIn Workforce Report"],
137:     "confidence": "high"
138:   }
139: }`
140: 
141:     try {
142:       const response = await PerplexityIntelligenceService.customQuery({
143:         systemPrompt: SYSTEM_PROMPT,
144:         userPrompt: USER_PROMPT,
145:         temperature: 0.2,
146:         maxTokens: 3000
147:       })
148: 
149:       // Extract JSON from response.content
150:       let text = response.content.trim()
151:       const jsonMatch = text.match(/\{[\s\S]*\}/)
152:       if (jsonMatch) {
153:         text = jsonMatch[0]
154:       }
155: 
156:       const outlook = JSON.parse(text) as JobOutlook
157: 
158:       // Validate and provide defaults
159:       return {
160:         jobTitle: outlook.jobTitle || jobTitle,
161:         location: outlook.location || location,
162:         projections: outlook.projections || this.defaultProjections(),
163:         automation: outlook.automation || this.defaultAutomation(),
164:         market: outlook.market || this.defaultMarket(),
165:         recommendations: outlook.recommendations || this.defaultRecommendations(),
166:         metadata: outlook.metadata || {
167:           analyzedAt: new Date().toISOString(),
168:           sources: ['Perplexity AI'],
169:           confidence: 'medium'
170:         }
171:       }
172:     } catch (error) {
173:       console.error('[JOB OUTLOOK ANALYZER] Failed:', error)
174:       
175:       // Fallback to general outlook
176:       return this.fallbackOutlook(jobTitle, location)
177:     }
178:   }
179: 
180:   /**
181:    * Quick automation risk check (faster, less comprehensive)
182:    */
183:   static async quickAutomationRisk(jobTitle: string): Promise<{
184:     riskLevel: 'low' | 'medium' | 'high' | 'critical'
185:     riskScore: number
186:     summary: string
187:   }> {
188:     const QUICK_PROMPT = `What is the automation risk for "${jobTitle}" jobs? 
189:     
190: Return JSON:
191: {
192:   "riskLevel": "low|medium|high|critical",
193:   "riskScore": 0-100,
194:   "summary": "One sentence explanation"
195: }`
196: 
197:     try {
198:       const response = await PerplexityIntelligenceService.customQuery({
199:         systemPrompt: 'You assess job automation risk based on AI capabilities.',
200:         userPrompt: QUICK_PROMPT,
201:         temperature: 0.2,
202:         maxTokens: 300
203:       })
204: 
205:       const data = JSON.parse(response.content.match(/\{[\s\S]*\}/)![0])
206:       return data
207:     } catch {
208:       return {
209:         riskLevel: 'medium',
210:         riskScore: 50,
211:         summary: 'Unable to assess automation risk at this time.'
212:       }
213:     }
214:   }
215: 
216:   // Fallback data
217:   private static fallbackOutlook(jobTitle: string, location: string): JobOutlook {
218:     return {
219:       jobTitle,
220:       location,
221:       projections: this.defaultProjections(),
222:       automation: this.defaultAutomation(),
223:       market: this.defaultMarket(),
224:       recommendations: this.defaultRecommendations(),
225:       metadata: {
226:         analyzedAt: new Date().toISOString(),
227:         sources: ['Fallback data'],
228:         confidence: 'low'
229:       }
230:     }
231:   }
232: 
233:   private static defaultProjections() {
234:     return [2025, 2026, 2027, 2028, 2029].map((year, i) => ({
235:       year,
236:       demandTrend: 'stable' as const,
237:       salaryGrowth: 2.5 + i * 0.5,
238:       jobOpenings: 10000 + i * 1000
239:     }))
240:   }
241: 
242:   private static defaultAutomation() {
243:     return {
244:       riskLevel: 'medium' as const,
245:       riskScore: 50,
246:       automationTimeline: '10-15 years',
247:       vulnerableTasks: ['Routine data entry', 'Basic report generation'],
248:       safeTasks: ['Strategic planning', 'Client relationship management'],
249:       recommendations: [
250:         'Focus on soft skills and strategic thinking',
251:         'Learn to work with AI tools',
252:         'Develop leadership capabilities'
253:       ]
254:     }
255:   }
256: 
257:   private static defaultMarket() {
258:     return {
259:       currentDemand: 'moderate' as const,
260:       competitionLevel: 'competitive' as const,
261:       emergingSkills: ['AI/ML literacy', 'Data analysis', 'Cloud computing'],
262:       decliningSkills: ['Manual processes', 'Legacy systems'],
263:       topIndustries: ['Technology', 'Finance', 'Healthcare'],
264:       averageSalary: {
265:         min: 50000,
266:         max: 100000,
267:         median: 70000,
268:         currency: 'CAD'
269:       }
270:     }
271:   }
272: 
273:   private static defaultRecommendations() {
274:     return {
275:       upskilling: ['Learn AI tools', 'Improve data literacy', 'Develop soft skills'],
276:       pivotOpportunities: ['Data Analyst', 'Project Manager', 'Business Analyst'],
277:       certifications: ['PMP', 'Scrum Master', 'Google Analytics'],
278:       safetyScore: 65
279:     }
280:   }
281: }
</file>

<file path="src/lib/linkedin-job-integration.ts">
  1: /**
  2:  * Complete LinkedIn + Job Scraping Integration
  3:  * Combines OAuth, job search, and contact validation
  4:  */
  5: 
  6: import { PerplexityIntelligenceService, type JobListing } from './perplexity-intelligence'
  7: import { validateHiringContacts, filterContactsByScore, getBestContact, type ValidatedContact } from './contact-validation'
  8: 
  9: export interface JobWithContacts {
 10:   job: JobListing
 11:   contacts: ValidatedContact[]
 12:   bestContact: ValidatedContact | null
 13:   contactStats: {
 14:     total: number
 15:     withEmail: number
 16:     withLinkedIn: number
 17:     validated: number
 18:   }
 19: }
 20: 
 21: export interface JobSearchResult {
 22:   success: boolean
 23:   totalJobs: number
 24:   jobsWithContacts: number
 25:   jobs: JobWithContacts[]
 26:   searchMetadata: {
 27:     location: string
 28:     role: string
 29:     duration: number
 30:     timestamp: number
 31:   }
 32: }
 33: 
 34: /**
 35:  * Main integration function: Find jobs with verified hiring contacts
 36:  */
 37: export async function findJobsWithVerifiedContacts(
 38:   location: string,
 39:   role: string,
 40:   resumeText: string,
 41:   options: {
 42:     maxJobs?: number
 43:     workType?: 'remote' | 'hybrid' | 'onsite' | 'any'
 44:     minContactScore?: number
 45:   } = {}
 46: ): Promise<JobSearchResult> {
 47:   const startTime = Date.now()
 48:   const maxJobs = options.maxJobs || 10
 49:   const minContactScore = options.minContactScore || 50
 50: 
 51:   console.log(`🔍 Starting job search: ${role} in ${location}`)
 52: 
 53:   // 1. Search for jobs
 54:   const jobsResult = await PerplexityIntelligenceService.jobMarketAnalysisV2(
 55:     location,
 56:     resumeText,
 57:     {
 58:       roleHint: role,
 59:       maxResults: 40,
 60:       workType: options.workType || 'any'
 61:     }
 62:   )
 63: 
 64:   if (!jobsResult.success || jobsResult.data.length === 0) {
 65:     console.log('❌ No jobs found')
 66:     return {
 67:       success: false,
 68:       totalJobs: 0,
 69:       jobsWithContacts: 0,
 70:       jobs: [],
 71:       searchMetadata: {
 72:         location,
 73:         role,
 74:         duration: Date.now() - startTime,
 75:         timestamp: startTime
 76:       }
 77:     }
 78:   }
 79: 
 80:   console.log(`✅ Found ${jobsResult.data.length} jobs`)
 81: 
 82:   // 2. For each job, find and validate hiring contacts
 83:   const jobsWithContacts: JobWithContacts[] = []
 84:   const topJobs = jobsResult.data.slice(0, maxJobs)
 85: 
 86:   for (let i = 0; i < topJobs.length; i++) {
 87:     const job = topJobs[i]
 88:     console.log(`\n[${i + 1}/${topJobs.length}] 📧 Finding contacts for ${job.company}...`)
 89: 
 90:     try {
 91:       // Find contacts
 92:       const contactsResult = await PerplexityIntelligenceService.hiringContactsWithAgent(
 93:         job.company
 94:       )
 95: 
 96:       if (!contactsResult.success || contactsResult.data.length === 0) {
 97:         console.log(`  ⚠️ No contacts found`)
 98:         jobsWithContacts.push({
 99:           job,
100:           contacts: [],
101:           bestContact: null,
102:           contactStats: {
103:             total: 0,
104:             withEmail: 0,
105:             withLinkedIn: 0,
106:             validated: 0
107:           }
108:         })
109:         continue
110:       }
111: 
112:       console.log(`  ✅ Found ${contactsResult.data.length} potential contacts`)
113: 
114:       // Validate contacts
115:       const validatedContacts = await validateHiringContacts(contactsResult.data)
116:       const filteredContacts = filterContactsByScore(validatedContacts, minContactScore)
117:       const bestContact = getBestContact(filteredContacts)
118: 
119:       // Calculate stats
120:       const contactStats = {
121:         total: validatedContacts.length,
122:         withEmail: validatedContacts.filter(c => c.validation.emailValid).length,
123:         withLinkedIn: validatedContacts.filter(c => c.validation.linkedInValid).length,
124:         validated: filteredContacts.length
125:       }
126: 
127:       console.log(`  📊 Stats: ${contactStats.validated}/${contactStats.total} validated (score ≥${minContactScore})`)
128:       
129:       if (bestContact) {
130:         console.log(`  ⭐ Best: ${bestContact.name} (${bestContact.title}) - Score: ${bestContact.validation.overallScore}`)
131:       }
132: 
133:       jobsWithContacts.push({
134:         job,
135:         contacts: filteredContacts,
136:         bestContact,
137:         contactStats
138:       })
139: 
140:     } catch (error) {
141:       console.error(`  ❌ Error processing ${job.company}:`, error)
142:       jobsWithContacts.push({
143:         job,
144:         contacts: [],
145:         bestContact: null,
146:         contactStats: {
147:           total: 0,
148:           withEmail: 0,
149:           withLinkedIn: 0,
150:           validated: 0
151:         }
152:       })
153:     }
154: 
155:     // Small delay to avoid rate limits
156:     if (i < topJobs.length - 1) {
157:       await new Promise(resolve => setTimeout(resolve, 1000))
158:     }
159:   }
160: 
161:   const duration = Date.now() - startTime
162:   const jobsWithValidContacts = jobsWithContacts.filter(j => j.contacts.length > 0).length
163: 
164:   console.log(`\n✅ Complete! Found ${jobsWithValidContacts}/${jobsWithContacts.length} jobs with verified contacts`)
165:   console.log(`⏱️ Duration: ${(duration / 1000).toFixed(1)}s`)
166: 
167:   return {
168:     success: true,
169:     totalJobs: jobsWithContacts.length,
170:     jobsWithContacts: jobsWithValidContacts,
171:     jobs: jobsWithContacts,
172:     searchMetadata: {
173:       location,
174:       role,
175:       duration,
176:       timestamp: startTime
177:     }
178:   }
179: }
180: 
181: /**
182:  * Export results to JSON
183:  */
184: export function exportJobsToJSON(result: JobSearchResult): string {
185:   return JSON.stringify(result, null, 2)
186: }
187: 
188: /**
189:  * Export results to CSV
190:  */
191: export function exportJobsToCSV(result: JobSearchResult): string {
192:   const headers = [
193:     'Job Title',
194:     'Company',
195:     'Location',
196:     'URL',
197:     'Salary',
198:     'Work Type',
199:     'Posted Date',
200:     'Match %',
201:     'Contact Name',
202:     'Contact Title',
203:     'Contact Email',
204:     'Contact LinkedIn',
205:     'Contact Score'
206:   ]
207: 
208:   const rows = result.jobs.map(item => {
209:     const contact = item.bestContact
210:     return [
211:       item.job.title,
212:       item.job.company,
213:       item.job.location,
214:       item.job.url,
215:       item.job.salary || 'N/A',
216:       item.job.workType,
217:       item.job.postedDate,
218:       item.job.skillMatchPercent,
219:       contact?.name || 'N/A',
220:       contact?.title || 'N/A',
221:       contact?.email || 'N/A',
222:       contact?.linkedinUrl || 'N/A',
223:       contact?.validation.overallScore || 0
224:     ].map(val => `"${val}"`).join(',')
225:   })
226: 
227:   return [headers.join(','), ...rows].join('\n')
228: }
229: 
230: /**
231:  * Generate outreach email for a job
232:  */
233: export async function generateOutreachForJob(
234:   jobWithContacts: JobWithContacts,
235:   userProfile: {
236:     name: string
237:     currentRole?: string
238:     summary?: string
239:   }
240: ): Promise<string | null> {
241:   if (!jobWithContacts.bestContact) {
242:     return null
243:   }
244: 
245:   const contact = jobWithContacts.bestContact
246:   const job = jobWithContacts.job
247: 
248:   // Use Perplexity to generate personalized outreach
249:   // This would call your existing outreach generation function
250:   const outreach = `Subject: ${job.title} at ${job.company}
251: 
252: Hi ${contact.name?.split(' ')[0] || 'there'},
253: 
254: I noticed ${job.company} is hiring for a ${job.title} position. With my background in ${userProfile.currentRole || 'this field'}, I believe I'd be a strong fit.
255: 
256: ${userProfile.summary || 'I have relevant experience and skills that align well with this role.'}
257: 
258: I'd love to learn more about the position and discuss how I can contribute to ${job.company}'s success.
259: 
260: Best regards,
261: ${userProfile.name}
262: 
263: ---
264: Job: ${job.url}
265: ${contact.linkedinUrl ? `LinkedIn: ${contact.linkedinUrl}` : ''}
266: `
267: 
268:   return outreach
269: }
270: 
271: /**
272:  * Example usage
273:  */
274: export async function exampleUsage() {
275:   const result = await findJobsWithVerifiedContacts(
276:     'Toronto, ON',
277:     'Product Manager',
278:     'Experienced Product Manager with 5 years in SaaS. Led product teams, launched features, drove growth.',
279:     {
280:       maxJobs: 5,
281:       workType: 'hybrid',
282:       minContactScore: 60
283:     }
284:   )
285: 
286:   // Export to JSON
287:   console.log('\n📄 JSON Export:')
288:   console.log(exportJobsToJSON(result))
289: 
290:   // Export to CSV
291:   console.log('\n📊 CSV Export:')
292:   console.log(exportJobsToCSV(result))
293: 
294:   // Generate outreach for first job with contacts
295:   const jobWithContact = result.jobs.find(j => j.bestContact)
296:   if (jobWithContact) {
297:     const outreach = await generateOutreachForJob(jobWithContact, {
298:       name: 'John Doe',
299:       currentRole: 'Senior Product Manager',
300:       summary: 'Led product strategy for B2B SaaS platform with 10k+ users'
301:     })
302:     console.log('\n📧 Sample Outreach:')
303:     console.log(outreach)
304:   }
305: 
306:   return result
307: }
</file>

<file path="src/lib/pdf-utils.ts">
  1: /**
  2:  * PDF Utility Functions
  3:  * Handles PDF text extraction for resume parsing
  4:  */
  5: 
  6: import * as pdfjsLib from 'pdfjs-dist'
  7: 
  8: // Set worker path for PDF.js
  9: if (typeof window === 'undefined') {
 10:   // Server-side
 11:   pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`
 12: }
 13: 
 14: /**
 15:  * Extract text content from a PDF file
 16:  * @param file - PDF file to extract text from
 17:  * @returns Extracted text content
 18:  */
 19: export async function extractTextFromPDF(file: File | Blob): Promise<string> {
 20:   try {
 21:     // Convert file to array buffer
 22:     const arrayBuffer = await file.arrayBuffer()
 23:     
 24:     // Load PDF document
 25:     const loadingTask = pdfjsLib.getDocument({ data: arrayBuffer })
 26:     const pdf = await loadingTask.promise
 27:     
 28:     let fullText = ''
 29:     
 30:     // Extract text from each page
 31:     for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
 32:       const page = await pdf.getPage(pageNum)
 33:       const textContent = await page.getTextContent()
 34:       
 35:       // Combine text items
 36:       const pageText = textContent.items
 37:         .map((item: any) => item.str)
 38:         .join(' ')
 39:       
 40:       fullText += pageText + '\n\n'
 41:     }
 42:     
 43:     return fullText.trim()
 44:   } catch (error) {
 45:     console.error('[PDF_UTILS] Error extracting text:', error)
 46:     throw new Error('Failed to extract text from PDF')
 47:   }
 48: }
 49: 
 50: /**
 51:  * Get PDF metadata
 52:  * @param file - PDF file
 53:  * @returns PDF metadata
 54:  */
 55: export async function getPDFMetadata(file: File | Blob): Promise<{
 56:   numPages: number
 57:   title?: string
 58:   author?: string
 59:   subject?: string
 60:   keywords?: string
 61:   creator?: string
 62:   producer?: string
 63:   creationDate?: Date
 64:   modificationDate?: Date
 65: }> {
 66:   try {
 67:     const arrayBuffer = await file.arrayBuffer()
 68:     const loadingTask = pdfjsLib.getDocument({ data: arrayBuffer })
 69:     const pdf = await loadingTask.promise
 70:     const metadata = await pdf.getMetadata()
 71:     const info = metadata.info as any
 72:     
 73:     return {
 74:       numPages: pdf.numPages,
 75:       title: info?.Title,
 76:       author: info?.Author,
 77:       subject: info?.Subject,
 78:       keywords: info?.Keywords,
 79:       creator: info?.Creator,
 80:       producer: info?.Producer,
 81:       creationDate: info?.CreationDate ? new Date(info.CreationDate) : undefined,
 82:       modificationDate: info?.ModDate ? new Date(info.ModDate) : undefined
 83:     }
 84:   } catch (error) {
 85:     console.error('[PDF_UTILS] Error getting metadata:', error)
 86:     throw new Error('Failed to get PDF metadata')
 87:   }
 88: }
 89: 
 90: /**
 91:  * Validate if file is a valid PDF
 92:  * @param file - File to validate
 93:  * @returns True if valid PDF
 94:  */
 95: export async function isValidPDF(file: File | Blob): Promise<boolean> {
 96:   try {
 97:     const arrayBuffer = await file.arrayBuffer()
 98:     const loadingTask = pdfjsLib.getDocument({ data: arrayBuffer })
 99:     await loadingTask.promise
100:     return true
101:   } catch {
102:     return false
103:   }
104: }
</file>

<file path="src/lib/pdf/unified-pdf-generator.ts">
  1: /**
  2:  * Unified PDF Generator
  3:  * 
  4:  * Combines pdfkit (simple, fast) and @react-pdf/renderer (styled, beautiful)
  5:  * Automatically chooses the right tool for the job
  6:  */
  7: 
  8: import PDFDocument from 'pdfkit'
  9: import { getTemplateById } from '@/lib/resume-templates-v2'
 10: 
 11: export interface PDFGenerationOptions {
 12:   title?: string
 13:   author?: string
 14:   subject?: string
 15:   keywords?: string[]
 16:   useStyledPDF?: boolean // Use react-pdf for styled output
 17:   template?: string // Resume template ID
 18: }
 19: 
 20: /**
 21:  * Generate PDF from HTML content (simple, fast)
 22:  * Uses pdfkit for basic text-based PDFs
 23:  */
 24: export async function generateSimplePDF(
 25:   html: string,
 26:   title: string = 'Document',
 27:   options: PDFGenerationOptions = {}
 28: ): Promise<Buffer> {
 29:   return new Promise((resolve, reject) => {
 30:     try {
 31:       // Use Courier which is built-in and doesn't require external files
 32:       const doc = new PDFDocument({
 33:         size: 'LETTER',
 34:         margins: { top: 50, bottom: 50, left: 50, right: 50 },
 35:         info: {
 36:           Title: options.title || title,
 37:           Author: options.author || 'Career Lever AI',
 38:           Subject: options.subject || title,
 39:           Keywords: options.keywords?.join(', ') || ''
 40:         }
 41:       })
 42: 
 43:       const chunks: Buffer[] = []
 44:       
 45:       doc.on('data', (chunk) => chunks.push(chunk))
 46:       doc.on('end', () => resolve(Buffer.concat(chunks)))
 47:       doc.on('error', reject)
 48: 
 49:       // Add title using Courier-Bold (built-in, no external files needed)
 50:       doc.font('Courier-Bold')
 51:          .fontSize(16)
 52:          .text(title, { align: 'center' })
 53:          .moveDown()
 54: 
 55:       // Strip HTML and add content using Courier (built-in)
 56:       const text = stripHtmlTags(html)
 57:       doc.font('Courier')
 58:          .fontSize(10)
 59:          .text(text, {
 60:            align: 'left',
 61:            lineGap: 4
 62:          })
 63: 
 64:       doc.end()
 65:     } catch (error) {
 66:       console.error('[PDF] Generation error:', error)
 67:       reject(error)
 68:     }
 69:   })
 70: }
 71: 
 72: /**
 73:  * Generate styled PDF from resume data
 74:  * Uses template system for beautiful formatting
 75:  */
 76: export async function generateStyledResumePDF(
 77:   resumeHTML: string,
 78:   templateId: string = 'modern',
 79:   options: PDFGenerationOptions = {}
 80: ): Promise<Buffer> {
 81:   // For now, use simple PDF with better formatting
 82:   // TODO: Implement react-pdf rendering in Phase 2
 83:   const template = getTemplateById(templateId)
 84:   
 85:   return new Promise((resolve, reject) => {
 86:     try {
 87:       const doc = new PDFDocument({
 88:         size: 'LETTER',
 89:         margins: { top: 40, bottom: 40, left: 50, right: 50 },
 90:         info: {
 91:           Title: options.title || `Resume - ${template.name} Template`,
 92:           Author: options.author || 'Career Lever AI',
 93:           Subject: 'Professional Resume',
 94:           Keywords: 'resume, cv, job application'
 95:         }
 96:       })
 97: 
 98:       const chunks: Buffer[] = []
 99:       
100:       doc.on('data', (chunk) => chunks.push(chunk))
101:       doc.on('end', () => resolve(Buffer.concat(chunks)))
102:       doc.on('error', reject)
103: 
104:       // Parse HTML and render with formatting
105:       renderHTMLToPDF(doc, resumeHTML, template.name)
106: 
107:       doc.end()
108:     } catch (error) {
109:       reject(error)
110:     }
111:   })
112: }
113: 
114: /**
115:  * Generate cover letter PDF
116:  */
117: export async function generateCoverLetterPDF(
118:   coverLetterHTML: string,
119:   templateId: string = 'modern',
120:   options: PDFGenerationOptions = {}
121: ): Promise<Buffer> {
122:   return new Promise((resolve, reject) => {
123:     try {
124:       const doc = new PDFDocument({
125:         size: 'LETTER',
126:         margins: { top: 50, bottom: 50, left: 60, right: 60 },
127:         info: {
128:           Title: options.title || 'Cover Letter',
129:           Author: options.author || 'Career Lever AI',
130:           Subject: `Job Application Cover Letter (${templateId} template)`,
131:           Keywords: 'cover letter, job application'
132:         }
133:       })
134: 
135:       const chunks: Buffer[] = []
136:       
137:       doc.on('data', (chunk) => chunks.push(chunk))
138:       doc.on('end', () => resolve(Buffer.concat(chunks)))
139:       doc.on('error', reject)
140: 
141:       // Render cover letter with proper formatting
142:       renderCoverLetterToPDF(doc, coverLetterHTML)
143: 
144:       doc.end()
145:     } catch (error) {
146:       reject(error)
147:     }
148:   })
149: }
150: 
151: /**
152:  * Helper: Strip HTML tags
153:  */
154: function stripHtmlTags(html: string): string {
155:   return html
156:     .replace(/<style[^>]*>.*?<\/style>/gis, '')
157:     .replace(/<script[^>]*>.*?<\/script>/gis, '')
158:     .replace(/<[^>]+>/g, ' ')
159:     .replace(/&nbsp;/g, ' ')
160:     .replace(/&amp;/g, '&')
161:     .replace(/&lt;/g, '<')
162:     .replace(/&gt;/g, '>')
163:     .replace(/&quot;/g, '"')
164:     .replace(/&#39;/g, "'")
165:     .replace(/\s+/g, ' ')
166:     .trim()
167: }
168: 
169: /**
170:  * Helper: Render HTML to PDF with formatting
171:  */
172: function renderHTMLToPDF(doc: PDFKit.PDFDocument, html: string, templateName: string) {
173:   // Add template name as header
174:   doc.fontSize(10)
175:      .fillColor('#666')
176:      .text(templateName + ' Template', { align: 'right' })
177:      .moveDown(0.5)
178: 
179:   // Parse HTML sections
180:   const sections = parseHTMLSections(html)
181:   
182:   sections.forEach((section, index) => {
183:     if (index > 0) doc.moveDown(1)
184:     
185:     // Section header
186:     if (section.header) {
187:       doc.font('Courier-Bold')
188:          .fontSize(12)
189:          .fillColor('#000')
190:          .text(section.header.toUpperCase())
191:          .moveDown(0.5)
192:     }
193: 
194:     // Section content
195:     doc.font('Courier')
196:        .fontSize(9)
197:        .fillColor('#333')
198:        .text(section.content, {
199:          lineGap: 3
200:        })
201:   })
202: }
203: 
204: /**
205:  * Helper: Render cover letter to PDF
206:  */
207: function renderCoverLetterToPDF(doc: PDFKit.PDFDocument, html: string) {
208:   const text = stripHtmlTags(html)
209:   const paragraphs = text.split('\n\n').filter(p => p.trim())
210: 
211:   paragraphs.forEach((paragraph, index) => {
212:     if (index > 0) doc.moveDown(1)
213:     
214:     doc.font('Courier')
215:        .fontSize(10)
216:        .fillColor('#000')
217:        .text(paragraph.trim(), {
218:          align: 'left',
219:          lineGap: 4
220:        })
221:   })
222: }
223: 
224: /**
225:  * Helper: Parse HTML into sections
226:  */
227: function parseHTMLSections(html: string): Array<{ header?: string; content: string }> {
228:   const sections: Array<{ header?: string; content: string }> = []
229:   
230:   // Simple section parsing (can be enhanced)
231:   const headerRegex = /<h[1-3][^>]*>(.*?)<\/h[1-3]>/gi
232:   const parts = html.split(headerRegex)
233:   
234:   for (let i = 0; i < parts.length; i += 2) {
235:     const header = parts[i + 1]
236:     const content = stripHtmlTags(parts[i + 2] || parts[i])
237:     
238:     if (content.trim()) {
239:       sections.push({
240:         header: header ? stripHtmlTags(header) : undefined,
241:         content: content.trim()
242:       })
243:     }
244:   }
245:   
246:   return sections.length > 0 ? sections : [{ content: stripHtmlTags(html) }]
247: }
248: 
249: // Export aliases for backward compatibility
250: export const generateResumePDF = generateSimplePDF
</file>

<file path="src/lib/profile-extraction.ts">
  1: import { PerplexityIntelligenceService } from './perplexity-intelligence'
  2: 
  3: export interface SmartProfile {
  4:   location: string
  5:   experience_years: number
  6:   salary_min: number
  7:   salary_max: number
  8:   salary_currency: string
  9:   preferred_roles: string[]
 10:   industries: string[]
 11:   work_type: 'remote' | 'hybrid' | 'onsite' | 'flexible'
 12:   commute_max_km: number
 13:   auto_apply_ready: boolean
 14:   skill_confidence: number
 15:   seniority_level: 'entry' | 'junior' | 'mid' | 'senior' | 'lead' | 'executive'
 16: }
 17: 
 18: export class ProfileExtractionService {
 19:   /**
 20:    * PHASE 1B: Extract complete job search profile with smart defaults
 21:    * Uses Perplexity AI to analyze resume and infer preferences
 22:    */
 23:   static async extractCompleteProfile(resumeText: string): Promise<SmartProfile> {
 24:     try {
 25:       console.log('[PROFILE_EXTRACTION] Starting analysis, resume length:', resumeText.length)
 26:       
 27:       const prompt = `Extract a complete job search profile from this resume. Use market intelligence and context clues to infer missing information.
 28: 
 29: RESUME TEXT:
 30: ${resumeText.slice(0, 4000)}
 31: 
 32: ANALYSIS REQUIREMENTS:
 33: 
 34: 1. **Location**: Extract city and province/state from contact info, recent job locations, or address
 35: 2. **Experience Years**: Calculate total years from work history (add up all employment periods)
 36: 3. **Salary Range**: 
 37:    - Research current market rates for this person's role + experience + location
 38:    - Use salary data for similar positions in their region
 39:    - Factor in seniority level and industry
 40:    - Return in local currency (CAD for Canada, USD for USA)
 41: 4. **Preferred Roles**: Extract from 3 most recent job titles (what they've been doing)
 42: 5. **Industries**: Identify industries from work history (Tech, Finance, Healthcare, etc.)
 43: 6. **Work Type Preference**: 
 44:    - If recent roles mention "remote" → remote
 45:    - If mix of office/home → hybrid
 46:    - If all office-based → onsite
 47:    - Default to "flexible" if unclear
 48: 7. **Commute Radius**:
 49:    - Urban location (Toronto, Vancouver, Montreal) → 30km
 50:    - Suburban → 45km
 51:    - Rural/small city → 60km
 52: 8. **Auto-Apply Ready**: true if 3+ years experience, false if entry-level
 53: 9. **Skill Confidence**: 
 54:    - 90-100: Extensive experience, clear achievements, strong keywords
 55:    - 70-89: Good experience, some achievements
 56:    - 50-69: Basic experience, limited detail
 57:    - Below 50: Entry-level or unclear resume
 58: 10. **Seniority Level**:
 59:     - entry: 0-1 years, student, intern
 60:     - junior: 1-3 years
 61:     - mid: 3-6 years
 62:     - senior: 6-10 years
 63:     - lead: 10-15 years, team lead mentioned
 64:     - executive: 15+ years, director/vp/c-level titles
 65: 
 66: Return STRICT JSON (no markdown, no explanation):
 67: {
 68:   "location": "City, Province/State",
 69:   "experience_years": number,
 70:   "salary_min": number,
 71:   "salary_max": number,
 72:   "salary_currency": "CAD" | "USD" | "EUR",
 73:   "preferred_roles": ["role1", "role2", "role3"],
 74:   "industries": ["industry1", "industry2"],
 75:   "work_type": "remote" | "hybrid" | "onsite" | "flexible",
 76:   "commute_max_km": 30 | 45 | 60,
 77:   "auto_apply_ready": boolean,
 78:   "skill_confidence": 0-100,
 79:   "seniority_level": "entry" | "junior" | "mid" | "senior" | "lead" | "executive"
 80: }
 81: 
 82: CRITICAL: Use REAL market salary data for their location and role. Do NOT guess or use placeholder values.`
 83: 
 84:       const result = await PerplexityIntelligenceService.customQuery({
 85:         systemPrompt: "You extract complete job seeker profiles from resumes with accurate market-rate salary research. You have access to real-time salary data and market intelligence.",
 86:         userPrompt: prompt,
 87:         temperature: 0.3,
 88:         maxTokens: 1000
 89:       })
 90:       
 91:       // Parse JSON response
 92:       try {
 93:         const parsed = JSON.parse(result.content)
 94:         if (
 95:           typeof parsed === 'object' && 
 96:           parsed !== null && 
 97:           'location' in parsed && 
 98:           'experience_years' in parsed &&
 99:           'salary_min' in parsed
100:         ) {
101:           const profile = parsed as SmartProfile
102:         
103:         console.log('[PROFILE_EXTRACTION] Analysis complete:', {
104:           location: profile.location,
105:           experience: profile.experience_years,
106:           salary: `${profile.salary_currency} ${profile.salary_min}-${profile.salary_max}`,
107:           work_type: profile.work_type,
108:           seniority: profile.seniority_level
109:         })
110:         
111:         return profile
112:         }
113:       } catch (parseError) {
114:         console.warn('[PROFILE_EXTRACTION] JSON parse error:', parseError)
115:       }
116:       
117:       // If result format is unexpected, use fallback
118:       console.warn('[PROFILE_EXTRACTION] Unexpected result format, using fallback')
119:       return this.extractBasicProfile(resumeText)
120:       
121:     } catch (error) {
122:       console.error('[PROFILE_EXTRACTION] Error:', error)
123:       
124:       // Fallback to basic extraction if Perplexity fails
125:       return this.extractBasicProfile(resumeText)
126:     }
127:   }
128:   
129:   /**
130:    * Fallback: Basic profile extraction without AI (if Perplexity fails)
131:    */
132:   private static extractBasicProfile(resumeText: string): SmartProfile {
133:     console.log('[PROFILE_EXTRACTION] Using fallback basic extraction')
134:     
135:     // Try to extract location from common patterns
136:     const locationMatch = resumeText.match(/([A-Z][a-z]+,\s*[A-Z]{2})/g)
137:     const location = locationMatch?.[0] || 'Canada'
138:     
139:     // Rough experience calculation (count years mentioned)
140:     const yearMatches = resumeText.match(/20\d{2}/g) || []
141:     const years = yearMatches.length > 0 ? Math.max(...yearMatches.map(y => parseInt(y))) - Math.min(...yearMatches.map(y => parseInt(y))) : 2
142:     const experience_years = Math.min(years, 30) // Cap at 30 years
143:     
144:     // Infer work type from keywords
145:     const hasRemote = /remote|work from home|wfh/i.test(resumeText)
146:     const hasHybrid = /hybrid|flexible/i.test(resumeText)
147:     const work_type: SmartProfile['work_type'] = hasRemote ? 'remote' : hasHybrid ? 'hybrid' : 'flexible'
148:     
149:     // Determine seniority
150:     let seniority_level: SmartProfile['seniority_level'] = 'mid'
151:     if (experience_years < 2) seniority_level = 'entry'
152:     else if (experience_years < 4) seniority_level = 'junior'
153:     else if (experience_years < 7) seniority_level = 'mid'
154:     else if (experience_years < 11) seniority_level = 'senior'
155:     else if (experience_years < 16) seniority_level = 'lead'
156:     else seniority_level = 'executive'
157:     
158:     // Rough salary estimation based on experience
159:     const baseCanadaSalary = 45000 + (experience_years * 5000)
160:     const salary_min = Math.max(40000, baseCanadaSalary - 10000)
161:     const salary_max = baseCanadaSalary + 20000
162:     
163:     return {
164:       location,
165:       experience_years,
166:       salary_min,
167:       salary_max,
168:       salary_currency: 'CAD',
169:       preferred_roles: ['Professional'], // Generic fallback
170:       industries: ['General'],
171:       work_type,
172:       commute_max_km: 45, // Default suburban
173:       auto_apply_ready: experience_years >= 3,
174:       skill_confidence: 60, // Medium confidence for fallback
175:       seniority_level
176:     }
177:   }
178:   
179:   /**
180:    * Cache profile to localStorage for reuse
181:    */
182:   static cacheProfile(profile: SmartProfile): void {
183:     try {
184:       localStorage.setItem('cf:profile', JSON.stringify(profile))
185:       console.log('[PROFILE_EXTRACTION] Cached profile:', profile.location, profile.seniority_level)
186:     } catch (error) {
187:       console.warn('[PROFILE_EXTRACTION] Failed to cache profile:', error)
188:     }
189:   }
190:   
191:   /**
192:    * Load cached profile from localStorage
193:    */
194:   static loadCachedProfile(): SmartProfile | null {
195:     try {
196:       const cached = localStorage.getItem('cf:profile')
197:       if (cached) {
198:         const profile = JSON.parse(cached) as SmartProfile
199:         console.log('[PROFILE_EXTRACTION] Loaded cached profile:', profile.location)
200:         return profile
201:       }
202:     } catch (error) {
203:       console.warn('[PROFILE_EXTRACTION] Failed to load cached profile:', error)
204:     }
205:     return null
206:   }
207: }
</file>

<file path="src/lib/resume-generator.ts">
  1: /**
  2:  * Shared Resume Generator
  3:  * 
  4:  * Consolidates resume generation logic with:
  5:  * - Template integration
  6:  * - Job description analysis
  7:  * - Perplexity Agent API
  8:  * - Experience calculation
  9:  * - ATS optimization
 10:  */
 11: 
 12: import { PerplexityService } from './perplexity-service'
 13: import { getTemplateById } from './resume-templates-v2'
 14: import { extractKeywords } from './utils'
 15: 
 16: export interface ResumeGenerationParams {
 17:   resumeData?: ResumeData
 18:   resumeText?: string
 19:   template?: string
 20:   targetJob?: string
 21:   companyName?: string
 22:   jobDescription?: string
 23:   industry?: string
 24:   experienceLevel?: 'entry' | 'mid' | 'senior'
 25:   tone?: 'professional' | 'conversational' | 'technical'
 26: }
 27: 
 28: export interface ResumeData {
 29:   personalInfo: {
 30:     fullName: string
 31:     email: string
 32:     phone: string
 33:     location: string
 34:     linkedin?: string
 35:     website?: string
 36:     summary: string
 37:   }
 38:   experience: Array<{
 39:     id: string
 40:     company: string
 41:     position: string
 42:     location: string
 43:     startDate: string
 44:     endDate: string
 45:     current: boolean
 46:     description: string
 47:     achievements: string[]
 48:     technologies: string[]
 49:   }>
 50:   education: Array<{
 51:     id: string
 52:     institution: string
 53:     degree: string
 54:     field: string
 55:     location: string
 56:     graduationDate: string
 57:     gpa?: string
 58:     honors?: string[]
 59:   }>
 60:   skills: {
 61:     technical: string[]
 62:     soft: string[]
 63:     languages: Array<{ language: string; proficiency: string }>
 64:     certifications: Array<{ name: string; issuer: string; date: string; expiry?: string }>
 65:   }
 66:   projects: Array<{
 67:     id: string
 68:     name: string
 69:     description: string
 70:     technologies: string[]
 71:     url?: string
 72:     github?: string
 73:     startDate: string
 74:     endDate: string
 75:   }>
 76: }
 77: 
 78: export interface ResumeGenerationResult {
 79:   resumeData: ResumeData
 80:   html: string
 81:   plainText: string
 82:   template: string
 83:   matchScore?: number
 84:   suggestions: string[]
 85:   preview?: {
 86:     thumbnail: string | null
 87:     summary: string | null
 88:   }
 89: }
 90: 
 91: /**
 92:  * Generate optimized resume with full integration
 93:  */
 94: export async function generateResume(params: ResumeGenerationParams): Promise<ResumeGenerationResult> {
 95:   const {
 96:     resumeData,
 97:     resumeText,
 98:     template = 'modern',
 99:     targetJob,
100:     companyName,
101:     jobDescription,
102:     industry,
103:     experienceLevel = 'mid',
104:     tone = 'professional'
105:   } = params
106: 
107:   console.log('[RESUME_GEN] Starting generation with template:', template)
108:   console.log('[RESUME_GEN] Has structured data:', !!resumeData)
109:   console.log('[RESUME_GEN] Has text input:', !!resumeText)
110:   console.log('[RESUME_GEN] Has job description:', !!jobDescription)
111: 
112:   // Get template
113:   const templateObj = getTemplateById(template)
114: 
115:   // Convert text to structured data if needed
116:   let structuredData = resumeData
117:   if (!structuredData && resumeText && resumeText.length > 100) {
118:     console.log('[RESUME_GEN] Converting text to structured data')
119:     structuredData = await convertTextToStructuredData(resumeText)
120:   }
121: 
122:   // If we have a job description, optimize for it
123:   if (jobDescription && jobDescription.length > 20) {
124:     console.log('[RESUME_GEN] Optimizing for job description')
125:     const optimized = await optimizeForJobDescription({
126:       resumeData: structuredData,
127:       resumeText: resumeText || serializeResumeToPlainText(structuredData),
128:       jobDescription,
129:       targetJob,
130:       companyName,
131:       template: templateObj,
132:       tone,
133:       experienceLevel
134:     })
135:     
136:     return optimized
137:   }
138: 
139:   // Otherwise, generate standard optimized resume
140:   if (!structuredData) {
141:     throw new Error('No resume data provided')
142:   }
143: 
144:   console.log('[RESUME_GEN] Generating standard optimized resume')
145:   const optimizedData = await optimizeResumeContent(
146:     structuredData,
147:     targetJob,
148:     industry,
149:     experienceLevel
150:   )
151: 
152:   const html = templateObj.generate(optimizedData)
153:   const fullHtml = wrapWithTemplate(html, templateObj)
154:   const plainText = serializeResumeToPlainText(optimizedData)
155: 
156:   return {
157:     resumeData: optimizedData,
158:     html: fullHtml,
159:     plainText,
160:     template: templateObj.name,
161:     suggestions: [],
162:     preview: {
163:       thumbnail: null,
164:       summary: `${optimizedData.personalInfo.fullName} — ${optimizedData.experience?.[0]?.position || ''}`
165:     }
166:   }
167: }
168: 
169: /**
170:  * Optimize resume for specific job description
171:  */
172: async function optimizeForJobDescription(params: {
173:   resumeData?: ResumeData
174:   resumeText: string
175:   jobDescription: string
176:   targetJob?: string
177:   companyName?: string
178:   template: ReturnType<typeof getTemplateById>
179:   tone: string
180:   experienceLevel: string
181: }): Promise<ResumeGenerationResult> {
182:   const {
183:     resumeData,
184:     resumeText,
185:     jobDescription,
186:     targetJob = 'Role',
187:     companyName = '',
188:     template,
189:     tone,
190:     experienceLevel
191:   } = params
192: 
193:   // Extract keywords from job description
194:   const keywords = extractKeywords(jobDescription)
195:   const keywordsList = Array.isArray(keywords) ? keywords.slice(0, 20) : []
196: 
197:   console.log('[RESUME_GEN] Extracted keywords:', keywordsList.length)
198: 
199:   // Build template-specific prompt
200:   const systemPrompt = buildTemplatePrompt(template, targetJob, companyName, tone, keywordsList, experienceLevel)
201: 
202:   const userPrompt = `Original resume (plain text):
203: ${resumeText}
204: 
205: Target job description:
206: ${jobDescription}
207: 
208: RETURN: HTML fragment with EXACT content from original resume, reformatted to emphasize relevant experience. DO NOT invent new achievements or responsibilities. Only reorder and emphasize existing content.`
209: 
210:   // Call Perplexity
211:   const ppx = new PerplexityService()
212:   const result = await ppx.makeRequest(systemPrompt, userPrompt, {
213:     maxTokens: 3000,
214:     temperature: 0.35
215:   })
216: 
217:   const htmlFragment = (result.content || '').trim()
218:   const fullHtml = wrapWithTemplate(htmlFragment, template)
219:   const plainText = htmlFragment.replace(/<[^>]+>/g, '').trim()
220: 
221:   // Calculate match score
222:   const matchScore = calculateMatchScore(plainText, keywordsList)
223: 
224:   // Generate suggestions
225:   const suggestions = generateSuggestions(plainText, keywordsList, jobDescription)
226: 
227:   return {
228:     resumeData: resumeData || ({} as ResumeData),
229:     html: fullHtml,
230:     plainText,
231:     template: template.name,
232:     matchScore,
233:     suggestions,
234:     preview: {
235:       thumbnail: null,
236:       summary: null
237:     }
238:   }
239: }
240: 
241: /**
242:  * Build template-specific system prompt
243:  */
244: function buildTemplatePrompt(
245:   template: ReturnType<typeof getTemplateById>,
246:   targetJob: string,
247:   companyName: string,
248:   tone: string,
249:   keywords: string[],
250:   experienceLevel: string
251: ): string {
252:   const basePrompts: Record<string, string> = {
253:     professional: `You are a seasoned executive resume writer for traditional, corporate-focused resumes.
254: 
255: TEMPLATE: Professional
256: TARGET: ${targetJob} at ${companyName}
257: TONE: ${tone}
258: EXPERIENCE LEVEL: ${experienceLevel}
259: 
260: FORMATTING: Traditional, ATS-safe, quantified achievements, leadership emphasis.
261: KEYWORDS: ${keywords.join(', ')}
262: STRUCTURE: Executive Summary; Core Competencies; Experience; Education; Affiliations; Achievements.`,
263: 
264:     creative: `You are a creative industry resume specialist for marketing/design roles.
265: 
266: TEMPLATE: Creative
267: TARGET: ${targetJob} at ${companyName}
268: TONE: ${tone}
269: EXPERIENCE LEVEL: ${experienceLevel}
270: 
271: FORMATTING: Balanced creativity + ATS compatibility, project outcomes, metrics.
272: KEYWORDS: ${keywords.join(', ')}
273: STRUCTURE: Creative Profile; Core Creative Competencies; Experience; Projects; Education; Proficiencies.`,
274: 
275:     tech: `You are a technical resume specialist for engineering roles.
276: 
277: TEMPLATE: Tech-Focused
278: TARGET: ${targetJob} at ${companyName}
279: TONE: ${tone}
280: EXPERIENCE LEVEL: ${experienceLevel}
281: 
282: FORMATTING: Precise technical terminology, system metrics, architecture decisions.
283: KEYWORDS: ${keywords.join(', ')}
284: STRUCTURE: Technical Summary; Technical Skills; Experience; Projects; Education; Achievements.`,
285: 
286:     modern: `You are an expert resume writer for modern, ATS-optimized resumes.
287: 
288: TEMPLATE: Modern
289: TARGET: ${targetJob} at ${companyName}
290: TONE: ${tone}
291: EXPERIENCE LEVEL: ${experienceLevel}
292: 
293: FORMATTING: Clean, scannable, quantified achievements, standard headings.
294: KEYWORDS: ${keywords.join(', ')}
295: STRUCTURE: Summary; Core Competencies; Experience; Education; Technical Skills; Achievements.`
296:   }
297: 
298:   const basePrompt = basePrompts[template.id] || basePrompts.modern
299: 
300:   return `${basePrompt}
301: 
302: STRICT OUTPUT: Return ONLY an HTML fragment using classes: .section, .section-header, .job-entry, .job-title, .company-info, .job-description (UL of LIs). No markdown; no <html>/<head>/<body>.
303: 
304: 🚨 CRITICAL RULES:
305: 1. NEVER fabricate job descriptions, achievements, or responsibilities
306: 2. NEVER add details not explicitly stated in the original resume
307: 3. ONLY reformat existing content to highlight relevant experience
308: 4. ONLY reorder sections to emphasize skills matching the job description
309: 5. Use exact wording from original resume for all accomplishments
310: 6. You may only: rearrange bullet points, emphasize matching keywords, improve formatting`
311: }
312: 
313: /**
314:  * Optimize resume content with AI
315:  */
316: async function optimizeResumeContent(
317:   resumeData: ResumeData,
318:   targetJob?: string,
319:   industry?: string,
320:   experienceLevel?: string
321: ): Promise<ResumeData> {
322:   const ppx = new PerplexityService()
323: 
324:   const prompt = `Optimize this resume for a ${experienceLevel || 'mid-level'} ${targetJob || 'professional'} position in the ${industry || 'technology'} industry. Focus on:
325: 
326: 1. Professional summary that highlights key strengths and career goals
327: 2. Experience descriptions with quantifiable achievements
328: 3. Skills prioritization based on industry relevance
329: 4. Education and certifications optimization
330: 5. Overall ATS compatibility and keyword integration
331: 
332: Original Resume Data:
333: ${JSON.stringify(resumeData, null, 2)}
334: 
335: Return optimized JSON with the same structure but enhanced content.`
336: 
337:   try {
338:     const result = await ppx.makeRequest(
339:       'You are an expert resume writer and career counselor. Optimize resumes for maximum impact and ATS compatibility. Return strict JSON with the same structure as input.',
340:       prompt,
341:       { temperature: 0.4, maxTokens: 2000 }
342:     )
343: 
344:     let text = (result.content || '').trim()
345: 
346:     // Strip markdown code blocks
347:     text = text.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '')
348: 
349:     // Extract JSON
350:     const jsonMatch = text.match(/(\{[\s\S]*\}|\[[\s\S]*\])/)
351:     if (jsonMatch) {
352:       text = jsonMatch[0]
353:     }
354: 
355:     if (text) {
356:       console.log('[RESUME_GEN] Parsing optimized content')
357:       const optimized = JSON.parse(text)
358:       return optimized
359:     }
360:   } catch (e) {
361:     console.error('[RESUME_GEN] Optimization failed:', e)
362:   }
363: 
364:   return resumeData
365: }
366: 
367: /**
368:  * Convert text to structured data using Perplexity
369:  */
370: async function convertTextToStructuredData(resumeText: string): Promise<ResumeData> {
371:   const { extractEnterpriseJSON } = await import('./utils/enterprise-json-extractor')
372:   const ppx = new PerplexityService()
373: 
374:   const prompt = `Extract structured resume data from this text:
375: 
376: ${resumeText}
377: 
378: Return ONLY JSON (no markdown, no explanations):
379: {
380:   "personalInfo": {
381:     "fullName": "Full Name",
382:     "email": "email@example.com",
383:     "phone": "phone number",
384:     "location": "City, State/Province",
385:     "summary": "Professional summary"
386:   },
387:   "experience": [{
388:     "id": "1",
389:     "company": "Company Name",
390:     "position": "Job Title",
391:     "location": "Location",
392:     "startDate": "YYYY-MM",
393:     "endDate": "YYYY-MM or Present",
394:     "current": false,
395:     "description": "Role description",
396:     "achievements": ["Achievement 1", "Achievement 2"],
397:     "technologies": ["Tech 1", "Tech 2"]
398:   }],
399:   "education": [{
400:     "id": "1",
401:     "institution": "School Name",
402:     "degree": "Degree Type",
403:     "field": "Field of Study",
404:     "location": "Location",
405:     "graduationDate": "YYYY-MM"
406:   }],
407:   "skills": {
408:     "technical": ["Skill 1", "Skill 2"],
409:     "soft": ["Skill 1", "Skill 2"],
410:     "languages": [],
411:     "certifications": []
412:   },
413:   "projects": []
414: }`
415: 
416:   const response = await ppx.makeRequest(
417:     'You extract structured resume data from unstructured text. Return only valid JSON.',
418:     prompt,
419:     { temperature: 0.2, maxTokens: 2000 }
420:   )
421: 
422:   const extractionResult = extractEnterpriseJSON(response.content)
423: 
424:   if (!extractionResult.success) {
425:     throw new Error(`Failed to extract structured data: ${extractionResult.error}`)
426:   }
427: 
428:   return extractionResult.data as ResumeData
429: }
430: 
431: /**
432:  * Serialize resume to plain text
433:  */
434: function serializeResumeToPlainText(data: ResumeData | undefined): string {
435:   if (!data) return ''
436: 
437:   try {
438:     const sections: string[] = []
439: 
440:     // Personal info
441:     sections.push(`${data.personalInfo.fullName}\n${data.personalInfo.email} | ${data.personalInfo.phone} | ${data.personalInfo.location}`)
442: 
443:     // Summary
444:     if (data.personalInfo.summary) {
445:       sections.push(`\nSummary\n${data.personalInfo.summary}`)
446:     }
447: 
448:     // Skills
449:     if (Array.isArray(data.skills?.technical) || Array.isArray(data.skills?.soft)) {
450:       sections.push(`\nSkills\n${[...(data.skills.technical || []), ...(data.skills.soft || [])].join(', ')}`)
451:     }
452: 
453:     // Experience
454:     if (Array.isArray(data.experience)) {
455:       sections.push(`\nExperience`)
456:       for (const exp of data.experience) {
457:         sections.push(`${exp.position} — ${exp.company} (${exp.startDate} - ${exp.current ? 'Present' : exp.endDate})\n- ${exp.description}`)
458:         if (exp.achievements && exp.achievements.length > 0) {
459:           exp.achievements.forEach(ach => sections.push(`- ${ach}`))
460:         }
461:       }
462:     }
463: 
464:     // Education
465:     if (Array.isArray(data.education)) {
466:       sections.push(`\nEducation`)
467:       for (const edu of data.education) {
468:         sections.push(`${edu.degree} in ${edu.field} — ${edu.institution} (${edu.graduationDate})`)
469:       }
470:     }
471: 
472:     return sections.join('\n')
473:   } catch {
474:     return ''
475:   }
476: }
477: 
478: /**
479:  * Wrap HTML fragment with template CSS
480:  */
481: function wrapWithTemplate(htmlFragment: string, template: ReturnType<typeof getTemplateById>): string {
482:   const safe = (htmlFragment || '').replace(/<\/?(html|head|body|style)[^>]*>/gi, '')
483:   return `<!DOCTYPE html><html><head><meta charset="utf-8"><style>${template.css}</style></head><body><div class="resume-container">${safe}</div></body></html>`
484: }
485: 
486: /**
487:  * Calculate match score between resume and keywords
488:  */
489: function calculateMatchScore(resumeText: string, keywords: string[]): number {
490:   if (!keywords || keywords.length === 0) return 0
491: 
492:   const lowerText = resumeText.toLowerCase()
493:   const matchedKeywords = keywords.filter(kw => lowerText.includes(kw.toLowerCase()))
494: 
495:   return Math.round((matchedKeywords.length / keywords.length) * 100)
496: }
497: 
498: /**
499:  * Generate suggestions for improvement
500:  */
501: function generateSuggestions(resumeText: string, keywords: string[], jobDescription: string): string[] {
502:   const suggestions: string[] = []
503:   const lowerText = resumeText.toLowerCase()
504: 
505:   // Check for missing keywords
506:   const missingKeywords = keywords.filter(kw => !lowerText.includes(kw.toLowerCase()))
507:   if (missingKeywords.length > 0) {
508:     suggestions.push(`Consider adding these keywords: ${missingKeywords.slice(0, 5).join(', ')}`)
509:   }
510: 
511:   // Check for quantifiable achievements
512:   const hasNumbers = /\d+%|\d+\+|\$\d+/.test(resumeText)
513:   if (!hasNumbers) {
514:     suggestions.push('Add quantifiable achievements (e.g., "Increased sales by 25%")')
515:   }
516: 
517:   // Check for action verbs
518:   const actionVerbs = ['led', 'managed', 'developed', 'implemented', 'designed', 'created']
519:   const hasActionVerbs = actionVerbs.some(verb => lowerText.includes(verb))
520:   if (!hasActionVerbs) {
521:     suggestions.push('Use strong action verbs to describe your accomplishments')
522:   }
523: 
524:   return suggestions
525: }
</file>

<file path="src/app/api/cover-letter/generate/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server';
  2: import { getServerSession } from 'next-auth/next';
  3: import connectToDatabase from '@/lib/mongodb';
  4: import Resume from '@/models/Resume';
  5: import CompanyData from '@/models/CompanyData';
  6: import { authOptions } from '@/lib/auth';
  7: import { generateCoverLetter } from '@/lib/cover-letter-generator';
  8: import CoverLetter from '@/models/CoverLetter';
  9: import { isRateLimited } from '@/lib/rate-limit';
 10: import { coverLetterRawSchema } from '@/lib/validators';
 11: import { getOrCreateRequestId, logRequestStart, logRequestEnd, now, durationMs } from '@/lib/observability'
 12: 
 13: export const runtime = 'nodejs'
 14: export const dynamic = 'force-dynamic'
 15: 
 16: // NOTE: calculateYearsFromResume moved to cover-letter-generator.ts
 17: // This function is no longer needed here
 18: 
 19: // DEPRECATED: Keeping for reference, but not used
 20: function calculateYearsFromResumeOLD(resumeText: string): number {
 21:   // Extract only the work experience section to avoid counting education dates
 22:   const experienceSection = extractExperienceSection(resumeText)
 23:   
 24:   // Match date ranges in various formats
 25:   const dateRegex = /(\w+\s+\d{4}|(\d{1,2}\/\d{4}))\s*[-–—]\s*(\w+\s+\d{4}|Present|Current|(\d{1,2}\/\d{4}))/gi
 26:   const matches = Array.from(experienceSection.matchAll(dateRegex))
 27:   
 28:   // Parse all date ranges into start/end pairs
 29:   const periods: Array<{ start: Date; end: Date }> = []
 30:   for (const match of matches) {
 31:     try {
 32:       const startStr = match[1]
 33:       const endStr = match[3]
 34:       
 35:       const startDate = new Date(startStr)
 36:       const endDate = endStr.match(/Present|Current/i) ? new Date() : new Date(endStr)
 37:       
 38:       // Validate dates are reasonable (not in future, not before 1970)
 39:       if (startDate.getFullYear() < 1970 || startDate.getFullYear() > new Date().getFullYear()) continue
 40:       if (endDate.getFullYear() < 1970 || endDate.getFullYear() > new Date().getFullYear() + 1) continue
 41:       if (startDate > endDate) continue // Skip invalid ranges
 42:       
 43:       const months = (endDate.getFullYear() - startDate.getFullYear()) * 12 + 
 44:                     (endDate.getMonth() - startDate.getMonth())
 45:       
 46:       // Sanity check: skip periods longer than 50 years or negative
 47:       if (months > 0 && months < 600) {
 48:         periods.push({ start: startDate, end: endDate })
 49:       }
 50:     } catch (e) {
 51:       // Skip invalid dates
 52:       continue
 53:     }
 54:   }
 55:   
 56:   // If no valid periods found, return 0
 57:   if (periods.length === 0) return 0
 58:   
 59:   // Sort periods by start date
 60:   periods.sort((a, b) => a.start.getTime() - b.start.getTime())
 61:   
 62:   // Merge overlapping periods to avoid double-counting
 63:   const merged: Array<{ start: Date; end: Date }> = []
 64:   let current = periods[0]
 65:   
 66:   for (let i = 1; i < periods.length; i++) {
 67:     const next = periods[i]
 68:     
 69:     // If periods overlap or are adjacent, merge them
 70:     if (next.start <= current.end) {
 71:       current.end = new Date(Math.max(current.end.getTime(), next.end.getTime()))
 72:     } else {
 73:       // No overlap, push current and start new period
 74:       merged.push(current)
 75:       current = next
 76:     }
 77:   }
 78:   merged.push(current)
 79:   
 80:   // Calculate total months from merged periods
 81:   let totalMonths = 0
 82:   for (const period of merged) {
 83:     const months = (period.end.getFullYear() - period.start.getFullYear()) * 12 + 
 84:                   (period.end.getMonth() - period.start.getMonth())
 85:     totalMonths += months
 86:   }
 87:   
 88:   const years = Math.round(totalMonths / 12)
 89:   
 90:   // CRITICAL FIX: Cap at realistic maximum
 91:   // Assume candidate started working at age 18, max age 65
 92:   // Most candidates are 25-45, so cap at 25 years to be safe
 93:   const maxRealisticYears = 25
 94:   const cappedYears = Math.min(years, maxRealisticYears)
 95:   
 96:   // If calculated years seem unrealistic (>25), round down to nearest 5
 97:   if (cappedYears > 15) {
 98:     return Math.floor(cappedYears / 5) * 5
 99:   }
100:   
101:   return cappedYears
102: }
103: 
104: // Extract work experience section from resume to avoid counting education dates
105: function extractExperienceSection(resumeText: string): string {
106:   const text = resumeText.toLowerCase()
107:   
108:   // Find work experience section markers
109:   const experienceMarkers = [
110:     'work experience',
111:     'professional experience',
112:     'employment history',
113:     'experience',
114:     'work history',
115:     'career history'
116:   ]
117:   
118:   // Find education section markers to exclude
119:   const educationMarkers = [
120:     'education',
121:     'academic background',
122:     'academic history',
123:     'degrees'
124:   ]
125:   
126:   let experienceStart = -1
127:   let experienceMarker = ''
128:   
129:   // Find the earliest experience marker
130:   for (const marker of experienceMarkers) {
131:     const index = text.indexOf(marker)
132:     if (index !== -1 && (experienceStart === -1 || index < experienceStart)) {
133:       experienceStart = index
134:       experienceMarker = marker
135:     }
136:   }
137:   
138:   // If no experience section found, use entire resume (fallback)
139:   if (experienceStart === -1) return resumeText
140:   
141:   // Find where experience section ends (usually at education or end of document)
142:   let experienceEnd = resumeText.length
143:   for (const marker of educationMarkers) {
144:     const index = text.indexOf(marker, experienceStart + experienceMarker.length)
145:     if (index !== -1 && index < experienceEnd) {
146:       experienceEnd = index
147:     }
148:   }
149:   
150:   return resumeText.substring(experienceStart, experienceEnd)
151: }
152: 
153: export async function POST(request: NextRequest) {
154:   try {
155:     if (!process.env.PERPLEXITY_API_KEY) return NextResponse.json({ error: 'AI temporarily unavailable (missing PERPLEXITY_API_KEY)' }, { status: 503 })
156:     const requestId = getOrCreateRequestId(request.headers as any)
157:     const startedAt = now()
158:     const routeKey = 'cover-letter:generate'
159:     logRequestStart(routeKey, requestId)
160:     // Check authentication
161:     const session = await getServerSession(authOptions);
162:     if (!session?.user?.email) {
163:       return NextResponse.json(
164:         { error: 'Unauthorized' },
165:         { status: 401 }
166:       );
167:     }
168: 
169:     const body = await request.json();
170:     const { jobApplicationId, resumeId, tone = 'professional', length = 'medium', raw, save, psychology: psychologyFromBody } = body;
171: 
172:     const rl = await isRateLimited((session.user as any).id, 'cover-letter');
173:     if (rl) {
174:       return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });
175:     }
176: 
177:     // RAW INPUT MODE: allow direct inputs without DB lookups
178:     if (!jobApplicationId && !resumeId && raw === true) {
179:       // Extract and validate required fields BEFORE Zod validation
180:       const { jobTitle, companyName, resumeText, template } = body;
181:       let { jobDescription } = body;
182:       
183:       // Allow empty jobDescription - use generic text (BEFORE validation)
184:       if (!jobDescription || jobDescription.trim() === '') {
185:         jobDescription = `Position at ${companyName} for ${jobTitle} role.`
186:         console.log('[COVER_LETTER] No job description provided, using generic text')
187:       }
188:       
189:       // Now validate with Zod (jobDescription is already set)
190:       const parsed = coverLetterRawSchema.safeParse({ ...body, jobDescription });
191:       if (!parsed.success) {
192:         console.error('[COVER_LETTER] Validation failed:', parsed.error.issues)
193:         return NextResponse.json({ error: 'Invalid input', details: parsed.error.issues }, { status: 400 });
194:       }
195:       
196:       if (!jobTitle || !companyName || !resumeText) {
197:         console.error('[COVER_LETTER] Missing required fields:', { jobTitle: !!jobTitle, companyName: !!companyName, resumeText: !!resumeText })
198:         return NextResponse.json(
199:           { error: 'Missing required fields: jobTitle, companyName, resumeText' },
200:           { status: 400 }
201:         );
202:       }
203: 
204:       // Get candidate info
205:       const candidateName = session.user.name || ''
206:       const candidateEmail = session.user.email || ''
207:       
208:       // Get hiring contact if available
209:       let hiringContact = ''
210:       try {
211:         const ja = (await import('@/models/JobApplication')).default
212:         const recent = await ja.findOne({ userId: session.user.id }).sort({ createdAt: -1 })
213:         if (recent?.context?.hiringContactName) hiringContact = recent.context.hiringContactName
214:       } catch {}
215: 
216:       // Use shared cover letter generator
217:       const result = await generateCoverLetter({
218:         resumeText,
219:         jobTitle,
220:         companyName,
221:         jobDescription,
222:         candidateName,
223:         candidateEmail,
224:         hiringContactName: hiringContact,
225:         templateId: template || 'modern',
226:         tone,
227:         psychology: psychologyFromBody,
228:       })
229:       
230:       const { coverLetter, authenticity: report, wordCount, preview } = result
231:       const keyPoints: string[] = []
232:       
233:       console.log('[COVER_LETTER] Generated:', wordCount, 'words, authenticity score:', report.authenticityScore)
234: 
235:       if (save === true) {
236:         await connectToDatabase();
237:         await CoverLetter.create({
238:           userId: session.user.id,
239:           jobTitle,
240:           companyName,
241:           jobDescription,
242:           resumeSnapshot: (resumeText as string).slice(0, 4000),
243:           content: coverLetter,
244:           tone,
245:           length,
246:         })
247:       }
248:       const resp = NextResponse.json({
249:         success: true,
250:         coverLetter,
251:         keyPoints,
252:         authenticity: report,
253:         wordCount,
254:         preview
255:       });
256:       resp.headers.set('x-request-id', requestId)
257:       logRequestEnd(routeKey, requestId, 200, durationMs(startedAt))
258:       return resp
259:     }
260: 
261:     if (!jobApplicationId || !resumeId) {
262:       return NextResponse.json(
263:         { error: 'Missing required fields: jobApplicationId, resumeId' },
264:         { status: 400 }
265:       );
266:     }
267: 
268:     // Connect to database
269:     await connectToDatabase();
270: 
271:     // Find the resume
272:     const resume = await Resume.findOne({
273:       _id: resumeId,
274:       userId: session.user.id
275:     });
276: 
277:     if (!resume) {
278:       return NextResponse.json(
279:         { error: 'Resume not found' },
280:         { status: 404 }
281:       );
282:     }
283: 
284:     // Find the job application
285:     const JobApplication = (await import('@/models/JobApplication')).default;
286:     const jobApplication = await JobApplication.findOne({
287:       _id: jobApplicationId,
288:       userId: session.user.id
289:     });
290: 
291:     if (!jobApplication) {
292:       return NextResponse.json(
293:         { error: 'Job application not found' },
294:         { status: 404 }
295:       );
296:     }
297: 
298:     // Get company research data
299:     let companyPsychology: Record<string, unknown> | undefined = undefined;
300:     if (jobApplication.companyResearch) {
301:       const companyData = await CompanyData.findById(jobApplication.companyResearch);
302:       if (companyData) companyPsychology = companyData;
303:     }
304:     // Merge stored context (psychology) if present
305:     if (!companyPsychology && jobApplication.context?.companyData) {
306:       companyPsychology = jobApplication.context.companyData;
307:     }
308: 
309:     // Get candidate info
310:     const candidateName = session.user.name || ''
311:     const hiringContactName = jobApplication.context?.hiringContactName || ''
312:     
313:     // Use shared cover letter generator (SECOND PATH - now using shared code!)
314:     const result2 = await generateCoverLetter({
315:       resumeText: resume.extractedText || '',
316:       jobTitle: jobApplication.jobTitle,
317:       companyName: jobApplication.companyName,
318:       jobDescription: jobApplication.jobDescription,
319:       candidateName,
320:       hiringContactName,
321:       templateId: (body.template as string) || 'modern',
322:       tone,
323:       psychology: companyPsychology,
324:     })
325:     
326:     const { coverLetter, authenticity: report, wordCount, preview: preview2 } = result2
327:     const keyPoints: string[] = []
328:     
329:     console.log('[COVER_LETTER] Generated (DB path):', wordCount, 'words, authenticity score:', report.authenticityScore)
330: 
331:     if (save === true) {
332:       await CoverLetter.create({
333:         userId: session.user.id,
334:         applicationId: jobApplication._id,
335:         jobTitle: jobApplication.jobTitle,
336:         companyName: jobApplication.companyName,
337:         jobDescription: jobApplication.jobDescription,
338:         resumeSnapshot: (resume.extractedText || '').slice(0, 4000),
339:       content: coverLetter,
340:         tone,
341:         length,
342:       })
343:     }
344: 
345:     const resp2 = NextResponse.json({
346:       success: true,
347:       coverLetter,
348:       keyPoints,
349:       authenticity: report,
350:       wordCount,
351:       preview: preview2
352:     });
353:     resp2.headers.set('x-request-id', requestId)
354:     logRequestEnd(routeKey, requestId, 200, durationMs(startedAt))
355:     return resp2
356: 
357:   } catch (error) {
358:     console.error('Cover letter generation error:', error);
359:     return NextResponse.json(
360:       { error: 'Failed to generate cover letter' },
361:       { status: 500 }
362:     );
363:   }
364: }
</file>

<file path="src/app/api/resume/scrape-linkedin/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { authOptions } from '@/lib/auth'
  4: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
  5: 
  6: /**
  7:  * Scrape LinkedIn profile from URL using Perplexity + Advanced Scraper
  8:  * This uses Perplexity's web search to extract profile data with fallback to direct scraping
  9:  */
 10: export async function POST(request: NextRequest) {
 11:   try {
 12:     const session = await getServerSession(authOptions)
 13:     if (!session?.user) {
 14:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 15:     }
 16: 
 17:     const { url } = await request.json()
 18: 
 19:     if (!url || !url.includes('linkedin.com/in/')) {
 20:       return NextResponse.json(
 21:         { error: 'Invalid LinkedIn profile URL' },
 22:         { status: 400 }
 23:       )
 24:     }
 25: 
 26:     console.log('[LINKEDIN_SCRAPE] Scraping profile:', url)
 27: 
 28:     // Use Perplexity with web search to extract profile data
 29:     const prompt = `Extract ALL information from this LinkedIn profile: ${url}
 30: 
 31: Please extract and structure the following data in JSON format:
 32: 
 33: {
 34:   "personalInfo": {
 35:     "fullName": "Full Name",
 36:     "email": "email if visible",
 37:     "phone": "phone if visible",
 38:     "location": "City, State/Country",
 39:     "linkedin": "${url}",
 40:     "website": "personal website if listed",
 41:     "summary": "About/Summary section"
 42:   },
 43:   "experience": [
 44:     {
 45:       "id": "unique-id",
 46:       "company": "Company Name",
 47:       "position": "Job Title",
 48:       "location": "City, State",
 49:       "startDate": "YYYY-MM",
 50:       "endDate": "YYYY-MM or Present",
 51:       "current": true/false,
 52:       "description": "Job description",
 53:       "achievements": ["achievement 1", "achievement 2"],
 54:       "technologies": ["skill1", "skill2"]
 55:     }
 56:   ],
 57:   "education": [
 58:     {
 59:       "id": "unique-id",
 60:       "institution": "University Name",
 61:       "degree": "Degree Type",
 62:       "field": "Field of Study",
 63:       "location": "City, State",
 64:       "graduationDate": "YYYY-MM",
 65:       "gpa": "GPA if listed",
 66:       "honors": ["honor1", "honor2"]
 67:     }
 68:   ],
 69:   "skills": {
 70:     "technical": ["skill1", "skill2"],
 71:     "soft": ["skill1", "skill2"],
 72:     "languages": [{"language": "English", "proficiency": "Native"}],
 73:     "certifications": [{"name": "Cert Name", "issuer": "Issuer", "date": "YYYY-MM"}]
 74:   },
 75:   "projects": [
 76:     {
 77:       "id": "unique-id",
 78:       "name": "Project Name",
 79:       "description": "Description",
 80:       "technologies": ["tech1", "tech2"],
 81:       "url": "project url if available",
 82:       "startDate": "YYYY-MM",
 83:       "endDate": "YYYY-MM"
 84:     }
 85:   ]
 86: }
 87: 
 88: IMPORTANT:
 89: 1. Use real-time web search to access the LinkedIn profile
 90: 2. Extract ALL visible information including work experience, education, skills
 91: 3. Return ONLY the JSON object, no markdown
 92: 4. If a field is not available, use empty string or empty array
 93: 5. Generate unique IDs for experience, education, and projects
 94: 6. Extract as much detail as possible from the public profile`
 95: 
 96:     // Use Perplexity Intelligence Service with web search
 97:     const result = await PerplexityIntelligenceService.customQuery({
 98:       systemPrompt: 'You are a LinkedIn profile data extractor. Extract structured resume data from public LinkedIn profiles using web search. Return ONLY valid JSON, no markdown.',
 99:       userPrompt: prompt,
100:       temperature: 0.1,
101:       maxTokens: 4000
102:     })
103: 
104:     if (!result.content) {
105:       throw new Error('No data received from LinkedIn profile')
106:     }
107: 
108:     // Parse the JSON response
109:     let resumeData
110:     try {
111:       // Remove markdown code blocks if present
112:       let cleanContent = result.content.trim()
113:       cleanContent = cleanContent.replace(/^```json\s*/i, '').replace(/```\s*$/i, '')
114:       
115:       // Try to extract JSON object
116:       const jsonMatch = cleanContent.match(/\{[\s\S]*\}/)
117:       if (jsonMatch) {
118:         cleanContent = jsonMatch[0]
119:       }
120:       
121:       resumeData = JSON.parse(cleanContent)
122:       console.log('[LINKEDIN_SCRAPE] Successfully parsed resume data')
123:     } catch (parseError) {
124:       console.error('[LINKEDIN_SCRAPE] JSON parse error:', parseError)
125:       console.error('[LINKEDIN_SCRAPE] Content:', result.content.slice(0, 500))
126:       throw new Error('Failed to parse LinkedIn profile data. The profile might be private or the format is unexpected.')
127:     }
128: 
129:     // Validate the data structure
130:     if (!resumeData.personalInfo) {
131:       throw new Error('Incomplete profile data extracted - missing personal info')
132:     }
133: 
134:     return NextResponse.json({
135:       success: true,
136:       resumeData,
137:       message: 'LinkedIn profile imported successfully'
138:     })
139: 
140:   } catch (error) {
141:     console.error('[LINKEDIN_SCRAPE] Error:', error)
142:     return NextResponse.json(
143:       { 
144:         error: error instanceof Error ? error.message : 'Failed to scrape LinkedIn profile',
145:         details: 'Make sure your LinkedIn profile is public or try using the PDF/text paste method instead.'
146:       },
147:       { status: 500 }
148:     )
149:   }
150: }
</file>

<file path="src/app/career-finder/search/page.tsx">
  1: 'use client'
  2: 
  3: // Note: force-dynamic doesn't work on client components, removed
  4: 
  5: import { useState, useEffect } from 'react'
  6: import { MagnifyingGlassIcon, FunnelIcon, MapPinIcon, SparklesIcon } from '@heroicons/react/24/outline'
  7: import { JobCard } from '@/components/job-card'
  8: import { JobStatusBar, type JobStatus } from '@/components/job-status-bar'
  9: import { ModernJobCard } from '@/components/modern-job-card'
 10: import { useSession } from 'next-auth/react'
 11: import { useRouter } from 'next/navigation'
 12: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
 13: import { normalizeSalary, getSalaryDisplayString } from '@/lib/utils/salary-normalizer'
 14: import CareerFinderStorage from '@/lib/career-finder-storage'
 15: import { deduplicateJobs } from '@/lib/job-deduplication'
 16: import { JobCardSkeleton } from '@/components/skeleton-loader'
 17: 
 18: interface JobListing {
 19:   id?: string
 20:   title: string
 21:   company: string
 22:   location: string
 23:   salary?: string
 24:   skills?: string[]
 25:   skillMatchPercent?: number
 26:   aiScore?: number
 27:   url?: string
 28:   source?: string
 29:   [key: string]: unknown
 30: }
 31: 
 32: export default function SearchPage() {
 33:   const router = useRouter()
 34:   const [jobs, setJobs] = useState<JobListing[]>([])
 35:   const [filters, setFilters] = useState({ 
 36:     location: 'Canada', // Default location to prevent API errors, will be overridden by resume data
 37:     salaryMin: '', 
 38:     salaryMax: '', 
 39:     workType: 'all' as 'all' | 'remote' | 'hybrid' | 'onsite' | 'part-time',
 40:     experienceLevel: '' as '' | 'entry' | 'mid' | 'senior' | 'executive'
 41:   })
 42:   const [sidebarOpen, setSidebarOpen] = useState(false)
 43:   const [searchQuery, setSearchQuery] = useState('')
 44:   const [loading, setLoading] = useState(false)
 45:   const [error, setError] = useState('')
 46:   const [showSearchPrompt, setShowSearchPrompt] = useState(false)
 47:   // CRITICAL FIX: Always use AI matching for better results
 48:   const [useResumeMatching, setUseResumeMatching] = useState(true)
 49:   const [activeStatus, setActiveStatus] = useState<JobStatus>('discover')
 50:   const [useModernCards] = useState(true) // Always use modern cards
 51:   const [metadata, setMetadata] = useState<{
 52:     useResumeMatching?: boolean
 53:     searchedBoards?: number
 54:     canadianPriority?: boolean
 55:     cachedResults?: boolean
 56:   } | null>(null)
 57:   const [loadingJobId, setLoadingJobId] = useState<string | null>(null)
 58:   
 59:   const { data: session, status } = useSession()
 60: 
 61:   // ENTERPRISE FIX: Cache job results for 20 minutes
 62:   useEffect(() => {
 63:     // Try to load cached results on mount
 64:     try {
 65:       const cached = localStorage.getItem('cf:jobResults')
 66:       const cacheTime = localStorage.getItem('cf:jobResultsTime')
 67:       
 68:       if (cached && cacheTime) {
 69:         const age = Date.now() - parseInt(cacheTime)
 70:         const TWENTY_MINUTES = 20 * 60 * 1000
 71:         
 72:         if (age < TWENTY_MINUTES) {
 73:           const cachedData = JSON.parse(cached)
 74:           setJobs(cachedData)
 75:           console.log('[CACHE] Loaded', cachedData.length, 'cached jobs, age:', Math.round(age / 60000), 'minutes')
 76:         } else {
 77:           console.log('[CACHE] Expired, clearing cache')
 78:           localStorage.removeItem('cf:jobResults')
 79:           localStorage.removeItem('cf:jobResultsTime')
 80:         }
 81:       }
 82:     } catch (e) {
 83:       console.error('[CACHE] Failed to load:', e)
 84:     }
 85:   }, [])
 86: 
 87:   // Handler for job selection - stores job and navigates to analysis
 88:   const handleJobSelection = async (job: JobListing, jobId: string) => {
 89:     try {
 90:       // Set loading state for this job
 91:       setLoadingJobId(jobId)
 92:       console.log('[SEARCH] 🔄 Loading state set for job:', jobId)
 93:       
 94:       // Store in localStorage with correct key
 95:       const jobData = {
 96:         ...job,
 97:         selectedAt: Date.now()
 98:       }
 99:       
100:       // CRITICAL: Save to localStorage FIRST before navigation
101:       localStorage.setItem('cf:selectedJob', JSON.stringify(jobData))
102:       console.log('[SEARCH] 💾 Saved job to localStorage:', job.title, '@', job.company)
103:       
104:       // VERIFY it was saved
105:       const verify = localStorage.getItem('cf:selectedJob')
106:       console.log('[SEARCH] ✅ Verification - job in storage:', verify ? 'YES' : 'NO')
107:       
108:       // 🔒 CRITICAL: Clear autopilot flag to prevent re-triggering search on redirect
109:       localStorage.removeItem('cf:autopilotReady')
110:       console.log('[SEARCH] 🚫 Cleared autopilot flag to prevent redirect loop')
111:       
112:       // 🚀 ONE-SHOT COMPREHENSIVE RESEARCH: Call it NOW to reduce costs
113:       console.log('[SEARCH] 🔬 Starting comprehensive research...')
114:       try {
115:         // Get resume from localStorage
116:         const resume = CareerFinderStorage.getResume()
117:         if (resume && resume.extractedText) {
118:           // Call comprehensive research endpoint
119:           const researchResponse = await fetch('/api/v2/career-finder/comprehensive-research', {
120:             method: 'POST',
121:             headers: { 'Content-Type': 'application/json' },
122:             body: JSON.stringify({
123:               jobTitle: job.title,
124:               company: job.company,
125:               jobDescription: job.description || job.summary || '',
126:               location: job.location,
127:               resumeText: resume.extractedText,
128:               resumeSkills: resume.personalInfo?.skills || []
129:             })
130:           })
131:           
132:           if (researchResponse.ok) {
133:             const research = await researchResponse.json()
134:             if (research.success && research.data) {
135:               console.log('[SEARCH] ✅ Comprehensive research complete:', {
136:                 matchScore: research.data.jobAnalysis.matchScore,
137:                 contacts: research.data.hiringContacts.length,
138:                 news: research.data.news.length,
139:                 reviews: research.data.reviews.length
140:               })
141:               
142:               // Store comprehensive research with timestamp
143:               const comprehensiveData = {
144:                 ...research.data.companyIntel,
145:                 psychology: research.data.companyPsychology.culture,
146:                 values: research.data.companyPsychology.values,
147:                 marketIntelligence: research.data.marketIntelligence,
148:                 hiringContacts: research.data.hiringContacts,
149:                 news: research.data.news,
150:                 reviews: research.data.reviews,
151:                 sources: research.data.sources,
152:                 confidence: research.data.confidenceLevel,
153:                 timestamp: Date.now(),
154:                 // Also embed job analysis
155:                 jobAnalysis: research.data.jobAnalysis
156:               }
157:               
158:               CareerFinderStorage.setCompanyResearch(comprehensiveData)
159:               console.log('[SEARCH] 💾 Cached comprehensive research for instant page loads')
160:             }
161:           } else {
162:             console.warn('[SEARCH] ⚠️ Comprehensive research failed, pages will fall back to individual calls')
163:           }
164:         }
165:       } catch (researchError) {
166:         console.warn('[SEARCH] ⚠️ Comprehensive research error (non-blocking):', researchError)
167:       }
168:       
169:       // Store in database for history (don't wait for this)
170:       fetch('/api/jobs/store', {
171:         method: 'POST',
172:         headers: { 'Content-Type': 'application/json' },
173:         body: JSON.stringify(job)
174:       }).catch(err => console.error('[SEARCH] Failed to store in DB:', err))
175:       
176:       // Navigate to job analysis page
177:       console.log('[SEARCH] 🚀 Navigating to job-analysis...')
178:       router.push('/career-finder/job-analysis')
179:     } catch (error) {
180:       console.error('Failed to store job:', error)
181:       // Still navigate even if storage fails
182:       router.push('/career-finder/job-analysis')
183:     } finally {
184:       // Clear loading state after navigation
185:       // Note: This will execute before navigation completes, but that's okay
186:       // The loading state serves to show feedback during the async operations
187:       setTimeout(() => setLoadingJobId(null), 500)
188:     }
189:   }
190: 
191:   // ENTERPRISE FIX: Auto-search on mount if query params exist OR autopilot is ready
192:   useEffect(() => {
193:     const params = new URLSearchParams(window.location.search)
194:     const keywords = params.get('keywords')
195:     const location = params.get('location')
196:     
197:     // PERPLEXITY FIX: Read standardized localStorage keys
198:     const autopilotReady = localStorage.getItem('cf:autopilotReady') === '1'
199:     const savedLocation = localStorage.getItem('cf:location') || ''
200:     const savedKeywords = localStorage.getItem('cf:keywords') || ''
201:     const resumeData = localStorage.getItem('cf:resume')
202:     
203:     console.log('[PERPLEXITY AUDIT FIX] Autopilot check:')
204:     console.log('  - autopilotReady:', autopilotReady)
205:     console.log('  - savedLocation:', savedLocation)
206:     console.log('  - savedKeywords:', savedKeywords)
207:     console.log('  - hasResume:', !!resumeData)
208:     console.log('  - hasKeywords:', !!savedKeywords)
209:     
210:     // REMOVED: Don't auto-populate location - let user enter their own
211:     // Location from resume might be outdated or wrong
212:     
213:     // ✅ FIX #6: Show search prompt if cached resume exists but no search performed
214:     if (resumeData && !autopilotReady && jobs.length === 0) {
215:       setShowSearchPrompt(true)
216:     }
217:     
218:     if (keywords || autopilotReady) {
219:       if (keywords) {
220:         setSearchQuery(keywords)
221:       }
222:       if (location) setFilters(prev => ({ ...prev, location }))
223:       
224:       // Perform search
225:       const performInitialSearch = async () => {
226:         let query = keywords
227:         // CRITICAL FIX: Use savedLocation as fallback, not filters.location (state might not be updated yet)
228:         const loc = location || savedLocation || filters.location
229: 
230:         // CRITICAL FIX: Use cached keywords from localStorage (already extracted by autopilot)
231:         if (!query && autopilotReady) {
232:           if (savedKeywords) {
233:             query = savedKeywords
234:             setSearchQuery(savedKeywords)
235:             setUseResumeMatching(true)
236:             console.log('[AUTOPILOT] ✅ Using cached keywords:', savedKeywords)
237:           } else {
238:             console.warn('[AUTOPILOT] ⚠️ autopilotReady but no keywords in localStorage')
239:           }
240:         }
241: 
242:         if (!query || query.trim().length < 2) {
243:           console.log('[AUTOPILOT] No valid query, skipping search')
244:           return
245:         }
246:         if (status === 'unauthenticated') return
247: 
248:         setLoading(true)
249:         setError('')
250:         
251:         try {
252:           // CRITICAL DEBUG: Log exactly what we're sending
253:           const searchPayload = {
254:             keywords: query,
255:             location: loc,
256:             limit: 50,
257:             useResumeMatching: autopilotReady && useResumeMatching
258:           }
259:           console.log('[AUTOPILOT] Performing search with payload:', searchPayload)
260:           console.log('[AUTOPILOT] Location debug:', {
261:             urlParam: location,
262:             savedInLocalStorage: savedLocation,
263:             currentFilterState: filters.location,
264:             finalValue: loc,
265:             isEmpty: !loc || loc.length === 0
266:           })
267:           
268:           const response = await fetch('/api/jobs/search', {
269:             method: 'POST',
270:             headers: { 'Content-Type': 'application/json' },
271:             body: JSON.stringify(searchPayload)
272:           })
273: 
274:           const data = await response.json()
275:           if (response.ok) {
276:             const jobResults = data.jobs || []
277:             setJobs(jobResults)
278:             setMetadata(data.metadata || {})
279:             console.log('[AUTOPILOT] Search completed:', jobResults.length, 'jobs found')
280:             
281:             // ENTERPRISE FIX: Cache results for 20 minutes
282:             try {
283:               localStorage.setItem('cf:jobResults', JSON.stringify(jobResults))
284:               localStorage.setItem('cf:jobResultsTime', Date.now().toString())
285:               console.log('[CACHE] Stored', jobResults.length, 'jobs')
286:             } catch (e) {
287:               console.error('[CACHE] Failed to store:', e)
288:             }
289:           }
290:         } catch (err) {
291:           console.error('[SEARCH] Error:', err)
292:         } finally {
293:           setLoading(false)
294:         }
295:       }
296: 
297:       performInitialSearch()
298:     }
299:     // eslint-disable-next-line react-hooks/exhaustive-deps
300:   }, [])
301: 
302:   const handleFilterChange = (key: string, value: string | boolean | number) => {
303:     setFilters(prev => ({ ...prev, [key]: value }))
304:   }
305: 
306:   const performSearch = async (keywords?: string, location?: string) => {
307:     const query = keywords || searchQuery
308:     const loc = location || filters.location
309: 
310:     if (!query || query.trim().length < 2) {
311:       setError('Please enter at least 2 characters')
312:       return
313:     }
314: 
315:     if (status === 'unauthenticated') {
316:       router.push('/auth/signin?callbackUrl=/career-finder/search')
317:       return
318:     }
319: 
320:     setLoading(true)
321:     setError('')
322:     
323:     try {
324:       console.log(`[SEARCH] Searching for "${query}" in "${loc}" (Resume: ${useResumeMatching})`)
325: 
326:       const response = await fetch('/api/jobs/search', {
327:         method: 'POST',
328:         headers: { 'Content-Type': 'application/json' },
329:         body: JSON.stringify({
330:           keywords: query,
331:           location: loc,
332:           salaryMin: filters.salaryMin ? parseInt(filters.salaryMin) : undefined,
333:           experienceLevel: filters.experienceLevel || undefined,
334:           workType: filters.workType === 'all' ? 'any' : filters.workType,
335:           limit: 50,
336:           useResumeMatching
337:         })
338:       })
339: 
340:       const data = await response.json()
341: 
342:       if (!response.ok) {
343:         throw new Error(data.error || 'Search failed')
344:       }
345: 
346:       console.log(`[SEARCH] Found ${data.jobs.length} jobs from ${data.sources?.length || 0} sources`)
347: 
348:       // ✅ FIX #1: DEDUPLICATE JOBS to prevent infinite loop
349:       const rawJobs = data.jobs || []
350:       const jobResults = deduplicateJobs(rawJobs)
351:       console.log(`[SEARCH] After deduplication: ${jobResults.length} unique jobs`)
352:       
353:       setJobs(jobResults)
354:       setMetadata(data.metadata || {})
355:       
356:       // ENTERPRISE FIX: Cache results for 20 minutes
357:       try {
358:         localStorage.setItem('cf:jobResults', JSON.stringify(jobResults))
359:         localStorage.setItem('cf:jobResultsTime', Date.now().toString())
360:         console.log('[CACHE] Stored', jobResults.length, 'jobs')
361:       } catch (e) {
362:         console.error('[CACHE] Failed to store:', e)
363:       }
364: 
365:       // Show board recommendations
366:       if (data.recommendations) {
367:         console.log(`[SEARCH] Recommended boards: ${data.recommendations.priorityBoards.join(', ')}`)
368:       }
369: 
370:     } catch (err) {
371:       console.error('[SEARCH] Error:', err)
372:       setError((err as Error).message || 'Failed to search jobs')
373:       setJobs([])
374:     } finally {
375:       setLoading(false)
376:     }
377:   }
378: 
379:   const handleSearch = (e: React.FormEvent) => {
380:     e.preventDefault()
381:     performSearch()
382:   }
383: 
384:   const toggleSidebar = () => {
385:     setSidebarOpen(!sidebarOpen)
386:     if (!sidebarOpen) document.body.classList.add('sidebar-open')
387:     else document.body.classList.remove('sidebar-open')
388:   }
389: 
390:   return (
391:     <div className="min-h-screen bg-background">
392:       {/* Hero Search Section */}
393:       <section className="gradient-hero px-4 py-16 rounded-b-[3rem] shadow-2xl relative overflow-hidden">
394:         {/* Animated background blobs */}
395:         <div className="absolute top-0 left-0 w-72 h-72 bg-card/10 rounded-full blur-3xl -translate-x-1/2 -translate-y-1/2"></div>
396:         <div className="absolute bottom-0 right-0 w-96 h-96 bg-card/10 rounded-full blur-3xl translate-x-1/2 translate-y-1/2"></div>
397:         
398:         <div className="max-w-4xl mx-auto relative z-10">
399:           <div className="mb-4">
400:             <CareerFinderBackButton />
401:           </div>
402:           <h1 className="text-4xl md:text-6xl font-bold mb-4 text-foreground text-center drop-shadow-lg">
403:             🚀 Find Your Dream Job
404:           </h1>
405:           <p className="text-foreground/95 text-xl mb-8 text-center font-medium">
406:             Discover opportunities that match your skills and passion
407:           </p>
408:           
409:           <form onSubmit={handleSearch} className="flex flex-col gap-4">
410:             <div className="flex flex-col sm:flex-row gap-3">
411:               <div className="relative flex-1">
412:                 <MagnifyingGlassIcon className="absolute left-4 top-1/2 -translate-y-1/2 w-6 h-6 text-muted-foreground" />
413:                 <input
414:                   type="text"
415:                   placeholder="Search jobs by title, company, or keywords..."
416:                   value={searchQuery}
417:                   onChange={(e) => setSearchQuery(e.target.value)}
418:                   className="modern-input w-full pl-12 pr-4 py-4 text-lg font-medium shadow-xl"
419:                   disabled={loading}
420:                 />
421:               </div>
422:               <div className="flex gap-2">
423:                 <button 
424:                   type="submit" 
425:                   className="btn btn-primary"
426:                   disabled={loading}
427:                 >
428:                   {loading ? (
429:                     <>
430:                       <span className="inline-block animate-spin mr-2">⏳</span>
431:                       <span>Searching...</span>
432:                     </>
433:                   ) : (
434:                     <>
435:                       <MagnifyingGlassIcon className="w-6 h-6 inline mr-2" />
436:                       <span>Search</span>
437:                     </>
438:                   )}
439:                 </button>
440:                 {jobs.length > 0 && (
441:                   <button
442:                     type="button"
443:                     onClick={() => {
444:                       // Clear cache and reset
445:                       localStorage.removeItem('cf:jobResults')
446:                       localStorage.removeItem('cf:jobResultsTime')
447:                       setJobs([])
448:                       setSearchQuery('')
449:                       console.log('[SEARCH] Cache cleared, ready for new search')
450:                     }}
451:                     className="btn btn-secondary bg-white/20 hover:bg-card/30 text-white border-white/30"
452:                     disabled={loading}
453:                   >
454:                     🔄 New Search
455:                   </button>
456:                 )}
457:               </div>
458:             </div>
459:             
460:             {/* AI Matching Always Active Indicator */}
461:             {session && (
462:               <div className="flex items-center gap-3 justify-center">
463:                 <div className="flex items-center gap-2 bg-gradient-to-r from-blue-500/20 to-purple-500/20 backdrop-blur-sm px-6 py-3 rounded-full border border-blue-500/30">
464:                   <SparklesIcon className="w-5 h-5 text-blue-400 animate-pulse" />
465:                   <span className="text-foreground font-semibold text-sm">
466:                     ✨ AI Resume Matching Active
467:                   </span>
468:                   <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
469:                 </div>
470:               </div>
471:             )}
472: 
473:             {/* Error Display */}
474:             {error && (
475:               <div className="bg-red-500/20 border border-red-500 text-foreground px-4 py-2 rounded-xl text-center">
476:                 {error}
477:               </div>
478:             )}
479:           </form>
480:         </div>
481:       </section>
482: 
483:       {/* ✅ FIX #6: Search Prompt Banner for Cached Resume */}
484:       {showSearchPrompt && (
485:         <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
486:           <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 border-2 border-blue-500/30 rounded-2xl p-6 flex items-center gap-4">
487:             <div className="text-4xl">💡</div>
488:             <div className="flex-1">
489:               <h1 className="text-2xl sm:text-3xl font-bold text-foreground mb-2">Find Your Perfect Job</h1>
490:               <p className="text-sm text-muted-foreground">
491:                 We found your resume. Enter keywords above and click Search to find matching jobs, or let AI analyze your resume automatically.
492:               </p>
493:             </div>
494:             <button
495:               onClick={() => setShowSearchPrompt(false)}
496:               className="text-muted-foreground hover:text-foreground transition-colors"
497:             >
498:               ✕
499:             </button>
500:           </div>
501:         </div>
502:       )}
503: 
504:       <div className="flex flex-col lg:flex-row gap-8 max-w-7xl mx-auto px-4 lg:px-8 py-8">
505:         {/* Main Content: Job Grid */}
506:         <main className="flex-1">
507:           <div className="mb-8">
508:             <div className="flex items-center justify-between mb-4">
509:               <div>
510:                 <h2 className="text-3xl font-bold gradient-text">
511:                   {loading ? 'Searching...' : `${jobs.length} Jobs Found`}
512:                 </h2>
513:                 <p className="text-muted-foreground mt-1">
514:                   {loading ? 'Searching 25+ job boards...' : 
515:                    metadata?.useResumeMatching ? 'Ranked by skill match from your resume' :
516:                    metadata?.canadianPriority ? 'Prioritized Canadian sources' :
517:                    'Curated opportunities just for you'}
518:                 </p>
519:               </div>
520:               <div className="flex items-center gap-2">
521:                 <button
522:                   onClick={() => {
523:                     // Clear all cache
524:                     localStorage.removeItem('cf:jobResults')
525:                     localStorage.removeItem('cf:jobResultsTime')
526:                     localStorage.removeItem('cf:location')
527:                     localStorage.removeItem('cf:keywords')
528:                     localStorage.removeItem('cf:autopilotReady')
529:                     setJobs([])
530:                     setSearchQuery('')
531:                     setFilters({ location: '', salaryMin: '', salaryMax: '', workType: 'all', experienceLevel: '' })
532:                     console.log('[CACHE] All cache cleared')
533:                     window.location.reload()
534:                   }}
535:                   className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm font-medium"
536:                 >
537:                   🗑️ Clear Cache
538:                 </button>
539:                 <button 
540:                   onClick={toggleSidebar} 
541:                   className="lg:hidden btn-primary flex items-center gap-2"
542:                 >
543:                   <FunnelIcon className="w-5 h-5" />
544:                   Filters
545:                 </button>
546:               </div>
547:             </div>
548: 
549:             {/* Search Metadata */}
550:             {metadata && jobs.length > 0 && (
551:               <div className="bg-card/50 backdrop-blur-sm border border-border rounded-xl p-4 mb-6">
552:                 <div className="flex flex-wrap gap-4 text-sm">
553:                   {metadata.searchedBoards && (
554:                     <div className="flex items-center gap-2">
555:                       <span className="font-bold">📊</span>
556:                       <span>{metadata.searchedBoards} boards searched</span>
557:                     </div>
558:                   )}
559:                   {metadata.useResumeMatching && (
560:                     <div className="flex items-center gap-2">
561:                       <SparklesIcon className="w-4 h-4 text-primary" />
562:                       <span className="font-bold text-primary">AI Skill Matching Active</span>
563:                     </div>
564:                   )}
565:                   {metadata.cachedResults && (
566:                     <div className="flex items-center gap-2">
567:                       <span className="font-bold">⚡</span>
568:                       <span>Cached results (instant)</span>
569:                     </div>
570:                   )}
571:                 </div>
572:               </div>
573:             )}
574:           </div>
575: 
576:           {/* Job Status Bar - Figma Design */}
577:           {jobs.length > 0 && (
578:             <div className="mb-8">
579:               <JobStatusBar
580:                 activeStatus={activeStatus}
581:                 onStatusChange={setActiveStatus}
582:                 counts={{
583:                   discover: jobs.length,
584:                   saved: 0,
585:                   applied: 0,
586:                   closed: 0,
587:                   discarded: 0
588:                 }}
589:               />
590:             </div>
591:           )}
592: 
593:           {loading ? (
594:             <div className="space-y-6">
595:               {/* Loading Animation Header */}
596:               <div className="text-center py-8">
597:                 <div className="inline-flex items-center gap-3 px-6 py-3 bg-primary/10 rounded-full">
598:                   <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
599:                   <span className="text-primary font-semibold">Finding the best opportunities for you...</span>
600:                 </div>
601:               </div>
602:               
603:               {/* Skeleton Cards */}
604:               <div className="grid grid-cols-1 gap-6 max-w-md mx-auto">
605:                 {[...Array(6)].map((_, i) => (
606:                   <JobCardSkeleton key={i} />
607:                 ))}
608:               </div>
609:             </div>
610:           ) : jobs.length === 0 ? (
611:             <div className="text-center py-12">
612:               <div className="text-6xl mb-4">🔍</div>
613:               <h3 className="text-2xl font-bold mb-2">No jobs found</h3>
614:               <p className="text-muted-foreground">Try adjusting your search or filters</p>
615:             </div>
616:           ) : useModernCards ? (
617:             /* Modern Figma-Inspired Job Cards */
618:             <div className="grid grid-cols-1 gap-6 max-w-md mx-auto">
619:               {jobs.map((job, index) => {
620:                 const colorThemes: Array<'purple' | 'red' | 'yellow'> = ['purple', 'red', 'yellow']
621:                 const colorTheme = colorThemes[index % 3]
622:                 
623:                 // Normalize salary for consistent display
624:                 const normalizedSalary = normalizeSalary(job.salary)
625:                 const salaryDisplay = normalizedSalary 
626:                   ? getSalaryDisplayString(normalizedSalary) 
627:                   : 'Salary not disclosed'
628:                 
629:                 const jobId = job.id || `job-${index}`
630:                 const isJobLoading = loadingJobId === jobId
631:                 
632:                 return (
633:                   <ModernJobCard
634:                     key={jobId}
635:                     id={jobId}
636:                     title={job.title}
637:                     company={job.company}
638:                     location={job.location}
639:                     experience={filters.experienceLevel || 'All levels'}
640:                     workType={filters.workType === 'all' ? 'onsite' : (filters.workType as 'remote' | 'hybrid' | 'onsite' | 'part-time')}
641:                     salary={salaryDisplay}
642:                     description={`AI Score: ${job.aiScore || 'N/A'}${job.skillMatchPercent ? ` | Skill Match: ${job.skillMatchPercent}%` : ''}`}
643:                     postedDate="Posted recently"
644:                     colorTheme={colorTheme}
645:                     onView={() => handleJobSelection(job, jobId)}
646:                     isLoading={isJobLoading}
647:                   />
648:                 )
649:               })}
650:             </div>
651:           ) : (
652:             /* Legacy Job Cards */
653:             <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
654:               {jobs.map((job, index) => {
655:                 // Normalize salary for consistent display
656:                 const normalizedSalary = normalizeSalary(job.salary)
657:                 const salaryDisplay = normalizedSalary 
658:                   ? getSalaryDisplayString(normalizedSalary) 
659:                   : job.salary || 'Salary not disclosed'
660:                 
661:                 return (
662:                   <JobCard 
663:                     key={job.id || `job-${index}`} 
664:                     job={{...job, id: job.id || `job-${index}`, url: job.url || '#', salary: salaryDisplay}} 
665:                   />
666:                 )
667:               })}
668:             </div>
669:           )}
670:         </main>
671: 
672:         {/* Sidebar: Filters */}
673:         <aside className={`hidden lg:block w-80 sticky top-8 self-start`}>
674:           <div className="gradient-border-card">
675:             <div className="flex justify-between items-center mb-6">
676:               <h2 className="text-2xl font-bold gradient-text">
677:                 🎯 Filters
678:               </h2>
679:               <button 
680:                 onClick={() => setFilters({ location: '', salaryMin: '', salaryMax: '', workType: 'all', experienceLevel: '' })}
681:                 className="text-sm text-secondary hover:text-primary font-bold transition-colors"
682:               >
683:                 Clear All
684:               </button>
685:             </div>
686:             
687:             <div className="space-y-6">
688:               {/* Work Type Filter */}
689:               <div>
690:                 <label className="block text-sm font-bold mb-3">💼 Work Type</label>
691:                 <select
692:                   value={filters.workType}
693:                   onChange={(e) => handleFilterChange('workType', e.target.value)}
694:                   className="modern-input w-full"
695:                 >
696:                   <option value="all">All Types</option>
697:                   <option value="remote">🏡 Remote</option>
698:                   <option value="hybrid">🔄 Hybrid</option>
699:                   <option value="onsite">🏢 At Location</option>
700:                   <option value="part-time">⏰ Part-time</option>
701:                 </select>
702:               </div>
703: 
704:               {/* Location Filter */}
705:               <div>
706:                 <label className="block text-sm font-bold mb-3">
707:                   <MapPinIcon className="w-5 h-5 inline mr-1 text-secondary" />
708:                   Location
709:                 </label>
710:                 <input
711:                   type="text"
712:                   placeholder="e.g., Edmonton, AB"
713:                   value={filters.location}
714:                   onChange={(e) => handleFilterChange('location', e.target.value)}
715:                   className="modern-input w-full"
716:                 />
717:               </div>
718: 
719:               {/* Salary Range Filter */}
720:               <div>
721:                 <label className="block text-sm font-bold mb-3">💰 Salary Range</label>
722:                 <input
723:                   type="number"
724:                   placeholder="Min Salary"
725:                   value={filters.salaryMin}
726:                   onChange={(e) => handleFilterChange('salaryMin', e.target.value)}
727:                   className="modern-input w-full mb-3"
728:                 />
729:                 <input
730:                   type="number"
731:                   placeholder="Max Salary"
732:                   value={filters.salaryMax}
733:                   onChange={(e) => handleFilterChange('salaryMax', e.target.value)}
734:                   className="modern-input w-full"
735:                 />
736:               </div>
737: 
738:               {/* Experience Level Filter */}
739:               <div>
740:                 <label className="block text-sm font-bold mb-3">📈 Experience Level</label>
741:                 <select
742:                   value={filters.experienceLevel}
743:                   onChange={(e) => handleFilterChange('experienceLevel', e.target.value)}
744:                   className="modern-input w-full"
745:                 >
746:                   <option value="">Any Level</option>
747:                   <option value="entry">Entry Level</option>
748:                   <option value="mid">Mid Level</option>
749:                   <option value="senior">Senior Level</option>
750:                   <option value="executive">Executive</option>
751:                 </select>
752:               </div>
753:             </div>
754:           </div>
755:         </aside>
756:       </div>
757: 
758:       {/* Mobile Filter Modal */}
759:       {sidebarOpen && (
760:         <>
761:           <div 
762:             className="fixed inset-0 bg-black/50 z-40 lg:hidden" 
763:             onClick={toggleSidebar}
764:           />
765:           <div className="fixed inset-y-0 left-0 w-80 bg-card z-50 lg:hidden overflow-y-auto p-6 shadow-2xl">
766:             <div className="flex justify-between items-center mb-6">
767:               <h2 className="text-xl font-bold">Filters</h2>
768:               <button 
769:                 onClick={toggleSidebar}
770:                 className="p-2 hover:bg-muted rounded-lg transition-colors"
771:               >
772:                 ✕
773:               </button>
774:             </div>
775:             
776:             <div className="space-y-6">
777:               <div className="filter-group">
778:                 <label className="block text-sm font-semibold mb-3">💼 Work Type</label>
779:                 <select
780:                   value={filters.workType}
781:                   onChange={(e) => handleFilterChange('workType', e.target.value)}
782:                   className="modern-input w-full"
783:                 >
784:                   <option value="all">All Types</option>
785:                   <option value="remote">🏡 Remote</option>
786:                   <option value="hybrid">🔄 Hybrid</option>
787:                   <option value="onsite">🏢 At Location</option>
788:                   <option value="part-time">⏰ Part-time</option>
789:                 </select>
790:               </div>
791: 
792:               <div className="filter-group">
793:                 <label className="block text-sm font-semibold mb-3">
794:                   <MapPinIcon className="w-4 h-4 inline mr-1" />
795:                   Location
796:                 </label>
797:                 <input
798:                   type="text"
799:                   placeholder="e.g., Edmonton, AB"
800:                   value={filters.location}
801:                   onChange={(e) => handleFilterChange('location', e.target.value)}
802:                   className="modern-input w-full"
803:                 />
804:               </div>
805: 
806:               <div className="filter-group">
807:                 <label className="block text-sm font-semibold mb-3">Salary Range</label>
808:                 <input
809:                   type="number"
810:                   placeholder="Min Salary"
811:                   value={filters.salaryMin}
812:                   onChange={(e) => handleFilterChange('salaryMin', e.target.value)}
813:                   className="modern-input w-full mb-3"
814:                 />
815:                 <input
816:                   type="number"
817:                   placeholder="Max Salary"
818:                   value={filters.salaryMax}
819:                   onChange={(e) => handleFilterChange('salaryMax', e.target.value)}
820:                   className="modern-input w-full"
821:                 />
822:               </div>
823: 
824:               <button 
825:                 onClick={toggleSidebar}
826:                 className="w-full btn-primary py-3 rounded-xl font-semibold"
827:               >
828:                 Apply Filters
829:               </button>
830:             </div>
831:           </div>
832:         </>
833:       )}
834:     </div>
835:   )
836: }
</file>

<file path="src/app/privacy-policy/page.tsx">
  1: import { Metadata } from 'next'
  2: 
  3: export const metadata: Metadata = {
  4:   title: 'Privacy Policy | Career Lever AI',
  5:   description: 'Learn how Career Lever AI collects, uses, and protects your personal and professional information.',
  6:   robots: 'index, follow'
  7: }
  8: 
  9: export default function PrivacyPolicyPage() {
 10:   return (
 11:     <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
 12:       <div className="max-w-4xl mx-auto px-4 py-12">
 13:         <div className="bg-card rounded-2xl shadow-xl p-8 md:p-12">
 14:           <h1 className="text-4xl font-bold text-center text-blue-600 dark:text-blue-400 mb-4">
 15:             Career Lever AI Privacy Policy
 16:           </h1>
 17:           <p className="text-center text-gray-600 dark:text-gray-400 mb-8">
 18:             <strong>Last Updated:</strong> October 24, 2025
 19:           </p>
 20: 
 21:           <section className="mb-8">
 22:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">1. Introduction</h2>
 23:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 24:               Career Lever AI ("we", "our", "us") is committed to respecting and protecting your privacy.
 25:               This Privacy Policy describes how we collect, use, store, and protect your personal information
 26:               when using our website, platform, and integrated services ("Service").
 27:             </p>
 28:           </section>
 29: 
 30:           <section className="mb-8">
 31:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">2. Information We Collect</h2>
 32:             <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
 33:               <li><strong>Personal Information:</strong> Your name, email, job application data, resumes, and LinkedIn profile details (if authorized).</li>
 34:               <li><strong>Automatically Collected:</strong> Browser type, device info, cookies, IP address, session duration, and usage analytics.</li>
 35:               <li><strong>Third-Party Sources:</strong> Public company insights, recruiter LinkedIn profiles, and verified job postings from APIs and boards such as Indeed, Workopolis, and LinkedIn Jobs.</li>
 36:             </ul>
 37:           </section>
 38: 
 39:           <section className="mb-8">
 40:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">3. How We Use Information</h2>
 41:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
 42:               We use data to:
 43:             </p>
 44:             <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
 45:               <li>Match your resume and skills with open jobs and employers.</li>
 46:               <li>Generate custom insights, cover letters, and analytics for your applications.</li>
 47:               <li>Improve predictive career recommendations and system performance.</li>
 48:               <li>Communicate updates and support messages.</li>
 49:             </ul>
 50:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed mt-3 font-semibold">
 51:               We do not rent or sell your personal data.
 52:             </p>
 53:           </section>
 54: 
 55:           <section className="mb-8">
 56:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">4. Data Sharing and Disclosure</h2>
 57:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
 58:               We may share aggregated or anonymized datasets with analytics vendors or employers you directly interact with.
 59:               Personal info is disclosed only:
 60:             </p>
 61:             <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
 62:               <li>With your consent to connect you to employers or recruiters.</li>
 63:               <li>With cloud and analytics partners who comply with equivalent security standards.</li>
 64:               <li>If required by law or lawful subpoena.</li>
 65:             </ul>
 66:           </section>
 67: 
 68:           <section className="mb-8">
 69:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">5. Data Retention</h2>
 70:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 71:               We store data securely using encrypted cloud infrastructure (AWS, Supabase, Vercel) and retain it
 72:               only as long as required to provide services or as required by law.
 73:               Users can delete data anytime by contacting:{' '}
 74:               <a href="mailto:privacy@careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
 75:                 privacy@careerleverai.com
 76:               </a>
 77:             </p>
 78:           </section>
 79: 
 80:           <section className="mb-8">
 81:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">6. LinkedIn and API Integrations</h2>
 82:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
 83:               If you link your account to LinkedIn:
 84:             </p>
 85:             <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
 86:               <li>We access limited profile fields (name, picture, experience summary, and email if authorized).</li>
 87:               <li>LinkedIn OAuth 2.0 is used for secure token-based login (we never store your LinkedIn password).</li>
 88:               <li>Data access can be revoked from your LinkedIn settings at any time.</li>
 89:             </ul>
 90:           </section>
 91: 
 92:           <section className="mb-8">
 93:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">7. Cookies and Analytics</h2>
 94:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 95:               We use cookies for authentication, session management, and usage analytics via tools like Google
 96:               Analytics and Vercel Insights. You may disable cookies through your browser but some features may be limited.
 97:             </p>
 98:           </section>
 99: 
100:           <section className="mb-8">
101:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">8. Data Security</h2>
102:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
103:               We protect user data with encrypted communications (HTTPS/TLS), access control, and periodic
104:               vulnerability monitoring. No method of online transfer or storage is entirely risk-free, but we maintain industry-grade security standards.
105:             </p>
106:           </section>
107: 
108:           <section className="mb-8">
109:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">9. Your Privacy Rights</h2>
110:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
111:               Depending on your location, you may have rights to:
112:             </p>
113:             <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
114:               <li>Access or request deletion of your personal data.</li>
115:               <li>Withdraw consent for data usage.</li>
116:               <li>Receive a copy of your data in a portable format.</li>
117:               <li>Contact your local data authority under GDPR or CCPA compliance.</li>
118:             </ul>
119:           </section>
120: 
121:           <section className="mb-8">
122:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">10. International Transfers</h2>
123:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
124:               Personal Information may be transferred to servers outside your region. When this occurs, we ensure appropriate data protection safeguards are maintained.
125:             </p>
126:           </section>
127: 
128:           <section className="mb-8">
129:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">11. Updates to Privacy Policy</h2>
130:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
131:               We may update this policy periodically. Updated versions will include a "Last Updated" date at the top of the page.
132:               Material changes will be communicated via email or platform notifications.
133:             </p>
134:           </section>
135: 
136:           <section className="mb-8">
137:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">12. Contact Us</h2>
138:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
139:               For privacy concerns, data requests, or legal inquiries:
140:             </p>
141:             <p className="text-gray-700 dark:text-gray-300 mt-3">
142:               📧 <a href="mailto:privacy@careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
143:                 privacy@careerleverai.com
144:               </a><br />
145:               🌐 <a href="https://careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
146:                 https://careerleverai.com
147:               </a>
148:             </p>
149:           </section>
150: 
151:           <footer className="text-center text-sm text-gray-500 dark:text-gray-400 mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
152:             &copy; 2025 Career Lever AI. All rights reserved. |{' '}
153:             <a href="/" className="text-blue-600 dark:text-blue-400 hover:underline">
154:               Back to Home
155:             </a>
156:           </footer>
157:         </div>
158:       </div>
159:     </div>
160:   )
161: }
</file>

<file path="src/app/terms/page.tsx">
  1: import { Metadata } from 'next'
  2: 
  3: export const metadata: Metadata = {
  4:   title: 'Terms of Service | Career Lever AI',
  5:   description: 'Your agreement when using our AI-powered job search and recruitment automation platform.',
  6:   robots: 'index, follow'
  7: }
  8: 
  9: export default function TermsPage() {
 10:   return (
 11:     <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
 12:       <div className="max-w-4xl mx-auto px-4 py-12">
 13:         <div className="bg-card rounded-2xl shadow-xl p-8 md:p-12">
 14:           <h1 className="text-4xl font-bold text-center text-blue-600 dark:text-blue-400 mb-4">
 15:             Career Lever AI – Terms of Service
 16:           </h1>
 17:           <p className="text-center text-gray-600 dark:text-gray-400 mb-8">
 18:             <strong>Last updated:</strong> October 24, 2025
 19:           </p>
 20: 
 21:           <section className="mb-8">
 22:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">1. Acceptance of Terms</h2>
 23:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 24:               By accessing or using the Career Lever AI website, mobile application, or any AI-based recruitment tools (collectively, the "Service"), you agree to be bound by these Terms of Service ("Terms") and our{' '}
 25:               <a href="/privacy-policy" className="text-blue-600 dark:text-blue-400 hover:underline">Privacy Policy</a>.
 26:             </p>
 27:           </section>
 28: 
 29:           <section className="mb-8">
 30:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">2. About Career Lever AI</h2>
 31:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 32:               Career Lever AI provides artificial intelligence–powered tools designed to streamline job discovery, resume optimization, recruiter outreach, and company intelligence analysis. The Service integrates authorized APIs, such as Perplexity and LinkedIn, to deliver accurate and personalized user experiences.
 33:             </p>
 34:           </section>
 35: 
 36:           <section className="mb-8">
 37:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">3. Eligibility</h2>
 38:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 39:               You must be at least 18 years old to use Career Lever AI. By using this Service, you confirm that you meet the applicable age and legal requirements to form a binding contract.
 40:             </p>
 41:           </section>
 42: 
 43:           <section className="mb-8">
 44:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">4. User Responsibilities</h2>
 45:             <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
 46:               <li>Provide accurate and complete information when creating an account.</li>
 47:               <li>Not share login credentials or misuse platform access tokens.</li>
 48:               <li>Use the Service only for lawful job search or recruitment purposes.</li>
 49:               <li>Refrain from scraping, reselling, or redistributing platform data.</li>
 50:             </ul>
 51:           </section>
 52: 
 53:           <section className="mb-8">
 54:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">5. AI-Generated Content</h2>
 55:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 56:               Career Lever AI uses artificial intelligence for job recommendations, company profiling, and outreach drafting. While we strive for accuracy, AI-generated results are informational only and not guaranteed to be free from error, bias, or incompleteness. Users are encouraged to verify facts before acting on recommendations.
 57:             </p>
 58:           </section>
 59: 
 60:           <section className="mb-8">
 61:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">6. Intellectual Property</h2>
 62:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 63:               All software, AI models, brand assets, and proprietary algorithms within the platform are owned or licensed by Career Lever AI. Users are granted a limited, non-exclusive license for personal or internal business use only.
 64:             </p>
 65:           </section>
 66: 
 67:           <section className="mb-8">
 68:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">7. Third-Party Integrations</h2>
 69:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 70:               Our Service may interface with third-party platforms, including job boards, LinkedIn, and email APIs. By authorizing such integrations, you grant permission for Career Lever AI to access only necessary data as defined by the third party's API policies. We never store third-party passwords.
 71:             </p>
 72:           </section>
 73: 
 74:           <section className="mb-8">
 75:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">8. Limitation of Liability</h2>
 76:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-3">
 77:               To the extent permitted by law, Career Lever AI and its affiliates are not liable for any indirect, incidental, or consequential damages resulting from:
 78:             </p>
 79:             <ul className="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
 80:               <li>Data inaccuracies in AI-generated insights or external job listings.</li>
 81:               <li>Service downtime, loss of data, or technical errors.</li>
 82:               <li>Unauthorized access despite standard security measures.</li>
 83:             </ul>
 84:           </section>
 85: 
 86:           <section className="mb-8">
 87:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">9. Account Termination</h2>
 88:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 89:               We reserve the right to suspend or terminate accounts that violate these Terms, misuse integrations, scrape data, or engage in unlawful behavior. You may delete your account anytime via platform settings or by contacting{' '}
 90:               <a href="mailto:privacy@careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
 91:                 privacy@careerleverai.com
 92:               </a>.
 93:             </p>
 94:           </section>
 95: 
 96:           <section className="mb-8">
 97:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">10. Changes to Terms</h2>
 98:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
 99:               We may update these Terms periodically. Continued use after notice constitutes acceptance of modified terms.
100:             </p>
101:           </section>
102: 
103:           <section className="mb-8">
104:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">11. Governing Law</h2>
105:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
106:               These Terms of Service shall be governed by and construed in accordance with the laws of Canada and the province of Alberta.
107:             </p>
108:           </section>
109: 
110:           <section className="mb-8">
111:             <h2 className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-4">12. Contact Us</h2>
112:             <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
113:               Questions about these Terms or platform usage may be directed to:
114:             </p>
115:             <p className="text-gray-700 dark:text-gray-300 mt-3">
116:               📧 <a href="mailto:privacy@careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
117:                 privacy@careerleverai.com
118:               </a><br />
119:               🌐 <a href="https://careerleverai.com" className="text-blue-600 dark:text-blue-400 hover:underline">
120:                 https://careerleverai.com
121:               </a>
122:             </p>
123:           </section>
124: 
125:           <footer className="text-center text-sm text-gray-500 dark:text-gray-400 mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
126:             &copy; 2025 Career Lever AI. All rights reserved. |{' '}
127:             <a href="/privacy-policy" className="text-blue-600 dark:text-blue-400 hover:underline">
128:               Privacy Policy
129:             </a>
130:           </footer>
131:         </div>
132:       </div>
133:     </div>
134:   )
135: }
</file>

<file path="src/components/modern/MobileNavigation.tsx">
 1: 'use client'
 2: 
 3: import React from 'react'
 4: 
 5: export const MobileNavigation: React.FC = () => {
 6:   return (
 7:     <nav className="fixed bottom-0 left-0 right-0 bg-card border-t border-border shadow-lg z-50 md:hidden">
 8:       <div className="flex justify-around items-center h-16 px-4">
 9:         {/* Navigation items can be added here */}
10:       </div>
11:     </nav>
12:   )
13: }
</file>

<file path="src/components/resume-builder/template-selector.tsx">
 1: 'use client'
 2: 
 3: import { TemplatePreview } from './template-preview'
 4: 
 5: const TEMPLATES = [
 6:   {
 7:     id: 'modern',
 8:     name: 'Modern',
 9:     description: 'Clean, contemporary design with gradient header',
10:     preview: '🎨',
11:     color: 'from-blue-500 to-purple-600',
12:     recommended: true
13:   },
14:   {
15:     id: 'professional',
16:     name: 'Professional',
17:     description: 'Traditional layout perfect for corporate roles',
18:     preview: '💼',
19:     color: 'from-gray-700 to-gray-900',
20:     recommended: false
21:   },
22:   {
23:     id: 'creative',
24:     name: 'Creative',
25:     description: 'Bold, colorful design for creative industries',
26:     preview: '🎭',
27:     color: 'from-pink-500 to-orange-500',
28:     recommended: false
29:   },
30:   {
31:     id: 'tech',
32:     name: 'Tech-Focused',
33:     description: 'Code-friendly with monospace accents',
34:     preview: '💻',
35:     color: 'from-green-500 to-teal-600',
36:     recommended: false
37:   },
38:   {
39:     id: 'minimal',
40:     name: 'Minimal',
41:     description: 'ATS-optimized, maximum compatibility',
42:     preview: '📄',
43:     color: 'from-gray-400 to-gray-600',
44:     recommended: false
45:   },
46:   {
47:     id: 'executive',
48:     name: 'Executive',
49:     description: 'Premium, leadership-focused design',
50:     preview: '👔',
51:     color: 'from-indigo-600 to-purple-700',
52:     recommended: false
53:   }
54: ]
55: 
56: interface TemplateSelectorProps {
57:   selectedTemplate: string
58:   onSelectTemplate: (templateId: string) => void
59: }
60: 
61: export function TemplateSelector({ selectedTemplate, onSelectTemplate }: TemplateSelectorProps) {
62:   return (
63:     <div className="bg-card rounded-xl border-2 border-border p-6">
64:       <h3 className="text-xl font-bold text-foreground mb-4">Choose Your Template</h3>
65:       
66:       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
67:         {TEMPLATES.map((template) => (
68:           <TemplatePreview
69:             key={template.id}
70:             id={template.id}
71:             name={template.name}
72:             description={template.description}
73:             isSelected={selectedTemplate === template.id}
74:             onSelect={() => onSelectTemplate(template.id)}
75:             recommended={template.recommended}
76:           />
77:         ))}
78:       </div>
79: 
80:       <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-950/30 rounded-lg border border-blue-200 dark:border-blue-800">
81:         <p className="text-sm text-blue-800 dark:text-blue-300">
82:           <strong>💡 Tip:</strong> All templates are ATS-compatible. Choose based on your industry and personal style!
83:         </p>
84:       </div>
85:     </div>
86:   )
87: }
</file>

<file path="src/lib/perplexity-resume-analyzer.ts">
  1: /**
  2:  * Enhanced Perplexity-Powered Resume Analysis
  3:  * 
  4:  * Intelligently extracts and weights resume data using AI understanding
  5:  * rather than basic PDF text parsing. Provides:
  6:  * - Experience-weighted keyword extraction
  7:  * - Accurate location detection with country
  8:  * - Salary expectations based on 2025 market data
  9:  * - Target job titles with career progression
 10:  * - AI/Automation replacement risk analysis
 11:  * - 5-year career outlook
 12:  * - Job search optimization strategies
 13:  * 
 14:  * Version: 2.0.0 - Integrated with centralized prompts and validation
 15:  */
 16: 
 17: import { PerplexityIntelligenceService } from './perplexity-intelligence'
 18: 
 19: // FIXED: Universal UUID generation (browser + Node.js)
 20: function generateUUID(): string {
 21:   if (typeof crypto !== 'undefined' && (crypto as any).randomUUID) {
 22:     return (crypto as any).randomUUID()
 23:   }
 24:   // Fallback for older environments
 25:   return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
 26:     const r = Math.random() * 16 | 0
 27:     const v = c === 'x' ? r : (r & 0x3 | 0x8)
 28:     return v.toString(16)
 29:   })
 30: }
 31: 
 32: // FIXED: Safe imports with fallbacks for missing dependencies
 33: let PERPLEXITY_PROMPTS: any
 34: let parseAIResponse: <T = any>(text: string, options?: any, context?: any) => T
 35: let validateAIResponse: <T = any>(data: T, schema?: string, context?: any) => T
 36: 
 37: try {
 38:   PERPLEXITY_PROMPTS = require('./prompts/perplexity-prompts').PERPLEXITY_PROMPTS
 39: } catch (e) {
 40:   console.warn('[RESUME_ANALYZER] perplexity-prompts not found, using inline prompts')
 41:   PERPLEXITY_PROMPTS = { RESUME_ANALYSIS: { system: '', userTemplate: () => '' } }
 42: }
 43: 
 44: try {
 45:   parseAIResponse = require('./utils/ai-response-parser').parseAIResponse
 46: } catch (e) {
 47:   console.warn('[RESUME_ANALYZER] ai-response-parser not found, using JSON.parse')
 48:   parseAIResponse = <T = any>(text: string) => JSON.parse(text) as T
 49: }
 50: 
 51: try {
 52:   validateAIResponse = require('./validation/schema-validator').validateAIResponse
 53: } catch (e) {
 54:   console.warn('[RESUME_ANALYZER] schema-validator not found, skipping validation')
 55:   validateAIResponse = <T = any>(data: T) => data
 56: }
 57: 
 58: export interface EnhancedResumeAnalysis {
 59:   keywords: string[]
 60:   location: {
 61:     city: string
 62:     province: string
 63:     full: string
 64:     country: string
 65:   }
 66:   experienceLevel: 'entry' | 'mid' | 'senior' | 'executive'
 67:   targetSalaryRange: {
 68:     min: number
 69:     max: number
 70:     currency: string
 71:     marketData: {
 72:       percentile25: number
 73:       percentile50: number
 74:       percentile75: number
 75:       lastUpdated: string
 76:     }
 77:   }
 78:   targetJobTitles: string[]
 79:   topSkills: Array<{
 80:     skill: string
 81:     yearsExperience: number
 82:     proficiency: 'beginner' | 'intermediate' | 'advanced' | 'expert'
 83:     marketDemand: 'low' | 'medium' | 'high'
 84:     growthTrend: 'declining' | 'stable' | 'growing' | 'hot'
 85:   }>
 86:   industries: string[]
 87:   certifications: string[]
 88:   careerSummary: string
 89:   // AI/Automation Analysis
 90:   futureOutlook: {
 91:     aiReplacementRisk: 'low' | 'medium' | 'high'
 92:     automationRisk: 'low' | 'medium' | 'high'
 93:     fiveYearOutlook: 'declining' | 'stable' | 'growing' | 'thriving'
 94:     reasoning: string
 95:     recommendations: string[]
 96:   }
 97:   // Career Path Intelligence
 98:   careerPath: {
 99:     currentLevel: string
100:     nextPossibleRoles: string[]
101:     skillGaps: Array<{
102:       skill: string
103:       importance: 'nice-to-have' | 'important' | 'critical'
104:       timeToLearn: string
105:     }>
106:     recommendedCertifications: string[]
107:   }
108:   // Job Search Intelligence
109:   searchOptimization: {
110:     bestJobBoards: string[]
111:     optimalApplicationTime: string
112:     competitiveAdvantages: string[]
113:     marketSaturation: 'low' | 'medium' | 'high'
114:     applicationStrategy: string
115:   }
116: }
117: 
118: export class PerplexityResumeAnalyzer {
119:   /**
120:    * Analyze resume using Perplexity AI for intelligent extraction
121:    */
122:   static async analyzeResume(resumeText: string): Promise<EnhancedResumeAnalysis> {
123:     const requestId = generateUUID()
124:     const timestamp = Date.now()
125: 
126:     try {
127:       // Use centralized prompts
128:       const systemPrompt = PERPLEXITY_PROMPTS.RESUME_ANALYSIS.system
129:       const userPrompt = PERPLEXITY_PROMPTS.RESUME_ANALYSIS.userTemplate(resumeText)
130: 
131:       // Call Perplexity via intelligence service
132:       const result = await PerplexityIntelligenceService.customQuery({
133:         systemPrompt,
134:         userPrompt,
135:         temperature: 0.2,
136:         maxTokens: 3000
137:       })
138: 
139:       // Parse and validate response
140:       const context = {
141:         requestId,
142:         prompts: { system: systemPrompt, user: userPrompt.slice(0, 200) + '...' },
143:         timestamp
144:       }
145: 
146:       const parsed = parseAIResponse<EnhancedResumeAnalysis>(result.content, {
147:         stripMarkdown: true,
148:         extractFirst: true,
149:         throwOnError: true
150:       }, context)
151: 
152:       // Validate against schema
153:       const validated = validateAIResponse<EnhancedResumeAnalysis>(
154:         parsed,
155:         'resume-analysis',
156:         context
157:       )
158: 
159:       return validated
160:     } catch (error: any) {
161:       console.error('[PerplexityResumeAnalyzer] AI analysis failed:', error.message)
162: 
163:       // Fallback to enhanced regex analysis
164:       return this.enhancedFallbackAnalysis(resumeText)
165:     }
166:   }
167: 
168:   /**
169:    * LEGACY METHOD - Now uses centralized system
170:    * @deprecated Use analyzeResume instead
171:    */
172:   static async analyzeLegacy(resumeText: string): Promise<EnhancedResumeAnalysis> {
173:     const SYSTEM_PROMPT = `You are an expert career strategist and resume analyst with deep understanding of Canadian and US job markets, industry trends, AI/automation impact, and career trajectory optimization.
174: 
175: Analyze resumes with precision, extracting:
176: 1. Keywords weighted by experience level, recency, and market demand
177: 2. Exact location with country detection
178: 3. Experience level based on years, responsibilities, and leadership scope
179: 4. Target salary range with current market data (2025 rates)
180: 5. Target job titles based on career trajectory and market opportunities
181: 6. Skills with proficiency levels and market demand assessment
182: 7. Industry focus areas with growth potential
183: 8. Certifications and credentials with market value
184: 9. AI/Automation replacement risk analysis
185: 10. 5-year career outlook and growth potential
186: 11. Career path progression opportunities
187: 12. Job search optimization strategies
188: 
189: CRITICAL ANALYSIS FACTORS:
190: - AI/Automation Impact: Assess which roles are safe vs at risk
191: - Market Trends: Consider remote work, AI integration, industry shifts
192: - Geographic Factors: Canadian vs US market differences
193: - Skill Evolution: Which skills are becoming obsolete vs emerging
194: - Career Progression: Natural next steps and skill gaps
195: 
196: SALARY DATA (Use 2025 Current Market Rates):
197: - Canada: Adjust for province (ON/BC higher, others moderate)
198: - US: Adjust for state and city (CA/NY/WA higher)
199: - Consider remote work salary normalization trends
200: - Factor in industry premiums (tech, finance, healthcare)
201: 
202: AI/AUTOMATION RISK ASSESSMENT:
203: - Low Risk: Creative, strategic, interpersonal, complex problem-solving roles
204: - Medium Risk: Roles with some routine tasks but require human judgment
205: - High Risk: Highly repetitive, rule-based, or easily automated tasks
206: 
207: OUTPUT ONLY valid JSON, no explanations or markdown.`
208: 
209:     const USER_PROMPT = `Analyze this resume comprehensively for 2025 job market:
210: 
211: Resume Text:
212: ${resumeText}
213: 
214: Return ONLY this JSON structure:
215: {
216:   "keywords": ["array", "of", "top", "20", "keywords", "weighted", "by", "market", "demand", "and", "experience"],
217:   "location": {
218:     "city": "CityName",
219:     "province": "ProvinceOrState", 
220:     "full": "City, Province",
221:     "country": "Canada"
222:   },
223:   "experienceLevel": "entry|mid|senior|executive",
224:   "targetSalaryRange": {
225:     "min": 85000,
226:     "max": 125000,
227:     "currency": "CAD",
228:     "marketData": {
229:       "percentile25": 90000,
230:       "percentile50": 105000,
231:       "percentile75": 120000,
232:       "lastUpdated": "2025-10"
233:     }
234:   },
235:   "targetJobTitles": ["Primary Job Title", "Alternative Title 1", "Alternative Title 2", "Stretch Goal Title"],
236:   "topSkills": [
237:     {
238:       "skill": "Skill Name",
239:       "yearsExperience": 5,
240:       "proficiency": "expert",
241:       "marketDemand": "high",
242:       "growthTrend": "growing"
243:     }
244:   ],
245:   "industries": ["Primary Industry", "Secondary Industry"],
246:   "certifications": ["Current Cert 1", "Current Cert 2"],
247:   "careerSummary": "2-3 sentence professional summary highlighting unique value proposition",
248:   "futureOutlook": {
249:     "aiReplacementRisk": "low",
250:     "automationRisk": "low", 
251:     "fiveYearOutlook": "growing",
252:     "reasoning": "Detailed explanation of why this career path is safe/risky and growth potential",
253:     "recommendations": ["Action 1", "Action 2", "Action 3"]
254:   },
255:   "careerPath": {
256:     "currentLevel": "Current Role Level",
257:     "nextPossibleRoles": ["Next Role 1", "Next Role 2", "Next Role 3"],
258:     "skillGaps": [
259:       {
260:         "skill": "Missing Skill",
261:         "importance": "critical",
262:         "timeToLearn": "3-6 months"
263:       }
264:     ],
265:     "recommendedCertifications": ["Cert 1", "Cert 2"]
266:   },
267:   "searchOptimization": {
268:     "bestJobBoards": ["Board 1", "Board 2", "Board 3"],
269:     "optimalApplicationTime": "Tuesday-Thursday, 9-11 AM",
270:     "competitiveAdvantages": ["Advantage 1", "Advantage 2"],
271:     "marketSaturation": "medium",
272:     "applicationStrategy": "Detailed strategy for this specific profile"
273:   }
274: }`
275: 
276:     try {
277:       const response = await PerplexityIntelligenceService.customQuery({
278:         systemPrompt: SYSTEM_PROMPT,
279:         userPrompt: USER_PROMPT,
280:         temperature: 0.3, // Slightly higher for creative analysis
281:         maxTokens: 3000   // Increased for comprehensive analysis
282:       })
283: 
284:       // Extract JSON from response (handle Perplexity's text wrapping)
285:       let text = response.content.trim()
286:       
287:       // Remove markdown code blocks if present
288:       text = text.replace(/```json\s*|\s*```/g, '')
289:       
290:       // Extract JSON object
291:       const jsonMatch = text.match(/\{[\s\S]*\}/)
292:       if (jsonMatch) {
293:         text = jsonMatch[0]
294:       }
295: 
296:       const analysis = JSON.parse(text) as EnhancedResumeAnalysis
297: 
298:       // Validate and provide intelligent defaults
299:       return {
300:         keywords: analysis.keywords || [],
301:         location: analysis.location || { 
302:           city: 'Toronto', 
303:           province: 'ON', 
304:           full: 'Toronto, ON',
305:           country: 'Canada'
306:         },
307:         experienceLevel: analysis.experienceLevel || 'mid',
308:         targetSalaryRange: analysis.targetSalaryRange || {
309:           min: 65000,
310:           max: 95000,
311:           currency: 'CAD',
312:           marketData: {
313:             percentile25: 70000,
314:             percentile50: 80000,
315:             percentile75: 90000,
316:             lastUpdated: '2025-10'
317:           }
318:         },
319:         targetJobTitles: analysis.targetJobTitles || [],
320:         topSkills: analysis.topSkills || [],
321:         industries: analysis.industries || [],
322:         certifications: analysis.certifications || [],
323:         careerSummary: analysis.careerSummary || 'Experienced professional seeking new opportunities',
324:         futureOutlook: analysis.futureOutlook || {
325:           aiReplacementRisk: 'medium',
326:           automationRisk: 'medium',
327:           fiveYearOutlook: 'stable',
328:           reasoning: 'Analysis unavailable - recommend manual review',
329:           recommendations: ['Stay updated with industry trends', 'Develop AI-resistant skills']
330:         },
331:         careerPath: analysis.careerPath || {
332:           currentLevel: 'Individual Contributor',
333:           nextPossibleRoles: [],
334:           skillGaps: [],
335:           recommendedCertifications: []
336:         },
337:         searchOptimization: analysis.searchOptimization || {
338:           bestJobBoards: ['LinkedIn', 'Indeed', 'Job Bank Canada'],
339:           optimalApplicationTime: 'Tuesday-Thursday, 9-11 AM',
340:           competitiveAdvantages: [],
341:           marketSaturation: 'medium',
342:           applicationStrategy: 'Standard application approach recommended'
343:         }
344:       }
345:     } catch (error) {
346:       console.error('[PERPLEXITY RESUME ANALYZER] Failed:', error)
347:       
348:       // Enhanced fallback with AI risk assessment
349:       return this.enhancedFallbackAnalysis(resumeText)
350:     }
351:   }
352: 
353:   /**
354:    * Enhanced fallback analysis if Perplexity fails
355:    */
356:   private static enhancedFallbackAnalysis(resumeText: string): EnhancedResumeAnalysis {
357:     // Extract location using improved regex
358:     const locationRegex = /([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*),?\s*([A-Z]{2,3})/g
359:     const matches = [...resumeText.matchAll(locationRegex)]
360:     const locationMatch = matches[0]
361:     const city = locationMatch?.[1] || 'Toronto'
362:     const province = locationMatch?.[2] || 'ON'
363:     const country = province.length === 2 ? 'Canada' : 'United States'
364: 
365:     // Determine experience level with better logic
366:     const yearsMatches = resumeText.match(/(\d+)\+?\s*years?/gi)
367:     const maxYears = yearsMatches ? Math.max(...yearsMatches.map(m => parseInt(m))) : 0
368:     
369:     const hasLeadership = /lead|manage|director|senior|principal|head\s+of/i.test(resumeText)
370:     const hasExecutive = /vp|vice\s+president|ceo|cto|cfo|president|executive|founder/i.test(resumeText)
371:     const hasManager = /manager|supervisor|team\s+lead/i.test(resumeText)
372:     
373:     let experienceLevel: 'entry' | 'mid' | 'senior' | 'executive' = 'entry'
374:     if (hasExecutive || maxYears > 15) experienceLevel = 'executive'
375:     else if (hasLeadership || hasManager || maxYears > 8) experienceLevel = 'senior'
376:     else if (maxYears > 3) experienceLevel = 'mid'
377: 
378:     // Enhanced keyword extraction with skill weighting
379:     const techSkills = ['javascript', 'python', 'react', 'node', 'sql', 'aws', 'azure', 'docker', 'kubernetes', 'ai', 'machine learning', 'data science']
380:     const businessSkills = ['management', 'leadership', 'strategy', 'analysis', 'project management', 'sales', 'marketing']
381:     
382:     const words = resumeText.toLowerCase().match(/\b[a-z]{3,}\b/g) || []
383:     const stopWords = new Set(['that', 'this', 'with', 'from', 'have', 'been', 'were', 'would', 'could', 'should', 'work', 'company', 'role', 'position'])
384:     const wordFreq: Record<string, number> = {}
385:     
386:     words.forEach(word => {
387:       if (!stopWords.has(word)) {
388:         // Weight tech and business skills higher
389:         const weight = techSkills.includes(word) || businessSkills.includes(word) ? 3 : 1
390:         wordFreq[word] = (wordFreq[word] || 0) + weight
391:       }
392:     })
393: 
394:     const keywords = Object.entries(wordFreq)
395:       .sort(([, a], [, b]) => b - a)
396:       .slice(0, 20)
397:       .map(([word]) => word)
398: 
399:     // Assess AI/Automation risk based on job content
400:     const hasCreativeWork = /creative|design|strategy|innovation|research/i.test(resumeText)
401:     const hasInterpersonalWork = /team|leadership|management|client|customer|stakeholder/i.test(resumeText)
402:     const hasAnalyticalWork = /analysis|problem.solving|decision|strategic/i.test(resumeText)
403:     const hasRoutineWork = /data.entry|processing|administrative|clerical/i.test(resumeText)
404: 
405:     let aiReplacementRisk: 'low' | 'medium' | 'high' = 'medium'
406:     if (hasCreativeWork && hasInterpersonalWork && hasAnalyticalWork) aiReplacementRisk = 'low'
407:     else if (hasRoutineWork) aiReplacementRisk = 'high'
408: 
409:     // Salary estimation based on experience and location
410:     const baseSalaries = {
411:       entry: { min: 45000, max: 65000 },
412:       mid: { min: 65000, max: 90000 },
413:       senior: { min: 90000, max: 130000 },
414:       executive: { min: 130000, max: 200000 }
415:     }
416: 
417:     const locationMultiplier = 
418:       city.toLowerCase().includes('toronto') || city.toLowerCase().includes('vancouver') ? 1.2 :
419:       city.toLowerCase().includes('calgary') || city.toLowerCase().includes('ottawa') ? 1.1 : 1.0
420: 
421:     const salaryRange = baseSalaries[experienceLevel]
422:     const currency = country === 'Canada' ? 'CAD' : 'USD'
423: 
424:     return {
425:       keywords,
426:       location: { city, province, full: `${city}, ${province}`, country },
427:       experienceLevel,
428:       targetSalaryRange: {
429:         min: Math.round(salaryRange.min * locationMultiplier),
430:         max: Math.round(salaryRange.max * locationMultiplier),
431:         currency,
432:         marketData: {
433:           percentile25: Math.round(salaryRange.min * locationMultiplier * 1.1),
434:           percentile50: Math.round((salaryRange.min + salaryRange.max) / 2 * locationMultiplier),
435:           percentile75: Math.round(salaryRange.max * locationMultiplier * 0.9),
436:           lastUpdated: '2025-10'
437:         }
438:       },
439:       targetJobTitles: [],
440:       topSkills: keywords.slice(0, 10).map(skill => ({
441:         skill,
442:         yearsExperience: Math.min(maxYears, 10),
443:         proficiency: experienceLevel === 'executive' ? 'expert' : 
444:                     experienceLevel === 'senior' ? 'advanced' : 'intermediate',
445:         marketDemand: techSkills.includes(skill) ? 'high' : 'medium',
446:         growthTrend: techSkills.includes(skill) ? 'growing' : 'stable'
447:       })),
448:       industries: [],
449:       certifications: [],
450:       careerSummary: `${experienceLevel.charAt(0).toUpperCase() + experienceLevel.slice(1)}-level professional with expertise in ${keywords.slice(0, 3).join(', ')}`,
451:       futureOutlook: {
452:         aiReplacementRisk,
453:         automationRisk: hasRoutineWork ? 'high' : 'medium',
454:         fiveYearOutlook: aiReplacementRisk === 'low' ? 'growing' : 'stable',
455:         reasoning: `Based on skill analysis, this role shows ${aiReplacementRisk} risk of AI replacement due to ${hasCreativeWork ? 'creative and strategic elements' : 'routine task components'}.`,
456:         recommendations: [
457:           'Develop AI-resistant skills like strategic thinking and relationship building',
458:           'Stay updated with industry automation trends',
459:           'Consider upskilling in emerging technologies'
460:         ]
461:       },
462:       careerPath: {
463:         currentLevel: experienceLevel === 'entry' ? 'Junior Professional' : 
464:                      experienceLevel === 'mid' ? 'Experienced Professional' :
465:                      experienceLevel === 'senior' ? 'Senior Professional' : 'Executive',
466:         nextPossibleRoles: [],
467:         skillGaps: [],
468:         recommendedCertifications: []
469:       },
470:       searchOptimization: {
471:         bestJobBoards: country === 'Canada' ? 
472:           ['LinkedIn', 'Indeed Canada', 'Job Bank Canada', 'Workopolis'] :
473:           ['LinkedIn', 'Indeed', 'Glassdoor', 'ZipRecruiter'],
474:         optimalApplicationTime: 'Tuesday-Thursday, 9-11 AM local time',
475:         competitiveAdvantages: keywords.slice(0, 3),
476:         marketSaturation: 'medium',
477:         applicationStrategy: `Focus on ${experienceLevel}-level positions in ${city} market, emphasize ${keywords.slice(0, 2).join(' and ')} experience`
478:       }
479:     }
480:   }
481: 
482:   /**
483:    * Get AI-powered job search recommendations
484:    */
485:   static async getJobSearchRecommendations(analysis: EnhancedResumeAnalysis): Promise<{
486:     searchTerms: string[]
487:     excludeTerms: string[]
488:     targetCompanies: string[]
489:     networking: string[]
490:     timeline: string
491:   }> {
492:     const prompt = `Based on this career profile, provide job search recommendations:
493:     
494: Location: ${analysis.location.full}
495: Experience: ${analysis.experienceLevel}
496: Industries: ${analysis.industries.join(', ')}
497: Skills: ${analysis.topSkills.map(s => s.skill).slice(0, 10).join(', ')}
498: AI Risk: ${analysis.futureOutlook.aiReplacementRisk}
499: 
500: Return ONLY this JSON:
501: {
502:   "searchTerms": ["keyword1", "keyword2", ...],
503:   "excludeTerms": ["avoid1", "avoid2", ...],
504:   "targetCompanies": ["company1", "company2", ...],
505:   "networking": ["strategy1", "strategy2", ...],
506:   "timeline": "3-6 months explanation"
507: }`
508: 
509:     try {
510:       const response = await PerplexityIntelligenceService.customQuery({
511:         systemPrompt: 'You are a career strategist. Return only valid JSON with no markdown.',
512:         userPrompt: prompt,
513:         temperature: 0.4,
514:         maxTokens: 1500
515:       })
516: 
517:       // FIXED: Actually parse the AI response
518:       let content = response.content.trim().replace(/```(?:json)?\s*/g, '')
519:       const jsonMatch = content.match(/\{[\s\S]*\}/)
520:       
521:       if (jsonMatch) {
522:         const parsed = JSON.parse(jsonMatch[0])
523:         return {
524:           searchTerms: parsed.searchTerms || analysis.keywords.slice(0, 10),
525:           excludeTerms: parsed.excludeTerms || [],
526:           targetCompanies: parsed.targetCompanies || [],
527:           networking: parsed.networking || [],
528:           timeline: parsed.timeline || '3-6 months'
529:         }
530:       }
531:     } catch (error) {
532:       console.error('[JOB_SEARCH_RECOMMENDATIONS] Failed:', error)
533:     }
534: 
535:     // Fallback only if AI completely fails
536:     return {
537:       searchTerms: analysis.keywords.slice(0, 10),
538:       excludeTerms: [],
539:       targetCompanies: [],
540:       networking: [],
541:       timeline: '3-6 months'
542:     }
543:   }
544: 
545:   /**
546:    * Generate market intelligence report
547:    */
548:   static async generateMarketReport(analysis: EnhancedResumeAnalysis): Promise<{
549:     marketTrends: string[]
550:     salaryTrends: string
551:     demandForecast: string
552:     recommendations: string[]
553:   }> {
554:     const prompt = `Generate a market intelligence report for this career profile:
555: 
556: Location: ${analysis.location.full} 
557: Experience: ${analysis.experienceLevel}
558: Industries: ${analysis.industries.join(', ')}
559: Target Roles: ${analysis.targetJobTitles.join(', ')}
560: 
561: Return ONLY this JSON:
562: {
563:   "marketTrends": ["trend1", "trend2", ...],
564:   "salaryTrends": "Salary outlook explanation",
565:   "demandForecast": "Demand forecast explanation",
566:   "recommendations": ["rec1", "rec2", ...]
567: }`
568: 
569:     try {
570:       const response = await PerplexityIntelligenceService.customQuery({
571:         systemPrompt: 'You are a market research analyst. Return only valid JSON with no markdown.',
572:         userPrompt: prompt,
573:         temperature: 0.2,
574:         maxTokens: 2000
575:       })
576: 
577:       // FIXED: Actually parse AI response
578:       let content = response.content.trim().replace(/```(?:json)?\s*/g, '')
579:       const jsonMatch = content.match(/\{[\s\S]*\}/)
580:       
581:       if (jsonMatch) {
582:         const parsed = JSON.parse(jsonMatch[0])
583:         return {
584:           marketTrends: parsed.marketTrends || [],
585:           salaryTrends: parsed.salaryTrends || 'Market data unavailable',
586:           demandForecast: parsed.demandForecast || 'Analysis pending',
587:           recommendations: parsed.recommendations || analysis.futureOutlook.recommendations
588:         }
589:       }
590:     } catch (error) {
591:       console.error('[MARKET_REPORT] Failed:', error)
592:     }
593: 
594:     // Fallback only if AI completely fails
595:     return {
596:       marketTrends: ['Remote work increasing', 'AI skills in demand'],
597:       salaryTrends: 'Market data unavailable',
598:       demandForecast: 'Analysis pending',
599:       recommendations: analysis.futureOutlook.recommendations
600:     }
601:   }
602: 
603:   /**
604:    * Get recommended job boards with intelligent matching
605:    */
606:   static async getRecommendedJobBoards(analysis: EnhancedResumeAnalysis): Promise<Array<{
607:     name: string
608:     relevanceScore: number
609:     reasoning: string
610:     specialization: string
611:   }>> {
612:     const isCanadian = analysis.location.country === 'Canada'
613:     const { experienceLevel, industries, topSkills } = analysis
614:     
615:     const boards: Array<{
616:       name: string
617:       relevanceScore: number
618:       reasoning: string
619:       specialization: string
620:     }> = []
621: 
622:     // Universal boards
623:     boards.push(
624:       { name: 'LinkedIn', relevanceScore: 95, reasoning: 'Best for professional networking and quality opportunities', specialization: 'Professional Network' },
625:       { name: 'Indeed', relevanceScore: 85, reasoning: 'Largest job database with good local coverage', specialization: 'General Purpose' }
626:     )
627: 
628:     // Canadian-specific
629:     if (isCanadian) {
630:       boards.push(
631:         { name: 'Job Bank Canada', relevanceScore: 90, reasoning: 'Government-backed platform with verified Canadian employers', specialization: 'Canadian Government' },
632:         { name: 'Workopolis', relevanceScore: 75, reasoning: 'Strong presence in Canadian market', specialization: 'Canadian Corporate' }
633:       )
634:     }
635: 
636:     // Experience level specific
637:     if (experienceLevel === 'executive') {
638:       boards.push(
639:         { name: 'The Ladders', relevanceScore: 85, reasoning: 'Specialized in $100K+ executive positions', specialization: 'Executive' },
640:         { name: 'ExecuNet', relevanceScore: 80, reasoning: 'Executive networking and opportunities', specialization: 'Executive Network' }
641:       )
642:     } else if (experienceLevel === 'entry') {
643:       boards.push(
644:         { name: 'Glassdoor', relevanceScore: 80, reasoning: 'Good for entry-level positions and company insights', specialization: 'Entry Level' },
645:         { name: 'ZipRecruiter', relevanceScore: 75, reasoning: 'Quick application process for entry roles', specialization: 'Quick Apply' }
646:       )
647:     }
648: 
649:     // Industry-specific recommendations
650:     const techSkills = topSkills.some(s => ['javascript', 'python', 'react', 'aws', 'docker'].includes(s.skill.toLowerCase()))
651:     const hasBusinessSkills = topSkills.some(s => ['management', 'sales', 'marketing', 'strategy'].includes(s.skill.toLowerCase()))
652: 
653:     if (techSkills) {
654:       boards.push(
655:         { name: 'Dice', relevanceScore: 85, reasoning: 'Technology-focused job board with tech companies', specialization: 'Technology' },
656:         { name: 'Stack Overflow Jobs', relevanceScore: 80, reasoning: 'Developer-focused positions', specialization: 'Software Development' },
657:         { name: 'AngelList', relevanceScore: 75, reasoning: 'Startup and tech company opportunities', specialization: 'Startups' }
658:       )
659:     }
660: 
661:     if (hasBusinessSkills) {
662:       boards.push(
663:         { name: 'Monster', relevanceScore: 70, reasoning: 'Strong in business and management roles', specialization: 'Business & Management' }
664:       )
665:     }
666: 
667:     // Sort by relevance score and return top recommendations
668:     return boards
669:       .sort((a, b) => b.relevanceScore - a.relevanceScore)
670:       .slice(0, 8)
671:   }
672: }
</file>

<file path="src/lib/resume-templates-v2.ts">
   1: /**
   2:  * Professional Resume Templates V2
   3:  * 
   4:  * 7 distinct, beautifully formatted resume templates:
   5:  * 1. Modern (Two-Column with Timeline)
   6:  * 2. Professional (Traditional Single-Column)
   7:  * 3. Creative (Asymmetric with Color Accents)
   8:  * 4. Tech-Focused (Developer/Engineer)
   9:  * 5. Minimal/ATS (Maximum Compatibility)
  10:  * 6. Executive (C-Suite/Director)
  11:  * 7. Curriculum Vitae (Academic/Research)
  12:  */
  13: 
  14: export interface ResumeData {
  15:   personalInfo: {
  16:     fullName: string
  17:     email: string
  18:     phone: string
  19:     location: string
  20:     linkedin?: string
  21:     github?: string
  22:     website?: string
  23:     summary: string
  24:   }
  25:   experience: Array<{
  26:     id: string
  27:     company: string
  28:     position: string
  29:     location: string
  30:     startDate: string
  31:     endDate: string
  32:     current: boolean
  33:     description: string
  34:     achievements: string[]
  35:     technologies?: string[]
  36:   }>
  37:   education: Array<{
  38:     id: string
  39:     institution: string
  40:     degree: string
  41:     field: string
  42:     location: string
  43:     graduationDate: string
  44:     gpa?: string
  45:     honors?: string[]
  46:   }>
  47:   skills: {
  48:     technical: string[]
  49:     soft: string[]
  50:     languages?: Array<{ language: string; proficiency: string }>
  51:     certifications?: Array<{ name: string; issuer: string; date: string }>
  52:   }
  53:   projects?: Array<{
  54:     id: string
  55:     name: string
  56:     description: string
  57:     technologies: string[]
  58:     url?: string
  59:     github?: string
  60:   }>
  61: }
  62: 
  63: export interface ResumeTemplate {
  64:   id: string
  65:   name: string
  66:   description: string
  67:   bestFor: string[]
  68:   preview: string
  69:   generate: (data: ResumeData) => string
  70:   css: string
  71: }
  72: 
  73: /**
  74:  * TEMPLATE 1: MODERN (Two-Column with Timeline)
  75:  */
  76: const modernTemplate: ResumeTemplate = {
  77:   id: 'modern',
  78:   name: 'Modern',
  79:   description: 'Two-column layout with timeline visualization and progress bars',
  80:   bestFor: ['Technology', 'Startups', 'Creative Industries', 'Mid-Level'],
  81:   preview: '/templates/modern-preview.png',
  82:   
  83:   generate: (data: ResumeData) => {
  84:     const { personalInfo, experience, education, skills } = data;
  85:     
  86:     return `
  87:       <div class="resume-modern">
  88:         <!-- Left Sidebar -->
  89:         <div class="sidebar">
  90:           <div class="avatar-section">
  91:             <div class="avatar-circle">
  92:               ${personalInfo.fullName.split(' ').map(n => n[0]).join('')}
  93:             </div>
  94:             <h1 class="name">${personalInfo.fullName}</h1>
  95:           </div>
  96:           
  97:           <div class="contact-section">
  98:             <h2 class="section-header">CONTACT</h2>
  99:             <div class="contact-item">
 100:               <span class="icon">📧</span>
 101:               <span>${personalInfo.email}</span>
 102:             </div>
 103:             <div class="contact-item">
 104:               <span class="icon">📱</span>
 105:               <span>${personalInfo.phone}</span>
 106:             </div>
 107:             <div class="contact-item">
 108:               <span class="icon">📍</span>
 109:               <span>${personalInfo.location}</span>
 110:             </div>
 111:             ${personalInfo.linkedin ? `
 112:               <div class="contact-item">
 113:                 <span class="icon">💼</span>
 114:                 <span>${personalInfo.linkedin}</span>
 115:               </div>
 116:             ` : ''}
 117:           </div>
 118:           
 119:           <div class="skills-section">
 120:             <h2 class="section-header">SKILLS</h2>
 121:             ${skills.technical.slice(0, 8).map(skill => `
 122:               <div class="skill-item">
 123:                 <div class="skill-name">${skill}</div>
 124:                 <div class="skill-bar">
 125:                   <div class="skill-progress" style="width: ${Math.floor(Math.random() * 30) + 70}%"></div>
 126:                 </div>
 127:               </div>
 128:             `).join('')}
 129:           </div>
 130:           
 131:           ${skills.languages && skills.languages.length > 0 ? `
 132:             <div class="languages-section">
 133:               <h2 class="section-header">LANGUAGES</h2>
 134:               ${skills.languages.map(lang => `
 135:                 <div class="language-item">
 136:                   <span class="language-name">${lang.language}</span>
 137:                   <span class="language-level">${lang.proficiency}</span>
 138:                 </div>
 139:               `).join('')}
 140:             </div>
 141:           ` : ''}
 142:         </div>
 143:         
 144:         <!-- Right Content -->
 145:         <div class="content">
 146:           <div class="summary-section">
 147:             <h2 class="section-header-main">PROFESSIONAL SUMMARY</h2>
 148:             <p class="summary-text">${personalInfo.summary}</p>
 149:           </div>
 150:           
 151:           <div class="experience-section">
 152:             <h2 class="section-header-main">EXPERIENCE</h2>
 153:             ${experience.map((exp, index) => `
 154:               <div class="experience-item">
 155:                 <div class="timeline-dot"></div>
 156:                 ${index < experience.length - 1 ? '<div class="timeline-line"></div>' : ''}
 157:                 <div class="experience-content">
 158:                   <h3 class="job-title">${exp.position}</h3>
 159:                   <div class="company-info">
 160:                     <span class="company-name">${exp.company}</span>
 161:                     <span class="date-range">${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}</span>
 162:                   </div>
 163:                   <ul class="achievements">
 164:                     ${exp.achievements.map(achievement => `
 165:                       <li>${achievement}</li>
 166:                     `).join('')}
 167:                   </ul>
 168:                 </div>
 169:               </div>
 170:             `).join('')}
 171:           </div>
 172:           
 173:           <div class="education-section">
 174:             <h2 class="section-header-main">EDUCATION</h2>
 175:             ${education.map(edu => `
 176:               <div class="education-item">
 177:                 <h3 class="degree">${edu.degree} in ${edu.field}</h3>
 178:                 <div class="institution-info">
 179:                   <span class="institution">${edu.institution}</span>
 180:                   <span class="grad-year">${edu.graduationDate}</span>
 181:                 </div>
 182:                 ${edu.honors && edu.honors.length > 0 ? `
 183:                   <div class="honors">${edu.honors.join(' • ')}</div>
 184:                 ` : ''}
 185:               </div>
 186:             `).join('')}
 187:           </div>
 188:         </div>
 189:       </div>
 190:     `;
 191:   },
 192:   
 193:   css: `
 194:     .resume-modern {
 195:       display: flex;
 196:       min-height: 100vh;
 197:       font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
 198:       background: white;
 199:     }
 200:     
 201:     .sidebar {
 202:       width: 30%;
 203:       background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
 204:       color: white;
 205:       padding: 2rem 1.5rem;
 206:     }
 207:     
 208:     .avatar-section {
 209:       text-align: center;
 210:       margin-bottom: 2rem;
 211:     }
 212:     
 213:     .avatar-circle {
 214:       width: 80px;
 215:       height: 80px;
 216:       border-radius: 50%;
 217:       background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
 218:       display: flex;
 219:       align-items: center;
 220:       justify-content: center;
 221:       font-size: 28px;
 222:       font-weight: bold;
 223:       margin: 0 auto 1rem;
 224:       box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
 225:     }
 226:     
 227:     .name {
 228:       font-size: 18px;
 229:       font-weight: 700;
 230:       margin: 0;
 231:       letter-spacing: 0.5px;
 232:     }
 233:     
 234:     .section-header {
 235:       font-size: 11px;
 236:       font-weight: 700;
 237:       text-transform: uppercase;
 238:       letter-spacing: 1.5px;
 239:       color: #3b82f6;
 240:       margin: 2rem 0 1rem;
 241:       padding-bottom: 0.5rem;
 242:       border-bottom: 2px solid #3b82f6;
 243:     }
 244:     
 245:     .contact-item {
 246:       display: flex;
 247:       align-items: center;
 248:       gap: 0.75rem;
 249:       margin-bottom: 0.75rem;
 250:       font-size: 10px;
 251:       line-height: 1.4;
 252:     }
 253:     
 254:     .icon {
 255:       font-size: 14px;
 256:       opacity: 0.9;
 257:     }
 258:     
 259:     .skill-item {
 260:       margin-bottom: 1rem;
 261:     }
 262:     
 263:     .skill-name {
 264:       font-size: 10px;
 265:       font-weight: 500;
 266:       margin-bottom: 0.25rem;
 267:     }
 268:     
 269:     .skill-bar {
 270:       height: 6px;
 271:       background: rgba(255, 255, 255, 0.2);
 272:       border-radius: 3px;
 273:       overflow: hidden;
 274:     }
 275:     
 276:     .skill-progress {
 277:       height: 100%;
 278:       background: linear-gradient(90deg, #3b82f6 0%, #60a5fa 100%);
 279:       border-radius: 3px;
 280:       transition: width 0.3s ease;
 281:     }
 282:     
 283:     .language-item {
 284:       display: flex;
 285:       justify-content: space-between;
 286:       margin-bottom: 0.5rem;
 287:       font-size: 10px;
 288:     }
 289:     
 290:     .content {
 291:       width: 70%;
 292:       padding: 2rem 2.5rem;
 293:     }
 294:     
 295:     .section-header-main {
 296:       font-size: 14px;
 297:       font-weight: 700;
 298:       text-transform: uppercase;
 299:       color: #1e293b;
 300:       margin: 2rem 0 1rem;
 301:       padding-bottom: 0.5rem;
 302:       border-bottom: 3px solid #3b82f6;
 303:       letter-spacing: 1px;
 304:     }
 305:     
 306:     .summary-text {
 307:       font-size: 11px;
 308:       line-height: 1.6;
 309:       color: #475569;
 310:       margin: 0;
 311:     }
 312:     
 313:     .experience-item {
 314:       position: relative;
 315:       padding-left: 2rem;
 316:       margin-bottom: 2rem;
 317:     }
 318:     
 319:     .timeline-dot {
 320:       position: absolute;
 321:       left: 0;
 322:       top: 5px;
 323:       width: 10px;
 324:       height: 10px;
 325:       background: #3b82f6;
 326:       border-radius: 50%;
 327:       box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
 328:     }
 329:     
 330:     .timeline-line {
 331:       position: absolute;
 332:       left: 4.5px;
 333:       top: 15px;
 334:       width: 1px;
 335:       height: calc(100% + 1rem);
 336:       background: linear-gradient(180deg, #3b82f6 0%, #cbd5e1 100%);
 337:     }
 338:     
 339:     .job-title {
 340:       font-size: 13px;
 341:       font-weight: 700;
 342:       color: #1e293b;
 343:       margin: 0 0 0.25rem;
 344:     }
 345:     
 346:     .company-info {
 347:       display: flex;
 348:       justify-content: space-between;
 349:       align-items: center;
 350:       margin-bottom: 0.75rem;
 351:     }
 352:     
 353:     .company-name {
 354:       font-size: 11px;
 355:       font-style: italic;
 356:       color: #64748b;
 357:     }
 358:     
 359:     .date-range {
 360:       font-size: 10px;
 361:       color: #94a3b8;
 362:       font-weight: 500;
 363:     }
 364:     
 365:     .achievements {
 366:       margin: 0;
 367:       padding-left: 1.25rem;
 368:       list-style-type: disc;
 369:     }
 370:     
 371:     .achievements li {
 372:       font-size: 10px;
 373:       line-height: 1.6;
 374:       color: #475569;
 375:       margin-bottom: 0.5rem;
 376:     }
 377:     
 378:     .education-item {
 379:       margin-bottom: 1.5rem;
 380:     }
 381:     
 382:     .degree {
 383:       font-size: 12px;
 384:       font-weight: 700;
 385:       color: #1e293b;
 386:       margin: 0 0 0.25rem;
 387:     }
 388:     
 389:     .institution-info {
 390:       display: flex;
 391:       justify-content: space-between;
 392:       font-size: 10px;
 393:       color: #64748b;
 394:       margin-bottom: 0.5rem;
 395:     }
 396:     
 397:     .honors {
 398:       font-size: 9px;
 399:       color: #3b82f6;
 400:       font-weight: 500;
 401:     }
 402:     
 403:     @media print {
 404:       .resume-modern {
 405:         min-height: auto;
 406:       }
 407:       .sidebar {
 408:         print-color-adjust: exact;
 409:         -webkit-print-color-adjust: exact;
 410:       }
 411:     }
 412:   `
 413: };
 414: 
 415: /**
 416:  * TEMPLATE 2: PROFESSIONAL (Traditional Single-Column)
 417:  */
 418: const professionalTemplate: ResumeTemplate = {
 419:   id: 'professional',
 420:   name: 'Professional',
 421:   description: 'Traditional single-column layout for corporate environments',
 422:   bestFor: ['Corporate', 'Finance', 'Legal', 'Consulting', 'Executive'],
 423:   preview: '/templates/professional-preview.png',
 424:   
 425:   generate: (data: ResumeData) => {
 426:     const { personalInfo, experience, education, skills } = data;
 427:     
 428:     return `
 429:       <div class="resume-professional">
 430:         <div class="header">
 431:           <h1 class="name">${personalInfo.fullName}</h1>
 432:           <div class="contact-bar">
 433:             <span>${personalInfo.email}</span>
 434:             <span>•</span>
 435:             <span>${personalInfo.phone}</span>
 436:             <span>•</span>
 437:             <span>${personalInfo.location}</span>
 438:             ${personalInfo.linkedin ? `<span>•</span><span>${personalInfo.linkedin}</span>` : ''}
 439:           </div>
 440:           <hr class="divider" />
 441:         </div>
 442:         
 443:         <div class="section">
 444:           <h2 class="section-title">PROFESSIONAL SUMMARY</h2>
 445:           <p class="summary">${personalInfo.summary}</p>
 446:         </div>
 447:         
 448:         <div class="section">
 449:           <h2 class="section-title">PROFESSIONAL EXPERIENCE</h2>
 450:           ${experience.map(exp => `
 451:             <div class="experience-entry">
 452:               <div class="entry-header">
 453:                 <h3 class="job-title">${exp.position}</h3>
 454:                 <span class="date-range">${exp.startDate} – ${exp.current ? 'Present' : exp.endDate}</span>
 455:               </div>
 456:               <div class="company-line">
 457:                 <span class="company">${exp.company}</span>
 458:                 ${exp.location ? `<span class="location">${exp.location}</span>` : ''}
 459:               </div>
 460:               <ul class="achievements">
 461:                 ${exp.achievements.map(achievement => `
 462:                   <li>${achievement}</li>
 463:                 `).join('')}
 464:               </ul>
 465:             </div>
 466:           `).join('')}
 467:         </div>
 468:         
 469:         <div class="section">
 470:           <h2 class="section-title">EDUCATION</h2>
 471:           ${education.map(edu => `
 472:             <div class="education-entry">
 473:               <div class="entry-header">
 474:                 <h3 class="degree">${edu.degree}, ${edu.field}</h3>
 475:                 <span class="date-range">${edu.graduationDate}</span>
 476:               </div>
 477:               <div class="institution">${edu.institution}, ${edu.location}</div>
 478:               ${edu.gpa ? `<div class="gpa">GPA: ${edu.gpa}</div>` : ''}
 479:               ${edu.honors && edu.honors.length > 0 ? `
 480:                 <div class="honors">${edu.honors.join(', ')}</div>
 481:               ` : ''}
 482:             </div>
 483:           `).join('')}
 484:         </div>
 485:         
 486:         <div class="section">
 487:           <h2 class="section-title">SKILLS & COMPETENCIES</h2>
 488:           <div class="skills-grid">
 489:             <div class="skill-category">
 490:               <strong>Technical:</strong> ${skills.technical.join(', ')}
 491:             </div>
 492:             ${skills.soft.length > 0 ? `
 493:               <div class="skill-category">
 494:                 <strong>Professional:</strong> ${skills.soft.join(', ')}
 495:               </div>
 496:             ` : ''}
 497:           </div>
 498:         </div>
 499:       </div>
 500:     `;
 501:   },
 502:   
 503:   css: `
 504:     .resume-professional {
 505:       max-width: 8.5in;
 506:       margin: 0 auto;
 507:       padding: 0.75in;
 508:       font-family: 'Times New Roman', Times, serif;
 509:       background: white;
 510:       color: #000;
 511:       line-height: 1.5;
 512:     }
 513:     
 514:     .header {
 515:       text-align: center;
 516:       margin-bottom: 1.5rem;
 517:     }
 518:     
 519:     .name {
 520:       font-size: 24px;
 521:       font-weight: 700;
 522:       margin: 0 0 0.5rem;
 523:       text-transform: uppercase;
 524:       letter-spacing: 1px;
 525:     }
 526:     
 527:     .contact-bar {
 528:       font-size: 11px;
 529:       color: #333;
 530:       margin-bottom: 0.75rem;
 531:     }
 532:     
 533:     .contact-bar span {
 534:       margin: 0 0.25rem;
 535:     }
 536:     
 537:     .divider {
 538:       border: none;
 539:       border-top: 2px solid #000;
 540:       margin: 0.75rem 0;
 541:     }
 542:     
 543:     .section {
 544:       margin-bottom: 1.5rem;
 545:     }
 546:     
 547:     .section-title {
 548:       font-size: 13px;
 549:       font-weight: 700;
 550:       text-transform: uppercase;
 551:       letter-spacing: 1px;
 552:       margin: 0 0 0.75rem;
 553:       padding-bottom: 0.25rem;
 554:       border-bottom: 1px solid #000;
 555:     }
 556:     
 557:     .summary {
 558:       font-size: 11px;
 559:       margin: 0;
 560:       text-align: justify;
 561:     }
 562:     
 563:     .experience-entry,
 564:     .education-entry {
 565:       margin-bottom: 1.25rem;
 566:     }
 567:     
 568:     .entry-header {
 569:       display: flex;
 570:       justify-content: space-between;
 571:       align-items: baseline;
 572:       margin-bottom: 0.25rem;
 573:     }
 574:     
 575:     .job-title,
 576:     .degree {
 577:       font-size: 12px;
 578:       font-weight: 700;
 579:       margin: 0;
 580:     }
 581:     
 582:     .date-range {
 583:       font-size: 11px;
 584:       color: #555;
 585:       font-style: italic;
 586:     }
 587:     
 588:     .company-line {
 589:       font-size: 11px;
 590:       color: #555;
 591:       font-style: italic;
 592:       margin-bottom: 0.5rem;
 593:     }
 594:     
 595:     .company,
 596:     .institution {
 597:       font-size: 11px;
 598:       color: #555;
 599:       font-style: italic;
 600:     }
 601:     
 602:     .location {
 603:       margin-left: 0.5rem;
 604:     }
 605:     
 606:     .achievements {
 607:       margin: 0.5rem 0 0 1.25rem;
 608:       padding: 0;
 609:       list-style-type: disc;
 610:     }
 611:     
 612:     .achievements li {
 613:       font-size: 11px;
 614:       margin-bottom: 0.25rem;
 615:       line-height: 1.5;
 616:     }
 617:     
 618:     .gpa,
 619:     .honors {
 620:       font-size: 10px;
 621:       color: #555;
 622:       margin-top: 0.25rem;
 623:     }
 624:     
 625:     .skills-grid {
 626:       font-size: 11px;
 627:     }
 628:     
 629:     .skill-category {
 630:       margin-bottom: 0.5rem;
 631:       line-height: 1.6;
 632:     }
 633:     
 634:     .skill-category strong {
 635:       font-weight: 700;
 636:     }
 637:     
 638:     @media print {
 639:       .resume-professional {
 640:         padding: 0.5in;
 641:       }
 642:     }
 643:   `
 644: };
 645: 
 646: /**
 647:  * TEMPLATE 3: CREATIVE (Asymmetric with Color Accents)
 648:  */
 649: const creativeTemplate: ResumeTemplate = {
 650:   id: 'creative',
 651:   name: 'Creative',
 652:   description: 'Asymmetric layout with bold colors and visual elements',
 653:   bestFor: ['Design', 'Marketing', 'Creative', 'UX/UI', 'Advertising'],
 654:   preview: '/templates/creative-preview.png',
 655:   
 656:   generate: (data: ResumeData) => {
 657:     const { personalInfo, experience, education, skills, projects } = data;
 658:     
 659:     return `
 660:       <div class="resume-creative">
 661:         <div class="header-creative">
 662:           <h1 class="name-gradient">${personalInfo.fullName}</h1>
 663:           <div class="tagline">Creative Professional</div>
 664:           <div class="contact-badges">
 665:             <span class="badge">${personalInfo.email}</span>
 666:             <span class="badge">${personalInfo.phone}</span>
 667:             <span class="badge">${personalInfo.location}</span>
 668:             ${personalInfo.linkedin ? `<span class="badge">LinkedIn</span>` : ''}
 669:           </div>
 670:         </div>
 671:         
 672:         <div class="content-grid">
 673:           <div class="main-column">
 674:             <div class="section-creative">
 675:               <h2 class="section-title-creative">Creative Profile</h2>
 676:               <p class="profile-text">${personalInfo.summary}</p>
 677:             </div>
 678:             
 679:             <div class="section-creative">
 680:               <h2 class="section-title-creative">Experience</h2>
 681:               ${experience.map(exp => `
 682:                 <div class="experience-card">
 683:                   <div class="card-header">
 684:                     <h3 class="role">${exp.position}</h3>
 685:                     <span class="period">${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}</span>
 686:                   </div>
 687:                   <div class="company-badge">${exp.company}</div>
 688:                   <ul class="achievements-creative">
 689:                     ${exp.achievements.map(achievement => `
 690:                       <li>${achievement}</li>
 691:                     `).join('')}
 692:                   </ul>
 693:                 </div>
 694:               `).join('')}
 695:             </div>
 696:             
 697:             ${projects && projects.length > 0 ? `
 698:               <div class="section-creative">
 699:                 <h2 class="section-title-creative">Projects</h2>
 700:                 ${projects.map(project => `
 701:                   <div class="project-card">
 702:                     <h3 class="project-name">${project.name}</h3>
 703:                     <p class="project-desc">${project.description}</p>
 704:                     <div class="tech-badges">
 705:                       ${project.technologies.map(tech => `
 706:                         <span class="tech-badge">${tech}</span>
 707:                       `).join('')}
 708:                     </div>
 709:                   </div>
 710:                 `).join('')}
 711:               </div>
 712:             ` : ''}
 713:           </div>
 714:           
 715:           <div class="side-column">
 716:             <div class="section-creative">
 717:               <h2 class="section-title-creative">Skills</h2>
 718:               <div class="skill-badges">
 719:                 ${skills.technical.map(skill => `
 720:                   <span class="skill-badge-creative">${skill}</span>
 721:                 `).join('')}
 722:               </div>
 723:             </div>
 724:             
 725:             <div class="section-creative">
 726:               <h2 class="section-title-creative">Education</h2>
 727:               ${education.map(edu => `
 728:                 <div class="education-card">
 729:                   <h3 class="degree-creative">${edu.degree}</h3>
 730:                   <div class="institution-creative">${edu.institution}</div>
 731:                   <div class="year-creative">${edu.graduationDate}</div>
 732:                 </div>
 733:               `).join('')}
 734:             </div>
 735:           </div>
 736:         </div>
 737:       </div>
 738:     `;
 739:   },
 740:   
 741:   css: `
 742:     .resume-creative {
 743:       font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
 744:       background: linear-gradient(135deg, #f8fafc 0%, #e0e7ff 100%);
 745:       padding: 2rem;
 746:       min-height: 100vh;
 747:     }
 748:     
 749:     .header-creative {
 750:       text-align: center;
 751:       margin-bottom: 2rem;
 752:       padding: 2rem;
 753:       background: white;
 754:       border-radius: 16px;
 755:       box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
 756:     }
 757:     
 758:     .name-gradient {
 759:       font-size: 36px;
 760:       font-weight: 800;
 761:       background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 50%, #ec4899 100%);
 762:       -webkit-background-clip: text;
 763:       -webkit-text-fill-color: transparent;
 764:       background-clip: text;
 765:       margin: 0 0 0.5rem;
 766:       letter-spacing: -0.5px;
 767:     }
 768:     
 769:     .tagline {
 770:       font-size: 14px;
 771:       color: #64748b;
 772:       font-weight: 500;
 773:       margin-bottom: 1rem;
 774:     }
 775:     
 776:     .contact-badges {
 777:       display: flex;
 778:       gap: 0.75rem;
 779:       justify-content: center;
 780:       flex-wrap: wrap;
 781:     }
 782:     
 783:     .badge {
 784:       background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
 785:       color: white;
 786:       padding: 0.5rem 1rem;
 787:       border-radius: 20px;
 788:       font-size: 10px;
 789:       font-weight: 600;
 790:       box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
 791:     }
 792:     
 793:     .content-grid {
 794:       display: grid;
 795:       grid-template-columns: 60% 40%;
 796:       gap: 2rem;
 797:     }
 798:     
 799:     .section-creative {
 800:       background: white;
 801:       padding: 1.5rem;
 802:       border-radius: 12px;
 803:       margin-bottom: 1.5rem;
 804:       box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
 805:     }
 806:     
 807:     .section-title-creative {
 808:       font-size: 16px;
 809:       font-weight: 700;
 810:       color: white;
 811:       background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
 812:       padding: 0.5rem 1rem;
 813:       border-radius: 8px;
 814:       margin: -1.5rem -1.5rem 1rem;
 815:     }
 816:     
 817:     .profile-text {
 818:       font-size: 11px;
 819:       line-height: 1.7;
 820:       color: #475569;
 821:       margin: 0;
 822:     }
 823:     
 824:     .experience-card,
 825:     .project-card {
 826:       margin-bottom: 1.5rem;
 827:       padding-bottom: 1.5rem;
 828:       border-bottom: 2px solid #f1f5f9;
 829:     }
 830:     
 831:     .experience-card:last-child,
 832:     .project-card:last-child {
 833:       border-bottom: none;
 834:       margin-bottom: 0;
 835:       padding-bottom: 0;
 836:     }
 837:     
 838:     .card-header {
 839:       display: flex;
 840:       justify-content: space-between;
 841:       align-items: baseline;
 842:       margin-bottom: 0.5rem;
 843:     }
 844:     
 845:     .role,
 846:     .project-name {
 847:       font-size: 13px;
 848:       font-weight: 700;
 849:       color: #1e293b;
 850:       margin: 0;
 851:     }
 852:     
 853:     .period {
 854:       font-size: 10px;
 855:       color: #94a3b8;
 856:       font-weight: 600;
 857:     }
 858:     
 859:     .company-badge {
 860:       display: inline-block;
 861:       background: linear-gradient(135deg, #ec4899 0%, #f43f5e 100%);
 862:       color: white;
 863:       padding: 0.25rem 0.75rem;
 864:       border-radius: 12px;
 865:       font-size: 10px;
 866:       font-weight: 600;
 867:       margin-bottom: 0.75rem;
 868:     }
 869:     
 870:     .achievements-creative {
 871:       margin: 0;
 872:       padding-left: 1.25rem;
 873:       list-style-type: none;
 874:     }
 875:     
 876:     .achievements-creative li {
 877:       font-size: 10px;
 878:       line-height: 1.6;
 879:       color: #475569;
 880:       margin-bottom: 0.5rem;
 881:       position: relative;
 882:     }
 883:     
 884:     .achievements-creative li:before {
 885:       content: "→";
 886:       position: absolute;
 887:       left: -1.25rem;
 888:       color: #3b82f6;
 889:       font-weight: 700;
 890:     }
 891:     
 892:     .project-desc {
 893:       font-size: 10px;
 894:       line-height: 1.6;
 895:       color: #475569;
 896:       margin: 0.5rem 0;
 897:     }
 898:     
 899:     .tech-badges {
 900:       display: flex;
 901:       gap: 0.5rem;
 902:       flex-wrap: wrap;
 903:       margin-top: 0.75rem;
 904:     }
 905:     
 906:     .tech-badge {
 907:       background: linear-gradient(135deg, #8b5cf6 0%, #6366f1 100%);
 908:       color: white;
 909:       padding: 0.25rem 0.75rem;
 910:       border-radius: 12px;
 911:       font-size: 9px;
 912:       font-weight: 600;
 913:     }
 914:     
 915:     .skill-badges {
 916:       display: flex;
 917:       gap: 0.5rem;
 918:       flex-wrap: wrap;
 919:     }
 920:     
 921:     .skill-badge-creative {
 922:       background: linear-gradient(135deg, #10b981 0%, #059669 100%);
 923:       color: white;
 924:       padding: 0.5rem 1rem;
 925:       border-radius: 16px;
 926:       font-size: 10px;
 927:       font-weight: 600;
 928:       box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
 929:     }
 930:     
 931:     .education-card {
 932:       margin-bottom: 1rem;
 933:     }
 934:     
 935:     .degree-creative {
 936:       font-size: 12px;
 937:       font-weight: 700;
 938:       color: #1e293b;
 939:       margin: 0 0 0.25rem;
 940:     }
 941:     
 942:     .institution-creative {
 943:       font-size: 10px;
 944:       color: #64748b;
 945:       margin-bottom: 0.25rem;
 946:     }
 947:     
 948:     .year-creative {
 949:       font-size: 9px;
 950:       color: #94a3b8;
 951:       font-weight: 600;
 952:     }
 953:     
 954:     @media print {
 955:       .resume-creative {
 956:         background: white;
 957:       }
 958:       .section-creative {
 959:         box-shadow: none;
 960:         border: 1px solid #e2e8f0;
 961:       }
 962:     }
 963:   `
 964: };
 965: 
 966: /**
 967:  * TEMPLATE 4: TECH-FOCUSED (Developer/Engineer)
 968:  */
 969: const techTemplate: ResumeTemplate = {
 970:   id: 'tech',
 971:   name: 'Tech-Focused',
 972:   description: 'Developer-optimized with tech stack badges and GitHub integration',
 973:   bestFor: ['Software Engineering', 'DevOps', 'Data Science', 'Full-Stack'],
 974:   preview: '/templates/tech-preview.png',
 975:   
 976:   generate: (data: ResumeData) => {
 977:     const { personalInfo, experience, education, skills, projects } = data;
 978:     
 979:     return `
 980:       <div class="resume-tech">
 981:         <div class="header-tech">
 982:           <h1 class="name-tech">${personalInfo.fullName}</h1>
 983:           <div class="title-tech">Software Engineer</div>
 984:           <div class="links-tech">
 985:             ${personalInfo.email ? `<span class="link-item">📧 ${personalInfo.email}</span>` : ''}
 986:             ${personalInfo.github ? `<span class="link-item">⚡ GitHub</span>` : ''}
 987:             ${personalInfo.linkedin ? `<span class="link-item">💼 LinkedIn</span>` : ''}
 988:             ${personalInfo.website ? `<span class="link-item">🌐 Portfolio</span>` : ''}
 989:           </div>
 990:         </div>
 991:         
 992:         <div class="tech-stack-section">
 993:           <h2 class="section-header-tech">// Tech Stack</h2>
 994:           <div class="tech-stack-grid">
 995:             ${skills.technical.map(skill => {
 996:               const color = getTechColor(skill);
 997:               return `<span class="tech-stack-badge" style="background: ${color}">${skill}</span>`;
 998:             }).join('')}
 999:           </div>
1000:         </div>
1001:         
1002:         <div class="section-tech">
1003:           <h2 class="section-header-tech">// Professional Experience</h2>
1004:           ${experience.map(exp => `
1005:             <div class="job-entry-tech">
1006:               <div class="job-header-tech">
1007:                 <div>
1008:                   <h3 class="job-title-tech">${exp.position}</h3>
1009:                   <div class="company-tech">${exp.company} • ${exp.location}</div>
1010:                 </div>
1011:                 <div class="date-tech">${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}</div>
1012:               </div>
1013:               ${exp.technologies && exp.technologies.length > 0 ? `
1014:                 <div class="tech-used">
1015:                   ${exp.technologies.map(tech => `<code class="tech-tag">${tech}</code>`).join('')}
1016:                 </div>
1017:               ` : ''}
1018:               <ul class="achievements-tech">
1019:                 ${exp.achievements.map(achievement => `
1020:                   <li><code class="bullet">></code> ${achievement}</li>
1021:                 `).join('')}
1022:               </ul>
1023:             </div>
1024:           `).join('')}
1025:         </div>
1026:         
1027:         ${projects && projects.length > 0 ? `
1028:           <div class="section-tech">
1029:             <h2 class="section-header-tech">// Projects</h2>
1030:             ${projects.map(project => `
1031:               <div class="project-entry-tech">
1032:                 <div class="project-header-tech">
1033:                   <h3 class="project-title-tech">${project.name}</h3>
1034:                   ${project.github ? `<span class="github-link">⚡ GitHub</span>` : ''}
1035:                 </div>
1036:                 <p class="project-description-tech">${project.description}</p>
1037:                 <div class="project-tech-stack">
1038:                   ${project.technologies.map(tech => `<code class="tech-tag">${tech}</code>`).join('')}
1039:                 </div>
1040:               </div>
1041:             `).join('')}
1042:           </div>
1043:         ` : ''}
1044:         
1045:         <div class="section-tech">
1046:           <h2 class="section-header-tech">// Education</h2>
1047:           ${education.map(edu => `
1048:             <div class="education-entry-tech">
1049:               <h3 class="degree-tech">${edu.degree} in ${edu.field}</h3>
1050:               <div class="institution-tech">${edu.institution} • ${edu.graduationDate}</div>
1051:             </div>
1052:           `).join('')}
1053:         </div>
1054:       </div>
1055:     `;
1056:   },
1057:   
1058:   css: `
1059:     .resume-tech {
1060:       max-width: 8.5in;
1061:       margin: 0 auto;
1062:       padding: 0.75in;
1063:       font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
1064:       background: #0f172a;
1065:       color: #e2e8f0;
1066:     }
1067:     
1068:     .header-tech {
1069:       border-bottom: 2px solid #3b82f6;
1070:       padding-bottom: 1.5rem;
1071:       margin-bottom: 2rem;
1072:     }
1073:     
1074:     .name-tech {
1075:       font-size: 28px;
1076:       font-weight: 800;
1077:       color: #3b82f6;
1078:       margin: 0 0 0.25rem;
1079:       font-family: 'Fira Code', 'Courier New', monospace;
1080:     }
1081:     
1082:     .title-tech {
1083:       font-size: 14px;
1084:       color: #94a3b8;
1085:       font-weight: 500;
1086:       margin-bottom: 1rem;
1087:     }
1088:     
1089:     .links-tech {
1090:       display: flex;
1091:       gap: 1.5rem;
1092:       flex-wrap: wrap;
1093:     }
1094:     
1095:     .link-item {
1096:       font-size: 10px;
1097:       color: #cbd5e1;
1098:       font-family: 'Fira Code', monospace;
1099:     }
1100:     
1101:     .tech-stack-section {
1102:       background: #1e293b;
1103:       padding: 1.5rem;
1104:       border-radius: 8px;
1105:       margin-bottom: 2rem;
1106:       border-left: 4px solid #3b82f6;
1107:     }
1108:     
1109:     .section-header-tech {
1110:       font-size: 14px;
1111:       font-weight: 700;
1112:       color: #3b82f6;
1113:       font-family: 'Fira Code', monospace;
1114:       margin: 0 0 1rem;
1115:     }
1116:     
1117:     .tech-stack-grid {
1118:       display: flex;
1119:       gap: 0.75rem;
1120:       flex-wrap: wrap;
1121:     }
1122:     
1123:     .tech-stack-badge {
1124:       padding: 0.5rem 1rem;
1125:       border-radius: 6px;
1126:       font-size: 10px;
1127:       font-weight: 600;
1128:       color: white;
1129:       font-family: 'Fira Code', monospace;
1130:     }
1131:     
1132:     .section-tech {
1133:       margin-bottom: 2rem;
1134:     }
1135:     
1136:     .job-entry-tech,
1137:     .project-entry-tech {
1138:       background: #1e293b;
1139:       padding: 1.5rem;
1140:       border-radius: 8px;
1141:       margin-bottom: 1.5rem;
1142:       border-left: 4px solid #64748b;
1143:     }
1144:     
1145:     .job-header-tech {
1146:       display: flex;
1147:       justify-content: space-between;
1148:       align-items: flex-start;
1149:       margin-bottom: 0.75rem;
1150:     }
1151:     
1152:     .job-title-tech {
1153:       font-size: 14px;
1154:       font-weight: 700;
1155:       color: #f1f5f9;
1156:       margin: 0 0 0.25rem;
1157:     }
1158:     
1159:     .company-tech {
1160:       font-size: 11px;
1161:       color: #94a3b8;
1162:     }
1163:     
1164:     .date-tech {
1165:       font-size: 10px;
1166:       color: #64748b;
1167:       font-family: 'Fira Code', monospace;
1168:     }
1169:     
1170:     .tech-used,
1171:     .project-tech-stack {
1172:       display: flex;
1173:       gap: 0.5rem;
1174:       flex-wrap: wrap;
1175:       margin-bottom: 0.75rem;
1176:     }
1177:     
1178:     .tech-tag {
1179:       background: #334155;
1180:       color: #3b82f6;
1181:       padding: 0.25rem 0.5rem;
1182:       border-radius: 4px;
1183:       font-size: 9px;
1184:       font-family: 'Fira Code', monospace;
1185:       font-weight: 600;
1186:     }
1187:     
1188:     .achievements-tech {
1189:       margin: 0;
1190:       padding: 0;
1191:       list-style: none;
1192:     }
1193:     
1194:     .achievements-tech li {
1195:       font-size: 10px;
1196:       line-height: 1.7;
1197:       color: #cbd5e1;
1198:       margin-bottom: 0.5rem;
1199:     }
1200:     
1201:     .bullet {
1202:       color: #3b82f6;
1203:       font-weight: 700;
1204:       margin-right: 0.5rem;
1205:     }
1206:     
1207:     .project-header-tech {
1208:       display: flex;
1209:       justify-content: space-between;
1210:       align-items: center;
1211:       margin-bottom: 0.5rem;
1212:     }
1213:     
1214:     .project-title-tech {
1215:       font-size: 13px;
1216:       font-weight: 700;
1217:       color: #f1f5f9;
1218:       margin: 0;
1219:     }
1220:     
1221:     .github-link {
1222:       font-size: 10px;
1223:       color: #3b82f6;
1224:       font-family: 'Fira Code', monospace;
1225:     }
1226:     
1227:     .project-description-tech {
1228:       font-size: 10px;
1229:       line-height: 1.6;
1230:       color: #cbd5e1;
1231:       margin: 0 0 0.75rem;
1232:     }
1233:     
1234:     .education-entry-tech {
1235:       background: #1e293b;
1236:       padding: 1rem;
1237:       border-radius: 8px;
1238:       margin-bottom: 1rem;
1239:     }
1240:     
1241:     .degree-tech {
1242:       font-size: 12px;
1243:       font-weight: 700;
1244:       color: #f1f5f9;
1245:       margin: 0 0 0.25rem;
1246:     }
1247:     
1248:     .institution-tech {
1249:       font-size: 10px;
1250:       color: #94a3b8;
1251:     }
1252:     
1253:     @media print {
1254:       .resume-tech {
1255:         background: white;
1256:         color: #1e293b;
1257:       }
1258:       .header-tech {
1259:         border-bottom-color: #1e293b;
1260:       }
1261:       .name-tech,
1262:       .section-header-tech {
1263:         color: #1e293b;
1264:       }
1265:       .job-entry-tech,
1266:       .project-entry-tech,
1267:       .education-entry-tech,
1268:       .tech-stack-section {
1269:         background: #f8fafc;
1270:         border: 1px solid #e2e8f0;
1271:       }
1272:     }
1273:   `
1274: };
1275: 
1276: /**
1277:  * TEMPLATE 5: MINIMAL/ATS (Maximum Compatibility)
1278:  */
1279: const minimalTemplate: ResumeTemplate = {
1280:   id: 'minimal',
1281:   name: 'Minimal/ATS',
1282:   description: 'Plain text format optimized for ATS systems',
1283:   bestFor: ['ATS Systems', 'Government', 'Large Corporations', 'Conservative'],
1284:   preview: '/templates/minimal-preview.png',
1285:   
1286:   generate: (data: ResumeData) => {
1287:     const { personalInfo, experience, education, skills } = data;
1288:     
1289:     return `
1290:       <div class="resume-minimal">
1291:         <div class="header-minimal">
1292:           <h1 class="name-minimal">${personalInfo.fullName}</h1>
1293:           <div class="contact-minimal">
1294:             ${personalInfo.email} | ${personalInfo.phone} | ${personalInfo.location}
1295:             ${personalInfo.linkedin ? ` | ${personalInfo.linkedin}` : ''}
1296:           </div>
1297:         </div>
1298:         
1299:         <div class="section-minimal">
1300:           <h2 class="section-title-minimal">PROFESSIONAL SUMMARY</h2>
1301:           <p class="text-minimal">${personalInfo.summary}</p>
1302:         </div>
1303:         
1304:         <div class="section-minimal">
1305:           <h2 class="section-title-minimal">PROFESSIONAL EXPERIENCE</h2>
1306:           ${experience.map(exp => `
1307:             <div class="entry-minimal">
1308:               <div class="entry-title-minimal">${exp.position}</div>
1309:               <div class="entry-subtitle-minimal">${exp.company}, ${exp.location}</div>
1310:               <div class="entry-date-minimal">${exp.startDate} - ${exp.current ? 'Present' : exp.endDate}</div>
1311:               <ul class="list-minimal">
1312:                 ${exp.achievements.map(achievement => `
1313:                   <li>${achievement}</li>
1314:                 `).join('')}
1315:               </ul>
1316:             </div>
1317:           `).join('')}
1318:         </div>
1319:         
1320:         <div class="section-minimal">
1321:           <h2 class="section-title-minimal">EDUCATION</h2>
1322:           ${education.map(edu => `
1323:             <div class="entry-minimal">
1324:               <div class="entry-title-minimal">${edu.degree}, ${edu.field}</div>
1325:               <div class="entry-subtitle-minimal">${edu.institution}, ${edu.location}</div>
1326:               <div class="entry-date-minimal">${edu.graduationDate}</div>
1327:               ${edu.gpa ? `<div class="text-minimal">GPA: ${edu.gpa}</div>` : ''}
1328:             </div>
1329:           `).join('')}
1330:         </div>
1331:         
1332:         <div class="section-minimal">
1333:           <h2 class="section-title-minimal">SKILLS</h2>
1334:           <div class="text-minimal">
1335:             <strong>Technical Skills:</strong> ${skills.technical.join(', ')}
1336:           </div>
1337:           ${skills.soft.length > 0 ? `
1338:             <div class="text-minimal">
1339:               <strong>Professional Skills:</strong> ${skills.soft.join(', ')}
1340:             </div>
1341:           ` : ''}
1342:         </div>
1343:       </div>
1344:     `;
1345:   },
1346:   
1347:   css: `
1348:     .resume-minimal {
1349:       max-width: 8.5in;
1350:       margin: 0 auto;
1351:       padding: 1in;
1352:       font-family: Arial, Helvetica, sans-serif;
1353:       background: white;
1354:       color: #000;
1355:       line-height: 1.5;
1356:     }
1357:     
1358:     .header-minimal {
1359:       margin-bottom: 1.5rem;
1360:     }
1361:     
1362:     .name-minimal {
1363:       font-size: 16px;
1364:       font-weight: 700;
1365:       margin: 0 0 0.5rem;
1366:       text-transform: uppercase;
1367:     }
1368:     
1369:     .contact-minimal {
1370:       font-size: 11px;
1371:       margin: 0;
1372:     }
1373:     
1374:     .section-minimal {
1375:       margin-bottom: 1.5rem;
1376:     }
1377:     
1378:     .section-title-minimal {
1379:       font-size: 12px;
1380:       font-weight: 700;
1381:       margin: 0 0 0.75rem;
1382:       text-transform: uppercase;
1383:     }
1384:     
1385:     .entry-minimal {
1386:       margin-bottom: 1rem;
1387:     }
1388:     
1389:     .entry-title-minimal {
1390:       font-size: 11px;
1391:       font-weight: 700;
1392:       margin-bottom: 0.25rem;
1393:     }
1394:     
1395:     .entry-subtitle-minimal {
1396:       font-size: 11px;
1397:       margin-bottom: 0.25rem;
1398:     }
1399:     
1400:     .entry-date-minimal {
1401:       font-size: 11px;
1402:       margin-bottom: 0.5rem;
1403:     }
1404:     
1405:     .text-minimal {
1406:       font-size: 11px;
1407:       margin: 0 0 0.5rem;
1408:     }
1409:     
1410:     .list-minimal {
1411:       margin: 0.5rem 0 0 1.25rem;
1412:       padding: 0;
1413:       list-style-type: disc;
1414:     }
1415:     
1416:     .list-minimal li {
1417:       font-size: 11px;
1418:       margin-bottom: 0.25rem;
1419:     }
1420:     
1421:     @media print {
1422:       .resume-minimal {
1423:         padding: 0.5in;
1424:       }
1425:     }
1426:   `
1427: };
1428: 
1429: /**
1430:  * Helper function to get tech-specific colors
1431:  */
1432: function getTechColor(tech: string): string {
1433:   const techLower = tech.toLowerCase();
1434:   const colorMap: Record<string, string> = {
1435:     'react': '#61dafb',
1436:     'vue': '#42b883',
1437:     'angular': '#dd0031',
1438:     'javascript': '#f7df1e',
1439:     'typescript': '#3178c6',
1440:     'python': '#3776ab',
1441:     'java': '#007396',
1442:     'node': '#339933',
1443:     'aws': '#ff9900',
1444:     'docker': '#2496ed',
1445:     'kubernetes': '#326ce5',
1446:     'mongodb': '#47a248',
1447:     'postgresql': '#336791',
1448:     'mysql': '#4479a1',
1449:     'redis': '#dc382d',
1450:     'graphql': '#e10098',
1451:     'git': '#f05032',
1452:     'linux': '#fcc624',
1453:   };
1454:   
1455:   for (const [key, color] of Object.entries(colorMap)) {
1456:     if (techLower.includes(key)) {
1457:       return color;
1458:     }
1459:   }
1460:   
1461:   return '#3b82f6'; // Default blue
1462: }
1463: 
1464: /**
1465:  * TEMPLATE 6: EXECUTIVE (C-Suite/Director)
1466:  */
1467: const executiveTemplate: ResumeTemplate = {
1468:   id: 'executive',
1469:   name: 'Executive',
1470:   description: 'Premium layout for C-suite and senior leadership',
1471:   bestFor: ['C-Suite', 'VP', 'Director', 'Senior Leadership', 'Board Members'],
1472:   preview: '/templates/executive-preview.png',
1473:   
1474:   generate: (data: ResumeData) => {
1475:     const { personalInfo, experience, education, skills } = data;
1476:     
1477:     return `
1478:       <div class="resume-executive">
1479:         <div class="header-executive">
1480:           <div class="header-content">
1481:             <h1 class="name-executive">${personalInfo.fullName}</h1>
1482:             <div class="executive-title">Chief Executive Officer | Board Director</div>
1483:             <div class="contact-executive">
1484:               ${personalInfo.email} • ${personalInfo.phone} • ${personalInfo.location}
1485:               ${personalInfo.linkedin ? ` • ${personalInfo.linkedin}` : ''}
1486:             </div>
1487:           </div>
1488:         </div>
1489:         
1490:         <div class="executive-summary-section">
1491:           <h2 class="section-header-executive">EXECUTIVE SUMMARY</h2>
1492:           <p class="executive-summary-text">${personalInfo.summary}</p>
1493:         </div>
1494:         
1495:         <div class="key-achievements-section">
1496:           <h2 class="section-header-executive">KEY ACHIEVEMENTS</h2>
1497:           <div class="achievements-grid">
1498:             ${experience.slice(0, 1).map(exp => 
1499:               exp.achievements.slice(0, 4).map(achievement => {
1500:                 const metrics = achievement.match(/\d+[%$MKB]?/g);
1501:                 return `
1502:                   <div class="achievement-card">
1503:                     <div class="achievement-metric">${metrics ? metrics[0] : '✓'}</div>
1504:                     <div class="achievement-text">${achievement}</div>
1505:                   </div>
1506:                 `;
1507:               }).join('')
1508:             ).join('')}
1509:           </div>
1510:         </div>
1511:         
1512:         <div class="section-executive">
1513:           <h2 class="section-header-executive">EXECUTIVE EXPERIENCE</h2>
1514:           ${experience.map(exp => `
1515:             <div class="executive-entry">
1516:               <div class="executive-entry-header">
1517:                 <div>
1518:                   <h3 class="executive-position">${exp.position}</h3>
1519:                   <div class="executive-company">${exp.company}</div>
1520:                 </div>
1521:                 <div class="executive-dates">${exp.startDate} – ${exp.current ? 'Present' : exp.endDate}</div>
1522:               </div>
1523:               <div class="leadership-scope">
1524:                 <span class="scope-item">P&L: $10M+</span>
1525:                 <span class="scope-item">Team: 50+ Direct/Indirect</span>
1526:                 <span class="scope-item">Board Reporting</span>
1527:               </div>
1528:               <ul class="executive-achievements">
1529:                 ${exp.achievements.map(achievement => `
1530:                   <li>${achievement}</li>
1531:                 `).join('')}
1532:               </ul>
1533:             </div>
1534:           `).join('')}
1535:         </div>
1536:         
1537:         <div class="two-column-section">
1538:           <div class="column">
1539:             <h2 class="section-header-executive">EDUCATION</h2>
1540:             ${education.map(edu => `
1541:               <div class="executive-education">
1542:                 <h3 class="executive-degree">${edu.degree}</h3>
1543:                 <div class="executive-institution">${edu.institution}</div>
1544:                 <div class="executive-year">${edu.graduationDate}</div>
1545:                 ${edu.honors && edu.honors.length > 0 ? `
1546:                   <div class="executive-honors">${edu.honors.join(' • ')}</div>
1547:                 ` : ''}
1548:               </div>
1549:             `).join('')}
1550:           </div>
1551:           
1552:           <div class="column">
1553:             <h2 class="section-header-executive">PROFESSIONAL AFFILIATIONS</h2>
1554:             <ul class="affiliations-list">
1555:               <li>Board Member, Tech Industry Association</li>
1556:               <li>Advisory Board, Innovation Council</li>
1557:               <li>Member, CEO Roundtable</li>
1558:             </ul>
1559:             
1560:             ${skills.certifications && skills.certifications.length > 0 ? `
1561:               <h2 class="section-header-executive">CERTIFICATIONS</h2>
1562:               <ul class="certifications-list">
1563:                 ${skills.certifications.map(cert => `
1564:                   <li>${cert.name} - ${cert.issuer}</li>
1565:                 `).join('')}
1566:               </ul>
1567:             ` : ''}
1568:           </div>
1569:         </div>
1570:       </div>
1571:     `;
1572:   },
1573:   
1574:   css: `
1575:     .resume-executive {
1576:       max-width: 8.5in;
1577:       margin: 0 auto;
1578:       padding: 0.75in;
1579:       font-family: 'Garamond', 'Georgia', serif;
1580:       background: white;
1581:       color: #1a1a1a;
1582:     }
1583:     
1584:     .header-executive {
1585:       background: linear-gradient(135deg, #1e3a5f 0%, #2c5282 100%);
1586:       color: white;
1587:       padding: 2rem;
1588:       margin: -0.75in -0.75in 2rem;
1589:       border-bottom: 4px solid #d4af37;
1590:     }
1591:     
1592:     .name-executive {
1593:       font-size: 32px;
1594:       font-weight: 700;
1595:       margin: 0 0 0.5rem;
1596:       letter-spacing: 1px;
1597:     }
1598:     
1599:     .executive-title {
1600:       font-size: 16px;
1601:       font-weight: 500;
1602:       margin-bottom: 1rem;
1603:       color: #d4af37;
1604:       letter-spacing: 0.5px;
1605:     }
1606:     
1607:     .contact-executive {
1608:       font-size: 11px;
1609:       opacity: 0.95;
1610:     }
1611:     
1612:     .executive-summary-section {
1613:       background: #f8f9fa;
1614:       padding: 1.5rem;
1615:       border-left: 4px solid #d4af37;
1616:       margin-bottom: 2rem;
1617:     }
1618:     
1619:     .section-header-executive {
1620:       font-size: 14px;
1621:       font-weight: 700;
1622:       text-transform: uppercase;
1623:       color: #1e3a5f;
1624:       margin: 0 0 1rem;
1625:       letter-spacing: 1.5px;
1626:       border-bottom: 2px solid #d4af37;
1627:       padding-bottom: 0.5rem;
1628:     }
1629:     
1630:     .executive-summary-text {
1631:       font-size: 12px;
1632:       line-height: 1.8;
1633:       margin: 0;
1634:       text-align: justify;
1635:     }
1636:     
1637:     .key-achievements-section {
1638:       margin-bottom: 2rem;
1639:     }
1640:     
1641:     .achievements-grid {
1642:       display: grid;
1643:       grid-template-columns: repeat(2, 1fr);
1644:       gap: 1rem;
1645:     }
1646:     
1647:     .achievement-card {
1648:       background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
1649:       padding: 1rem;
1650:       border-radius: 8px;
1651:       border-left: 4px solid #d4af37;
1652:     }
1653:     
1654:     .achievement-metric {
1655:       font-size: 24px;
1656:       font-weight: 700;
1657:       color: #1e3a5f;
1658:       margin-bottom: 0.5rem;
1659:     }
1660:     
1661:     .achievement-text {
1662:       font-size: 10px;
1663:       line-height: 1.5;
1664:       color: #495057;
1665:     }
1666:     
1667:     .section-executive {
1668:       margin-bottom: 2rem;
1669:     }
1670:     
1671:     .executive-entry {
1672:       margin-bottom: 2rem;
1673:       padding-bottom: 2rem;
1674:       border-bottom: 1px solid #dee2e6;
1675:     }
1676:     
1677:     .executive-entry:last-child {
1678:       border-bottom: none;
1679:     }
1680:     
1681:     .executive-entry-header {
1682:       display: flex;
1683:       justify-content: space-between;
1684:       align-items: flex-start;
1685:       margin-bottom: 0.75rem;
1686:     }
1687:     
1688:     .executive-position {
1689:       font-size: 15px;
1690:       font-weight: 700;
1691:       color: #1e3a5f;
1692:       margin: 0 0 0.25rem;
1693:     }
1694:     
1695:     .executive-company {
1696:       font-size: 13px;
1697:       font-style: italic;
1698:       color: #495057;
1699:     }
1700:     
1701:     .executive-dates {
1702:       font-size: 11px;
1703:       color: #6c757d;
1704:       font-weight: 600;
1705:     }
1706:     
1707:     .leadership-scope {
1708:       display: flex;
1709:       gap: 1.5rem;
1710:       margin-bottom: 1rem;
1711:       padding: 0.75rem;
1712:       background: #f8f9fa;
1713:       border-radius: 4px;
1714:     }
1715:     
1716:     .scope-item {
1717:       font-size: 10px;
1718:       font-weight: 600;
1719:       color: #1e3a5f;
1720:     }
1721:     
1722:     .executive-achievements {
1723:       margin: 0;
1724:       padding-left: 1.5rem;
1725:       list-style-type: none;
1726:     }
1727:     
1728:     .executive-achievements li {
1729:       font-size: 11px;
1730:       line-height: 1.7;
1731:       margin-bottom: 0.5rem;
1732:       position: relative;
1733:     }
1734:     
1735:     .executive-achievements li:before {
1736:       content: "▸";
1737:       position: absolute;
1738:       left: -1.5rem;
1739:       color: #d4af37;
1740:       font-weight: 700;
1741:     }
1742:     
1743:     .two-column-section {
1744:       display: grid;
1745:       grid-template-columns: repeat(2, 1fr);
1746:       gap: 2rem;
1747:     }
1748:     
1749:     .column {
1750:       margin-bottom: 1rem;
1751:     }
1752:     
1753:     .executive-education {
1754:       margin-bottom: 1.5rem;
1755:     }
1756:     
1757:     .executive-degree {
1758:       font-size: 13px;
1759:       font-weight: 700;
1760:       color: #1e3a5f;
1761:       margin: 0 0 0.25rem;
1762:     }
1763:     
1764:     .executive-institution {
1765:       font-size: 11px;
1766:       font-style: italic;
1767:       color: #495057;
1768:       margin-bottom: 0.25rem;
1769:     }
1770:     
1771:     .executive-year {
1772:       font-size: 10px;
1773:       color: #6c757d;
1774:     }
1775:     
1776:     .executive-honors {
1777:       font-size: 10px;
1778:       color: #d4af37;
1779:       font-weight: 600;
1780:       margin-top: 0.25rem;
1781:     }
1782:     
1783:     .affiliations-list,
1784:     .certifications-list {
1785:       margin: 0.5rem 0 0 1.25rem;
1786:       padding: 0;
1787:       list-style-type: disc;
1788:     }
1789:     
1790:     .affiliations-list li,
1791:     .certifications-list li {
1792:       font-size: 10px;
1793:       line-height: 1.6;
1794:       margin-bottom: 0.5rem;
1795:     }
1796:     
1797:     @media print {
1798:       .resume-executive {
1799:         padding: 0.5in;
1800:       }
1801:       .header-executive {
1802:         margin: -0.5in -0.5in 1.5rem;
1803:         print-color-adjust: exact;
1804:         -webkit-print-color-adjust: exact;
1805:       }
1806:     }
1807:   `
1808: };
1809: 
1810: /**
1811:  * TEMPLATE 7: CURRICULUM VITAE (Academic/Research)
1812:  */
1813: const cvTemplate: ResumeTemplate = {
1814:   id: 'cv',
1815:   name: 'Curriculum Vitae',
1816:   description: 'Academic format for research and scholarly positions',
1817:   bestFor: ['Academia', 'Research', 'PhD', 'Medical', 'Scientific'],
1818:   preview: '/templates/cv-preview.png',
1819:   
1820:   generate: (data: ResumeData) => {
1821:     const { personalInfo, experience, education, skills } = data;
1822:     
1823:     return `
1824:       <div class="resume-cv">
1825:         <div class="header-cv">
1826:           <h1 class="name-cv">${personalInfo.fullName}, Ph.D.</h1>
1827:           <div class="contact-cv">
1828:             ${personalInfo.email} | ${personalInfo.phone} | ${personalInfo.location}
1829:           </div>
1830:           <div class="academic-profiles">
1831:             ${personalInfo.linkedin ? `LinkedIn: ${personalInfo.linkedin} | ` : ''}
1832:             Google Scholar | ORCID: 0000-0000-0000-0000
1833:           </div>
1834:         </div>
1835:         
1836:         <div class="section-cv">
1837:           <h2 class="section-title-cv">1. ACADEMIC APPOINTMENTS</h2>
1838:           ${experience.map((exp, index) => `
1839:             <div class="cv-entry">
1840:               <div class="cv-entry-header">
1841:                 <strong>${exp.position}</strong>
1842:                 <span class="cv-dates">${exp.startDate} – ${exp.current ? 'Present' : exp.endDate}</span>
1843:               </div>
1844:               <div class="cv-institution">${exp.company}, ${exp.location}</div>
1845:               ${index === 0 ? '<div class="cv-note">(Tenure Track)</div>' : ''}
1846:             </div>
1847:           `).join('')}
1848:         </div>
1849:         
1850:         <div class="section-cv">
1851:           <h2 class="section-title-cv">2. EDUCATION</h2>
1852:           ${education.map(edu => `
1853:             <div class="cv-entry">
1854:               <div class="cv-entry-header">
1855:                 <strong>${edu.degree}, ${edu.field}</strong>
1856:                 <span class="cv-dates">${edu.graduationDate}</span>
1857:               </div>
1858:               <div class="cv-institution">${edu.institution}, ${edu.location}</div>
1859:               <div class="cv-thesis">Dissertation: "Advanced Research in ${edu.field}"</div>
1860:               ${edu.honors && edu.honors.length > 0 ? `
1861:                 <div class="cv-honors">${edu.honors.join(', ')}</div>
1862:               ` : ''}
1863:             </div>
1864:           `).join('')}
1865:         </div>
1866:         
1867:         <div class="section-cv">
1868:           <h2 class="section-title-cv">3. RESEARCH INTERESTS</h2>
1869:           <ul class="cv-list">
1870:             <li>Computational Methods and Algorithm Development</li>
1871:             <li>Machine Learning Applications in Scientific Research</li>
1872:             <li>Data Analysis and Statistical Modeling</li>
1873:             <li>Interdisciplinary Collaboration and Innovation</li>
1874:           </ul>
1875:         </div>
1876:         
1877:         <div class="section-cv">
1878:           <h2 class="section-title-cv">4. PUBLICATIONS</h2>
1879:           
1880:           <h3 class="subsection-cv">Peer-Reviewed Journal Articles</h3>
1881:           <ol class="publications-list">
1882:             <li>
1883:               <strong>${personalInfo.fullName}</strong>, Smith, J., & Johnson, A. (2024). 
1884:               "Advanced Methods in Computational Research." 
1885:               <em>Journal of Advanced Science</em>, 45(3), 123-145. 
1886:               DOI: 10.1234/jas.2024.001
1887:             </li>
1888:             <li>
1889:               Johnson, A., <strong>${personalInfo.fullName}</strong>, & Davis, R. (2023). 
1890:               "Novel Approaches to Data Analysis." 
1891:               <em>International Journal of Research</em>, 32(2), 67-89. 
1892:               DOI: 10.1234/ijr.2023.045
1893:             </li>
1894:           </ol>
1895:           
1896:           <h3 class="subsection-cv">Conference Proceedings</h3>
1897:           <ol class="publications-list" start="3">
1898:             <li>
1899:               <strong>${personalInfo.fullName}</strong> (2024). 
1900:               "Innovative Research Methodologies." 
1901:               <em>Proceedings of the International Conference on Research</em>, 
1902:               pp. 234-245. New York, NY.
1903:             </li>
1904:           </ol>
1905:         </div>
1906:         
1907:         <div class="section-cv">
1908:           <h2 class="section-title-cv">5. GRANTS & FUNDING</h2>
1909:           <div class="cv-entry">
1910:             <div class="cv-entry-header">
1911:               <strong>National Science Foundation Grant</strong>
1912:               <span class="cv-dates">2023 – 2026</span>
1913:             </div>
1914:             <div class="cv-grant-details">
1915:               Principal Investigator, $500,000
1916:               <br/>
1917:               "Advanced Research in Computational Methods"
1918:             </div>
1919:           </div>
1920:         </div>
1921:         
1922:         <div class="section-cv">
1923:           <h2 class="section-title-cv">6. TEACHING EXPERIENCE</h2>
1924:           <ul class="cv-list">
1925:             <li><strong>Advanced Research Methods</strong> (Graduate Level) – Fall 2023, Spring 2024</li>
1926:             <li><strong>Introduction to Data Science</strong> (Undergraduate) – Fall 2022, Spring 2023</li>
1927:             <li><strong>Statistical Analysis</strong> (Graduate Level) – Spring 2022</li>
1928:           </ul>
1929:         </div>
1930:         
1931:         <div class="section-cv">
1932:           <h2 class="section-title-cv">7. CONFERENCE PRESENTATIONS</h2>
1933:           <ul class="cv-list">
1934:             <li>"Recent Advances in Research Methodology" – International Conference, 2024</li>
1935:             <li>"Data-Driven Approaches" – National Symposium, 2023</li>
1936:             <li>"Computational Methods" – Regional Workshop, 2023</li>
1937:           </ul>
1938:         </div>
1939:         
1940:         <div class="section-cv">
1941:           <h2 class="section-title-cv">8. PROFESSIONAL SERVICE</h2>
1942:           <ul class="cv-list">
1943:             <li><strong>Reviewer:</strong> Journal of Advanced Science, International Journal of Research</li>
1944:             <li><strong>Committee Member:</strong> Graduate Admissions Committee (2023-Present)</li>
1945:             <li><strong>Organizer:</strong> Annual Research Symposium (2024)</li>
1946:           </ul>
1947:         </div>
1948:         
1949:         <div class="section-cv">
1950:           <h2 class="section-title-cv">9. TECHNICAL SKILLS</h2>
1951:           <div class="cv-skills">
1952:             <strong>Programming:</strong> ${skills.technical.slice(0, 5).join(', ')}
1953:             <br/>
1954:             <strong>Software:</strong> MATLAB, R, SPSS, LaTeX
1955:             <br/>
1956:             <strong>Languages:</strong> ${skills.languages ? skills.languages.map(l => `${l.language} (${l.proficiency})`).join(', ') : 'English (Native)'}
1957:           </div>
1958:         </div>
1959:         
1960:         <div class="cv-footer">
1961:           <em>References available upon request</em>
1962:           <div class="cv-page-number">Page 1 of 1</div>
1963:         </div>
1964:       </div>
1965:     `;
1966:   },
1967:   
1968:   css: `
1969:     .resume-cv {
1970:       max-width: 8.5in;
1971:       margin: 0 auto;
1972:       padding: 1in;
1973:       font-family: 'Computer Modern', 'Times New Roman', serif;
1974:       background: white;
1975:       color: #000;
1976:       line-height: 1.6;
1977:     }
1978:     
1979:     .header-cv {
1980:       text-align: center;
1981:       margin-bottom: 2rem;
1982:       padding-bottom: 1rem;
1983:       border-bottom: 2px solid #000;
1984:     }
1985:     
1986:     .name-cv {
1987:       font-size: 20px;
1988:       font-weight: 700;
1989:       margin: 0 0 0.5rem;
1990:     }
1991:     
1992:     .contact-cv {
1993:       font-size: 11px;
1994:       margin-bottom: 0.25rem;
1995:     }
1996:     
1997:     .academic-profiles {
1998:       font-size: 10px;
1999:       color: #333;
2000:     }
2001:     
2002:     .section-cv {
2003:       margin-bottom: 1.5rem;
2004:     }
2005:     
2006:     .section-title-cv {
2007:       font-size: 12px;
2008:       font-weight: 700;
2009:       text-transform: uppercase;
2010:       margin: 0 0 0.75rem;
2011:       border-bottom: 1px solid #000;
2012:       padding-bottom: 0.25rem;
2013:     }
2014:     
2015:     .subsection-cv {
2016:       font-size: 11px;
2017:       font-weight: 700;
2018:       margin: 1rem 0 0.5rem;
2019:     }
2020:     
2021:     .cv-entry {
2022:       margin-bottom: 1rem;
2023:     }
2024:     
2025:     .cv-entry-header {
2026:       display: flex;
2027:       justify-content: space-between;
2028:       align-items: baseline;
2029:       margin-bottom: 0.25rem;
2030:       font-size: 11px;
2031:     }
2032:     
2033:     .cv-dates {
2034:       font-size: 10px;
2035:       font-weight: normal;
2036:     }
2037:     
2038:     .cv-institution {
2039:       font-size: 11px;
2040:       font-style: italic;
2041:       margin-bottom: 0.25rem;
2042:     }
2043:     
2044:     .cv-thesis {
2045:       font-size: 10px;
2046:       margin-top: 0.25rem;
2047:     }
2048:     
2049:     .cv-note {
2050:       font-size: 10px;
2051:       color: #555;
2052:       margin-top: 0.25rem;
2053:     }
2054:     
2055:     .cv-honors {
2056:       font-size: 10px;
2057:       font-style: italic;
2058:       margin-top: 0.25rem;
2059:     }
2060:     
2061:     .cv-grant-details {
2062:       font-size: 10px;
2063:       line-height: 1.5;
2064:       margin-top: 0.25rem;
2065:     }
2066:     
2067:     .cv-list {
2068:       margin: 0.5rem 0 0 1.5rem;
2069:       padding: 0;
2070:       list-style-type: disc;
2071:     }
2072:     
2073:     .cv-list li {
2074:       font-size: 10px;
2075:       line-height: 1.6;
2076:       margin-bottom: 0.5rem;
2077:     }
2078:     
2079:     .publications-list {
2080:       margin: 0.5rem 0 1rem 1.5rem;
2081:       padding: 0;
2082:     }
2083:     
2084:     .publications-list li {
2085:       font-size: 10px;
2086:       line-height: 1.7;
2087:       margin-bottom: 0.75rem;
2088:       text-indent: -1.5rem;
2089:       padding-left: 1.5rem;
2090:     }
2091:     
2092:     .cv-skills {
2093:       font-size: 10px;
2094:       line-height: 1.8;
2095:     }
2096:     
2097:     .cv-footer {
2098:       margin-top: 2rem;
2099:       padding-top: 1rem;
2100:       border-top: 1px solid #000;
2101:       text-align: center;
2102:       font-size: 10px;
2103:     }
2104:     
2105:     .cv-page-number {
2106:       margin-top: 0.5rem;
2107:       font-size: 9px;
2108:       color: #666;
2109:     }
2110:     
2111:     @media print {
2112:       .resume-cv {
2113:         padding: 0.75in;
2114:       }
2115:       
2116:       @page {
2117:         margin: 0.75in;
2118:       }
2119:     }
2120:   `
2121: };
2122: 
2123: export const resumeTemplates: Record<string, ResumeTemplate> = {
2124:   modern: modernTemplate,
2125:   professional: professionalTemplate,
2126:   creative: creativeTemplate,
2127:   tech: techTemplate,
2128:   minimal: minimalTemplate,
2129:   executive: executiveTemplate,
2130:   cv: cvTemplate,
2131: };
2132: 
2133: export function getTemplateById(id: string): ResumeTemplate {
2134:   return resumeTemplates[id] || resumeTemplates.modern;
2135: }
2136: 
2137: export function getAllTemplates(): ResumeTemplate[] {
2138:   return Object.values(resumeTemplates);
2139: }
2140: 
2141: export function getTemplatesByIndustry(industry: string): ResumeTemplate[] {
2142:   const industryLower = industry.toLowerCase();
2143:   return Object.values(resumeTemplates).filter(template => 
2144:     template.bestFor.some(category => category.toLowerCase().includes(industryLower))
2145:   );
2146: }
</file>

<file path="src/lib/scrapers/advanced-scraper.ts">
  1: /**
  2:  * Advanced Web Scraper with 4-Tier Fallback Strategy
  3:  * 
  4:  * Strategy 1: JSON-LD Structured Data (fastest, most reliable)
  5:  * Strategy 2: Cheerio HTML Parsing (fast, reliable for static sites)
  6:  * Strategy 3: Puppeteer Browser (for JavaScript-heavy sites)
  7:  * Strategy 4: Regex Extraction (last resort)
  8:  */
  9: 
 10: import * as cheerio from 'cheerio'
 11: import puppeteer from 'puppeteer-core'
 12: import chromium from '@sparticuz/chromium'
 13: 
 14: export interface ScrapeResult {
 15:   success: boolean
 16:   data?: {
 17:     title?: string
 18:     description?: string
 19:     requirements?: string[]
 20:     salary?: string
 21:     company?: string
 22:     location?: string
 23:     postedDate?: string
 24:   }
 25:   method?: 'structured' | 'cheerio' | 'puppeteer' | 'regex'
 26:   error?: string
 27: }
 28: 
 29: export class AdvancedScraper {
 30:   private readonly USER_AGENTS = [
 31:     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
 32:     'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
 33:     'Mozilla/5.0 (X11; Linux x86_64; rv:121.0) Gecko/20100101 Firefox/121.0',
 34:     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0'
 35:   ]
 36: 
 37:   /**
 38:    * Main scraping method with 3-tier fallback
 39:    */
 40:   async scrape(url: string): Promise<ScrapeResult> {
 41:     if (process.env.PPX_DEBUG === 'true') {
 42:       console.log(`[SCRAPER] Processing: ${url}`)
 43:     }
 44: 
 45:     // Strategy 1: Structured data (JSON-LD) - fastest and most reliable
 46:     try {
 47:       const structured = await this.tryStructuredData(url)
 48:       if (structured.success && structured.data?.description && structured.data.description.length > 100) {
 49:         if (process.env.PPX_DEBUG === 'true') {
 50:           console.log('[SCRAPER] ✓ Structured data found')
 51:         }
 52:         return { ...structured, method: 'structured' }
 53:       }
 54:     } catch (e) {
 55:       if (process.env.PPX_DEBUG === 'true') {
 56:         console.log('[SCRAPER] Structured data failed:', (e as Error).message)
 57:       }
 58:     }
 59: 
 60:     // Strategy 2: Cheerio HTML parsing - fast and reliable for static sites
 61:     try {
 62:       const cheerioResult = await this.tryCheerioScraping(url)
 63:       if (cheerioResult.success && cheerioResult.data?.description && cheerioResult.data.description.length > 100) {
 64:         if (process.env.PPX_DEBUG === 'true') {
 65:           console.log('[SCRAPER] ✓ Cheerio parsing succeeded')
 66:         }
 67:         return { ...cheerioResult, method: 'cheerio' }
 68:       }
 69:     } catch (e) {
 70:       if (process.env.PPX_DEBUG === 'true') {
 71:         console.log('[SCRAPER] Cheerio failed:', (e as Error).message)
 72:       }
 73:     }
 74: 
 75:     // Strategy 3: Puppeteer browser - for JavaScript-heavy sites (Indeed, LinkedIn, etc.)
 76:     try {
 77:       const puppeteerResult = await this.tryPuppeteerScraping(url)
 78:       if (puppeteerResult.success && puppeteerResult.data?.description && puppeteerResult.data.description.length > 100) {
 79:         if (process.env.PPX_DEBUG === 'true') {
 80:           console.log('[SCRAPER] ✓ Puppeteer scraping succeeded')
 81:         }
 82:         return { ...puppeteerResult, method: 'puppeteer' }
 83:       }
 84:     } catch (e) {
 85:       if (process.env.PPX_DEBUG === 'true') {
 86:         console.log('[SCRAPER] Puppeteer failed:', (e as Error).message)
 87:       }
 88:     }
 89: 
 90:     // Strategy 4: Regex extraction - last resort
 91:     try {
 92:       const regex = await this.tryRegexExtraction(url)
 93:       if (regex.success && regex.data?.description && regex.data.description.length > 100) {
 94:         if (process.env.PPX_DEBUG === 'true') {
 95:           console.log('[SCRAPER] ✓ Regex extraction succeeded')
 96:         }
 97:         return { ...regex, method: 'regex' }
 98:       }
 99:     } catch (e) {
100:       if (process.env.PPX_DEBUG === 'true') {
101:         console.log('[SCRAPER] Regex failed:', (e as Error).message)
102:       }
103:     }
104: 
105:     return {
106:       success: false,
107:       error: 'All 4 scraping strategies failed - page may require login or CAPTCHA'
108:     }
109:   }
110: 
111:   /**
112:    * Strategy 1: Extract JSON-LD structured data
113:    * Many job boards include this for SEO
114:    */
115:   private async tryStructuredData(url: string): Promise<ScrapeResult> {
116:     const html = await this.fetchHTML(url)
117:     const jsonLdMatches = html.match(/<script type="application\/ld\+json">(.*?)<\/script>/gs)
118: 
119:     if (!jsonLdMatches) {
120:       return { success: false, error: 'No structured data found' }
121:     }
122: 
123:     for (const match of jsonLdMatches) {
124:       try {
125:         const json = JSON.parse(match.replace(/<\/?script[^>]*>/g, ''))
126: 
127:         // Check for JobPosting schema
128:         if (json['@type'] === 'JobPosting') {
129:           return {
130:             success: true,
131:             data: {
132:               title: json.title,
133:               description: json.description,
134:               company: json.hiringOrganization?.name,
135:               location: json.jobLocation?.address?.addressLocality || json.jobLocation?.address?.addressRegion,
136:               salary: this.extractSalaryFromStructured(json.baseSalary),
137:               postedDate: json.datePosted
138:             }
139:           }
140:         }
141:       } catch {
142:         continue
143:       }
144:     }
145: 
146:     return { success: false, error: 'No JobPosting structured data found' }
147:   }
148: 
149:   /**
150:    * Strategy 2: Cheerio HTML parsing
151:    * Works for most standard HTML pages
152:    */
153:   private async tryCheerioScraping(url: string): Promise<ScrapeResult> {
154:     const html = await this.fetchHTML(url)
155:     const $ = cheerio.load(html)
156: 
157:     // Remove noise elements
158:     $('script, style, nav, header, footer, aside, .advertisement, .ads').remove()
159: 
160:     // Try multiple selectors for description (ordered by specificity)
161:     const descriptionSelectors = [
162:       '.job-description',
163:       '[class*="job-description"]',
164:       '[class*="description"]',
165:       '[id*="description"]',
166:       '[class*="job-details"]',
167:       '[class*="jobDetails"]',
168:       '[data-job-description]',
169:       'article',
170:       'main',
171:       '.content'
172:     ]
173: 
174:     let description = ''
175:     for (const selector of descriptionSelectors) {
176:       const text = $(selector).text().trim()
177:       if (text.length > description.length && text.length > 100) {
178:         description = text
179:       }
180:     }
181: 
182:     // Extract title
183:     const title = 
184:       $('h1.job-title').text() ||
185:       $('[class*="job-title"]').first().text() ||
186:       $('[class*="jobTitle"]').first().text() ||
187:       $('h1').first().text() ||
188:       ''
189: 
190:     // Extract requirements
191:     const requirements: string[] = []
192:     $('.requirements li, .qualifications li, [class*="requirement"] li, [class*="qualification"] li').each((i, el) => {
193:       const req = $(el).text().trim()
194:       if (req && req.length > 10 && req.length < 500) {
195:         requirements.push(req)
196:       }
197:     })
198: 
199:     // Extract salary
200:     const salary = this.extractSalaryFromText(html)
201: 
202:     // Extract company
203:     const company = 
204:       $('[class*="company-name"]').first().text() ||
205:       $('[class*="companyName"]').first().text() ||
206:       $('[data-company]').text() ||
207:       ''
208: 
209:     // Extract location
210:     const location = 
211:       $('[class*="location"]').first().text() ||
212:       $('[class*="job-location"]').first().text() ||
213:       ''
214: 
215:     return {
216:       success: description.length > 100,
217:       data: {
218:         title: this.cleanText(title),
219:         description: this.cleanText(description),
220:         requirements,
221:         salary: this.cleanText(salary),
222:         company: this.cleanText(company),
223:         location: this.cleanText(location)
224:       }
225:     }
226:   }
227: 
228:   /**
229:    * Strategy 3: Puppeteer browser scraping (for JavaScript-heavy sites)
230:    * Handles Indeed, LinkedIn, Glassdoor, and other dynamic job boards
231:    */
232:   private async tryPuppeteerScraping(url: string): Promise<ScrapeResult> {
233:     let browser: Awaited<ReturnType<typeof puppeteer.launch>> | null = null
234:     try {
235:       // Launch headless browser with optimized settings
236:       const args = [
237:         ...chromium.args,
238:         '--no-sandbox',
239:         '--disable-setuid-sandbox',
240:         '--disable-dev-shm-usage',
241:         '--disable-gpu',
242:         '--no-first-run',
243:         '--no-zygote',
244:         '--single-process',
245:         '--disable-blink-features=AutomationControlled'
246:       ]
247: 
248:       const executablePath = process.env.CHROMIUM_PATH || await chromium.executablePath()
249: 
250:       browser = await puppeteer.launch({
251:         args,
252:         executablePath,
253:         headless: true,
254:         timeout: 30000
255:       })
256: 
257:       const page = await browser.newPage()
258: 
259:       // Set realistic user agent and viewport
260:       const userAgent = this.USER_AGENTS[Math.floor(Math.random() * this.USER_AGENTS.length)]
261:       await page.setUserAgent(userAgent)
262:       await page.setViewport({ width: 1920, height: 1080 })
263: 
264:       // Navigate to page and wait for content
265:       await page.goto(url, {
266:         waitUntil: 'networkidle2',
267:         timeout: 30000
268:       })
269: 
270:       // Wait for job description to load (common selectors)
271:       await page.waitForSelector('body', { timeout: 5000 }).catch(() => {})
272: 
273:       // Extract job data using page.evaluate
274:       const data = await page.evaluate(() => {
275:         // Helper to clean text
276:         const cleanText = (text: string) => text.replace(/\s+/g, ' ').trim()
277: 
278:         // Extract title
279:         const titleSelectors = [
280:           'h1[class*="title"]',
281:           'h1[class*="jobTitle"]',
282:           'h1[class*="job-title"]',
283:           '[data-testid="jobTitle"]',
284:           '.job-title',
285:           'h1'
286:         ]
287:         let title = ''
288:         for (const sel of titleSelectors) {
289:           const el = document.querySelector(sel)
290:           if (el?.textContent) {
291:             title = cleanText(el.textContent)
292:             break
293:           }
294:         }
295: 
296:         // Extract description
297:         const descSelectors = [
298:           '[class*="jobDescriptionText"]',
299:           '[class*="job-description"]',
300:           '[id*="jobDescriptionText"]',
301:           '[data-testid="jobDescription"]',
302:           '.description',
303:           'article',
304:           'main'
305:         ]
306:         let description = ''
307:         for (const sel of descSelectors) {
308:           const el = document.querySelector(sel)
309:           if (el?.textContent && el.textContent.length > description.length) {
310:             description = cleanText(el.textContent)
311:           }
312:         }
313: 
314:         // Extract company
315:         const companySelectors = [
316:           '[class*="companyName"]',
317:           '[data-testid="companyName"]',
318:           '[class*="company-name"]',
319:           '.company'
320:         ]
321:         let company = ''
322:         for (const sel of companySelectors) {
323:           const el = document.querySelector(sel)
324:           if (el?.textContent) {
325:             company = cleanText(el.textContent)
326:             break
327:           }
328:         }
329: 
330:         // Extract location
331:         const locationSelectors = [
332:           '[class*="location"]',
333:           '[data-testid="location"]',
334:           '[class*="job-location"]'
335:         ]
336:         let location = ''
337:         for (const sel of locationSelectors) {
338:           const el = document.querySelector(sel)
339:           if (el?.textContent) {
340:             location = cleanText(el.textContent)
341:             break
342:           }
343:         }
344: 
345:         // Extract salary
346:         const salarySelectors = [
347:           '[class*="salary"]',
348:           '[data-testid="salary"]',
349:           '[class*="compensation"]'
350:         ]
351:         let salary = ''
352:         for (const sel of salarySelectors) {
353:           const el = document.querySelector(sel)
354:           if (el?.textContent) {
355:             salary = cleanText(el.textContent)
356:             break
357:           }
358:         }
359: 
360:         return { title, description, company, location, salary }
361:       })
362: 
363:       await browser.close()
364: 
365:       return {
366:         success: data.description.length > 100,
367:         data: {
368:           title: data.title,
369:           description: data.description,
370:           company: data.company,
371:           location: data.location,
372:           salary: data.salary || undefined
373:         }
374:       }
375:     } catch (error) {
376:       if (browser) {
377:         try { await browser.close() } catch {}
378:       }
379:       throw error
380:     }
381:   }
382: 
383:   /**
384:    * Strategy 4: Regex extraction (last resort)
385:    * Works when HTML structure is non-standard
386:    */
387:   private async tryRegexExtraction(url: string): Promise<ScrapeResult> {
388:     const html = await this.fetchHTML(url)
389: 
390:     // Extract description between common patterns
391:     const descPatterns = [
392:       /<div[^>]*class="[^"]*description[^"]*"[^>]*>(.*?)<\/div>/is,
393:       /<section[^>]*class="[^"]*job[^"]*"[^>]*>(.*?)<\/section>/is,
394:       /<article[^>]*>(.*?)<\/article>/is,
395:       /<main[^>]*>(.*?)<\/main>/is
396:     ]
397: 
398:     let description = ''
399:     for (const pattern of descPatterns) {
400:       const match = html.match(pattern)
401:       if (match && match[1].length > description.length) {
402:         description = match[1]
403:       }
404:     }
405: 
406:     // Extract title
407:     const titleMatch = html.match(/<h1[^>]*>(.*?)<\/h1>/i)
408:     const title = titleMatch ? titleMatch[1] : ''
409: 
410:     return {
411:       success: description.length > 100,
412:       data: {
413:         title: this.cleanHTML(title),
414:         description: this.cleanHTML(description)
415:       }
416:     }
417:   }
418: 
419:   /**
420:    * Fetch HTML with realistic headers to avoid bot detection
421:    */
422:   private async fetchHTML(url: string): Promise<string> {
423:     const userAgent = this.USER_AGENTS[Math.floor(Math.random() * this.USER_AGENTS.length)]
424: 
425:     const response = await fetch(url, {
426:       headers: {
427:         'User-Agent': userAgent,
428:         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
429:         'Accept-Language': 'en-US,en;q=0.9',
430:         'Accept-Encoding': 'gzip, deflate, br',
431:         'DNT': '1',
432:         'Connection': 'keep-alive',
433:         'Upgrade-Insecure-Requests': '1',
434:         'Referer': 'https://www.google.com/'
435:       },
436:       signal: AbortSignal.timeout(15000)
437:     })
438: 
439:     if (!response.ok) {
440:       throw new Error(`HTTP ${response.status}: ${response.statusText}`)
441:     }
442: 
443:     // Add small delay to be respectful
444:     await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000))
445: 
446:     return await response.text()
447:   }
448: 
449:   /**
450:    * Helper: Extract salary from structured data
451:    */
452:   private extractSalaryFromStructured(baseSalary: any): string {
453:     if (!baseSalary) return ''
454:     if (typeof baseSalary === 'string') return baseSalary
455:     
456:     if (baseSalary.value) {
457:       const value = baseSalary.value.value || baseSalary.value
458:       const currency = baseSalary.currency || '$'
459:       return `${currency}${value}`
460:     }
461:     
462:     if (baseSalary.minValue && baseSalary.maxValue) {
463:       const currency = baseSalary.currency || '$'
464:       return `${currency}${baseSalary.minValue} - ${currency}${baseSalary.maxValue}`
465:     }
466:     
467:     return ''
468:   }
469: 
470:   /**
471:    * Helper: Extract salary from text using patterns
472:    */
473:   private extractSalaryFromText(text: string): string {
474:     const patterns = [
475:       /\$\s*[\d,]+\s*-\s*\$\s*[\d,]+/,
476:       /\$\s*[\d,]+k?\s*-\s*\$?\s*[\d,]+k?/i,
477:       /salary:\s*\$?[\d,]+\s*-\s*\$?[\d,]+/i,
478:       /[\d,]+\s*-\s*[\d,]+\s*per\s+(?:year|hour|month)/i,
479:       /compensation:\s*\$?[\d,]+\s*-\s*\$?[\d,]+/i
480:     ]
481: 
482:     for (const pattern of patterns) {
483:       const match = text.match(pattern)
484:       if (match) return match[0]
485:     }
486: 
487:     return ''
488:   }
489: 
490:   /**
491:    * Helper: Clean HTML tags and entities
492:    */
493:   private cleanHTML(html: string): string {
494:     return html
495:       .replace(/<script[^>]*>.*?<\/script>/gis, '')
496:       .replace(/<style[^>]*>.*?<\/style>/gis, '')
497:       .replace(/<[^>]+>/g, ' ')
498:       .replace(/&nbsp;/g, ' ')
499:       .replace(/&amp;/g, '&')
500:       .replace(/&lt;/g, '<')
501:       .replace(/&gt;/g, '>')
502:       .replace(/&quot;/g, '"')
503:       .replace(/&#39;/g, "'")
504:       .replace(/\s+/g, ' ')
505:       .trim()
506:   }
507: 
508:   /**
509:    * Helper: Clean text (whitespace only)
510:    */
511:   private cleanText(text: string): string {
512:     return text
513:       .replace(/\s+/g, ' ')
514:       .replace(/\n\s*\n/g, '\n')
515:       .trim()
516:   }
517: }
</file>

<file path="src/app/api/linkedin/profile/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth'
  3: import { getToken } from 'next-auth/jwt'
  4: import { authOptions } from '@/lib/auth'
  5: 
  6: /**
  7:  * Fetch LinkedIn profile data using OAuth access token
  8:  * This endpoint is called after user signs in with LinkedIn
  9:  */
 10: export async function GET(request: NextRequest) {
 11:   try {
 12:     const session = await getServerSession(authOptions)
 13:     
 14:     if (!session?.user) {
 15:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 16:     }
 17: 
 18:     // Get the LinkedIn access token from JWT
 19:     const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET })
 20:     const accessToken = token?.linkedInAccessToken
 21: 
 22:     if (!accessToken) {
 23:       return NextResponse.json(
 24:         { error: 'No LinkedIn access token found. Please sign in with LinkedIn to import your profile.' },
 25:         { status: 400 }
 26:       )
 27:     }
 28: 
 29:     console.log('[LINKEDIN_API] Fetching profile data')
 30: 
 31:     // Use OpenID Connect userinfo endpoint (configured in auth.ts)
 32:     const profileResponse = await fetch('https://api.linkedin.com/v2/userinfo', {
 33:       headers: {
 34:         'Authorization': `Bearer ${accessToken}`,
 35:         'Content-Type': 'application/json'
 36:       }
 37:     })
 38: 
 39:     if (!profileResponse.ok) {
 40:       const errorText = await profileResponse.text()
 41:       console.error('[LINKEDIN_API] Profile fetch failed:', errorText)
 42:       throw new Error(`Failed to fetch LinkedIn profile: ${profileResponse.status}`)
 43:     }
 44: 
 45:     const profile = await profileResponse.json()
 46:     console.log('[LINKEDIN_API] Profile data:', JSON.stringify(profile, null, 2))
 47: 
 48:     // Email is included in userinfo response
 49:     const email = profile.email || session.user.email
 50: 
 51:     // NOTE: LinkedIn's basic OAuth only provides basic profile info (name, email, picture)
 52:     // Advanced APIs (positions, education, skills) require LinkedIn Partner Program access
 53:     // For now, we'll use the basic info and let users manually add experience/education
 54:     
 55:     // Extract LinkedIn profile URL if available
 56:     let linkedinUrl = ''
 57:     if (profile.sub) {
 58:       // The 'sub' claim contains the LinkedIn member ID
 59:       linkedinUrl = `https://www.linkedin.com/in/${profile.sub}`
 60:     }
 61: 
 62:     // Transform to our resume format with basic info
 63:     const resumeData = {
 64:       personalInfo: {
 65:         fullName: profile.name || `${profile.given_name || ''} ${profile.family_name || ''}`.trim(),
 66:         email: email || '',
 67:         phone: '',
 68:         location: (profile.locale && typeof profile.locale === 'string') ? profile.locale.replace('_', ', ') : '',
 69:         linkedin: linkedinUrl,
 70:         website: '',
 71:         summary: '' // User will need to add this manually
 72:       },
 73:       experience: [], // Will be empty - user needs to add manually or we scrape public profile
 74:       education: [], // Will be empty - user needs to add manually or we scrape public profile
 75:       skills: {
 76:         technical: [],
 77:         soft: [],
 78:         languages: [],
 79:         certifications: []
 80:       },
 81:       projects: [],
 82:       // Include profile picture for reference
 83:       profilePicture: profile.picture || null
 84:     }
 85: 
 86:     console.log('[LINKEDIN_API] Successfully fetched and transformed profile data')
 87: 
 88:     return NextResponse.json({
 89:       success: true,
 90:       resumeData,
 91:       rawProfile: profile // Include raw profile for debugging
 92:     })
 93: 
 94:   } catch (error) {
 95:     console.error('[LINKEDIN_API] Error:', error)
 96:     return NextResponse.json(
 97:       { 
 98:         error: error instanceof Error ? error.message : 'Failed to fetch LinkedIn profile',
 99:         details: 'Make sure you have signed in with LinkedIn and granted the necessary permissions.'
100:       },
101:       { status: 500 }
102:     )
103:   }
104: }
</file>

<file path="src/app/career-finder/outreach/page.tsx">
  1: 'use client'
  2: 
  3: import { useEffect, useState } from 'react'
  4: import { useRouter } from 'next/navigation'
  5: import { Button } from '@/components/ui/button'
  6: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
  7: import CareerFinderStorage from '@/lib/career-finder-storage'
  8: import { Mail, Phone, Linkedin, ExternalLink, Building2, User, Briefcase, Copy, Check } from 'lucide-react'
  9: 
 10: interface HiringContact {
 11:   name: string
 12:   title: string
 13:   department?: string
 14:   linkedinUrl?: string
 15:   email?: string
 16:   phone?: string
 17:   authority?: string
 18:   contactMethod?: string
 19: }
 20: 
 21: interface EnhancedResearch {
 22:   companyIntelligence: {
 23:     name: string
 24:     industry?: string
 25:     website?: string
 26:   }
 27:   hiringContactIntelligence: {
 28:     officialChannels?: {
 29:       careersPage?: string
 30:       jobsEmail?: string
 31:       hrEmail?: string
 32:       phone?: string
 33:     }
 34:     keyContacts?: HiringContact[]
 35:     emailFormat?: string
 36:     socialMedia?: {
 37:       linkedin?: string
 38:       twitter?: string
 39:       facebook?: string
 40:     }
 41:   }
 42:   strategicRecommendations?: {
 43:     contactStrategy?: string
 44:     applicationStrategy?: string
 45:   }
 46: }
 47: 
 48: export default function CareerFinderOutreachPage() {
 49:   const [loading, setLoading] = useState(true)
 50:   const [sending, setSending] = useState(false)
 51:   const [error, setError] = useState('')
 52:   const [success, setSuccess] = useState('')
 53:   const [jobData, setJobData] = useState<any>(null)
 54:   const [companyData, setCompanyData] = useState<EnhancedResearch | null>(null)
 55:   const [selectedContact, setSelectedContact] = useState<HiringContact | null>(null)
 56:   const [emailSubject, setEmailSubject] = useState('')
 57:   const [emailBody, setEmailBody] = useState('')
 58:   const [copiedField, setCopiedField] = useState<string | null>(null)
 59:   const router = useRouter()
 60: 
 61:   useEffect(() => {
 62:     CareerFinderStorage.setProgress(7, 7)
 63:     loadDataAndGenerateEmail()
 64:   }, [])
 65: 
 66:   const handleCompleteApplication = async () => {
 67:     if (!jobData) return
 68: 
 69:     try {
 70:       // Create application record
 71:       const response = await fetch('/api/applications/create', {
 72:         method: 'POST',
 73:         headers: { 'Content-Type': 'application/json' },
 74:         body: JSON.stringify({
 75:           jobId: jobData.id,
 76:           company: jobData.company,
 77:           jobTitle: jobData.title,
 78:           location: jobData.location,
 79:           salary: jobData.salary,
 80:           recipient: selectedContact?.email || currentEmail
 81:         })
 82:       })
 83: 
 84:       if (response.ok) {
 85:         console.log('[OUTREACH] ✅ Application created')
 86:         // Navigate to interview prep
 87:         router.push('/career-finder/interview-prep')
 88:       } else {
 89:         console.error('[OUTREACH] ❌ Failed to create application')
 90:         // Still navigate even if creation fails
 91:         router.push('/career-finder/interview-prep')
 92:       }
 93:     } catch (error) {
 94:       console.error('[OUTREACH] Error creating application:', error)
 95:       // Navigate anyway
 96:       router.push('/career-finder/interview-prep')
 97:     }
 98:   }
 99: 
100:   const loadDataAndGenerateEmail = async () => {
101:     try {
102:       // Load job data
103:       const job = CareerFinderStorage.getJob()
104:       if (!job) {
105:         setError('No job selected')
106:         setLoading(false)
107:         return
108:       }
109:       setJobData(job)
110: 
111:       // Load company research data (includes hiring contacts)
112:       const companyResearch = CareerFinderStorage.getCompanyResearch()
113:       if (companyResearch) {
114:         console.log('[OUTREACH] ✅ Loaded company research with contacts:', companyResearch.hiringContacts?.length || 0)
115:         setCompanyData(companyResearch as any)
116:       }
117: 
118:       // Load resume
119:       const resume = CareerFinderStorage.getResume()
120:       const resumeText = resume?.extractedText || ''
121: 
122:       // Load job analysis for match insights
123:       const analysis = CareerFinderStorage.getJobAnalysis()
124: 
125:       // AUTOPILOT: Check cache first
126:       const cacheKey = 'cf:emailOutreach'
127:       const cached = localStorage.getItem(cacheKey)
128:       
129:       if (cached) {
130:         console.log('[OUTREACH] ✅ Loading from cache')
131:         const outreach = JSON.parse(cached)
132:         setEmailSubject(outreach.subjects?.[0] || `Application for ${job.title}`)
133:         setEmailBody(outreach.templates?.[0]?.body || '')
134:         setLoading(false)
135:         return
136:       }
137: 
138:       console.log('[OUTREACH] 🔄 Generating email outreach via autopilot...')
139: 
140:       // Extract resume highlights
141:       const skills = analysis?.matchingSkills || []
142:       const resumeHighlights = skills.slice(0, 3)
143: 
144:       // Call new autopilot endpoint
145:       const response = await fetch('/api/contacts/email-outreach', {
146:         method: 'POST',
147:         headers: { 'Content-Type': 'application/json' },
148:         body: JSON.stringify({
149:           hiringContact: {
150:             name: 'Hiring Manager',
151:             title: 'Hiring Manager'
152:           },
153:           jobTitle: job.title,
154:           company: job.company,
155:           resumeHighlights
156:         })
157:       })
158: 
159:       if (!response.ok) {
160:         throw new Error(`API error: ${response.status}`)
161:       }
162: 
163:       const result = await response.json()
164: 
165:       if (result.success && result.data) {
166:         const { subjects, templates } = result.data
167:         setEmailSubject(subjects?.[0] || `Application for ${job.title}`)
168:         setEmailBody(templates?.[0]?.body || '')
169:         
170:         // Cache the result
171:         localStorage.setItem(cacheKey, JSON.stringify(result.data))
172:         console.log('[OUTREACH] ✅ Email outreach generated and cached')
173:       } else {
174:         throw new Error(result.error || 'Failed to generate email outreach')
175:       }
176: 
177:       setLoading(false)
178:     } catch (err) {
179:       console.error('[OUTREACH] Error:', err)
180:       setError('Failed to load outreach data')
181:       setLoading(false)
182:     }
183:   }
184: 
185:   const selectContact = (contact: HiringContact, job: any, analysis: any, resumeText: string) => {
186:     setSelectedContact(contact)
187:     
188:     // Generate personalized email
189:     const subject = `Application for ${job.title} - ${extractName(resumeText) || 'Experienced Professional'}`
190:     setEmailSubject(subject)
191: 
192:     const matchScore = analysis?.matchScore || 0
193:     const skills = analysis?.matchingSkills || []
194:     const name = extractName(resumeText) || ''
195: 
196:     const body = `Dear ${contact.name || 'Hiring Manager'},
197: 
198: I am writing to express my strong interest in the ${job.title} position at ${job.company}. ${contact.title ? `As ${contact.title}, I` : 'I'} believe you would be the right person to discuss how my qualifications align with your team's needs.
199: 
200: KEY QUALIFICATIONS:
201: ${skills.slice(0, 5).map((skill: string) => `• ${skill}`).join('\n')}
202: 
203: ${matchScore >= 80 ? `My background shows a ${matchScore}% alignment with your requirements, particularly in ${skills[0] || 'the core competencies'} needed for this role.` : ''}
204: 
205: I have attached my resume and cover letter for your review. I would welcome the opportunity to discuss how I can contribute to ${job.company}'s success.
206: 
207: Thank you for your consideration. I look forward to speaking with you.
208: 
209: Best regards,
210: ${name}
211: 
212: ---
213: Resume and cover letter attached
214: ${contact.linkedinUrl ? `LinkedIn: Let's connect at ${contact.linkedinUrl}` : ''}`
215: 
216:     setEmailBody(body)
217:   }
218: 
219:   const generateEmailForOfficial = (email: string, job: any, analysis: any, resumeText: string) => {
220:     const subject = `Application for ${job.title} Position`
221:     setEmailSubject(subject)
222: 
223:     const matchScore = analysis?.matchScore || 0
224:     const skills = analysis?.matchingSkills || []
225:     const name = extractName(resumeText) || ''
226: 
227:     const body = `Dear Hiring Team,
228: 
229: I am writing to apply for the ${job.title} position at ${job.company}.
230: 
231: KEY QUALIFICATIONS:
232: ${skills.slice(0, 5).map((skill: string) => `• ${skill}`).join('\n')}
233: 
234: ${matchScore >= 80 ? `My professional background demonstrates a strong ${matchScore}% alignment with the role requirements.` : ''}
235: 
236: Please find my resume and cover letter attached for your consideration.
237: 
238: Thank you for your time and consideration.
239: 
240: Best regards,
241: ${name}`
242: 
243:     setEmailBody(body)
244:   }
245: 
246:   const extractName = (resumeText: string): string => {
247:     const lines = resumeText.split('\n').map(l => l.trim()).filter(Boolean)
248:     for (const line of lines.slice(0, 5)) {
249:       if (line.length > 5 && line.length < 50 && !line.includes('@') && !line.match(/\d{3}/) && /^[A-Z]/.test(line)) {
250:         return line
251:       }
252:     }
253:     return ''
254:   }
255: 
256:   const copyToClipboard = (text: string, field: string) => {
257:     navigator.clipboard.writeText(text)
258:     setCopiedField(field)
259:     setTimeout(() => setCopiedField(null), 2000)
260:   }
261: 
262:   const sendEmail = async () => {
263:     if (!currentEmail) {
264:       console.error('[OUTREACH] No email address available')
265:       setError('No email address available')
266:       return
267:     }
268: 
269:     setSending(true)
270:     setError('')
271:     setSuccess('')
272: 
273:     try {
274:       console.log('[OUTREACH] Sending email to:', currentEmail)
275: 
276:       // Get resume and cover letter HTML from storage
277:       const resumeHTML = localStorage.getItem('cf:selectedResumeHtml') || ''
278:       const coverLetterHTML = localStorage.getItem('cf:selectedCoverLetterHtml') || ''
279: 
280:       // Prepare contact object
281:       const contact = {
282:         name: selectedContact?.name || 'Hiring Manager',
283:         email: currentEmail,
284:         title: selectedContact?.title,
285:         company: jobData?.company
286:       }
287: 
288:       // Send via API
289:       const response = await fetch('/api/outreach/send', {
290:         method: 'POST',
291:         headers: { 'Content-Type': 'application/json' },
292:         body: JSON.stringify({
293:           contact,
294:           email: {
295:             subject: emailSubject,
296:             body: emailBody
297:           },
298:           resumeHTML,
299:           coverLetterHTML,
300:           send_immediately: true
301:         })
302:       })
303: 
304:       const result = await response.json()
305: 
306:       if (!response.ok) {
307:         // If email service not configured, open Gmail compose
308:         if (result.mailto_fallback) {
309:           console.log('[OUTREACH] Email service not configured, opening Gmail compose')
310:           
311:           // Create Gmail compose URL (works better than mailto for attachments)
312:           const gmailUrl = `https://mail.google.com/mail/?view=cm&fs=1&to=${encodeURIComponent(currentEmail)}&su=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(emailBody)}`
313:           
314:           // Open in new tab
315:           window.open(gmailUrl, '_blank')
316:           
317:           setSuccess(`Opening Gmail to send to ${currentEmail}. Please attach your resume and cover letter manually.`)
318:           
319:           // Also provide mailto as backup
320:           const mailtoLink = document.createElement('a')
321:           mailtoLink.href = result.mailto_fallback
322:           mailtoLink.style.display = 'none'
323:           document.body.appendChild(mailtoLink)
324:           
325:           setTimeout(() => {
326:             setSuccess('Email draft opened in Gmail. Click "Send via Email Client" if Gmail didn\'t open.')
327:           }, 2000)
328:         } else {
329:           throw new Error(result.error || 'Failed to send email')
330:         }
331:       } else {
332:         console.log('[OUTREACH] ✅ Email sent successfully:', result.message_id)
333:         setSuccess(`Email sent successfully to ${currentEmail}!`)
334:         
335:         // Wait a moment then navigate to next step
336:         setTimeout(() => {
337:           handleCompleteApplication()
338:         }, 2000)
339:       }
340: 
341:     } catch (error) {
342:       console.error('[OUTREACH] Send error:', error)
343:       setError(error instanceof Error ? error.message : 'Failed to send email')
344:     } finally {
345:       setSending(false)
346:     }
347:   }
348: 
349:   if (loading) {
350:     return (
351:       <div className="container mx-auto px-6 py-8">
352:         <div className="text-center">
353:           <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto"></div>
354:           <h2 className="text-xl font-bold mt-4">Preparing Your Outreach...</h2>
355:         </div>
356:       </div>
357:     )
358:   }
359: 
360:   if (error) {
361:     return (
362:       <div className="container mx-auto px-6 py-8">
363:         <CareerFinderBackButton />
364:         <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-6 mt-4">
365:           <p className="text-red-600 dark:text-red-400">{error}</p>
366:         </div>
367:       </div>
368:     )
369:   }
370: 
371:   const contacts = (companyData as any)?.hiringContacts || (companyData as any)?.contacts || (companyData as any)?.hiringContactIntelligence?.keyContacts || []
372:   const officialChannels = (companyData as any)?.officialChannels || (companyData as any)?.hiringContactIntelligence?.officialChannels
373:   const currentEmail = selectedContact?.email || officialChannels?.jobsEmail || officialChannels?.hrEmail
374: 
375:   return (
376:     <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
377:       <CareerFinderBackButton />
378: 
379:       {/* Header */}
380:       <div className="text-center mb-8">
381:         <h1 className="text-2xl sm:text-3xl font-bold mb-2">Ready to Reach Out</h1>
382:         <p className="text-gray-600">
383:           Your personalized outreach materials for {jobData?.title} at {jobData?.company}
384:         </p>
385:       </div>
386: 
387:       <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
388:         {/* Left Column: Contacts */}
389:         <div className="lg:col-span-1 space-y-6">
390:           {/* Hiring Contacts */}
391:           {contacts.length > 0 ? (
392:             <div className="bg-card rounded-xl shadow-sm border p-6">
393:               <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
394:                 <User className="w-5 h-5 text-blue-600" />
395:                 Hiring Contacts
396:               </h3>
397:               <div className="space-y-3">
398:                 {contacts.map((contact, index) => (
399:                   <div
400:                     key={index}
401:                     onClick={() => selectContact(contact, jobData, CareerFinderStorage.getJobAnalysis(), CareerFinderStorage.getResume()?.extractedText || '')}
402:                     className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
403:                       selectedContact === contact
404:                         ? 'border-blue-500 bg-blue-500/10'
405:                         : 'border-border hover:border-blue-300'
406:                     }`}
407:                   >
408:                     <p className="font-semibold text-foreground">{contact.name}</p>
409:                     <p className="text-sm text-gray-600">{contact.title}</p>
410:                     {contact.department && (
411:                       <p className="text-xs text-gray-500 mt-1">{contact.department}</p>
412:                     )}
413:                     <div className="flex flex-wrap gap-2 mt-2">
414:                       {contact.email && (
415:                         <span className="inline-flex items-center gap-1 text-xs bg-green-100 text-green-700 px-2 py-1 rounded">
416:                           <Mail className="w-3 h-3" /> Email
417:                         </span>
418:                       )}
419:                       {contact.linkedinUrl && (
420:                         <span className="inline-flex items-center gap-1 text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">
421:                           <Linkedin className="w-3 h-3" /> LinkedIn
422:                         </span>
423:                       )}
424:                       {contact.phone && (
425:                         <span className="inline-flex items-center gap-1 text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded">
426:                           <Phone className="w-3 h-3" /> Phone
427:                         </span>
428:                       )}
429:                     </div>
430:                     {contact.authority && (
431:                       <p className="text-xs text-blue-600 font-medium mt-2">
432:                         {contact.authority}
433:                       </p>
434:                     )}
435:                   </div>
436:                 ))}
437:               </div>
438:             </div>
439:           ) : (
440:             <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-xl p-6">
441:               <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
442:                 <User className="w-5 h-5 text-yellow-600" />
443:                 No Specific Contacts Found
444:               </h3>
445:               <p className="text-sm text-gray-700 mb-4">
446:                 We couldn't find specific hiring contacts for this company. Try these options:
447:               </p>
448:               <div className="space-y-3">
449:                 <div className="bg-card p-3 rounded border">
450:                   <p className="text-xs text-gray-600 mb-1">Suggested Email Addresses:</p>
451:                   <div className="space-y-1">
452:                     {jobData?.company && (
453:                       <>
454:                         <p className="text-sm font-mono">careers@{jobData.company.toLowerCase().replace(/\s+/g, '')}.com</p>
455:                         <p className="text-sm font-mono">hr@{jobData.company.toLowerCase().replace(/\s+/g, '')}.com</p>
456:                         <p className="text-sm font-mono">jobs@{jobData.company.toLowerCase().replace(/\s+/g, '')}.com</p>
457:                       </>
458:                     )}
459:                   </div>
460:                 </div>
461:                 <p className="text-xs text-gray-600">
462:                   💡 <strong>Tip:</strong> Search LinkedIn for "{jobData?.company} recruiter" or "{jobData?.company} talent acquisition"
463:                 </p>
464:               </div>
465:             </div>
466:           )}
467: 
468:           {/* Official Channels */}
469:           {officialChannels && (
470:             <div className="bg-card rounded-xl shadow-sm border p-6">
471:               <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
472:                 <Building2 className="w-5 h-5 text-purple-600" />
473:                 Official Channels
474:               </h3>
475:               <div className="space-y-3 text-sm">
476:                 {officialChannels.careersPage && (
477:                   <div>
478:                     <p className="text-gray-600 mb-1">Careers Page</p>
479:                     <a 
480:                       href={officialChannels.careersPage}
481:                       target="_blank"
482:                       rel="noopener noreferrer"
483:                       className="text-blue-600 hover:underline flex items-center gap-1"
484:                     >
485:                       Apply Online <ExternalLink className="w-3 h-3" />
486:                     </a>
487:                   </div>
488:                 )}
489:                 {officialChannels.jobsEmail && (
490:                   <div>
491:                     <p className="text-gray-600 mb-1">Jobs Email</p>
492:                     <p className="font-medium">{officialChannels.jobsEmail}</p>
493:                   </div>
494:                 )}
495:                 {officialChannels.phone && (
496:                   <div>
497:                     <p className="text-gray-600 mb-1">Phone</p>
498:                     <a href={`tel:${officialChannels.phone}`} className="font-medium text-blue-600 hover:underline">
499:                       {officialChannels.phone}
500:                     </a>
501:                   </div>
502:                 )}
503:               </div>
504:             </div>
505:           )}
506: 
507:           {/* Strategy Recommendations */}
508:           {companyData?.strategicRecommendations?.contactStrategy && (
509:             <div className="bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-xl border border-blue-500/30 p-6">
510:               <h3 className="text-lg font-bold mb-3 text-blue-600 dark:text-blue-400">💡 Contact Strategy</h3>
511:               <p className="text-sm text-foreground leading-relaxed">
512:                 {companyData.strategicRecommendations.contactStrategy}
513:               </p>
514:             </div>
515:           )}
516:         </div>
517: 
518:         {/* Right Column: Email Draft */}
519:         <div className="lg:col-span-2 space-y-6">
520:           {/* Email Preview */}
521:           <div className="bg-card rounded-xl shadow-sm border p-6">
522:             <h3 className="text-xl font-bold mb-4">Your Outreach Email</h3>
523: 
524:             {/* To Field */}
525:             <div className="mb-4">
526:               <label className="block text-sm font-medium text-gray-700 mb-2">To:</label>
527:               <div className="flex items-center gap-2">
528:                 <input
529:                   type="email"
530:                   value={currentEmail || 'No email found'}
531:                   disabled
532:                   className="flex-1 px-4 py-2 border border-border rounded-lg bg-muted text-foreground"
533:                 />
534:                 {currentEmail && (
535:                   <Button
536:                     onClick={() => copyToClipboard(currentEmail, 'email')}
537:                     variant="outline"
538:                     size="sm"
539:                   >
540:                     {copiedField === 'email' ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
541:                   </Button>
542:                 )}
543:               </div>
544:             </div>
545: 
546:             {/* Subject Field */}
547:             <div className="mb-4">
548:               <label className="block text-sm font-medium text-gray-700 mb-2">Subject:</label>
549:               <div className="flex items-center gap-2">
550:                 <input
551:                   type="text"
552:                   value={emailSubject}
553:                   onChange={(e) => setEmailSubject(e.target.value)}
554:                   className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-foreground bg-card"
555:                 />
556:                 <Button
557:                   onClick={() => copyToClipboard(emailSubject, 'subject')}
558:                   variant="outline"
559:                   size="sm"
560:                 >
561:                   {copiedField === 'subject' ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
562:                 </Button>
563:               </div>
564:             </div>
565: 
566:             {/* Body Field */}
567:             <div className="mb-4">
568:               <label className="block text-sm font-medium text-gray-700 mb-2">Message:</label>
569:               <div className="relative">
570:                 <textarea
571:                   value={emailBody}
572:                   onChange={(e) => setEmailBody(e.target.value)}
573:                   rows={16}
574:                   className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm text-foreground bg-card"
575:                 />
576:                 <Button
577:                   onClick={() => copyToClipboard(emailBody, 'body')}
578:                   variant="outline"
579:                   size="sm"
580:                   className="absolute top-2 right-2"
581:                 >
582:                   {copiedField === 'body' ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
583:                 </Button>
584:               </div>
585:             </div>
586: 
587:             {/* Success/Error Messages */}
588:             {success && (
589:               <div className="mb-4 p-4 bg-green-500/10 border border-green-500/30 rounded-lg">
590:                 <p className="text-green-600 dark:text-green-400 text-sm font-medium">{success}</p>
591:               </div>
592:             )}
593:             {error && (
594:               <div className="mb-4 p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
595:                 <p className="text-red-600 dark:text-red-400 text-sm font-medium">{error}</p>
596:               </div>
597:             )}
598: 
599:             {/* Action Buttons */}
600:             <div className="flex gap-4">
601:               <Button
602:                 onClick={sendEmail}
603:                 disabled={!currentEmail || sending}
604:                 className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-3 sm:py-4 rounded-lg flex items-center justify-center gap-2 min-h-[48px] disabled:opacity-50 disabled:cursor-not-allowed"
605:               >
606:                 {sending ? (
607:                   <>
608:                     <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
609:                     Sending Email...
610:                   </>
611:                 ) : (
612:                   <>
613:                     <Mail className="w-5 h-5" />
614:                     Send Email Now
615:                   </>
616:                 )}
617:               </Button>
618:             </div>
619: 
620:             <p className="text-xs text-gray-500 mt-4 text-center">
621:               {sending ? 'Sending your email with resume and cover letter attachments...' : 'Click to send your email with resume and cover letter attached as PDFs.'}
622:             </p>
623:           </div>
624: 
625:           {/* Additional Contact Options */}
626:           {selectedContact && (
627:             <div className="bg-card rounded-xl shadow-sm border p-6">
628:               <h3 className="text-lg font-bold mb-4">Additional Contact Methods</h3>
629:               <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
630:                 {selectedContact.linkedinUrl && (
631:                   <a
632:                     href={selectedContact.linkedinUrl}
633:                     target="_blank"
634:                     rel="noopener noreferrer"
635:                     className="flex items-center gap-3 p-4 border-2 border-blue-500/30 rounded-lg hover:border-blue-400 hover:bg-blue-500/10 transition-all"
636:                   >
637:                     <Linkedin className="w-6 h-6 text-blue-600" />
638:                     <div>
639:                       <p className="font-semibold text-foreground">Connect on LinkedIn</p>
640:                       <p className="text-sm text-gray-600">Send a connection request</p>
641:                     </div>
642:                   </a>
643:                 )}
644:                 {selectedContact.phone && (
645:                   <a
646:                     href={`tel:${selectedContact.phone}`}
647:                     className="flex items-center gap-3 p-4 border-2 border-purple-500/30 rounded-lg hover:border-purple-400 hover:bg-purple-500/10 transition-all"
648:                   >
649:                     <Phone className="w-6 h-6 text-purple-600" />
650:                     <div>
651:                       <p className="font-semibold text-foreground">Call {selectedContact.name}</p>
652:                       <p className="text-sm text-gray-600">{selectedContact.phone}</p>
653:                     </div>
654:                   </a>
655:                 )}
656:               </div>
657:             </div>
658:           )}
659:         </div>
660:       </div>
661: 
662:       {/* Bottom Navigation */}
663:       <div className="mt-8 flex justify-between items-center">
664:         <Button
665:           onClick={() => router.push('/career-finder/cover-letter')}
666:           variant="outline"
667:         >
668:           ← Back to Cover Letter
669:         </Button>
670:         <div className="flex gap-3">
671:           <Button
672:             onClick={() => router.push('/career-finder/search')}
673:             variant="outline"
674:             className="border-blue-600 text-blue-600 hover:bg-blue-500/10"
675:           >
676:             Apply to More Jobs →
677:           </Button>
678:           <Button
679:             onClick={handleCompleteApplication}
680:             className="bg-green-600 hover:bg-green-700"
681:           >
682:             Complete Application → Interview Prep
683:           </Button>
684:         </div>
685:       </div>
686:     </div>
687:   )
688: }
</file>

<file path="src/components/resume-builder/template-preview.tsx">
  1: 'use client'
  2: 
  3: import { Card } from '@/components/ui/card'
  4: import { Badge } from '@/components/ui/badge'
  5: import { Check } from 'lucide-react'
  6: 
  7: interface TemplatePreviewProps {
  8:   id: string
  9:   name: string
 10:   description: string
 11:   isSelected: boolean
 12:   onSelect: () => void
 13:   recommended?: boolean
 14: }
 15: 
 16: export function TemplatePreview({
 17:   id,
 18:   name,
 19:   description,
 20:   isSelected,
 21:   onSelect,
 22:   recommended = false
 23: }: TemplatePreviewProps) {
 24:   // FIX: Simple, reliable visual indicators instead of complex mini-layouts
 25:   const getPreviewVisual = () => {
 26:     const baseClasses = "w-full h-32 rounded-lg flex items-center justify-center text-4xl transition-all";
 27:     
 28:     switch (id) {
 29:       case 'modern':
 30:         return (
 31:           <div className={`${baseClasses} bg-gradient-to-br from-blue-500 to-purple-600 text-white`}>
 32:             🎨
 33:           </div>
 34:         );
 35:       case 'professional':
 36:         return (
 37:           <div className={`${baseClasses} bg-gradient-to-br from-gray-700 to-gray-900 text-white`}>
 38:             💼
 39:           </div>
 40:         );
 41:       case 'creative':
 42:         return (
 43:           <div className={`${baseClasses} bg-gradient-to-br from-pink-500 to-orange-500 text-white`}>
 44:             🎭
 45:           </div>
 46:         );
 47:       case 'tech':
 48:         return (
 49:           <div className={`${baseClasses} bg-gradient-to-br from-green-500 to-teal-600 text-white`}>
 50:             💻
 51:           </div>
 52:         );
 53:       case 'minimal':
 54:         return (
 55:           <div className={`${baseClasses} bg-gradient-to-br from-gray-400 to-gray-600 text-white`}>
 56:             📄
 57:           </div>
 58:         );
 59:       case 'executive':
 60:         return (
 61:           <div className={`${baseClasses} bg-gradient-to-br from-indigo-600 to-purple-700 text-white`}>
 62:             👔
 63:           </div>
 64:         );
 65:       default:
 66:         return (
 67:           <div className={`${baseClasses} bg-gradient-to-br from-blue-500 to-purple-600 text-white`}>
 68:             📝
 69:           </div>
 70:         );
 71:     }
 72:   };
 73: 
 74:   return (
 75:     <button
 76:       onClick={onSelect}
 77:       className={`relative group transition-all duration-200 ${
 78:         isSelected ? 'scale-105' : 'hover:scale-102'
 79:       }`}
 80:     >
 81:       <Card
 82:         className={`overflow-hidden transition-all ${
 83:           isSelected
 84:             ? 'ring-2 ring-blue-500 shadow-lg'
 85:             : 'hover:shadow-md border-2 border-border'
 86:         }`}
 87:       >
 88:         {/* Selected Indicator */}
 89:         {isSelected && (
 90:           <div className="absolute top-2 right-2 z-10 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center shadow-lg">
 91:             <Check className="w-4 h-4 text-white" />
 92:           </div>
 93:         )}
 94: 
 95:         {/* Recommended Badge */}
 96:         {recommended && !isSelected && (
 97:           <div className="absolute top-2 left-2 z-10">
 98:             <Badge className="bg-yellow-400 text-yellow-900 hover:bg-yellow-400">
 99:               ⭐ Recommended
100:             </Badge>
101:           </div>
102:         )}
103: 
104:         {/* Template Preview - FIXED: Simple, reliable visual */}
105:         <div className="relative w-full aspect-[8.5/11] bg-gray-100 dark:bg-gray-800 overflow-hidden">
106:           {getPreviewVisual()}
107:           
108:           {/* Hover Overlay */}
109:           <div className={`absolute inset-0 bg-blue-500/10 transition-opacity ${
110:             isSelected ? 'opacity-100' : 'opacity-0 group-hover:opacity-100'
111:           }`} />
112:         </div>
113: 
114:         {/* Template Info */}
115:         <div className="p-3 bg-card">
116:           <h4 className="font-semibold text-sm text-foreground mb-1">{name}</h4>
117:           <p className="text-xs text-muted-foreground line-clamp-2">{description}</p>
118:         </div>
119:       </Card>
120:     </button>
121:   )
122: }
</file>

<file path="src/components/unified-navigation.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { useSession, signOut } from 'next-auth/react'
  5: import { usePathname } from 'next/navigation'
  6: import Link from 'next/link'
  7: import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
  8: import { Button } from '@/components/ui/button'
  9: import { ThemeToggle } from '@/components/theme-toggle'
 10: import { useNotifications } from '@/hooks/use-notifications'
 11: import {
 12:   Home,
 13:   FileText,
 14:   Briefcase,
 15:   Users,
 16:   Settings,
 17:   LogOut,
 18:   User,
 19:   Menu,
 20:   X,
 21:   Search,
 22:   ChevronDown,
 23:   ChevronRight,
 24:   Bell,
 25:   Mail,
 26:   BarChart3,
 27:   Target,
 28:   PanelLeftClose,
 29:   PanelLeft
 30: } from 'lucide-react'
 31: 
 32: interface NavigationItem {
 33:   name: string
 34:   href?: string
 35:   icon: React.ComponentType<{ className?: string }>
 36:   badge?: number
 37:   submenu?: { name: string; href: string; badge?: number }[]
 38: }
 39: 
 40: // Enhanced Navigation Structure with Better Organization
 41: const navigationItems: NavigationItem[] = [
 42:   { 
 43:     name: 'Dashboard', 
 44:     href: '/dashboard', 
 45:     icon: Home
 46:   },
 47:   {
 48:     name: 'Career Finder',
 49:     icon: Target,
 50:     submenu: [
 51:       { name: 'Job Search', href: '/career-finder/search' },
 52:       { name: 'Job Analysis', href: '/career-finder/job-analysis' },
 53:       { name: 'Company Research', href: '/career-finder/company' },
 54:       { name: 'Resume Optimizer', href: '/career-finder/optimizer' },
 55:       { name: 'Cover Letter', href: '/career-finder/cover-letter' },
 56:       { name: 'Outreach', href: '/career-finder/outreach' }
 57:     ]
 58:   },
 59:   { 
 60:     name: 'Resume', 
 61:     href: '/resume-builder', 
 62:     icon: FileText 
 63:   },
 64:   { 
 65:     name: 'Applications', 
 66:     href: '/career-finder/applications', 
 67:     icon: Briefcase
 68:   },
 69:   { 
 70:     name: 'Analytics', 
 71:     href: '/analytics', 
 72:     icon: BarChart3 
 73:   },
 74:   { 
 75:     name: 'Network', 
 76:     href: '/network', 
 77:     icon: Users 
 78:   },
 79:   {
 80:     name: 'Settings',
 81:     icon: Settings,
 82:     submenu: [
 83:       { name: 'Profile', href: '/settings/profile' },
 84:       { name: 'Preferences', href: '/settings/preferences' },
 85:       { name: 'Alerts', href: '/settings/alerts' },
 86:       { name: 'Privacy', href: '/settings/privacy' },
 87:       { name: 'Integrations', href: '/settings/integrations' },
 88:       { name: 'Job Boards', href: '/settings/job-boards' }
 89:     ]
 90:   },
 91: ]
 92: 
 93: export function UnifiedNavigation() {
 94:   const { data: session, status } = useSession()
 95:   const pathname = usePathname()
 96:   const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
 97:   const [sidebarOpen, setSidebarOpen] = useState(true) // Desktop sidebar state
 98:   const [expandedMenu, setExpandedMenu] = useState<string | null>(null)
 99:   const [isMobile, setIsMobile] = useState(false)
100: 
101:   // Detect screen size and auto-adjust sidebar
102:   useEffect(() => {
103:     const checkScreenSize = () => {
104:       const mobile = window.innerWidth < 1024 // lg breakpoint
105:       const wasMobile = isMobile
106:       
107:       setIsMobile(mobile)
108:       
109:       // Auto-collapse on mobile, auto-open on desktop
110:       if (mobile && !wasMobile) {
111:         setSidebarOpen(false) // Switched to mobile - close sidebar
112:       } else if (!mobile && wasMobile) {
113:         setSidebarOpen(true) // Switched to desktop - open sidebar
114:       }
115:     }
116:     
117:     checkScreenSize()
118:     window.addEventListener('resize', checkScreenSize)
119:     return () => window.removeEventListener('resize', checkScreenSize)
120:   }, [isMobile])
121:   const [scrolled, setScrolled] = useState(false)
122:   const { count: notificationCount } = useNotifications()
123: 
124:   // Handle scroll for glass effect
125:   useEffect(() => {
126:     const handleScroll = () => {
127:       setScrolled(window.scrollY > 10)
128:     }
129:     window.addEventListener('scroll', handleScroll)
130:     return () => window.removeEventListener('scroll', handleScroll)
131:   }, [])
132: 
133:   // Close mobile menu on route change
134:   useEffect(() => {
135:     setMobileMenuOpen(false)
136:   }, [pathname])
137: 
138:   // Keyboard shortcuts
139:   useEffect(() => {
140:     const handleKeyDown = (e: KeyboardEvent) => {
141:       // Cmd/Ctrl + K for search
142:       if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
143:         e.preventDefault()
144:         window.location.href = '/career-finder/search'
145:       }
146:       // Cmd/Ctrl + B to toggle sidebar
147:       if ((e.metaKey || e.ctrlKey) && e.key === 'b') {
148:         e.preventDefault()
149:         setSidebarOpen(!sidebarOpen)
150:       }
151:       // Escape to close mobile menu
152:       if (e.key === 'Escape' && mobileMenuOpen) {
153:         setMobileMenuOpen(false)
154:       }
155:     }
156:     window.addEventListener('keydown', handleKeyDown)
157:     return () => window.removeEventListener('keydown', handleKeyDown)
158:   }, [mobileMenuOpen, sidebarOpen])
159:   
160:   // Only show navigation when user is signed in (not on landing or auth pages)
161:   const isAuthPage = pathname?.startsWith('/auth')
162:   const isLandingPage = pathname === '/'
163:   
164:   // Show loading skeleton while session is loading
165:   if (status === 'loading') {
166:     return (
167:       <header className="fixed top-0 left-0 right-0 bg-background/95 backdrop-blur-xl border-b border-border shadow-xl" style={{ height: '64px', zIndex: 1000 }}>
168:         <div className="h-full px-4 flex items-center justify-between">
169:           <div className="w-32 h-8 bg-muted animate-pulse rounded"></div>
170:           <div className="flex gap-2">
171:             <div className="w-20 h-8 bg-muted animate-pulse rounded"></div>
172:             <div className="w-20 h-8 bg-muted animate-pulse rounded"></div>
173:           </div>
174:         </div>
175:       </header>
176:     )
177:   }
178:   
179:   // Hide navigation if: on auth pages, on landing page, or not authenticated
180:   if (isAuthPage || isLandingPage || status === 'unauthenticated') return null
181: 
182:   const isItemActive = (item: NavigationItem) => {
183:     if (item.href && pathname === item.href) return true
184:     if (item.submenu) {
185:       return item.submenu.some(sub => pathname === sub.href || pathname?.startsWith(sub.href))
186:     }
187:     return false
188:   }
189: 
190:   const toggleSubmenu = (itemName: string) => {
191:     setExpandedMenu(expandedMenu === itemName ? null : itemName)
192:   }
193: 
194:   return (
195:     <>
196:       {/* TOP BAR - Minimal, just logo and actions */}
197:       <header 
198:         className={`fixed top-0 left-0 right-0 transition-all duration-300 ${
199:           scrolled 
200:             ? 'bg-background/95 backdrop-blur-xl border-b border-border shadow-xl' 
201:             : 'bg-background/90 backdrop-blur-lg border-b border-border/50 shadow-md'
202:         }`}
203:         style={{ height: '64px', zIndex: 1000 }}
204:       >
205:         <div className="h-full px-4 flex items-center justify-between">
206:           {/* LEFT: Sidebar toggle + Logo */}
207:           <div className="flex items-center gap-3">
208:             {/* Desktop Sidebar Toggle */}
209:             <button
210:               onClick={() => setSidebarOpen(!sidebarOpen)}
211:               className="hidden md:flex p-2 rounded-lg hover:bg-accent/50 transition-all"
212:               aria-label="Toggle sidebar"
213:             >
214:               {sidebarOpen ? (
215:                 <PanelLeftClose className="w-5 h-5" />
216:               ) : (
217:                 <PanelLeft className="w-5 h-5" />
218:               )}
219:             </button>
220: 
221:             {/* Mobile Menu Toggle */}
222:             <button
223:               onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
224:               className="md:hidden p-2 rounded-lg hover:bg-accent/50 transition-all"
225:               aria-label="Toggle mobile menu"
226:             >
227:               {mobileMenuOpen ? (
228:                 <X className="w-6 h-6" />
229:               ) : (
230:                 <Menu className="w-6 h-6" />
231:               )}
232:             </button>
233: 
234:             {/* Logo */}
235:             <Link 
236:               href={session ? '/dashboard' : '/'} 
237:               className="flex items-center gap-2 group"
238:             >
239:               <div className="w-9 h-9 rounded-xl gradient-primary flex items-center justify-center text-white font-bold shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:scale-105">
240:                 CL
241:               </div>
242:               <span className="gradient-text font-bold text-lg hidden sm:inline-block">
243:                 Career Lever AI
244:               </span>
245:             </Link>
246:           </div>
247: 
248:           {/* RIGHT: Actions */}
249:           <div className="flex items-center gap-2">
250:             {/* Search */}
251:             <Link
252:               href="/career-finder/search"
253:               className="hidden sm:flex p-2 rounded-lg hover:bg-accent/50 transition-all"
254:               title="Search Jobs (⌘K)"
255:             >
256:               <Search className="w-5 h-5" />
257:             </Link>
258: 
259:             {/* Notifications */}
260:             <Link
261:               href="/notifications"
262:               className="relative p-2 rounded-lg hover:bg-accent/50 transition-all"
263:               title="Notifications"
264:             >
265:               <Bell className="w-5 h-5" />
266:               {notificationCount > 0 && (
267:                 <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
268:               )}
269:             </Link>
270: 
271:             {/* Theme Toggle */}
272:             <div className="hidden md:block">
273:               <ThemeToggle />
274:             </div>
275: 
276:             {/* User Menu */}
277:             {session && (
278:               <div className="hidden md:block relative group">
279:                 <button className="flex items-center gap-2 p-1.5 rounded-lg hover:bg-accent/50 transition-all">
280:                   <Avatar className="h-8 w-8 ring-2 ring-border/50">
281:                     <AvatarImage src={session.user?.image || ''} />
282:                     <AvatarFallback className="bg-gradient-primary text-white font-bold text-sm">
283:                       {session.user?.name?.[0]?.toUpperCase() || 'U'}
284:                     </AvatarFallback>
285:                   </Avatar>
286:                   <ChevronDown className="w-3 h-3" />
287:                 </button>
288:                 
289:                 {/* User Dropdown */}
290:                 <div className="absolute right-0 top-full mt-2 w-56 bg-card/95 backdrop-blur-xl border border-border/50 rounded-xl shadow-2xl overflow-hidden opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-50">
291:                   <div className="px-4 py-3 border-b border-border/50">
292:                     <p className="text-sm font-semibold">{session.user?.name}</p>
293:                     <p className="text-xs text-muted-foreground truncate">{session.user?.email}</p>
294:                   </div>
295:                   <Link
296:                     href="/settings/profile"
297:                     className="flex items-center gap-3 px-4 py-3 text-sm hover:bg-accent/50 transition-all"
298:                   >
299:                     <User className="w-4 h-4" />
300:                     <span>Profile</span>
301:                   </Link>
302:                   <Link
303:                     href="/settings"
304:                     className="flex items-center gap-3 px-4 py-3 text-sm hover:bg-accent/50 transition-all"
305:                   >
306:                     <Settings className="w-4 h-4" />
307:                     <span>Settings</span>
308:                   </Link>
309:                   <button
310:                     onClick={() => signOut({ callbackUrl: '/' })}
311:                     className="w-full flex items-center gap-3 px-4 py-3 text-sm text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30 transition-all"
312:                   >
313:                     <LogOut className="w-4 h-4" />
314:                     <span>Sign Out</span>
315:                   </button>
316:                 </div>
317:               </div>
318:             )}
319:           </div>
320:         </div>
321:       </header>
322: 
323:       {/* Mobile Backdrop */}
324:       {isMobile && sidebarOpen && (
325:         <div 
326:           className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 md:hidden"
327:           onClick={() => setSidebarOpen(false)}
328:         />
329:       )}
330: 
331:       {/* Sidebar - Overlay on mobile, fixed on desktop */}
332:       <aside
333:         className={`fixed left-0 top-16 h-[calc(100vh-4rem)] bg-card/95 backdrop-blur-xl border-r border-border/50 transition-all duration-300 overflow-y-auto ${
334:           isMobile 
335:             ? `${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} z-50 w-64`
336:             : `${sidebarOpen ? 'w-64' : 'w-0'} z-10`
337:         }`}
338:       >
339:         <div className={`p-4 space-y-2 ${sidebarOpen ? 'opacity-100' : 'opacity-0'} transition-opacity duration-300`}>
340:           {navigationItems.map((item) => {
341:             const Icon = item.icon
342:             const isActive = isItemActive(item)
343:             const hasSubmenu = item.submenu && item.submenu.length > 0
344:             
345:             return (
346:               <div key={item.name}>
347:                 {hasSubmenu ? (
348:                   <>
349:                     <button
350:                       onClick={() => toggleSubmenu(item.name)}
351:                       className={`w-full flex items-center justify-between px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
352:                         isActive
353:                           ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
354:                           : 'text-foreground hover:bg-accent/50'
355:                       }`}
356:                     >
357:                       <div className="flex items-center gap-3">
358:                         <Icon className="w-5 h-5" />
359:                         <span>{item.name}</span>
360:                       </div>
361:                       <ChevronRight className={`w-4 h-4 transition-transform ${
362:                         expandedMenu === item.name ? 'rotate-90' : ''
363:                       }`} />
364:                     </button>
365:                     
366:                     {expandedMenu === item.name && (
367:                       <div className="ml-4 mt-1 space-y-1">
368:                         {item.submenu?.map((subItem) => (
369:                           <Link
370:                             key={subItem.href}
371:                             href={subItem.href}
372:                             onClick={() => isMobile && setSidebarOpen(false)}
373:                             className={`flex items-center justify-between px-4 py-2.5 rounded-lg text-sm transition-all ${
374:                               pathname === subItem.href
375:                                 ? 'bg-primary/10 text-primary font-medium'
376:                                 : 'text-muted-foreground hover:text-foreground hover:bg-accent/30'
377:                             }`}
378:                           >
379:                             <span>{subItem.name}</span>
380:                           </Link>
381:                         ))}
382:                       </div>
383:                     )}
384:                   </>
385:                 ) : (
386:                   <Link
387:                     href={item.href!}
388:                     onClick={() => isMobile && setSidebarOpen(false)}
389:                     className={`flex items-center gap-3 px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
390:                       isActive
391:                         ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
392:                         : 'text-foreground hover:bg-accent/50'
393:                     }`}
394:                   >
395:                     <Icon className="w-5 h-5" />
396:                     <span>{item.name}</span>
397:                   </Link>
398:                 )}
399:               </div>
400:             )
401:           })}
402:         </div>
403:       </aside>
404: 
405:       {/* MOBILE NAVIGATION PANEL */}
406:       {mobileMenuOpen && (
407:         <div className="md:hidden fixed inset-0 top-16 bg-background/95 backdrop-blur-xl z-50 overflow-y-auto">
408:           <div className="p-4 space-y-2">
409:             {navigationItems.map((item) => {
410:               const Icon = item.icon
411:               const isActive = isItemActive(item)
412:               const hasSubmenu = item.submenu && item.submenu.length > 0
413:               
414:               return (
415:                 <div key={item.name}>
416:                   {hasSubmenu ? (
417:                     <>
418:                       <button
419:                         onClick={() => toggleSubmenu(item.name)}
420:                         className={`w-full flex items-center justify-between px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
421:                           isActive
422:                             ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
423:                             : 'text-foreground hover:bg-accent/50'
424:                         }`}
425:                       >
426:                         <div className="flex items-center gap-3">
427:                           <Icon className="w-5 h-5" />
428:                           <span>{item.name}</span>
429:                         </div>
430:                         <ChevronRight className={`w-4 h-4 transition-transform ${
431:                           expandedMenu === item.name ? 'rotate-90' : ''
432:                         }`} />
433:                       </button>
434:                       
435:                       {expandedMenu === item.name && (
436:                         <div className="ml-4 mt-1 space-y-1">
437:                           {item.submenu?.map((subItem) => (
438:                             <Link
439:                               key={subItem.href}
440:                               href={subItem.href}
441:                               className={`flex items-center justify-between px-4 py-2.5 rounded-lg text-sm transition-all ${
442:                                 pathname === subItem.href
443:                                   ? 'bg-primary/10 text-primary font-medium'
444:                                   : 'text-muted-foreground hover:text-foreground hover:bg-accent/30'
445:                               }`}
446:                               onClick={() => setMobileMenuOpen(false)}
447:                             >
448:                               <span>{subItem.name}</span>
449:                             </Link>
450:                           ))}
451:                         </div>
452:                       )}
453:                     </>
454:                   ) : (
455:                     <Link
456:                       href={item.href || '#'}
457:                       className={`flex items-center gap-3 px-4 py-3 rounded-xl text-sm font-semibold transition-all ${
458:                         isActive
459:                           ? 'bg-gradient-to-r from-primary/20 to-accent/20 text-primary'
460:                           : 'text-foreground hover:bg-accent/50'
461:                       }`}
462:                       onClick={() => setMobileMenuOpen(false)}
463:                     >
464:                       <Icon className="w-5 h-5" />
465:                       <span>{item.name}</span>
466:                     </Link>
467:                   )}
468:                 </div>
469:               )
470:             })}
471:             
472:             {/* Mobile Footer */}
473:             <div className="pt-4 mt-4 border-t border-border/50 space-y-2">
474:               <ThemeToggle />
475:               {session && (
476:                 <button
477:                   onClick={() => signOut({ callbackUrl: '/' })}
478:                   className="w-full flex items-center gap-3 px-4 py-3 rounded-xl text-sm font-medium text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30 transition-all"
479:                 >
480:                   <LogOut className="w-5 h-5" />
481:                   <span>Sign Out</span>
482:                 </button>
483:               )}
484:             </div>
485:           </div>
486:         </div>
487:       )}
488:     </>
489:   )
490: }
</file>

<file path="src/app/api/resume/upload/route.ts">
  1: import { NextRequest, NextResponse } from 'next/server'
  2: import { getServerSession } from 'next-auth/next'
  3: import { authOptions } from '@/lib/auth'
  4: import Resume from '@/models/Resume'
  5: import { dbService } from '@/lib/database'
  6: import { isRateLimited } from '@/lib/rate-limit'
  7: import path from 'path'
  8: import { cleanPDFExtraction } from '@/lib/utils/pdf-cleaner'
  9: 
 10: function cleanExtractedText(text: string): string {
 11:   // Use comprehensive PDF cleaner first
 12:   let cleaned = cleanPDFExtraction(text)
 13:   
 14:   // Additional cleaning for resume-specific content
 15:   cleaned = cleaned
 16:     .replace(/https?:\/\/[^\s]+/gi, '') // URLs
 17:     .replace(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/gi, '') // Emails (during parsing)
 18:     .replace(/\s+/g, ' ') // Whitespace
 19:     .trim()
 20:   
 21:   return cleaned
 22: }
 23: 
 24: const MIN_VALID_PDF_TEXT_LENGTH = Number(process.env.RESUME_MIN_TEXT_LENGTH || 150)
 25: const ASCII_FALLBACK_CONFIDENCE = 0.3
 26: 
 27: // AI-based OCR fallback using base64 encoding
 28: async function extractTextWithAI(buffer: Buffer): Promise<string> {
 29:   try {
 30:     console.log('[PDF_PARSE] Attempting AI-based extraction')
 31:     const { PerplexityIntelligenceService } = await import('@/lib/perplexity-intelligence')
 32:     
 33:     // Convert PDF to base64
 34:     const base64 = buffer.toString('base64')
 35:     
 36:     const result = await PerplexityIntelligenceService.customQuery({
 37:       systemPrompt: 'You are a resume text extractor. Extract ALL text from the provided PDF resume. Return ONLY the extracted text, no formatting, no markdown, no explanations.',
 38:       userPrompt: `Extract all text from this PDF resume (base64 encoded, first 1000 chars): ${base64.slice(0, 1000)}...\n\nReturn the complete resume text.`,
 39:       temperature: 0.1,
 40:       maxTokens: 4000
 41:     })
 42:     
 43:     if (result.content && result.content.length > MIN_VALID_PDF_TEXT_LENGTH) {
 44:       console.log('[PDF_PARSE] ✅ AI extraction SUCCESS:', result.content.length, 'chars')
 45:       return result.content
 46:     }
 47:     
 48:     throw new Error('AI extraction returned insufficient text')
 49:   } catch (error) {
 50:     console.error('[PDF_PARSE] ❌ AI extraction failed:', error)
 51:     throw error
 52:   }
 53: }
 54: 
 55: async function extractTextFromPDF(buffer: Buffer): Promise<{ text: string; method: string; confidence?: number }> {
 56:   console.log('[PDF_PARSE] ==========================================')
 57:   console.log('[PDF_PARSE] Starting extraction')
 58:   console.log('[PDF_PARSE] Buffer size:', buffer.length, 'bytes')
 59:   console.log('[PDF_PARSE] Buffer type:', typeof buffer)
 60:   console.log('[PDF_PARSE] Is Buffer:', Buffer.isBuffer(buffer))
 61:   console.log('[PDF_PARSE] ==========================================')
 62:   
 63:   // Try Method 1: pdf-parse-debugging-disabled (MOST RELIABLE)
 64:   try {
 65:     console.log('[PDF_PARSE] 🔄 Method 1: pdf-parse-debugging-disabled')
 66:     const pdfParse = await import('pdf-parse-debugging-disabled')
 67:     console.log('[PDF_PARSE] Module loaded:', !!pdfParse, 'default:', !!pdfParse.default)
 68:     
 69:     const data = await pdfParse.default(buffer, { 
 70:       max: 0, // Parse all pages
 71:       version: 'v2.0.550' // Specify version
 72:     })
 73:     
 74:     console.log('[PDF_PARSE] Raw result:', {
 75:       hasData: !!data,
 76:       hasText: !!data?.text,
 77:       textLength: data?.text?.length || 0,
 78:       numpages: data?.numpages,
 79:       numrender: data?.numrender,
 80:       info: data?.info,
 81:       metadata: data?.metadata
 82:     })
 83:     
 84:     if (data?.text) {
 85:       console.log('[PDF_PARSE] Raw text preview (first 500 chars):', data.text.slice(0, 500))
 86:       console.log('[PDF_PARSE] Raw text preview (last 200 chars):', data.text.slice(-200))
 87:       
 88:       const cleanedText = cleanExtractedText(data.text)
 89:       console.log('[PDF_PARSE] After cleaning:', {
 90:         rawLength: data.text.length,
 91:         cleanedLength: cleanedText.length,
 92:         preview: cleanedText.slice(0, 300)
 93:       })
 94:       
 95:       if (cleanedText.length >= 50) {
 96:         const confidence = cleanedText.length >= MIN_VALID_PDF_TEXT_LENGTH ? 0.95 : 0.6
 97:         console.log('[PDF_PARSE] ✅✅✅ Method 1 SUCCESS - confidence:', confidence)
 98:         return {
 99:           text: cleanedText,
100:           method: 'pdf-parse',
101:           confidence
102:         }
103:       } else {
104:         console.log('[PDF_PARSE] ⚠️ Method 1 extracted text but too short:', cleanedText.length, 'chars')
105:       }
106:     } else {
107:       console.log('[PDF_PARSE] ⚠️ Method 1 returned no text')
108:     }
109:   } catch (error: any) {
110:     console.error('[PDF_PARSE] ❌ Method 1 FAILED')
111:     console.error('[PDF_PARSE] Error type:', error?.constructor?.name)
112:     console.error('[PDF_PARSE] Error message:', error?.message)
113:     console.error('[PDF_PARSE] Error stack:', error?.stack)
114:   }
115: 
116:   // Try Method 2: pdfjs-dist fallback (BETTER for complex PDFs)
117:   try {
118:     console.log('[PDF_PARSE] 🔄 Method 2: pdfjs-dist')
119:     const pdfjsLib = await import('pdfjs-dist')
120:     console.log('[PDF_PARSE] pdfjs-dist module loaded')
121:     
122:     // Load the PDF document with proper TypeScript types
123:     const loadingTask = pdfjsLib.getDocument({
124:       data: new Uint8Array(buffer),
125:       verbosity: 0,
126:       useSystemFonts: true,
127:       disableFontFace: false,
128:       standardFontDataUrl: 'https://cdn.jsdelivr.net/npm/pdfjs-dist@4.10.38/standard_fonts/'
129:     })
130:     
131:     const pdfDoc = await loadingTask.promise
132:     console.log('[PDF_PARSE] Document loaded successfully')
133:     console.log('[PDF_PARSE] Pages:', pdfDoc.numPages)
134:     console.log('[PDF_PARSE] Fingerprints:', pdfDoc.fingerprints)
135:     
136:     let fullText = ''
137:     let totalChars = 0
138:     
139:     // Extract text from each page
140:     for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
141:       try {
142:         const page = await pdfDoc.getPage(pageNum)
143:         const textContent = await page.getTextContent()
144:         
145:         // Better text extraction with spacing
146:         const pageText = textContent.items
147:           .map((item: any) => {
148:             if ('str' in item && item.str) {
149:               return item.str
150:             }
151:             return ''
152:           })
153:           .filter(Boolean)
154:           .join(' ')
155:         
156:         fullText += pageText + '\n\n'
157:         totalChars += pageText.length
158:         console.log(`[PDF_PARSE] Page ${pageNum}/${pdfDoc.numPages}: ${pageText.length} chars (total: ${totalChars})`)
159:       } catch (pageError) {
160:         console.error(`[PDF_PARSE] Error on page ${pageNum}:`, pageError)
161:       }
162:     }
163:     
164:     console.log('[PDF_PARSE] Raw extraction complete:', fullText.length, 'chars')
165:     console.log('[PDF_PARSE] Raw text preview:', fullText.slice(0, 500))
166:     
167:     const cleanedText = cleanExtractedText(fullText.trim())
168:     console.log('[PDF_PARSE] After cleaning:', {
169:       rawLength: fullText.length,
170:       cleanedLength: cleanedText.length,
171:       preview: cleanedText.slice(0, 300)
172:     })
173:     
174:     if (cleanedText.length >= 50) {
175:       const confidence = cleanedText.length >= MIN_VALID_PDF_TEXT_LENGTH ? 0.9 : 0.6
176:       console.log('[PDF_PARSE] ✅✅✅ Method 2 SUCCESS - confidence:', confidence)
177:       return {
178:         text: cleanedText,
179:         method: 'pdfjs-dist',
180:         confidence
181:       }
182:     } else {
183:       console.log('[PDF_PARSE] ⚠️ Method 2 extracted text but too short:', cleanedText.length, 'chars')
184:     }
185:   } catch (error: any) {
186:     console.error('[PDF_PARSE] ❌ Method 2 FAILED')
187:     console.error('[PDF_PARSE] Error type:', error?.constructor?.name)
188:     console.error('[PDF_PARSE] Error message:', error?.message)
189:     console.error('[PDF_PARSE] Error stack:', error?.stack)
190:   }
191: 
192:   // Try Method 3: AI-based extraction (BEST for scanned/image PDFs)
193:   try {
194:     console.log('[PDF_PARSE] Attempting Method 3: AI extraction')
195:     const aiText = await extractTextWithAI(buffer)
196:     
197:     if (aiText && aiText.length >= MIN_VALID_PDF_TEXT_LENGTH) {
198:       const cleanedText = cleanExtractedText(aiText)
199:       console.log('[PDF_PARSE] ✅ Method 3 SUCCESS (AI extraction):', cleanedText.length, 'chars')
200:       
201:       return {
202:         text: cleanedText,
203:         method: 'ai-extraction',
204:         confidence: 0.8
205:       }
206:     }
207:   } catch (error) {
208:     console.error('[PDF_PARSE] ❌ Method 3 failed:', error)
209:   }
210: 
211:   // All methods failed
212:   console.error('[PDF_PARSE] ❌❌❌ ALL EXTRACTION METHODS FAILED')
213:   return {
214:     text: '',
215:     method: 'all-methods-failed',
216:     confidence: 0
217:   }
218: }
219: 
220: export const runtime = 'nodejs'
221: export const dynamic = 'force-dynamic'
222: 
223: export async function POST(request: NextRequest) {
224:   const startTime = Date.now()
225:   console.log('[RESUME_UPLOAD] ========== NEW UPLOAD REQUEST ==========')
226:   
227:   try {
228:     await dbService.connect()
229: 
230:     const session = await getServerSession(authOptions)
231:     if (!session?.user?.id) {
232:       console.log('[RESUME_UPLOAD] ❌ Unauthorized')
233:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
234:     }
235:     
236:     console.log('[RESUME_UPLOAD] User:', session.user.id, session.user.email)
237: 
238:     if (await isRateLimited(session.user.id, 'resume:upload')) {
239:       console.log('[RESUME_UPLOAD] ❌ Rate limited')
240:       return NextResponse.json({ error: 'Rate limited' }, { status: 429 })
241:     }
242: 
243:     const data = await request.formData()
244:     const file = data.get('file') as File
245:     const pastedText = data.get('pastedText') as string
246:     
247:     console.log('[RESUME_UPLOAD] Upload type:', {
248:       hasFile: !!file,
249:       fileSize: file?.size,
250:       fileName: file?.name,
251:       hasPastedText: !!pastedText,
252:       pastedTextLength: pastedText?.length
253:     })
254: 
255:     if (!file && !pastedText) {
256:       console.log('[RESUME_UPLOAD] ❌ No file or text provided')
257:       return NextResponse.json({ error: 'No file or text provided' }, { status: 400 })
258:     }
259: 
260:     let extractedText = ''
261:     let extractionMethod = ''
262:     let extractionError = ''
263:     let extractionConfidence = 0.95
264: 
265:     if (file && file.size > 0) {
266:       // Validate file size and type
267:       if (file.size > 10 * 1024 * 1024) {
268:         return NextResponse.json({ error: 'File too large' }, { status: 400 })
269:       }
270: 
271:       const buffer = Buffer.from(await file.arrayBuffer())
272:       const filename = file.name || 'resume.pdf'
273: 
274:       if (path.extname(filename).toLowerCase() === '.pdf') {
275:         try {
276:           const { text, method, confidence } = await extractTextFromPDF(buffer)
277:           extractedText = text
278:           extractionMethod = method
279:           extractionConfidence = confidence || 0.95
280:           
281:           // Enhanced logging
282:           console.log('🔍 PDF Processing Result:', {
283:             filename,
284:             method: extractionMethod,
285:             textLength: extractedText?.length,
286:             confidence: extractionConfidence,
287:             firstWords: extractedText?.slice(0, 100)
288:           })
289:           
290:           if (!text || text.length < MIN_VALID_PDF_TEXT_LENGTH) {
291:             extractionError = 'PDF text extraction was incomplete. Please paste your resume content instead.'
292:           }
293:         } catch (pdfError) {
294:           console.error('PDF processing failed completely:', pdfError)
295:           extractionError = 'PDF processing failed. Please paste your resume text or try a different file format.'
296:           extractionMethod = 'pdf-failed'
297:         }
298:       } else {
299:         extractedText = await file.text()
300:         extractionMethod = 'direct_text'
301:         extractionConfidence = 1.0
302:       }
303:     } else if (pastedText) {
304:       extractedText = pastedText
305:       extractionMethod = 'pasted_text'
306:     }
307: 
308:     extractedText = cleanExtractedText(extractedText || '')
309: 
310:     const asciiFallbackUsed = extractionMethod === 'ascii-fallback'
311: 
312:     if (asciiFallbackUsed) {
313:       extractionError = extractionError || 'PDF could not be reliably processed (ASCII fallback). Please paste your resume text instead.'
314:       extractionConfidence = Math.min(extractionConfidence, ASCII_FALLBACK_CONFIDENCE)
315:     }
316: 
317:     if (!extractedText || extractedText.length < MIN_VALID_PDF_TEXT_LENGTH) {
318:       return NextResponse.json({ 
319:         error: 'No readable content', 
320:         details: extractionError || 'Could not extract text from the file. Please paste your resume text instead.',
321:         extractionMethod 
322:       }, { status: 400 })
323:     }
324: 
325:     if (asciiFallbackUsed) {
326:       return NextResponse.json({
327:         error: 'Resume quality too low',
328:         details: extractionError,
329:         extractionMethod,
330:         confidence: extractionConfidence
331:       }, { status: 400 })
332:     }
333: 
334:     // CRITICAL FIX: Extract location and keywords from resume text
335:     console.log('═══════════════════════════════════════════════════════')
336:     console.log('[PDF UPLOAD] EXTRACTING RESUME SIGNALS (Location + Keywords)')
337:     console.log('═══════════════════════════════════════════════════════')
338:     console.log('[PDF UPLOAD] Resume text length:', extractedText.length, 'chars')
339:     console.log('[PDF UPLOAD] First 300 chars:', extractedText.substring(0, 300))
340:     console.log('─────────────────────────────────────────────────────────')
341: 
342:     let extractedLocation: string | undefined
343:     let extractedKeywords: string[] = []
344:     let personalInfo: any = {}
345: 
346:     try {
347:       const { PerplexityIntelligenceService } = await import('@/lib/perplexity-intelligence')
348:       const signals = await PerplexityIntelligenceService.extractResumeSignals(extractedText, 50)
349:       
350:       extractedLocation = signals.location
351:       extractedKeywords = signals.keywords || []
352:       personalInfo = signals.personalInfo || {}
353: 
354:       console.log('[PDF UPLOAD] EXTRACTION RESULTS:')
355:       console.log('[PDF UPLOAD] Location extracted:', extractedLocation || 'NONE')
356:       console.log('[PDF UPLOAD] Keywords extracted:', extractedKeywords.length, 'keywords')
357:       console.log('[PDF UPLOAD] First 10 keywords:', extractedKeywords.slice(0, 10).join(', ') || 'NONE')
358:       console.log('[PDF UPLOAD] Personal info:', personalInfo)
359: 
360:       // CRITICAL: Fail if no real location found
361:       if (!extractedLocation || extractedLocation.trim().length < 2) {
362:         console.error('═══════════════════════════════════════════════════════')
363:         console.error('[PDF UPLOAD] ❌ EXTRACTION FAILED - NO LOCATION')
364:         console.error('═══════════════════════════════════════════════════════')
365:         console.error('[PDF UPLOAD] Extracted location:', extractedLocation || 'undefined')
366:         console.error('[PDF UPLOAD] Resume preview (first 500 chars):', extractedText.substring(0, 500))
367:         console.error('═══════════════════════════════════════════════════════')
368:         
369:         return NextResponse.json({
370:           error: 'Could not extract location from resume',
371:           details: 'Please ensure your resume includes your city and state/province in the contact section at the top.',
372:           extractedLocation: extractedLocation,
373:           resumePreview: extractedText.substring(0, 300),
374:           suggestion: 'Add your location (e.g., "Seattle, WA" or "Toronto, ON") to the top of your resume and try again.'
375:         }, { status: 400 })
376:       }
377: 
378:       console.log('═══════════════════════════════════════════════════════')
379:       console.log('[PDF UPLOAD] ✅ EXTRACTION SUCCESSFUL')
380:       console.log('[PDF UPLOAD] Location:', extractedLocation)
381:       console.log('[PDF UPLOAD] Keywords:', extractedKeywords.length, 'extracted')
382:       console.log('═══════════════════════════════════════════════════════')
383:     } catch (signalError) {
384:       console.error('═══════════════════════════════════════════════════════')
385:       console.error('[PDF UPLOAD] ❌ SIGNAL EXTRACTION FAILED')
386:       console.error('═══════════════════════════════════════════════════════')
387:       console.error('[PDF UPLOAD] Error:', (signalError as Error).message)
388:       console.error('[PDF UPLOAD] Stack:', (signalError as Error).stack)
389:       console.error('═══════════════════════════════════════════════════════')
390:       
391:       return NextResponse.json({
392:         error: 'Failed to extract resume information',
393:         details: 'Could not parse location and keywords from your resume. Please ensure your resume is properly formatted with contact information at the top.',
394:         technical: (signalError as Error).message
395:       }, { status: 500 })
396:     }
397: 
398:     const resume = new Resume({
399:       userId: session.user.id,
400:       originalFileName: file?.name || 'pasted-resume.txt',
401:       filename: file?.name || 'pasted-resume.txt',
402:       extractedText,
403:       extractionMethod,
404:       extractionError: extractionError || undefined,
405:       uploadedAt: new Date(),
406:       // Store extracted signals for job matching
407:       metadata: {
408:         extractedLocation,
409:         extractedKeywords: extractedKeywords.slice(0, 20), // Store top 20
410:         personalInfo,
411:         extractionDate: new Date().toISOString()
412:       }
413:     })
414: 
415:     await resume.save()
416:     
417:     const duration = Date.now() - startTime
418:     console.log('[RESUME_UPLOAD] ✅ SUCCESS:', {
419:       resumeId: resume._id.toString(),
420:       textLength: extractedText.length,
421:       method: extractionMethod,
422:       confidence: extractionConfidence,
423:       durationMs: duration
424:     })
425: 
426:     return NextResponse.json({
427:       success: true,
428:       resume: {
429:         _id: resume._id.toString(),
430:         userId: resume.userId,
431:         originalFileName: resume.originalFileName,
432:         filename: resume.filename,
433:         extractedText: resume.extractedText,
434:         extractionMethod: resume.extractionMethod,
435:         uploadedAt: resume.uploadedAt,
436:         metadata: resume.metadata
437:       },
438:       resumeId: resume._id,
439:       extractedText: extractedText.substring(0, 500) + (extractedText.length > 500 ? '...' : ''),
440:       extractionMethod,
441:       extractionError,
442:       confidence: extractionConfidence,
443:       // Include extracted signals in response for frontend
444:       extractedLocation,
445:       extractedKeywords: extractedKeywords.slice(0, 10), // Top 10 for display
446:       personalInfo
447:     })
448:   } catch (error) {
449:     console.error('Upload error:', error)
450:     const errorMessage = error instanceof Error ? error.message : 'Internal server error'
451:     
452:     // Provide helpful error messages based on error type
453:     let userMessage = 'Failed to process resume'
454:     let helpText = 'Please try again or paste your resume text directly.'
455:     
456:     if (errorMessage.includes('validation')) {
457:       userMessage = 'Invalid resume data'
458:       helpText = 'Please ensure your resume contains valid text.'
459:     } else if (errorMessage.includes('database') || errorMessage.includes('mongo')) {
460:       userMessage = 'Database connection error'
461:       helpText = 'Please try again in a moment.'
462:     } else if (errorMessage.includes('memory') || errorMessage.includes('heap')) {
463:       userMessage = 'File too complex to process'
464:       helpText = 'Try a simpler PDF or paste your text instead.'
465:     }
466:     
467:     return NextResponse.json({ 
468:       error: userMessage,
469:       details: helpText,
470:       technical: process.env.NODE_ENV === 'development' ? errorMessage : undefined
471:     }, { status: 500 })
472:   }
473: }
</file>

<file path="src/app/career-finder/optimizer/page.tsx">
  1: 'use client'
  2: 
  3: import Link from 'next/link'
  4: import { useEffect, useState, useRef } from 'react'
  5: import { Button } from '@/components/ui/button'
  6: import { CareerFinderBackButton } from '@/components/career-finder-back-button'
  7: import CareerFinderStorage from '@/lib/career-finder-storage'
  8: import { ResumeSkeleton } from '@/components/skeleton-loader'
  9: import { getTemplateById } from '@/lib/resume-templates-v2'
 10: import { parseResumeText } from '@/lib/resume-parser'
 11: 
 12: const TEMPLATES = [
 13:   { 
 14:     id: 'modern', 
 15:     name: 'Modern', 
 16:     description: 'Clean, contemporary design with visual elements',
 17:     bestFor: ['Tech', 'Startup', 'Marketing', 'Design'],
 18:     icon: '🚀'
 19:   },
 20:   { 
 21:     id: 'professional', 
 22:     name: 'Professional', 
 23:     description: 'Traditional, formal layout for conservative industries',
 24:     bestFor: ['Finance', 'Legal', 'Corporate', 'Healthcare'],
 25:     icon: '💼'
 26:   },
 27:   { 
 28:     id: 'creative', 
 29:     name: 'Creative', 
 30:     description: 'Bold, unique design to showcase creativity',
 31:     bestFor: ['Design', 'Marketing', 'Media', 'Arts'],
 32:     icon: '🎨'
 33:   },
 34:   { 
 35:     id: 'tech', 
 36:     name: 'Tech-Focused', 
 37:     description: 'Developer-friendly with project highlights',
 38:     bestFor: ['Software Engineering', 'DevOps', 'Data Science'],
 39:     icon: '💻'
 40:   },
 41:   { 
 42:     id: 'minimal', 
 43:     name: 'Minimal/ATS', 
 44:     description: 'Plain text, maximum ATS compatibility',
 45:     bestFor: ['ATS Systems', 'Large Corporations', 'Government'],
 46:     icon: '📄'
 47:   },
 48:   { 
 49:     id: 'executive', 
 50:     name: 'Executive', 
 51:     description: 'Leadership-focused with metrics emphasis',
 52:     bestFor: ['C-Suite', 'Director', 'VP', 'Senior Management'],
 53:     icon: '👔'
 54:   },
 55:   { 
 56:     id: 'cv', 
 57:     name: 'Curriculum Vitae', 
 58:     description: 'Academic format for research and scholarly positions',
 59:     bestFor: ['Academic', 'Research', 'PhD', 'Professor'],
 60:     icon: '🎓'
 61:   },
 62: ]
 63: 
 64: export default function CareerFinderOptimizerPage() {
 65:   const [template, setTemplate] = useState('modern')
 66:   const [loading, setLoading] = useState(false)
 67:   const [resumeText, setResumeText] = useState('')
 68:   const [variantA, setVariantA] = useState<string>('')
 69:   const [variantB, setVariantB] = useState<string>('')
 70:   const [selected, setSelected] = useState<'A'|'B'|'none'>('none')
 71:   const [humanize, setHumanize] = useState(true)
 72:   const [highlights, setHighlights] = useState(false)
 73:   const [overrideText, setOverrideText] = useState('')
 74:   const [tone, setTone] = useState<'professional'|'conversational'|'technical'>('professional')
 75:   const [expanded, setExpanded] = useState<'A'|'B'|'none'>('none')
 76:   const [editorHtml, setEditorHtml] = useState('')
 77:   const [personalInfo, setPersonalInfo] = useState<{
 78:     name?: string
 79:     email?: string
 80:     phone?: string
 81:     location?: string
 82:   }>({})
 83:   const [atsScore, setAtsScore] = useState<number | null>(null)
 84:   
 85:   // CRITICAL FIX: Prevent infinite loop with processing ref
 86:   const processingRef = useRef(false)
 87:   const hasGeneratedRef = useRef(false)
 88: 
 89:   useEffect(() => {
 90:     (async () => {
 91:       CareerFinderStorage.setProgress(5, 7)
 92:       
 93:       // ✅ CRITICAL FIX: Use unified storage
 94:       const resumeData = CareerFinderStorage.getResume()
 95:       
 96:       if (resumeData && resumeData.extractedText && resumeData.extractedText.length > 100) {
 97:         console.log('[OPTIMIZER] ✅ Found cached resume, length:', resumeData.extractedText.length)
 98:         setResumeText(resumeData.extractedText)
 99:         
100:         // Extract personal info from resume
101:         const info = extractPersonalInfo(resumeData.extractedText)
102:         console.log('[OPTIMIZER] 📋 Extracted personal info:', info)
103:         setPersonalInfo(info)
104:         
105:         // Don't calculate ATS score yet - wait for optimized resume
106:         console.log('[OPTIMIZER] ⏳ ATS Score will be calculated after optimization')
107:         setAtsScore(null)
108:         
109:         return
110:       }
111:       
112:       // FALLBACK: Fetch from database if no cache
113:       try {
114:         console.log('[OPTIMIZER] No cached resume, fetching from DB...')
115:         const rl = await fetch('/api/resume/list')
116:         if (rl.ok) {
117:           const rj = await rl.json()
118:           const txt: string = rj?.resumes?.[0]?.extractedText || ''
119:           if (txt.length > 100) {
120:             console.log('[OPTIMIZER] ✅ Found DB resume, length:', txt.length)
121:             setResumeText(txt)
122:             // Cache it using unified storage
123:             CareerFinderStorage.setResume(rj.resumes[0])
124:           } else {
125:             console.warn('[OPTIMIZER] ❌ No resume text found in DB')
126:           }
127:         } else {
128:           console.warn('[OPTIMIZER] ❌ DB fetch failed:', rl.status)
129:         }
130:       } catch (e) {
131:         console.error('[OPTIMIZER] ❌ Resume fetch error:', e)
132:       }
133:     })()
134:   }, [])
135: 
136:   useEffect(() => {
137:     CareerFinderStorage.setTemplate(template)
138:   }, [template])
139: 
140:   useEffect(() => {
141:     CareerFinderStorage.setTone(tone)
142:   }, [tone])
143: 
144:   // Calculate real ATS score using API that compares against job requirements
145:   const calculateRealATSScore = async (resumeText: string) => {
146:     try {
147:       const jobAnalysis = CareerFinderStorage.getJobAnalysis()
148:       if (!jobAnalysis) {
149:         console.warn('[OPTIMIZER] ⚠️ No job analysis found, using basic ATS score')
150:         setAtsScore(75) // Default score if no job analysis
151:         return
152:       }
153:       
154:       console.log('[OPTIMIZER] 📊 Calculating ATS score against job requirements...')
155:       const response = await fetch('/api/insights/ats/score', {
156:         method: 'POST',
157:         headers: { 'Content-Type': 'application/json' },
158:         body: JSON.stringify({
159:           resumeText,
160:           jobAnalysis
161:         })
162:       })
163:       
164:       if (response.ok) {
165:         const result = await response.json()
166:         if (result.success && result.ats) {
167:           console.log('[OPTIMIZER] ✅ ATS Score:', result.ats.score)
168:           console.log('[OPTIMIZER] 📊 Matched Keywords:', result.ats.matchedKeywords.length)
169:           console.log('[OPTIMIZER] ⚠️ Missing Keywords:', result.ats.missingKeywords.length)
170:           setAtsScore(result.ats.score)
171:         }
172:       } else {
173:         console.warn('[OPTIMIZER] ⚠️ ATS API failed, using fallback score')
174:         setAtsScore(75)
175:       }
176:     } catch (error) {
177:       console.error('[OPTIMIZER] ❌ ATS calculation error:', error)
178:       setAtsScore(75)
179:     }
180:   }
181: 
182:   const handleRegenerate = async () => {
183:     // Clear cache to force new generation
184:     localStorage.removeItem('cf:resumeVariants')
185:     console.log('[OPTIMIZER] 🔄 Cache cleared, regenerating variants...')
186:     await generateVariants()
187:   }
188: 
189:   const generateVariants = async () => {
190:     // CRITICAL FIX: Prevent multiple simultaneous calls
191:     if (processingRef.current) {
192:       console.log('[OPTIMIZER] Already processing, skipping duplicate call')
193:       return
194:     }
195:     
196:     processingRef.current = true
197:     setLoading(true)
198:     setVariantA(''); setVariantB('')
199:     
200:     try {
201:       // AUTOPILOT: Check cache first
202:       const cacheKey = 'cf:resumeVariants'
203:       const cached = localStorage.getItem(cacheKey)
204:       
205:       if (cached && !overrideText) {
206:         console.log('[OPTIMIZER] ✅ Loading variants from cache')
207:         const variants = JSON.parse(cached)
208:         setVariantA(variants.variantA || '')
209:         setVariantB(variants.variantB || '')
210:         hasGeneratedRef.current = true
211:         setLoading(false)
212:         processingRef.current = false
213:         return
214:       }
215:       
216:       console.log('[OPTIMIZER] 🔄 Generating new variants via autopilot...')
217:       
218:       // Get job data
219:       const selectedJob = CareerFinderStorage.getJob()
220:       const jobTitle = selectedJob?.title || 'Professional'
221:       const jobRequirements = selectedJob?.skills || []
222:       
223:       // Call new autopilot endpoint
224:       const response = await fetch('/api/resume/optimize', {
225:         method: 'POST',
226:         headers: { 'Content-Type': 'application/json' },
227:         body: JSON.stringify({
228:           resumeText: (overrideText || resumeText).slice(0, 8000),
229:           jobTitle,
230:           jobRequirements,
231:           companyInsights: {
232:             culture: '',
233:             values: [],
234:             industry: ''
235:           },
236:           template: template
237:         })
238:       })
239:       
240:       if (!response.ok) {
241:         throw new Error(`API error: ${response.status}`)
242:       }
243:       
244:       const result = await response.json()
245:       
246:       if (result.success && result.data) {
247:         const { variantA: vA, variantB: vB } = result.data
248:         
249:         // Format plain text as HTML with selected template
250:         const formattedA = formatResumeWithTemplate(vA || '', personalInfo, template)
251:         const formattedB = formatResumeWithTemplate(vB || '', personalInfo, template)
252:         
253:         // Set variants directly - formatResumeWithTemplate already handles escaping correctly
254:         setVariantA(formattedA)
255:         setVariantB(formattedB)
256:         
257:         // Calculate ATS score on optimized resume using real API
258:         await calculateRealATSScore(vA || '')
259:         
260:         // Cache the formatted result
261:         localStorage.setItem(cacheKey, JSON.stringify({ variantA: formattedA, variantB: formattedB }))
262:         console.log('[OPTIMIZER] ✅ Variants generated, formatted, and cached')
263:         
264:         hasGeneratedRef.current = true
265:       } else {
266:         throw new Error(result.error || 'Failed to generate variants')
267:       }
268:       
269:     } catch (error) {
270:       console.error('[OPTIMIZER] Generation error:', error)
271:       const errorMsg = `<div style="padding:20px;text-align:center;color:#ef4444;">❌ Generation failed: ${error instanceof Error ? error.message : 'Unknown error'}</div>`
272:       setVariantA(errorMsg)
273:       setVariantB(errorMsg)
274:     } finally {
275:       setLoading(false)
276:       processingRef.current = false
277:     }
278:   }
279: 
280:   // CRITICAL FIX: Only auto-generate once on initial load, not on every template change
281:   useEffect(() => { 
282:     if (resumeText && !hasGeneratedRef.current && !processingRef.current) {
283:       console.log('[OPTIMIZER] Auto-generating initial variants')
284:       generateVariants() 
285:     }
286:     // eslint-disable-next-line react-hooks/exhaustive-deps
287:   }, [resumeText])
288:   
289:   // Template to tone mapping
290:   const templateToToneMap: Record<string, 'professional' | 'conversational' | 'technical'> = {
291:     'modern': 'professional',
292:     'professional': 'professional',
293:     'creative': 'conversational',
294:     'minimal': 'professional',
295:     'executive': 'professional',
296:     'technical': 'technical'
297:   }
298: 
299:   // Manual regeneration when user changes template
300:   const handleTemplateChange = (newTemplate: string) => {
301:     setTemplate(newTemplate)
302:     
303:     // Auto-select matching tone
304:     const matchingTone = templateToToneMap[newTemplate] || 'professional'
305:     setTone(matchingTone)
306:     console.log('[OPTIMIZER] Template changed to', newTemplate, '- auto-selected tone:', matchingTone)
307:     
308:     if (resumeText) {
309:       console.log('[OPTIMIZER] Regenerating variants with new template and tone')
310:       // CRITICAL: Clear cache BEFORE regeneration
311:       localStorage.removeItem('cf:resumeVariants')
312:       console.log('[OPTIMIZER] 🔄 Cache cleared, regenerating variants...')
313:       hasGeneratedRef.current = false // Allow regeneration
314:       setTimeout(() => generateVariants(), 100) // Small delay to ensure state is updated
315:     }
316:   }
317: 
318:   const saveSelection = () => {
319:     try {
320:       const html = selected === 'A' ? variantA : variantB
321:       if (html) localStorage.setItem('cf:selectedResumeHtml', html)
322:     } catch {}
323:   }
324:   
325:   // Extract personal information from resume text
326:   const extractPersonalInfo = (text: string) => {
327:     const emailMatch = text.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/i)
328:     const phoneMatch = text.match(/(\+?1?\s*\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4})/i)
329:     
330:     // Extract location (city, state/province format)
331:     const locationMatch = text.match(/([A-Z][a-z]+(?:\s[A-Z][a-z]+)*),\s*([A-Z]{2})/i)
332:     
333:     // Extract name (assume first line or first capitalized words before contact info)
334:     const lines = text.split('\n').map(l => l.trim()).filter(Boolean)
335:     let name = ''
336:     for (const line of lines.slice(0, 5)) {
337:       if (line.length > 5 && line.length < 50 && !line.includes('@') && !line.match(/\d{3}/) && /^[A-Z]/.test(line)) {
338:         name = line
339:         break
340:       }
341:     }
342:     
343:     return {
344:       name,
345:       email: emailMatch?.[1],
346:       phone: phoneMatch?.[1],
347:       location: locationMatch ? `${locationMatch[1]}, ${locationMatch[2]}` : undefined
348:     }
349:   }
350:   
351:   // ENTERPRISE: Format resume using professional templates V2
352:   const formatResumeWithTemplate = (text: string, personalInfo: { name?: string; email?: string; phone?: string; location?: string }, templateId: string): string => {
353:     if (!text) return '<div style="padding: 40px; text-align: center; color: #666;">No resume content available</div>'
354:     
355:     // Parse plain text into structured data
356:     const resumeData = parseResumeText(text, personalInfo)
357:     
358:     // Get template and generate HTML
359:     const template = getTemplateById(templateId)
360:     const htmlContent = template.generate(resumeData)
361:     
362:     // Wrap in full HTML document with template CSS
363:     const html = `<!DOCTYPE html>
364: <html lang="en">
365: <head>
366:   <meta charset="UTF-8">
367:   <meta name="viewport" content="width=device-width, initial-scale=1.0">
368:   <title>Resume - ${resumeData.personalInfo.fullName}</title>
369:   <style>
370:     * { margin: 0; padding: 0; box-sizing: border-box; }
371:     body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; }
372:     ${template.css}
373:   </style>
374: </head>
375: <body>
376: ${htmlContent}
377: </body>
378: </html>`
379:     
380:     return html
381:   }
382: 
383:   return (
384:     <div className="container mx-auto px-4 sm:px-6 py-4 sm:py-8 max-w-7xl">
385:       <CareerFinderBackButton />
386:       
387:       {/* ATS Score Display - No Personal Info Duplication */}
388:       {atsScore !== null && (
389:         <div className="bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950/30 dark:to-purple-950/30 border border-blue-200/50 dark:border-blue-800/50 rounded-2xl p-6 mb-6 shadow-xl">
390:           <div className="flex items-center justify-between">
391:             <div>
392:               <h2 className="text-2xl font-bold text-foreground mb-2">Resume Optimization</h2>
393:               <p className="text-sm text-muted-foreground">Choose your preferred variant below</p>
394:             </div>
395:             <div className="text-center">
396:               <div className="relative inline-block">
397:                 <svg className="w-28 h-28 transform -rotate-90">
398:                   <circle cx="56" cy="56" r="52" stroke="currentColor" strokeWidth="8" fill="none" className="text-gray-200 dark:text-gray-700" />
399:                   <circle cx="56" cy="56" r="52" stroke="currentColor" strokeWidth="8" fill="none" strokeDasharray={`${2 * Math.PI * 52}`} strokeDashoffset={`${2 * Math.PI * 52 * (1 - atsScore / 100)}`} className={`transition-all duration-1000 ${atsScore >= 80 ? 'text-green-500' : atsScore >= 60 ? 'text-yellow-500' : 'text-red-500'}`} strokeLinecap="round" />
400:                 </svg>
401:                 <div className="absolute inset-0 flex flex-col items-center justify-center">
402:                   <div className="text-3xl font-bold bg-gradient-to-br from-blue-600 to-purple-600 bg-clip-text text-transparent">{atsScore}%</div>
403:                 </div>
404:               </div>
405:               <div className="text-xs text-muted-foreground mt-2 font-medium">ATS Score</div>
406:               <div className={`text-xs font-bold mt-1 px-3 py-1 rounded-full inline-block ${atsScore >= 80 ? 'bg-green-100 text-green-700' : atsScore >= 60 ? 'bg-yellow-100 text-yellow-700' : 'bg-red-100 text-red-700'}`}>
407:                 {atsScore >= 80 ? '✓ Optimized' : atsScore >= 60 ? '⚠ Fair' : '✗ Low'}
408:               </div>
409:             </div>
410:           </div>
411:         </div>
412:       )}
413:       
414:       {/* No Resume Warning */}
415:       {!resumeText && !loading && (
416:         <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-xl p-6 mb-6">
417:           <div className="flex items-start gap-3">
418:             <svg className="w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
419:               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
420:             </svg>
421:             <div>
422:               <h4 className="font-semibold text-yellow-800 dark:text-yellow-200">No Resume Found</h4>
423:               <p className="text-sm text-yellow-700 dark:text-yellow-300 mt-1">
424:                 Please upload a resume first to generate optimized variants.
425:               </p>
426:               <Link 
427:                 href="/career-finder/resume" 
428:                 className="text-sm text-yellow-800 dark:text-yellow-200 underline font-medium mt-2 inline-block hover:text-yellow-900"
429:               >
430:                 ← Go back to upload resume
431:               </Link>
432:             </div>
433:           </div>
434:         </div>
435:       )}
436:       
437:       {/* Template Selection - Modern Card */}
438:       <div className="bg-gradient-to-br from-card to-card/50 border border-border rounded-2xl p-6 mb-6 shadow-lg dark:bg-background">
439:         <div className="flex items-center gap-3 mb-4">
440:           <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-xl">🎨</div>
441:           <div>
442:             <h2 className="text-xl font-bold text-foreground">Choose Resume Template</h2>
443:             <p className="text-xs text-muted-foreground">Select a style that matches your industry</p>
444:           </div>
445:         </div>
446:         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
447:           {TEMPLATES.map(t => (
448:             <button 
449:               key={t.id} 
450:               className={`group relative border rounded-xl p-5 text-left transition-all duration-300 hover:scale-105 hover:shadow-2xl ${template===t.id?'bg-gradient-to-br from-blue-950/50 to-purple-950/50 border-blue-500 shadow-lg shadow-blue-500/20':'border-border hover:border-blue-700 bg-card'}`} 
451:               onClick={()=>handleTemplateChange(t.id)}
452:             >
453:               <div className="flex items-start gap-3 mb-3">
454:                 <div className="text-3xl">{t.icon}</div>
455:                 <div className="flex-1">
456:                   <div className="font-semibold text-foreground text-lg mb-1">{t.name}</div>
457:                   <div className="text-xs text-muted-foreground">{t.description}</div>
458:                 </div>
459:                 {template === t.id && (
460:                   <div className="text-blue-500 text-xl">✓</div>
461:                 )}
462:               </div>
463:               <div className="flex flex-wrap gap-1 mt-2">
464:                 {t.bestFor.map((industry) => (
465:                   <span key={industry} className="text-xs px-2 py-1 bg-blue-900/30 text-blue-300 rounded-full">
466:                     {industry}
467:                   </span>
468:                 ))}
469:               </div>
470:             </button>
471:           ))}
472:         </div>
473:       </div>
474:       <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-xs text-foreground">
475:         <div className="flex items-center gap-2"><input id="humanize" type="checkbox" checked={humanize} onChange={(e)=>setHumanize(e.target.checked)} /><label htmlFor="humanize">Humanize style (reduce AI patterns)</label></div>
476:         <div className="flex items-center gap-2"><input id="highlights" type="checkbox" checked={highlights} onChange={(e)=>setHighlights(e.target.checked)} /><label htmlFor="highlights">Live keyword highlights</label></div>
477:         <div>
478:           <div className="mb-1">Optional: Override Resume Text</div>
479:           <textarea className="w-full border border-border rounded p-2 h-24 bg-background text-foreground" placeholder="Paste to override uploaded resume text for this optimization only" value={overrideText} onChange={(e)=>setOverrideText(e.target.value)} />
480:         </div>
481:         <div>
482:           <div className="mb-1 text-foreground">Tone <span className="text-xs text-muted-foreground">(auto-selected based on template)</span></div>
483:           <select className="w-full border rounded p-2 bg-background text-foreground" value={tone} onChange={(e)=>setTone(e.target.value as 'professional' | 'conversational' | 'technical')}>
484:             <option value="professional">Professional</option>
485:             <option value="conversational">Conversational</option>
486:             <option value="technical">Technical</option>
487:           </select>
488:         </div>
489:       </div>
490:       {/* Resume Variants */}
491:       <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
492:         <div 
493:           className={`bg-card border border-border rounded-xl overflow-hidden cursor-pointer transition-all hover:shadow-lg ${selected==='A'?'ring-2 ring-blue-500 shadow-xl':''}`} 
494:           onClick={()=>setSelected('A')}
495:         >
496:           <div className="flex items-center justify-between p-4 bg-gradient-to-r from-blue-500/10 to-purple-500/10">
497:             <div>
498:               <h3 className="font-bold text-foreground">Variant A</h3>
499:               <p className="text-xs text-muted-foreground">Professional Tone</p>
500:             </div>
501:             <div className="flex items-center gap-2">
502:               {selected === 'A' && (
503:                 <span className="px-3 py-1 bg-blue-500 text-xs rounded-full font-semibold">Selected</span>
504:               )}
505:               <Button variant="outline" size="sm" onClick={(e)=>{ e.stopPropagation(); setEditorHtml(variantA); setExpanded('A') }}>Edit</Button>
506:             </div>
507:           </div>
508:           <div className="bg-card">
509:             {loading && !variantA ? (
510:               <div className="p-6">
511:                 <ResumeSkeleton />
512:               </div>
513:             ) : (
514:               <iframe 
515:                 className="w-full h-96 border-0" 
516:                 srcDoc={variantA || '<div style="padding: 24px; text-align: center; color: #666;">Generating variant...</div>'}
517:                 sandbox="allow-same-origin"
518:                 title="Resume Variant A"
519:               />
520:             )}
521:           </div>
522:         </div>
523:         
524:         <div 
525:           className={`bg-card border border-border rounded-xl overflow-hidden cursor-pointer transition-all hover:shadow-lg ${selected==='B'?'ring-2 ring-blue-500 shadow-xl':''}`} 
526:           onClick={()=>setSelected('B')}
527:         >
528:           <div className="flex items-center justify-between p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10">
529:             <div>
530:               <h3 className="font-bold text-foreground">Variant B</h3>
531:               <p className="text-xs text-muted-foreground">Alternative Tone</p>
532:             </div>
533:             <div className="flex items-center gap-2">
534:               {selected === 'B' && (
535:                 <span className="px-3 py-1 bg-purple-500 text-xs rounded-full font-semibold">Selected</span>
536:               )}
537:               <Button variant="outline" size="sm" onClick={(e)=>{ e.stopPropagation(); setEditorHtml(variantB); setExpanded('B') }}>Edit</Button>
538:             </div>
539:           </div>
540:           <div className="bg-card">
541:             {loading && !variantB ? (
542:               <div className="p-6">
543:                 <ResumeSkeleton />
544:               </div>
545:             ) : (
546:               <iframe 
547:                 className="w-full h-96 border-0" 
548:                 srcDoc={variantB || '<div style="padding: 24px; text-align: center; color: #666;">Generating variant...</div>'}
549:                 sandbox="allow-same-origin"
550:                 title="Resume Variant B"
551:               />
552:             )}
553:           </div>
554:         </div>
555:       </div>
556:       {/* Action Buttons */}
557:       <div className="flex items-center justify-between gap-4 mt-6">
558:         <Button variant="outline" onClick={handleRegenerate} disabled={loading} className="px-6">
559:           {loading ? 'Generating...' : 'Regenerate Variants'}
560:         </Button>
561:         <div className="flex items-center gap-4">
562:           <div className="text-sm text-muted-foreground">
563:             {selected === 'none' ? 'Select a variant to continue' : `Variant ${selected} selected`}
564:           </div>
565:           <Link 
566:             className={`px-8 py-3 rounded-lg font-semibold bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 transition-all shadow-lg hover:shadow-xl ${selected==='none'?'pointer-events-none opacity-50 cursor-not-allowed':''}`}
567:             href="/career-finder/cover-letter" 
568:             onClick={saveSelection}
569:           >
570:             Continue to Cover Letter →
571:           </Link>
572:         </div>
573:       </div>
574: 
575:       {/* Expand/Edit Modal */}
576:       {expanded !== 'none' && (
577:         <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4" onClick={()=>setExpanded('none')}>
578:           <div className="bg-card rounded shadow-xl w-full max-w-5xl p-3 space-y-2" onClick={(e)=>e.stopPropagation()}>
579:             <div className="flex items-center justify-between text-sm">
580:               <div className="font-medium">Edit Variant {expanded}</div>
581:               <div className="flex gap-2">
582:                 <Button size="sm" variant="outline" onClick={()=>setExpanded('none')}>Close</Button>
583:                 <Button size="sm" onClick={()=>{ if(expanded==='A'){ setVariantA(editorHtml) } else { setVariantB(editorHtml) } setExpanded('none') }}>Save</Button>
584:               </div>
585:             </div>
586:             <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
587:               <textarea className="border rounded p-2 h-[70vh] text-xs" value={editorHtml} onChange={(e)=>setEditorHtml(e.target.value)} />
588:               <iframe className="w-full h-[70vh] border-0" srcDoc={editorHtml} />
589:             </div>
590:           </div>
591:         </div>
592:       )}
593:     </div>
594:   )
595: }
</file>

<file path="src/lib/agents/job-discovery-agent.ts">
  1: /**
  2:  * JOB DISCOVERY AGENT
  3:  * Autonomous job search across 15+ boards with Perplexity web_search + Cheerio fallback
  4:  */
  5: 
  6: import { BaseAgent, AgentTask, AgentResult } from './base-agent'
  7: import { COMPREHENSIVE_JOB_BOARDS, getTopJobBoards } from '../comprehensive-data-sources'
  8: import { AdvancedScraper } from '../scrapers/advanced-scraper'
  9: 
 10: export interface JobListing {
 11:   id?: string
 12:   title: string
 13:   company: string
 14:   location: string
 15:   url: string
 16:   summary: string
 17:   salary?: string | null
 18:   postedDate?: string
 19:   source: string
 20:   skills?: string[]
 21:   workType?: 'remote' | 'hybrid' | 'onsite'
 22:   skillMatchPercent?: number
 23:   description?: string
 24: }
 25: 
 26: export class JobDiscoveryAgent extends BaseAgent {
 27:   private scraper: AdvancedScraper
 28: 
 29:   constructor() {
 30:     super('Job Discovery Agent')
 31:     this.scraper = new AdvancedScraper()
 32:   }
 33: 
 34:   async execute(task: AgentTask): Promise<AgentResult<JobListing[]>> {
 35:     const { jobTitle, location, maxResults = 30 } = task.input
 36:     const started = Date.now()
 37: 
 38:     this.log(`🔍 Searching for "${jobTitle}" in "${location}" across 15 job boards...`)
 39: 
 40:     // Get top 10 job boards by priority
 41:     const boards = getTopJobBoards(10)
 42:     const searchUrls = boards.map(b => ({
 43:       name: b.name,
 44:       url: b.searchUrl(jobTitle, location),
 45:       priority: b.priority
 46:     }))
 47: 
 48:     this.log(`📊 Targeting ${searchUrls.length} job boards`)
 49: 
 50:     // Try Perplexity agent first
 51:     try {
 52:       const perplexityJobs = await this.searchWithPerplexity(jobTitle, location, maxResults, searchUrls)
 53:       
 54:       if (perplexityJobs.length >= maxResults * 0.7) {
 55:         this.log(`✅ Perplexity found ${perplexityJobs.length} jobs`)
 56:         return {
 57:           success: true,
 58:           data: perplexityJobs,
 59:           reasoning: 'Perplexity agent successfully searched multiple job boards using web_search',
 60:           confidence: perplexityJobs.length / maxResults,
 61:           sources: perplexityJobs.map(j => ({ title: j.title, url: j.url })),
 62:           duration: Date.now() - started,
 63:           method: 'perplexity'
 64:         }
 65:       }
 66:       
 67:       this.log(`⚠️ Perplexity only found ${perplexityJobs.length} jobs, trying fallback...`)
 68:     } catch (error) {
 69:       this.log(`❌ Perplexity failed: ${(error as Error).message}`, 'error')
 70:     }
 71: 
 72:     // Fallback: Parallel Cheerio scraping
 73:     this.log(`🔄 Falling back to parallel Cheerio scraping...`)
 74:     const cheerioJobs = await this.searchWithCheerio(searchUrls, maxResults)
 75: 
 76:     return {
 77:       success: cheerioJobs.length > 0,
 78:       data: cheerioJobs,
 79:       reasoning: 'Perplexity failed, used parallel Cheerio scraping across multiple boards',
 80:       confidence: cheerioJobs.length / maxResults,
 81:       sources: cheerioJobs.map(j => ({ title: j.title, url: j.url })),
 82:       duration: Date.now() - started,
 83:       method: 'cheerio'
 84:     }
 85:   }
 86: 
 87:   private async searchWithPerplexity(
 88:     jobTitle: string,
 89:     location: string,
 90:     maxResults: number,
 91:     searchUrls: Array<{ name: string; url: string; priority: number }>
 92:   ): Promise<JobListing[]> {
 93:     const prompt = `🔴 AUTONOMOUS JOB SEARCH MISSION 🔴
 94: 
 95: TASK: Find EXACTLY ${maxResults} real job listings for "${jobTitle}" in "${location}"
 96: 
 97: MANDATORY STEPS:
 98: 1. **USE web_search tool** to visit these job board URLs (search in parallel):
 99: ${searchUrls.map((s, i) => `   ${i+1}. ${s.name}: ${s.url}`).join('\n')}
100: 
101: 2. For EACH job found:
102:    - EXTRACT the job title, company, location from search results
103:    - CLICK the job URL and visit the actual posting page
104:    - SCRAPE the COMPLETE job description (minimum 300 characters)
105:    - VERIFY company name is NOT "Confidential" (skip those immediately)
106:    - EXTRACT salary if visible on the page
107:    - GET the posted date
108: 
109: 3. PRIORITIZE:
110:    - Posted within last 14 days (prefer last 7 days)
111:    - Remote or hybrid work options
112:    - Companies with clear names (not "Confidential")
113:    - Jobs with detailed descriptions
114: 
115: CRITICAL RULES:
116: ✅ Return EXACTLY ${maxResults} jobs (or as many as you can find up to ${maxResults})
117: ✅ Each description should be >100 characters (from actual job page content)
118: ✅ REJECT any job with "Confidential" in company name
119: ✅ Include actual clickable URLs to job postings
120: ✅ Extract real salary data if available
121: ✅ Get actual posted dates
122: 
123: OUTPUT FORMAT (strict JSON array):
124: [{
125:   "title": "Exact title from posting",
126:   "company": "Real company name (NOT Confidential)",
127:   "location": "${location}",
128:   "url": "https://actual-job-posting-url.com",
129:   "summary": "Full job description from the actual page (300+ chars)",
130:   "salary": "$XX,XXX - $YY,XXX" or null,
131:   "postedDate": "YYYY-MM-DD",
132:   "source": "indeed|linkedin|glassdoor|jobbank|etc",
133:   "skills": ["skill1", "skill2", "skill3"],
134:   "workType": "remote|hybrid|onsite",
135:   "skillMatchPercent": 75
136: }]
137: 
138: REASONING: After the JSON, explain:
139: - Which job boards you searched
140: - How many jobs you found on each board
141: - Why you selected these specific jobs
142: - Any challenges you encountered
143: 
144: 🚨 I WILL REJECT YOUR RESPONSE IF:
145: - Less than ${Math.floor(maxResults * 0.5)} jobs returned
146: - Any "Confidential" companies included
147: - Any dead/broken URLs
148: - Made up or fake job listings
149: 
150: START YOUR SEARCH NOW using web_search tool!`
151: 
152:     try {
153:       const response = await this.think(prompt, { maxTokens: 12000, temperature: 0.3 })
154:       
155:       // Try multiple JSON extraction methods
156:       let jobs: JobListing[] = []
157:       
158:       // Method 1: Find JSON array with proper brackets
159:       const jsonMatch = response.match(/\[\s*\{[\s\S]*?\}\s*\]/)?.[0]
160:       if (jsonMatch) {
161:         try {
162:           jobs = JSON.parse(jsonMatch)
163:           this.log(`✅ Extracted JSON using method 1`)
164:         } catch (e) {
165:           this.log(`⚠️ Method 1 failed: ${(e as Error).message}`, 'warn')
166:         }
167:       }
168:       
169:       // Method 2: Try to find and fix common JSON errors
170:       if (jobs.length === 0) {
171:         try {
172:           // Remove markdown code blocks
173:           let cleaned = response.replace(/```json\s*/g, '').replace(/```\s*/g, '')
174:           // Find array
175:           const arrayMatch = cleaned.match(/\[\s*\{[\s\S]*?\}\s*\]/)
176:           if (arrayMatch) {
177:             // Fix common issues: trailing commas, missing commas, etc.
178:             let fixed = arrayMatch[0]
179:               .replace(/,\s*}/g, '}')  // Remove trailing commas before }
180:               .replace(/,\s*\]/g, ']')  // Remove trailing commas before ]
181:               .replace(/}\s*{/g, '},{') // Add missing commas between objects
182:             
183:             jobs = JSON.parse(fixed)
184:             this.log(`✅ Extracted JSON using method 2 (with fixes)`)
185:           }
186:         } catch (e) {
187:           this.log(`⚠️ Method 2 failed: ${(e as Error).message}`, 'warn')
188:         }
189:       }
190:       
191:       if (jobs.length === 0) {
192:         this.log('❌ No valid JSON found in Perplexity response', 'error')
193:         throw new Error('No valid JSON found in agent response')
194:       }
195:       
196:       // Validate and clean jobs
197:       const validated = this.validateJobs(jobs, maxResults)
198:       
199:       this.log(`✅ Validated ${validated.length}/${jobs.length} jobs from Perplexity`)
200:       
201:       return validated
202:     } catch (error) {
203:       this.log(`❌ Perplexity search failed: ${(error as Error).message}`, 'error')
204:       throw error
205:     }
206:   }
207: 
208:   private async searchWithCheerio(
209:     searchUrls: Array<{ name: string; url: string; priority: number }>,
210:     maxResults: number
211:   ): Promise<JobListing[]> {
212:     this.log(`🔄 Starting parallel Cheerio scraping of ${searchUrls.length} boards...`)
213:     
214:     // Scrape all boards in parallel
215:     const scrapePromises = searchUrls.map(async ({ name, url }): Promise<JobListing | null> => {
216:       try {
217:         this.log(`📡 Scraping ${name}...`)
218:         const result = await this.scraper.scrape(url)
219:         
220:         if (result.success && result.data) {
221:           this.log(`✅ ${name}: Found data`)
222:           // Convert scraper result to job listing
223:           const job: JobListing = {
224:             title: result.data.title || 'Unknown',
225:             company: result.data.company || 'Unknown',
226:             location: result.data.location || '',
227:             url: url,
228:             summary: result.data.description || '',
229:             salary: result.data.salary || null,
230:             postedDate: result.data.postedDate || new Date().toISOString().split('T')[0],
231:             source: name.toLowerCase().replace(/\s+/g, '-'),
232:             skills: result.data.requirements || [],
233:             workType: 'onsite' as const,
234:             skillMatchPercent: 0
235:           }
236:           return job
237:         }
238:         
239:         this.log(`⚠️ ${name}: No data found`, 'warn')
240:         return null
241:       } catch (error) {
242:         this.log(`❌ ${name}: ${(error as Error).message}`, 'error')
243:         return null
244:       }
245:     })
246: 
247:     const results = await Promise.all(scrapePromises)
248:     const jobs = results.filter((j): j is JobListing => j !== null)
249:     
250:     this.log(`✅ Cheerio scraping complete: ${jobs.length} jobs found`)
251:     
252:     return this.validateJobs(jobs, maxResults)
253:   }
254: 
255:   private validateJobs(jobs: JobListing[], target: number): JobListing[] {
256:     const validated = jobs
257:       .filter(j => {
258:         // FIX: Only reject if completely missing critical fields
259:         if (!j.title || !j.company || !j.url) {
260:           this.log(`🚫 Rejected job missing critical fields: "${j.title || 'NO TITLE'}" at "${j.company || 'NO COMPANY'}"`)
261:           return false
262:         }
263:         
264:         // FIX: Don't reject based on description length - enrich later
265:         // Short descriptions will be enriched by URL scraping
266:         
267:         // FIX: More lenient confidential filter - only reject obvious ones
268:         const company = String(j.company).toLowerCase().trim()
269:         const isConfidential = company.includes('confidential') && company.length < 20
270:         if (isConfidential) {
271:           this.log(`🚫 Rejected confidential job: "${j.title}" at "${j.company}"`)
272:           return false
273:         }
274:         
275:         // FIX: Accept any valid HTTP URL
276:         if (!j.url.startsWith('http')) {
277:           this.log(`🚫 Rejected job with invalid URL: "${j.title}"`)
278:           return false
279:         }
280:         
281:         return true
282:       })
283:       .slice(0, target)
284:     
285:     this.log(`✅ Validation complete: ${validated.length}/${jobs.length} jobs passed`)
286:     
287:     return validated
288:   }
289: }
</file>

<file path="src/lib/auth.ts">
  1: import { NextAuthOptions } from 'next-auth';
  2: import { MongoDBAdapter } from '@auth/mongodb-adapter';
  3: import clientPromise from './mongodb-adapter';
  4: import CredentialsProvider from 'next-auth/providers/credentials';
  5: import GoogleProvider from 'next-auth/providers/google';
  6: import LinkedInProvider from 'next-auth/providers/linkedin';
  7: import bcrypt from 'bcryptjs';
  8: import connectToDatabase from './mongodb';
  9: import User from '@/models/User';
 10: import { validateRedirectURL } from './auth-security';
 11: 
 12: export const authOptions: NextAuthOptions = {
 13:   // Make adapter optional so OAuth can work even if DB is temporarily unreachable
 14:   adapter: process.env.MONGODB_URI ? (MongoDBAdapter(clientPromise) as any) : undefined,
 15:   providers: [
 16:     ...(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET
 17:       ? [
 18:           GoogleProvider({
 19:             clientId: process.env.GOOGLE_CLIENT_ID,
 20:             clientSecret: process.env.GOOGLE_CLIENT_SECRET,
 21:             authorization: {
 22:               params: {
 23:                 access_type: 'offline',
 24:                 prompt: 'consent',
 25:                 scope: 'openid email profile'
 26:               }
 27:             }
 28:           }),
 29:         ]
 30:       : []),
 31:     ...(process.env.LINKEDIN_CLIENT_ID && process.env.LINKEDIN_CLIENT_SECRET
 32:       ? [
 33:           LinkedInProvider({
 34:             clientId: process.env.LINKEDIN_CLIENT_ID,
 35:             clientSecret: process.env.LINKEDIN_CLIENT_SECRET,
 36:             client: {
 37:               token_endpoint_auth_method: 'client_secret_post'
 38:             },
 39:             issuer: 'https://www.linkedin.com',
 40:             wellKnown: 'https://www.linkedin.com/oauth/.well-known/openid-configuration',
 41:             authorization: {
 42:               url: 'https://www.linkedin.com/oauth/v2/authorization',
 43:               params: {
 44:                 scope: 'profile email openid',
 45:                 response_type: 'code'
 46:               }
 47:             },
 48:             token: {
 49:               url: 'https://www.linkedin.com/oauth/v2/accessToken'
 50:             },
 51:             userinfo: {
 52:               url: 'https://api.linkedin.com/v2/userinfo'
 53:             },
 54:             jwks_endpoint: 'https://www.linkedin.com/oauth/openid/jwks',
 55:             profile(profile) {
 56:               return {
 57:                 id: profile.sub,
 58:                 name: profile.name,
 59:                 email: profile.email,
 60:                 image: profile.picture,
 61:                 linkedInProfile: profile
 62:               }
 63:             }
 64:           }),
 65:         ]
 66:       : []),
 67:     CredentialsProvider({
 68:       name: 'credentials',
 69:       credentials: {
 70:         email: { label: 'Email', type: 'email' },
 71:         password: { label: 'Password', type: 'password' }
 72:       },
 73:       async authorize(credentials) {
 74:         if (!credentials?.email || !credentials?.password) {
 75:           return null;
 76:         }
 77: 
 78:         try {
 79:           await connectToDatabase();
 80: 
 81:           const normalizedEmail = credentials.email.toLowerCase().trim();
 82:           const user = await User.findOne({ email: normalizedEmail }).select('+passwordHash');
 83: 
 84:           if (!user) {
 85:             return null;
 86:           }
 87: 
 88:           const ok = user.passwordHash
 89:             ? await bcrypt.compare(credentials.password, user.passwordHash)
 90:             : false
 91: 
 92:           if (!ok) {
 93:             return null
 94:           }
 95: 
 96:           return {
 97:             id: user._id.toString(),
 98:             email: user.email,
 99:             name: user.name,
100:             image: user.image,
101:           };
102:         } catch (error) {
103:           console.error('Auth error:', error);
104:           return null;
105:         }
106:       }
107:     })
108:   ],
109:   session: {
110:     strategy: 'jwt',
111:   },
112:   callbacks: {
113:     async redirect({ url, baseUrl }) {
114:       // First validate the URL for security
115:       const validatedUrl = validateRedirectURL(url, baseUrl)
116:       
117:       // If redirecting after sign-in and URL is the base URL or sign-in page
118:       if (validatedUrl === baseUrl || validatedUrl.includes('/auth/signin')) {
119:         // Check if user needs onboarding (we'll check in the client for now)
120:         // The client will handle the redirect based on session data
121:         return baseUrl
122:       }
123:       
124:       return validatedUrl
125:     },
126:     async signIn({ user }) {
127:       // Check if user has completed onboarding quiz
128:       if (user?.email) {
129:         try {
130:           await connectToDatabase()
131:           const dbUser = await User.findOne({ email: user.email })
132:           
133:           // New users or users who haven't completed onboarding → quiz
134:           if (!dbUser?.profile?.onboardingComplete) {
135:             console.log('[AUTH] Redirecting new user to onboarding quiz:', user.email)
136:             // Note: This doesn't directly redirect, but we'll handle it in the redirect callback
137:             return true
138:           }
139:           
140:           console.log('[AUTH] User has completed onboarding:', user.email)
141:         } catch (error) {
142:           console.error('[AUTH] Error checking onboarding status:', error)
143:         }
144:       }
145:       return true
146:     },
147:     async jwt({ token, user, account, trigger }) {
148:       if (user) {
149:         token.id = (user as any).id;
150:       }
151:       
152:       // Always refresh onboarding status on sign-in or when session is updated
153:       if (user || trigger === 'update') {
154:         try {
155:           await connectToDatabase()
156:           const email = user?.email || token.email
157:           if (email) {
158:             const dbUser = await User.findOne({ email })
159:             token.onboardingComplete = dbUser?.profile?.onboardingComplete || false
160:           }
161:         } catch (error) {
162:           console.error('[AUTH] Error fetching onboarding status:', error)
163:           // Don't override existing value on error
164:           if (token.onboardingComplete === undefined) {
165:             token.onboardingComplete = false
166:           }
167:         }
168:       }
169:       if (account && account.provider === 'google') {
170:         token.googleAccessToken = account.access_token
171:         token.googleRefreshToken = account.refresh_token ?? token.googleRefreshToken
172:         if (account.expires_at) {
173:           token.googleAccessTokenExpires = account.expires_at * 1000
174:         }
175:       }
176: 
177:       // Store LinkedIn access token for API calls
178:       if (account && account.provider === 'linkedin') {
179:         token.linkedInAccessToken = account.access_token
180:         token.linkedInProfile = account.profile
181:         if (account.expires_at) {
182:           token.linkedInAccessTokenExpires = account.expires_at * 1000
183:         }
184:       }
185: 
186:       // Refresh Google access token if expired and refresh token is available
187:       const needsRefresh = token.googleAccessToken && token.googleAccessTokenExpires && Date.now() > (token.googleAccessTokenExpires as number - 60000)
188:       if (needsRefresh && token.googleRefreshToken && process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {
189:         try {
190:           const params = new URLSearchParams({
191:             client_id: process.env.GOOGLE_CLIENT_ID,
192:             client_secret: process.env.GOOGLE_CLIENT_SECRET,
193:             grant_type: 'refresh_token',
194:             refresh_token: token.googleRefreshToken as string
195:           })
196:           const res = await fetch('https://oauth2.googleapis.com/token', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: params })
197:           const json = await res.json() as any
198:           if (res.ok && json.access_token) {
199:             token.googleAccessToken = json.access_token
200:             if (json.expires_in) token.googleAccessTokenExpires = Date.now() + json.expires_in * 1000
201:             if (json.refresh_token) token.googleRefreshToken = json.refresh_token
202:           }
203:         } catch {}
204:       }
205:       return token as any;
206:     },
207:     async session({ session, token }) {
208:       if (token) {
209:         (session as any).user.id = token.id as string;
210:         ;(session as any).user.role = (token as any).role || 'user'
211:         ;(session as any).user.teamId = (token as any).teamId || null
212:         ;(session as any).user.onboardingComplete = token.onboardingComplete || false
213:         // Do not expose tokens to the client; server routes can use next-auth/jwt getToken
214:       }
215:       return session;
216:     },
217:   },
218:   pages: {
219:     signIn: '/auth/signin',
220:   },
221:   secret: process.env.NEXTAUTH_SECRET,
222: };
</file>

<file path="src/app/resume-builder/components/resume-builder.tsx">
   1: 'use client'
   2: 
   3: import { useState, useEffect, useCallback } from 'react'
   4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
   5: import { Button } from '@/components/ui/button'
   6: import { Input } from '@/components/ui/input'
   7: import { Label } from '@/components/ui/label'
   8: import { Textarea } from '@/components/ui/textarea'
   9: import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
  10: import { Badge } from '@/components/ui/badge'
  11: import { getTemplateById } from '@/lib/resume-templates-v2'
  12: import { Alert, AlertDescription } from '@/components/ui/alert'
  13: import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
  14: import {
  15:   Plus,
  16:   Trash2,
  17:   Edit3,
  18:   Save,
  19:   Eye,
  20:   Download,
  21:   Wand2,
  22:   Palette,
  23:   Type,
  24:   Layout,
  25:   CheckCircle,
  26:   AlertTriangle,
  27:   Loader2,
  28:   GripVertical,
  29:   ChevronUp,
  30:   ChevronDown,
  31:   Code,
  32:   Briefcase,
  33:   BookOpen,
  34:   FileText,
  35:   Lightbulb,
  36:   Linkedin
  37: } from 'lucide-react'
  38: import toast from 'react-hot-toast'
  39: import { LinkedInImport } from '@/components/linkedin-import'
  40: import { ResumeAnalyzer } from '@/components/resume-builder/resume-analyzer'
  41: import { ATSScore } from '@/components/resume-builder/ats-score'
  42: import { TemplateSelector } from '@/components/resume-builder/template-selector'
  43: 
  44: interface ResumeData {
  45:   personalInfo: {
  46:     fullName: string
  47:     email: string
  48:     phone: string
  49:     location: string
  50:     linkedin?: string
  51:     website?: string
  52:     summary: string
  53:   }
  54:   experience: Array<{
  55:     id: string
  56:     company: string
  57:     position: string
  58:     location: string
  59:     startDate: string
  60:     endDate: string
  61:     current: boolean
  62:     description: string
  63:     achievements: string[]
  64:     technologies: string[]
  65:   }>
  66:   education: Array<{
  67:     id: string
  68:     institution: string
  69:     degree: string
  70:     field: string
  71:     location: string
  72:     graduationDate: string
  73:     gpa?: string
  74:     honors?: string[]
  75:   }>
  76:   skills: {
  77:     technical: string[]
  78:     soft: string[]
  79:     languages: Array<{ language: string; proficiency: string }>
  80:     certifications: Array<{ name: string; issuer: string; date: string; expiry?: string }>
  81:   }
  82:   projects: Array<{
  83:     id: string
  84:     name: string
  85:     description: string
  86:     technologies: string[]
  87:     url?: string
  88:     github?: string
  89:     startDate: string
  90:     endDate: string
  91:   }>
  92: }
  93: 
  94: interface ResumeBuilderProps {
  95:   userId: string
  96:   mode?: 'full' | 'contentOnly'
  97: }
  98: 
  99: export function ResumeBuilder({ userId, mode = 'full' }: ResumeBuilderProps) {
 100:   const [selectedTemplate, setSelectedTemplate] = useState('modern')
 101:   const [showLinkedInImport, setShowLinkedInImport] = useState(false)
 102:   const [resumeData, setResumeData] = useState<ResumeData>({
 103:     personalInfo: {
 104:       fullName: '',
 105:       email: '',
 106:       phone: '',
 107:       location: '',
 108:       linkedin: '',
 109:       website: '',
 110:       summary: ''
 111:     },
 112:     experience: [],
 113:     education: [],
 114:     skills: {
 115:       technical: [],
 116:       soft: [],
 117:       languages: [],
 118:       certifications: []
 119:     },
 120:     projects: [{
 121:       id: '1',
 122:       name: '',
 123:       description: '',
 124:       technologies: [],
 125:       url: '',
 126:       github: '',
 127:       startDate: '',
 128:       endDate: ''
 129:     }]
 130:   })
 131: 
 132:   const [activeSection, setActiveSection] = useState('personal')
 133:   const [isGenerating, setIsGenerating] = useState(false)
 134:   const [generatedResume, setGeneratedResume] = useState<any>(null)
 135:   const [showPreview, setShowPreview] = useState(false)
 136:   const [jobDescription, setJobDescription] = useState('')
 137:   const [tone, setTone] = useState<'professional'|'conversational'|'technical'>('professional')
 138:   const [showDiff, setShowDiff] = useState(false)
 139:   const [highlightKeywordsOn, setHighlightKeywordsOn] = useState(true)
 140:   const highlightKeywords = (html: string, keywords: string[]) => {
 141:     if (!html || !keywords || keywords.length === 0) return html
 142:     const escaped = keywords.map(k => k.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).filter(Boolean)
 143:     if (escaped.length === 0) return html
 144:     const regex = new RegExp(`\\b(${escaped.join('|')})\\b`, 'gi')
 145:     return html.replace(regex, '<mark class="bg-yellow-200">$1</mark>')
 146:   }
 147: 
 148:   // Load existing resume data if available
 149:   useEffect(() => {
 150:     loadExistingResume()
 151:   }, [])
 152: 
 153:   const loadExistingResume = async () => {
 154:     try {
 155:       const response = await fetch('/api/resume/list')
 156:       if (response.ok) {
 157:         const data = await response.json()
 158:         if (data.resumes && data.resumes.length > 0) {
 159:           // Load the most recent resume
 160:           const recentResume = data.resumes[0]
 161:           // This would parse the existing resume data
 162:           toast.success('Loaded existing resume data')
 163:         }
 164:       }
 165:     } catch (error) {
 166:       console.error('Failed to load existing resume:', error)
 167:     }
 168:   }
 169: 
 170:   const updatePersonalInfo = (field: string, value: string) => {
 171:     setResumeData(prev => ({
 172:       ...prev,
 173:       personalInfo: {
 174:         ...prev.personalInfo,
 175:         [field]: value
 176:       }
 177:     }))
 178:   }
 179: 
 180:   const addExperience = () => {
 181:     const newExp = {
 182:       id: Date.now().toString(),
 183:       company: '',
 184:       position: '',
 185:       location: '',
 186:       startDate: '',
 187:       endDate: '',
 188:       current: false,
 189:       description: '',
 190:       achievements: [],
 191:       technologies: []
 192:     }
 193:     setResumeData(prev => ({
 194:       ...prev,
 195:       experience: [...prev.experience, newExp]
 196:     }))
 197:   }
 198: 
 199:   const updateExperience = (id: string, field: string, value: any) => {
 200:     setResumeData(prev => ({
 201:       ...prev,
 202:       experience: prev.experience.map(exp =>
 203:         exp.id === id ? { ...exp, [field]: value } : exp
 204:       )
 205:     }))
 206:   }
 207: 
 208:   const removeExperience = (id: string) => {
 209:     setResumeData(prev => ({
 210:       ...prev,
 211:       experience: prev.experience.filter(exp => exp.id !== id)
 212:     }))
 213:   }
 214: 
 215:   const moveExperience = (index: number, direction: 'up' | 'down') => {
 216:     setResumeData(prev => {
 217:       const newExp = [...prev.experience]
 218:       if (direction === 'up' && index > 0) {
 219:         [newExp[index], newExp[index - 1]] = [newExp[index - 1], newExp[index]]
 220:       } else if (direction === 'down' && index < newExp.length - 1) {
 221:         [newExp[index], newExp[index + 1]] = [newExp[index + 1], newExp[index]]
 222:       }
 223:       return { ...prev, experience: newExp }
 224:     })
 225:   }
 226: 
 227:   const addEducation = () => {
 228:     const newEdu = {
 229:       id: Date.now().toString(),
 230:       institution: '',
 231:       degree: '',
 232:       field: '',
 233:       location: '',
 234:       graduationDate: '',
 235:       gpa: '',
 236:       honors: []
 237:     }
 238:     setResumeData(prev => ({
 239:       ...prev,
 240:       education: [...prev.education, newEdu]
 241:     }))
 242:   }
 243: 
 244:   const updateEducation = (id: string, field: string, value: any) => {
 245:     setResumeData(prev => ({
 246:       ...prev,
 247:       education: prev.education.map(edu =>
 248:         edu.id === id ? { ...edu, [field]: value } : edu
 249:       )
 250:     }))
 251:   }
 252: 
 253:   const removeEducation = (id: string) => {
 254:     setResumeData(prev => ({
 255:       ...prev,
 256:       education: prev.education.filter(edu => edu.id !== id)
 257:     }))
 258:   }
 259: 
 260:   const addSkill = (category: 'technical' | 'soft', skill: string) => {
 261:     if (!skill.trim()) return
 262: 
 263:     setResumeData(prev => ({
 264:       ...prev,
 265:       skills: {
 266:         ...prev.skills,
 267:         [category]: [...prev.skills[category], skill.trim()]
 268:       }
 269:     }))
 270:   }
 271: 
 272:   const removeSkill = (category: 'technical' | 'soft', skillToRemove: string) => {
 273:     setResumeData(prev => ({
 274:       ...prev,
 275:       skills: {
 276:         ...prev.skills,
 277:         [category]: prev.skills[category].filter(skill => skill !== skillToRemove)
 278:       }
 279:     }))
 280:   }
 281: 
 282:   const addLanguage = () => {
 283:     setResumeData(prev => ({
 284:       ...prev,
 285:       skills: {
 286:         ...prev.skills,
 287:         languages: [...prev.skills.languages, { language: '', proficiency: 'Beginner' }]
 288:       }
 289:     }))
 290:   }
 291: 
 292:   const updateLanguage = (index: number, field: string, value: string) => {
 293:     setResumeData(prev => ({
 294:       ...prev,
 295:       skills: {
 296:         ...prev.skills,
 297:         languages: prev.skills.languages.map((lang, i) =>
 298:           i === index ? { ...lang, [field]: value } : lang
 299:         )
 300:       }
 301:     }))
 302:   }
 303: 
 304:   const removeLanguage = (index: number) => {
 305:     setResumeData(prev => ({
 306:       ...prev,
 307:       skills: {
 308:         ...prev.skills,
 309:         languages: prev.skills.languages.filter((_, i) => i !== index)
 310:       }
 311:     }))
 312:   }
 313: 
 314:   const addProject = () => {
 315:     const newProject = {
 316:       id: Date.now().toString(),
 317:       name: '',
 318:       description: '',
 319:       technologies: [],
 320:       url: '',
 321:       github: '',
 322:       startDate: '',
 323:       endDate: ''
 324:     }
 325:     setResumeData(prev => ({
 326:       ...prev,
 327:       projects: [...prev.projects, newProject]
 328:     }))
 329:   }
 330: 
 331:   const updateProject = (id: string, field: string, value: any) => {
 332:     setResumeData(prev => ({
 333:       ...prev,
 334:       projects: prev.projects.map(project =>
 335:         project.id === id ? { ...project, [field]: value } : project
 336:       )
 337:     }))
 338:   }
 339: 
 340:   const removeProject = (id: string) => {
 341:     setResumeData(prev => ({
 342:       ...prev,
 343:       projects: prev.projects.filter(project => project.id !== id)
 344:     }))
 345:   }
 346: 
 347:   const addProjectTechnology = (projectId: string, technology: string) => {
 348:     if (!technology.trim()) return
 349: 
 350:     setResumeData(prev => ({
 351:       ...prev,
 352:       projects: prev.projects.map(project =>
 353:         project.id === projectId
 354:           ? { ...project, technologies: [...project.technologies, technology.trim()] }
 355:           : project
 356:       )
 357:     }))
 358:   }
 359: 
 360:   const removeProjectTechnology = (projectId: string, technologyToRemove: string) => {
 361:     setResumeData(prev => ({
 362:       ...prev,
 363:       projects: prev.projects.map(project =>
 364:         project.id === projectId
 365:           ? { ...project, technologies: project.technologies.filter(tech => tech !== technologyToRemove) }
 366:           : project
 367:       )
 368:     }))
 369:   }
 370: 
 371:   const generateResume = async () => {
 372:     setIsGenerating(true)
 373:     try {
 374:       const response = await fetch('/api/resume-builder/generate', {
 375:         method: 'POST',
 376:         headers: {
 377:           'Content-Type': 'application/json',
 378:         },
 379:         body: JSON.stringify({
 380:           resumeData,
 381:           template: selectedTemplate,
 382:           targetJob: 'Software Engineer', // This could be dynamic
 383:           industry: 'Technology',
 384:           experienceLevel: 'mid',
 385:           jobDescription: jobDescription && jobDescription.length > 20 ? jobDescription : undefined,
 386:           tone
 387:         }),
 388:       })
 389: 
 390:       if (!response.ok) {
 391:         const errorData = await response.json()
 392:         throw new Error(errorData.error || 'Failed to generate resume')
 393:       }
 394: 
 395:       const data = await response.json()
 396:       setGeneratedResume(data)
 397:       setShowPreview(true)
 398:       toast.success('Resume generated successfully!')
 399:     } catch (error) {
 400:       console.error('Resume generation error:', error)
 401:       toast.error(error instanceof Error ? error.message : 'Failed to generate resume')
 402:     } finally {
 403:       setIsGenerating(false)
 404:     }
 405:   }
 406: 
 407:   const downloadResume = () => {
 408:     if (!generatedResume) return
 409: 
 410:     // Create and download HTML file
 411:     const blob = new Blob([generatedResume.output.html], { type: 'text/html' })
 412:     const url = URL.createObjectURL(blob)
 413:     const a = document.createElement('a')
 414:     a.href = url
 415:     a.download = `${resumeData.personalInfo.fullName.replace(/\s+/g, '_')}_Resume.html`
 416:     document.body.appendChild(a)
 417:     a.click()
 418:     document.body.removeChild(a)
 419:     URL.revokeObjectURL(url)
 420: 
 421:     toast.success('Resume downloaded!')
 422:   }
 423: 
 424:   const downloadPdf = async () => {
 425:     if (!generatedResume) return
 426:     try {
 427:       const resp = await fetch('/api/resume/export/pdf', {
 428:         method: 'POST',
 429:         headers: { 'Content-Type': 'application/json' },
 430:         body: JSON.stringify({
 431:           html: generatedResume.output.html,
 432:           filename: `${resumeData.personalInfo.fullName.replace(/\s+/g, '_')}_Resume.pdf`
 433:         })
 434:       })
 435:       if (!resp.ok) {
 436:         const data = await resp.json().catch(() => ({}))
 437:         throw new Error((data as any).error || 'Failed to export PDF')
 438:       }
 439:       const blob = await resp.blob()
 440:       const url = URL.createObjectURL(blob)
 441:       const a = document.createElement('a')
 442:       a.href = url
 443:       a.download = `${resumeData.personalInfo.fullName.replace(/\s+/g, '_')}_Resume.pdf`
 444:       document.body.appendChild(a)
 445:       a.click()
 446:       document.body.removeChild(a)
 447:       URL.revokeObjectURL(url)
 448:       toast.success('PDF downloaded!')
 449:     } catch (e) {
 450:       toast.error(e instanceof Error ? e.message : 'Failed to export PDF')
 451:     }
 452:   }
 453: 
 454:   const calculateCompleteness = () => {
 455:     let score = 0
 456:     let total = 0
 457: 
 458:     // Personal info (25%)
 459:     total += 25
 460:     if (resumeData.personalInfo.fullName) score += 8
 461:     if (resumeData.personalInfo.email) score += 8
 462:     if (resumeData.personalInfo.phone) score += 5
 463:     if (resumeData.personalInfo.summary) score += 4
 464: 
 465:     // Experience (30%)
 466:     total += 30
 467:     if (resumeData.experience.length > 0) {
 468:       score += Math.min(resumeData.experience.length * 10, 30)
 469:     }
 470: 
 471:     // Education (20%)
 472:     total += 20
 473:     if (resumeData.education.length > 0) {
 474:       score += Math.min(resumeData.education.length * 10, 20)
 475:     }
 476: 
 477:     // Skills (20%)
 478:     total += 20
 479:     const skillCount = resumeData.skills.technical.length + resumeData.skills.soft.length
 480:     score += Math.min(skillCount * 3, 20)
 481: 
 482:     // Projects (10%)
 483:     total += 10
 484:     if (resumeData.projects && resumeData.projects.length > 0) {
 485:       score += Math.min(resumeData.projects.length * 2, 10)
 486:     }
 487: 
 488:     return Math.round((score / total) * 100)
 489:   }
 490: 
 491:   const completeness = calculateCompleteness()
 492: 
 493:   // Render formatted preview using templates
 494:   const buildFormattedHtml = () => {
 495:     const templateObj = getTemplateById(selectedTemplate)
 496:     // Pass the resumeData directly - it already matches the ResumeData interface
 497:     return templateObj.generate(resumeData)
 498:   }
 499: 
 500:   return (
 501:     <div className="space-y-8">
 502:       {/* Template Selection */}
 503:       {mode === 'full' && (
 504:         <TemplateSelector
 505:           selectedTemplate={selectedTemplate}
 506:           onSelectTemplate={(templateId) => {
 507:             setSelectedTemplate(templateId)
 508:             // Auto-select matching tone
 509:             const toneMap: Record<string, 'professional' | 'conversational' | 'technical'> = {
 510:               'modern': 'professional',
 511:               'professional': 'professional',
 512:               'creative': 'conversational',
 513:               'minimal': 'professional',
 514:               'executive': 'professional',
 515:               'tech': 'technical'
 516:             }
 517:             const matchingTone = toneMap[templateId] || 'professional'
 518:             setTone(matchingTone)
 519:             toast.success(`Template changed - Tone set to ${matchingTone}`)
 520:           }}
 521:         />
 522:       )}
 523: 
 524:       {/* Builder Interface */}
 525:       <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
 526:         {/* Form Sections */}
 527:         <div className="lg:col-span-2">
 528:           <Card>
 529:             <CardHeader>
 530:               <div className="flex items-center justify-between">
 531:                 <div>
 532:                   <CardTitle>Resume Content</CardTitle>
 533:                   <CardDescription>
 534:                     Build your resume section by section. Completeness: {completeness}%
 535:                   </CardDescription>
 536:                 </div>
 537:                 <Button
 538:                   onClick={() => setShowLinkedInImport(!showLinkedInImport)}
 539:                   variant="outline"
 540:                   className="flex items-center gap-2"
 541:                 >
 542:                   <Linkedin className="w-4 h-4" />
 543:                   Import from LinkedIn
 544:                 </Button>
 545:               </div>
 546:             </CardHeader>
 547:             <CardContent>
 548:               {/* LinkedIn Import Section */}
 549:               {showLinkedInImport && (
 550:                 <div className="mb-6 p-4 border-2 border-blue-200 rounded-lg bg-blue-50/50">
 551:                   <LinkedInImport
 552:                     mode="structured"
 553:                     onImport={(importedData) => {
 554:                       // Auto-populate resume fields from LinkedIn data
 555:                       if (importedData) {
 556:                         setResumeData(importedData)
 557:                         toast.success('LinkedIn data imported! Resume fields auto-populated.')
 558:                         setShowLinkedInImport(false)
 559:                       }
 560:                     }}
 561:                   />
 562:                 </div>
 563:               )}
 564:               
 565:               {/* Target Job Description (for AI tailoring) */}
 566:               <div className="space-y-2">
 567:                 <Label htmlFor="jobDescription">Target Job Description (for AI tailoring)</Label>
 568:                 <Textarea
 569:                   id="jobDescription"
 570:                   value={jobDescription}
 571:                   onChange={(e) => setJobDescription(e.target.value)}
 572:                   placeholder="Paste the job description here to tailor your resume."
 573:                   rows={6}
 574:                 />
 575:                 <p className="text-xs text-muted-foreground">Optional but recommended. At least 20 characters to enable AI tailoring.</p>
 576:                 <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
 577:                   <div>
 578:                     <Label className="text-xs">Tone guidance <span className="text-muted-foreground">(auto-selected)</span></Label>
 579:                     <Select value={tone} onValueChange={(v)=>setTone(v as any)}>
 580:                       <SelectTrigger><SelectValue /></SelectTrigger>
 581:                       <SelectContent>
 582:                         <SelectItem value="professional">Professional</SelectItem>
 583:                         <SelectItem value="conversational">Conversational</SelectItem>
 584:                         <SelectItem value="technical">Technical</SelectItem>
 585:                       </SelectContent>
 586:                     </Select>
 587:                   </div>
 588:                 </div>
 589:               </div>
 590:               <Tabs value={activeSection} onValueChange={setActiveSection}>
 591:                 <TabsList className="grid w-full grid-cols-5">
 592:                   <TabsTrigger value="personal">Personal</TabsTrigger>
 593:                   <TabsTrigger value="experience">Experience</TabsTrigger>
 594:                   <TabsTrigger value="education">Education</TabsTrigger>
 595:                   <TabsTrigger value="skills">Skills</TabsTrigger>
 596:                   <TabsTrigger value="projects">Projects</TabsTrigger>
 597:                 </TabsList>
 598: 
 599:                 {/* Personal Information */}
 600:                 <TabsContent value="personal" className="space-y-4">
 601:                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 602:                     <div className="space-y-2">
 603:                       <Label htmlFor="fullName">Full Name *</Label>
 604:                       <Input
 605:                         id="fullName"
 606:                         value={resumeData.personalInfo.fullName}
 607:                         onChange={(e) => updatePersonalInfo('fullName', e.target.value)}
 608:                         placeholder="John Doe"
 609:                       />
 610:                     </div>
 611:                     <div className="space-y-2">
 612:                       <Label htmlFor="email">Email *</Label>
 613:                       <Input
 614:                         id="email"
 615:                         type="email"
 616:                         value={resumeData.personalInfo.email}
 617:                         onChange={(e) => updatePersonalInfo('email', e.target.value)}
 618:                         placeholder="john@example.com"
 619:                       />
 620:                     </div>
 621:                     <div className="space-y-2">
 622:                       <Label htmlFor="phone">Phone</Label>
 623:                       <Input
 624:                         id="phone"
 625:                         value={resumeData.personalInfo.phone}
 626:                         onChange={(e) => updatePersonalInfo('phone', e.target.value)}
 627:                         placeholder="(555) 123-4567"
 628:                       />
 629:                     </div>
 630:                     <div className="space-y-2">
 631:                       <Label htmlFor="location">Location</Label>
 632:                       <Input
 633:                         id="location"
 634:                         value={resumeData.personalInfo.location}
 635:                         onChange={(e) => updatePersonalInfo('location', e.target.value)}
 636:                         placeholder="San Francisco, CA"
 637:                       />
 638:                     </div>
 639:                     <div className="space-y-2">
 640:                       <Label htmlFor="linkedin">LinkedIn</Label>
 641:                       <Input
 642:                         id="linkedin"
 643:                         value={resumeData.personalInfo.linkedin}
 644:                         onChange={(e) => updatePersonalInfo('linkedin', e.target.value)}
 645:                         placeholder="https://linkedin.com/in/johndoe"
 646:                       />
 647:                     </div>
 648:                     <div className="space-y-2">
 649:                       <Label htmlFor="website">Website</Label>
 650:                       <Input
 651:                         id="website"
 652:                         value={resumeData.personalInfo.website}
 653:                         onChange={(e) => updatePersonalInfo('website', e.target.value)}
 654:                         placeholder="https://johndoe.com"
 655:                       />
 656:                     </div>
 657:                   </div>
 658:                   <div className="space-y-2">
 659:                     <Label htmlFor="summary">Professional Summary</Label>
 660:                     <Textarea
 661:                       id="summary"
 662:                       value={resumeData.personalInfo.summary}
 663:                       onChange={(e) => updatePersonalInfo('summary', e.target.value)}
 664:                       placeholder="Brief summary of your professional background and goals..."
 665:                       rows={4}
 666:                     />
 667:                   </div>
 668:                 </TabsContent>
 669: 
 670:                 {/* Experience Section */}
 671:                 <TabsContent value="experience" className="space-y-4">
 672:                   <div className="flex justify-between items-center">
 673:                     <h3 className="text-lg font-medium">Work Experience</h3>
 674:                     <Button onClick={addExperience} size="sm">
 675:                       <Plus className="w-4 h-4 mr-2" />
 676:                       Add Experience
 677:                     </Button>
 678:                   </div>
 679: 
 680:                   {resumeData.experience.length === 0 ? (
 681:                     <div className="text-center py-8 text-muted-foreground">
 682:                       <Briefcase className="w-12 h-12 mx-auto mb-4 opacity-50" />
 683:                       <p>No work experience added yet.</p>
 684:                       <Button onClick={addExperience} className="mt-4">
 685:                         Add Your First Experience
 686:                       </Button>
 687:                     </div>
 688:                   ) : (
 689:                     <div className="space-y-4">
 690:                       {resumeData.experience.map((exp, index) => (
 691:                         <Card key={exp.id}>
 692:                           <CardContent className="p-4">
 693:                             <div className="flex items-start justify-between mb-4">
 694:                               <div className="flex items-center gap-2">
 695:                                 <GripVertical className="w-4 h-4 text-muted-foreground" />
 696:                                 <span className="font-medium">Experience {index + 1}</span>
 697:                               </div>
 698:                               <div className="flex gap-2">
 699:                                 <Button
 700:                                   variant="outline"
 701:                                   size="sm"
 702:                                   onClick={() => moveExperience(index, 'up')}
 703:                                   disabled={index === 0}
 704:                                 >
 705:                                   <ChevronUp className="w-4 h-4" />
 706:                                 </Button>
 707:                                 <Button
 708:                                   variant="outline"
 709:                                   size="sm"
 710:                                   onClick={() => moveExperience(index, 'down')}
 711:                                   disabled={index === resumeData.experience.length - 1}
 712:                                 >
 713:                                   <ChevronDown className="w-4 h-4" />
 714:                                 </Button>
 715:                                 <Button
 716:                                   variant="outline"
 717:                                   size="sm"
 718:                                   onClick={() => removeExperience(exp.id)}
 719:                                 >
 720:                                   <Trash2 className="w-4 h-4" />
 721:                                 </Button>
 722:                               </div>
 723:                             </div>
 724: 
 725:                             <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
 726:                               <Input
 727:                                 placeholder="Job Title"
 728:                                 value={exp.position}
 729:                                 onChange={(e) => updateExperience(exp.id, 'position', e.target.value)}
 730:                               />
 731:                               <Input
 732:                                 placeholder="Company Name"
 733:                                 value={exp.company}
 734:                                 onChange={(e) => updateExperience(exp.id, 'company', e.target.value)}
 735:                               />
 736:                               <Input
 737:                                 placeholder="Location"
 738:                                 value={exp.location}
 739:                                 onChange={(e) => updateExperience(exp.id, 'location', e.target.value)}
 740:                               />
 741:                               <div className="flex gap-2">
 742:                                 <Input
 743:                                   type="month"
 744:                                   placeholder="Start Date"
 745:                                   value={exp.startDate}
 746:                                   onChange={(e) => updateExperience(exp.id, 'startDate', e.target.value)}
 747:                                 />
 748:                                 <Input
 749:                                   type="month"
 750:                                   placeholder="End Date"
 751:                                   value={exp.endDate}
 752:                                   onChange={(e) => updateExperience(exp.id, 'endDate', e.target.value)}
 753:                                   disabled={exp.current}
 754:                                 />
 755:                               </div>
 756:                             </div>
 757: 
 758:                             <div className="space-y-2">
 759:                               <Textarea
 760:                                 placeholder="Job description and responsibilities..."
 761:                                 value={exp.description}
 762:                                 onChange={(e) => updateExperience(exp.id, 'description', e.target.value)}
 763:                                 rows={3}
 764:                               />
 765:                               <Input
 766:                                 placeholder="Technologies used (comma-separated)"
 767:                                 value={exp.technologies.join(', ')}
 768:                                 onChange={(e) => updateExperience(exp.id, 'technologies', e.target.value.split(',').map(s => s.trim()))}
 769:                               />
 770:                             </div>
 771:                           </CardContent>
 772:                         </Card>
 773:                       ))}
 774:                     </div>
 775:                   )}
 776:                 </TabsContent>
 777: 
 778:                 {/* Education Section */}
 779:                 <TabsContent value="education" className="space-y-4">
 780:                   <div className="flex justify-between items-center">
 781:                     <h3 className="text-lg font-medium">Education</h3>
 782:                     <Button onClick={addEducation} size="sm">
 783:                       <Plus className="w-4 h-4 mr-2" />
 784:                       Add Education
 785:                     </Button>
 786:                   </div>
 787: 
 788:                   {resumeData.education.length === 0 ? (
 789:                     <div className="text-center py-8 text-muted-foreground">
 790:                       <BookOpen className="w-12 h-12 mx-auto mb-4 opacity-50" />
 791:                       <p>No education added yet.</p>
 792:                       <Button onClick={addEducation} className="mt-4">
 793:                         Add Education
 794:                       </Button>
 795:                     </div>
 796:                   ) : (
 797:                     <div className="space-y-4">
 798:                       {resumeData.education.map((edu) => (
 799:                         <Card key={edu.id}>
 800:                           <CardContent className="p-4">
 801:                             <div className="flex items-start justify-between mb-4">
 802:                               <span className="font-medium">Education</span>
 803:                               <Button
 804:                                 variant="outline"
 805:                                 size="sm"
 806:                                 onClick={() => removeEducation(edu.id)}
 807:                               >
 808:                                 <Trash2 className="w-4 h-4" />
 809:                               </Button>
 810:                             </div>
 811: 
 812:                             <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
 813:                               <Input
 814:                                 placeholder="Institution"
 815:                                 value={edu.institution}
 816:                                 onChange={(e) => updateEducation(edu.id, 'institution', e.target.value)}
 817:                               />
 818:                               <Input
 819:                                 placeholder="Degree"
 820:                                 value={edu.degree}
 821:                                 onChange={(e) => updateEducation(edu.id, 'degree', e.target.value)}
 822:                               />
 823:                               <Input
 824:                                 placeholder="Field of Study"
 825:                                 value={edu.field}
 826:                                 onChange={(e) => updateEducation(edu.id, 'field', e.target.value)}
 827:                               />
 828:                               <Input
 829:                                 placeholder="Location"
 830:                                 value={edu.location}
 831:                                 onChange={(e) => updateEducation(edu.id, 'location', e.target.value)}
 832:                               />
 833:                               <Input
 834:                                 type="month"
 835:                                 placeholder="Graduation Date"
 836:                                 value={edu.graduationDate}
 837:                                 onChange={(e) => updateEducation(edu.id, 'graduationDate', e.target.value)}
 838:                               />
 839:                               <Input
 840:                                 placeholder="GPA (optional)"
 841:                                 value={edu.gpa}
 842:                                 onChange={(e) => updateEducation(edu.id, 'gpa', e.target.value)}
 843:                               />
 844:                             </div>
 845:                           </CardContent>
 846:                         </Card>
 847:                       ))}
 848:                     </div>
 849:                   )}
 850:                 </TabsContent>
 851: 
 852:                 {/* Skills Section */}
 853:                 <TabsContent value="skills" className="space-y-6">
 854:                   {/* Technical Skills */}
 855:                   <div>
 856:                     <h3 className="text-lg font-medium mb-3">Technical Skills</h3>
 857:                     <div className="flex flex-wrap gap-2 mb-3">
 858:                       {resumeData.skills.technical.map((skill, index) => (
 859:                         <Badge key={index} variant="secondary" className="flex items-center gap-1">
 860:                           {skill}
 861:                           <button
 862:                             onClick={() => removeSkill('technical', skill)}
 863:                             className="ml-1 hover:text-red-500"
 864:                           >
 865:                             ×
 866:                           </button>
 867:                         </Badge>
 868:                       ))}
 869:                     </div>
 870:                     <div className="flex gap-2">
 871:                       <Input
 872:                         placeholder="Add technical skill"
 873:                         onKeyPress={(e) => {
 874:                           if (e.key === 'Enter') {
 875:                             addSkill('technical', (e.target as HTMLInputElement).value)
 876:                             ;(e.target as HTMLInputElement).value = ''
 877:                           }
 878:                         }}
 879:                       />
 880:                       <Button
 881:                         onClick={() => {
 882:                           const input = document.querySelector('input[placeholder="Add technical skill"]') as HTMLInputElement
 883:                           if (input?.value) {
 884:                             addSkill('technical', input.value)
 885:                             input.value = ''
 886:                           }
 887:                         }}
 888:                       >
 889:                         Add
 890:                       </Button>
 891:                     </div>
 892:                   </div>
 893: 
 894:                   {/* Soft Skills */}
 895:                   <div>
 896:                     <h3 className="text-lg font-medium mb-3">Soft Skills</h3>
 897:                     <div className="flex flex-wrap gap-2 mb-3">
 898:                       {resumeData.skills.soft.map((skill, index) => (
 899:                         <Badge key={index} variant="outline" className="flex items-center gap-1">
 900:                           {skill}
 901:                           <button
 902:                             onClick={() => removeSkill('soft', skill)}
 903:                             className="ml-1 hover:text-red-500"
 904:                           >
 905:                             ×
 906:                           </button>
 907:                         </Badge>
 908:                       ))}
 909:                     </div>
 910:                     <div className="flex gap-2">
 911:                       <Input
 912:                         placeholder="Add soft skill"
 913:                         onKeyPress={(e) => {
 914:                           if (e.key === 'Enter') {
 915:                             addSkill('soft', (e.target as HTMLInputElement).value)
 916:                             ;(e.target as HTMLInputElement).value = ''
 917:                           }
 918:                         }}
 919:                       />
 920:                       <Button
 921:                         onClick={() => {
 922:                           const input = document.querySelector('input[placeholder="Add soft skill"]') as HTMLInputElement
 923:                           if (input?.value) {
 924:                             addSkill('soft', input.value)
 925:                             input.value = ''
 926:                           }
 927:                         }}
 928:                       >
 929:                         Add
 930:                       </Button>
 931:                     </div>
 932:                   </div>
 933: 
 934:                   {/* Languages */}
 935:                   <div>
 936:                     <div className="flex justify-between items-center mb-3">
 937:                       <h3 className="text-lg font-medium">Languages</h3>
 938:                       <Button onClick={addLanguage} size="sm">
 939:                         <Plus className="w-4 h-4 mr-2" />
 940:                         Add Language
 941:                       </Button>
 942:                     </div>
 943:                     <div className="space-y-2">
 944:                       {resumeData.skills.languages.map((lang, index) => (
 945:                         <div key={index} className="flex gap-2 items-center">
 946:                           <Input
 947:                             placeholder="Language"
 948:                             value={lang.language}
 949:                             onChange={(e) => updateLanguage(index, 'language', e.target.value)}
 950:                             className="flex-1"
 951:                           />
 952:                           <Select
 953:                             value={lang.proficiency}
 954:                             onValueChange={(value) => updateLanguage(index, 'proficiency', value)}
 955:                           >
 956:                             <SelectTrigger className="w-32">
 957:                               <SelectValue />
 958:                             </SelectTrigger>
 959:                             <SelectContent>
 960:                               <SelectItem value="Beginner">Beginner</SelectItem>
 961:                               <SelectItem value="Intermediate">Intermediate</SelectItem>
 962:                               <SelectItem value="Advanced">Advanced</SelectItem>
 963:                               <SelectItem value="Native">Native</SelectItem>
 964:                             </SelectContent>
 965:                           </Select>
 966:                           <Button
 967:                             variant="outline"
 968:                             size="sm"
 969:                             onClick={() => removeLanguage(index)}
 970:                           >
 971:                             <Trash2 className="w-4 h-4" />
 972:                           </Button>
 973:                         </div>
 974:                       ))}
 975:                     </div>
 976:                   </div>
 977:                 </TabsContent>
 978: 
 979:                 {/* Projects Section */}
 980:                 <TabsContent value="projects" className="space-y-4">
 981:                   <div className="flex justify-between items-center">
 982:                     <h3 className="text-lg font-medium">Projects</h3>
 983:                     <Button onClick={addProject} size="sm">
 984:                       <Plus className="w-4 h-4 mr-2" />
 985:                       Add Project
 986:                     </Button>
 987:                   </div>
 988: 
 989:                   {resumeData.projects.length === 0 ? (
 990:                     <div className="text-center py-8 text-muted-foreground">
 991:                       <Briefcase className="w-12 h-12 mx-auto mb-4 opacity-50" />
 992:                       <p>No projects added yet.</p>
 993:                       <Button onClick={addProject} className="mt-4">
 994:                         Add Your First Project
 995:                       </Button>
 996:                     </div>
 997:                   ) : (
 998:                     <div className="space-y-4">
 999:                       {resumeData.projects.map((project, index) => (
1000:                         <Card key={project.id}>
1001:                           <CardContent className="p-4">
1002:                             <div className="flex items-start justify-between mb-4">
1003:                               <div className="flex items-center gap-2">
1004:                                 <Code className="w-4 h-4 text-muted-foreground" />
1005:                                 <span className="font-medium">Project {index + 1}</span>
1006:                               </div>
1007:                               <Button
1008:                                 variant="outline"
1009:                                 size="sm"
1010:                                 onClick={() => removeProject(project.id)}
1011:                               >
1012:                                 <Trash2 className="w-4 h-4" />
1013:                               </Button>
1014:                             </div>
1015: 
1016:                             <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
1017:                               <Input
1018:                                 placeholder="Project Name"
1019:                                 value={project.name}
1020:                                 onChange={(e) => updateProject(project.id, 'name', e.target.value)}
1021:                               />
1022:                               <div className="flex gap-2">
1023:                                 <Input
1024:                                   type="month"
1025:                                   placeholder="Start Date"
1026:                                   value={project.startDate}
1027:                                   onChange={(e) => updateProject(project.id, 'startDate', e.target.value)}
1028:                                 />
1029:                                 <Input
1030:                                   type="month"
1031:                                   placeholder="End Date"
1032:                                   value={project.endDate}
1033:                                   onChange={(e) => updateProject(project.id, 'endDate', e.target.value)}
1034:                                 />
1035:                               </div>
1036:                             </div>
1037: 
1038:                             <div className="space-y-4">
1039:                               <Textarea
1040:                                 placeholder="Project description and your role..."
1041:                                 value={project.description}
1042:                                 onChange={(e) => updateProject(project.id, 'description', e.target.value)}
1043:                                 rows={3}
1044:                               />
1045: 
1046:                               {/* Technologies */}
1047:                               <div>
1048:                                 <Label className="text-sm font-medium">Technologies Used</Label>
1049:                                 <div className="flex flex-wrap gap-1 mt-1 mb-2">
1050:                                   {project.technologies.map((tech, techIndex) => (
1051:                                     <Badge key={techIndex} variant="secondary" className="flex items-center gap-1">
1052:                                       {tech}
1053:                                       <button
1054:                                         onClick={() => removeProjectTechnology(project.id, tech)}
1055:                                         className="ml-1 hover:text-red-500"
1056:                                       >
1057:                                         ×
1058:                                       </button>
1059:                                     </Badge>
1060:                                   ))}
1061:                                 </div>
1062:                                 <div className="flex gap-2">
1063:                                   <Input
1064:                                     placeholder="Add technology"
1065:                                     onKeyPress={(e) => {
1066:                                       if (e.key === 'Enter') {
1067:                                         addProjectTechnology(project.id, (e.target as HTMLInputElement).value)
1068:                                         ;(e.target as HTMLInputElement).value = ''
1069:                                       }
1070:                                     }}
1071:                                   />
1072:                                   <Button
1073:                                     type="button"
1074:                                     size="sm"
1075:                                     variant="outline"
1076:                                     onClick={() => {
1077:                                       const input = document.querySelector(`input[placeholder="Add technology"]`) as HTMLInputElement
1078:                                       if (input?.value) {
1079:                                         addProjectTechnology(project.id, input.value)
1080:                                         input.value = ''
1081:                                       }
1082:                                     }}
1083:                                   >
1084:                                     Add
1085:                                   </Button>
1086:                                 </div>
1087:                               </div>
1088: 
1089:                               {/* Links */}
1090:                               <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
1091:                                 <Input
1092:                                   placeholder="Live Demo URL (optional)"
1093:                                   value={project.url}
1094:                                   onChange={(e) => updateProject(project.id, 'url', e.target.value)}
1095:                                 />
1096:                                 <Input
1097:                                   placeholder="GitHub Repository (optional)"
1098:                                   value={project.github}
1099:                                   onChange={(e) => updateProject(project.id, 'github', e.target.value)}
1100:                                 />
1101:                               </div>
1102:                             </div>
1103:                           </CardContent>
1104:                         </Card>
1105:                       ))}
1106:                     </div>
1107:                   )}
1108:                 </TabsContent>
1109:               </Tabs>
1110:             </CardContent>
1111:           </Card>
1112:         </div>
1113: 
1114:         {/* Preview Panel */}
1115:         {mode === 'full' && (
1116:         <div className="space-y-6">
1117:           {/* Resume Preview */}
1118:           <Card>
1119:             <CardHeader>
1120:               <div className="flex items-center justify-between">
1121:                 <CardTitle className="flex items-center gap-2">
1122:                   <Eye className="h-5 w-5" />
1123:                   Live Preview
1124:                 </CardTitle>
1125:                 {generatedResume && (
1126:                   <Button
1127:                     variant="outline"
1128:                     size="sm"
1129:                     onClick={() => setShowPreview(!showPreview)}
1130:                   >
1131:                     {showPreview ? 'Hide' : 'Show'} Preview
1132:                   </Button>
1133:                 )}
1134:               </div>
1135:             </CardHeader>
1136:             <CardContent>
1137:               {generatedResume && showPreview ? (
1138:                 <div className="border rounded-lg overflow-hidden">
1139:                   {!showDiff ? (
1140:                     <>
1141:                       <div className="flex items-center justify-end p-2 gap-2 text-xs text-muted-foreground">
1142:                         <label className="flex items-center gap-1 cursor-pointer">
1143:                           <input
1144:                             type="checkbox"
1145:                             checked={highlightKeywordsOn}
1146:                             onChange={(e) => setHighlightKeywordsOn(e.target.checked)}
1147:                           />
1148:                           Highlight keywords
1149:                         </label>
1150:                       </div>
1151:                       <iframe srcDoc={buildFormattedHtml()} className="w-full h-96 border-0" title="Resume Preview" />
1152:                     </>
1153:                   ) : (
1154:                     <div className="grid grid-cols-1 md:grid-cols-2">
1155:                       <div className="p-2 border-r">
1156:                         <div className="text-xs text-muted-foreground mb-1">Original (extracted)</div>
1157:                         <pre className="whitespace-pre-wrap text-xs">{resumeData.personalInfo.summary ? `${resumeData.personalInfo.summary}\n\n` : ''}{/* simplified */}{/* show some sections */}</pre>
1158:                       </div>
1159:                       <div className="p-2">
1160:                         <div className="text-xs text-muted-foreground mb-1">Tailored</div>
1161:                         <pre className="whitespace-pre-wrap text-xs">{generatedResume.resumeText || ''}</pre>
1162:                       </div>
1163:                     </div>
1164:                   )}
1165:                 </div>
1166:               ) : (
1167:                 <div className="text-center py-12 text-muted-foreground">
1168:                   <FileText className="w-16 h-16 mx-auto mb-4 opacity-50" />
1169:                   <p>Generate your resume to see the preview</p>
1170:                 </div>
1171:               )}
1172:             </CardContent>
1173:           </Card>
1174: 
1175:           {/* Generate & Download */}
1176:           <Card>
1177:             <CardHeader>
1178:               <CardTitle>Generate Resume</CardTitle>
1179:               <CardDescription>
1180:                 Create your professional resume with AI optimization
1181:               </CardDescription>
1182:             </CardHeader>
1183:             <CardContent className="space-y-4">
1184:               {/* Completeness Indicator */}
1185:               <div className="space-y-2">
1186:                 <div className="flex justify-between text-sm">
1187:                   <span>Resume Completeness</span>
1188:                   <span className={completeness >= 80 ? 'text-green-600' : completeness >= 60 ? 'text-yellow-600' : 'text-red-600'}>
1189:                     {completeness}%
1190:                   </span>
1191:                 </div>
1192:                 <div className="w-full bg-gray-200 rounded-full h-2">
1193:                   <div
1194:                     className={`h-2 rounded-full transition-all duration-500 ${
1195:                       completeness >= 80 ? 'bg-green-500' : completeness >= 60 ? 'bg-yellow-500' : 'bg-red-500'
1196:                     }`}
1197:                     style={{ width: `${completeness}%` }}
1198:                   />
1199:                 </div>
1200:                 {completeness < 80 && (
1201:                   <p className="text-sm text-muted-foreground">
1202:                     Add more details to improve your resume's completeness score.
1203:                   </p>
1204:                 )}
1205:               </div>
1206: 
1207:               <Button
1208:                 onClick={generateResume}
1209:                 disabled={isGenerating || completeness < 30}
1210:                 className="w-full"
1211:               >
1212:                 {isGenerating ? (
1213:                   <>
1214:                     <Loader2 className="mr-2 h-4 w-4 animate-spin" />
1215:                     Generating Resume...
1216:                   </>
1217:                 ) : (
1218:                   <>
1219:                     <Wand2 className="mr-2 h-4 w-4" />
1220:                     Generate Resume
1221:                   </>
1222:                 )}
1223:               </Button>
1224: 
1225:               {generatedResume && (
1226:                 <div className="space-y-2">
1227:                   <Button
1228:                     onClick={() => setShowDiff(!showDiff)}
1229:                     variant="outline"
1230:                     className="w-full"
1231:                   >
1232:                     {showDiff ? 'Hide Diff' : 'Show Original vs Tailored'}
1233:                   </Button>
1234:                   <Button
1235:                     onClick={downloadResume}
1236:                     variant="outline"
1237:                     className="w-full"
1238:                   >
1239:                     <Download className="mr-2 h-4 w-4" />
1240:                     Download HTML
1241:                   </Button>
1242:                   <Button
1243:                     onClick={downloadPdf}
1244:                     className="w-full"
1245:                   >
1246:                     <Download className="mr-2 h-4 w-4" />
1247:                     Download PDF
1248:                   </Button>
1249:                   <p className="text-xs text-muted-foreground text-center">
1250:                     Professional templates with ATS optimization
1251:                   </p>
1252:                 </div>
1253:               )}
1254:             </CardContent>
1255:           </Card>
1256: 
1257:           {/* Resume Analyzer */}
1258:           <ResumeAnalyzer resumeData={resumeData} />
1259: 
1260:           {/* ATS Score */}
1261:           <ATSScore resumeData={resumeData} selectedTemplate={selectedTemplate} />
1262: 
1263:           {/* Tips */}
1264:           <Card>
1265:             <CardHeader>
1266:               <CardTitle className="flex items-center gap-2">
1267:                 <Lightbulb className="h-5 w-5" />
1268:                 Resume Tips
1269:               </CardTitle>
1270:             </CardHeader>
1271:             <CardContent>
1272:               <ul className="space-y-2 text-sm">
1273:                 <li className="flex items-start gap-2">
1274:                   <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
1275:                   Use action verbs and quantify achievements
1276:                 </li>
1277:                 <li className="flex items-start gap-2">
1278:                   <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
1279:                   Keep it to 1-2 pages for most roles
1280:                 </li>
1281:                 <li className="flex items-start gap-2">
1282:                   <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
1283:                   Tailor keywords to the job description
1284:                 </li>
1285:                 <li className="flex items-start gap-2">
1286:                   <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
1287:                   Include relevant certifications and skills
1288:                 </li>
1289:               </ul>
1290:             </CardContent>
1291:           </Card>
1292:         </div>
1293:         )}
1294:       </div>
1295:     </div>
1296:   )
1297: }
</file>

<file path="src/components/resume-upload/index.tsx">
  1: 'use client'
  2: 
  3: import { useState, useCallback } from 'react'
  4: import { useDropzone } from 'react-dropzone'
  5: import { Card, CardContent } from '@/components/ui/card'
  6: import { Button } from '@/components/ui/button'
  7: import { Progress } from '@/components/ui/progress'
  8: import { Badge } from '@/components/ui/badge'
  9: import { Alert, AlertDescription } from '@/components/ui/alert'
 10: import { Upload, FileText, X, CheckCircle, AlertCircle, Loader2, Linkedin } from 'lucide-react'
 11: import { Resume } from '@/types'
 12: import toast from 'react-hot-toast'
 13: import { LinkedInImport } from '@/components/linkedin-import'
 14: 
 15: interface ResumeUploadProps {
 16:   onUploadSuccess: (resume: Resume) => void
 17:   onUploadError: (error: string) => void
 18:   maxFileSize?: number
 19:   acceptedTypes?: string[]
 20:   setKeywords?: (keywords: string[]) => void
 21:   setLocation?: (location: string) => void
 22: }
 23: 
 24: // PHASE 1: Zero-Friction Automation - Background job search and company research
 25: const triggerAutopilotFlow = async (resume: Resume) => {
 26:   try {
 27:     // Starting autopilot background flow
 28:     
 29:     // Update progress indicator
 30:     const updateProgress = (step: string, status: 'loading' | 'complete') => {
 31:       try {
 32:         const progress = JSON.parse(localStorage.getItem('cf:autopilotProgress') || '{}')
 33:         progress[step] = status
 34:         localStorage.setItem('cf:autopilotProgress', JSON.stringify(progress))
 35:       } catch {}
 36:     }
 37:     
 38:     updateProgress('resume', 'complete')
 39:     
 40:     // PHASE 1B: Extract smart profile (salary, work type, preferences)
 41:     try {
 42:       const profileResponse = await fetch('/api/resume/extract-profile', {
 43:         method: 'POST',
 44:         headers: { 'Content-Type': 'application/json' },
 45:         body: JSON.stringify({ resumeText: resume.extractedText })
 46:       })
 47:       
 48:       if (profileResponse.ok) {
 49:         const profileData = await profileResponse.json()
 50:         if (profileData.success && profileData.profile) {
 51:           // Cache profile for later use
 52:           localStorage.setItem('cf:profile', JSON.stringify(profileData.profile))
 53:           // Smart profile extracted and cached
 54:         }
 55:       }
 56:     } catch (err) {
 57:       console.warn('[AUTOPILOT] Profile extraction failed (non-critical):', err)
 58:     }
 59:     
 60:     updateProgress('search', 'loading')
 61:     
 62:     // Get location and keywords from localStorage (already extracted by processResumeSignals)
 63:     const location = localStorage.getItem('cf:location') || ''
 64:     const keywords = localStorage.getItem('cf:keywords') || ''
 65:     
 66:     console.log('[AUTOPILOT] Using location:', location, 'keywords:', keywords)
 67:     
 68:     // Searching with extracted location and keywords
 69:     
 70:     // Trigger background job search (fire and forget for speed)
 71:     fetch('/api/jobs/search', {
 72:       method: 'POST',
 73:       headers: { 'Content-Type': 'application/json' },
 74:       body: JSON.stringify({
 75:         keywords,
 76:         location,
 77:         useResumeMatching: true,
 78:         limit: 50
 79:       })
 80:     }).then(async (response) => {
 81:       if (response.ok) {
 82:         const jobsData = await response.json()
 83:         const jobs = jobsData.data || []
 84:         
 85:         // Jobs found and cached
 86:         
 87:         // Cache results
 88:         localStorage.setItem('cf:jobResults', JSON.stringify(jobs))
 89:         localStorage.setItem('cf:jobResultsTime', Date.now().toString())
 90:         
 91:         updateProgress('search', 'complete')
 92:         updateProgress('research', 'loading')
 93:         
 94:         // Pre-research top 10 companies (fire and forget)
 95:         const topJobs = jobs.slice(0, 10)
 96:         let researchedCount = 0
 97:         
 98:         topJobs.forEach((job: { company: string; title: string }) => {
 99:           fetch('/api/v2/company/deep-research', {
100:             method: 'POST',
101:             headers: { 'Content-Type': 'application/json' },
102:             body: JSON.stringify({ 
103:               companyName: job.company,
104:               targetRole: job.title 
105:             })
106:           }).then(() => {
107:             researchedCount++
108:             // Company research completed
109:             
110:             if (researchedCount === topJobs.length) {
111:               updateProgress('research', 'complete')
112:               updateProgress('optimize', 'loading')
113:               
114:               // Show success notification
115:               toast.success(`🚀 Autopilot complete! Found ${jobs.length} jobs and researched ${topJobs.length} companies.`)
116:               
117:               updateProgress('optimize', 'complete')
118:             }
119:           }).catch(err => {
120:             console.warn('[AUTOPILOT] Company research failed for', job.company, err)
121:           })
122:         })
123:         
124:         // If no jobs to research, mark as complete
125:         if (topJobs.length === 0) {
126:           updateProgress('research', 'complete')
127:           updateProgress('optimize', 'complete')
128:         }
129:       } else {
130:         console.error('[AUTOPILOT] Job search failed:', response.status)
131:         updateProgress('search', 'complete')
132:         updateProgress('research', 'complete')
133:         updateProgress('optimize', 'complete')
134:       }
135:     }).catch(error => {
136:       console.error('[AUTOPILOT] Error:', error)
137:       // Don't show error to user, just log it
138:     })
139:     
140:   } catch (error) {
141:     console.error('[AUTOPILOT] Flow error:', error)
142:     // Silent fail - don't interrupt user experience
143:   }
144: }
145: 
146: export function ResumeUpload({
147:   onUploadSuccess,
148:   onUploadError,
149:   maxFileSize = 10 * 1024 * 1024 // 10MB
150: }: ResumeUploadProps) {
151:   const [uploadedFile, setUploadedFile] = useState<File | null>(null)
152:   const [uploadedResume, setUploadedResume] = useState<Resume | null>(null)
153:   const [isUploading, setIsUploading] = useState(false)
154:   const [uploadProgress, setUploadProgress] = useState(0)
155:   const [error, setError] = useState<string | null>(null)
156:   const [pastedText, setPastedText] = useState('')
157:   const [activeTab, setActiveTab] = useState<'upload' | 'linkedin' | 'paste'>('upload')
158: 
159:   const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: any[]) => {
160:     // Handle rejected files
161:     if (rejectedFiles.length > 0) {
162:       const rejection = rejectedFiles[0]
163:       if (rejection.errors.some((error: any) => error.code === 'file-too-large')) {
164:         setError(`File size too large. Maximum size is ${maxFileSize / (1024 * 1024)}MB.`)
165:       } else if (rejection.errors.some((error: any) => error.code === 'file-invalid-type')) {
166:         setError('Only PDF files are accepted.')
167:       } else {
168:         setError('File upload failed. Please try again.')
169:       }
170:       return
171:     }
172: 
173:     // Handle accepted files
174:     if (acceptedFiles.length > 0) {
175:       const file = acceptedFiles[0]
176:       setUploadedFile(file)
177:       setError(null)
178:       setUploadedResume(null)
179:     }
180:   }, [maxFileSize])
181: 
182:   const { getRootProps, getInputProps, isDragActive } = useDropzone({
183:     onDrop,
184:     accept: {
185:       'application/pdf': ['.pdf']
186:     },
187:     maxFiles: 1,
188:     maxSize: maxFileSize,
189:     disabled: isUploading
190:   })
191: 
192:   const processResumeSignals = async (resumeText: string) => {
193:     try {
194:       const response = await fetch('/api/resume/signals', {
195:         method: 'POST',
196:         headers: { 'Content-Type': 'application/json' },
197:         body: JSON.stringify({
198:           resumeText,
199:           maxKeywords: 50,
200:           locationHint: 'Edmonton, AB'
201:         })
202:       })
203: 
204:       if (!response.ok) {
205:         const error = await response.json()
206:         console.error('Signals API error:', error)
207:         throw new Error(error.error || 'Signal extraction failed')
208:       }
209: 
210:       const data = await response.json()
211: 
212:       // Signals extracted successfully
213: 
214:       // Note: Keywords and location are stored in the resume record
215:       // and can be retrieved from the API response if needed
216: 
217:       return data
218: 
219:     } catch (error) {
220:       console.error('Signal processing failed:', error)
221:       toast.error('Could not extract keywords/location. Using defaults.')
222:       throw error
223:     }
224:   }
225: 
226:   const handleUpload = async () => {
227:     if (!uploadedFile && !pastedText.trim()) {
228:       setError('Please upload a PDF or paste your resume text')
229:       toast.error('Please upload a PDF or paste your resume text')
230:       return
231:     }
232: 
233:     setIsUploading(true)
234:     setUploadProgress(0)
235:     setError(null)
236: 
237:     try {
238:       // Simulate progress for better UX
239:       const progressInterval = setInterval(() => {
240:         setUploadProgress(prev => {
241:           if (prev >= 90) {
242:             clearInterval(progressInterval)
243:             return 90
244:           }
245:           return prev + 10
246:         })
247:       }, 200)
248: 
249:       const formData = new FormData()
250:       if (uploadedFile) {
251:         formData.append('file', uploadedFile) // API expects 'file' not 'resume'
252:         // Uploading file
253:       }
254:       if (pastedText.trim()) {
255:         formData.append('pastedText', pastedText.trim())
256:         // Uploading pasted text
257:       }
258: 
259:       const response = await fetch('/api/resume/upload', {
260:         method: 'POST',
261:         body: formData,
262:       })
263: 
264:       clearInterval(progressInterval)
265:       setUploadProgress(100)
266: 
267:       if (!response.ok) {
268:         // Try to read json error with details, otherwise use status text
269:         let message = 'Upload failed'
270:         let details = ''
271:         try { 
272:           const errorData = await response.json()
273:           console.error('❌ Upload API error:', errorData)
274:           message = (errorData as { error?: string }).error || message 
275:           details = (errorData as { details?: string }).details || ''
276:         } catch {}
277:         throw new Error(details ? `${message}: ${details}` : message)
278:       }
279: 
280:       const data = await response.json()
281:       // Upload successful
282:       const resume = data.resume
283: 
284:       if (!resume) {
285:         throw new Error('Resume upload failed - no resume data returned')
286:       }
287:       
288:       // Store resume in localStorage for immediate use even if DB save fails
289:       try {
290:         localStorage.setItem('uploadedResume', JSON.stringify(resume))
291:         localStorage.setItem('cf:resume', JSON.stringify(resume))
292:       } catch (e) {
293:         console.warn('Could not store resume in localStorage:', e)
294:       }
295: 
296:       setUploadedResume(resume)
297:       toast.success('Resume uploaded successfully!')
298:       
299:       // CRITICAL: Call onUploadSuccess callback
300:       onUploadSuccess(resume)
301:       
302:       // AUTO-SEARCH: Extract keywords and trigger job search
303:       if (resume.extractedText) {
304:         // Auto-triggering job search
305:         try {
306:           const signalsResp = await fetch('/api/resume/extract-signals', {
307:             method: 'POST',
308:             headers: { 'Content-Type': 'application/json' },
309:             body: JSON.stringify({ resume: resume.extractedText }) // CRITICAL FIX: Use correct endpoint and param name
310:           })
311:           
312:           if (signalsResp.ok) {
313:             const signals = await signalsResp.json()
314:             // Signals extracted
315:             
316:             // PERPLEXITY FIX: Standardized localStorage keys as per audit
317:             localStorage.setItem('cf:location', signals.location || '') // Standard key for location
318:             localStorage.setItem('cf:keywords', signals.keywords?.slice(0, 30).join(', ') || '') // FIXED: Use 30 keywords for better job matches
319:             localStorage.setItem('cf:resume', JSON.stringify(resume)) // Full resume object
320:             localStorage.setItem('cf:autopilotReady', '1') // Autopilot flag
321:             
322:             // Location stored in localStorage
323:             
324:             toast.success('Keywords extracted! Redirecting to job search...')
325:             
326:             // Redirect to search page - CRITICAL: Only pass location if extracted
327:             setTimeout(() => {
328:               const keywords = signals.keywords?.slice(0, 30).join(', ') || ''
329:               const location = signals.location || ''
330:               const url = location 
331:                 ? `/career-finder/search?auto=true&keywords=${encodeURIComponent(keywords)}&location=${encodeURIComponent(location)}`
332:                 : `/career-finder/search?auto=true&keywords=${encodeURIComponent(keywords)}`
333:               window.location.href = url
334:             }, 1000)
335:           }
336:         } catch (err) {
337:           console.error('Auto-search setup failed:', err)
338:           // Don't block the upload success
339:         }
340:       }
341: 
342:       setUploadedResume(resume)
343:       // Enable Autopilot preference best-effort
344:       try { await fetch('/api/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ preferences: { autopilot: { useResume: true } } }) }) } catch {}
345: 
346:       // Auto-suggest jobs using resume content
347:       try {
348:         const resp = await fetch('/api/v2/jobs/suggest', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ resumeId: resume._id }) })
349:         const js = await resp.json()
350:         if (resp.ok && js.success) {
351:           try { localStorage.setItem('jobs:lastSuggest', JSON.stringify(js)) } catch {}
352:           toast.success(`Found ${js.results?.length || 0} local jobs for ${js.titles?.join(', ')}`)
353:         }
354:       } catch {}
355: 
356:       // Mark Autopilot ready and move wizard
357:       try { localStorage.setItem('cf:autopilotReady', '1'); localStorage.setItem('cf:progress', JSON.stringify({ step: 2, total: 7 })) } catch {}
358:       toast.success('Resume uploaded successfully! Autopilot enabled.')
359: 
360:       // Extract signals after upload
361:       if (data.extractedText && data.extractedText.length > 50) {
362:         await processResumeSignals(data.extractedText)
363:       }
364: 
365:       // PHASE 1: Zero-Friction Automation - Trigger full autopilot flow
366:       if (data.extractedText && data.extractedText.length > 100) {
367:         triggerAutopilotFlow(data)
368:       }
369: 
370:     } catch (error) {
371:       console.error('Upload error:', error)
372:       const errorMessage = error instanceof Error ? error.message : 'Upload failed'
373:       setError(errorMessage)
374:       onUploadError(errorMessage)
375:       toast.error(errorMessage)
376:     } finally {
377:       setIsUploading(false)
378:       setTimeout(() => setUploadProgress(0), 1000)
379:     }
380:   }
381: 
382:   const clearFile = () => {
383:     setUploadedFile(null)
384:     setUploadedResume(null)
385:     setError(null)
386:     setUploadProgress(0)
387:     setPastedText('')
388:   }
389: 
390:   const formatFileSize = (bytes: number) => {
391:     if (bytes === 0) return '0 Bytes'
392:     const k = 1024
393:     const sizes = ['Bytes', 'KB', 'MB', 'GB']
394:     const i = Math.floor(Math.log(bytes) / Math.log(k))
395:     return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
396:   }
397: 
398:   return (
399:     <Card className="w-full border-0 shadow-none">
400:       <CardContent className="space-y-4 p-0">
401:         {/* Tab Navigation */}
402:         <div className="flex gap-2 mb-6">
403:           <button
404:             onClick={() => setActiveTab('upload')}
405:             className={`flex-1 py-3 px-4 rounded-xl font-semibold transition-all ${
406:               activeTab === 'upload'
407:                 ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
408:                 : 'bg-muted text-muted-foreground hover:bg-muted/80'
409:             }`}
410:           >
411:             <Upload className="inline-block w-4 h-4 mr-2" />
412:             Upload PDF
413:           </button>
414:           <button
415:             onClick={() => setActiveTab('linkedin')}
416:             className={`flex-1 py-3 px-4 rounded-xl font-semibold transition-all ${
417:               activeTab === 'linkedin'
418:                 ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
419:                 : 'bg-muted text-muted-foreground hover:bg-muted/80'
420:             }`}
421:           >
422:             <Linkedin className="inline-block w-4 h-4 mr-2" />
423:             LinkedIn
424:           </button>
425:           <button
426:             onClick={() => setActiveTab('paste')}
427:             className={`flex-1 py-3 px-4 rounded-xl font-semibold transition-all ${
428:               activeTab === 'paste'
429:                 ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
430:                 : 'bg-muted text-muted-foreground hover:bg-muted/80'
431:             }`}
432:           >
433:             <FileText className="inline-block w-4 h-4 mr-2" />
434:             Paste Text
435:           </button>
436:         </div>
437: 
438:         {/* Error Alert - VIBRANT */}
439:         {error && (
440:           <div className="bg-gradient-to-r from-red-50 to-pink-50 border-2 border-red-200 rounded-2xl p-4">
441:             <div className="flex items-center gap-3">
442:               <div className="w-10 h-10 bg-red-500 rounded-full flex items-center justify-center flex-shrink-0">
443:                 <AlertCircle className="h-5 w-5 text-white" />
444:               </div>
445:               <p className="text-red-800 font-semibold">{error}</p>
446:             </div>
447:           </div>
448:         )}
449: 
450:         {/* Upload Tab */}
451:         {activeTab === 'upload' && !uploadedFile && (
452:           <div
453:             {...getRootProps()}
454:             className={`border-3 border-dashed rounded-2xl p-10 text-center cursor-pointer transition-all duration-300 ${
455:               isDragActive
456:                 ? 'border-primary gradient-card-blue scale-105'
457:                 : 'border-border hover:border-primary hover:gradient-card-blue'
458:             } ${isUploading ? 'pointer-events-none opacity-50' : ''}`}
459:           >
460:             <input {...getInputProps()} />
461:             <div className="w-20 h-20 mx-auto mb-6 gradient-primary rounded-3xl flex items-center justify-center shadow-lg">
462:               <Upload className="h-10 w-10 text-white" />
463:             </div>
464:             <div className="space-y-3">
465:               <p className="text-2xl font-bold text-foreground">
466:                 {isDragActive ? '📥 Drop it here!' : '📄 Upload Your Resume'}
467:               </p>
468:               <p className="text-base text-muted-foreground font-medium">
469:                 Drag and drop your PDF file here, or click to browse
470:               </p>
471:               <p className="text-sm text-muted-foreground">
472:                 Maximum file size: {maxFileSize / (1024 * 1024)}MB
473:               </p>
474:             </div>
475:           </div>
476:         )}
477: 
478:         {/* LinkedIn Tab */}
479:         {activeTab === 'linkedin' && !uploadedFile && (
480:           <LinkedInImport
481:             onImport={async (resumeData) => {
482:               try {
483:                 // The LinkedIn import component already uploaded to the API
484:                 // Just trigger the success callback
485:                 onUploadSuccess(resumeData)
486:                 setUploadedResume(resumeData)
487:                 toast.success('LinkedIn resume imported successfully!')
488:               } catch (error) {
489:                 console.error('LinkedIn import error:', error)
490:                 toast.error('Failed to import LinkedIn resume')
491:               }
492:             }}
493:           />
494:         )}
495: 
496:         {/* Paste Tab */}
497:         {activeTab === 'paste' && !uploadedFile && (
498:           <div className="space-y-4">
499:             <div className="space-y-3">
500:               <label className="text-base font-bold text-foreground flex items-center gap-2">
501:                 ✍️ Paste your resume text
502:               </label>
503:               <textarea
504:                 className="modern-input w-full h-64 resize-none text-sm"
505:                 placeholder="Paste your resume here if your PDF is scanned or not readable..."
506:                 value={pastedText}
507:                 onChange={(e) => setPastedText(e.target.value)}
508:                 disabled={isUploading}
509:               />
510:               <div className="text-sm text-muted-foreground font-medium">✨ We&apos;ll create a resume record from your pasted text.</div>
511:             </div>
512: 
513:             {pastedText.trim() && !isUploading && !uploadedResume && (
514:               <div className="flex gap-3">
515:                 <Button 
516:                   onClick={handleUpload} 
517:                   className="flex-1 btn-gradient py-4 text-base border-0"
518:                 >
519:                   🚀 Upload Resume
520:                 </Button>
521:                 <Button variant="outline" onClick={clearFile}>
522:                   Cancel
523:                 </Button>
524:               </div>
525:             )}
526: 
527:             {isUploading && (
528:               <div className="flex gap-3">
529:                 <Button disabled className="flex-1 bg-gradient-to-r from-gray-400 to-gray-500 text-white font-bold py-4 rounded-2xl border-0 text-base">
530:                   <Loader2 className="mr-2 h-5 w-5 animate-spin" />
531:                   Uploading...
532:                 </Button>
533:                 <Button variant="outline" disabled className="border-2 border-gray-300 rounded-2xl font-bold py-4 px-6 opacity-50">
534:                   Cancel
535:                 </Button>
536:               </div>
537:             )}
538:           </div>
539:         )}
540: 
541:         {/* File Preview (shown when file is uploaded) */}
542:         {uploadedFile && (
543:           /* File Preview */
544:           <div className="border rounded-lg p-4">
545:             <div className="flex items-center justify-between">
546:               <div className="flex items-center gap-3">
547:                 <FileText className="h-8 w-8 text-red-500" />
548:                 <div>
549:                   <p className="font-medium text-foreground">{uploadedFile.name}</p>
550:                   <p className="text-sm text-muted-foreground">{formatFileSize(uploadedFile.size)}</p>
551:                 </div>
552:               </div>
553:               {!isUploading && !uploadedResume && (
554:                 <Button variant="ghost" size="sm" onClick={clearFile}>
555:                   <X className="h-4 w-4" />
556:                 </Button>
557:               )}
558:             </div>
559: 
560:             {/* Upload Progress */}
561:             {isUploading && (
562:               <div className="mt-4">
563:                 <div className="flex items-center justify-between mb-2">
564:                   <span className="text-sm font-medium">Uploading...</span>
565:                   <span className="text-sm text-muted-foreground">{uploadProgress}%</span>
566:                 </div>
567:                 <Progress value={uploadProgress} className="w-full" />
568:               </div>
569:             )}
570: 
571:             {/* Paste Text Area */}
572:             <div className="space-y-2">
573:               <label className="text-sm font-medium text-foreground">Or paste your resume text</label>
574:               <textarea
575:                 className="w-full border rounded-md p-3 text-sm h-40"
576:                 placeholder="Paste your resume here if your PDF is scanned or not readable..."
577:                 value={pastedText}
578:                 onChange={(e) => setPastedText(e.target.value)}
579:                 disabled={isUploading}
580:               />
581:               <div className="text-xs text-muted-foreground">We’ll create a resume record from your pasted text.</div>
582:             </div>
583: 
584:             {/* Upload Button */}
585:             {(uploadedFile || pastedText.trim()) && !isUploading && !uploadedResume && (
586:               <div className="mt-4 flex gap-2">
587:                 <Button onClick={handleUpload} className="flex-1">
588:                   Upload Resume
589:                 </Button>
590:                 <Button variant="outline" onClick={clearFile}>
591:                   Cancel
592:                 </Button>
593:               </div>
594:             )}
595: 
596:             {uploadedFile && isUploading && (
597:               <div className="mt-4 flex gap-2">
598:                 <Button disabled className="flex-1">
599:                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
600:                   Uploading...
601:                 </Button>
602:                 <Button variant="outline" disabled>
603:                   Cancel
604:                 </Button>
605:               </div>
606:             )}
607:           </div>
608:         )}
609: 
610:         {/* Success State */}
611:         {uploadedResume && (
612:           <Alert>
613:             <CheckCircle className="h-4 w-4" />
614:             <AlertDescription className="flex items-center justify-between">
615:               <span>Resume uploaded and processed successfully!</span>
616:               <div className="flex items-center gap-2">
617:                 <a href="/jobs" className="text-xs px-2 py-1 border rounded">Find Jobs Near Me</a>
618:                 <Badge variant="secondary">Ready for customization</Badge>
619:               </div>
620:             </AlertDescription>
621:           </Alert>
622:         )}
623: 
624:         {/* Resume Preview */}
625:         {uploadedResume && (
626:           <div className="bg-card rounded-lg p-4">
627:             <h4 className="font-medium text-foreground mb-2">Resume Preview</h4>
628:             <div className="text-sm text-muted-foreground max-h-32 overflow-y-auto">
629:               {uploadedResume.extractedText.substring(0, 300)}...
630:             </div>
631:             <div className="mt-2 text-xs text-muted-foreground">
632:               {uploadedResume.extractedText.split(' ').length} words extracted
633:             </div>
634:           </div>
635:         )}
636:       </CardContent>
637:     </Card>
638:   )
639: }
</file>

<file path="src/components/linkedin-import.tsx">
  1: 'use client'
  2: 
  3: import { useState, useEffect } from 'react'
  4: import { signIn, useSession } from 'next-auth/react'
  5: import { Upload, Linkedin, FileText, AlertCircle, CheckCircle2, Loader2 } from 'lucide-react'
  6: 
  7: interface LinkedInImportProps {
  8:   onImport: (resumeData: any) => void
  9:   className?: string
 10:   mode?: 'structured' | 'upload' // structured = return ResumeData, upload = create Resume record
 11: }
 12: 
 13: export function LinkedInImport({ onImport, className = '', mode = 'upload' }: LinkedInImportProps) {
 14:   const { data: session, status } = useSession()
 15:   const [isProcessing, setIsProcessing] = useState(false)
 16:   const [error, setError] = useState<string | null>(null)
 17:   const [success, setSuccess] = useState(false)
 18:   const [linkedInUrl, setLinkedInUrl] = useState('')
 19:   const [autoFetched, setAutoFetched] = useState(false)
 20: 
 21:   // Auto-fetch profile if user is already signed in
 22:   useEffect(() => {
 23:     if (session?.user && status === 'authenticated' && !autoFetched) {
 24:       console.log('[LINKEDIN_IMPORT] Auto-fetching profile for authenticated user, mode:', mode)
 25:       setAutoFetched(true)
 26:       fetchLinkedInProfile()
 27:     } else {
 28:       console.log('[LINKEDIN_IMPORT] Not auto-fetching:', { 
 29:         hasSession: !!session?.user, 
 30:         status, 
 31:         autoFetched,
 32:         mode 
 33:       })
 34:     }
 35:   }, [session, status, autoFetched, mode])
 36: 
 37:   const fetchLinkedInProfile = async () => {
 38:     setIsProcessing(true)
 39:     setError(null)
 40: 
 41:     try {
 42:       const response = await fetch('/api/linkedin/profile')
 43:       
 44:       if (!response.ok) {
 45:         const errorData = await response.json()
 46:         throw new Error(errorData.error || 'Failed to fetch LinkedIn profile')
 47:       }
 48: 
 49:       const data = await response.json()
 50:       console.log('[LINKEDIN_IMPORT] Profile API response:', { success: data.success, hasResumeData: !!data.resumeData })
 51:       
 52:       if (data.success && data.resumeData) {
 53:         if (mode === 'structured') {
 54:           // Resume Builder mode: Return structured data directly
 55:           console.log('[LINKEDIN_IMPORT] Structured mode - returning resumeData:', data.resumeData)
 56:           setSuccess(true)
 57:           onImport(data.resumeData)
 58:           setTimeout(() => setSuccess(false), 3000)
 59:         } else {
 60:           // Career Finder mode: Convert to text and upload to create Resume record
 61:           const resumeText = convertResumeDataToText(data.resumeData)
 62:           
 63:           // Upload to API to create Resume record
 64:           const uploadResponse = await fetch('/api/resume/upload', {
 65:             method: 'POST',
 66:             headers: { 'Content-Type': 'application/json' },
 67:             body: JSON.stringify({
 68:               text: resumeText,
 69:               source: 'linkedin-oauth',
 70:               fileName: 'LinkedIn Profile.txt'
 71:             })
 72:           })
 73: 
 74:           if (!uploadResponse.ok) {
 75:             throw new Error('Failed to save LinkedIn profile')
 76:           }
 77: 
 78:           const uploadData = await uploadResponse.json()
 79:           
 80:           setSuccess(true)
 81:           onImport(uploadData.resume) // Pass the Resume object with _id and extractedText
 82:           setTimeout(() => setSuccess(false), 3000)
 83:         }
 84:       } else {
 85:         throw new Error(data.error || 'Failed to import LinkedIn data')
 86:       }
 87:     } catch (err) {
 88:       const errorMessage = (err as Error).message
 89:       console.error('[LINKEDIN_IMPORT] Error:', errorMessage)
 90:       // Show all errors in structured mode (resume builder needs to know)
 91:       if (mode === 'structured' || !errorMessage.includes('No LinkedIn access token')) {
 92:         setError(errorMessage)
 93:       }
 94:     } finally {
 95:       setIsProcessing(false)
 96:     }
 97:   }
 98: 
 99:   // Helper function to convert structured resume data to text
100:   const convertResumeDataToText = (resumeData: any): string => {
101:     let text = ''
102:     
103:     // Personal Info
104:     if (resumeData.personalInfo) {
105:       const p = resumeData.personalInfo
106:       text += `${p.fullName || ''}\n`
107:       if (p.email) text += `${p.email}\n`
108:       if (p.phone) text += `${p.phone}\n`
109:       if (p.location) text += `${p.location}\n`
110:       if (p.linkedin) text += `${p.linkedin}\n`
111:       if (p.website) text += `${p.website}\n`
112:       if (p.summary) text += `\n${p.summary}\n`
113:       text += '\n'
114:     }
115:     
116:     // Experience
117:     if (resumeData.experience && resumeData.experience.length > 0) {
118:       text += 'WORK EXPERIENCE\n\n'
119:       resumeData.experience.forEach((exp: any) => {
120:         text += `${exp.position || ''}\n`
121:         text += `${exp.company || ''} | ${exp.location || ''}\n`
122:         text += `${exp.startDate || ''} - ${exp.endDate || 'Present'}\n`
123:         if (exp.description) text += `${exp.description}\n`
124:         if (exp.achievements && exp.achievements.length > 0) {
125:           exp.achievements.forEach((ach: string) => text += `• ${ach}\n`)
126:         }
127:         text += '\n'
128:       })
129:     }
130:     
131:     // Education
132:     if (resumeData.education && resumeData.education.length > 0) {
133:       text += 'EDUCATION\n\n'
134:       resumeData.education.forEach((edu: any) => {
135:         text += `${edu.degree || ''} in ${edu.field || ''}\n`
136:         text += `${edu.institution || ''}\n`
137:         if (edu.graduationDate) text += `Graduated: ${edu.graduationDate}\n`
138:         if (edu.gpa) text += `GPA: ${edu.gpa}\n`
139:         text += '\n'
140:       })
141:     }
142:     
143:     // Skills
144:     if (resumeData.skills) {
145:       const allSkills = [
146:         ...(resumeData.skills.technical || []),
147:         ...(resumeData.skills.soft || [])
148:       ]
149:       if (allSkills.length > 0) {
150:         text += 'SKILLS\n\n'
151:         text += allSkills.join(', ') + '\n\n'
152:       }
153:     }
154:     
155:     return text
156:   }
157: 
158:   const handleLinkedInOAuth = async () => {
159:     setIsProcessing(true)
160:     setError(null)
161: 
162:     try {
163:       // If already signed in, just fetch the profile
164:       if (session?.user) {
165:         await fetchLinkedInProfile()
166:         return
167:       }
168: 
169:       // Sign in with LinkedIn OAuth (will redirect)
170:       await signIn('linkedin', {
171:         callbackUrl: window.location.href
172:       })
173: 
174:       // Note: After redirect, the page will reload and auto-fetch will handle profile import
175:     } catch (err) {
176:       setError((err as Error).message)
177:       setIsProcessing(false)
178:     }
179:   }
180: 
181:   const handleLinkedInPDFUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
182:     const file = e.target.files?.[0]
183:     if (!file) return
184: 
185:     if (file.type !== 'application/pdf') {
186:       setError('Please upload a PDF file from LinkedIn')
187:       return
188:     }
189: 
190:     setIsProcessing(true)
191:     setError(null)
192:     setSuccess(false)
193: 
194:     try {
195:       // Upload and parse LinkedIn PDF
196:       const formData = new FormData()
197:       formData.append('file', file)
198:       formData.append('source', 'linkedin')
199: 
200:       const response = await fetch('/api/resume/parse-linkedin', {
201:         method: 'POST',
202:         body: formData
203:       })
204: 
205:       if (!response.ok) {
206:         throw new Error('Failed to parse LinkedIn resume')
207:       }
208: 
209:       const data = await response.json()
210:       
211:       if (data.success) {
212:         setSuccess(true)
213:         onImport(data.resumeData)
214:         
215:         // Clear success message after 3 seconds
216:         setTimeout(() => setSuccess(false), 3000)
217:       } else {
218:         throw new Error(data.error || 'Failed to import LinkedIn data')
219:       }
220:     } catch (err) {
221:       setError((err as Error).message)
222:     } finally {
223:       setIsProcessing(false)
224:     }
225:   }
226: 
227:   const handleLinkedInUrlScrape = async () => {
228:     if (!linkedInUrl.trim()) {
229:       setError('Please enter your LinkedIn profile URL')
230:       return
231:     }
232: 
233:     // Validate LinkedIn URL
234:     if (!linkedInUrl.includes('linkedin.com/in/')) {
235:       setError('Please enter a valid LinkedIn profile URL (e.g., https://linkedin.com/in/yourname)')
236:       return
237:     }
238: 
239:     setIsProcessing(true)
240:     setError(null)
241:     setSuccess(false)
242: 
243:     try {
244:       const response = await fetch('/api/resume/scrape-linkedin', {
245:         method: 'POST',
246:         headers: { 'Content-Type': 'application/json' },
247:         body: JSON.stringify({ url: linkedInUrl })
248:       })
249: 
250:       if (!response.ok) {
251:         const errorData = await response.json()
252:         throw new Error(errorData.error || 'Failed to scrape LinkedIn profile')
253:       }
254: 
255:       const data = await response.json()
256:       
257:       if (data.success) {
258:         setSuccess(true)
259:         onImport(data.resumeData)
260:         setTimeout(() => setSuccess(false), 3000)
261:       } else {
262:         throw new Error(data.error || 'Failed to import LinkedIn data')
263:       }
264:     } catch (err) {
265:       setError((err as Error).message)
266:     } finally {
267:       setIsProcessing(false)
268:     }
269:   }
270: 
271:   const handleLinkedInTextPaste = async (text: string) => {
272:     if (!text.trim()) return
273: 
274:     setIsProcessing(true)
275:     setError(null)
276:     setSuccess(false)
277: 
278:     try {
279:       const response = await fetch('/api/resume/parse-linkedin', {
280:         method: 'POST',
281:         headers: { 'Content-Type': 'application/json' },
282:         body: JSON.stringify({ text, source: 'linkedin' })
283:       })
284: 
285:       if (!response.ok) {
286:         throw new Error('Failed to parse LinkedIn data')
287:       }
288: 
289:       const data = await response.json()
290:       
291:       if (data.success) {
292:         setSuccess(true)
293:         onImport(data.resumeData)
294:         setTimeout(() => setSuccess(false), 3000)
295:       } else {
296:         throw new Error(data.error || 'Failed to import LinkedIn data')
297:       }
298:     } catch (err) {
299:       setError((err as Error).message)
300:     } finally {
301:       setIsProcessing(false)
302:     }
303:   }
304: 
305:   return (
306:     <div className={`space-y-4 ${className}`}>
307:       {/* Status Indicator */}
308:       {session?.user && (
309:         <div className="bg-green-50 border border-green-200 rounded-lg p-3 text-sm">
310:           <div className="flex items-center gap-2">
311:             <CheckCircle2 className="w-4 h-4 text-green-600" />
312:             <span className="text-green-900 font-medium">
313:               {isProcessing ? 'Importing LinkedIn profile...' : 'Signed in - Click button below to import'}
314:             </span>
315:           </div>
316:         </div>
317:       )}
318: 
319:       {/* LinkedIn OAuth Sign-In - PRIMARY METHOD */}
320:       <div className="border-2 border-solid border-blue-600 rounded-lg p-6 bg-gradient-to-br from-blue-50 to-blue-100 shadow-lg">
321:         <div className="flex items-center gap-3 mb-4">
322:           <Linkedin className="w-10 h-10 text-blue-600" />
323:           <div>
324:             <h3 className="font-bold text-foreground text-xl">Sign in with LinkedIn</h3>
325:             <p className="text-sm text-gray-600">Securely connect your LinkedIn account to automatically import your profile</p>
326:           </div>
327:         </div>
328:         <button
329:           onClick={handleLinkedInOAuth}
330:           disabled={isProcessing}
331:           className="w-full px-6 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-bold text-lg flex items-center justify-center gap-3 shadow-md hover:shadow-xl"
332:         >
333:           {isProcessing ? (
334:             <>
335:               <Loader2 className="w-6 h-6 animate-spin" />
336:               Connecting to LinkedIn...
337:             </>
338:           ) : (
339:             <>
340:               <Linkedin className="w-6 h-6" />
341:               Sign in with LinkedIn
342:             </>
343:           )}
344:         </button>
345:         <div className="mt-3 text-xs text-gray-500 text-center">
346:           ✓ Secure OAuth 2.0 • ✓ Official LinkedIn API • ✓ No password sharing
347:         </div>
348:       </div>
349: 
350:       {/* Divider */}
351:       <div className="relative">
352:         <div className="absolute inset-0 flex items-center">
353:           <div className="w-full border-t border-border"></div>
354:         </div>
355:         <div className="relative flex justify-center text-sm">
356:           <span className="px-2 bg-card text-gray-500">Or use alternative methods</span>
357:         </div>
358:       </div>
359: 
360:       {/* LinkedIn PDF Upload - ALTERNATIVE */}
361:       <div className="border-2 border-dashed border-border rounded-lg p-6 bg-muted/50 hover:bg-muted transition-colors">
362:         <label className="cursor-pointer block">
363:           <input
364:             type="file"
365:             accept=".pdf"
366:             onChange={handleLinkedInPDFUpload}
367:             disabled={isProcessing}
368:             className="hidden"
369:           />
370:           <div className="flex flex-col items-center gap-3">
371:             <div className="flex items-center gap-2">
372:               <Linkedin className="w-6 h-6 text-blue-600" />
373:               <Upload className="w-5 h-5 text-blue-600" />
374:             </div>
375:             <div className="text-center">
376:               <p className="font-semibold text-foreground">Import from LinkedIn PDF</p>
377:               <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
378:                 Go to LinkedIn → Your Profile → Resources → Download Profile as PDF
379:               </p>
380:             </div>
381:             <div className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-semibold">
382:               {isProcessing ? (
383:                 <div className="flex items-center gap-2">
384:                   <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
385:                   Processing...
386:                 </div>
387:               ) : (
388:                 'Click to Choose LinkedIn PDF'
389:               )}
390:             </div>
391:           </div>
392:         </label>
393:       </div>
394: 
395:       {/* LinkedIn Text Paste */}
396:       <div className="border-2 border-dashed border-border rounded-lg p-6 bg-muted/50">
397:         <div className="flex items-start gap-3">
398:           <FileText className="w-5 h-5 text-gray-600 mt-1" />
399:           <div className="flex-1">
400:             <p className="font-semibold text-foreground mb-2">Or paste LinkedIn profile text</p>
401:             <textarea
402:               placeholder="Copy your LinkedIn profile text and paste it here..."
403:               className="w-full h-32 px-3 py-2 border border-border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none bg-background text-foreground"
404:               disabled={isProcessing}
405:               onPaste={(e) => {
406:                 e.preventDefault()
407:                 const text = e.clipboardData.getData('text')
408:                 handleLinkedInTextPaste(text)
409:               }}
410:             />
411:             <p className="text-xs text-gray-500 mt-2">
412:               Tip: Go to your LinkedIn profile, select all text (Ctrl+A), copy (Ctrl+C), then paste here
413:             </p>
414:           </div>
415:         </div>
416:       </div>
417: 
418:       {/* Instructions */}
419:       <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
420:         <h4 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
421:           <Linkedin className="w-4 h-4" />
422:           How to export from LinkedIn:
423:         </h4>
424:         <ol className="text-sm text-blue-800 space-y-1 list-decimal list-inside">
425:           <li>Go to your LinkedIn profile</li>
426:           <li>Click "More" → "Save to PDF"</li>
427:           <li>Upload the downloaded PDF here</li>
428:         </ol>
429:       </div>
430: 
431:       {/* Status Messages */}
432:       {error && (
433:         <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start gap-3">
434:           <AlertCircle className="w-5 h-5 text-red-600 mt-0.5" />
435:           <div>
436:             <p className="font-semibold text-red-900">Import Failed</p>
437:             <p className="text-sm text-red-700">{error}</p>
438:           </div>
439:         </div>
440:       )}
441: 
442:       {success && (
443:         <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
444:           <CheckCircle2 className="w-5 h-5 text-green-600 mt-0.5" />
445:           <div>
446:             <p className="font-semibold text-green-900">LinkedIn Data Imported!</p>
447:             <p className="text-sm text-green-700">Your profile has been successfully imported</p>
448:           </div>
449:         </div>
450:       )}
451:     </div>
452:   )
453: }
</file>

<file path="src/app/api/jobs/search/route.ts">
  1: /**
  2:  * Unified Job Search API - Enhanced with PerplexityIntelligenceService
  3:  * 
  4:  * NOW USES: PerplexityIntelligenceService for comprehensive 25+ board coverage
  5:  * 
  6:  * Features:
  7:  * - 10 Canadian job boards (Job Bank, Jobboom, Workopolis, etc.)
  8:  * - 35+ Canadian ATS companies (Shopify, Wealthsimple, etc.)
  9:  * - Global boards (LinkedIn, Indeed, Glassdoor)
 10:  * - Resume skill matching with scoring
 11:  * - Smart Canadian prioritization
 12:  * - Built-in caching (24hr TTL)
 13:  */
 14: 
 15: import { NextRequest, NextResponse } from 'next/server'
 16: import { getServerSession } from 'next-auth/next'
 17: import { authOptions } from '@/lib/auth'
 18: import { dbService } from '@/lib/database'
 19: import { PerplexityIntelligenceService } from '@/lib/perplexity-intelligence'
 20: import { isRateLimited } from '@/lib/rate-limit'
 21: import Resume from '@/models/Resume'
 22: import { jobSearchCacheService } from '@/services/job-search-cache.service'
 23: 
 24: export const dynamic = 'force-dynamic'
 25: export const runtime = 'nodejs'
 26: export const maxDuration = 60 // Increased to handle Perplexity API calls which can take longer
 27: 
 28: interface JobSearchRequest {
 29:   keywords: string
 30:   location?: string
 31:   sources?: string[] // Specific boards to search
 32:   limit?: number
 33:   remote?: boolean
 34:   salaryMin?: number
 35:   experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive'
 36:   workType?: 'remote' | 'hybrid' | 'onsite' | 'any'
 37:   useResumeMatching?: boolean // Use resume for skill matching
 38:   targetIndustry?: string // ENTERPRISE: User wants to switch industries (e.g., "Technology", "Healthcare")
 39:   disableIndustryWeighting?: boolean // ENTERPRISE: User wants equal weight across all industries
 40: }
 41: 
 42: export async function POST(request: NextRequest) {
 43:   try {
 44:     const session = await getServerSession(authOptions)
 45:     if (!session?.user?.id) {
 46:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
 47:     }
 48: 
 49:     // Rate limiting
 50:     if (await isRateLimited(session.user.id, 'job-search')) {
 51:       return NextResponse.json({ 
 52:         error: 'Too many searches. Please wait a moment.' 
 53:       }, { status: 429 })
 54:     }
 55: 
 56:     await dbService.connect()
 57: 
 58:     const body: JobSearchRequest = await request.json()
 59:     let { 
 60:       keywords, 
 61:       location, // CRITICAL FIX: No default - use exact value from frontend
 62:       sources, 
 63:       limit = 25, 
 64:       remote,
 65:       salaryMin,
 66:       experienceLevel,
 67:       workType,
 68:       targetIndustry, // ENTERPRISE: User wants to switch industries
 69:       disableIndustryWeighting // ENTERPRISE: Disable tenure-based weighting
 70:     } = body
 71:     
 72:     console.log('═══════════════════════════════════════════════════════')
 73:     console.log('[JOB_SEARCH] NEW SEARCH REQUEST')
 74:     console.log('═══════════════════════════════════════════════════════')
 75:     console.log('[JOB_SEARCH] Job Title:', keywords)
 76:     console.log('[JOB_SEARCH] Location:', location || 'UNDEFINED')
 77:     console.log('[JOB_SEARCH] Max Results:', limit)
 78:     console.log('[JOB_SEARCH] Work Type:', workType || 'any')
 79:     console.log('─────────────────────────────────────────────────────────')
 80: 
 81:     // CRITICAL: Require real location - no 'Canada' fallback
 82:     if (!location || location.trim().length < 2) {
 83:       console.error('[JOB_SEARCH] ❌ MISSING LOCATION')
 84:       return NextResponse.json({
 85:         success: false,
 86:         error: 'Location is required for job search',
 87:         suggestion: 'Upload your resume to extract location, or manually enter city and state/province',
 88:         errorCode: 'LOCATION_REQUIRED'
 89:       }, { status: 400 })
 90:     }
 91: 
 92:     // Reject "Canada" or "United States" (too broad)
 93:     const normalizedLocation = location.toLowerCase().trim()
 94:     if (['canada', 'united states', 'usa', 'us'].includes(normalizedLocation)) {
 95:       console.error('[JOB_SEARCH] ❌ LOCATION TOO BROAD:', location)
 96:       return NextResponse.json({
 97:         success: false,
 98:         error: 'Location is too broad. Please specify a city and state/province.',
 99:         example: 'Examples: Seattle, WA or Toronto, ON or Vancouver, BC',
100:         errorCode: 'LOCATION_TOO_BROAD'
101:       }, { status: 400 })
102:     }
103: 
104:     console.log('[JOB_SEARCH] ✅ Location valid, proceeding with search...')
105: 
106:     let useResumeMatching = body.useResumeMatching || false
107: 
108:     if (!keywords || keywords.trim().length < 2) {
109:       return NextResponse.json({ 
110:         error: 'Please provide valid search keywords' 
111:       }, { status: 400 })
112:     }
113: 
114:     console.log(`[JOB_SEARCH] User ${session.user.id} searching: "${keywords}" in ${location} (Resume matching: ${useResumeMatching})`)
115: 
116:     // CRITICAL FIX: Get cached jobs but ALWAYS search for new ones too
117:     const cachedJobs = await jobSearchCacheService.getCachedJobs({
118:       keywords,
119:       location,
120:       workType,
121:       experienceLevel,
122:       userId: session.user.id
123:     });
124: 
125:     if (cachedJobs && cachedJobs.length > 0) {
126:       console.log(`[JOB_CACHE] Found ${cachedJobs.length} cached jobs - will merge with NEW search results`);
127:     } else {
128:       console.log(`[JOB_CACHE] No cached jobs found - performing fresh search`);
129:     }
130: 
131:     let result: any
132:     let jobs: any[] = []
133:     let metadata: any = {}
134: 
135:     // Option 1: Resume-matched search with INDUSTRY WEIGHTING (most powerful)
136:     if (useResumeMatching) {
137:       try {
138:         // Get user's resume
139:         const resumeDoc = await Resume.findOne({ userId: session.user.id })
140:           .sort({ createdAt: -1 })
141:           .lean()
142:         
143:         const extractedText = (resumeDoc as any)?.extractedText
144:         
145:         if (!resumeDoc || !extractedText) {
146:           return NextResponse.json({ 
147:             error: 'Please upload a resume first to use resume matching' 
148:           }, { status: 400 })
149:         }
150: 
151:         console.log(`[JOB_SEARCH] Using resume matching with industry weighting for user ${session.user.id}`)
152: 
153:         // ENTERPRISE FEATURE: Analyze career timeline for industry weighting
154:         let careerTimeline: any = null
155:         let effectivePrimaryIndustry: any = null
156:         
157:         // Skip industry analysis if user explicitly disabled it
158:         if (!disableIndustryWeighting) {
159:           try {
160:             careerTimeline = await PerplexityIntelligenceService.extractCareerTimeline(extractedText)
161:             console.log('[JOB_SEARCH] Career timeline:', {
162:               industries: careerTimeline.industries.map((i: any) => `${i.name} (${i.percentage}%)`).join(', '),
163:               primaryIndustry: careerTimeline.industries[0]?.name,
164:               hasTransition: !!careerTimeline.careerTransition,
165:               userTargetIndustry: targetIndustry || 'none'
166:             })
167:             
168:             // ENTERPRISE: User wants to switch industries
169:             if (targetIndustry && targetIndustry.trim()) {
170:               // Find matching industry from resume, or create synthetic one
171:               const normalizedTarget = targetIndustry.toLowerCase()
172:               effectivePrimaryIndustry = careerTimeline.industries.find(
173:                 (i: any) => i?.name?.toLowerCase()?.includes(normalizedTarget)
174:               )
175: 
176:               if (effectivePrimaryIndustry) {
177:                 console.log(`[JOB_SEARCH] User targeting industry switch TO: ${effectivePrimaryIndustry.name}`)
178:               } else {
179:                 // User wants to switch to an entirely new industry not in their history
180:                 console.log(`[JOB_SEARCH] User switching to NEW industry: ${targetIndustry} (no prior experience)`)
181:                 effectivePrimaryIndustry = {
182:                   name: targetIndustry,
183:                   yearsOfExperience: 0,
184:                   keywords: keywords
185:                     .split(',')
186:                     .map((k: string) => k.trim())
187:                     .filter(Boolean),
188:                   percentage: 100 // Give full weight to target industry
189:                 }
190:               }
191:             } else {
192:               // Default: Use longest-tenure industry
193:               effectivePrimaryIndustry = careerTimeline.industries[0]
194:             }
195:           } catch (err) {
196:             console.warn('[JOB_SEARCH] Career timeline extraction failed, using standard matching:', err)
197:           }
198:         } else {
199:           console.log('[JOB_SEARCH] Industry weighting DISABLED by user preference')
200:         }
201: 
202:         // CRITICAL: If career timeline exists, weight job results by industry tenure
203:         let industryWeightedLimit = limit
204:         
205:         if (effectivePrimaryIndustry) {
206:           // Calculate industry-based search distribution
207:           const primaryPercentage = effectivePrimaryIndustry.percentage / 100
208:           
209:           // EXAMPLE: If 95% of career in Transportation, show 95% transport jobs
210:           // UNLESS user is switching industries, then show 100% of new industry
211:           industryWeightedLimit = targetIndustry ? limit : Math.ceil(limit * primaryPercentage)
212:           
213:           console.log('[JOB_SEARCH] Industry weighting:', {
214:             primaryIndustry: effectivePrimaryIndustry.name,
215:             primaryPercentage: `${effectivePrimaryIndustry.percentage}%`,
216:             adjustedLimit: industryWeightedLimit,
217:             keywords: effectivePrimaryIndustry.keywords?.join(', ') || 'none',
218:             isSwitching: !!targetIndustry
219:           })
220:           
221:           // Boost keywords from target/primary industry (if available)
222:           if (effectivePrimaryIndustry.keywords && Array.isArray(effectivePrimaryIndustry.keywords) && effectivePrimaryIndustry.keywords.length > 0) {
223:             const industryKeywords = effectivePrimaryIndustry.keywords.slice(0, 5).join(', ')
224:             keywords = `${industryKeywords}, ${keywords}`.trim()
225:           }
226:         }
227: 
228:         // Use NEW AGENT SYSTEM with Perplexity web_search + Cheerio fallback
229:         console.log('[JOB_SEARCH] 🤖 Calling NEW AGENT SYSTEM jobListingsWithAgent with:', {
230:           jobTitle: keywords,
231:           location,
232:           workType: workType || (remote ? 'remote' : 'any'),
233:           maxResults: limit
234:         })
235:         
236:         result = await PerplexityIntelligenceService.jobListingsWithAgent(
237:           keywords,
238:           location,
239:           {
240:             maxResults: limit,
241:             workType: workType || (remote ? 'remote' : 'any')
242:           }
243:         )
244: 
245:         console.log('[JOB_SEARCH] 🤖 Agent system result:', {
246:           success: result.success,
247:           dataType: typeof result.data,
248:           dataIsArray: Array.isArray(result.data),
249:           dataLength: Array.isArray(result.data) ? result.data.length : 0,
250:           cached: result.cached,
251:           method: result.metadata?.method,
252:           confidence: result.metadata?.confidence,
253:           error: result.metadata?.error
254:         })
255: 
256:         jobs = result.data
257:         
258:         // POST-PROCESSING: Re-rank jobs by industry tenure (respects user preferences)
259:         if (effectivePrimaryIndustry && !disableIndustryWeighting && effectivePrimaryIndustry.keywords && Array.isArray(effectivePrimaryIndustry.keywords)) {
260:           const primaryKeywords = effectivePrimaryIndustry.keywords.map((k: string) => k.toLowerCase())
261:           
262:           jobs = jobs.map((job: any) => {
263:             // Calculate industry match score
264:             const jobTitle = (job.title || '').toLowerCase()
265:             const jobDescription = (job.description || '').toLowerCase()
266:             const jobCompany = (job.company || '').toLowerCase()
267:             const fullText = `${jobTitle} ${jobDescription} ${jobCompany}`
268:             
269:             let industryMatchCount = 0
270:             primaryKeywords.forEach((keyword: string) => {
271:               if (fullText.includes(keyword)) industryMatchCount++
272:             })
273:             
274:             const industryMatchScore = industryMatchCount / primaryKeywords.length
275:             
276:             // Boost jobs from primary/target industry
277:             const originalScore = job.skillMatchScore || 0.5
278:             // If user is switching industries, give HIGHER boost (up to 75%)
279:             const boostMultiplier = targetIndustry ? 0.75 : 0.5
280:             const boostedScore = originalScore * (1 + industryMatchScore * boostMultiplier)
281:             
282:             return {
283:               ...job,
284:               skillMatchScore: Math.min(boostedScore, 1.0), // Cap at 1.0
285:               industryMatchScore,
286:               primaryIndustry: effectivePrimaryIndustry.name,
287:               isSwitchingIndustries: !!targetIndustry
288:             }
289:           }).sort((a: any, b: any) => (b.skillMatchScore || 0) - (a.skillMatchScore || 0)) // Re-sort by boosted score
290:           
291:           const matchedJobs = jobs.filter((j: any) => j.industryMatchScore > 0.3).length
292:           console.log(`[JOB_SEARCH] Applied industry weighting boost to ${jobs.length} jobs (${matchedJobs} strong matches)`)
293:         }
294:         
295:         metadata = {
296:           ...result.metadata,
297:           useResumeMatching: true,
298:           skillMatchingEnabled: true,
299:           industryWeighting: effectivePrimaryIndustry ? {
300:             primaryIndustry: effectivePrimaryIndustry.name,
301:             primaryPercentage: effectivePrimaryIndustry.percentage,
302:             careerTransition: careerTimeline?.careerTransition,
303:             userTargetIndustry: targetIndustry || null,
304:             disabledByUser: disableIndustryWeighting || false
305:           } : null
306:         }
307: 
308:         console.log(`[JOB_SEARCH] Resume matching found ${jobs.length} jobs with skill scores and industry weighting`)
309: 
310:       } catch (error) {
311:         console.error('[JOB_SEARCH] Resume matching failed, falling back to standard search:', error)
312:         // Fall back to standard search
313:         useResumeMatching = false
314:       }
315:     }
316: 
317:     // Option 2: Standard job listing search (25+ boards)
318:     if (!useResumeMatching || jobs.length === 0) {
319:       console.log(`[JOB_SEARCH] Using standard search across 25+ boards`, {
320:         keywords,
321:         location,
322:         limit,
323:         workType: workType || (remote ? 'remote' : undefined)
324:       })
325: 
326:       const jobsResult = await PerplexityIntelligenceService.jobListings(
327:         keywords,
328:         location,
329:         {
330:           limit,
331:           boards: sources
332:         }
333:       )
334: 
335:       console.log(`[JOB_SEARCH] jobListings returned:`, {
336:         type: typeof jobsResult,
337:         isArray: Array.isArray(jobsResult),
338:         length: Array.isArray(jobsResult) ? jobsResult.length : 0,
339:         sample: Array.isArray(jobsResult) && jobsResult[0] ? {
340:           title: jobsResult[0].title,
341:           company: jobsResult[0].company,
342:           hasUrl: !!jobsResult[0].url
343:         } : null
344:       })
345: 
346:       jobs = Array.isArray(jobsResult) ? jobsResult : []
347:       console.log(`[JOB_SEARCH] Standard search returned type: ${typeof jobsResult}, isArray: ${Array.isArray(jobsResult)}, length: ${jobs.length}`)
348: 
349:       metadata = {
350:         useResumeMatching: false,
351:         searchedBoards: sources?.length || 15,
352:         canadianPriority: location.toLowerCase().includes('canada')
353:       }
354: 
355:       console.log(`[JOB_SEARCH] Standard search found ${jobs.length} jobs`)
356:       if (jobs.length > 0) {
357:         console.log(`[JOB_SEARCH] First job sample:`, JSON.stringify(jobs[0]).substring(0, 200))
358:       }
359:     }
360: 
361:     // Save search history
362:     try {
363:       const { default: SearchHistory } = await import('@/models/SearchHistory')
364:       await SearchHistory.create({
365:         userId: session.user.id,
366:         keywords,
367:         location,
368:         resultsCount: jobs.length,
369:         sources: sources || ['all'],
370:         aiUsed: useResumeMatching,
371:         searchDate: new Date()
372:       })
373:     } catch (error) {
374:       console.error('[JOB_SEARCH] Failed to save search history:', error)
375:       // Non-critical, continue
376:     }
377: 
378:     // IMPROVED: Mark confidential jobs instead of filtering them out
379:     let processedJobs = jobs.map((job: any) => {
380:       const company = (job.company || '').toLowerCase().trim()
381:       const title = (job.title || '').toLowerCase().trim()
382:       
383:       // Only filter out COMPLETELY invalid jobs (empty title/company)
384:       const isCompletelyInvalid = (company === '' && title === '')
385:       
386:       // Mark confidential companies but keep them
387:       const confidentialCompanies = ['confidential', 'confidential company', 'undisclosed', 'private']
388:       const isConfidential = confidentialCompanies.includes(company)
389:       
390:       return {
391:         ...job,
392:         isConfidential,
393:         isCompletelyInvalid,
394:         note: isConfidential ? 'Company name not disclosed in posting' : undefined
395:       }
396:     }).filter((job: any) => !job.isCompletelyInvalid) // Only filter completely invalid
397: 
398:     // 🚫 CRITICAL: REMOVE ALL CONFIDENTIAL JOBS - DO NOT SHOW THEM AT ALL
399:     const confidentialCount = processedJobs.filter((j: any) => j.isConfidential).length
400:     processedJobs = processedJobs.filter((j: any) => {
401:       const isConfidential = j.isConfidential || 
402:         j.title?.toLowerCase().includes('confidential') ||
403:         j.company?.toLowerCase().includes('confidential') ||
404:         j.company?.toLowerCase() === 'confidential'
405:       
406:       if (isConfidential) {
407:         console.log(`[JOB_SEARCH] 🚫 REJECTED CONFIDENTIAL JOB: "${j.title}" at "${j.company}"`)
408:       }
409:       
410:       return !isConfidential
411:     })
412:     
413:     console.log(`[JOB_SEARCH] Processed ${jobs.length} jobs, REJECTED ${confidentialCount} confidential jobs, ${processedJobs.length} valid jobs kept`)
414: 
415:     // CRITICAL FIX: Merge cached jobs with new results (remove duplicates by URL)
416:     let finalJobs = [...processedJobs]
417:     if (cachedJobs && cachedJobs.length > 0) {
418:       const newJobUrls = new Set(processedJobs.map((j: any) => j.url).filter(Boolean))
419:       // Also filter confidential from cached jobs
420:       const uniqueCachedJobs = cachedJobs.filter((cj: any) => {
421:         const isConfidential = cj.isConfidential || 
422:           cj.title?.toLowerCase().includes('confidential') ||
423:           cj.company?.toLowerCase().includes('confidential') ||
424:           cj.company?.toLowerCase() === 'confidential'
425:         return !newJobUrls.has(cj.url) && !isConfidential
426:       })
427:       finalJobs = [...processedJobs, ...uniqueCachedJobs]
428:       console.log(`[JOB_CACHE] Merged ${uniqueCachedJobs.length} unique cached jobs with ${processedJobs.length} new jobs = ${finalJobs.length} total`)
429:     }
430: 
431:     // 🚀 NEW: Cache the search results for 3 weeks
432:     if (processedJobs.length > 0) {
433:       await jobSearchCacheService.cacheSearchResults(
434:         {
435:           keywords,
436:           location,
437:           workType,
438:           experienceLevel,
439:           userId: session.user.id
440:         },
441:         processedJobs
442:       );
443:       console.log(`[JOB_CACHE] ✅ Cached ${processedJobs.length} jobs for future searches`);
444:     }
445: 
446:     // Get recommended boards for this location
447:     const recommendedBoards = PerplexityIntelligenceService.getRecommendedBoards(location)
448: 
449:     return NextResponse.json({
450:       success: true,
451:       query: { keywords, location, sources },
452:       totalResults: finalJobs.length,
453:       returnedResults: Math.min(finalJobs.length, limit),
454:       jobs: finalJobs.slice(0, limit),
455:       metadata: {
456:         ...metadata,
457:         searchedAt: new Date().toISOString(),
458:         cachedResults: cachedJobs ? cachedJobs.length : 0,
459:         newResults: processedJobs.length,
460:         totalMerged: finalJobs.length
461:       },
462:       recommendations: {
463:         priorityBoards: recommendedBoards.slice(0, 5),
464:         reasoning: `Recommended job boards for ${location || 'your location'}`
465:       },
466:       sources: [...new Set(finalJobs.map((j: any) => j.source || 'Unknown'))]
467:     })
468: 
469:   } catch (error: any) {
470:     console.error('❌❌❌ [JOB_SEARCH] CRITICAL ERROR ❌❌❌')
471:     console.error('[JOB_SEARCH] Error type:', error?.constructor?.name)
472:     console.error('[JOB_SEARCH] Error message:', error?.message)
473:     console.error('[JOB_SEARCH] Error stack:', error?.stack)
474:     
475:     // Get session for error logging
476:     const session = await getServerSession(authOptions)
477:     console.error('[JOB_SEARCH] User ID:', session?.user?.id)
478:     
479:     return NextResponse.json({ 
480:       error: 'Job search failed', 
481:       details: error?.message || 'Unknown error',
482:       errorType: error?.constructor?.name,
483:       timestamp: new Date().toISOString()
484:     }, { status: 500 })
485:   }
486: }
487: 
488: /**
489:  * GET endpoint for search history and available job boards
490:  */
491: export async function GET(request: NextRequest) {
492:   try {
493:     const session = await getServerSession(authOptions)
494:     if (!session?.user?.id) {
495:       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
496:     }
497: 
498:     await dbService.connect()
499: 
500:     const url = new URL(request.url)
501:     const action = url.searchParams.get('action')
502: 
503:     // Get available job boards
504:     if (action === 'boards') {
505:       const boards = PerplexityIntelligenceService.getAvailableJobBoards()
506:       return NextResponse.json({
507:         success: true,
508:         boards,
509:         totalBoards: boards.length
510:       })
511:     }
512: 
513:     // Get search history (default)
514:     const { default: SearchHistory } = await import('@/models/SearchHistory')
515:     const history = await SearchHistory.find({ userId: session.user.id })
516:       .sort({ searchDate: -1 })
517:       .limit(20)
518: 
519:     return NextResponse.json({
520:       success: true,
521:       history
522:     })
523: 
524:   } catch (error) {
525:     console.error('[JOB_SEARCH] Failed to fetch data:', error)
526:     return NextResponse.json({ 
527:       error: 'Failed to fetch data' 
528:     }, { status: 500 })
529:   }
530: }
</file>

<file path="src/lib/perplexity-intelligence.ts">
   1: // FIXED: Universal crypto support (browser + Node.js)
   2: let crypto: any
   3: try {
   4:   crypto = require('crypto')
   5: } catch {
   6:   // Browser environment - will use fallback
   7:   crypto = null
   8: }
   9: import { PerplexityService } from './perplexity-service'
  10: import { 
  11:   CANADIAN_JOB_BOARDS, 
  12:   MAJOR_JOB_BOARDS, 
  13:   OPEN_API_BOARDS,
  14:   ATS_PLATFORMS,
  15:   DISCOVERY_PRIORITY_ORDER
  16: } from './public-job-boards-config'
  17: import { parseAIResponse } from './utils/ai-response-parser'
  18: import { getCoverLetterTemplateById } from './cover-letter-templates'
  19: 
  20: // Environment
  21: const CACHE_TTL_MS = Number(process.env.PPX_CACHE_TTL_MS || 24 * 60 * 60 * 1000)
  22: const MAX_RETRY_ATTEMPTS = Number(process.env.PPX_MAX_RETRIES || 3)
  23: const RETRY_DELAY_MS = Number(process.env.PPX_RETRY_DELAY || 1000)
  24: 
  25: type CacheRecord = {
  26:   value: unknown
  27:   metadata: { createdAt: number; hitCount: number; lastAccessed: number }
  28:   expiresAt: number
  29: }
  30: 
  31: // Simple Map-based cache with TTL
  32: const cache = new Map<string, CacheRecord>()
  33: 
  34: // Cache cleanup interval (every hour)
  35: setInterval(() => {
  36:   const now = Date.now()
  37:   for (const [key, record] of cache.entries()) {
  38:     if (now > record.expiresAt) {
  39:       cache.delete(key)
  40:     }
  41:   }
  42: }, 60 * 60 * 1000)
  43: 
  44: function makeKey(prefix: string, payload: unknown): string {
  45:   const raw = typeof payload === 'string' ? payload : JSON.stringify(payload)
  46:   
  47:   // Use crypto if available (Node.js), otherwise simple hash (browser)
  48:   if (crypto && crypto.createHash) {
  49:     return `${prefix}:${crypto.createHash('sha256').update(raw).digest('hex')}`
  50:   }
  51:   
  52:   // Browser fallback: simple hash
  53:   let hash = 0
  54:   for (let i = 0; i < raw.length; i++) {
  55:     const char = raw.charCodeAt(i)
  56:     hash = ((hash << 5) - hash) + char
  57:     hash = hash & hash
  58:   }
  59:   return `${prefix}:${Math.abs(hash).toString(36)}`
  60: }
  61: 
  62: function getCache(key: string): unknown | undefined {
  63:   const entry = cache.get(key)
  64:   if (!entry) return undefined
  65:   
  66:   // Check if expired
  67:   if (Date.now() > entry.expiresAt) {
  68:     cache.delete(key)
  69:     return undefined
  70:   }
  71:   
  72:   entry.metadata.hitCount += 1
  73:   entry.metadata.lastAccessed = Date.now()
  74:   return entry.value
  75: }
  76: 
  77: function setCache(key: string, value: unknown) {
  78:   cache.set(key, {
  79:     value,
  80:     expiresAt: Date.now() + CACHE_TTL_MS,
  81:     metadata: {
  82:       createdAt: Date.now(),
  83:       hitCount: 0,
  84:       lastAccessed: Date.now()
  85:     }
  86:   })
  87: }
  88: 
  89: function createClient(): PerplexityService { return new PerplexityService() }
  90: 
  91: // ---------- Enhanced helpers (ids, retry, enrichment) ----------
  92: function generateRequestId(): string {
  93:   if (crypto && crypto.randomBytes) {
  94:     return crypto.randomBytes(8).toString('hex')
  95:   }
  96:   // Browser fallback
  97:   return Math.random().toString(36).substr(2, 16) + Date.now().toString(36)
  98: }
  99: 
 100: // FIXED: Add timeout protection
 101: function withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {
 102:   return Promise.race([
 103:     promise,
 104:     new Promise<T>((_, reject) => 
 105:       setTimeout(() => reject(new Error(`Request timeout after ${ms}ms`)), ms)
 106:     )
 107:   ])
 108: }
 109: 
 110: async function withRetry<T>(
 111:   operation: () => Promise<T>,
 112:   maxAttempts: number = MAX_RETRY_ATTEMPTS,
 113:   logger?: { warn?: (message: string, context?: Record<string, unknown>) => void },
 114:   timeoutMs: number = 30000 // 30 second default timeout
 115: ): Promise<T> {
 116:   let lastError: unknown
 117:   for (let attempt = 1; attempt <= maxAttempts; attempt++) {
 118:     try {
 119:       return await withTimeout(operation(), timeoutMs)
 120:     } catch (err) {
 121:       lastError = err
 122:       if (attempt === maxAttempts) break
 123:       const baseDelay = RETRY_DELAY_MS * Math.pow(2, attempt - 1)
 124:       const jitter = Math.random() * RETRY_DELAY_MS
 125:       const delay = baseDelay + jitter
 126:       logger?.warn?.('Retrying Perplexity operation', {
 127:         attempt,
 128:         delay,
 129:         error: err instanceof Error ? err.message : String(err)
 130:       })
 131:       await new Promise(resolve => setTimeout(resolve, delay))
 132:     }
 133:   }
 134:   throw (lastError instanceof Error ? lastError : new Error('Operation failed'))
 135: }
 136: 
 137: // Removed unused PerplexityError class - using standard Error instead
 138: 
 139: // CRITICAL: This generates PATTERN-BASED emails (NOT VERIFIED)
 140: // These are stored as "alternativeEmails" with emailType: 'pattern' and low confidence
 141: // NEVER present these as verified contacts - they are guesses based on common patterns
 142: function inferEmails(name: string, companyDomain: string): string[] {
 143:   if (!name || !companyDomain) return []
 144:   const parts = name.toLowerCase().split(' ').filter(Boolean)
 145:   if (parts.length < 2) return []
 146:   const first = parts[0]
 147:   const last = parts[parts.length - 1]
 148:   const patterns = [
 149:     `${first}.${last}@${companyDomain}`,
 150:     `${first}${last}@${companyDomain}`,
 151:     `${first[0]}${last}@${companyDomain}`,
 152:     `${first}@${companyDomain}`,
 153:     `${last}@${companyDomain}`,
 154:     `${first}.${last[0]}@${companyDomain}`
 155:   ]
 156:   return patterns
 157: }
 158: 
 159: function normalizeSkills(skills: string[]): string[] {
 160:   const mapping: Record<string, string> = {
 161:     javascript: 'JavaScript', js: 'JavaScript',
 162:     typescript: 'TypeScript', ts: 'TypeScript',
 163:     react: 'React', reactjs: 'React',
 164:     node: 'Node.js', nodejs: 'Node.js',
 165:     python: 'Python', py: 'Python',
 166:     sales: 'Sales', selling: 'Sales',
 167:     crm: 'CRM', 'customer relationship management': 'CRM',
 168:     ai: 'Artificial Intelligence', 'artificial intelligence': 'Artificial Intelligence',
 169:     'machine learning': 'Machine Learning', ml: 'Machine Learning'
 170:   }
 171:   return (skills || []).map(s => {
 172:     const k = s.toLowerCase().trim()
 173:     return mapping[k] || s
 174:   })
 175: }
 176: 
 177: // CRITICAL FIX: Calculate years of experience from resume text
 178: // Prevents double-counting overlapping periods and filters out education dates
 179: function calculateYearsFromResume(resumeText: string): number {
 180:   // Extract only the work experience section to avoid counting education dates
 181:   const experienceSection = extractExperienceSection(resumeText)
 182:   
 183:   // Match date ranges in various formats
 184:   const dateRegex = /(\w+\s+\d{4}|(\d{1,2}\/\d{4}))\s*[-–—]\s*(\w+\s+\d{4}|Present|Current|(\d{1,2}\/\d{4}))/gi
 185:   const matches = Array.from(experienceSection.matchAll(dateRegex))
 186:   
 187:   // Parse all date ranges into start/end pairs
 188:   const periods: Array<{ start: Date; end: Date }> = []
 189:   for (const match of matches) {
 190:     try {
 191:       const startStr = match[1]
 192:       const endStr = match[3]
 193:       
 194:       const startDate = new Date(startStr)
 195:       const endDate = endStr.match(/Present|Current/i) ? new Date() : new Date(endStr)
 196:       
 197:       // Validate dates are reasonable (not in future, not before 1970)
 198:       if (startDate.getFullYear() < 1970 || startDate.getFullYear() > new Date().getFullYear()) continue
 199:       if (endDate.getFullYear() < 1970 || endDate.getFullYear() > new Date().getFullYear() + 1) continue
 200:       if (startDate > endDate) continue // Skip invalid ranges
 201:       
 202:       const months = (endDate.getFullYear() - startDate.getFullYear()) * 12 + 
 203:                     (endDate.getMonth() - startDate.getMonth())
 204:       
 205:       // Sanity check: skip periods longer than 50 years or negative
 206:       if (months > 0 && months < 600) {
 207:         periods.push({ start: startDate, end: endDate })
 208:       }
 209:     } catch (e) {
 210:       // Skip invalid dates
 211:       continue
 212:     }
 213:   }
 214:   
 215:   // If no valid periods found, return 0
 216:   if (periods.length === 0) return 0
 217:   
 218:   // Sort periods by start date
 219:   periods.sort((a, b) => a.start.getTime() - b.start.getTime())
 220:   
 221:   // Merge overlapping periods to avoid double-counting
 222:   const merged: Array<{ start: Date; end: Date }> = []
 223:   let current = periods[0]
 224:   
 225:   for (let i = 1; i < periods.length; i++) {
 226:     const next = periods[i]
 227:     
 228:     // If periods overlap or are adjacent, merge them
 229:     if (next.start <= current.end) {
 230:       current.end = new Date(Math.max(current.end.getTime(), next.end.getTime()))
 231:     } else {
 232:       // No overlap, push current and start new period
 233:       merged.push(current)
 234:       current = next
 235:     }
 236:   }
 237:   merged.push(current)
 238:   
 239:   // Calculate total months from merged periods
 240:   let totalMonths = 0
 241:   for (const period of merged) {
 242:     const months = (period.end.getFullYear() - period.start.getFullYear()) * 12 + 
 243:                   (period.end.getMonth() - period.start.getMonth())
 244:     totalMonths += months
 245:   }
 246:   
 247:   const years = Math.round(totalMonths / 12)
 248:   
 249:   // CRITICAL FIX: Cap at realistic maximum
 250:   // Assume candidate started working at age 18, max age 65
 251:   // Most candidates are 25-45, so cap at 25 years to be safe
 252:   const maxRealisticYears = 25
 253:   const cappedYears = Math.min(years, maxRealisticYears)
 254:   
 255:   // If calculated years seem unrealistic (>15), round down to nearest 5
 256:   if (cappedYears > 15) {
 257:     return Math.floor(cappedYears / 5) * 5
 258:   }
 259:   
 260:   return cappedYears
 261: }
 262: 
 263: // Extract work experience section from resume to avoid counting education dates
 264: function extractExperienceSection(resumeText: string): string {
 265:   const text = resumeText.toLowerCase()
 266:   
 267:   // Find work experience section markers
 268:   const experienceMarkers = [
 269:     'work experience',
 270:     'professional experience',
 271:     'employment history',
 272:     'experience',
 273:     'work history',
 274:     'career history'
 275:   ]
 276:   
 277:   // Find education section markers to exclude
 278:   const educationMarkers = [
 279:     'education',
 280:     'academic background',
 281:     'academic history',
 282:     'degrees'
 283:   ]
 284:   
 285:   let experienceStart = -1
 286:   let experienceMarker = ''
 287:   
 288:   // Find the earliest experience marker
 289:   for (const marker of experienceMarkers) {
 290:     const index = text.indexOf(marker)
 291:     if (index !== -1 && (experienceStart === -1 || index < experienceStart)) {
 292:       experienceStart = index
 293:       experienceMarker = marker
 294:     }
 295:   }
 296:   
 297:   // If no experience section found, use entire resume (fallback)
 298:   if (experienceStart === -1) return resumeText
 299:   
 300:   // Find where experience section ends (usually at education or end of document)
 301:   let experienceEnd = resumeText.length
 302:   for (const marker of educationMarkers) {
 303:     const index = text.indexOf(marker, experienceStart + experienceMarker.length)
 304:     if (index !== -1 && index < experienceEnd) {
 305:       experienceEnd = index
 306:     }
 307:   }
 308:   
 309:   return resumeText.substring(experienceStart, experienceEnd)
 310: }
 311: 
 312: // Enhanced response wrappers (non-breaking: used by new V2 methods only)
 313: export type RequestMetadata = { 
 314:   requestId: string
 315:   timestamp: number
 316:   duration?: number
 317:   error?: string
 318:   boardsSearched?: number
 319:   resultsCount?: number
 320:   attemptedCleanups?: string[]
 321:   contactsFound?: number
 322:   withEmails?: number
 323:   agent_iterations?: number
 324:   tools_used?: string[]
 325:   reasoning?: string
 326:   confidence?: number
 327:   method?: string
 328:   sources?: number
 329: }
 330: export type EnhancedResponse<T> = { success: boolean; data: T; metadata: RequestMetadata; cached: boolean }
 331: 
 332: export interface IntelligenceRequest {
 333:   company: string
 334:   role?: string
 335:   geo?: string
 336: }
 337: 
 338: export interface IntelligenceResponse {
 339:   company: string
 340:   freshness: string
 341:   sources: Array<{ title: string; url: string }>
 342:   confidence: number
 343:   financials: Array<{ metric: string; value: string; confidence: number; source?: string }>
 344:   culture: Array<{ point: string; confidence: number; source?: string }>
 345:   salaries: Array<{ title: string; range: string; currency?: string; geo?: string; source?: string; confidence: number }>
 346:   contacts: Array<{ name: string; title: string; url?: string; source?: string; confidence: number }>
 347:   growth: Array<{ signal: string; source?: string; confidence: number }>
 348:   summary: string
 349:   description: string
 350:   size: string
 351:   revenue: string
 352:   industry: string
 353:   founded: string
 354:   headquarters: string
 355:   psychology: string
 356:   marketIntelligence: string
 357:   // CRITICAL: New comprehensive intelligence fields
 358:   recentNews?: Array<{ title: string; date: string; url: string; summary: string }>
 359:   socialMedia?: {
 360:     linkedin?: string
 361:     twitter?: string
 362:     facebook?: string
 363:     instagram?: string
 364:     youtube?: string
 365:   }
 366:   glassdoorRating?: {
 367:     overallRating?: number
 368:     ceoApproval?: number
 369:     recommendToFriend?: number
 370:     reviewCount?: number
 371:     url?: string
 372:   }
 373:   stockProfile?: {
 374:     ticker?: string
 375:     exchange?: string
 376:     currentPrice?: string
 377:     marketCap?: string
 378:     isPublic?: boolean
 379:   }
 380: }
 381: 
 382: // V2 Data structures (for job listings and contacts)
 383: export interface JobListing {
 384:   title: string
 385:   company: string
 386:   location: string
 387:   address?: string | null
 388:   url: string
 389:   source?: string
 390:   summary: string
 391:   postedDate: string
 392:   salary?: string | null
 393:   skillMatchPercent: number
 394:   skills: string[]
 395:   workType?: 'remote' | 'hybrid' | 'onsite'
 396:   experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive'
 397:   contacts: {
 398:     hrEmail?: string | null
 399:     hiringManagerEmail?: string | null
 400:     generalEmail?: string | null
 401:     phone?: string | null
 402:     linkedinProfiles: string[]
 403:   }
 404:   benefits?: string[]
 405:   requirements?: string[]
 406: }
 407: 
 408: export interface HiringContact {
 409:   name: string
 410:   title: string
 411:   department: string
 412:   linkedinUrl?: string | null
 413:   email?: string | null
 414:   emailType?: 'public' | 'inferred' | 'pattern'
 415:   source: string
 416:   confidence: number
 417:   phone?: string | null
 418:   alternativeEmails?: string[]
 419:   discoveryMethod?: string
 420: }
 421: 
 422: export interface QuickSearchItem {
 423:   title: string
 424:   url: string
 425:   snippet: string
 426:   source: string
 427:   postedDate?: string
 428:   location?: string
 429:   company?: string
 430:   date?: string
 431: }
 432: 
 433: const SYSTEM = `You are a research analyst using real-time web tools.
 434: CRITICAL: Your response must be ONLY valid JSON. NO explanatory text, NO markdown, NO commentary.
 435: Rules:
 436: - Use only public sources and respect robots.txt by following links provided by Perplexity tools.
 437: - Always return ONLY structured JSON matching the requested schema.
 438: - Include 5-10 source citations with titles and URLs.
 439: - Provide confidence scores (0-1) for each data point and overall.
 440: - Mark estimates or unverified signals clearly.
 441: - NEVER add text before or after the JSON response.
 442: `
 443: 
 444: interface ComprehensiveJobResearchData {
 445:   jobAnalysis: {
 446:     matchScore: number
 447:     matchingSkills: string[]
 448:     missingSkills: string[]
 449:     skillsToHighlight: string[]
 450:     recommendations: string[]
 451:     estimatedFit: string
 452:   }
 453:   companyIntel: {
 454:     company: string
 455:     description: string
 456:     size?: string
 457:     revenue?: string
 458:     industry?: string
 459:     founded?: string
 460:     headquarters?: string
 461:     website?: string
 462:     marketPosition?: string
 463:   }
 464:   companyPsychology: {
 465:     culture: string
 466:     values: string[]
 467:     managementStyle?: string
 468:     workEnvironment?: string
 469:   }
 470:   hiringContacts: Array<{
 471:     name: string
 472:     title: string
 473:     department?: string
 474:     email?: string
 475:     linkedinUrl?: string
 476:     authority: 'decision maker' | 'recruiter' | 'manager' | 'coordinator'
 477:     confidence: number
 478:     contactMethod?: string
 479:   }>
 480:   marketIntelligence: {
 481:     competitivePosition?: string
 482:     industryTrends?: string
 483:     financialStability?: string
 484:     recentPerformance?: string
 485:   }
 486:   news: Array<{
 487:     title: string
 488:     summary: string
 489:     url: string
 490:     date?: string
 491:     source?: string
 492:     impact?: string
 493:   }>
 494:   reviews: Array<{
 495:     platform: string
 496:     rating?: number
 497:     summary: string
 498:     url: string
 499:     pros?: string[]
 500:     cons?: string[]
 501:   }>
 502:   compensation: {
 503:     salaryRange?: string
 504:     benefits?: string
 505:   }
 506:   strategicRecommendations: {
 507:     applicationStrategy: string
 508:     contactStrategy: string
 509:     interviewPrep: string[]
 510:   }
 511:   sources: string[]
 512:   confidenceLevel: number
 513: }
 514: 
 515: interface EnhancedCompanyResearchData {
 516:   companyIntelligence: {
 517:     name: string
 518:     industry?: string
 519:     founded?: string
 520:     headquarters?: string
 521:     employeeCount?: string
 522:     revenue?: string
 523:     website?: string
 524:     description?: string
 525:     marketPosition?: string
 526:     financialStability?: string
 527:     recentPerformance?: string
 528:   }
 529:   hiringContactIntelligence: {
 530:     officialChannels?: {
 531:       careersPage?: string
 532:       jobsEmail?: string
 533:       hrEmail?: string
 534:       phone?: string
 535:       address?: string
 536:     }
 537:     keyContacts?: Array<{
 538:       name: string
 539:       title: string
 540:       department?: string
 541:       linkedinUrl?: string
 542:       email?: string
 543:       authority?: string
 544:       contactMethod?: string
 545:     }>
 546:     emailFormat?: string
 547:     socialMedia?: Record<string, string>
 548:   }
 549:   companyPsychology?: {
 550:     culture?: string
 551:     values?: string[]
 552:     managementStyle?: string
 553:     workEnvironment?: string
 554:   }
 555:   reviewAnalysis?: {
 556:     glassdoor?: {
 557:       rating?: number
 558:       reviewCount?: number
 559:       ceoApproval?: string | number
 560:       recommendToFriend?: string | number
 561:       pros?: string[]
 562:       cons?: string[]
 563:     }
 564:     employeeSentiment?: string
 565:   }
 566:   aiAutomationThreat?: {
 567:     roleRisk?: string
 568:     automationProbability?: string
 569:     timeframe?: string
 570:     companyAIAdoption?: string
 571:     futureOutlook?: string
 572:     recommendations?: string[]
 573:   }
 574:   recentNews?: Array<{
 575:     headline?: string
 576:     date?: string
 577:     source?: string
 578:     url?: string
 579:     impact?: string
 580:   }>
 581:   compensation?: {
 582:     salaryRange?: string
 583:     benefits?: string
 584:   }
 585:   redFlags?: string[]
 586:   strategicRecommendations?: {
 587:     applicationStrategy?: string
 588:     contactStrategy?: string
 589:     interviewPrep?: string[]
 590:   }
 591:   sources?: string[]
 592:   confidenceLevel?: number
 593: }
 594: 
 595: export class PerplexityIntelligenceService {
 596:   /**
 597:    * CRITICAL FIX: Scrapes job URL to get full description when Perplexity returns incomplete data
 598:    * Fallback for when descriptions are too short
 599:    */
 600:   private static async scrapeJobURL(url: string): Promise<string> {
 601:     try {
 602:       const response = await fetch(url, {
 603:         headers: {
 604:           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
 605:         },
 606:         signal: AbortSignal.timeout(10000) // 10 second timeout
 607:       })
 608:       
 609:       if (!response.ok) return ''
 610:       
 611:       const html = await response.text()
 612:       
 613:       // Try multiple common job description selectors
 614:       const patterns = [
 615:         /<div[^>]*class="[^"]*description[^"]*"[^>]*>(.*?)<\/div>/is,
 616:         /<div[^>]*id="[^"]*description[^"]*"[^>]*>(.*?)<\/div>/is,
 617:         /<section[^>]*class="[^"]*job-description[^"]*"[^>]*>(.*?)<\/section>/is,
 618:         /<div[^>]*class="[^"]*job-details[^"]*"[^>]*>(.*?)<\/div>/is
 619:       ]
 620:       
 621:       for (const pattern of patterns) {
 622:         const match = html.match(pattern)
 623:         if (match && match[1]) {
 624:           // Strip HTML tags and clean up
 625:           const cleaned = match[1]
 626:             .replace(/<script[^>]*>.*?<\/script>/gis, '')
 627:             .replace(/<style[^>]*>.*?<\/style>/gis, '')
 628:             .replace(/<[^>]+>/g, ' ')
 629:             .replace(/\s+/g, ' ')
 630:             .trim()
 631:           
 632:           if (cleaned.length > 150) {
 633:             return cleaned
 634:           }
 635:         }
 636:       }
 637:       
 638:       return ''
 639:     } catch (error) {
 640:       if (process.env.PPX_DEBUG === 'true') {
 641:         console.warn(`[SCRAPE] Failed to scrape ${url}:`, error)
 642:       }
 643:       return ''
 644:     }
 645:   }
 646: 
 647:   /**
 648:    * CRITICAL FIX: Validates job listings response from Perplexity
 649:    * Filters out incomplete, fake, or low-quality jobs
 650:    */
 651:   private static validateJobListings(jobs: JobListing[], minRequired: number): JobListing[] {
 652:     const validated = jobs.filter((job: JobListing) => {
 653:       // ❌ REJECT: Empty or short descriptions
 654:       if (!job.summary || job.summary.trim().length < 150) {
 655:         if (process.env.PPX_DEBUG === 'true') {
 656:           console.warn(`[VALIDATE] Rejecting ${job.title} - description too short (${job.summary?.length || 0} chars)`)
 657:         }
 658:         return false
 659:       }
 660:       
 661:       // ❌ REJECT: Confidential companies
 662:       const confidentialKeywords = ['confidential', 'various', 'tbd', 'multiple', 'undisclosed', 'anonymous', 'private', 'stealth', 'hidden']
 663:       const company = String(job.company || '').toLowerCase().trim()
 664:       if (confidentialKeywords.some(kw => company.includes(kw)) || company.length < 3) {
 665:         if (process.env.PPX_DEBUG === 'true') {
 666:           console.warn(`[VALIDATE] Rejecting ${job.title} - confidential company: ${job.company}`)
 667:         }
 668:         return false
 669:       }
 670:       
 671:       // ❌ REJECT: No valid URL
 672:       if (!job.url || !job.url.includes('http')) {
 673:         if (process.env.PPX_DEBUG === 'true') {
 674:           console.warn(`[VALIDATE] Rejecting ${job.title} - invalid URL: ${job.url}`)
 675:         }
 676:         return false
 677:       }
 678:       
 679:       // ✅ ACCEPT
 680:       return true
 681:     })
 682:     
 683:     // Warn if too many filtered out
 684:     if (validated.length < minRequired * 0.5 && process.env.PPX_DEBUG === 'true') {
 685:       console.warn(`[VALIDATE] Only ${validated.length}/${minRequired} jobs passed validation (${Math.round(validated.length/minRequired*100)}%)`)
 686:     }
 687:     
 688:     return validated
 689:   }
 690: 
 691:   /**
 692:    * CRITICAL FIX: Validates hiring contacts response from Perplexity
 693:    * Filters out fake emails, personal domains, pattern-based guesses
 694:    */
 695:   private static validateHiringContacts(contacts: HiringContact[]): HiringContact[] {
 696:     const validated = contacts.filter((contact: HiringContact) => {
 697:       // ❌ REJECT: No email and no LinkedIn
 698:       if (!contact.email && !contact.linkedinUrl) {
 699:         if (process.env.PPX_DEBUG === 'true') {
 700:           console.warn(`[VALIDATE] Rejecting ${contact.name} - no contact method`)
 701:         }
 702:         return false
 703:       }
 704:       
 705:       // ❌ REJECT: Personal email domains (if email exists)
 706:       if (contact.email) {
 707:         const personalDomains = ['gmail', 'yahoo', 'hotmail', 'outlook', 'aol', 'icloud', 'protonmail']
 708:         if (personalDomains.some(d => contact.email!.toLowerCase().includes(d))) {
 709:           if (process.env.PPX_DEBUG === 'true') {
 710:             console.warn(`[VALIDATE] Rejecting ${contact.email} - personal domain`)
 711:           }
 712:           return false
 713:         }
 714:         
 715:         // ❌ REJECT: Template/placeholder emails
 716:         if (contact.email.includes('[') || contact.email.includes('VISIT') || contact.email.includes('example') || contact.email.includes('domain.')) {
 717:           if (process.env.PPX_DEBUG === 'true') {
 718:             console.warn(`[VALIDATE] Rejecting ${contact.email} - template email`)
 719:           }
 720:           return false
 721:         }
 722:       }
 723:       
 724:       // ✅ ACCEPT
 725:       return true
 726:     })
 727:     
 728:     return validated
 729:   }
 730: 
 731:   // V2: Enhanced company research with retries and metadata
 732:   static async researchCompanyV2(input: IntelligenceRequest): Promise<EnhancedResponse<IntelligenceResponse>> {
 733:     const requestId = generateRequestId()
 734:     const started = Date.now()
 735:     const key = makeKey('ppx:research:v2', input)
 736:     const cached = getCache(key) as IntelligenceResponse | undefined
 737:     if (cached) {
 738:       return { success: true, data: cached, metadata: { requestId, timestamp: started, duration: Date.now() - started }, cached: true }
 739:     }
 740:     try {
 741:       const userPrompt = `COMPREHENSIVE RESEARCH TASK: Search for contacts, emails, website, and complete intelligence for ${input.company}${input.role ? ` (role: ${input.role})` : ''}${input.geo ? ` in ${input.geo}` : ''}.
 742: 
 743: **MANDATORY SEARCH SOURCES:**
 744: - Use Google search extensively
 745: - Search LinkedIn company page AND individual employee profiles
 746: - Search all social media platforms (Twitter, Facebook, Instagram, YouTube)
 747: - Search company website thoroughly
 748: - Search business directories (BBB, Yellow Pages, ZoomInfo, etc.)
 749: - Search news sources and press releases
 750: - Search Glassdoor for reviews and salaries
 751: - Search stock exchanges if publicly traded
 752: 
 753: **RETURN DETAILED JSON with ALL fields below:**
 754: {
 755:   "company": string (full legal name),
 756:   "description": string (detailed company overview - NOT "No description available"),
 757:   "size": string (employee count with source),
 758:   "revenue": string (annual revenue estimate with source),
 759:   "industry": string (specific industry classification),
 760:   "founded": string (year or date with source),
 761:   "headquarters": string (full address with city, province/state, postal code),
 762:   "psychology": string (company culture, values, workplace environment - from Glassdoor/employee reviews),
 763:   "marketIntelligence": string (market position, competitive landscape, growth trends - detailed analysis),
 764:   "freshness": string (ISO datetime of research),
 765:   "sources": [{"title": string, "url": string}] (minimum 8 sources, up to 20),
 766:   "confidence": number (0 to 1),
 767:   "financials": [{"metric": string, "value": string, "confidence": number, "source": string}],
 768:   "culture": [{"point": string, "confidence": number, "source": string}] (from Glassdoor/reviews),
 769:   "salaries": [{"title": string, "range": string, "currency": string, "geo": string, "source": string, "confidence": number}],
 770:   "contacts": [{"name": string, "title": string, "email": string, "url": string, "source": string, "confidence": number}] (executives, managers, recruiters from LinkedIn with emails),
 771:   "generalEmail": string (company general inbox: careers@, hr@, jobs@, info@, hello@, contact@ - MANDATORY),
 772:   "careersPage": string (company careers/jobs page URL),
 773:   "growth": [{"signal": string, "source": string, "confidence": number}],
 774:   "summary": string (comprehensive 2-3 paragraph summary),
 775:   "recentNews": [{"title": string, "date": string, "url": string, "summary": string}] (last 6 months),
 776:   "socialMedia": {"linkedin": string, "twitter": string, "facebook": string, "instagram": string, "youtube": string},
 777:   "glassdoorRating": {"overallRating": number, "ceoApproval": number, "recommendToFriend": number, "reviewCount": number, "url": string},
 778:   "stockProfile": {"ticker": string, "exchange": string, "currentPrice": string, "marketCap": string, "isPublic": boolean}
 779: }
 780: 
 781: **CRITICAL REQUIREMENTS:**
 782: 1. Search company website for About page, Contact page, Leadership/Team page
 783: 2. **MANDATORY**: Extract company general email from website footer/contact page (careers@, hr@, jobs@, info@, hello@, contact@)
 784: 3. **MANDATORY**: Find company careers/jobs page URL
 785: 4. Search "site:linkedin.com/company/${input.company}" for official company page
 786: 5. Search "site:linkedin.com ${input.company} CEO OR president OR manager" for executive contacts WITH emails
 787: 6. Search "${input.company} headquarters address phone email"
 788: 7. Search "${input.company} site:glassdoor.com" for reviews and culture insights
 789: 8. Search "${input.company} revenue employees industry" for business intelligence
 790: 9. DO NOT return "Unknown", "No description available", or "No data" - search multiple sources until you find information
 791: 10. Include REAL contact information (names, titles, emails, LinkedIn URLs) - minimum 3 contacts if company has >10 employees
 792: 11. **APP IS USELESS WITHOUT CONTACT INFO** - Always return at least generalEmail even if no specific contacts found`
 793:       const out = await withRetry(async () => {
 794:         const client = createClient()
 795:         const user = userPrompt
 796:         const res = await client.makeRequest(SYSTEM, user, { temperature: 0.2, maxTokens: 3000, model: 'sonar-pro' })
 797:         if (!res.content?.trim()) throw new Error('Empty response')
 798:         return res
 799:       })
 800:       const context = {
 801:         requestId,
 802:         prompts: { system: SYSTEM, user: userPrompt },
 803:         timestamp: started,
 804:         duration: Date.now() - started
 805:       }
 806:       const parsed = parseAIResponse<IntelligenceResponse>(out.content ?? '', { stripMarkdown: true, extractFirst: true }, context)
 807:       parsed.company = parsed.company || input.company
 808:       parsed.freshness = parsed.freshness || new Date().toISOString()
 809:       parsed.sources = Array.isArray(parsed.sources) ? parsed.sources.slice(0, 12) : []
 810:       parsed.confidence = typeof parsed.confidence === 'number' ? Math.max(0, Math.min(1, parsed.confidence)) : 0.6
 811:       if (Array.isArray(parsed.contacts)) {
 812:         parsed.contacts = parsed.contacts.map(c => ({ ...c, url: c.url }))
 813:       }
 814:       setCache(key, parsed)
 815:       return { success: true, data: parsed, metadata: { requestId, timestamp: started, duration: Date.now() - started }, cached: false }
 816:     } catch (e) {
 817:       const fb: IntelligenceResponse = {
 818:         company: input.company,
 819:         freshness: new Date().toISOString(),
 820:         sources: [],
 821:         confidence: 0.3,
 822:         financials: [],
 823:         culture: [],
 824:         salaries: [],
 825:         contacts: [],
 826:         growth: [],
 827:         summary: 'Research failed - please retry',
 828:         description: 'No description available',
 829:         size: 'Unknown',
 830:         revenue: 'Unknown',
 831:         industry: 'Unknown',
 832:         founded: 'Unknown',
 833:         headquarters: 'Unknown',
 834:         psychology: 'No insights available',
 835:         marketIntelligence: 'No market data available',
 836:         recentNews: [],
 837:         socialMedia: {},
 838:         glassdoorRating: undefined,
 839:         stockProfile: undefined
 840:       }
 841:       return { success: false, data: fb, metadata: { requestId, timestamp: started, duration: Date.now() - started, error: (e as Error).message }, cached: false }
 842:     }
 843:   }
 844:   // REMOVED: Old researchCompany - Use researchCompanyV2 instead
 845: 
 846:   static async salaryForRole(role: string, company?: string, geo?: string) {
 847:     const key = makeKey('ppx:salary', { role, company, geo })
 848:     const cached = getCache(key)
 849:     if (cached) return cached
 850:     const client = createClient()
 851:     const user = `Find current salary ranges for ${role}${company ? ` at ${company}` : ''}${geo ? ` in ${geo}` : ''}. Return JSON: items[{title,range,currency,geo,source,confidence}], summary, freshness`;
 852:     try {
 853:       const out = await client.makeRequest(SYSTEM, user, { temperature: 0.2, maxTokens: 900, model: 'sonar-pro' })
 854:       const text = (out.content || '').trim()
 855:       const context = {
 856:         requestId: generateRequestId(),
 857:         prompts: { system: SYSTEM, user },
 858:         timestamp: Date.now(),
 859:         duration: 0
 860:       }
 861:       const parsed = parseAIResponse<Record<string, unknown>>(text, { stripMarkdown: true, extractFirst: true }, context)
 862:       setCache(key, parsed)
 863:       return parsed
 864:     } catch {
 865:       return { items: [], summary: 'Unavailable', freshness: new Date().toISOString() }
 866:     }
 867:   }
 868: 
 869:   /**
 870:    * Enhanced job listings search across 25+ Canadian and global job boards
 871:    * Integrates with public-job-boards-config.ts for comprehensive coverage
 872:    */
 873:   static async jobListings(
 874:     jobTitle: string, 
 875:     location: string,
 876:     options: {
 877:       boards?: string[] // Specific boards to search (uses DISCOVERY_PRIORITY_ORDER if not specified)
 878:       limit?: number
 879:       includeCanadianOnly?: boolean
 880:     } = {}
 881:   ) {
 882:     const { boards, limit = 50, includeCanadianOnly = false } = options
 883:     const key = makeKey('ppx:jobs', { jobTitle, location, boards, limit })
 884:     const cached = getCache(key)
 885:     if (cached) return cached
 886: 
 887:     // Determine which boards to search
 888:     const targetBoards = boards || (includeCanadianOnly 
 889:       ? Object.keys(CANADIAN_JOB_BOARDS)
 890:       : DISCOVERY_PRIORITY_ORDER.slice(0, 15) // Top 15 boards
 891:     )
 892: 
 893:     // Note: targetBoards is used in the Perplexity prompt below to guide source selection
 894: 
 895:     const client = createClient()
 896:     const SYSTEM_JOBS = `You are an advanced Job Listings Aggregator with real-time web access across 25+ Canadian and global job boards.
 897: 
 898: PRIORITY CANADIAN SOURCES:
 899: - Job Bank Canada (jobbank.gc.ca) - Government jobs
 900: - AutoJobs (autojobs.com) - Canadian automotive & skilled trades
 901: - SimplyHired Canada (simplyhired.ca) - Canadian aggregator
 902: - Jobboom (jobboom.com) - Bilingual Canadian
 903: - Workopolis (workopolis.com) - Canadian
 904: - Indeed Canada (ca.indeed.com)
 905: - Jooble Canada (ca.jooble.org)
 906: - ZipRecruiter Canada (ziprecruiter.ca)
 907: - Monster Canada (monster.ca)
 908: - Glassdoor Canada (glassdoor.ca)
 909: - Dice Canada (dice.com)
 910: - Careerjet Canada (careerjet.ca)
 911: 
 912: GLOBAL SOURCES:
 913: - LinkedIn (linkedin.com/jobs)
 914: - Indeed (indeed.com)
 915: - Glassdoor (glassdoor.com)
 916: - Adzuna (adzuna.com)
 917: 
 918: ATS PLATFORMS (Canadian Tech Companies):
 919: - Greenhouse: Shopify, Hootsuite, Wealthsimple, Faire, Thinkific, Lightspeed
 920: - Lever: Slack, Shopify, Bench, Clio, Clearco, League
 921: - Workable: FreshBooks, Visier, Unbounce, Axonify
 922: - Recruitee: Paytm, Ecobee, Geotab, Auvik, Wave, KOHO
 923: - Ashby: Faire, Clearco, Maple, Borrowell, Shakepay
 924: - Breezy HR: Lumerate, Zymewire, and other Canadian startups
 925: - Communitech Job Board: communitech.ca/companies (Waterloo tech ecosystem)
 926: - RemoteRocketship: remoterocketship.com (Remote Canadian jobs)
 927: 
 928: 🔥 CRITICAL - FOLLOW LINKS AND EXTRACT FULL CONTENT:
 929: For EACH job found, you MUST:
 930: 1. Find the job in search results (title, company, location, URL)
 931: 2. **FOLLOW THE JOB URL** and visit the actual job posting page
 932: 3. **SCRAPE THE COMPLETE JOB DESCRIPTION** from the posting page (all paragraphs, all bullet points)
 933: 4. Extract salary, benefits, requirements, responsibilities from the posting page
 934: 5. If company name is "Confidential" in search results - **VISIT THE URL** and extract the REAL company name from the posting page
 935: 6. If description is missing - **TRY COMPANY CAREERS PAGE** (company.com/careers) or **COMPANY ATS** (company.breezy.hr, company.greenhouse.io)
 936: 
 937: CRITICAL REQUIREMENTS:
 938: 1. **ONLY REAL COMPANY NAMES** - ABSOLUTELY NO CONFIDENTIAL LISTINGS:
 939:    ❌ REJECT AND SKIP: "Confidential", "Various Employers", "Multiple Companies", "Undisclosed", "Private", "TBD", "N/A", "Various [Industry]", "Anonymous", "Stealth", "Hidden"
 940:    ❌ DO NOT INCLUDE jobs where company name is hidden or confidential
 941:    ✅ ONLY INCLUDE: Jobs with real, specific company names (e.g., "Ricoh Canada", "Shopify", "TD Bank", "Lumerate", "Zymewire")
 942: 2. **VERIFY COMPANY EXISTS** - Must be a real, identifiable company
 943: 3. **SKIP INVALID LISTINGS** - If company name is missing or confidential, DO NOT include it in results
 944: 4. **EXTRACT FULL DESCRIPTIONS** - Visit each job URL and scrape complete description (minimum 200 words)
 945: 5. Search ONLY publicly accessible listings (no login required)
 946: 6. Prioritize Canadian sources for Canadian locations
 947: 7. **Extract salary** from job posting page if available
 948: 8. Deduplicate across all sources by company + title
 949: 9. Rank by: recency → Canadian source priority → relevance
 950: 10. Return EXACTLY ${limit} unique listings with REAL company names and FULL descriptions
 951: 
 952: OUTPUT JSON (MUST BE VALID, COMPLETE JSON):
 953: [{
 954:   "title": string (specific job title, not "Various Positions"),
 955:   "company": string (EXACT company name, not generic),
 956:   "location": string (specific city/province),
 957:   "url": string (direct job posting link),
 958:   "summary": string (200-400 words, COMPLETE job description from posting page),
 959:   "salary": string | null (extracted from posting page),
 960:   "postedDate": "YYYY-MM-DD",
 961:   "source": string (board name),
 962:   "requirements": string[] (key requirements from posting),
 963:   "benefits": string[] (benefits mentioned in posting)
 964: }]`
 965: 
 966:     const USER_JOBS = `Search for "${jobTitle}" jobs in ${location} across these prioritized sources:
 967: ${targetBoards.slice(0, 10).join(', ')}
 968: 
 969: Return ${limit} unique, recent listings in JSON format. For Canadian locations, prioritize Job Bank, Jobboom, Workopolis first.`
 970: 
 971:     const requestId = generateRequestId()
 972:     const started = Date.now()
 973:     try {
 974:       const out = await client.makeRequest(SYSTEM_JOBS, USER_JOBS, { 
 975:         temperature: 0.2, 
 976:         maxTokens: Math.min(limit * 500, 30000), // CRITICAL FIX: Increased from 300 to 500 tokens per job for full descriptions
 977:         model: 'sonar-pro' // Use research model for job search
 978:       })
 979:       
 980:       // FIXED: Check for truncation warning
 981:       if (out.content.length > 18000) {
 982:         console.warn('[JOB_LISTINGS] Response may be truncated, consider reducing limit or splitting into batches')
 983:       }
 984:       let text = (out.content || '').trim()
 985:       
 986:       // Extract JSON from response if wrapped in markdown or explanation
 987:       const jsonMatch = text.match(/\[[\s\S]*\]/)
 988:       if (jsonMatch) {
 989:         text = jsonMatch[0]
 990:       }
 991:       
 992:       // FIX: Clean up truncated JSON
 993:       // If JSON ends abruptly without closing ], try to fix it
 994:       if (!text.endsWith(']')) {
 995:         console.warn('[PERPLEXITY] JSON appears truncated, attempting to fix')
 996:         // Find last complete object
 997:         const lastCompleteObj = text.lastIndexOf('}')
 998:         if (lastCompleteObj > 0) {
 999:           text = text.substring(0, lastCompleteObj + 1) + ']'
1000:         }
1001:       }
1002:       
1003:       // FIX: Remove trailing commas before ]
1004:       text = text.replace(/,(\s*)\]/g, '$1]')
1005:       
1006:       const context = {
1007:         requestId,
1008:         prompts: { system: SYSTEM_JOBS, user: USER_JOBS },
1009:         timestamp: started,
1010:         duration: Date.now() - started
1011:       }
1012:       let parsed: unknown
1013:       try {
1014:         parsed = parseAIResponse<unknown>(text, { stripMarkdown: true, extractFirst: true }, context)
1015:       } catch (parseError: unknown) {
1016:         console.error('[PERPLEXITY] JSON parse failed, raw text:', text.substring(0, 500))
1017:         console.error('[PERPLEXITY] Parse error:', parseError)
1018:         return []
1019:       }
1020:       
1021:       const arr = Array.isArray(parsed) ? parsed.slice(0, limit) : []
1022:       
1023:       // CRITICAL FIX: Filter out confidential companies (NO FAKE/INFERRED DATA)
1024:       const filtered = arr.filter((job: unknown) => {
1025:         const jobObj = job as Record<string, unknown>
1026:         const companyRaw = String(jobObj.company || '')
1027:         const company = companyRaw.toLowerCase().trim()
1028:         
1029:         const isConfidential = 
1030:           company.includes('confidential') ||
1031:           company.includes('anonymous') ||
1032:           company.includes('undisclosed') ||
1033:           company.includes('various') ||
1034:           company.includes('multiple') ||
1035:           company.includes('private') ||
1036:           company.includes('stealth') ||
1037:           company.includes('hidden') ||
1038:           company.includes('tbd') ||
1039:           company.includes('n/a') ||
1040:           company === '' ||
1041:           company.length < 3
1042:         
1043:         if (isConfidential) {
1044:           return false
1045:         }
1046:         return true
1047:       })
1048:       
1049:       // Filtered confidential postings
1050:       
1051:       // Enhance with board metadata
1052:       const enhanced = filtered.map((job: unknown) => {
1053:         const jobObj = job as Record<string, unknown>
1054:         return {
1055:           ...jobObj,
1056:           metadata: {
1057:             searchedBoards: targetBoards.length,
1058:             canadianPriority: includeCanadianOnly,
1059:             extractedAt: new Date().toISOString(),
1060:             confidentialFiltered: arr.length - filtered.length
1061:           }
1062:         }
1063:       })
1064:       
1065:       // FIXED: Only cache if we have good success rate (at least 80%)
1066:       const successRate = enhanced.length / limit
1067:       if (enhanced.length > 0 && successRate >= 0.8) {
1068:         setCache(key, enhanced)
1069:         // Cached jobs
1070:       } else if (enhanced.length > 0) {
1071:         // Skipping cache - low success rate
1072:       }
1073:       return enhanced
1074:     } catch (error) {
1075:       console.error('[PERPLEXITY] Job listings failed:', error)
1076:       return []
1077:     }
1078:   }
1079: 
1080:   // Fast SEARCH API for raw listings from specific domains (outside of template strings)
1081:   static async jobQuickSearch(query: string, domains: string[] = [], maxResults: number = 20, recency: 'day'|'week'|'month'|'year' = 'month'): Promise<QuickSearchItem[]> {
1082:     const key = makeKey('ppx:search', { query, domains, maxResults, recency })
1083:     const cached = getCache(key) as QuickSearchItem[] | undefined
1084:     if (cached) return cached
1085:     try {
1086:       const resp = await fetch('https://api.perplexity.ai/search', {
1087:         method: 'POST',
1088:         headers: {
1089:           'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY || ''}`,
1090:           'Content-Type': 'application/json'
1091:         },
1092:         body: JSON.stringify({
1093:           query,
1094:           max_results: Math.max(5, Math.min(25, maxResults)),
1095:           ...(domains.length ? { search_domain_filter: domains } : {}),
1096:           search_recency_filter: recency
1097:         })
1098:       })
1099:       if (!resp.ok) throw new Error('ppx search failed')
1100:       const data = await resp.json() as unknown
1101:       const asRecord = data as Record<string, unknown>
1102:       const arr = (Array.isArray(asRecord?.results) ? (asRecord.results as unknown[]) : (Array.isArray(data as unknown[]) ? (data as unknown[]) : []))
1103:       const mapped: QuickSearchItem[] = arr.map((raw: unknown) => {
1104:         const it = (raw || {}) as Record<string, unknown>
1105:         const title = typeof it.title === 'string' ? it.title : (typeof it.snippet === 'string' ? String(it.snippet) : '')
1106:         const url = typeof it.url === 'string' ? it.url : (typeof it.link === 'string' ? String(it.link) : '')
1107:         const snippet = typeof it.snippet === 'string' ? String(it.snippet) : (typeof it.summary === 'string' ? String(it.summary) : '')
1108:         const source = typeof it.domain === 'string' ? String(it.domain) : (typeof it.source === 'string' ? String(it.source) : '')
1109:         const publishedTime = it.published_time
1110:         const dateField = it.date
1111:         const published = (typeof publishedTime === 'string' ? publishedTime : (typeof dateField === 'string' ? dateField : undefined))
1112:         return { title, url, snippet, source, postedDate: published }
1113:       })
1114:       setCache(key, mapped)
1115:       return mapped
1116:     } catch {
1117:       return []
1118:     }
1119:   }
1120: 
1121:   // REMOVED: jobMarketAnalysis wrapper - Use jobMarketAnalysisV2 directly
1122:   /**
1123:    * V2: Enhanced job market analysis with options and ranking
1124:    * Now integrated with 25+ Canadian and global job boards
1125:    */
1126:   static async jobMarketAnalysisV2(
1127:     location: string, 
1128:     resumeText: string, 
1129:     options: { 
1130:       roleHint?: string
1131:       workType?: 'remote'|'hybrid'|'onsite'|'any'
1132:       salaryMin?: number
1133:       experienceLevel?: 'entry'|'mid'|'senior'|'executive'
1134:       maxResults?: number
1135:       boards?: string[] // Specify which boards to prioritize
1136:     } = {}
1137:   ): Promise<EnhancedResponse<JobListing[]>> {
1138:     const requestId = generateRequestId()
1139:     const started = Date.now()
1140:     const key = makeKey('ppx:jobmarket:v2', { location, resume: resumeText.slice(0,1000), options })
1141:     const cached = getCache(key) as JobListing[] | undefined
1142:     if (cached) return { success: true, data: cached, metadata: { requestId, timestamp: started, duration: Date.now() - started }, cached: true }
1143: 
1144:     // Determine if location is Canadian for prioritization
1145:     const isCanadian = /canada|canadian|toronto|vancouver|montreal|calgary|ottawa|edmonton|quebec|winnipeg|halifax/i.test(location)
1146:     const targetBoards = options.boards || (isCanadian 
1147:       ? DISCOVERY_PRIORITY_ORDER.filter(b => CANADIAN_JOB_BOARDS[b]).concat(['linkedin', 'indeed', 'glassdoor'])
1148:       : DISCOVERY_PRIORITY_ORDER.slice(0, 15)
1149:     )
1150: 
1151:     try {
1152:       const out = await withRetry(async () => {
1153:         const client = createClient()
1154:         const prompt = `Find ${options.maxResults || 25} relevant job opportunities in ${location} matching this profile.
1155: 
1156: RESUME:
1157: ${resumeText}
1158: 
1159: FILTERS:
1160: - Role: ${options.roleHint || '(infer from resume)'}
1161: - Work Type: ${options.workType || 'any'}
1162: - Experience: ${options.experienceLevel || 'any'}
1163: - Min Salary: ${options.salaryMin ? ('$' + options.salaryMin + '+') : 'any'}
1164: 
1165: PRIORITY JOB BOARDS (use site: search for each):
1166: ${targetBoards.slice(0, 12).map((board, i) => {
1167:   const config = CANADIAN_JOB_BOARDS[board] || MAJOR_JOB_BOARDS[board] || OPEN_API_BOARDS[board] || ATS_PLATFORMS[board]
1168:   const baseUrl = config?.scrapingConfig?.baseUrl || ''
1169:   const domain = baseUrl ? baseUrl.replace(/https?:\/\//, '').replace(/\/$/, '') : board
1170:   return `${i + 1}. site:${domain} "${options.roleHint || 'jobs'}" "${location}"`
1171: }).join('\n')}
1172: 
1173: ${isCanadian ? `
1174: CANADIAN ATS PLATFORMS - Check these tech companies:
1175: - Greenhouse: Shopify, Hootsuite, Wealthsimple, Faire, Thinkific, Lightspeed, Jobber
1176: - Lever: Slack, Bench, Clio, Clearco, League, ApplyBoard, Ritual
1177: - Workable: FreshBooks, Visier, Unbounce, Axonify, TouchBistro
1178: - Recruitee: Ecobee, Geotab, Auvik, Wave, KOHO, SkipTheDishes
1179: - Ashby: Faire, Clearco, Maple, Borrowell, Shakepay, Wealthsimple
1180: ` : ''}
1181: 
1182: REQUIREMENTS:
1183: 1. **CRITICAL**: Use real-time web search to find ACTUAL job postings from MULTIPLE boards
1184: 2. **PRIORITIZE LINKEDIN**: Search "site:linkedin.com/jobs ${options.roleHint || 'jobs'} ${location}" FIRST and get at least 15-20 LinkedIn jobs
1185: 3. Search other boards: "site:indeed.${isCanadian ? 'ca' : 'com'}", "site:glassdoor.${isCanadian ? 'ca' : 'com'}", etc.
1186: 4. Extract: title, company, location, URL (MUST be actual job posting URL), summary (at least 100 chars), posted date
1187: 5. **MANDATORY**: Return AT LEAST 30-40 jobs total. LinkedIn should be 40-50% of results.
1188: 6. **IMPORTANT**: Include jobs even if some fields are missing (use null for missing data)
1189: 7. Match resume skills to job requirements (estimate 0-100%)
1190: 8. If company is "Confidential", try to find real name from posting
1191: 9. **LINKEDIN URLS**: Must be format "https://www.linkedin.com/jobs/view/[job-id]" or "https://linkedin.com/jobs/collections/recommended/?currentJobId=[id]"
1192: 
1193: OUTPUT STRICT JSON ARRAY (no markdown, no wrapper object):
1194: [{
1195:   "title": "Job Title",
1196:   "company": "Company Name",
1197:   "location": "${location}",
1198:   "url": "https://...",
1199:   "source": "indeed",
1200:   "summary": "Brief description",
1201:   "postedDate": "2025-10-24",
1202:   "salary": "$50,000-$70,000" or null,
1203:   "skillMatchPercent": 75,
1204:   "skills": ["skill1", "skill2"],
1205:   "workType": "remote" or "hybrid" or "onsite",
1206:   "experienceLevel": "mid"
1207: }]
1208: 
1209: **CRITICAL**: Return the JSON array directly. Do NOT wrap in markdown. Return AT LEAST 25 jobs.`
1210: 
1211:         const res = await client.makeRequest(SYSTEM, prompt, { 
1212:           temperature: 0.2, // Slightly higher for more variety
1213:           maxTokens: 20000, // Increased to allow more jobs
1214:           model: 'sonar' // Use faster model for job search
1215:         })
1216:         if (!res.content?.trim()) throw new Error('Empty job analysis')
1217:         
1218:         console.log('[JOB_SEARCH_V2] Perplexity response received:', {
1219:           contentLength: res.content.length,
1220:           preview: res.content.slice(0, 500)
1221:         })
1222:         
1223:         return res
1224:       })
1225: 
1226:       console.log('[JOB_SEARCH_V2] Parsing response...')
1227:       let parsed: JobListing[] = []
1228:       
1229:       try {
1230:         let rawContent = out.content.trim()
1231:         console.log('[JOB_SEARCH_V2] Raw content preview:', rawContent.slice(0, 200))
1232:         
1233:         // CRITICAL FIX: Strip markdown code blocks
1234:         rawContent = rawContent.replace(/^```json\s*/i, '').replace(/```\s*$/i, '')
1235:         
1236:         // Try to extract JSON array if wrapped in object
1237:         const jsonMatch = rawContent.match(/\[[\s\S]*\]/)
1238:         if (jsonMatch) {
1239:           rawContent = jsonMatch[0]
1240:         }
1241:         
1242:         parsed = JSON.parse(rawContent) as JobListing[]
1243:         
1244:         console.log('[JOB_SEARCH_V2] Parsed jobs:', {
1245:           isArray: Array.isArray(parsed),
1246:           count: Array.isArray(parsed) ? parsed.length : 0,
1247:           firstJob: parsed[0] ? { title: parsed[0].title, company: parsed[0].company } : null
1248:         })
1249:       } catch (parseError) {
1250:         console.error('[JOB_SEARCH_V2] JSON parse error:', {
1251:           error: (parseError as Error).message,
1252:           contentPreview: out.content.slice(0, 500)
1253:         })
1254:         // Return empty array on parse error
1255:         parsed = []
1256:       }
1257:       
1258:       parsed = Array.isArray(parsed) ? parsed.slice(0, options.maxResults || 25) : []
1259:       
1260:       if (parsed.length === 0) {
1261:         console.warn('[JOB_SEARCH_V2] ⚠️ WARNING: Perplexity returned 0 jobs. This might indicate:')
1262:         console.warn('  1. No jobs found for this search')
1263:         console.warn('  2. Perplexity did not perform web search')
1264:         console.warn('  3. Response format is incorrect')
1265:         console.warn('  Content received:', out.content.slice(0, 1000))
1266:       }
1267:       
1268:       // CRITICAL FIX: Enrich jobs with short descriptions by scraping URLs
1269:       const enriched = await Promise.all(
1270:         parsed.map(async (job) => {
1271:           if (job.summary && job.summary.length < 150 && job.url) {
1272:             if (process.env.PPX_DEBUG === 'true') {
1273:               console.log(`[ENRICH] Scraping ${job.url} for full description...`)
1274:             }
1275:             const fullDescription = await this.scrapeJobURL(job.url)
1276:             if (fullDescription) {
1277:               return { ...job, summary: fullDescription }
1278:             }
1279:           }
1280:           return job
1281:         })
1282:       )
1283:       
1284:       // CRITICAL FIX: Validate job listings after enrichment
1285:       parsed = this.validateJobListings(enriched, options.maxResults || 25)
1286:       
1287:       // Enhance and normalize
1288:       parsed = parsed.map(j => ({
1289:         ...j,
1290:         skills: normalizeSkills(j.skills || []),
1291:         skillMatchPercent: Math.max(0, Math.min(100, j.skillMatchPercent || 0)),
1292:         workType: j.workType || 'onsite',
1293:         experienceLevel: j.experienceLevel || 'mid',
1294:         source: j.source || (typeof j.url === 'string' ? (new URL(j.url)).hostname.replace(/^www\./,'') : undefined),
1295:         benefits: j.benefits || [],
1296:         requirements: j.requirements || [],
1297:         metadata: {
1298:           searchedBoards: targetBoards.length,
1299:           isCanadianSearch: isCanadian,
1300:           extractedAt: new Date().toISOString()
1301:         }
1302:       }))
1303: 
1304:       // Sort by match quality, then recency
1305:       parsed.sort((a,b)=>{
1306:         if (Math.abs(a.skillMatchPercent - b.skillMatchPercent) > 5) {
1307:           return b.skillMatchPercent - a.skillMatchPercent
1308:         }
1309:         return new Date(b.postedDate).getTime() - new Date(a.postedDate).getTime()
1310:       })
1311: 
1312:       setCache(key, parsed)
1313:       return { 
1314:         success: true, 
1315:         data: parsed,
1316:         metadata: { 
1317:           requestId, 
1318:           timestamp: started, 
1319:           duration: Date.now() - started,
1320:           boardsSearched: targetBoards.length,
1321:           resultsCount: parsed.length
1322:         }, 
1323:         cached: false 
1324:       }
1325:     } catch (e) {
1326:       console.error('[JOB_SEARCH_ERROR] Job search failed:', {
1327:         error: (e as Error).message,
1328:         stack: (e as Error).stack,
1329:         location,
1330:         roleHint: options.roleHint,
1331:         boards: targetBoards.slice(0, 5)
1332:       })
1333:       
1334:       return { 
1335:         success: false, 
1336:         data: [], 
1337:         metadata: { 
1338:           requestId, 
1339:           timestamp: started, 
1340:           duration: Date.now() - started, 
1341:           error: (e as Error).message 
1342:         }, 
1343:         cached: false 
1344:       }
1345:     }
1346:   }
1347: 
1348:   // V2: Enhanced hiring contacts with email enrichment and discovery
1349:   static async hiringContactsV2(companyName: string): Promise<EnhancedResponse<HiringContact[]>> {
1350:     const requestId = generateRequestId()
1351:     const started = Date.now()
1352:     const key = makeKey('ppx:contacts:v2', { companyName })
1353:     const cached = getCache(key) as HiringContact[] | undefined
1354:     if (cached) return { success: true, data: cached, metadata: { requestId, timestamp: started, duration: Date.now() - started }, cached: true }
1355:     try {
1356:       const out = await withRetry(async () => {
1357:         const client = createClient()
1358:         
1359:         // PERPLEXITY AUDIT FIX: Use optimal configuration
1360:         const { getPerplexityConfig } = await import('./config/perplexity-configs')
1361:         const config = getPerplexityConfig('hiringContacts')
1362:         
1363:         // ULTRA-AGGRESSIVE: Multi-platform exhaustive contact scraping
1364:         const prompt = `Find ALL public hiring contacts for ${companyName} using exhaustive web and social media research.
1365: 
1366: MANDATORY SEARCH LOCATIONS (check ALL of these):
1367: 
1368: 🌐 OFFICIAL WEBSITE (VISIT AND SCRAPE):
1369: 1. **VISIT** ${companyName} official website /contact page - EXTRACT all emails
1370: 2. **VISIT** ${companyName} official website /careers page - EXTRACT contact info
1371: 3. **VISIT** ${companyName} official website /about page - EXTRACT team emails
1372: 4. **VISIT** ${companyName} official website /team page - EXTRACT individual emails
1373: 5. **VISIT** Website footer - EXTRACT contact emails
1374: 6. Look for: careers@, hr@, jobs@, recruiting@, talent@, info@, contact@, hello@
1375: 
1376: 🔍 GOOGLE SEARCHES (FOLLOW TOP 3 RESULTS):
1377: - "${companyName} HR email" - **VISIT top results and EXTRACT emails**
1378: - "${companyName} careers contact" - **VISIT and EXTRACT**
1379: - "${companyName} recruiter email" - **VISIT and EXTRACT**
1380: - "${companyName} talent acquisition contact" - **VISIT and EXTRACT**
1381: - "${companyName} hiring manager" - **VISIT and EXTRACT**
1382: 
1383: 🔗 LINKEDIN (VISIT PROFILES):
1384: - Search: site:linkedin.com/in/ "${companyName}" recruiter
1385: - Search: site:linkedin.com/in/ "${companyName}" HR
1386: - Search: site:linkedin.com/in/ "${companyName}" talent acquisition
1387: - **VISIT** Company LinkedIn page: linkedin.com/company/${companyName.toLowerCase().replace(/\s+/g, '-')}
1388: - **VISIT** individual LinkedIn profiles of HR employees
1389: - Extract REAL names, titles, and profile URLs
1390: 
1391: 🐦 TWITTER/X (VISIT PAGES):
1392: - Search: site:twitter.com "${companyName}" careers
1393: - **VISIT** Company Twitter bio for contact info
1394: 
1395: 📘 FACEBOOK (VISIT PAGES):
1396: - Search: site:facebook.com "${companyName}" jobs
1397: - **VISIT** Company Facebook page About section
1398: 
1399: 📷 INSTAGRAM (VISIT BIO):
1400: - **VISIT** Company Instagram bio for contact email
1401: 
1402: 💼 JOB BOARDS (VISIT POSTINGS):
1403: - Search: site:indeed.com "${companyName}" contact
1404: - Search: site:glassdoor.com "${companyName}" contact
1405: - **VISIT** Job postings and EXTRACT direct contact info
1406: 
1407: 📧 CONTACTOUT / HUNTER.IO:
1408: - Search: site:contactout.com "${companyName}"
1409: - **VISIT** any ContactOut pages and EXTRACT verified emails
1410: 
1411: EXTRACT ONLY VERIFIED PUBLIC INFORMATION:
1412: ✅ Email addresses you SEE on websites (careers@, hr@, jobs@, recruiting@, talent@)
1413: ✅ Direct employee emails found on LinkedIn/website (firstname.lastname@domain)
1414: ✅ Phone numbers for HR/recruiting
1415: ✅ LinkedIn profile URLs of recruiters/HR with REAL names
1416: ✅ Company careers page URL
1417: 
1418: STRICT RULES:
1419: 🚫 Do NOT infer or generate any email addresses
1420: 🚫 Do NOT guess email patterns
1421: 🚫 ONLY return information you can SEE on public pages
1422: 🚫 Do NOT include personal emails (gmail, yahoo, hotmail)
1423: 🚫 Do NOT make up names or contacts
1424: 
1425: RETURN FORMAT (JSON array):
1426: [
1427:   {
1428:     "name": "Sarah Johnson",
1429:     "title": "Senior Recruiter",
1430:     "email": "sarah.johnson@company.com",
1431:     "phone": "+1-888-742-6417",
1432:     "linkedinUrl": "https://linkedin.com/in/sarahjohnson",
1433:     "source": "LinkedIn profile",
1434:     "platform": "LinkedIn"
1435:   },
1436:   {
1437:     "name": "HR Department",
1438:     "title": "Human Resources",
1439:     "email": "careers@company.com",
1440:     "source": "Company website",
1441:     "platform": "Website"
1442:   }
1443: ]
1444: 
1445: IF ZERO VERIFIED CONTACTS FOUND, return empty array: []
1446: 
1447: IMPORTANT: Search ALL platforms listed above. Return ONLY verified contacts you actually found.`
1448: 
1449:         // PERPLEXITY AUDIT FIX: Use optimal token limits + sonar-pro for research
1450:         return client.makeRequest(SYSTEM, prompt, { 
1451:           temperature: config.temperature, 
1452:           maxTokens: config.maxTokens,
1453:           model: 'sonar-pro' // Use research model for multi-source search
1454:         })
1455:       })
1456:       
1457:       // CRITICAL DEBUG: Log raw Perplexity output (Perplexity recommendation)
1458:       if (process.env.PPX_DEBUG === 'true') {
1459:         console.log('[PERPLEXITY RAW]', {
1460:           method: 'hiringContactsV2',
1461:           company: companyName,
1462:           contentLength: out.content.length,
1463:           contentPreview: out.content.slice(0, 500)
1464:         })
1465:       }
1466:       
1467:       // Parse and clean Perplexity response - ENTERPRISE-GRADE JSON EXTRACTION
1468:       let cleanedContent = out.content.trim()
1469:       
1470:       // Step 1: Remove markdown code blocks
1471:       cleanedContent = cleanedContent.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '')
1472:       
1473:       // Step 2: Extract JSON array from any surrounding text
1474:       const jsonMatch = cleanedContent.match(/\[[\s\S]*?\]/);
1475:       if (jsonMatch) {
1476:         cleanedContent = jsonMatch[0]
1477:       } else {
1478:         // Step 3: If no array found, check for explanatory text with JSON after it
1479:         const afterTextMatch = cleanedContent.match(/(?:Here|I found|Below|Results?)[\s\S]*?(\[[\s\S]*?\])/i);
1480:         if (afterTextMatch) {
1481:           cleanedContent = afterTextMatch[1]
1482:         } else {
1483:           console.warn('[HIRING_CONTACTS] No JSON array found in response, returning empty array')
1484:           return { success: false, data: [], metadata: { requestId, timestamp: started, duration: Date.now() - started, error: 'No JSON array in response' }, cached: false }
1485:         }
1486:       }
1487:       
1488:       // PERPLEXITY AUDIT FIX: Use enterprise-grade JSON extraction
1489:       const { extractEnterpriseJSON } = await import('./utils/enterprise-json-extractor')
1490:       const extractionResult = extractEnterpriseJSON(cleanedContent)
1491:       
1492:       if (!extractionResult.success) {
1493:         console.error('[HIRING_CONTACTS] Enterprise JSON extraction failed:', extractionResult.error)
1494:         console.error('[HIRING_CONTACTS] Attempted cleanups:', extractionResult.attemptedCleanups)
1495:         console.error('[HIRING_CONTACTS] Raw content preview:', out.content.slice(0, 500))
1496:         return { 
1497:           success: false, 
1498:           data: [], 
1499:           metadata: { 
1500:             requestId, 
1501:             timestamp: started, 
1502:             duration: Date.now() - started, 
1503:             error: `Enterprise JSON extraction failed: ${extractionResult.error}`,
1504:             attemptedCleanups: extractionResult.attemptedCleanups
1505:           }, 
1506:           cached: false 
1507:         }
1508:       }
1509:       
1510:       // CRITICAL FIX: ALWAYS ensure we have an array (never undefined/null)
1511:       let parsed: HiringContact[] = []
1512:       
1513:       if (Array.isArray(extractionResult.data)) {
1514:         parsed = extractionResult.data.slice(0, 8)
1515:       } else if (extractionResult.data && typeof extractionResult.data === 'object') {
1516:         // Handle case where AI returns single object instead of array
1517:         parsed = [extractionResult.data]
1518:       }
1519:       
1520:       // Enterprise extraction succeeded
1521:       
1522:       // CRITICAL: Validate and filter contacts - reject fake/personal emails
1523:       const personalDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'aol.com', 'icloud.com', 'protonmail.com']
1524:       parsed = parsed.filter(contact => {
1525:         // Must have at least one contact method
1526:         if (!contact.email && !contact.phone && !contact.linkedinUrl) {
1527:           console.warn(`[HIRING_CONTACTS] Rejected contact with no contact method: ${contact.name}`)
1528:           return false
1529:         }
1530:         
1531:         // Reject inferred/template emails
1532:         if (contact.email?.includes('[') || 
1533:             contact.email?.includes('example.') || 
1534:             contact.email?.includes('domain.') ||
1535:             contact.email?.includes('VISIT_WEBSITE')) {
1536:           console.warn(`[HIRING_CONTACTS] Rejected template email: ${contact.email}`)
1537:           return false
1538:         }
1539:         
1540:         // Reject personal emails
1541:         if (contact.email && personalDomains.some(d => contact.email!.toLowerCase().endsWith(d))) {
1542:           console.warn(`[HIRING_CONTACTS] Rejected personal email: ${contact.email}`)
1543:           return false
1544:         }
1545:         
1546:         // Reject LinkedIn profiles without proper URL
1547:         if (contact.linkedinUrl && !contact.linkedinUrl.includes('linkedin.com/')) {
1548:           console.warn(`[HIRING_CONTACTS] Rejected invalid LinkedIn URL: ${contact.linkedinUrl}`)
1549:           return false
1550:         }
1551:         
1552:         return true
1553:       })
1554:       
1555:       // Validation complete
1556:       
1557:       // Enhance each contact with metadata
1558:       parsed = parsed.map(c => {
1559:         const domain = `${companyName.toLowerCase().replace(/\s+/g,'').replace(/[^a-z0-9]/g,'')}.com`
1560:         const inferred = c.name ? inferEmails(c.name, domain) : []
1561:         
1562:         return { 
1563:           ...c, 
1564:           confidence: Math.max(0, Math.min(1, c.confidence || 0.5)), 
1565:           alternativeEmails: c.alternativeEmails || inferred, 
1566:           emailType: (c.email ? c.emailType : 'pattern') as 'public'|'inferred'|'pattern',
1567:           discoveryMethod: c.discoveryMethod || (c.email ? 'Direct lookup' : 'Pattern inference')
1568:         }
1569:       })
1570:       
1571:       // Final result prepared
1572:       
1573:       // CRITICAL FIX: Validate contacts before returning
1574:       const validated = this.validateHiringContacts(parsed)
1575:       
1576:       // CRITICAL FIX: NO INFERRED EMAILS - return empty if none verified
1577:       // User should visit company website or use LinkedIn instead of contacting fake emails
1578:       const finalContacts = validated
1579:       
1580:       // Cache the result (even if empty)
1581:       setCache(key, finalContacts)
1582:       
1583:       return { 
1584:         success: validated.length > 0, 
1585:         data: finalContacts, 
1586:         metadata: { 
1587:           requestId, 
1588:           timestamp: started, 
1589:           duration: Date.now() - started,
1590:           contactsFound: finalContacts.length,
1591:           withEmails: finalContacts.filter(c => c.email).length,
1592:           error: validated.length === 0 
1593:             ? `No verified hiring contacts found for ${companyName}. Visit company website or use LinkedIn InMail.` 
1594:             : undefined
1595:         }, 
1596:         cached: false 
1597:       }
1598:     } catch (e) {
1599:       console.error('[HIRING_CONTACTS] Error:', e)
1600:       return { success: false, data: [], metadata: { requestId, timestamp: started, duration: Date.now() - started, error: (e as Error).message }, cached: false }
1601:     }
1602:   }
1603: 
1604:   // ... (rest of the code remains the same)
1605: 
1606:   // Extract normalized keywords and location from resume (STRICT JSON)
1607:   static async extractResumeSignals(
1608:     resumeText: string,
1609:     maxKeywords: number = 50
1610:   ): Promise<{ keywords: string[]; location?: string; locations?: string[]; personalInfo?: { name?: string; email?: string; phone?: string } }> {
1611:     const key = makeKey('ppx:resume:signals:v3', { t: resumeText.slice(0, 3000), maxKeywords })
1612:     const cached = getCache(key) as { keywords: string[]; location?: string; locations?: string[] } | undefined
1613:     if (cached) return cached
1614: 
1615:     try {
1616:       const client = createClient()
1617:       
1618:       // ENTERPRISE PROMPT - WEIGHTED KEYWORD EXTRACTION WITH TIME-BASED RELEVANCE
1619:       const prompt = `CRITICAL TASK: Extract weighted keywords, location, and personal info from this resume.
1620: 
1621: RESUME TEXT:
1622: ${resumeText}
1623: 
1624: KEYWORD EXTRACTION WITH TIME-BASED WEIGHTING:
1625: 1. Extract ALL relevant skills, technologies, and competencies (up to 50)
1626: 2. WEIGHT keywords based on:
1627:    - Years of experience using that skill (more years = higher priority)
1628:    - Recency (recent roles = higher weight than old roles or education)
1629:    - Frequency of mention across work experience
1630: 3. ORDER keywords by weighted relevance (most important first)
1631: 4. Skills from work experience should be weighted HIGHER than skills from education only
1632: 5. Calculate weight as: (years using skill / total career years) * recency_multiplier
1633: 
1634: LOCATION EXTRACTION RULES:
1635: 1. Find ANY city/province/state mentioned (email header, address, work experience)
1636: 2. Look for patterns like "City, PROVINCE" or "City, STATE"
1637: 3. Check contact information section first
1638: 4. If multiple locations, use the FIRST one found (likely primary)
1639: 5. Return EXACTLY as found (e.g., "Edmonton, AB" not "Edmonton, Alberta")
1640: 
1641: PERSONAL INFORMATION EXTRACTION:
1642: 1. Extract full name (usually at the top of resume)
1643: 2. Extract email address (look for @ symbol)
1644: 3. Extract phone number (look for phone patterns)
1645: 4. If not found, return null for that field
1646: 
1647: RETURN STRICT JSON (no explanation, no markdown):
1648: {
1649:   "keywords": ["Most Important Skill", "Second Most Important", "...", "50th skill"],
1650:   "location": "City, PROVINCE",
1651:   "personalInfo": {
1652:     "name": "Full Name",
1653:     "email": "email@example.com",
1654:     "phone": "555-1234"
1655:   }
1656: }
1657: 
1658: IMPORTANT: 
1659: - Order keywords by weighted importance (years of experience + recency)
1660: - If NO location found after thorough search, return "location": null (do NOT guess or default)
1661: - If personal info not found, return null for those fields`
1662: 
1663:       // Processing resume signals
1664: 
1665:       const response = await client.makeRequest(
1666:         'You extract keywords and locations from resumes. Return only JSON.',
1667:         prompt,
1668:         { temperature: 0.2, maxTokens: 2000, model: 'sonar-pro' } // CRITICAL FIX: Increased from 800 to handle 50 keywords
1669:       )
1670: 
1671:       if (process.env.PPX_DEBUG === 'true') {
1672:         console.log('[SIGNALS] Raw response:', response.content?.slice(0, 400))
1673:       }
1674: 
1675:       // ENTERPRISE FIX: Strip markdown code blocks that Perplexity sometimes adds
1676:       let cleanedContent = response.content.trim()
1677:       
1678:       // Remove markdown code fences (```json ... ``` or ``` ... ```)
1679:       cleanedContent = cleanedContent.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '')
1680:       
1681:       // Extract JSON array/object if wrapped in explanatory text
1682:       const jsonMatch = cleanedContent.match(/(\{[\s\S]*\}|\[[\s\S]*\])/);
1683:       if (jsonMatch) {
1684:         cleanedContent = jsonMatch[0]
1685:       }
1686: 
1687:       const parsed = JSON.parse(cleanedContent) as { keywords: string[]; location?: string; locations?: string[]; personalInfo?: { name?: string; email?: string; phone?: string } }
1688:       
1689:       if (process.env.PPX_DEBUG === 'true') {
1690:         console.log('[SIGNALS] Parsed:', {
1691:           keywordCount: parsed.keywords?.length,
1692:           location: parsed.location,
1693:           hasLocations: !!parsed.locations,
1694:           personalInfo: parsed.personalInfo
1695:         })
1696:       }
1697: 
1698:       setCache(key, parsed)
1699:       return parsed
1700:     } catch (error) {
1701:       console.error('═══════════════════════════════════════════════════════')
1702:       console.error('[EXTRACT SIGNALS] ❌ PERPLEXITY EXTRACTION FAILED')
1703:       console.error('═══════════════════════════════════════════════════════')
1704:       console.error('[EXTRACT SIGNALS] Error:', (error as Error).message)
1705:       console.error('[EXTRACT SIGNALS] Resume text length:', resumeText.length, 'chars')
1706:       console.error('[EXTRACT SIGNALS] First 300 chars of resume:')
1707:       console.error(resumeText.substring(0, 300))
1708:       console.error('═══════════════════════════════════════════════════════')
1709:       
1710:       // CRITICAL: Don't return fake data - throw error so upload route can handle it
1711:       throw new Error(`Failed to extract resume signals: ${(error as Error).message}. Resume may be missing contact information or is corrupted.`)
1712:     }
1713:   }
1714: 
1715:   // ... (rest of the code remains the same)
1716: 
1717:   /**
1718:    * ONE-SHOT COMPREHENSIVE RESEARCH
1719:    * Replaces multiple API calls with a single comprehensive prompt
1720:    * Returns: Job Analysis + Company Research + Hiring Contacts + News + Reviews
1721:    * 
1722:    * @param params - Job and resume details
1723:    * @returns Complete research data for all Career Finder pages
1724:    */
1725:   static async comprehensiveJobResearch(params: {
1726:     jobTitle: string
1727:     company: string
1728:     jobDescription: string
1729:     location?: string
1730:     resumeText: string
1731:     resumeSkills?: string[]
1732:   }): Promise<EnhancedResponse<ComprehensiveJobResearchData | null>> {
1733:     const requestId = generateRequestId()
1734:     const started = Date.now()
1735: 
1736:     try {
1737:       const client = createClient()
1738: 
1739:       const prompt = `COMPREHENSIVE JOB APPLICATION RESEARCH
1740: 
1741: - Position: ${params.jobTitle}
1742: - Company: ${params.company}
1743: - Location: ${params.location || 'Not specified'}
1744: - Description: ${params.jobDescription.slice(0, 1000)}
1745: 
1746: CANDIDATE SKILLS: ${params.resumeSkills ? params.resumeSkills.slice(0, 20).join(', ') : 'Extract from resume below'}
1747: 
1748: RESUME TEXT (First 2000 chars):
1749: ${params.resumeText.slice(0, 2000)}
1750: 
1751: ---
1752: 
1753: YOUR MISSION: Conduct a comprehensive research report covering ALL of the following sections. This is a ONE-TIME research call, so be thorough and detailed. Include clickable URLs wherever possible.
1754: 
1755: OUTPUT FORMAT (Valid JSON ONLY):
1756: \`\`\`json
1757: {
1758:   "jobAnalysis": {
1759:     "matchScore": 85,
1760:     "matchingSkills": ["skill1", "skill2"],
1761:     "missingSkills": ["skill3", "skill4"],
1762:     "skillsToHighlight": ["top skill to emphasize"],
1763:     "recommendations": ["specific action 1", "specific action 2"],
1764:     "estimatedFit": "Excellent|Good|Moderate|Poor"
1765:   },
1766:   "companyIntel": {
1767:     "company": "${params.company}",
1768:     "description": "detailed company overview (minimum 200 chars)",
1769:     "size": "employee count or range",
1770:     "revenue": "annual revenue if public",
1771:     "industry": "primary industry",
1772:     "founded": "year",
1773:     "headquarters": "city, state/country",
1774:     "website": "https://company.com",
1775:     "marketPosition": "market leader|challenger|niche player",
1776:     "generalEmail": "ONLY include if found on company website or LinkedIn - DO NOT GUESS. Leave empty if not found.",
1777:     "careersPage": "https://company.com/careers"
1778:   },
1779:   "companyPsychology": {
1780:     "culture": "detailed culture description based on reviews and public info",
1781:     "values": ["value1", "value2", "value3"],
1782:     "managementStyle": "hierarchical|flat|hybrid",
1783:     "workEnvironment": "remote-friendly|hybrid|office-centric"
1784:   },
1785:   "hiringContacts": [
1786:     {
1787:       "name": "Real Person Name - ONLY if found on LinkedIn or company website",
1788:       "title": "Talent Acquisition Manager",
1789:       "department": "Human Resources",
1790:       "email": "ONLY include if verified from LinkedIn or company website - DO NOT GUESS. Leave empty if not found.",
1791:       "linkedinUrl": "https://linkedin.com/in/person - ONLY if found",
1792:       "authority": "decision maker",
1793:       "confidence": 0.9
1794:     }
1795:   ],
1796:   "CRITICAL_INSTRUCTION": "DO NOT GUESS EMAILS. Only include emails that are explicitly found on the company website, LinkedIn profiles, or other verified sources. If no email is found, leave the field empty or set to null. NEVER construct emails like info@company.com or careers@company.com unless they are explicitly listed on official sources.",
1797:   "marketIntelligence": {
1798:     "competitivePosition": "how company compares to competitors",
1799:     "industryTrends": "relevant industry trends affecting this role",
1800:     "financialStability": "financial health assessment",
1801:     "recentPerformance": "last 12 months highlights"
1802:   },
1803:   "news": [
1804:     {
1805:       "title": "Recent news headline",
1806:       "summary": "Brief summary of the article",
1807:       "url": "https://newsource.com/article",
1808:       "date": "2024-01-15",
1809:       "source": "TechCrunch",
1810:       "impact": "positive|neutral|negative for employment"
1811:     }
1812:   ],
1813:   "reviews": [
1814:     {
1815:       "platform": "Glassdoor",
1816:       "rating": 4.2,
1817:       "summary": "Overall employee sentiment summary",
1818:       "url": "https://glassdoor.com/company-reviews",
1819:       "pros": ["pro1", "pro2"],
1820:       "cons": ["con1", "con2"]
1821:     }
1822:   ],
1823:   "compensation": {
1824:     "salaryRange": "$XX,000 - $YY,000 for ${params.jobTitle}",
1825:     "benefits": "typical benefits package"
1826:   },
1827:   "strategicRecommendations": {
1828:     "applicationStrategy": "specific advice on how to apply",
1829:     "contactStrategy": "who to contact first and how",
1830:     "interviewPrep": ["prepare for X", "research Y", "practice Z"]
1831:   },
1832:   "sources": ["https://source1.com", "https://source2.com", "https://source3.com"],
1833:   "confidenceLevel": 0.85
1834: }
1835: \`\`\`
1836: 
1837: CRITICAL REQUIREMENTS:
1838: 1. Job Analysis: Compare resume skills to job requirements, calculate match score
1839: 2. Company Intel: Search company website, LinkedIn, Crunchbase, Wikipedia for REAL data
1840:    - MUST find general company email (careers@, hr@, jobs@, info@, contact@)
1841:    - Check company website contact page, footer, careers page
1842:    - If no email found, generate likely addresses based on domain
1843: 3. Hiring Contacts: **CRITICAL - MUST FIND CONTACTS**
1844:    - Search LinkedIn, Twitter, Facebook, Instagram, company website
1845:    - Minimum 2-3 REAL hiring contacts if company has 10+ employees
1846:    - Include verified LinkedIn URLs and emails where possible
1847:    - DO NOT return fake/placeholder names
1848:    - **MANDATORY FALLBACK**: If no hiring contacts found, extract company general inbox:
1849:      * Check: careers@, hr@, jobs@, info@, hello@, contact@, support@
1850:      * Return as: {"name":"General Inbox","title":"Company Contact","email":"found@company.com"}
1851:    - NEVER return empty contacts array - app is useless without contact info
1852: 4. News: Find 2-5 recent news articles about the company with clickable URLs
1853: 5. Reviews: Search Glassdoor, Indeed, Comparably for employee reviews with clickable URLs
1854: 6. Market Intelligence: Research industry trends, competitive landscape
1855: 7. Strategic Recommendations: Provide actionable, company-specific advice
1856: 
1857: IMPORTANT:
1858: - Return ONLY valid JSON (no markdown, no explanations)
1859: - All URLs must be real and clickable
1860: - If data not found after searching, use "Not available" but ALWAYS try multiple sources first
1861: - Focus on actionable intelligence, not generic advice`
1862: 
1863:       const out = await withRetry(async () => {
1864:         return client.makeRequest(
1865:           'You are an elite corporate intelligence analyst providing comprehensive job application research. Return detailed JSON with all requested fields.',
1866:           prompt,
1867:           {
1868:             temperature: 0.2,
1869:             maxTokens: 8000,
1870:             model: 'sonar-pro'
1871:           }
1872:         )
1873:       })
1874: 
1875:       if (process.env.PPX_DEBUG === 'true') {
1876:         console.log('[COMPREHENSIVE_RESEARCH] Raw response length:', out.content.length)
1877:       }
1878: 
1879:       // Parse response
1880:       let cleanedContent = out.content.trim()
1881:       
1882:       // Remove markdown code blocks
1883:       cleanedContent = cleanedContent.replace(/^```(?:json)?\s*/gm, '').replace(/```\s*$/gm, '')
1884:       
1885:       // Extract JSON object
1886:       const jsonMatch = cleanedContent.match(/\{[\s\S]*\}/)
1887:       if (jsonMatch) {
1888:         cleanedContent = jsonMatch[0]
1889:       }
1890: 
1891:       const parsed = JSON.parse(cleanedContent) as Partial<ComprehensiveJobResearchData>
1892: 
1893:       // Construct with fallbacks
1894:       const data: ComprehensiveJobResearchData = {
1895:         jobAnalysis: {
1896:           matchScore: parsed.jobAnalysis?.matchScore ?? 0,
1897:           matchingSkills: parsed.jobAnalysis?.matchingSkills ?? [],
1898:           missingSkills: parsed.jobAnalysis?.missingSkills ?? [],
1899:           skillsToHighlight: parsed.jobAnalysis?.skillsToHighlight ?? [],
1900:           recommendations: parsed.jobAnalysis?.recommendations ?? [],
1901:           estimatedFit: parsed.jobAnalysis?.estimatedFit ?? 'Unknown'
1902:         },
1903:         companyIntel: {
1904:           company: parsed.companyIntel?.company ?? params.company,
1905:           description: parsed.companyIntel?.description ?? 'No description available',
1906:           size: parsed.companyIntel?.size ?? 'Unknown',
1907:           revenue: parsed.companyIntel?.revenue,
1908:           industry: parsed.companyIntel?.industry ?? 'Unknown',
1909:           founded: parsed.companyIntel?.founded,
1910:           headquarters: parsed.companyIntel?.headquarters,
1911:           website: parsed.companyIntel?.website,
1912:           marketPosition: parsed.companyIntel?.marketPosition
1913:         },
1914:         companyPsychology: {
1915:           culture: parsed.companyPsychology?.culture ?? 'No information available',
1916:           values: parsed.companyPsychology?.values ?? [],
1917:           managementStyle: parsed.companyPsychology?.managementStyle,
1918:           workEnvironment: parsed.companyPsychology?.workEnvironment
1919:         },
1920:         hiringContacts: Array.isArray(parsed.hiringContacts)
1921:           ? parsed.hiringContacts
1922:               .map(contact => ({
1923:                 name: contact.name,
1924:                 title: contact.title,
1925:                 department: contact.department,
1926:                 email: contact.email,
1927:                 linkedinUrl: contact.linkedinUrl,
1928:                 authority: contact.authority ?? 'manager',
1929:                 confidence: contact.confidence ?? 0,
1930:                 contactMethod: contact.contactMethod
1931:               }))
1932:               .filter(contact => !!contact?.name && contact?.title)
1933:           : [],
1934:         marketIntelligence: {
1935:           competitivePosition: parsed.marketIntelligence?.competitivePosition,
1936:           industryTrends: parsed.marketIntelligence?.industryTrends,
1937:           financialStability: parsed.marketIntelligence?.financialStability,
1938:           recentPerformance: parsed.marketIntelligence?.recentPerformance
1939:         },
1940:         news: Array.isArray(parsed.news)
1941:           ? parsed.news
1942:               .map(item => (item?.title && item?.summary && item?.url
1943:                 ? {
1944:                     title: item.title,
1945:                     summary: item.summary,
1946:                     url: item.url,
1947:                     date: item.date,
1948:                     source: item.source,
1949:                     impact: item.impact
1950:                   }
1951:                 : undefined))
1952:               .filter((item): item is NonNullable<typeof item> => !!item)
1953:           : [],
1954:         reviews: Array.isArray(parsed.reviews)
1955:           ? parsed.reviews
1956:               .map(item => (item?.platform && item?.summary && item?.url
1957:                 ? {
1958:                     platform: item.platform,
1959:                     rating: item.rating,
1960:                     summary: item.summary,
1961:                     url: item.url,
1962:                     pros: item.pros,
1963:                     cons: item.cons
1964:                   }
1965:                 : undefined))
1966:               .filter((item): item is NonNullable<typeof item> => !!item)
1967:           : [],
1968:         compensation: parsed.compensation ?? {},
1969:         strategicRecommendations: {
1970:           applicationStrategy: parsed.strategicRecommendations?.applicationStrategy ?? 'Apply through company website',
1971:           contactStrategy: parsed.strategicRecommendations?.contactStrategy ?? 'Reach out to HR via LinkedIn',
1972:           interviewPrep: parsed.strategicRecommendations?.interviewPrep ?? []
1973:         },
1974:         sources: Array.isArray(parsed.sources)
1975:           ? parsed.sources.filter((source): source is string => typeof source === 'string')
1976:           : [],
1977:         confidenceLevel: parsed.confidenceLevel ?? 0.5
1978:       }
1979: 
1980:       if (process.env.PPX_DEBUG === 'true') {
1981:         console.log('[COMPREHENSIVE_RESEARCH] Complete -', 
1982:           'matchScore:', data.jobAnalysis.matchScore, 
1983:           'contacts:', data.hiringContacts.length, 
1984:           'news:', data.news.length, 
1985:           'reviews:', data.reviews.length, 
1986:           'confidence:', data.confidenceLevel
1987:         )
1988:       }
1989: 
1990:       return {
1991:         success: true,
1992:         data,
1993:         metadata: { requestId, timestamp: started, duration: Date.now() - started },
1994:         cached: false
1995:       }
1996:     } catch (error) {
1997:       console.error('[COMPREHENSIVE_RESEARCH] Error:', error)
1998:       return {
1999:         success: false,
2000:         data: null,
2001:         metadata: { 
2002:           requestId, 
2003:           timestamp: started, 
2004:           duration: Date.now() - started,
2005:           error: (error as Error).message 
2006:         },
2007:         cached: false
2008:       }
2009:     }
2010:   }
2011: 
2012:   // Resume Optimizer: Generate tailored resume variants
2013:   static async generateResumeVariants(params: {
2014:     resumeText: string
2015:     jobTitle: string
2016:     jobRequirements: string[]
2017:     companyInsights: { culture: string; values: string[]; industry: string }
2018:     template?: string
2019:   }): Promise<EnhancedResponse<{
2020:     variantA: string
2021:     variantB: string
2022:     recommendations: string[]
2023:   }>> {
2024:     const requestId = generateRequestId()
2025:     const started = Date.now()
2026:     const cacheKey = makeKey('resume-variants', params)
2027:     
2028:     const cached = getCache(cacheKey)
2029:     if (cached) {
2030:       return {
2031:         success: true,
2032:         data: cached as { variantA: string; variantB: string; recommendations: string[] },
2033:         metadata: { requestId, timestamp: started, duration: 0 },
2034:         cached: true
2035:       }
2036:     }
2037: 
2038:     try {
2039:       const client = createClient()
2040:       const systemPrompt = 'You are a professional resume optimization expert. Return only valid JSON with properly formatted resume text.'
2041:       
2042:       // Build template-specific instructions
2043:       const templateInstructions = {
2044:         modern: 'Use a contemporary style with visual hierarchy. Emphasize innovation and forward-thinking achievements.',
2045:         professional: 'Use traditional, formal language. Focus on stability, reliability, and proven track record.',
2046:         creative: 'Use dynamic language and unique phrasing. Highlight creativity, innovation, and out-of-the-box thinking.',
2047:         tech: 'Use technical terminology and emphasize projects, technologies, and technical achievements.',
2048:         minimal: 'Use simple, direct language. Focus on facts and quantifiable results. Maximum ATS compatibility.',
2049:         executive: 'Use leadership language. Emphasize strategic impact, team leadership, and business results.'
2050:       }
2051:       
2052:       const templateStyle = templateInstructions[params.template as keyof typeof templateInstructions] || templateInstructions.modern
2053:       
2054:       const userPrompt = `Analyze this resume and create TWO tailored variants for the target role using the ${params.template} template style.
2055: 
2056: **Resume:**
2057: ${params.resumeText}
2058: 
2059: **Target Role:** ${params.jobTitle}
2060: 
2061: **Key Requirements:**
2062: ${params.jobRequirements.map((req, i) => `${i + 1}. ${req}`).join('\n')}
2063: 
2064: **Company Culture:** ${params.companyInsights.culture}
2065: **Company Values:** ${params.companyInsights.values.join(', ')}
2066: **Industry:** ${params.companyInsights.industry}
2067: 
2068: **Template Style (${params.template}):** ${templateStyle}
2069: 
2070: Generate TWO resume variants:
2071: 1. **Variant A (Achievement-Focused):** Emphasize quantifiable achievements and metrics. ${templateStyle}
2072: 2. **Variant B (Skills-Focused):** Highlight technical skills and competencies. ${templateStyle}
2073: 
2074: CRITICAL FORMATTING REQUIREMENTS:
2075: - Use proper line breaks (\\n\\n for sections, \\n for lines)
2076: - DO NOT include name, email, phone, or address in the resume body
2077: - Personal contact info will be added separately by the template
2078: - Start directly with PROFESSIONAL SUMMARY or first section
2079: - Use clear section headers (PROFESSIONAL SUMMARY, EXPERIENCE, EDUCATION, SKILLS)
2080: - Format each job entry with: Title\\nCompany | Location | Dates\\n• Achievement 1\\n• Achievement 2
2081: - Keep bullet points aligned with • symbol
2082: - Ensure proper spacing between sections
2083: - NO markdown formatting (no **, no #, no _)
2084: - Plain text only with line breaks
2085: - INCLUDE ALL job history from original resume
2086: 
2087: CRITICAL - PERSONAL INFO:
2088: - DO NOT include the person's name anywhere in the resume body
2089: - DO NOT include email address in the resume body
2090: - DO NOT include phone number in the resume body
2091: - DO NOT include physical address in the resume body
2092: - These will be added by the template header automatically
2093: - Start the resume body with the PROFESSIONAL SUMMARY section
2094: 
2095: For each variant, rewrite the resume to:
2096: - Match keywords from job requirements
2097: - Align with company culture and values
2098: - Use industry-specific terminology appropriate for ${params.template} template
2099: - Optimize for ATS (Applicant Tracking Systems)
2100: - Keep formatting clean and professional
2101: - Apply ${params.template} template style throughout
2102: - NEVER duplicate personal contact information
2103: 
2104: Also provide 3-5 strategic recommendations for improving the resume.
2105: 
2106: Return ONLY valid JSON:
2107: {
2108:   "variantA": "Full resume text WITHOUT personal info (starts with PROFESSIONAL SUMMARY)...",
2109:   "variantB": "Full resume text WITHOUT personal info (starts with PROFESSIONAL SUMMARY)...",
2110:   "recommendations": ["Recommendation 1", "Recommendation 2", ...]
2111: }`
2112: 
2113:       const response = await withRetry(
2114:         () => client.makeRequest(systemPrompt, userPrompt, { temperature: 0.2, maxTokens: 4000, model: 'sonar-pro' }),
2115:         MAX_RETRY_ATTEMPTS
2116:       )
2117: 
2118:       const parsed = parseAIResponse<{
2119:         variantA: string
2120:         variantB: string
2121:         recommendations: string[]
2122:       }>(response.content)
2123: 
2124:       const data = {
2125:         variantA: parsed.variantA || params.resumeText,
2126:         variantB: parsed.variantB || params.resumeText,
2127:         recommendations: Array.isArray(parsed.recommendations) ? parsed.recommendations : []
2128:       }
2129: 
2130:       setCache(cacheKey, data)
2131: 
2132:       return {
2133:         success: true,
2134:         data,
2135:         metadata: { requestId, timestamp: started, duration: Date.now() - started },
2136:         cached: false
2137:       }
2138:     } catch (error) {
2139:       console.error('[RESUME_VARIANTS] Error:', error)
2140:       return {
2141:         success: false,
2142:         data: {
2143:           variantA: params.resumeText,
2144:           variantB: params.resumeText,
2145:           recommendations: []
2146:         },
2147:         metadata: { 
2148:           requestId, 
2149:           timestamp: started, 
2150:           duration: Date.now() - started,
2151:           error: (error as Error).message 
2152:         },
2153:         cached: false
2154:       }
2155:     }
2156:   }
2157: 
2158:   // Cover Letter Generator: Create personalized cover letters using templates
2159:   static async generateCoverLetters(params: {
2160:     jobTitle: string
2161:     company: string
2162:     jobRequirements: string[]
2163:     resumeText: string
2164:     companyInsights: {
2165:       culture: string
2166:       values: string[]
2167:       recentNews: Array<{ title: string; summary: string }>
2168:     }
2169:     hiringManager?: { name: string; title: string }
2170:     userName?: string
2171:     templateId?: string
2172:   }): Promise<EnhancedResponse<{
2173:     variantA: string
2174:     variantB: string
2175:     personalization: string[]
2176:   }>> {
2177:     const requestId = generateRequestId()
2178:     const started = Date.now()
2179:     const cacheKey = makeKey('cover-letters', params)
2180:     
2181:     const cached = getCache(cacheKey)
2182:     if (cached) {
2183:       return {
2184:         success: true,
2185:         data: cached as { variantA: string; variantB: string; personalization: string[] },
2186:         metadata: { requestId, timestamp: started, duration: 0 },
2187:         cached: true
2188:       }
2189:     }
2190: 
2191:     try {
2192:       // CRITICAL FIX: Calculate years of experience to prevent hallucinations
2193:       const yearsExperience = calculateYearsFromResume(params.resumeText)
2194:       if (process.env.PPX_DEBUG === 'true') {
2195:         console.log('[COVER_LETTERS] Calculated experience:', yearsExperience, 'years')
2196:       }
2197: 
2198:       // Get templates - use professional and modern as defaults
2199:       const templateA = getCoverLetterTemplateById(params.templateId || 'professional')
2200:       const templateB = getCoverLetterTemplateById('modern')
2201: 
2202:       const client = createClient()
2203:       const systemPrompt = `You are an expert cover letter writer. Use the provided templates as structure guides and fill them with personalized content from the candidate's resume.
2204: 
2205: CRITICAL EXPERIENCE CONSTRAINT:
2206: - Candidate has EXACTLY ${yearsExperience} years of total work experience
2207: - DO NOT say "decades", "38 years", or any number higher than ${yearsExperience}
2208: - If ${yearsExperience} < 10, say "several years" or "${yearsExperience} years"
2209: - If ${yearsExperience} >= 10 && ${yearsExperience} < 20, say "${yearsExperience} years" or "over a decade"
2210: - If ${yearsExperience} >= 20, say "${yearsExperience} years" or "two decades"
2211: - NEVER invent or exaggerate experience duration
2212: - Use ONLY the experience data provided in the resume
2213: 
2214: Return only valid JSON.`
2215: 
2216:       const userPrompt = `Create TWO personalized cover letter variants using these templates as guides:
2217: 
2218: **TEMPLATE A (${templateA.name}):**
2219: ${templateA.template}
2220: 
2221: **TEMPLATE B (${templateB.name}):**
2222: ${templateB.template}
2223: 
2224: **Job Details:**
2225: - Job Title: ${params.jobTitle}
2226: - Company: ${params.company}
2227: - Hiring Manager: ${params.hiringManager?.name || 'Hiring Manager'}
2228: - Applicant: ${params.userName || '[Your Name]'}
2229: 
2230: **Key Requirements:**
2231: ${params.jobRequirements.map((req, i) => `${i + 1}. ${req}`).join('\n')}
2232: 
2233: **Resume Content (${yearsExperience} years experience):**
2234: ${params.resumeText.slice(0, 1500)}
2235: 
2236: **Company Research:**
2237: - Culture: ${params.companyInsights.culture}
2238: - Values: ${params.companyInsights.values.join(', ')}
2239: - Recent News: ${params.companyInsights.recentNews.map(n => n.title).join(', ')}
2240: 
2241: **Instructions:**
2242: 1. Fill in ALL placeholders in the templates with actual data
2243: 2. Replace [X years] with "${yearsExperience} years" (EXACT number)
2244: 3. Use real achievements from resume with metrics
2245: 4. Reference specific company news/values
2246: 5. Keep the template structure but personalize content
2247: 6. Variant A: Use Template A structure
2248: 7. Variant B: Use Template B structure
2249: 
2250: CRITICAL RULES:
2251: - Experience: EXACTLY ${yearsExperience} years (no more, no less)
2252: - NO generic phrases like "proven track record" without specifics
2253: - NO casual language like "Here's what most people don't realize"
2254: - ALL achievements must come from the actual resume
2255: - Keep professional and mature tone
2256: 
2257: Return ONLY valid JSON:
2258: {
2259:   "variantA": "Full cover letter text using Template A structure...",
2260:   "variantB": "Full cover letter text using Template B structure...",
2261:   "personalization": ["Tip 1", "Tip 2", "Tip 3"]
2262: }`
2263: 
2264:       const response = await withRetry(
2265:         () => client.makeRequest(systemPrompt, userPrompt, { temperature: 0.3, maxTokens: 4000, model: 'sonar-pro' }),
2266:         MAX_RETRY_ATTEMPTS
2267:       )
2268: 
2269:       const parsed = parseAIResponse<{
2270:         variantA: string
2271:         variantB: string
2272:         personalization: string[]
2273:       }>(response.content)
2274: 
2275:       const data = {
2276:         variantA: parsed.variantA || 'Cover letter generation failed',
2277:         variantB: parsed.variantB || 'Cover letter generation failed',
2278:         personalization: Array.isArray(parsed.personalization) ? parsed.personalization : []
2279:       }
2280: 
2281:       setCache(cacheKey, data)
2282: 
2283:       return {
2284:         success: true,
2285:         data,
2286:         metadata: { requestId, timestamp: started, duration: Date.now() - started },
2287:         cached: false
2288:       }
2289:     } catch (error) {
2290:       console.error('[COVER_LETTERS] Error:', error)
2291:       return {
2292:         success: false,
2293:         data: {
2294:           variantA: 'Cover letter generation failed',
2295:           variantB: 'Cover letter generation failed',
2296:           personalization: []
2297:         },
2298:         metadata: { 
2299:           requestId, 
2300:           timestamp: started, 
2301:           duration: Date.now() - started,
2302:           error: (error as Error).message 
2303:         },
2304:         cached: false
2305:       }
2306:     }
2307:   }
2308: 
2309:   // Email Outreach Generator: Create personalized email templates
2310:   static async generateEmailOutreach(params: {
2311:     hiringContact: { name: string; title: string; email?: string }
2312:     jobTitle: string
2313:     company: string
2314:     resumeHighlights: string[]
2315:   }): Promise<EnhancedResponse<{
2316:     subjects: string[]
2317:     templates: Array<{ type: 'formal' | 'conversational'; body: string }>
2318:     mailtoLink: string
2319:   }>> {
2320:     const requestId = generateRequestId()
2321:     const started = Date.now()
2322:     const cacheKey = makeKey('email-outreach', params)
2323:     
2324:     const cached = getCache(cacheKey)
2325:     if (cached) {
2326:       return {
2327:         success: true,
2328:         data: cached as { subjects: string[]; templates: Array<{ type: 'formal' | 'conversational'; body: string }>; mailtoLink: string },
2329:         metadata: { requestId, timestamp: started, duration: 0 },
2330:         cached: true
2331:       }
2332:     }
2333: 
2334:     try {
2335:       const client = createClient()
2336:       const systemPrompt = 'You are an expert at professional networking and cold email outreach. Return only valid JSON.'
2337:       const userPrompt = `Create personalized email outreach templates for contacting a hiring manager.
2338: 
2339: **Hiring Contact:** ${params.hiringContact.name}, ${params.hiringContact.title}
2340: **Job Title:** ${params.jobTitle}
2341: **Company:** ${params.company}
2342: 
2343: **Resume Highlights:**
2344: ${params.resumeHighlights.map((h, i) => `${i + 1}. ${h}`).join('\n')}
2345: 
2346: Generate:
2347: 1. **3 email subject lines** (varied approaches: direct, curious, value-focused)
2348: 2. **2 email templates:**
2349:    - Formal: Professional, respectful tone
2350:    - Conversational: Friendly, engaging tone
2351: 
2352: Each template should:
2353: - Be concise (150-200 words)
2354: - Reference the hiring manager by name
2355: - Show genuine interest in the role/company
2356: - Highlight 1-2 relevant achievements
2357: - Include a clear call-to-action
2358: - Be personalized, not generic
2359: 
2360: Return ONLY valid JSON:
2361: {
2362:   "subjects": ["Subject 1", "Subject 2", "Subject 3"],
2363:   "templates": [
2364:     { "type": "formal", "body": "Email body..." },
2365:     { "type": "conversational", "body": "Email body..." }
2366:   ]
2367: }`
2368: 
2369:       const response = await withRetry(
2370:         () => client.makeRequest(systemPrompt, userPrompt, { temperature: 0.4, maxTokens: 3000, model: 'sonar-pro' }),
2371:         MAX_RETRY_ATTEMPTS
2372:       )
2373: 
2374:       const parsed = parseAIResponse<{
2375:         subjects: string[]
2376:         templates: Array<{ type: 'formal' | 'conversational'; body: string }>
2377:       }>(response.content)
2378: 
2379:       const mailtoLink = params.hiringContact.email 
2380:         ? `mailto:${params.hiringContact.email}?subject=${encodeURIComponent(parsed.subjects?.[0] || 'Inquiry about ' + params.jobTitle)}`
2381:         : ''
2382: 
2383:       const data = {
2384:         subjects: Array.isArray(parsed.subjects) ? parsed.subjects : [],
2385:         templates: Array.isArray(parsed.templates) ? parsed.templates : [],
2386:         mailtoLink
2387:       }
2388: 
2389:       setCache(cacheKey, data)
2390: 
2391:       return {
2392:         success: true,
2393:         data,
2394:         metadata: { requestId, timestamp: started, duration: Date.now() - started },
2395:         cached: false
2396:       }
2397:     } catch (error) {
2398:       console.error('[EMAIL_OUTREACH] Error:', error)
2399:       return {
2400:         success: false,
2401:         data: {
2402:           subjects: [],
2403:           templates: [],
2404:           mailtoLink: ''
2405:         },
2406:         metadata: { 
2407:           requestId, 
2408:           timestamp: started, 
2409:           duration: Date.now() - started,
2410:           error: (error as Error).message 
2411:         },
2412:         cached: false
2413:       }
2414:     }
2415:   }
2416: 
2417:   /**
2418:    * AGENT-POWERED: Job search with 95%+ reliability
2419:    * Uses NEW orchestrator-based agent system with Perplexity web_search + Cheerio fallback
2420:    * Searches 15+ job boards in parallel
2421:    */
2422:   static async jobListingsWithAgent(
2423:     jobTitle: string,
2424:     location: string,
2425:     options?: { maxResults?: number; workType?: 'remote'|'hybrid'|'onsite'|'any' }
2426:   ): Promise<EnhancedResponse<JobListing[]>> {
2427:     const started = Date.now()
2428:     const requestId = generateRequestId()
2429: 
2430:     console.log('🤖 [INTELLIGENCE] Starting NEW agent-powered job search...')
2431:     console.log(`📋 [INTELLIGENCE] Job: "${jobTitle}" in "${location}"`)
2432:     console.log(`🎯 [INTELLIGENCE] Max results: ${options?.maxResults || 30}`)
2433: 
2434:     try {
2435:       const { AgentOrchestrator } = await import('./agents/agent-orchestrator')
2436:       
2437:       const orchestrator = new AgentOrchestrator()
2438: 
2439:       const task = {
2440:         id: requestId,
2441:         type: 'job_search' as const,
2442:         input: { 
2443:           jobTitle, 
2444:           location, 
2445:           maxResults: options?.maxResults || 30,
2446:           workType: options?.workType
2447:         },
2448:         priority: 1 as const
2449:       }
2450: 
2451:       const result = await orchestrator.executeTask(task)
2452: 
2453:       if (!result.success || !result.data || result.data.length === 0) {
2454:         console.warn('⚠️ [INTELLIGENCE] Agent found no jobs, using fallback method')
2455:         return await this.jobMarketAnalysisV2(location, '', {
2456:           roleHint: jobTitle,
2457:           maxResults: options?.maxResults,
2458:           workType: options?.workType
2459:         })
2460:       }
2461: 
2462:       console.log(`✅ [INTELLIGENCE] Agent found ${result.data.length} jobs`)
2463:       console.log(`📊 [INTELLIGENCE] Confidence: ${result.confidence}, Method: ${result.method}`)
2464: 
2465:       return {
2466:         success: true,
2467:         data: result.data,
2468:         metadata: {
2469:           requestId,
2470:           timestamp: started,
2471:           duration: result.duration,
2472:           reasoning: result.reasoning,
2473:           confidence: result.confidence,
2474:           method: result.method,
2475:           sources: result.sources.length
2476:         },
2477:         cached: false
2478:       }
2479:     } catch (error) {
2480:       console.error('❌ [INTELLIGENCE] Agent system failed:', error)
2481:       console.log('🔄 [INTELLIGENCE] Falling back to standard method...')
2482:       
2483:       return await this.jobMarketAnalysisV2(location, '', {
2484:         roleHint: jobTitle,
2485:         maxResults: options?.maxResults,
2486:         workType: options?.workType
2487:       })
2488:     }
2489:   }
2490: 
2491:   /**
2492:    * AGENT-POWERED: Hiring contacts with 95%+ reliability
2493:    * Uses NEW orchestrator-based agent system with Perplexity + Hunter.io verification
2494:    * Returns empty array if no verified contacts (NO GUESSING)
2495:    */
2496:   static async hiringContactsWithAgent(
2497:     companyName: string,
2498:     companyDomain?: string
2499:   ): Promise<EnhancedResponse<HiringContact[]>> {
2500:     const started = Date.now()
2501:     const requestId = generateRequestId()
2502: 
2503:     console.log('🤖 [INTELLIGENCE] Starting NEW agent-powered contact research...')
2504:     console.log(`🏢 [INTELLIGENCE] Company: "${companyName}"`)
2505:     console.log(`🌐 [INTELLIGENCE] Domain: ${companyDomain || 'auto-detect'}`)
2506: 
2507:     try {
2508:       const { AgentOrchestrator } = await import('./agents/agent-orchestrator')
2509:       
2510:       const orchestrator = new AgentOrchestrator()
2511: 
2512:       const task = {
2513:         id: requestId,
2514:         type: 'contact_research' as const,
2515:         input: { 
2516:           companyName,
2517:           companyDomain
2518:         },
2519:         priority: 1 as const
2520:       }
2521: 
2522:       const result = await orchestrator.executeTask(task)
2523: 
2524:       if (!result.success || !result.data || result.data.length === 0) {
2525:         console.warn('⚠️ [INTELLIGENCE] No verified contacts found')
2526:         return {
2527:           success: false,
2528:           data: [],
2529:           metadata: {
2530:             requestId,
2531:             timestamp: started,
2532:             duration: result.duration,
2533:             error: `No verified hiring contacts found for ${companyName}. Visit company website or use LinkedIn InMail.`,
2534:             reasoning: result.reasoning
2535:           },
2536:           cached: false
2537:         }
2538:       }
2539: 
2540:       console.log(`✅ [INTELLIGENCE] Found ${result.data.length} verified contacts`)
2541:       console.log(`📊 [INTELLIGENCE] Confidence: ${result.confidence}`)
2542: 
2543:       return {
2544:         success: true,
2545:         data: result.data,
2546:         metadata: {
2547:           requestId,
2548:           timestamp: started,
2549:           duration: result.duration,
2550:           reasoning: result.reasoning,
2551:           confidence: result.confidence,
2552:           method: result.method,
2553:           sources: result.sources.length
2554:         },
2555:         cached: false
2556:       }
2557:     } catch (error) {
2558:       console.error('❌ [INTELLIGENCE] Contact agent system failed:', error)
2559:       console.log('🔄 [INTELLIGENCE] Falling back to standard method...')
2560:       return await this.hiringContactsV2(companyName)
2561:     }
2562:   }
2563: 
2564:   /**
2565:    * Clear cache entries (admin utility)
2566:    * @param prefix - Optional prefix to clear specific cache entries
2567:    * @returns Number of entries cleared
2568:    */
2569:   static clearCache(prefix?: string): number {
2570:     if (!prefix) {
2571:       const size = cache.size
2572:       cache.clear()
2573:       return size
2574:     }
2575:     
2576:     let cleared = 0
2577:     for (const key of cache.keys()) {
2578:       if (key.startsWith(prefix)) {
2579:         cache.delete(key)
2580:         cleared++
2581:       }
2582:     }
2583:     return cleared
2584:   }
2585: 
2586:   /**
2587:    * Get cache statistics (admin utility)
2588:    * @returns Cache stats including size, hit counts, and breakdown by prefix
2589:    */
2590:   static getCacheStats(): {
2591:     totalEntries: number
2592:     totalHits: number
2593:     breakdown: Record<string, { count: number; hits: number }>
2594:   } {
2595:     const breakdown: Record<string, { count: number; hits: number }> = {}
2596:     let totalHits = 0
2597: 
2598:     for (const [key, record] of cache.entries()) {
2599:       const prefix = key.split(':')[0] || 'unknown'
2600:       if (!breakdown[prefix]) {
2601:         breakdown[prefix] = { count: 0, hits: 0 }
2602:       }
2603:       breakdown[prefix].count++
2604:       breakdown[prefix].hits += record.metadata.hitCount
2605:       totalHits += record.metadata.hitCount
2606:     }
2607: 
2608:     return {
2609:       totalEntries: cache.size,
2610:       totalHits,
2611:       breakdown
2612:     }
2613:   }
2614: 
2615:   /**
2616:    * Custom query to Perplexity API (flexible utility)
2617:    * @param options - Query options including prompts and parameters
2618:    * @returns API response content
2619:    */
2620:   static async customQuery(options: {
2621:     systemPrompt: string
2622:     userPrompt: string
2623:     temperature?: number
2624:     maxTokens?: number
2625:     model?: 'sonar' | 'sonar-pro'
2626:   }): Promise<{ content: string }> {
2627:     const client = createClient()
2628:     const response = await client.makeRequest(
2629:       options.systemPrompt,
2630:       options.userPrompt,
2631:       {
2632:         temperature: options.temperature || 0.2,
2633:         maxTokens: options.maxTokens || 4000,
2634:         model: options.model || 'sonar-pro'
2635:       }
2636:     )
2637:     return { content: response.content }
2638:   }
2639: 
2640:   /**
2641:    * Get recommended job boards based on location
2642:    * @param location - User's location (e.g., "Toronto", "Canada", "USA")
2643:    * @returns Array of recommended job board names
2644:    */
2645:   static getRecommendedBoards(location: string): string[] {
2646:     const lowerLocation = location.toLowerCase()
2647:     const isCanadian = lowerLocation.includes('canada') || 
2648:                        lowerLocation.includes('toronto') || 
2649:                        lowerLocation.includes('vancouver') || 
2650:                        lowerLocation.includes('montreal') ||
2651:                        lowerLocation.includes('calgary') ||
2652:                        lowerLocation.includes('ottawa')
2653: 
2654:     if (isCanadian) {
2655:       return [
2656:         'Indeed Canada',
2657:         'Workopolis',
2658:         'Job Bank (Canada)',
2659:         'LinkedIn',
2660:         'Glassdoor',
2661:         'Monster Canada',
2662:         'CareerBuilder Canada',
2663:         'Eluta.ca',
2664:         'CharityVillage (Non-profit)',
2665:         'TechTO (Tech jobs)'
2666:       ]
2667:     }
2668: 
2669:     // Default US/International boards
2670:     return [
2671:       'Indeed',
2672:       'LinkedIn',
2673:       'Glassdoor',
2674:       'Monster',
2675:       'CareerBuilder',
2676:       'ZipRecruiter',
2677:       'SimplyHired',
2678:       'Dice (Tech)',
2679:       'AngelList (Startups)',
2680:       'RemoteOK (Remote)'
2681:     ]
2682:   }
2683: 
2684:   /**
2685:    * Get list of available job boards
2686:    * @returns Array of job board objects with name and URL
2687:    */
2688:   static getAvailableJobBoards(): Array<{ name: string; url: string; region: string }> {
2689:     return [
2690:       { name: 'Indeed', url: 'https://www.indeed.com', region: 'Global' },
2691:       { name: 'LinkedIn', url: 'https://www.linkedin.com/jobs', region: 'Global' },
2692:       { name: 'Glassdoor', url: 'https://www.glassdoor.com', region: 'Global' },
2693:       { name: 'Monster', url: 'https://www.monster.com', region: 'Global' },
2694:       { name: 'CareerBuilder', url: 'https://www.careerbuilder.com', region: 'US' },
2695:       { name: 'ZipRecruiter', url: 'https://www.ziprecruiter.com', region: 'US' },
2696:       { name: 'SimplyHired', url: 'https://www.simplyhired.com', region: 'US' },
2697:       { name: 'Dice', url: 'https://www.dice.com', region: 'US (Tech)' },
2698:       { name: 'Indeed Canada', url: 'https://ca.indeed.com', region: 'Canada' },
2699:       { name: 'Workopolis', url: 'https://www.workopolis.com', region: 'Canada' },
2700:       { name: 'Job Bank', url: 'https://www.jobbank.gc.ca', region: 'Canada' },
2701:       { name: 'Eluta', url: 'https://www.eluta.ca', region: 'Canada' },
2702:       { name: 'AngelList', url: 'https://angel.co/jobs', region: 'Startups' },
2703:       { name: 'RemoteOK', url: 'https://remoteok.com', region: 'Remote' },
2704:       { name: 'We Work Remotely', url: 'https://weworkremotely.com', region: 'Remote' }
2705:     ]
2706:   }
2707: 
2708:   /**
2709:    * Extract career timeline from resume
2710:    * @param resumeText - Resume text content
2711:    * @returns Career timeline with industries and experience
2712:    */
2713:   static async extractCareerTimeline(resumeText: string): Promise<{
2714:     industries: Array<{ name: string; percentage: number; years: number }>
2715:     totalYears: number
2716:     primaryIndustry: string
2717:   }> {
2718:     const client = createClient()
2719:     const prompt = `Analyze this resume and extract the career timeline:
2720: 
2721: ${resumeText.slice(0, 3000)}
2722: 
2723: Return ONLY valid JSON with this structure:
2724: {
2725:   "industries": [
2726:     { "name": "Industry Name", "percentage": 40, "years": 5 },
2727:     { "name": "Another Industry", "percentage": 30, "years": 3 }
2728:   ],
2729:   "totalYears": 8,
2730:   "primaryIndustry": "Most relevant industry"
2731: }
2732: 
2733: Rules:
2734: - List all industries worked in
2735: - Calculate percentage of time in each
2736: - Count years of experience per industry
2737: - Identify primary/dominant industry`
2738: 
2739:     const response = await client.makeRequest(
2740:       'You are a career analyst. Extract career timeline data. Return ONLY valid JSON.',
2741:       prompt,
2742:       { temperature: 0.2, maxTokens: 1000, model: 'sonar-pro' }
2743:     )
2744: 
2745:     try {
2746:       const parsed = parseAIResponse<{
2747:         industries: Array<{ name: string; percentage: number; years: number }>
2748:         totalYears: number
2749:         primaryIndustry: string
2750:       }>(response.content)
2751: 
2752:       return {
2753:         industries: parsed.industries || [],
2754:         totalYears: parsed.totalYears || 0,
2755:         primaryIndustry: parsed.primaryIndustry || (parsed.industries?.[0]?.name || 'Unknown')
2756:       }
2757:     } catch {
2758:       // Fallback if parsing fails
2759:       return {
2760:         industries: [{ name: 'General', percentage: 100, years: 0 }],
2761:         totalYears: 0,
2762:         primaryIndustry: 'General'
2763:       }
2764:     }
2765:   }
2766: 
2767:   /**
2768:    * Enhanced company research with comprehensive data
2769:    * @param params - Company name, job title, location
2770:    * @returns Enhanced company research data
2771:    */
2772:   static async enhancedCompanyResearch(params: {
2773:     companyName: string
2774:     jobTitle?: string
2775:     location?: string
2776:   }): Promise<EnhancedResponse<IntelligenceResponse>> {
2777:     // Use existing researchCompanyV2 as the base
2778:     return await this.researchCompanyV2({
2779:       company: params.companyName,
2780:       role: params.jobTitle,
2781:       geo: params.location
2782:     })
2783:   }
2784: }
</file>

</files>
